
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000199cc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019b90  08019b90  00029b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a58c  0801a58c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a58c  0801a58c  0002a58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a594  0801a594  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a594  0801a594  0002a594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a59c  0801a59c  0002a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a5a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ac0  200001e0  0801a77c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046ca0  0801a77c  00036ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b117  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b323  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265b7  00000000  00000000  000ac7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011109f  00000000  00000000  000d2d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a758  00000000  00000000  001e3e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019b74 	.word	0x08019b74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019b74 	.word	0x08019b74

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fa72 	bl	800b4c0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044798 	.word	0x20044798

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fa5a 	bl	800b4c0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044798 	.word	0x20044798

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f8fb 	bl	800b21c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fe62 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fe5c 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fe56 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fe50 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fe4a 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fe44 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fe3e 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fe38 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fe32 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fe2c 	bl	8009cf0 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fe20 	bl	8009cf0 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fe1a 	bl	8009cf0 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f8ed 	bl	8017308 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ff2a 	bl	800f050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ff26 	bl	800f050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ff22 	bl	800f050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ff1e 	bl	800f050 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044884 	.word	0x20044884
 8001248:	200447ec 	.word	0x200447ec
 800124c:	2004490c 	.word	0x2004490c

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044884 	.word	0x20044884
 800137c:	2004490c 	.word	0x2004490c
 8001380:	200447ec 	.word	0x200447ec

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044884 	.word	0x20044884
 80013c4:	200447ec 	.word	0x200447ec
 80013c8:	2004490c 	.word	0x2004490c

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fede 	bl	800f1f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d feda 	bl	800f1f0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449ec 	.word	0x200449ec
 8001458:	200446d0 	.word	0x200446d0
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fa6e 	bl	8013ca4 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200435dc 	.word	0x200435dc

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fe2d 	bl	8016470 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fab2 	bl	8013d8c <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 faad 	bl	8013d8c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f81b 	bl	801387a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019b90 	.word	0x08019b90
 8001870:	2004354c 	.word	0x2004354c
 8001874:	200435dc 	.word	0x200435dc
 8001878:	200435cc 	.word	0x200435cc

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fa29 	bl	8013cf8 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fc94 	bl	80141d4 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fa23 	bl	8013cf8 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fdc8 	bl	8016470 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fa50 	bl	8013d8c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 ffbe 	bl	801387a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 f9c2 	bl	8013ca4 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	2004344c 	.word	0x2004344c
 8001930:	2004230c 	.word	0x2004230c
 8001934:	08019bac 	.word	0x08019bac
 8001938:	08019b90 	.word	0x08019b90
 800193c:	2004354c 	.word	0x2004354c
 8001940:	200435dc 	.word	0x200435dc
 8001944:	200435cc 	.word	0x200435cc

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fdcb 	bl	8016518 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fdf2 	bl	8014590 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 f974 	bl	8013ca4 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019b9c 	.word	0x08019b9c
 80019cc:	2004354c 	.word	0x2004354c
 80019d0:	200435dc 	.word	0x200435dc

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fd85 	bl	8016518 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fdac 	bl	8014590 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 f92e 	bl	8013ca4 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019ba8 	.word	0x08019ba8
 8001a58:	2004354c 	.word	0x2004354c
 8001a5c:	200435dc 	.word	0x200435dc

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 f937 	bl	8013cf8 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fba2 	bl	80141d4 <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 f931 	bl	8013cf8 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fcdc 	bl	8016470 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 f964 	bl	8013d8c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 fed2 	bl	801387a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 f8d6 	bl	8013ca4 <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2004344c 	.word	0x2004344c
 8001b08:	2004230c 	.word	0x2004230c
 8001b0c:	08019bac 	.word	0x08019bac
 8001b10:	08019bb0 	.word	0x08019bb0
 8001b14:	2004354c 	.word	0x2004354c
 8001b18:	200435dc 	.word	0x200435dc
 8001b1c:	200435cc 	.word	0x200435cc

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fb30 	bl	8013194 <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019bb8 	.word	0x08019bb8
 8001b54:	2004240c 	.word	0x2004240c

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fd03 	bl	8016570 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fcff 	bl	8016570 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2004344c 	.word	0x2004344c
 8001b80:	2004230c 	.word	0x2004230c

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fbe5 	bl	8014358 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 f8b2 	bl	8013cf8 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fb41 	bl	8013220 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 f8aa 	bl	8013cf8 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2004344c 	.word	0x2004344c
 8001bac:	2004230c 	.word	0x2004230c
 8001bb0:	200435dc 	.word	0x200435dc
 8001bb4:	08019bac 	.word	0x08019bac

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2004354c 	.word	0x2004354c

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fb08 	bl	800b21c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fcb1 	bl	800e57c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fdde 	bl	800e7e4 <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 faf4 	bl	800b21c <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044678 	.word	0x20044678

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fad7 	bl	800b21c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fc80 	bl	800e57c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fc7a 	bl	800e57c <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fac4 	bl	800b21c <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044678 	.word	0x20044678

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20044614 	.word	0x20044614
 8001d64:	20044612 	.word	0x20044612
 8001d68:	2004460c 	.word	0x2004460c

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f007 ff82 	bl	8009cf0 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019bbc 	.word	0x08019bbc
 8001df8:	08019bc8 	.word	0x08019bc8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	20044614 	.word	0x20044614
 8001ebc:	20044612 	.word	0x20044612
 8001ec0:	2004460c 	.word	0x2004460c
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f007 febc 	bl	8009cf0 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f007 fe66 	bl	8009cf0 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019bcc 	.word	0x08019bcc
 800208c:	08019bd8 	.word	0x08019bd8

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fa07 	bl	800b4c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fafb 	bl	800b6bc <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2004482c 	.word	0x2004482c

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 f9cf 	bl	800b4c0 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	2004482c 	.word	0x2004482c

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 f825 	bl	800b1ec <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 f815 	bl	800b1ec <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 f804 	bl	800b1ec <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f008 fff4 	bl	800b1ec <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f008 ffe4 	bl	800b1ec <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f008 ffd5 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f008 ffcf 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 ffc9 	bl	800b21c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f008 ffbf 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f008 ffb9 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 ffb3 	bl	800b21c <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f008 ffa9 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f008 ffa3 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 ff9d 	bl	800b21c <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f008 ff93 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f008 ff8d 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 ff87 	bl	800b21c <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f008 ff7d 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f008 ff77 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 ff71 	bl	800b21c <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f008 ff67 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f008 ff61 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 ff5b 	bl	800b21c <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f008 ff51 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f008 ff4b 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f008 ff45 	bl	800b21c <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f008 ff3b 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f008 ff35 	bl	800b21c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f008 ff2f 	bl	800b21c <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f008 ff16 	bl	800b21c <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f008 ff0b 	bl	800b21c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f008 ff01 	bl	800b21c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f008 fef6 	bl	800b21c <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fc4e 	bl	8009dbc <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20044750 	.word	0x20044750

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 fa8b 	bl	8009cf0 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fcfa 	bl	800531c <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019be4 	.word	0x08019be4
 8002a04:	08019bf0 	.word	0x08019bf0
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aba:	eef0 7ae7 	vabs.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b64:	3352      	adds	r3, #82	; 0x52
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b7c:	3388      	adds	r3, #136	; 0x88
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b88:	338a      	adds	r3, #138	; 0x8a
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b94:	338c      	adds	r3, #140	; 0x8c
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba0:	338e      	adds	r3, #142	; 0x8e
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bac:	338f      	adds	r3, #143	; 0x8f
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bb8:	3390      	adds	r3, #144	; 0x90
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc4:	3394      	adds	r3, #148	; 0x94
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bd2:	3398      	adds	r3, #152	; 0x98
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002be0:	339c      	adds	r3, #156	; 0x9c
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bee:	33a0      	adds	r3, #160	; 0xa0
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bfc:	33a4      	adds	r3, #164	; 0xa4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c08:	33a6      	adds	r3, #166	; 0xa6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a3a      	ldr	r2, [r7, #32]
 8002c24:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c30:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c44:	2300      	movs	r3, #0
 8002c46:	82fb      	strh	r3, [r7, #22]
 8002c48:	8afb      	ldrh	r3, [r7, #22]
 8002c4a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d80d      	bhi.n	8002c6e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c66:	8afb      	ldrh	r3, [r7, #22]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	82fb      	strh	r3, [r7, #22]
 8002c6c:	e7ec      	b.n	8002c48 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c6e:	2300      	movs	r3, #0
 8002c70:	82bb      	strh	r3, [r7, #20]
 8002c72:	8abb      	ldrh	r3, [r7, #20]
 8002c74:	2b63      	cmp	r3, #99	; 0x63
 8002c76:	d80d      	bhi.n	8002c94 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c78:	8abb      	ldrh	r3, [r7, #20]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c80:	3316      	adds	r3, #22
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c8c:	8abb      	ldrh	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	82bb      	strh	r3, [r7, #20]
 8002c92:	e7ee      	b.n	8002c72 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c94:	2300      	movs	r3, #0
 8002c96:	827b      	strh	r3, [r7, #18]
 8002c98:	8a7b      	ldrh	r3, [r7, #18]
 8002c9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c9e:	d20d      	bcs.n	8002cbc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002ca0:	8a7b      	ldrh	r3, [r7, #18]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002ca8:	333a      	adds	r3, #58	; 0x3a
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cb4:	8a7b      	ldrh	r3, [r7, #18]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	827b      	strh	r3, [r7, #18]
 8002cba:	e7ed      	b.n	8002c98 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	823b      	strh	r3, [r7, #16]
 8002cc0:	8a3b      	ldrh	r3, [r7, #16]
 8002cc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc6:	d20d      	bcs.n	8002ce4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002cc8:	8a3b      	ldrh	r3, [r7, #16]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002cd0:	332e      	adds	r3, #46	; 0x2e
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cdc:	8a3b      	ldrh	r3, [r7, #16]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	823b      	strh	r3, [r7, #16]
 8002ce2:	e7ed      	b.n	8002cc0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d40:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	ee07 3a90 	vmov	s15, r3

}
 8002d50:	eeb0 0a67 	vmov.f32	s0, s15
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000025c 	.word	0x2000025c
 8002d64:	00000000 	.word	0x00000000

08002d68 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffbf 	bl	8002cf4 <_ZN9LineTrace9calcErrorEv>
 8002d76:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d9a:	3354      	adds	r3, #84	; 0x54
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d14c      	bne.n	8002e3e <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002daa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dce:	ee17 0a90 	vmov	r0, s15
 8002dd2:	f7fd fbd1 	bl	8000578 <__aeabi_f2d>
 8002dd6:	a350      	add	r3, pc, #320	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fd4e 	bl	800087c <__aeabi_ddiv>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	f7fd ff16 	bl	8000c18 <__aeabi_d2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fbbf 	bl	8000578 <__aeabi_f2d>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbb2 	bl	8000578 <__aeabi_f2d>
 8002e14:	a340      	add	r3, pc, #256	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fc05 	bl	8000628 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fa49 	bl	80002bc <__adddf3>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4621      	mov	r1, r4
 8002e32:	f7fd fef1 	bl	8000c18 <__aeabi_d2f>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e04b      	b.n	8002ed6 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e68:	ee17 0a90 	vmov	r0, s15
 8002e6c:	f7fd fb84 	bl	8000578 <__aeabi_f2d>
 8002e70:	a329      	add	r3, pc, #164	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fd01 	bl	800087c <__aeabi_ddiv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4621      	mov	r1, r4
 8002e82:	f7fd fec9 	bl	8000c18 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb72 	bl	8000578 <__aeabi_f2d>
 8002e94:	4604      	mov	r4, r0
 8002e96:	460d      	mov	r5, r1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb65 	bl	8000578 <__aeabi_f2d>
 8002eae:	a31a      	add	r3, pc, #104	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f7fd fbb8 	bl	8000628 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd f9fc 	bl	80002bc <__adddf3>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4621      	mov	r1, r4
 8002ecc:	f7fd fea4 	bl	8000c18 <__aeabi_d2f>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ed4:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002efa:	edd7 0a02 	vldr	s1, [r7, #8]
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	4610      	mov	r0, r2
 8002f04:	f002 ff38 	bl	8005d78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6013      	str	r3, [r2, #0]

}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f1c:	3f50624d 	.word	0x3f50624d
 8002f20:	20000280 	.word	0x20000280
 8002f24:	2000027c 	.word	0x2000027c

08002f28 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fbf3 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 f8ae 	bl	80050a0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fdc4 	bl	8004ad6 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fe25 	bl	8004bba <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f92:	3388      	adds	r3, #136	; 0x88
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461c      	mov	r4, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7fe fba3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002fa8:	3316      	adds	r3, #22
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fb8:	3388      	adds	r3, #136	; 0x88
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fc6:	3388      	adds	r3, #136	; 0x88
 8002fc8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fd0:	3388      	adds	r3, #136	; 0x88
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b63      	cmp	r3, #99	; 0x63
 8002fd6:	d905      	bls.n	8002fe4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fde:	3388      	adds	r3, #136	; 0x88
 8002fe0:	2263      	movs	r2, #99	; 0x63
 8002fe2:	801a      	strh	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}

08002fec <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ffe:	338a      	adds	r3, #138	; 0x8a
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461c      	mov	r4, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fe fb6d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003014:	333a      	adds	r3, #58	; 0x3a
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003024:	338a      	adds	r3, #138	; 0x8a
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003032:	338a      	adds	r3, #138	; 0x8a
 8003034:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800303c:	338a      	adds	r3, #138	; 0x8a
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003044:	d306      	bcc.n	8003054 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800304c:	338a      	adds	r3, #138	; 0x8a
 800304e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003052:	801a      	strh	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}

0800305c <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	ed2d 8b02 	vpush	{d8}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d046      	beq.n	8003100 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003078:	3354      	adds	r3, #84	; 0x54
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11c      	bne.n	80030bc <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69dc      	ldr	r4, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fb1b 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003090:	eeb0 8a40 	vmov.f32	s16, s0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4618      	mov	r0, r3
 800309a:	f001 fff0 	bl	800507e <_ZN8Odometry8getThetaEv>
 800309e:	ec53 2b10 	vmov	r2, r3, d0
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fdb7 	bl	8000c18 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
 80030ac:	ee00 3a90 	vmov	s1, r3
 80030b0:	eeb0 0a48 	vmov.f32	s0, s16
 80030b4:	4620      	mov	r0, r4
 80030b6:	f001 fbc5 	bl	8004844 <_ZN6Logger21storeDistanceAndThetaEff>
 80030ba:	e01b      	b.n	80030f4 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69dc      	ldr	r4, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fb0d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80030ca:	eeb0 8a40 	vmov.f32	s16, s0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 ffd3 	bl	800507e <_ZN8Odometry8getThetaEv>
 80030d8:	ec53 2b10 	vmov	r2, r3, d0
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd9a 	bl	8000c18 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	ee00 3a90 	vmov	s1, r3
 80030ea:	eeb0 0a48 	vmov.f32	s0, s16
 80030ee:	4620      	mov	r0, r4
 80030f0:	f001 fbeb 	bl	80048ca <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030fe:	801a      	strh	r2, [r3, #0]
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	ecbd 8b02 	vpop	{d8}
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	20000260 	.word	0x20000260

08003110 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:
	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;

}

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(sideline_distance_[sideline_idx_] / DISTANCE_CORRECTION_CONST);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6959      	ldr	r1, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003122:	338a      	adds	r3, #138	; 0x8a
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800312c:	333a      	adds	r3, #58	; 0x3a
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	eeb0 0a67 	vmov.f32	s0, s15
 800313a:	4608      	mov	r0, r1
 800313c:	f7fe fae1 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	sideline_idx_++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003146:	338a      	adds	r3, #138	; 0x8a
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003154:	338a      	adds	r3, #138	; 0x8a
 8003156:	801a      	strh	r2, [r3, #0]
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800315e:	338a      	adds	r3, #138	; 0x8a
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003166:	d306      	bcc.n	8003176 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x66>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800316e:	338a      	adds	r3, #138	; 0x8a
 8003170:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003174:	801a      	strh	r2, [r3, #0]

}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003192:	3354      	adds	r3, #84	; 0x54
 8003194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d12b      	bne.n	80031f4 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 300) velocity = min_velocity_;
 800319c:	edd7 7a00 	vldr	s15, [r7]
 80031a0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800328c <_ZN9LineTrace15radius2VelocityEf+0x10c>
 80031a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d504      	bpl.n	80031b8 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e05e      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 80031b8:	edd7 7a00 	vldr	s15, [r7]
 80031bc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003290 <_ZN9LineTrace15radius2VelocityEf+0x110>
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d502      	bpl.n	80031d0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80031ca:	4b32      	ldr	r3, [pc, #200]	; (8003294 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e052      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 80031d0:	edd7 7a00 	vldr	s15, [r7]
 80031d4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003298 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80031d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d503      	bpl.n	80031ea <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80031e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e045      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e040      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031fa:	3354      	adds	r3, #84	; 0x54
 80031fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d136      	bne.n	8003272 <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 8003204:	edd7 7a00 	vldr	s15, [r7]
 8003208:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800328c <_ZN9LineTrace15radius2VelocityEf+0x10c>
 800320c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	d504      	bpl.n	8003220 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e02a      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800329c <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d502      	bpl.n	8003238 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <_ZN9LineTrace15radius2VelocityEf+0x120>)
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e01e      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 8003238:	edd7 7a00 	vldr	s15, [r7]
 800323c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032a4 <_ZN9LineTrace15radius2VelocityEf+0x124>
 8003240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	d502      	bpl.n	8003250 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <_ZN9LineTrace15radius2VelocityEf+0x128>)
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e012      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 8003250:	edd7 7a00 	vldr	s15, [r7]
 8003254:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80032ac <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	d502      	bpl.n	8003268 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <_ZN9LineTrace15radius2VelocityEf+0x130>)
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e006      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e001      	b.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 8003274:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	ee07 3a90 	vmov	s15, r3
}
 800327c:	eeb0 0a67 	vmov.f32	s0, s15
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	43960000 	.word	0x43960000
 8003290:	44480000 	.word	0x44480000
 8003294:	3fd9999a 	.word	0x3fd9999a
 8003298:	44af0000 	.word	0x44af0000
 800329c:	44bb8000 	.word	0x44bb8000
 80032a0:	40066666 	.word	0x40066666
 80032a4:	44fa0000 	.word	0x44fa0000
 80032a8:	40200000 	.word	0x40200000
 80032ac:	451c4000 	.word	0x451c4000
 80032b0:	40400000 	.word	0x40400000
 80032b4:	3fa66666 	.word	0x3fa66666

080032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032c6:	f241 736f 	movw	r3, #5999	; 0x176f
 80032ca:	83fb      	strh	r3, [r7, #30]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 808d 	beq.w	80033ee <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032d4:	8bfb      	ldrh	r3, [r7, #30]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032de:	3304      	adds	r3, #4
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	8bfb      	ldrh	r3, [r7, #30]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032f0:	3304      	adds	r3, #4
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fe:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003302:	edd7 7a06 	vldr	s15, [r7, #24]
 8003306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	dd6a      	ble.n	80033e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003310:	8bfb      	ldrh	r3, [r7, #30]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f92c 	bl	8000578 <__aeabi_f2d>
 8003320:	a335      	add	r3, pc, #212	; (adr r3, 80033f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd f97f 	bl	8000628 <__aeabi_dmul>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	4625      	mov	r5, r4
 8003330:	461c      	mov	r4, r3
 8003332:	69b8      	ldr	r0, [r7, #24]
 8003334:	f7fd f920 	bl	8000578 <__aeabi_f2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4620      	mov	r0, r4
 800333e:	4629      	mov	r1, r5
 8003340:	f7fd fa9c 	bl	800087c <__aeabi_ddiv>
 8003344:	4603      	mov	r3, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4618      	mov	r0, r3
 800334a:	4621      	mov	r1, r4
 800334c:	f7fd fc64 	bl	8000c18 <__aeabi_d2f>
 8003350:	4603      	mov	r3, r0
 8003352:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003354:	edd7 6a06 	vldr	s13, [r7, #24]
 8003358:	ed97 7a05 	vldr	s14, [r7, #20]
 800335c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003360:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003364:	ed97 7a04 	vldr	s14, [r7, #16]
 8003368:	edd7 7a02 	vldr	s15, [r7, #8]
 800336c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd37      	ble.n	80033e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003376:	8bfb      	ldrh	r3, [r7, #30]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800337e:	3304      	adds	r3, #4
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8f6 	bl	8000578 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	ed93 7a00 	vldr	s14, [r3]
 800339c:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	ee17 0a90 	vmov	r0, s15
 80033a8:	f7fd f8e6 	bl	8000578 <__aeabi_f2d>
 80033ac:	a312      	add	r3, pc, #72	; (adr r3, 80033f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd f939 	bl	8000628 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff7d 	bl	80002bc <__adddf3>
 80033c2:	4603      	mov	r3, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	4619      	mov	r1, r3
 80033c8:	4622      	mov	r2, r4
 80033ca:	8bfb      	ldrh	r3, [r7, #30]
 80033cc:	1e5c      	subs	r4, r3, #1
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	f7fd fc21 	bl	8000c18 <__aeabi_d2f>
 80033d6:	4601      	mov	r1, r0
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033de:	3304      	adds	r3, #4
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033e6:	8bfb      	ldrh	r3, [r7, #30]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	83fb      	strh	r3, [r7, #30]
 80033ec:	e76e      	b.n	80032cc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033ee:	bf00      	nop
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033fc:	3f50624d 	.word	0x3f50624d

08003400 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	ed87 0a02 	vstr	s0, [r7, #8]
 800340c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800340e:	2300      	movs	r3, #0
 8003410:	83fb      	strh	r3, [r7, #30]
 8003412:	8bfb      	ldrh	r3, [r7, #30]
 8003414:	f241 726f 	movw	r2, #5999	; 0x176f
 8003418:	4293      	cmp	r3, r2
 800341a:	f200 808d 	bhi.w	8003538 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800341e:	8bfb      	ldrh	r3, [r7, #30]
 8003420:	3301      	adds	r3, #1
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003428:	3304      	adds	r3, #4
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	ed93 7a00 	vldr	s14, [r3]
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800343a:	3304      	adds	r3, #4
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800344c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	dd6a      	ble.n	8003530 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f887 	bl	8000578 <__aeabi_f2d>
 800346a:	a335      	add	r3, pc, #212	; (adr r3, 8003540 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8da 	bl	8000628 <__aeabi_dmul>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	4625      	mov	r5, r4
 800347a:	461c      	mov	r4, r3
 800347c:	69b8      	ldr	r0, [r7, #24]
 800347e:	f7fd f87b 	bl	8000578 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fd f9f7 	bl	800087c <__aeabi_ddiv>
 800348e:	4603      	mov	r3, r0
 8003490:	460c      	mov	r4, r1
 8003492:	4618      	mov	r0, r3
 8003494:	4621      	mov	r1, r4
 8003496:	f7fd fbbf 	bl	8000c18 <__aeabi_d2f>
 800349a:	4603      	mov	r3, r0
 800349c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800349e:	edd7 6a06 	vldr	s13, [r7, #24]
 80034a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80034a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034aa:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80034b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	dd37      	ble.n	8003530 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034c8:	3304      	adds	r3, #4
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f851 	bl	8000578 <__aeabi_f2d>
 80034d6:	4604      	mov	r4, r0
 80034d8:	460d      	mov	r5, r1
 80034da:	8bfb      	ldrh	r3, [r7, #30]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	ed93 7a00 	vldr	s14, [r3]
 80034e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fd f841 	bl	8000578 <__aeabi_f2d>
 80034f6:	a312      	add	r3, pc, #72	; (adr r3, 8003540 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f894 	bl	8000628 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4620      	mov	r0, r4
 8003506:	4629      	mov	r1, r5
 8003508:	f7fc fed8 	bl	80002bc <__adddf3>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
 8003510:	4619      	mov	r1, r3
 8003512:	4622      	mov	r2, r4
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	1c5c      	adds	r4, r3, #1
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	f7fd fb7c 	bl	8000c18 <__aeabi_d2f>
 8003520:	4601      	mov	r1, r0
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003528:	3304      	adds	r3, #4
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003530:	8bfb      	ldrh	r3, [r7, #30]
 8003532:	3301      	adds	r3, #1
 8003534:	83fb      	strh	r3, [r7, #30]
 8003536:	e76c      	b.n	8003412 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003538:	bf00      	nop
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	d2f1a9fc 	.word	0xd2f1a9fc
 8003544:	3f50624d 	.word	0x3f50624d

08003548 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe f8f1 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003560:	3350      	adds	r3, #80	; 0x50
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800357c:	3350      	adds	r3, #80	; 0x50
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003588:	3352      	adds	r3, #82	; 0x52
 800358a:	2200      	movs	r2, #0
 800358c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003594:	330c      	adds	r3, #12
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035b6:	3350      	adds	r3, #80	; 0x50
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8086 	beq.w	80036cc <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe f88d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80035ca:	eeb0 7a40 	vmov.f32	s14, s0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035d4:	330c      	adds	r3, #12
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	bfac      	ite	ge
 80035e4:	2301      	movge	r3, #1
 80035e6:	2300      	movlt	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d026      	beq.n	800363c <_ZN9LineTrace20updateTargetVelocityEv+0x94>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035f4:	330c      	adds	r3, #12
 80035f6:	ed93 7a00 	vldr	s14, [r3]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003600:	3352      	adds	r3, #82	; 0x52
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	3332      	adds	r3, #50	; 0x32
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800361c:	330c      	adds	r3, #12
 800361e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003628:	3352      	adds	r3, #82	; 0x52
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003636:	3352      	adds	r3, #82	; 0x52
 8003638:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 800363a:	e7c1      	b.n	80035c0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003642:	3352      	adds	r3, #82	; 0x52
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	f241 726f 	movw	r2, #5999	; 0x176f
 800364a:	4293      	cmp	r3, r2
 800364c:	d906      	bls.n	800365c <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003654:	3352      	adds	r3, #82	; 0x52
 8003656:	f241 726f 	movw	r2, #5999	; 0x176f
 800365a:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003662:	330c      	adds	r3, #12
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003668:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f838 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003674:	eef0 7a40 	vmov.f32	s15, s0
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800367a:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003684:	3352      	adds	r3, #82	; 0x52
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 800368a:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003692:	3352      	adds	r3, #82	; 0x52
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800369c:	3304      	adds	r3, #4
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fae1 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b6:	3352      	adds	r3, #82	; 0x52
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036c0:	3304      	adds	r3, #4
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80036ca:	6013      	str	r3, [r2, #0]

	}
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2000026c 	.word	0x2000026c
 80036d8:	20000270 	.word	0x20000270
 80036dc:	20000274 	.word	0x20000274
 80036e0:	20000278 	.word	0x20000278

080036e4 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd ffe4 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80036fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003702:	edd7 7a00 	vldr	s15, [r7]
 8003706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003744:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800374c:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003764:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800376c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <_ZN9LineTrace11isCrossLineEv+0x138>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003776:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <_ZN9LineTrace11isCrossLineEv+0x13c>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 800377c:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x140>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	f083 0301 	eor.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d03a      	beq.n	8003800 <_ZN9LineTrace11isCrossLineEv+0xd8>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800378a:	edd7 7a03 	vldr	s15, [r7, #12]
 800378e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800386c <_ZN9LineTrace11isCrossLineEv+0x144>
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	d50f      	bpl.n	80037bc <_ZN9LineTrace11isCrossLineEv+0x94>
 800379c:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800386c <_ZN9LineTrace11isCrossLineEv+0x144>
 80037a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	d506      	bpl.n	80037bc <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80037be:	2200      	movs	r2, #0
 80037c0:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d043      	beq.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x12a>
			flag = true;
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x140>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80037d8:	2200      	movs	r2, #0
 80037da:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037e2:	3390      	adds	r3, #144	; 0x90
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ee:	3354      	adds	r3, #84	; 0x54
 80037f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d12c      	bne.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x12a>
				storeCrossLineDistance();
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fbc1 	bl	8002f80 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80037fe:	e028      	b.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x12a>
			}
			//correction_check_cnt_ = 0;
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003800:	edd7 7a03 	vldr	s15, [r7, #12]
 8003804:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003878 <_ZN9LineTrace11isCrossLineEv+0x150>
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	dd0f      	ble.n	8003832 <_ZN9LineTrace11isCrossLineEv+0x10a>
 8003812:	edd7 7a02 	vldr	s15, [r7, #8]
 8003816:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003878 <_ZN9LineTrace11isCrossLineEv+0x150>
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	dd06      	ble.n	8003832 <_ZN9LineTrace11isCrossLineEv+0x10a>
			cnt++;
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <_ZN9LineTrace11isCrossLineEv+0x110>
		}
		else{
			cnt = 0;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003834:	2200      	movs	r2, #0
 8003836:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	2b09      	cmp	r3, #9
 800383e:	d908      	bls.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x12a>
			flag = false;
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x140>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000264 	.word	0x20000264
 8003864:	20000268 	.word	0x20000268
 8003868:	20000287 	.word	0x20000287
 800386c:	44160000 	.word	0x44160000
 8003870:	20000284 	.word	0x20000284
 8003874:	20000286 	.word	0x20000286
 8003878:	43fa0000 	.word	0x43fa0000

0800387c <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd ff1a 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003892:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fbef 	bl	800507e <_ZN8Odometry8getThetaEv>
 80038a0:	ec54 3b10 	vmov	r3, r4, d0
 80038a4:	4618      	mov	r0, r3
 80038a6:	4621      	mov	r1, r4
 80038a8:	f7fd f9b6 	bl	8000c18 <__aeabi_d2f>
 80038ac:	4603      	mov	r3, r0
 80038ae:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80038b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	d101      	bne.n	80038c2 <_ZN9LineTrace8isStableEv+0x46>
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <_ZN9LineTrace8isStableEv+0xd0>)
 80038c0:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80038c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80038c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038ce:	eeb0 0a66 	vmov.f32	s0, s13
 80038d2:	f7ff f8eb 	bl	8002aac <_ZSt3absf>
 80038d6:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80038da:	edd7 7a03 	vldr	s15, [r7, #12]
 80038de:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003950 <_ZN9LineTrace8isStableEv+0xd4>
 80038e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ea:	db01      	blt.n	80038f0 <_ZN9LineTrace8isStableEv+0x74>
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <_ZN9LineTrace8isStableEv+0xd8>)
 80038ee:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038f6:	3390      	adds	r3, #144	; 0x90
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003900:	2200      	movs	r2, #0
 8003902:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800390a:	3390      	adds	r3, #144	; 0x90
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003910:	edd7 7a03 	vldr	s15, [r7, #12]
 8003914:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800395c <_ZN9LineTrace8isStableEv+0xe0>
 8003918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	db06      	blt.n	8003930 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e002      	b.n	8003936 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003932:	2200      	movs	r2, #0
 8003934:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d901      	bls.n	8003942 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd90      	pop	{r4, r7, pc}
 800394c:	3727c5ac 	.word	0x3727c5ac
 8003950:	459c4000 	.word	0x459c4000
 8003954:	459c4000 	.word	0x459c4000
 8003958:	20000288 	.word	0x20000288
 800395c:	44fa0000 	.word	0x44fa0000

08003960 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b092      	sub	sp, #72	; 0x48
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003968:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800396c:	2201      	movs	r2, #1
 800396e:	4963      	ldr	r1, [pc, #396]	; (8003afc <_ZN9LineTrace4initEv+0x19c>)
 8003970:	4863      	ldr	r0, [pc, #396]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003972:	f7fd ffe9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800397a:	2201      	movs	r2, #1
 800397c:	4961      	ldr	r1, [pc, #388]	; (8003b04 <_ZN9LineTrace4initEv+0x1a4>)
 800397e:	4860      	ldr	r0, [pc, #384]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003980:	f7fd ffe2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003988:	2201      	movs	r2, #1
 800398a:	495f      	ldr	r1, [pc, #380]	; (8003b08 <_ZN9LineTrace4initEv+0x1a8>)
 800398c:	485c      	ldr	r0, [pc, #368]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 800398e:	f7fd ffdb 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003992:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003996:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800399a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800399e:	eeb0 1a66 	vmov.f32	s2, s13
 80039a2:	eef0 0a47 	vmov.f32	s1, s14
 80039a6:	eeb0 0a67 	vmov.f32	s0, s15
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8c6 	bl	8003b3c <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 80039b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039b4:	2201      	movs	r2, #1
 80039b6:	4955      	ldr	r1, [pc, #340]	; (8003b0c <_ZN9LineTrace4initEv+0x1ac>)
 80039b8:	4851      	ldr	r0, [pc, #324]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 80039ba:	f7fd ffc5 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 80039be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039c2:	2201      	movs	r2, #1
 80039c4:	4952      	ldr	r1, [pc, #328]	; (8003b10 <_ZN9LineTrace4initEv+0x1b0>)
 80039c6:	484e      	ldr	r0, [pc, #312]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 80039c8:	f7fd ffbe 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 80039cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d0:	2201      	movs	r2, #1
 80039d2:	4950      	ldr	r1, [pc, #320]	; (8003b14 <_ZN9LineTrace4initEv+0x1b4>)
 80039d4:	484a      	ldr	r0, [pc, #296]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 80039d6:	f7fd ffb7 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 80039da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80039e2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80039e6:	eeb0 1a66 	vmov.f32	s2, s13
 80039ea:	eef0 0a47 	vmov.f32	s1, s14
 80039ee:	eeb0 0a67 	vmov.f32	s0, s15
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8e8 	bl	8003bc8 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80039f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	4946      	ldr	r1, [pc, #280]	; (8003b18 <_ZN9LineTrace4initEv+0x1b8>)
 8003a00:	483f      	ldr	r0, [pc, #252]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a02:	f7fd ffa1 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4943      	ldr	r1, [pc, #268]	; (8003b1c <_ZN9LineTrace4initEv+0x1bc>)
 8003a0e:	483c      	ldr	r0, [pc, #240]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a10:	f7fd ff9a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4941      	ldr	r1, [pc, #260]	; (8003b20 <_ZN9LineTrace4initEv+0x1c0>)
 8003a1c:	4838      	ldr	r0, [pc, #224]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a1e:	f7fd ff93 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a22:	f107 0320 	add.w	r3, r7, #32
 8003a26:	2201      	movs	r2, #1
 8003a28:	493e      	ldr	r1, [pc, #248]	; (8003b24 <_ZN9LineTrace4initEv+0x1c4>)
 8003a2a:	4835      	ldr	r0, [pc, #212]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a2c:	f7fd ff8c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a30:	f107 031c 	add.w	r3, r7, #28
 8003a34:	2201      	movs	r2, #1
 8003a36:	493c      	ldr	r1, [pc, #240]	; (8003b28 <_ZN9LineTrace4initEv+0x1c8>)
 8003a38:	4831      	ldr	r0, [pc, #196]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a3a:	f7fd ff85 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f913 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a50:	eeb0 0a67 	vmov.f32	s0, s15
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f91c 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f925 	bl	8003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a68:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f92e 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f937 	bl	8003cf2 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a84:	f107 0318 	add.w	r3, r7, #24
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4928      	ldr	r1, [pc, #160]	; (8003b2c <_ZN9LineTrace4initEv+0x1cc>)
 8003a8c:	481c      	ldr	r0, [pc, #112]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a8e:	f7fd ff5b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	2201      	movs	r2, #1
 8003a98:	4925      	ldr	r1, [pc, #148]	; (8003b30 <_ZN9LineTrace4initEv+0x1d0>)
 8003a9a:	4819      	ldr	r0, [pc, #100]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a9c:	f7fd ff54 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aa8:	eef0 0a47 	vmov.f32	s1, s14
 8003aac:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f97e 	bl	8003db2 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003ac2:	f107 0310 	add.w	r3, r7, #16
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	491a      	ldr	r1, [pc, #104]	; (8003b34 <_ZN9LineTrace4initEv+0x1d4>)
 8003aca:	480d      	ldr	r0, [pc, #52]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003acc:	f7fd ff3c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4918      	ldr	r1, [pc, #96]	; (8003b38 <_ZN9LineTrace4initEv+0x1d8>)
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003ada:	f7fd ff35 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ae6:	eef0 0a47 	vmov.f32	s1, s14
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f979 	bl	8003de6 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003af4:	bf00      	nop
 8003af6:	3748      	adds	r7, #72	; 0x48
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	08019c30 	.word	0x08019c30
 8003b00:	08019c38 	.word	0x08019c38
 8003b04:	08019c40 	.word	0x08019c40
 8003b08:	08019c48 	.word	0x08019c48
 8003b0c:	08019c50 	.word	0x08019c50
 8003b10:	08019c5c 	.word	0x08019c5c
 8003b14:	08019c68 	.word	0x08019c68
 8003b18:	08019c74 	.word	0x08019c74
 8003b1c:	08019c80 	.word	0x08019c80
 8003b20:	08019c8c 	.word	0x08019c8c
 8003b24:	08019c98 	.word	0x08019c98
 8003b28:	08019ca4 	.word	0x08019ca4
 8003b2c:	08019cb0 	.word	0x08019cb0
 8003b30:	08019cb8 	.word	0x08019cb8
 8003b34:	08019cc0 	.word	0x08019cc0
 8003b38:	08019ccc 	.word	0x08019ccc

08003b3c <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b48:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b4c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	ee07 3a90 	vmov	s15, r3
}
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	ee07 3a90 	vmov	s15, r3
}
 8003b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
	return kd_;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	ee07 3a90 	vmov	s15, r3
}
 8003bba:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bd4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bd8:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	ee07 3a90 	vmov	s15, r3
}
 8003c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	ee07 3a90 	vmov	s15, r3
}
 8003c28:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	ee07 3a90 	vmov	s15, r3
}
 8003c46:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d20:	ee07 3a90 	vmov	s15, r3
}
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d40:	ee07 3a90 	vmov	s15, r3
}
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d60:	ee07 3a90 	vmov	s15, r3
}
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d80:	ee07 3a90 	vmov	s15, r3
}
 8003d84:	eeb0 0a67 	vmov.f32	s0, s15
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003da0:	ee07 3a90 	vmov	s15, r3
}
 8003da4:	eeb0 0a67 	vmov.f32	s0, s15
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dbe:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dc8:	3394      	adds	r3, #148	; 0x94
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dd4:	3398      	adds	r3, #152	; 0x98
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	ed87 0a02 	vstr	s0, [r7, #8]
 8003df2:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dfc:	339c      	adds	r3, #156	; 0x9c
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e08:	33a0      	adds	r3, #160	; 0xa0
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e28:	3394      	adds	r3, #148	; 0x94
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	ee07 3a90 	vmov	s15, r3
}
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e4c:	33a0      	adds	r3, #160	; 0xa0
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	ee07 3a90 	vmov	s15, r3
}
 8003e54:	eeb0 0a67 	vmov.f32	s0, s15
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e70:	339c      	adds	r3, #156	; 0x9c
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	ee07 3a90 	vmov	s15, r3
}
 8003e78:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e94:	3398      	adds	r3, #152	; 0x98
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	ee07 3a90 	vmov	s15, r3
}
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80e2 	beq.w	8004084 <_ZN9LineTrace4flipEv+0x1d8>
		// ---- line following processing -----//
		pidTrace();
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fe ff51 	bl	8002d68 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fb6e 	bl	80035a8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8003ecc:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800408c <_ZN9LineTrace4flipEv+0x1e0>
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fc07 	bl	80036e4 <_ZN9LineTrace16isTargetDistanceEf>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d028      	beq.n	8003f2e <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff f8bd 	bl	800305c <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fcca 	bl	800387c <_ZN9LineTrace8isStableEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <_ZN9LineTrace4flipEv+0x5c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fb8e 	bl	8005614 <_ZN10SideSensor10getStatusLEv>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <_ZN9LineTrace4flipEv+0x5c>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <_ZN9LineTrace4flipEv+0x5e>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f14:	338f      	adds	r3, #143	; 0x8f
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fbfe 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f8b9 	bl	80050a0 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f34:	338f      	adds	r3, #143	; 0x8f
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <_ZN9LineTrace4flipEv+0xa4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fb67 	bl	8005614 <_ZN10SideSensor10getStatusLEv>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <_ZN9LineTrace4flipEv+0xa4>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <_ZN9LineTrace4flipEv+0xa6>
 8003f50:	2300      	movs	r3, #0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <_ZN9LineTrace4flipEv+0xec>
			correction_check_cnt_ = 0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f5c:	33a4      	adds	r3, #164	; 0xa4
 8003f5e:	2200      	movs	r2, #0
 8003f60:	801a      	strh	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f68:	3354      	adds	r3, #84	; 0x54
 8003f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <_ZN9LineTrace4flipEv+0xce>
				storeSideLineDistance();
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff f83a 	bl	8002fec <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f78:	e002      	b.n	8003f80 <_ZN9LineTrace4flipEv+0xd4>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff f8c8 	bl	8003110 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
			}

			stable_flag_ = false;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f86:	338f      	adds	r3, #143	; 0x8f
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f92:	3390      	adds	r3, #144	; 0x90
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fbc5 	bl	8003728 <_ZN9LineTrace11isCrossLineEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <_ZN9LineTrace4flipEv+0x10c>
			side_sensor_->enableIgnore();
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fb5b 	bl	8005664 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fbdf 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 fb6b 	bl	8005698 <_ZN10SideSensor13getIgnoreFlagEv>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00f      	beq.n	8003fe8 <_ZN9LineTrace4flipEv+0x13c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd fbc3 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8003fd6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004090 <_ZN9LineTrace4flipEv+0x1e4>
 8003fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	db01      	blt.n	8003fe8 <_ZN9LineTrace4flipEv+0x13c>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <_ZN9LineTrace4flipEv+0x13e>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <_ZN9LineTrace4flipEv+0x14c>
			side_sensor_->disableIgnore();
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 fb43 	bl	800567e <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fd05 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <_ZN9LineTrace4flipEv+0x178>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004094 <_ZN9LineTrace4flipEv+0x1e8>
 8004010:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004094 <_ZN9LineTrace4flipEv+0x1e8>
 8004014:	4618      	mov	r0, r3
 8004016:	f001 feaf 	bl	8005d78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd f9b0 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800402a:	33a4      	adds	r3, #164	; 0xa4
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004038:	33a4      	adds	r3, #164	; 0xa4
 800403a:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004042:	33a4      	adds	r3, #164	; 0xa4
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	f242 720f 	movw	r2, #9999	; 0x270f
 800404a:	4293      	cmp	r3, r2
 800404c:	d906      	bls.n	800405c <_ZN9LineTrace4flipEv+0x1b0>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004054:	33a4      	adds	r3, #164	; 0xa4
 8004056:	f242 7210 	movw	r2, #10000	; 0x2710
 800405a:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 200) led_.fullColor('R');
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004062:	33a4      	adds	r3, #164	; 0xa4
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	2bc8      	cmp	r3, #200	; 0xc8
 8004068:	d806      	bhi.n	8004078 <_ZN9LineTrace4flipEv+0x1cc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	330c      	adds	r3, #12
 800406e:	2152      	movs	r1, #82	; 0x52
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe f8ef 	bl	8002254 <_ZN3LED9fullColorEc>
		else led_.fullColor('B');
	}
}
 8004076:	e005      	b.n	8004084 <_ZN9LineTrace4flipEv+0x1d8>
		else led_.fullColor('B');
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	330c      	adds	r3, #12
 800407c:	2142      	movs	r1, #66	; 0x42
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe f8e8 	bl	8002254 <_ZN3LED9fullColorEc>
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	42480000 	.word	0x42480000
 8004090:	428c0000 	.word	0x428c0000
 8004094:	00000000 	.word	0x00000000

08004098 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040aa:	3354      	adds	r3, #84	; 0x54
 80040ac:	887a      	ldrh	r2, [r7, #2]
 80040ae:	801a      	strh	r2, [r3, #0]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fea6 	bl	8005e2a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 faae 	bl	8005644 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ee:	3388      	adds	r3, #136	; 0x88
 80040f0:	2200      	movs	r2, #0
 80040f2:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040fa:	338a      	adds	r3, #138	; 0x8a
 80040fc:	2200      	movs	r2, #0
 80040fe:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004106:	338c      	adds	r3, #140	; 0x8c
 8004108:	2200      	movs	r2, #0
 800410a:	801a      	strh	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004120:	2300      	movs	r3, #0
 8004122:	737b      	strb	r3, [r7, #13]
	start();
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ffc9 	bl	80040bc <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800412a:	7b7b      	ldrb	r3, [r7, #13]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d161      	bne.n	80041f4 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <_ZN9LineTrace7runningEv+0x28>
 8004136:	2b0a      	cmp	r3, #10
 8004138:	d030      	beq.n	800419c <_ZN9LineTrace7runningEv+0x88>
 800413a:	e05a      	b.n	80041f2 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fa73 	bl	800562c <_ZN10SideSensor16getWhiteLineCntREv>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04a      	beq.n	80041ec <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fe fee6 	bl	8002f28 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004162:	3354      	adds	r3, #84	; 0x54
 8004164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff f9eb 	bl	8003548 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fd fafd 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fd fadb 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	330c      	adds	r3, #12
 800418a:	f04f 32ff 	mov.w	r2, #4294967295
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe f91b 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 8004196:	230a      	movs	r3, #10
 8004198:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800419a:	e027      	b.n	80041ec <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 fa43 	bl	800562c <_ZN10SideSensor16getWhiteLineCntREv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01c      	beq.n	80041f0 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	330c      	adds	r3, #12
 80041ba:	214d      	movs	r1, #77	; 0x4d
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f849 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe fecb 	bl	8002f5e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff f9d0 	bl	800356e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80041ce:	2064      	movs	r0, #100	; 0x64
 80041d0:	f005 fd8e 	bl	8009cf0 <HAL_Delay>

				setTargetVelocity(0);
 80041d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004204 <_ZN9LineTrace7runningEv+0xf0>
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fd4a 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80041de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041e2:	f005 fd85 	bl	8009cf0 <HAL_Delay>

				goal_flag = true;
 80041e6:	2301      	movs	r3, #1
 80041e8:	737b      	strb	r3, [r7, #13]

			}

			break;
 80041ea:	e001      	b.n	80041f0 <_ZN9LineTrace7runningEv+0xdc>
			break;
 80041ec:	bf00      	nop
 80041ee:	e79c      	b.n	800412a <_ZN9LineTrace7runningEv+0x16>
			break;
 80041f0:	bf00      	nop
	while(goal_flag == false){
 80041f2:	e79a      	b.n	800412a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f807 	bl	8004208 <_ZN9LineTrace4stopEv>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	00000000 	.word	0x00000000

08004208 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f001 fe17 	bl	8005e50 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	330c      	adds	r3, #12
 8004226:	2201      	movs	r2, #1
 8004228:	f04f 31ff 	mov.w	r1, #4294967295
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe f8cd 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004238:	3354      	adds	r3, #84	; 0x54
 800423a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d107      	bne.n	8004252 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69d8      	ldr	r0, [r3, #28]
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <_ZN9LineTrace4stopEv+0xcc>)
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <_ZN9LineTrace4stopEv+0xd0>)
 800424a:	4924      	ldr	r1, [pc, #144]	; (80042dc <_ZN9LineTrace4stopEv+0xd4>)
 800424c:	f000 fbdc 	bl	8004a08 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004250:	e006      	b.n	8004260 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69d8      	ldr	r0, [r3, #28]
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <_ZN9LineTrace4stopEv+0xd8>)
 8004258:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <_ZN9LineTrace4stopEv+0xdc>)
 800425a:	4920      	ldr	r1, [pc, #128]	; (80042dc <_ZN9LineTrace4stopEv+0xd4>)
 800425c:	f000 fbf7 	bl	8004a4e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004266:	3358      	adds	r3, #88	; 0x58
 8004268:	2200      	movs	r2, #0
 800426a:	9200      	str	r2, [sp, #0]
 800426c:	2264      	movs	r2, #100	; 0x64
 800426e:	491e      	ldr	r1, [pc, #120]	; (80042e8 <_ZN9LineTrace4stopEv+0xe0>)
 8004270:	481a      	ldr	r0, [pc, #104]	; (80042dc <_ZN9LineTrace4stopEv+0xd4>)
 8004272:	f7fd fb03 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800427c:	33e8      	adds	r3, #232	; 0xe8
 800427e:	2200      	movs	r2, #0
 8004280:	9200      	str	r2, [sp, #0]
 8004282:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004286:	4919      	ldr	r1, [pc, #100]	; (80042ec <_ZN9LineTrace4stopEv+0xe4>)
 8004288:	4814      	ldr	r0, [pc, #80]	; (80042dc <_ZN9LineTrace4stopEv+0xd4>)
 800428a:	f7fd faf7 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8004294:	33b8      	adds	r3, #184	; 0xb8
 8004296:	2200      	movs	r2, #0
 8004298:	9200      	str	r2, [sp, #0]
 800429a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800429e:	4914      	ldr	r1, [pc, #80]	; (80042f0 <_ZN9LineTrace4stopEv+0xe8>)
 80042a0:	480e      	ldr	r0, [pc, #56]	; (80042dc <_ZN9LineTrace4stopEv+0xd4>)
 80042a2:	f7fd faeb 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	330c      	adds	r3, #12
 80042aa:	2200      	movs	r2, #0
 80042ac:	f04f 31ff 	mov.w	r1, #4294967295
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe f88b 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fc57 	bl	8004b6e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fc06 	bl	8004ad6 <_ZN6Logger10resetLogs2Ev>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	08019cd8 	.word	0x08019cd8
 80042d8:	08019ce4 	.word	0x08019ce4
 80042dc:	08019cf4 	.word	0x08019cf4
 80042e0:	08019d00 	.word	0x08019d00
 80042e4:	08019d0c 	.word	0x08019d0c
 80042e8:	08019d1c 	.word	0x08019d1c
 80042ec:	08019d2c 	.word	0x08019d2c
 80042f0:	08019d38 	.word	0x08019d38

080042f4 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b08b      	sub	sp, #44	; 0x2c
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fb25 	bl	8004950 <_ZN6Logger23getDistanceArrayPointerEv>
 8004306:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fb2d 	bl	800496c <_ZN6Logger20getThetaArrayPointerEv>
 8004312:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004314:	2300      	movs	r3, #0
 8004316:	837b      	strh	r3, [r7, #26]
 8004318:	8b7b      	ldrh	r3, [r7, #26]
 800431a:	f241 726f 	movw	r2, #5999	; 0x176f
 800431e:	4293      	cmp	r3, r2
 8004320:	d84b      	bhi.n	80043ba <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004322:	8b7b      	ldrh	r3, [r7, #26]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800433a:	edd7 7a07 	vldr	s15, [r7, #28]
 800433e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	d101      	bne.n	800434c <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800434a:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 800434c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004350:	edd7 7a07 	vldr	s15, [r7, #28]
 8004354:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004358:	eeb0 0a66 	vmov.f32	s0, s13
 800435c:	f7fe fba6 	bl	8002aac <_ZSt3absf>
 8004360:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004364:	edd7 7a05 	vldr	s15, [r7, #20]
 8004368:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004480 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 800436c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	db01      	blt.n	800437a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004376:	4b43      	ldr	r3, [pc, #268]	; (8004484 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004378:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800437a:	8b7c      	ldrh	r4, [r7, #26]
 800437c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fe fefd 	bl	8003180 <_ZN9LineTrace15radius2VelocityEf>
 8004386:	eef0 7a40 	vmov.f32	s15, s0
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004390:	3304      	adds	r3, #4
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800439a:	8b7b      	ldrh	r3, [r7, #26]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	441a      	add	r2, r3
 80043a2:	8b7b      	ldrh	r3, [r7, #26]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	3304      	adds	r3, #4
 80043b0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80043b2:	8b7b      	ldrh	r3, [r7, #26]
 80043b4:	3301      	adds	r3, #1
 80043b6:	837b      	strh	r3, [r7, #26]
 80043b8:	e7ae      	b.n	8004318 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043c0:	3354      	adds	r3, #84	; 0x54
 80043c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d120      	bne.n	800440c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043d6:	3310      	adds	r3, #16
 80043d8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80043e0:	3398      	adds	r3, #152	; 0x98
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	6939      	ldr	r1, [r7, #16]
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fe ff63 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80043f8:	3394      	adds	r3, #148	; 0x94
 80043fa:	edd3 7a00 	vldr	s15, [r3]
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	eeb0 0a67 	vmov.f32	s0, s15
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fe fffb 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800440a:	e027      	b.n	800445c <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004412:	3354      	adds	r3, #84	; 0x54
 8004414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11f      	bne.n	800445c <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004428:	3310      	adds	r3, #16
 800442a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004432:	33a0      	adds	r3, #160	; 0xa0
 8004434:	edd3 7a00 	vldr	s15, [r3]
 8004438:	6939      	ldr	r1, [r7, #16]
 800443a:	eeb0 0a67 	vmov.f32	s0, s15
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fe ff3a 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800444a:	339c      	adds	r3, #156	; 0x9c
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	6939      	ldr	r1, [r7, #16]
 8004452:	eeb0 0a67 	vmov.f32	s0, s15
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fe ffd2 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004462:	3310      	adds	r3, #16
 8004464:	2200      	movs	r2, #0
 8004466:	9200      	str	r2, [sp, #0]
 8004468:	f241 7270 	movw	r2, #6000	; 0x1770
 800446c:	4906      	ldr	r1, [pc, #24]	; (8004488 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800446e:	4807      	ldr	r0, [pc, #28]	; (800448c <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004470:	f7fd fa04 	bl	800187c <sd_write_array_float>

}
 8004474:	bf00      	nop
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd90      	pop	{r4, r7, pc}
 800447c:	3727c5ac 	.word	0x3727c5ac
 8004480:	459c4000 	.word	0x459c4000
 8004484:	459c4000 	.word	0x459c4000
 8004488:	08019d48 	.word	0x08019d48
 800448c:	08019cf4 	.word	0x08019cf4

08004490 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b08b      	sub	sp, #44	; 0x2c
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69d8      	ldr	r0, [r3, #28]
 800449c:	4b6b      	ldr	r3, [pc, #428]	; (800464c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800449e:	4a6c      	ldr	r2, [pc, #432]	; (8004650 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80044a0:	496c      	ldr	r1, [pc, #432]	; (8004654 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044a2:	f000 faf9 	bl	8004a98 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044ac:	3358      	adds	r3, #88	; 0x58
 80044ae:	2264      	movs	r2, #100	; 0x64
 80044b0:	4969      	ldr	r1, [pc, #420]	; (8004658 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80044b2:	4868      	ldr	r0, [pc, #416]	; (8004654 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044b4:	f7fd fa48 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044be:	33e8      	adds	r3, #232	; 0xe8
 80044c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044c4:	4965      	ldr	r1, [pc, #404]	; (800465c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80044c6:	4863      	ldr	r0, [pc, #396]	; (8004654 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044c8:	f7fd fa3e 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fa3d 	bl	8004950 <_ZN6Logger23getDistanceArrayPointerEv>
 80044d6:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fa45 	bl	800496c <_ZN6Logger20getThetaArrayPointerEv>
 80044e2:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80044e4:	2300      	movs	r3, #0
 80044e6:	837b      	strh	r3, [r7, #26]
 80044e8:	8b7b      	ldrh	r3, [r7, #26]
 80044ea:	f241 726f 	movw	r2, #5999	; 0x176f
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d84b      	bhi.n	800458a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80044f2:	8b7b      	ldrh	r3, [r7, #26]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80044fe:	8b7b      	ldrh	r3, [r7, #26]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800450a:	edd7 7a07 	vldr	s15, [r7, #28]
 800450e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d101      	bne.n	800451c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004518:	4b51      	ldr	r3, [pc, #324]	; (8004660 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800451a:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 800451c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004520:	edd7 7a07 	vldr	s15, [r7, #28]
 8004524:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004528:	eeb0 0a66 	vmov.f32	s0, s13
 800452c:	f7fe fabe 	bl	8002aac <_ZSt3absf>
 8004530:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004534:	edd7 7a05 	vldr	s15, [r7, #20]
 8004538:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004664 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 800453c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	db01      	blt.n	800454a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004546:	4b48      	ldr	r3, [pc, #288]	; (8004668 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004548:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800454a:	8b7c      	ldrh	r4, [r7, #26]
 800454c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7fe fe15 	bl	8003180 <_ZN9LineTrace15radius2VelocityEf>
 8004556:	eef0 7a40 	vmov.f32	s15, s0
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004560:	3304      	adds	r3, #4
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800456a:	8b7b      	ldrh	r3, [r7, #26]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	441a      	add	r2, r3
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3304      	adds	r3, #4
 8004580:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004582:	8b7b      	ldrh	r3, [r7, #26]
 8004584:	3301      	adds	r3, #1
 8004586:	837b      	strh	r3, [r7, #26]
 8004588:	e7ae      	b.n	80044e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004590:	3354      	adds	r3, #84	; 0x54
 8004592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d120      	bne.n	80045dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045a6:	3310      	adds	r3, #16
 80045a8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045b0:	3398      	adds	r3, #152	; 0x98
 80045b2:	edd3 7a00 	vldr	s15, [r3]
 80045b6:	6939      	ldr	r1, [r7, #16]
 80045b8:	eeb0 0a67 	vmov.f32	s0, s15
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fe fe7b 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045c8:	3394      	adds	r3, #148	; 0x94
 80045ca:	edd3 7a00 	vldr	s15, [r3]
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	eeb0 0a67 	vmov.f32	s0, s15
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fe ff13 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80045da:	e027      	b.n	800462c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045e2:	3354      	adds	r3, #84	; 0x54
 80045e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d11f      	bne.n	800462c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045f8:	3310      	adds	r3, #16
 80045fa:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004602:	33a0      	adds	r3, #160	; 0xa0
 8004604:	edd3 7a00 	vldr	s15, [r3]
 8004608:	6939      	ldr	r1, [r7, #16]
 800460a:	eeb0 0a67 	vmov.f32	s0, s15
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fe fe52 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800461a:	339c      	adds	r3, #156	; 0x9c
 800461c:	edd3 7a00 	vldr	s15, [r3]
 8004620:	6939      	ldr	r1, [r7, #16]
 8004622:	eeb0 0a67 	vmov.f32	s0, s15
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe feea 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004632:	3310      	adds	r3, #16
 8004634:	2200      	movs	r2, #0
 8004636:	9200      	str	r2, [sp, #0]
 8004638:	f241 7270 	movw	r2, #6000	; 0x1770
 800463c:	490b      	ldr	r1, [pc, #44]	; (800466c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800463e:	4805      	ldr	r0, [pc, #20]	; (8004654 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004640:	f7fd f91c 	bl	800187c <sd_write_array_float>

}
 8004644:	bf00      	nop
 8004646:	3724      	adds	r7, #36	; 0x24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	08019cd8 	.word	0x08019cd8
 8004650:	08019ce4 	.word	0x08019ce4
 8004654:	08019cf4 	.word	0x08019cf4
 8004658:	08019d1c 	.word	0x08019d1c
 800465c:	08019d2c 	.word	0x08019d2c
 8004660:	3727c5ac 	.word	0x3727c5ac
 8004664:	459c4000 	.word	0x459c4000
 8004668:	459c4000 	.word	0x459c4000
 800466c:	08019d48 	.word	0x08019d48

08004670 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800467e:	33c0      	adds	r3, #192	; 0xc0
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800468a:	33c2      	adds	r3, #194	; 0xc2
 800468c:	2200      	movs	r2, #0
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004696:	33c4      	adds	r3, #196	; 0xc4
 8004698:	2200      	movs	r2, #0
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046a2:	33c6      	adds	r3, #198	; 0xc6
 80046a4:	2200      	movs	r2, #0
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046ae:	33c8      	adds	r3, #200	; 0xc8
 80046b0:	2200      	movs	r2, #0
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046ba:	33ca      	adds	r3, #202	; 0xca
 80046bc:	2200      	movs	r2, #0
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80046dc:	f7fd fa20 	bl	8001b20 <sd_mount>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d016      	beq.n	800471e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80046f0:	f7fc fcd6 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046f4:	2100      	movs	r1, #0
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fc fce2 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046fc:	4815      	ldr	r0, [pc, #84]	; (8004754 <_ZN6Logger10sdCardInitEv+0x84>)
 80046fe:	f7fc fd09 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004702:	2101      	movs	r1, #1
 8004704:	2000      	movs	r0, #0
 8004706:	f7fc fcdb 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800470a:	4813      	ldr	r0, [pc, #76]	; (8004758 <_ZN6Logger10sdCardInitEv+0x88>)
 800470c:	f7fc fd02 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004714:	f005 faec 	bl	8009cf0 <HAL_Delay>

	  ret = true;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
 800471c:	e015      	b.n	800474a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800471e:	f7fc fcbf 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004722:	2100      	movs	r1, #0
 8004724:	2000      	movs	r0, #0
 8004726:	f7fc fccb 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800472a:	480a      	ldr	r0, [pc, #40]	; (8004754 <_ZN6Logger10sdCardInitEv+0x84>)
 800472c:	f7fc fcf2 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004730:	2101      	movs	r1, #1
 8004732:	2000      	movs	r0, #0
 8004734:	f7fc fcc4 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004738:	4808      	ldr	r0, [pc, #32]	; (800475c <_ZN6Logger10sdCardInitEv+0x8c>)
 800473a:	f7fc fceb 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800473e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004742:	f005 fad5 	bl	8009cf0 <HAL_Delay>

	  ret = false;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08019d58 	.word	0x08019d58
 8004758:	08019d64 	.word	0x08019d64
 800475c:	08019d6c 	.word	0x08019d6c

08004760 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004772:	33c0      	adds	r3, #192	; 0xc0
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d025      	beq.n	80047c6 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004780:	33c6      	adds	r3, #198	; 0xc6
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 800478c:	8879      	ldrh	r1, [r7, #2]
 800478e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004798:	33c6      	adds	r3, #198	; 0xc6
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047a6:	33c6      	adds	r3, #198	; 0xc6
 80047a8:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047b0:	33c6      	adds	r3, #198	; 0xc6
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047b8:	d305      	bcc.n	80047c6 <_ZN6Logger11storeLogIntEs+0x66>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047c0:	33c6      	adds	r3, #198	; 0xc6
 80047c2:	2200      	movs	r2, #0
 80047c4:	801a      	strh	r2, [r3, #0]
	}

}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047e4:	33c0      	adds	r3, #192	; 0xc0
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d025      	beq.n	8004838 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047f2:	33c8      	adds	r3, #200	; 0xc8
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80047fc:	3310      	adds	r3, #16
 80047fe:	8879      	ldrh	r1, [r7, #2]
 8004800:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800480a:	33c8      	adds	r3, #200	; 0xc8
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004818:	33c8      	adds	r3, #200	; 0xc8
 800481a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004822:	33c8      	adds	r3, #200	; 0xc8
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800482a:	d305      	bcc.n	8004838 <_ZN6Logger12storeLog2IntEs+0x66>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004832:	33c8      	adds	r3, #200	; 0xc8
 8004834:	2200      	movs	r2, #0
 8004836:	801a      	strh	r2, [r3, #0]
	}

}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004850:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800485a:	33ca      	adds	r3, #202	; 0xca
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004864:	3310      	adds	r3, #16
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004874:	33ca      	adds	r3, #202	; 0xca
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800487e:	3320      	adds	r3, #32
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800488e:	33ca      	adds	r3, #202	; 0xca
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800489c:	33ca      	adds	r3, #202	; 0xca
 800489e:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048a6:	33ca      	adds	r3, #202	; 0xca
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	f241 726f 	movw	r2, #5999	; 0x176f
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d905      	bls.n	80048be <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048b8:	33ca      	adds	r3, #202	; 0xca
 80048ba:	2200      	movs	r2, #0
 80048bc:	801a      	strh	r2, [r3, #0]
	//}
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80048d6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048e0:	33ca      	adds	r3, #202	; 0xca
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80048ea:	3350      	adds	r3, #80	; 0x50
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048fa:	33ca      	adds	r3, #202	; 0xca
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004904:	3340      	adds	r3, #64	; 0x40
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004914:	33ca      	adds	r3, #202	; 0xca
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004922:	33ca      	adds	r3, #202	; 0xca
 8004924:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800492c:	33ca      	adds	r3, #202	; 0xca
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	f241 726f 	movw	r2, #5999	; 0x176f
 8004934:	4293      	cmp	r3, r2
 8004936:	d905      	bls.n	8004944 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800493e:	33ca      	adds	r3, #202	; 0xca
 8004940:	2200      	movs	r2, #0
 8004942:	801a      	strh	r2, [r3, #0]
	//}
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800495e:	3340      	adds	r3, #64	; 0x40
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800497a:	3380      	adds	r3, #128	; 0x80
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	2300      	movs	r3, #0
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f7fc ff6a 	bl	800187c <sd_write_array_float>
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	68b8      	ldr	r0, [r7, #8]
 80049d0:	f7fd f846 	bl	8001a60 <sd_write_array_int>
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80049ee:	3320      	adds	r3, #32
 80049f0:	2200      	movs	r2, #0
 80049f2:	9200      	str	r2, [sp, #0]
 80049f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	f7fd f830 	bl	8001a60 <sd_write_array_int>
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a1c:	3340      	adds	r3, #64	; 0x40
 8004a1e:	2200      	movs	r2, #0
 8004a20:	9200      	str	r2, [sp, #0]
 8004a22:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	68b8      	ldr	r0, [r7, #8]
 8004a2a:	f7fc ff27 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a34:	3380      	adds	r3, #128	; 0x80
 8004a36:	2200      	movs	r2, #0
 8004a38:	9200      	str	r2, [sp, #0]
 8004a3a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f7fc ff1b 	bl	800187c <sd_write_array_float>
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af02      	add	r7, sp, #8
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a62:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004a66:	2200      	movs	r2, #0
 8004a68:	9200      	str	r2, [sp, #0]
 8004a6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	68b8      	ldr	r0, [r7, #8]
 8004a72:	f7fc ff03 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a80:	2200      	movs	r2, #0
 8004a82:	9200      	str	r2, [sp, #0]
 8004a84:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	68b8      	ldr	r0, [r7, #8]
 8004a8c:	f7fc fef6 	bl	800187c <sd_write_array_float>
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004aac:	3340      	adds	r3, #64	; 0x40
 8004aae:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68b8      	ldr	r0, [r7, #8]
 8004ab6:	f7fc ff47 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004ac0:	3380      	adds	r3, #128	; 0x80
 8004ac2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	68b8      	ldr	r0, [r7, #8]
 8004aca:	f7fc ff3d 	bl	8001948 <sd_read_array_float>
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b08b      	sub	sp, #44	; 0x2c
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004ae4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004af4:	3340      	adds	r3, #64	; 0x40
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d009      	beq.n	8004b14 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	3304      	adds	r3, #4
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e7f1      	b.n	8004af8 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b2a:	3340      	adds	r3, #64	; 0x40
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d009      	beq.n	8004b4a <_ZN6Logger10resetLogs2Ev+0x74>
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	3304      	adds	r3, #4
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	e7f1      	b.n	8004b2e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b50:	33c2      	adds	r3, #194	; 0xc2
 8004b52:	2200      	movs	r2, #0
 8004b54:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b5c:	33ca      	adds	r3, #202	; 0xca
 8004b5e:	2200      	movs	r2, #0
 8004b60:	801a      	strh	r2, [r3, #0]
}
 8004b62:	bf00      	nop
 8004b64:	372c      	adds	r7, #44	; 0x2c
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b7c:	33c2      	adds	r3, #194	; 0xc2
 8004b7e:	2200      	movs	r2, #0
 8004b80:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b88:	33ca      	adds	r3, #202	; 0xca
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	801a      	strh	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <_ZN6Logger5startEv>:

void Logger::start()
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ba8:	33c0      	adds	r3, #192	; 0xc0
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bc8:	33c0      	adds	r3, #192	; 0xc0
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	805a      	strh	r2, [r3, #2]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <_ZN5Motor4initEv>:

void Motor::init()
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c04:	2108      	movs	r1, #8
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <_ZN5Motor4initEv+0x20>)
 8004c08:	f00a fa22 	bl	800f050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004c0c:	210c      	movs	r1, #12
 8004c0e:	4803      	ldr	r0, [pc, #12]	; (8004c1c <_ZN5Motor4initEv+0x20>)
 8004c10:	f00a fa1e 	bl	800f050 <HAL_TIM_PWM_Start>

}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20044710 	.word	0x20044710

08004c20 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da0d      	bge.n	8004c4e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c38:	481f      	ldr	r0, [pc, #124]	; (8004cb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c3a:	f006 faef 	bl	800b21c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	425b      	negs	r3, r3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	81fb      	strh	r3, [r7, #14]
 8004c4c:	e00a      	b.n	8004c64 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c54:	4818      	ldr	r0, [pc, #96]	; (8004cb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c56:	f006 fae1 	bl	800b21c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	da0d      	bge.n	8004c8a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c74:	4810      	ldr	r0, [pc, #64]	; (8004cb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c76:	f006 fad1 	bl	800b21c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	425b      	negs	r3, r3
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	81bb      	strh	r3, [r7, #12]
 8004c88:	e00a      	b.n	8004ca0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c92:	f006 fac3 	bl	800b21c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004ca0:	89fa      	ldrh	r2, [r7, #14]
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004ca8:	89ba      	ldrh	r2, [r7, #12]
 8004caa:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <_ZN5Motor9motorCtrlEv+0x9c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40020c00 	.word	0x40020c00
 8004cbc:	20044710 	.word	0x20044710

08004cc0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6178      	str	r0, [r7, #20]
 8004cc8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ccc:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cda:	f7fb ff35 	bl	8000b48 <__aeabi_dcmpgt>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <_ZN5Motor8setRatioEdd+0x30>
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	4c2b      	ldr	r4, [pc, #172]	; (8004d98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004cea:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004cee:	e00e      	b.n	8004d0e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cfa:	f7fb ff07 	bl	8000b0c <__aeabi_dcmplt>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d004      	beq.n	8004d0e <_ZN5Motor8setRatioEdd+0x4e>
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	4c24      	ldr	r4, [pc, #144]	; (8004d9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004d0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d18:	f7fb ff16 	bl	8000b48 <__aeabi_dcmpgt>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <_ZN5Motor8setRatioEdd+0x6e>
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	4c1c      	ldr	r4, [pc, #112]	; (8004d98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d28:	e9c7 3400 	strd	r3, r4, [r7]
 8004d2c:	e00e      	b.n	8004d4c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d38:	f7fb fee8 	bl	8000b0c <__aeabi_dcmplt>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <_ZN5Motor8setRatioEdd+0x8c>
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	4c15      	ldr	r4, [pc, #84]	; (8004d9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004d48:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d56:	f7fb fc67 	bl	8000628 <__aeabi_dmul>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	4621      	mov	r1, r4
 8004d62:	f7fb ff11 	bl	8000b88 <__aeabi_d2iz>
 8004d66:	4603      	mov	r3, r0
 8004d68:	b21a      	sxth	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d78:	f7fb fc56 	bl	8000628 <__aeabi_dmul>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	4618      	mov	r0, r3
 8004d82:	4621      	mov	r1, r4
 8004d84:	f7fb ff00 	bl	8000b88 <__aeabi_d2iz>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	b21a      	sxth	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	805a      	strh	r2, [r3, #2]

}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}
 8004d98:	3ff00000 	.word	0x3ff00000
 8004d9c:	bff00000 	.word	0xbff00000
 8004da0:	409c2000 	.word	0x409c2000

08004da4 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004dd8:	b490      	push	{r4, r7}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f04f 0400 	mov.w	r4, #0
 8004df0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	f04f 0400 	mov.w	r4, #0
 8004e0c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	f04f 0400 	mov.w	r4, #0
 8004e1a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	609a      	str	r2, [r3, #8]
}
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc90      	pop	{r4, r7}
 8004e48:	4770      	bx	lr
 8004e4a:	0000      	movs	r0, r0
 8004e4c:	0000      	movs	r0, r0
	...

08004e50 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b086      	sub	sp, #24
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd f836 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 8004e64:	ee10 3a10 	vmov	r3, s0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb fb85 	bl	8000578 <__aeabi_f2d>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fc fc14 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004e80:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004e84:	a376      	add	r3, pc, #472	; (adr r3, 8005060 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e8e:	f7fb fbcb 	bl	8000628 <__aeabi_dmul>
 8004e92:	4603      	mov	r3, r0
 8004e94:	460c      	mov	r4, r1
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7fb fb68 	bl	8000578 <__aeabi_f2d>
 8004ea8:	4682      	mov	sl, r0
 8004eaa:	468b      	mov	fp, r1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ec0:	f7fb fcdc 	bl	800087c <__aeabi_ddiv>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4640      	mov	r0, r8
 8004eca:	4649      	mov	r1, r9
 8004ecc:	f7fb f9f6 	bl	80002bc <__adddf3>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	ec43 2b17 	vmov	d7, r2, r3
 8004ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8004edc:	eef0 0a67 	vmov.f32	s1, s15
 8004ee0:	f00f fbfa 	bl	80146d8 <cos>
 8004ee4:	ec53 2b10 	vmov	r2, r3, d0
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	f7fb fb9c 	bl	8000628 <__aeabi_dmul>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f7fb f9e0 	bl	80002bc <__adddf3>
 8004efc:	4603      	mov	r3, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7fb fb33 	bl	8000578 <__aeabi_f2d>
 8004f12:	4682      	mov	sl, r0
 8004f14:	468b      	mov	fp, r1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f2a:	f7fb fca7 	bl	800087c <__aeabi_ddiv>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4640      	mov	r0, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	f7fb f9c1 	bl	80002bc <__adddf3>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	ec43 2b17 	vmov	d7, r2, r3
 8004f42:	eeb0 0a47 	vmov.f32	s0, s14
 8004f46:	eef0 0a67 	vmov.f32	s1, s15
 8004f4a:	f00f fc09 	bl	8014760 <sin>
 8004f4e:	ec53 2b10 	vmov	r2, r3, d0
 8004f52:	4650      	mov	r0, sl
 8004f54:	4659      	mov	r1, fp
 8004f56:	f7fb fb67 	bl	8000628 <__aeabi_dmul>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb f9ab 	bl	80002bc <__adddf3>
 8004f66:	4603      	mov	r3, r0
 8004f68:	460c      	mov	r4, r1
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	f7fb f99c 	bl	80002bc <__adddf3>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f9e:	eef0 0a67 	vmov.f32	s1, s15
 8004fa2:	f00f fb99 	bl	80146d8 <cos>
 8004fa6:	ec51 0b10 	vmov	r0, r1, d0
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	4b28      	ldr	r3, [pc, #160]	; (8005050 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004fb0:	f7fb fb3a 	bl	8000628 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb f97e 	bl	80002bc <__adddf3>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8004fda:	eef0 0a67 	vmov.f32	s1, s15
 8004fde:	f00f fbbf 	bl	8014760 <sin>
 8004fe2:	ec51 0b10 	vmov	r0, r1, d0
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004fec:	f7fb fb1c 	bl	8000628 <__aeabi_dmul>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb f960 	bl	80002bc <__adddf3>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800500c:	4618      	mov	r0, r3
 800500e:	4621      	mov	r1, r4
 8005010:	f7fb fe02 	bl	8000c18 <__aeabi_d2f>
 8005014:	4602      	mov	r2, r0
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005018:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005020:	4618      	mov	r0, r3
 8005022:	4621      	mov	r1, r4
 8005024:	f7fb fdf8 	bl	8000c18 <__aeabi_d2f>
 8005028:	4602      	mov	r2, r0
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <_ZN8Odometry12calcPotitionEv+0x208>)
 800502c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005034:	4618      	mov	r0, r3
 8005036:	4621      	mov	r1, r4
 8005038:	f7fb fdee 	bl	8000c18 <__aeabi_d2f>
 800503c:	4602      	mov	r2, r0
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504c:	f3af 8000 	nop.w
 8005050:	405b8000 	.word	0x405b8000
 8005054:	2000028c 	.word	0x2000028c
 8005058:	20000290 	.word	0x20000290
 800505c:	20000294 	.word	0x20000294
 8005060:	d2f1a9fc 	.word	0xd2f1a9fc
 8005064:	3f50624d 	.word	0x3f50624d

08005068 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff feed 	bl	8004e50 <_ZN8Odometry12calcPotitionEv>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800507e:	b490      	push	{r4, r7}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
	return theta_;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800508c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005090:	eeb0 0a47 	vmov.f32	s0, s14
 8005094:	eef0 0a67 	vmov.f32	s1, s15
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bc90      	pop	{r4, r7}
 800509e:	4770      	bx	lr

080050a0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80050a0:	b490      	push	{r4, r7}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f04f 0400 	mov.w	r4, #0
 80050b2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	f04f 0400 	mov.w	r4, #0
 80050c0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	f04f 0400 	mov.w	r4, #0
 80050ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc90      	pop	{r4, r7}
 80050da:	4770      	bx	lr

080050dc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80050dc:	b490      	push	{r4, r7}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	f04f 0400 	mov.w	r4, #0
 80050f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	f04f 0400 	mov.w	r4, #0
 8005110:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800511a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800511e:	2200      	movs	r2, #0
 8005120:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005122:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <_ZN13PathFollowingC1Ev+0xec>)
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <_ZN13PathFollowingC1Ev+0xec>)
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	f04f 0400 	mov.w	r4, #0
 800513a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800513e:	4a22      	ldr	r2, [pc, #136]	; (80051c8 <_ZN13PathFollowingC1Ev+0xec>)
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <_ZN13PathFollowingC1Ev+0xf0>)
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <_ZN13PathFollowingC1Ev+0xf0>)
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005168:	4a18      	ldr	r2, [pc, #96]	; (80051cc <_ZN13PathFollowingC1Ev+0xf0>)
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	f04f 0400 	mov.w	r4, #0
 8005172:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005176:	4a15      	ldr	r2, [pc, #84]	; (80051cc <_ZN13PathFollowingC1Ev+0xf0>)
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	f04f 0400 	mov.w	r4, #0
 8005180:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <_ZN13PathFollowingC1Ev+0xf0>)
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005192:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <_ZN13PathFollowingC1Ev+0xf0>)
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	f04f 0400 	mov.w	r4, #0
 800519c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051a0:	4a0b      	ldr	r2, [pc, #44]	; (80051d0 <_ZN13PathFollowingC1Ev+0xf4>)
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f04f 0400 	mov.w	r4, #0
 80051aa:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <_ZN13PathFollowingC1Ev+0xf4>)
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f04f 0400 	mov.w	r4, #0
 80051b8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc90      	pop	{r4, r7}
 80051c6:	4770      	bx	lr
 80051c8:	20044c10 	.word	0x20044c10
 80051cc:	20044ba0 	.word	0x20044ba0
 80051d0:	20044c00 	.word	0x20044c00

080051d4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80051dc:	f001 fdce 	bl	8006d7c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80051e0:	f107 0318 	add.w	r3, r7, #24
 80051e4:	2201      	movs	r2, #1
 80051e6:	4915      	ldr	r1, [pc, #84]	; (800523c <_ZN13PathFollowing4initEv+0x68>)
 80051e8:	4815      	ldr	r0, [pc, #84]	; (8005240 <_ZN13PathFollowing4initEv+0x6c>)
 80051ea:	f7fc fbf3 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80051ee:	f107 0310 	add.w	r3, r7, #16
 80051f2:	2201      	movs	r2, #1
 80051f4:	4913      	ldr	r1, [pc, #76]	; (8005244 <_ZN13PathFollowing4initEv+0x70>)
 80051f6:	4812      	ldr	r0, [pc, #72]	; (8005240 <_ZN13PathFollowing4initEv+0x6c>)
 80051f8:	f7fc fbec 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80051fc:	f107 0308 	add.w	r3, r7, #8
 8005200:	2201      	movs	r2, #1
 8005202:	4911      	ldr	r1, [pc, #68]	; (8005248 <_ZN13PathFollowing4initEv+0x74>)
 8005204:	480e      	ldr	r0, [pc, #56]	; (8005240 <_ZN13PathFollowing4initEv+0x6c>)
 8005206:	f7fc fbe5 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800520a:	ed97 7b06 	vldr	d7, [r7, #24]
 800520e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005212:	ed97 5b02 	vldr	d5, [r7, #8]
 8005216:	eeb0 2a45 	vmov.f32	s4, s10
 800521a:	eef0 2a65 	vmov.f32	s5, s11
 800521e:	eeb0 1a46 	vmov.f32	s2, s12
 8005222:	eef0 1a66 	vmov.f32	s3, s13
 8005226:	eeb0 0a47 	vmov.f32	s0, s14
 800522a:	eef0 0a67 	vmov.f32	s1, s15
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f80c 	bl	800524c <_ZN13PathFollowing7setGainEddd>
}
 8005234:	bf00      	nop
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	08019d74 	.word	0x08019d74
 8005240:	08019d7c 	.word	0x08019d7c
 8005244:	08019d84 	.word	0x08019d84
 8005248:	08019d8c 	.word	0x08019d8c

0800524c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800524c:	b490      	push	{r4, r7}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	61f8      	str	r0, [r7, #28]
 8005254:	ed87 0b04 	vstr	d0, [r7, #16]
 8005258:	ed87 1b02 	vstr	d1, [r7, #8]
 800525c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005262:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005266:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800526a:	4a07      	ldr	r2, [pc, #28]	; (8005288 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800526c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005270:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005274:	4a04      	ldr	r2, [pc, #16]	; (8005288 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005276:	e9d7 3400 	ldrd	r3, r4, [r7]
 800527a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800527e:	bf00      	nop
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bc90      	pop	{r4, r7}
 8005286:	4770      	bx	lr
 8005288:	20044c10 	.word	0x20044c10

0800528c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005294:	2088      	movs	r0, #136	; 0x88
 8005296:	f7fc ff5e 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800529a:	2080      	movs	r0, #128	; 0x80
 800529c:	f7fc ff5b 	bl	8002156 <INA260_init>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80052b0:	2188      	movs	r1, #136	; 0x88
 80052b2:	2002      	movs	r0, #2
 80052b4:	f7fc feec 	bl	8002090 <INA260_read>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb f94a 	bl	8000554 <__aeabi_i2d>
 80052c0:	a30c      	add	r3, pc, #48	; (adr r3, 80052f4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fb f9af 	bl	8000628 <__aeabi_dmul>
 80052ca:	4603      	mov	r3, r0
 80052cc:	460c      	mov	r4, r1
 80052ce:	4618      	mov	r0, r3
 80052d0:	4621      	mov	r1, r4
 80052d2:	f7fb fca1 	bl	8000c18 <__aeabi_d2f>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a03      	ldr	r2, [pc, #12]	; (80052f0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80052e2:	6013      	str	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd90      	pop	{r4, r7, pc}
 80052ec:	f3af 8000 	nop.w
 80052f0:	20000298 	.word	0x20000298
 80052f4:	47ae147b 	.word	0x47ae147b
 80052f8:	3f547ae1 	.word	0x3f547ae1

080052fc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	ee07 3a90 	vmov	s15, r3

}
 800530c:	eeb0 0a67 	vmov.f32	s0, s15
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005328:	2102      	movs	r1, #2
 800532a:	4822      	ldr	r0, [pc, #136]	; (80053b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800532c:	f005 ff5e 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf0c      	ite	eq
 8005336:	2301      	moveq	r3, #1
 8005338:	2300      	movne	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005348:	2108      	movs	r1, #8
 800534a:	481a      	ldr	r0, [pc, #104]	; (80053b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800534c:	f005 ff4e 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005360:	89fb      	ldrh	r3, [r7, #14]
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005368:	2110      	movs	r1, #16
 800536a:	4812      	ldr	r0, [pc, #72]	; (80053b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800536c:	f005 ff3e 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf0c      	ite	eq
 8005376:	2301      	moveq	r3, #1
 8005378:	2300      	movne	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	f043 0304 	orr.w	r3, r3, #4
 8005386:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	480a      	ldr	r0, [pc, #40]	; (80053b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800538c:	f005 ff2e 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053a0:	89fb      	ldrh	r3, [r7, #14]
 80053a2:	f043 0308 	orr.w	r3, r3, #8
 80053a6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053a8:	89fb      	ldrh	r3, [r7, #14]

}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40020c00 	.word	0x40020c00

080053b8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	709a      	strb	r2, [r3, #2]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	70da      	strb	r2, [r3, #3]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	809a      	strh	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	80da      	strh	r2, [r3, #6]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	721a      	strb	r2, [r3, #8]
{

}
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7a1b      	ldrb	r3, [r3, #8]
 8005400:	f083 0301 	eor.w	r3, r3, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80ea 	beq.w	80055e0 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 800540c:	4b76      	ldr	r3, [pc, #472]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f083 0301 	eor.w	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d032      	beq.n	8005480 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 800541a:	2104      	movs	r1, #4
 800541c:	4873      	ldr	r0, [pc, #460]	; (80055ec <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800541e:	f005 fee5 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <_ZN10SideSensor12updateStatusEv+0x48>
 8005428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800542c:	4870      	ldr	r0, [pc, #448]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800542e:	f005 fedd 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <_ZN10SideSensor12updateStatusEv+0x48>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <_ZN10SideSensor12updateStatusEv+0x4a>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 8005442:	4b6c      	ldr	r3, [pc, #432]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e002      	b.n	8005456 <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005450:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005452:	2200      	movs	r2, #0
 8005454:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005456:	4b67      	ldr	r3, [pc, #412]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	2b04      	cmp	r3, #4
 800545c:	d945      	bls.n	80054ea <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8005472:	4b5d      	ldr	r3, [pc, #372]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005478:	4b5e      	ldr	r3, [pc, #376]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 800547a:	2200      	movs	r2, #0
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	e034      	b.n	80054ea <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d030      	beq.n	80054ea <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005488:	2104      	movs	r1, #4
 800548a:	4858      	ldr	r0, [pc, #352]	; (80055ec <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800548c:	f005 feae 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d006      	beq.n	80054ae <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 80054a0:	4b54      	ldr	r3, [pc, #336]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	4b52      	ldr	r3, [pc, #328]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e002      	b.n	80054b4 <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 80054ae:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054b4:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d916      	bls.n	80054ea <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	f083 0301 	eor.w	r3, r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80054d0:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	88db      	ldrh	r3, [r3, #6]
 80054da:	3301      	adds	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	88da      	ldrh	r2, [r3, #6]
 80054e6:	4b44      	ldr	r3, [pc, #272]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x204>)
 80054e8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80054ea:	4b44      	ldr	r3, [pc, #272]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x208>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d031      	beq.n	800555c <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 80054f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054fc:	483c      	ldr	r0, [pc, #240]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80054fe:	f005 fe75 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <_ZN10SideSensor12updateStatusEv+0x126>
 8005508:	2104      	movs	r1, #4
 800550a:	4838      	ldr	r0, [pc, #224]	; (80055ec <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800550c:	f005 fe6e 	bl	800b1ec <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <_ZN10SideSensor12updateStatusEv+0x126>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <_ZN10SideSensor12updateStatusEv+0x128>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 8005520:	4b37      	ldr	r3, [pc, #220]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	4b35      	ldr	r3, [pc, #212]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e002      	b.n	8005534 <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 800552e:	4b34      	ldr	r3, [pc, #208]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005530:	2200      	movs	r2, #0
 8005532:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b04      	cmp	r3, #4
 800553a:	d90f      	bls.n	800555c <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005550:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x208>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005556:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005558:	2200      	movs	r2, #0
 800555a:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800555c:	4b27      	ldr	r3, [pc, #156]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x208>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d031      	beq.n	80055c8 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 8005564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005568:	4821      	ldr	r0, [pc, #132]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800556a:	f005 fe3f 	bl	800b1ec <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e002      	b.n	8005592 <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 800558c:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800558e:	2200      	movs	r2, #0
 8005590:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005592:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d916      	bls.n	80055c8 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	f083 0302 	eor.w	r3, r3, #2
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x208>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	889b      	ldrh	r3, [r3, #4]
 80055b8:	3301      	adds	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	889a      	ldrh	r2, [r3, #4]
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x210>)
 80055c6:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	881a      	ldrh	r2, [r3, #0]
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x214>)
 80055ce:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	789a      	ldrb	r2, [r3, #2]
 80055d4:	4b0d      	ldr	r3, [pc, #52]	; (800560c <_ZN10SideSensor12updateStatusEv+0x218>)
 80055d6:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	78da      	ldrb	r2, [r3, #3]
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x21c>)
 80055de:	701a      	strb	r2, [r3, #0]
	}

}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	200002a4 	.word	0x200002a4
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40020c00 	.word	0x40020c00
 80055f4:	200002a8 	.word	0x200002a8
 80055f8:	200002a2 	.word	0x200002a2
 80055fc:	200002a5 	.word	0x200002a5
 8005600:	200002a6 	.word	0x200002a6
 8005604:	200002a0 	.word	0x200002a0
 8005608:	2000029c 	.word	0x2000029c
 800560c:	2000029e 	.word	0x2000029e
 8005610:	2000029f 	.word	0x2000029f

08005614 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	return status_L_;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	789b      	ldrb	r3, [r3, #2]
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	88db      	ldrh	r3, [r3, #6]
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	80da      	strh	r2, [r3, #6]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	721a      	strb	r2, [r3, #8]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	721a      	strb	r2, [r3, #8]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7a1b      	ldrb	r3, [r3, #8]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3308      	adds	r3, #8
 80056c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f010 f886 	bl	80157d8 <memset>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056d2:	811a      	strh	r2, [r3, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056da:	815a      	strh	r2, [r3, #10]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e2:	819a      	strh	r2, [r3, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ea:	81da      	strh	r2, [r3, #14]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f2:	821a      	strh	r2, [r3, #16]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056fa:	825a      	strh	r2, [r3, #18]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	829a      	strh	r2, [r3, #20]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	82da      	strh	r2, [r3, #22]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	831a      	strh	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	835a      	strh	r2, [r3, #26]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	839a      	strh	r2, [r3, #28]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	83da      	strh	r2, [r3, #30]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	841a      	strh	r2, [r3, #32]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800572c:	845a      	strh	r2, [r3, #34]	; 0x22
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	849a      	strh	r2, [r3, #36]	; 0x24
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800573a:	84da      	strh	r2, [r3, #38]	; 0x26
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	851a      	strh	r2, [r3, #40]	; 0x28
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005748:	855a      	strh	r2, [r3, #42]	; 0x2a
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005756:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575e:	861a      	strh	r2, [r3, #48]	; 0x30
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	865a      	strh	r2, [r3, #50]	; 0x32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	869a      	strh	r2, [r3, #52]	; 0x34
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005772:	86da      	strh	r2, [r3, #54]	; 0x36
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800577a:	871a      	strh	r2, [r3, #56]	; 0x38
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005794:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005808:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005856:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005870:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005882:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058dc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ee:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005902:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005924:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005938:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005942:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005954:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005986:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005990:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fa:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a0c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d042      	beq.n	8005ad8 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005a5e:	461a      	mov	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3204      	adds	r2, #4
 8005a64:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005a80:	3301      	adds	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005a92:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005a9a:	2bf9      	cmp	r3, #249	; 0xf9
 8005a9c:	d903      	bls.n	8005aa6 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	22fa      	movs	r2, #250	; 0xfa
 8005aa2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685c      	ldr	r4, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fd61 	bl	8000578 <__aeabi_f2d>
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	460e      	mov	r6, r1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fa fd59 	bl	8000578 <__aeabi_f2d>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	ec43 2b11 	vmov	d1, r2, r3
 8005ace:	ec46 5b10 	vmov	d0, r5, r6
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff f8f4 	bl	8004cc0 <_ZN5Motor8setRatioEdd>

	}

}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae0:	200002ac 	.word	0x200002ac

08005ae4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	611a      	str	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	615a      	str	r2, [r3, #20]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	61da      	str	r2, [r3, #28]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	621a      	str	r2, [r3, #32]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	0000      	movs	r0, r0
 8005b7c:	0000      	movs	r0, r0
	...

08005b80 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	f107 020c 	add.w	r2, r7, #12
 8005b90:	f107 0110 	add.w	r1, r7, #16
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fb fd73 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005b9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ba6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bae:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005bb2:	6978      	ldr	r0, [r7, #20]
 8005bb4:	f7fa fce0 	bl	8000578 <__aeabi_f2d>
 8005bb8:	a30e      	add	r3, pc, #56	; (adr r3, 8005bf4 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f7fa fd33 	bl	8000628 <__aeabi_dmul>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	4621      	mov	r1, r4
 8005bca:	f7fb f825 	bl	8000c18 <__aeabi_d2f>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005bda:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	ee07 3a90 	vmov	s15, r3
}
 8005be4:	eeb0 0a67 	vmov.f32	s0, s15
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd90      	pop	{r4, r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	200002b0 	.word	0x200002b0
 8005bf4:	1ab1d998 	.word	0x1ab1d998
 8005bf8:	3f7830b5 	.word	0x3f7830b5
 8005bfc:	00000000 	.word	0x00000000

08005c00 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	ed93 7a00 	vldr	s14, [r3]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c18:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005c26:	4b48      	ldr	r3, [pc, #288]	; (8005d48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005c48:	4b3f      	ldr	r3, [pc, #252]	; (8005d48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fc93 	bl	8000578 <__aeabi_f2d>
 8005c52:	4604      	mov	r4, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c64:	ee17 0a90 	vmov	r0, s15
 8005c68:	f7fa fc86 	bl	8000578 <__aeabi_f2d>
 8005c6c:	a334      	add	r3, pc, #208	; (adr r3, 8005d40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f7fa fcd9 	bl	8000628 <__aeabi_dmul>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	f7fa fb1d 	bl	80002bc <__adddf3>
 8005c82:	4603      	mov	r3, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	4618      	mov	r0, r3
 8005c88:	4621      	mov	r1, r4
 8005c8a:	f7fa ffc5 	bl	8000c18 <__aeabi_d2f>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c92:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c9a:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c9c:	edd3 7a00 	vldr	s15, [r3]
 8005ca0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ca4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cac:	ee17 0a90 	vmov	r0, s15
 8005cb0:	f7fa fc62 	bl	8000578 <__aeabi_f2d>
 8005cb4:	a322      	add	r3, pc, #136	; (adr r3, 8005d40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fddf 	bl	800087c <__aeabi_ddiv>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f7fa ffa7 	bl	8000c18 <__aeabi_d2f>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cda:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cdc:	edd3 7a00 	vldr	s15, [r3]
 8005ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005cf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cfa:	ee17 0a90 	vmov	r0, s15
 8005cfe:	f7fa fc3b 	bl	8000578 <__aeabi_f2d>
 8005d02:	4605      	mov	r5, r0
 8005d04:	460e      	mov	r6, r1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d14:	ee17 0a90 	vmov	r0, s15
 8005d18:	f7fa fc2e 	bl	8000578 <__aeabi_f2d>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	ec43 2b11 	vmov	d1, r2, r3
 8005d24:	ec46 5b10 	vmov	d0, r5, r6
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7fe ffc9 	bl	8004cc0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005d2e:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	6013      	str	r3, [r2, #0]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3c:	f3af 8000 	nop.w
 8005d40:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d44:	3f50624d 	.word	0x3f50624d
 8005d48:	200002b8 	.word	0x200002b8
 8005d4c:	200002b4 	.word	0x200002b4

08005d50 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d5c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	605a      	str	r2, [r3, #4]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d84:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dac:	edc7 0a01 	vstr	s1, [r7, #4]
 8005db0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	615a      	str	r2, [r3, #20]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dde:	edc7 0a01 	vstr	s1, [r7, #4]
 8005de2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	621a      	str	r2, [r3, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff feb7 	bl	8005b80 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff feef 	bl	8005c00 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005e80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005e80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe ff27 	bl	8004cc0 <_ZN5Motor8setRatioEdd>

}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w
	...

08005e88 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10e      	bne.n	8005eb8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005e9a:	f001 fe11 	bl	8007ac0 <cppFlip100ns>

		tim7_timer++;
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ea6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d902      	bls.n	8005eb8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005eb2:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005ec2:	f001 fdcd 	bl	8007a60 <cppFlip1ms>

		tim6_timer++;
 8005ec6:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ece:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d902      	bls.n	8005ee0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a0f      	ldr	r2, [pc, #60]	; (8005f24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005eea:	f001 fdf3 	bl	8007ad4 <cppFlip10ms>

		tim13_timer++;
 8005eee:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ef6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a06      	ldr	r2, [pc, #24]	; (8005f18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d902      	bls.n	8005f08 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
	}

}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40001400 	.word	0x40001400
 8005f14:	200448c4 	.word	0x200448c4
 8005f18:	0001869f 	.word	0x0001869f
 8005f1c:	40001000 	.word	0x40001000
 8005f20:	20044880 	.word	0x20044880
 8005f24:	40001c00 	.word	0x40001c00
 8005f28:	200448c8 	.word	0x200448c8

08005f2c <init>:

void init()
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005f30:	2201      	movs	r2, #1
 8005f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f36:	4808      	ldr	r0, [pc, #32]	; (8005f58 <init+0x2c>)
 8005f38:	f005 f970 	bl	800b21c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005f3c:	4807      	ldr	r0, [pc, #28]	; (8005f5c <init+0x30>)
 8005f3e:	f009 f838 	bl	800efb2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005f42:	4807      	ldr	r0, [pc, #28]	; (8005f60 <init+0x34>)
 8005f44:	f009 f835 	bl	800efb2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005f48:	4806      	ldr	r0, [pc, #24]	; (8005f64 <init+0x38>)
 8005f4a:	f009 f832 	bl	800efb2 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005f4e:	f001 fce3 	bl	8007918 <cppInit>

	//path_following_initialize();

}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	200449ac 	.word	0x200449ac
 8005f60:	20044b50 	.word	0x20044b50
 8005f64:	200448cc 	.word	0x200448cc

08005f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f6c:	f003 fe4e 	bl	8009c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f70:	f000 f82a 	bl	8005fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f74:	f000 fdbc 	bl	8006af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005f78:	f000 fd8a 	bl	8006a90 <MX_DMA_Init>
  MX_I2C2_Init();
 8005f7c:	f000 f9e8 	bl	8006350 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005f80:	f000 fa14 	bl	80063ac <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005f84:	f000 fa32 	bl	80063ec <MX_SPI2_Init>
  MX_TIM1_Init();
 8005f88:	f000 fa66 	bl	8006458 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005f8c:	f000 fb70 	bl	8006670 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005f90:	f000 fc3c 	bl	800680c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005f94:	f000 fd52 	bl	8006a3c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005f98:	f00a ffde 	bl	8010f58 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005f9c:	f000 fbcc 	bl	8006738 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005fa0:	f000 f9a8 	bl	80062f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005fa4:	f000 fb00 	bl	80065a8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005fa8:	f000 fc88 	bl	80068bc <MX_TIM10_Init>
  MX_TIM11_Init();
 8005fac:	f000 fcd4 	bl	8006958 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005fb0:	f000 f898 	bl	80060e4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005fb4:	f000 fbf6 	bl	80067a4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005fb8:	f000 fd1c 	bl	80069f4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005fbc:	f7ff ffb6 	bl	8005f2c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005fc0:	f001 fdb6 	bl	8007b30 <cppLoop>
 8005fc4:	e7fc      	b.n	8005fc0 <main+0x58>
	...

08005fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b0a4      	sub	sp, #144	; 0x90
 8005fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fd2:	2234      	movs	r2, #52	; 0x34
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f00f fbfe 	bl	80157d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	609a      	str	r2, [r3, #8]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fec:	f107 030c 	add.w	r3, r7, #12
 8005ff0:	223c      	movs	r2, #60	; 0x3c
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f00f fbef 	bl	80157d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <SystemClock_Config+0x114>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	4a36      	ldr	r2, [pc, #216]	; (80060dc <SystemClock_Config+0x114>)
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	6413      	str	r3, [r2, #64]	; 0x40
 800600a:	4b34      	ldr	r3, [pc, #208]	; (80060dc <SystemClock_Config+0x114>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <SystemClock_Config+0x118>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <SystemClock_Config+0x118>)
 8006020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b2e      	ldr	r3, [pc, #184]	; (80060e0 <SystemClock_Config+0x118>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006032:	2301      	movs	r3, #1
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800603a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800603c:	2302      	movs	r3, #2
 800603e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006044:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006046:	2308      	movs	r3, #8
 8006048:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800604a:	23b4      	movs	r3, #180	; 0xb4
 800604c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006050:	2302      	movs	r3, #2
 8006052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006056:	2308      	movs	r3, #8
 8006058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800605c:	2302      	movs	r3, #2
 800605e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006062:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006066:	4618      	mov	r0, r3
 8006068:	f006 fcfa 	bl	800ca60 <HAL_RCC_OscConfig>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006072:	f000 fe7f 	bl	8006d74 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006076:	f006 f875 	bl	800c164 <HAL_PWREx_EnableOverDrive>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006080:	f000 fe78 	bl	8006d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006084:	230f      	movs	r3, #15
 8006086:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006088:	2302      	movs	r3, #2
 800608a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800608c:	2300      	movs	r3, #0
 800608e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006090:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006094:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800609c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060a0:	2105      	movs	r1, #5
 80060a2:	4618      	mov	r0, r3
 80060a4:	f006 f8ae 	bl	800c204 <HAL_RCC_ClockConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80060ae:	f000 fe61 	bl	8006d74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80060b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80060b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80060b8:	2300      	movs	r3, #0
 80060ba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80060bc:	2300      	movs	r3, #0
 80060be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f006 fa8d 	bl	800c5e4 <HAL_RCCEx_PeriphCLKConfig>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80060d0:	f000 fe50 	bl	8006d74 <Error_Handler>
  }
}
 80060d4:	bf00      	nop
 80060d6:	3790      	adds	r7, #144	; 0x90
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40023800 	.word	0x40023800
 80060e0:	40007000 	.word	0x40007000

080060e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80060ea:	463b      	mov	r3, r7
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80060f6:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <MX_ADC2_Init+0x204>)
 80060f8:	4a7c      	ldr	r2, [pc, #496]	; (80062ec <MX_ADC2_Init+0x208>)
 80060fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80060fc:	4b7a      	ldr	r3, [pc, #488]	; (80062e8 <MX_ADC2_Init+0x204>)
 80060fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006102:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006104:	4b78      	ldr	r3, [pc, #480]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800610a:	4b77      	ldr	r3, [pc, #476]	; (80062e8 <MX_ADC2_Init+0x204>)
 800610c:	2201      	movs	r2, #1
 800610e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006110:	4b75      	ldr	r3, [pc, #468]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006112:	2201      	movs	r2, #1
 8006114:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006116:	4b74      	ldr	r3, [pc, #464]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800611e:	4b72      	ldr	r3, [pc, #456]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006120:	2200      	movs	r2, #0
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006124:	4b70      	ldr	r3, [pc, #448]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006126:	4a72      	ldr	r2, [pc, #456]	; (80062f0 <MX_ADC2_Init+0x20c>)
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800612a:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <MX_ADC2_Init+0x204>)
 800612c:	2200      	movs	r2, #0
 800612e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006130:	4b6d      	ldr	r3, [pc, #436]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006132:	220e      	movs	r2, #14
 8006134:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006136:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800613e:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006140:	2201      	movs	r2, #1
 8006142:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006144:	4868      	ldr	r0, [pc, #416]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006146:	f003 fdf5 	bl	8009d34 <HAL_ADC_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006150:	f000 fe10 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006154:	230a      	movs	r3, #10
 8006156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006158:	2301      	movs	r3, #1
 800615a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800615c:	2306      	movs	r3, #6
 800615e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006160:	463b      	mov	r3, r7
 8006162:	4619      	mov	r1, r3
 8006164:	4860      	ldr	r0, [pc, #384]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006166:	f003 ff39 	bl	8009fdc <HAL_ADC_ConfigChannel>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006170:	f000 fe00 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006174:	230b      	movs	r3, #11
 8006176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006178:	2302      	movs	r3, #2
 800617a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800617c:	463b      	mov	r3, r7
 800617e:	4619      	mov	r1, r3
 8006180:	4859      	ldr	r0, [pc, #356]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006182:	f003 ff2b 	bl	8009fdc <HAL_ADC_ConfigChannel>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800618c:	f000 fdf2 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006190:	230c      	movs	r3, #12
 8006192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006194:	2303      	movs	r3, #3
 8006196:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006198:	463b      	mov	r3, r7
 800619a:	4619      	mov	r1, r3
 800619c:	4852      	ldr	r0, [pc, #328]	; (80062e8 <MX_ADC2_Init+0x204>)
 800619e:	f003 ff1d 	bl	8009fdc <HAL_ADC_ConfigChannel>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80061a8:	f000 fde4 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80061ac:	230d      	movs	r3, #13
 80061ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80061b0:	2304      	movs	r3, #4
 80061b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b4:	463b      	mov	r3, r7
 80061b6:	4619      	mov	r1, r3
 80061b8:	484b      	ldr	r0, [pc, #300]	; (80062e8 <MX_ADC2_Init+0x204>)
 80061ba:	f003 ff0f 	bl	8009fdc <HAL_ADC_ConfigChannel>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80061c4:	f000 fdd6 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80061cc:	2305      	movs	r3, #5
 80061ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d0:	463b      	mov	r3, r7
 80061d2:	4619      	mov	r1, r3
 80061d4:	4844      	ldr	r0, [pc, #272]	; (80062e8 <MX_ADC2_Init+0x204>)
 80061d6:	f003 ff01 	bl	8009fdc <HAL_ADC_ConfigChannel>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80061e0:	f000 fdc8 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80061e4:	2301      	movs	r3, #1
 80061e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80061e8:	2306      	movs	r3, #6
 80061ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061ec:	463b      	mov	r3, r7
 80061ee:	4619      	mov	r1, r3
 80061f0:	483d      	ldr	r0, [pc, #244]	; (80062e8 <MX_ADC2_Init+0x204>)
 80061f2:	f003 fef3 	bl	8009fdc <HAL_ADC_ConfigChannel>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80061fc:	f000 fdba 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006200:	2302      	movs	r3, #2
 8006202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006204:	2307      	movs	r3, #7
 8006206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006208:	463b      	mov	r3, r7
 800620a:	4619      	mov	r1, r3
 800620c:	4836      	ldr	r0, [pc, #216]	; (80062e8 <MX_ADC2_Init+0x204>)
 800620e:	f003 fee5 	bl	8009fdc <HAL_ADC_ConfigChannel>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006218:	f000 fdac 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800621c:	2303      	movs	r3, #3
 800621e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006220:	2308      	movs	r3, #8
 8006222:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006224:	463b      	mov	r3, r7
 8006226:	4619      	mov	r1, r3
 8006228:	482f      	ldr	r0, [pc, #188]	; (80062e8 <MX_ADC2_Init+0x204>)
 800622a:	f003 fed7 	bl	8009fdc <HAL_ADC_ConfigChannel>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006234:	f000 fd9e 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006238:	2304      	movs	r3, #4
 800623a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800623c:	2309      	movs	r3, #9
 800623e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006240:	463b      	mov	r3, r7
 8006242:	4619      	mov	r1, r3
 8006244:	4828      	ldr	r0, [pc, #160]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006246:	f003 fec9 	bl	8009fdc <HAL_ADC_ConfigChannel>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006250:	f000 fd90 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006254:	2305      	movs	r3, #5
 8006256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006258:	230a      	movs	r3, #10
 800625a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800625c:	463b      	mov	r3, r7
 800625e:	4619      	mov	r1, r3
 8006260:	4821      	ldr	r0, [pc, #132]	; (80062e8 <MX_ADC2_Init+0x204>)
 8006262:	f003 febb 	bl	8009fdc <HAL_ADC_ConfigChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800626c:	f000 fd82 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006270:	2306      	movs	r3, #6
 8006272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006274:	230b      	movs	r3, #11
 8006276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006278:	463b      	mov	r3, r7
 800627a:	4619      	mov	r1, r3
 800627c:	481a      	ldr	r0, [pc, #104]	; (80062e8 <MX_ADC2_Init+0x204>)
 800627e:	f003 fead 	bl	8009fdc <HAL_ADC_ConfigChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006288:	f000 fd74 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800628c:	2307      	movs	r3, #7
 800628e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006290:	230c      	movs	r3, #12
 8006292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006294:	463b      	mov	r3, r7
 8006296:	4619      	mov	r1, r3
 8006298:	4813      	ldr	r0, [pc, #76]	; (80062e8 <MX_ADC2_Init+0x204>)
 800629a:	f003 fe9f 	bl	8009fdc <HAL_ADC_ConfigChannel>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80062a4:	f000 fd66 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80062a8:	2308      	movs	r3, #8
 80062aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80062ac:	230d      	movs	r3, #13
 80062ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b0:	463b      	mov	r3, r7
 80062b2:	4619      	mov	r1, r3
 80062b4:	480c      	ldr	r0, [pc, #48]	; (80062e8 <MX_ADC2_Init+0x204>)
 80062b6:	f003 fe91 	bl	8009fdc <HAL_ADC_ConfigChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80062c0:	f000 fd58 	bl	8006d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80062c4:	2309      	movs	r3, #9
 80062c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80062c8:	230e      	movs	r3, #14
 80062ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062cc:	463b      	mov	r3, r7
 80062ce:	4619      	mov	r1, r3
 80062d0:	4805      	ldr	r0, [pc, #20]	; (80062e8 <MX_ADC2_Init+0x204>)
 80062d2:	f003 fe83 	bl	8009fdc <HAL_ADC_ConfigChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80062dc:	f000 fd4a 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20044750 	.word	0x20044750
 80062ec:	40012100 	.word	0x40012100
 80062f0:	0f000001 	.word	0x0f000001

080062f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <MX_I2C1_Init+0x50>)
 80062fa:	4a13      	ldr	r2, [pc, #76]	; (8006348 <MX_I2C1_Init+0x54>)
 80062fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80062fe:	4b11      	ldr	r3, [pc, #68]	; (8006344 <MX_I2C1_Init+0x50>)
 8006300:	4a12      	ldr	r2, [pc, #72]	; (800634c <MX_I2C1_Init+0x58>)
 8006302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <MX_I2C1_Init+0x50>)
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <MX_I2C1_Init+0x50>)
 800630c:	2200      	movs	r2, #0
 800630e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <MX_I2C1_Init+0x50>)
 8006312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006318:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <MX_I2C1_Init+0x50>)
 800631a:	2200      	movs	r2, #0
 800631c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <MX_I2C1_Init+0x50>)
 8006320:	2200      	movs	r2, #0
 8006322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <MX_I2C1_Init+0x50>)
 8006326:	2200      	movs	r2, #0
 8006328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <MX_I2C1_Init+0x50>)
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006330:	4804      	ldr	r0, [pc, #16]	; (8006344 <MX_I2C1_Init+0x50>)
 8006332:	f004 ff8d 	bl	800b250 <HAL_I2C_Init>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800633c:	f000 fd1a 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006340:	bf00      	nop
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20044798 	.word	0x20044798
 8006348:	40005400 	.word	0x40005400
 800634c:	000186a0 	.word	0x000186a0

08006350 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006354:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <MX_I2C2_Init+0x50>)
 8006356:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <MX_I2C2_Init+0x54>)
 8006358:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <MX_I2C2_Init+0x50>)
 800635c:	4a12      	ldr	r2, [pc, #72]	; (80063a8 <MX_I2C2_Init+0x58>)
 800635e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <MX_I2C2_Init+0x50>)
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <MX_I2C2_Init+0x50>)
 8006368:	2200      	movs	r2, #0
 800636a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800636c:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <MX_I2C2_Init+0x50>)
 800636e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006372:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <MX_I2C2_Init+0x50>)
 8006376:	2200      	movs	r2, #0
 8006378:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <MX_I2C2_Init+0x50>)
 800637c:	2200      	movs	r2, #0
 800637e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <MX_I2C2_Init+0x50>)
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006386:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <MX_I2C2_Init+0x50>)
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800638c:	4804      	ldr	r0, [pc, #16]	; (80063a0 <MX_I2C2_Init+0x50>)
 800638e:	f004 ff5f 	bl	800b250 <HAL_I2C_Init>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006398:	f000 fcec 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800639c:	bf00      	nop
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	2004482c 	.word	0x2004482c
 80063a4:	40005800 	.word	0x40005800
 80063a8:	000186a0 	.word	0x000186a0

080063ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063b2:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <MX_SDIO_SD_Init+0x3c>)
 80063b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80063bc:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063be:	2200      	movs	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80063d4:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <MX_SDIO_SD_Init+0x38>)
 80063d6:	2202      	movs	r2, #2
 80063d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80063da:	bf00      	nop
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20044a2c 	.word	0x20044a2c
 80063e8:	40012c00 	.word	0x40012c00

080063ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <MX_SPI2_Init+0x64>)
 80063f2:	4a18      	ldr	r2, [pc, #96]	; (8006454 <MX_SPI2_Init+0x68>)
 80063f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80063f6:	4b16      	ldr	r3, [pc, #88]	; (8006450 <MX_SPI2_Init+0x64>)
 80063f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80063fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80063fe:	4b14      	ldr	r3, [pc, #80]	; (8006450 <MX_SPI2_Init+0x64>)
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <MX_SPI2_Init+0x64>)
 8006406:	2200      	movs	r2, #0
 8006408:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800640a:	4b11      	ldr	r3, [pc, #68]	; (8006450 <MX_SPI2_Init+0x64>)
 800640c:	2202      	movs	r2, #2
 800640e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <MX_SPI2_Init+0x64>)
 8006412:	2201      	movs	r2, #1
 8006414:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <MX_SPI2_Init+0x64>)
 8006418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <MX_SPI2_Init+0x64>)
 8006420:	2228      	movs	r2, #40	; 0x28
 8006422:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <MX_SPI2_Init+0x64>)
 8006426:	2200      	movs	r2, #0
 8006428:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <MX_SPI2_Init+0x64>)
 800642c:	2200      	movs	r2, #0
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <MX_SPI2_Init+0x64>)
 8006432:	2200      	movs	r2, #0
 8006434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <MX_SPI2_Init+0x64>)
 8006438:	220a      	movs	r2, #10
 800643a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800643c:	4804      	ldr	r0, [pc, #16]	; (8006450 <MX_SPI2_Init+0x64>)
 800643e:	f008 f839 	bl	800e4b4 <HAL_SPI_Init>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006448:	f000 fc94 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800644c:	bf00      	nop
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20044678 	.word	0x20044678
 8006454:	40003800 	.word	0x40003800

08006458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b09a      	sub	sp, #104	; 0x68
 800645c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800645e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006462:	2224      	movs	r2, #36	; 0x24
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f00f f9b6 	bl	80157d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800646c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006476:	f107 0320 	add.w	r3, r7, #32
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	605a      	str	r2, [r3, #4]
 8006480:	609a      	str	r2, [r3, #8]
 8006482:	60da      	str	r2, [r3, #12]
 8006484:	611a      	str	r2, [r3, #16]
 8006486:	615a      	str	r2, [r3, #20]
 8006488:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800648a:	463b      	mov	r3, r7
 800648c:	2220      	movs	r2, #32
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f00f f9a1 	bl	80157d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006496:	4b42      	ldr	r3, [pc, #264]	; (80065a0 <MX_TIM1_Init+0x148>)
 8006498:	4a42      	ldr	r2, [pc, #264]	; (80065a4 <MX_TIM1_Init+0x14c>)
 800649a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800649c:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <MX_TIM1_Init+0x148>)
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064a2:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80064a8:	4b3d      	ldr	r3, [pc, #244]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064b0:	4b3b      	ldr	r3, [pc, #236]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064b6:	4b3a      	ldr	r3, [pc, #232]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064bc:	4b38      	ldr	r3, [pc, #224]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064be:	2200      	movs	r2, #0
 80064c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80064c2:	4837      	ldr	r0, [pc, #220]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064c4:	f008 fd99 	bl	800effa <HAL_TIM_PWM_Init>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80064ce:	f000 fc51 	bl	8006d74 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064d2:	2303      	movs	r3, #3
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064d6:	2300      	movs	r3, #0
 80064d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064da:	2301      	movs	r3, #1
 80064dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064de:	2300      	movs	r3, #0
 80064e0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80064e6:	2300      	movs	r3, #0
 80064e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80064ea:	2301      	movs	r3, #1
 80064ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80064ee:	2300      	movs	r3, #0
 80064f0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80064f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064fa:	4619      	mov	r1, r3
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <MX_TIM1_Init+0x148>)
 80064fe:	f008 fde5 	bl	800f0cc <HAL_TIM_Encoder_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006508:	f000 fc34 	bl	8006d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006510:	2300      	movs	r3, #0
 8006512:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006518:	4619      	mov	r1, r3
 800651a:	4821      	ldr	r0, [pc, #132]	; (80065a0 <MX_TIM1_Init+0x148>)
 800651c:	f009 fb0c 	bl	800fb38 <HAL_TIMEx_MasterConfigSynchronization>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006526:	f000 fc25 	bl	8006d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800652a:	2360      	movs	r3, #96	; 0x60
 800652c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006532:	2300      	movs	r3, #0
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006536:	2300      	movs	r3, #0
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800653a:	2300      	movs	r3, #0
 800653c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800653e:	2300      	movs	r3, #0
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006542:	2300      	movs	r3, #0
 8006544:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006546:	f107 0320 	add.w	r3, r7, #32
 800654a:	2208      	movs	r2, #8
 800654c:	4619      	mov	r1, r3
 800654e:	4814      	ldr	r0, [pc, #80]	; (80065a0 <MX_TIM1_Init+0x148>)
 8006550:	f008 ff8e 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800655a:	f000 fc0b 	bl	8006d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800655e:	2300      	movs	r3, #0
 8006560:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006562:	2300      	movs	r3, #0
 8006564:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800657c:	463b      	mov	r3, r7
 800657e:	4619      	mov	r1, r3
 8006580:	4807      	ldr	r0, [pc, #28]	; (80065a0 <MX_TIM1_Init+0x148>)
 8006582:	f009 fb55 	bl	800fc30 <HAL_TIMEx_ConfigBreakDeadTime>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800658c:	f000 fbf2 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006590:	4803      	ldr	r0, [pc, #12]	; (80065a0 <MX_TIM1_Init+0x148>)
 8006592:	f000 ffdf 	bl	8007554 <HAL_TIM_MspPostInit>

}
 8006596:	bf00      	nop
 8006598:	3768      	adds	r7, #104	; 0x68
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200449ec 	.word	0x200449ec
 80065a4:	40010000 	.word	0x40010000

080065a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065ae:	f107 0320 	add.w	r3, r7, #32
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065b8:	1d3b      	adds	r3, r7, #4
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
 80065c0:	609a      	str	r2, [r3, #8]
 80065c2:	60da      	str	r2, [r3, #12]
 80065c4:	611a      	str	r2, [r3, #16]
 80065c6:	615a      	str	r2, [r3, #20]
 80065c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065ca:	4b27      	ldr	r3, [pc, #156]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <MX_TIM3_Init+0xc4>)
 80065ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065d2:	2201      	movs	r2, #1
 80065d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065d6:	4b24      	ldr	r3, [pc, #144]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80065dc:	4b22      	ldr	r3, [pc, #136]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065de:	f241 1293 	movw	r2, #4499	; 0x1193
 80065e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065e4:	4b20      	ldr	r3, [pc, #128]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065ea:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80065f0:	481d      	ldr	r0, [pc, #116]	; (8006668 <MX_TIM3_Init+0xc0>)
 80065f2:	f008 fd02 	bl	800effa <HAL_TIM_PWM_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80065fc:	f000 fbba 	bl	8006d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006600:	2300      	movs	r3, #0
 8006602:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006608:	f107 0320 	add.w	r3, r7, #32
 800660c:	4619      	mov	r1, r3
 800660e:	4816      	ldr	r0, [pc, #88]	; (8006668 <MX_TIM3_Init+0xc0>)
 8006610:	f009 fa92 	bl	800fb38 <HAL_TIMEx_MasterConfigSynchronization>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800661a:	f000 fbab 	bl	8006d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800661e:	2360      	movs	r3, #96	; 0x60
 8006620:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	2200      	movs	r2, #0
 8006632:	4619      	mov	r1, r3
 8006634:	480c      	ldr	r0, [pc, #48]	; (8006668 <MX_TIM3_Init+0xc0>)
 8006636:	f008 ff1b 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006640:	f000 fb98 	bl	8006d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	2204      	movs	r2, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4807      	ldr	r0, [pc, #28]	; (8006668 <MX_TIM3_Init+0xc0>)
 800664c:	f008 ff10 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006656:	f000 fb8d 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800665a:	4803      	ldr	r0, [pc, #12]	; (8006668 <MX_TIM3_Init+0xc0>)
 800665c:	f000 ff7a 	bl	8007554 <HAL_TIM_MspPostInit>

}
 8006660:	bf00      	nop
 8006662:	3728      	adds	r7, #40	; 0x28
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20044884 	.word	0x20044884
 800666c:	40000400 	.word	0x40000400

08006670 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006676:	f107 0320 	add.w	r3, r7, #32
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	609a      	str	r2, [r3, #8]
 800668a:	60da      	str	r2, [r3, #12]
 800668c:	611a      	str	r2, [r3, #16]
 800668e:	615a      	str	r2, [r3, #20]
 8006690:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006692:	4b27      	ldr	r3, [pc, #156]	; (8006730 <MX_TIM4_Init+0xc0>)
 8006694:	4a27      	ldr	r2, [pc, #156]	; (8006734 <MX_TIM4_Init+0xc4>)
 8006696:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <MX_TIM4_Init+0xc0>)
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80066a4:	4b22      	ldr	r3, [pc, #136]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066a6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80066aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066ac:	4b20      	ldr	r3, [pc, #128]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066b2:	4b1f      	ldr	r3, [pc, #124]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80066b8:	481d      	ldr	r0, [pc, #116]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066ba:	f008 fc9e 	bl	800effa <HAL_TIM_PWM_Init>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80066c4:	f000 fb56 	bl	8006d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066c8:	2300      	movs	r3, #0
 80066ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066d0:	f107 0320 	add.w	r3, r7, #32
 80066d4:	4619      	mov	r1, r3
 80066d6:	4816      	ldr	r0, [pc, #88]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066d8:	f009 fa2e 	bl	800fb38 <HAL_TIMEx_MasterConfigSynchronization>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80066e2:	f000 fb47 	bl	8006d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066e6:	2360      	movs	r3, #96	; 0x60
 80066e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066f6:	1d3b      	adds	r3, r7, #4
 80066f8:	2208      	movs	r2, #8
 80066fa:	4619      	mov	r1, r3
 80066fc:	480c      	ldr	r0, [pc, #48]	; (8006730 <MX_TIM4_Init+0xc0>)
 80066fe:	f008 feb7 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006708:	f000 fb34 	bl	8006d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	220c      	movs	r2, #12
 8006710:	4619      	mov	r1, r3
 8006712:	4807      	ldr	r0, [pc, #28]	; (8006730 <MX_TIM4_Init+0xc0>)
 8006714:	f008 feac 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800671e:	f000 fb29 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006722:	4803      	ldr	r0, [pc, #12]	; (8006730 <MX_TIM4_Init+0xc0>)
 8006724:	f000 ff16 	bl	8007554 <HAL_TIM_MspPostInit>

}
 8006728:	bf00      	nop
 800672a:	3728      	adds	r7, #40	; 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20044710 	.word	0x20044710
 8006734:	40000800 	.word	0x40000800

08006738 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800673e:	463b      	mov	r3, r7
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <MX_TIM6_Init+0x64>)
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <MX_TIM6_Init+0x68>)
 800674a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800674c:	4b13      	ldr	r3, [pc, #76]	; (800679c <MX_TIM6_Init+0x64>)
 800674e:	2259      	movs	r2, #89	; 0x59
 8006750:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006752:	4b12      	ldr	r3, [pc, #72]	; (800679c <MX_TIM6_Init+0x64>)
 8006754:	2200      	movs	r2, #0
 8006756:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006758:	4b10      	ldr	r3, [pc, #64]	; (800679c <MX_TIM6_Init+0x64>)
 800675a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800675e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006760:	4b0e      	ldr	r3, [pc, #56]	; (800679c <MX_TIM6_Init+0x64>)
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006766:	480d      	ldr	r0, [pc, #52]	; (800679c <MX_TIM6_Init+0x64>)
 8006768:	f008 fbf8 	bl	800ef5c <HAL_TIM_Base_Init>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006772:	f000 faff 	bl	8006d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006776:	2300      	movs	r3, #0
 8006778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800677a:	2300      	movs	r3, #0
 800677c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800677e:	463b      	mov	r3, r7
 8006780:	4619      	mov	r1, r3
 8006782:	4806      	ldr	r0, [pc, #24]	; (800679c <MX_TIM6_Init+0x64>)
 8006784:	f009 f9d8 	bl	800fb38 <HAL_TIMEx_MasterConfigSynchronization>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800678e:	f000 faf1 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	200449ac 	.word	0x200449ac
 80067a0:	40001000 	.word	0x40001000

080067a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067aa:	463b      	mov	r3, r7
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <MX_TIM7_Init+0x60>)
 80067b4:	4a14      	ldr	r2, [pc, #80]	; (8006808 <MX_TIM7_Init+0x64>)
 80067b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <MX_TIM7_Init+0x60>)
 80067ba:	22b3      	movs	r2, #179	; 0xb3
 80067bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <MX_TIM7_Init+0x60>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <MX_TIM7_Init+0x60>)
 80067c6:	2231      	movs	r2, #49	; 0x31
 80067c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80067ca:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <MX_TIM7_Init+0x60>)
 80067cc:	2280      	movs	r2, #128	; 0x80
 80067ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067d0:	480c      	ldr	r0, [pc, #48]	; (8006804 <MX_TIM7_Init+0x60>)
 80067d2:	f008 fbc3 	bl	800ef5c <HAL_TIM_Base_Init>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80067dc:	f000 faca 	bl	8006d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e0:	2300      	movs	r3, #0
 80067e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067e8:	463b      	mov	r3, r7
 80067ea:	4619      	mov	r1, r3
 80067ec:	4805      	ldr	r0, [pc, #20]	; (8006804 <MX_TIM7_Init+0x60>)
 80067ee:	f009 f9a3 	bl	800fb38 <HAL_TIMEx_MasterConfigSynchronization>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80067f8:	f000 fabc 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20044b50 	.word	0x20044b50
 8006808:	40001400 	.word	0x40001400

0800680c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	2224      	movs	r2, #36	; 0x24
 8006818:	2100      	movs	r1, #0
 800681a:	4618      	mov	r0, r3
 800681c:	f00e ffdc 	bl	80157d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006820:	1d3b      	adds	r3, r7, #4
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006828:	4b22      	ldr	r3, [pc, #136]	; (80068b4 <MX_TIM8_Init+0xa8>)
 800682a:	4a23      	ldr	r2, [pc, #140]	; (80068b8 <MX_TIM8_Init+0xac>)
 800682c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800682e:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <MX_TIM8_Init+0xa8>)
 8006830:	2200      	movs	r2, #0
 8006832:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006834:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <MX_TIM8_Init+0xa8>)
 8006836:	2210      	movs	r2, #16
 8006838:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800683a:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <MX_TIM8_Init+0xa8>)
 800683c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006840:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <MX_TIM8_Init+0xa8>)
 8006844:	2200      	movs	r2, #0
 8006846:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006848:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <MX_TIM8_Init+0xa8>)
 800684a:	2200      	movs	r2, #0
 800684c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800684e:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <MX_TIM8_Init+0xa8>)
 8006850:	2200      	movs	r2, #0
 8006852:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006854:	2303      	movs	r3, #3
 8006856:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006868:	2300      	movs	r3, #0
 800686a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800686c:	2301      	movs	r3, #1
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006870:	2300      	movs	r3, #0
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006878:	f107 030c 	add.w	r3, r7, #12
 800687c:	4619      	mov	r1, r3
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <MX_TIM8_Init+0xa8>)
 8006880:	f008 fc24 	bl	800f0cc <HAL_TIM_Encoder_Init>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800688a:	f000 fa73 	bl	8006d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4806      	ldr	r0, [pc, #24]	; (80068b4 <MX_TIM8_Init+0xa8>)
 800689c:	f009 f94c 	bl	800fb38 <HAL_TIMEx_MasterConfigSynchronization>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80068a6:	f000 fa65 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80068aa:	bf00      	nop
 80068ac:	3730      	adds	r7, #48	; 0x30
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200446d0 	.word	0x200446d0
 80068b8:	40010400 	.word	0x40010400

080068bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	60da      	str	r2, [r3, #12]
 80068ce:	611a      	str	r2, [r3, #16]
 80068d0:	615a      	str	r2, [r3, #20]
 80068d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80068d4:	4b1e      	ldr	r3, [pc, #120]	; (8006950 <MX_TIM10_Init+0x94>)
 80068d6:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <MX_TIM10_Init+0x98>)
 80068d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <MX_TIM10_Init+0x94>)
 80068dc:	2201      	movs	r2, #1
 80068de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068e0:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <MX_TIM10_Init+0x94>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <MX_TIM10_Init+0x94>)
 80068e8:	f242 3227 	movw	r2, #8999	; 0x2327
 80068ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068ee:	4b18      	ldr	r3, [pc, #96]	; (8006950 <MX_TIM10_Init+0x94>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068f4:	4b16      	ldr	r3, [pc, #88]	; (8006950 <MX_TIM10_Init+0x94>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80068fa:	4815      	ldr	r0, [pc, #84]	; (8006950 <MX_TIM10_Init+0x94>)
 80068fc:	f008 fb2e 	bl	800ef5c <HAL_TIM_Base_Init>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006906:	f000 fa35 	bl	8006d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800690a:	4811      	ldr	r0, [pc, #68]	; (8006950 <MX_TIM10_Init+0x94>)
 800690c:	f008 fb75 	bl	800effa <HAL_TIM_PWM_Init>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006916:	f000 fa2d 	bl	8006d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800691a:	2360      	movs	r3, #96	; 0x60
 800691c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	2200      	movs	r2, #0
 800692e:	4619      	mov	r1, r3
 8006930:	4807      	ldr	r0, [pc, #28]	; (8006950 <MX_TIM10_Init+0x94>)
 8006932:	f008 fd9d 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800693c:	f000 fa1a 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006940:	4803      	ldr	r0, [pc, #12]	; (8006950 <MX_TIM10_Init+0x94>)
 8006942:	f000 fe07 	bl	8007554 <HAL_TIM_MspPostInit>

}
 8006946:	bf00      	nop
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200447ec 	.word	0x200447ec
 8006954:	40014400 	.word	0x40014400

08006958 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	605a      	str	r2, [r3, #4]
 8006966:	609a      	str	r2, [r3, #8]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	611a      	str	r2, [r3, #16]
 800696c:	615a      	str	r2, [r3, #20]
 800696e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006970:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <MX_TIM11_Init+0x94>)
 8006972:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <MX_TIM11_Init+0x98>)
 8006974:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006976:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <MX_TIM11_Init+0x94>)
 8006978:	2201      	movs	r2, #1
 800697a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <MX_TIM11_Init+0x94>)
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006982:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <MX_TIM11_Init+0x94>)
 8006984:	f242 3227 	movw	r2, #8999	; 0x2327
 8006988:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800698a:	4b18      	ldr	r3, [pc, #96]	; (80069ec <MX_TIM11_Init+0x94>)
 800698c:	2200      	movs	r2, #0
 800698e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006990:	4b16      	ldr	r3, [pc, #88]	; (80069ec <MX_TIM11_Init+0x94>)
 8006992:	2200      	movs	r2, #0
 8006994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006996:	4815      	ldr	r0, [pc, #84]	; (80069ec <MX_TIM11_Init+0x94>)
 8006998:	f008 fae0 	bl	800ef5c <HAL_TIM_Base_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80069a2:	f000 f9e7 	bl	8006d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80069a6:	4811      	ldr	r0, [pc, #68]	; (80069ec <MX_TIM11_Init+0x94>)
 80069a8:	f008 fb27 	bl	800effa <HAL_TIM_PWM_Init>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80069b2:	f000 f9df 	bl	8006d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069b6:	2360      	movs	r3, #96	; 0x60
 80069b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069c6:	1d3b      	adds	r3, r7, #4
 80069c8:	2200      	movs	r2, #0
 80069ca:	4619      	mov	r1, r3
 80069cc:	4807      	ldr	r0, [pc, #28]	; (80069ec <MX_TIM11_Init+0x94>)
 80069ce:	f008 fd4f 	bl	800f470 <HAL_TIM_PWM_ConfigChannel>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80069d8:	f000 f9cc 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80069dc:	4803      	ldr	r0, [pc, #12]	; (80069ec <MX_TIM11_Init+0x94>)
 80069de:	f000 fdb9 	bl	8007554 <HAL_TIM_MspPostInit>

}
 80069e2:	bf00      	nop
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2004490c 	.word	0x2004490c
 80069f0:	40014800 	.word	0x40014800

080069f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80069f8:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <MX_TIM13_Init+0x40>)
 80069fa:	4a0f      	ldr	r2, [pc, #60]	; (8006a38 <MX_TIM13_Init+0x44>)
 80069fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <MX_TIM13_Init+0x40>)
 8006a00:	2259      	movs	r2, #89	; 0x59
 8006a02:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <MX_TIM13_Init+0x40>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <MX_TIM13_Init+0x40>)
 8006a0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a10:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <MX_TIM13_Init+0x40>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <MX_TIM13_Init+0x40>)
 8006a1a:	2280      	movs	r2, #128	; 0x80
 8006a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006a1e:	4805      	ldr	r0, [pc, #20]	; (8006a34 <MX_TIM13_Init+0x40>)
 8006a20:	f008 fa9c 	bl	800ef5c <HAL_TIM_Base_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006a2a:	f000 f9a3 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006a2e:	bf00      	nop
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	200448cc 	.word	0x200448cc
 8006a38:	40001c00 	.word	0x40001c00

08006a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006a40:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a42:	4a12      	ldr	r2, [pc, #72]	; (8006a8c <MX_USART2_UART_Init+0x50>)
 8006a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a60:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a62:	220c      	movs	r2, #12
 8006a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006a72:	4805      	ldr	r0, [pc, #20]	; (8006a88 <MX_USART2_UART_Init+0x4c>)
 8006a74:	f009 f942 	bl	800fcfc <HAL_UART_Init>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006a7e:	f000 f979 	bl	8006d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006a82:	bf00      	nop
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20044ab0 	.word	0x20044ab0
 8006a8c:	40004400 	.word	0x40004400

08006a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006a96:	2300      	movs	r3, #0
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <MX_DMA_Init+0x5c>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <MX_DMA_Init+0x5c>)
 8006aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa6:	4b11      	ldr	r3, [pc, #68]	; (8006aec <MX_DMA_Init+0x5c>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	203a      	movs	r0, #58	; 0x3a
 8006ab8:	f003 fe1b 	bl	800a6f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006abc:	203a      	movs	r0, #58	; 0x3a
 8006abe:	f003 fe34 	bl	800a72a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	203b      	movs	r0, #59	; 0x3b
 8006ac8:	f003 fe13 	bl	800a6f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006acc:	203b      	movs	r0, #59	; 0x3b
 8006ace:	f003 fe2c 	bl	800a72a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2045      	movs	r0, #69	; 0x45
 8006ad8:	f003 fe0b 	bl	800a6f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006adc:	2045      	movs	r0, #69	; 0x45
 8006ade:	f003 fe24 	bl	800a72a <HAL_NVIC_EnableIRQ>

}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40023800 	.word	0x40023800

08006af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08c      	sub	sp, #48	; 0x30
 8006af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af6:	f107 031c 	add.w	r3, r7, #28
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	605a      	str	r2, [r3, #4]
 8006b00:	609a      	str	r2, [r3, #8]
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	4b94      	ldr	r3, [pc, #592]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	4a93      	ldr	r2, [pc, #588]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b10:	f043 0310 	orr.w	r3, r3, #16
 8006b14:	6313      	str	r3, [r2, #48]	; 0x30
 8006b16:	4b91      	ldr	r3, [pc, #580]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	4b8d      	ldr	r3, [pc, #564]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4a8c      	ldr	r2, [pc, #560]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b30:	6313      	str	r3, [r2, #48]	; 0x30
 8006b32:	4b8a      	ldr	r3, [pc, #552]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	4b86      	ldr	r3, [pc, #536]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4a85      	ldr	r2, [pc, #532]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b48:	f043 0304 	orr.w	r3, r3, #4
 8006b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4e:	4b83      	ldr	r3, [pc, #524]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	4b7f      	ldr	r3, [pc, #508]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	4a7e      	ldr	r2, [pc, #504]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6a:	4b7c      	ldr	r3, [pc, #496]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	4b78      	ldr	r3, [pc, #480]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	4a77      	ldr	r2, [pc, #476]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	6313      	str	r3, [r2, #48]	; 0x30
 8006b86:	4b75      	ldr	r3, [pc, #468]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	60bb      	str	r3, [r7, #8]
 8006b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	4b71      	ldr	r3, [pc, #452]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	4a70      	ldr	r2, [pc, #448]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006b9c:	f043 0308 	orr.w	r3, r3, #8
 8006ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba2:	4b6e      	ldr	r3, [pc, #440]	; (8006d5c <MX_GPIO_Init+0x26c>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	607b      	str	r3, [r7, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bb4:	486a      	ldr	r0, [pc, #424]	; (8006d60 <MX_GPIO_Init+0x270>)
 8006bb6:	f004 fb31 	bl	800b21c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc0:	4868      	ldr	r0, [pc, #416]	; (8006d64 <MX_GPIO_Init+0x274>)
 8006bc2:	f004 fb2b 	bl	800b21c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bcc:	4866      	ldr	r0, [pc, #408]	; (8006d68 <MX_GPIO_Init+0x278>)
 8006bce:	f004 fb25 	bl	800b21c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006bd8:	4864      	ldr	r0, [pc, #400]	; (8006d6c <MX_GPIO_Init+0x27c>)
 8006bda:	f004 fb1f 	bl	800b21c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006bde:	2304      	movs	r3, #4
 8006be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006be2:	2300      	movs	r3, #0
 8006be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bea:	f107 031c 	add.w	r3, r7, #28
 8006bee:	4619      	mov	r1, r3
 8006bf0:	485b      	ldr	r0, [pc, #364]	; (8006d60 <MX_GPIO_Init+0x270>)
 8006bf2:	f004 f951 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006bf6:	230f      	movs	r3, #15
 8006bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c02:	f107 031c 	add.w	r3, r7, #28
 8006c06:	4619      	mov	r1, r3
 8006c08:	4859      	ldr	r0, [pc, #356]	; (8006d70 <MX_GPIO_Init+0x280>)
 8006c0a:	f004 f945 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c0e:	23e1      	movs	r3, #225	; 0xe1
 8006c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c12:	2303      	movs	r3, #3
 8006c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c1a:	f107 031c 	add.w	r3, r7, #28
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4852      	ldr	r0, [pc, #328]	; (8006d6c <MX_GPIO_Init+0x27c>)
 8006c22:	f004 f939 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c26:	2303      	movs	r3, #3
 8006c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c32:	f107 031c 	add.w	r3, r7, #28
 8006c36:	4619      	mov	r1, r3
 8006c38:	484a      	ldr	r0, [pc, #296]	; (8006d64 <MX_GPIO_Init+0x274>)
 8006c3a:	f004 f92d 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c3e:	2304      	movs	r3, #4
 8006c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c46:	2301      	movs	r3, #1
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c4a:	f107 031c 	add.w	r3, r7, #28
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4844      	ldr	r0, [pc, #272]	; (8006d64 <MX_GPIO_Init+0x274>)
 8006c52:	f004 f921 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006c56:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c60:	2301      	movs	r3, #1
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c64:	f107 031c 	add.w	r3, r7, #28
 8006c68:	4619      	mov	r1, r3
 8006c6a:	483d      	ldr	r0, [pc, #244]	; (8006d60 <MX_GPIO_Init+0x270>)
 8006c6c:	f004 f914 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c76:	2301      	movs	r3, #1
 8006c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c82:	f107 031c 	add.w	r3, r7, #28
 8006c86:	4619      	mov	r1, r3
 8006c88:	4835      	ldr	r0, [pc, #212]	; (8006d60 <MX_GPIO_Init+0x270>)
 8006c8a:	f004 f905 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c94:	2301      	movs	r3, #1
 8006c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca0:	f107 031c 	add.w	r3, r7, #28
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	482f      	ldr	r0, [pc, #188]	; (8006d64 <MX_GPIO_Init+0x274>)
 8006ca8:	f004 f8f6 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cba:	f107 031c 	add.w	r3, r7, #28
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4829      	ldr	r0, [pc, #164]	; (8006d68 <MX_GPIO_Init+0x278>)
 8006cc2:	f004 f8e9 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cd8:	f107 031c 	add.w	r3, r7, #28
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4822      	ldr	r0, [pc, #136]	; (8006d68 <MX_GPIO_Init+0x278>)
 8006ce0:	f004 f8da 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cea:	2301      	movs	r3, #1
 8006cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cf6:	f107 031c 	add.w	r3, r7, #28
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	481a      	ldr	r0, [pc, #104]	; (8006d68 <MX_GPIO_Init+0x278>)
 8006cfe:	f004 f8cb 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d02:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d14:	f107 031c 	add.w	r3, r7, #28
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4814      	ldr	r0, [pc, #80]	; (8006d6c <MX_GPIO_Init+0x27c>)
 8006d1c:	f004 f8bc 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d26:	2300      	movs	r3, #0
 8006d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d2e:	f107 031c 	add.w	r3, r7, #28
 8006d32:	4619      	mov	r1, r3
 8006d34:	480d      	ldr	r0, [pc, #52]	; (8006d6c <MX_GPIO_Init+0x27c>)
 8006d36:	f004 f8af 	bl	800ae98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006d3a:	239b      	movs	r3, #155	; 0x9b
 8006d3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d42:	2301      	movs	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d46:	f107 031c 	add.w	r3, r7, #28
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4806      	ldr	r0, [pc, #24]	; (8006d68 <MX_GPIO_Init+0x278>)
 8006d4e:	f004 f8a3 	bl	800ae98 <HAL_GPIO_Init>

}
 8006d52:	bf00      	nop
 8006d54:	3730      	adds	r7, #48	; 0x30
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	40021000 	.word	0x40021000
 8006d64:	40020400 	.word	0x40020400
 8006d68:	40020c00 	.word	0x40020c00
 8006d6c:	40020000 	.word	0x40020000
 8006d70:	40020800 	.word	0x40020800

08006d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d7a:	e7fe      	b.n	8006d7a <Error_Handler+0x6>

08006d7c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006d80:	bf00      	nop
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <HAL_MspInit+0x4c>)
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	4a0f      	ldr	r2, [pc, #60]	; (8006dd8 <HAL_MspInit+0x4c>)
 8006d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006da0:	6453      	str	r3, [r2, #68]	; 0x44
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <HAL_MspInit+0x4c>)
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <HAL_MspInit+0x4c>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <HAL_MspInit+0x4c>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dbe:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <HAL_MspInit+0x4c>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40023800 	.word	0x40023800

08006ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	; 0x30
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de4:	f107 031c 	add.w	r3, r7, #28
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	605a      	str	r2, [r3, #4]
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a4a      	ldr	r2, [pc, #296]	; (8006f24 <HAL_ADC_MspInit+0x148>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	f040 808e 	bne.w	8006f1c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	4b48      	ldr	r3, [pc, #288]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	4a47      	ldr	r2, [pc, #284]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006e10:	4b45      	ldr	r3, [pc, #276]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	4b41      	ldr	r3, [pc, #260]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e24:	4a40      	ldr	r2, [pc, #256]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e26:	f043 0304 	orr.w	r3, r3, #4
 8006e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2c:	4b3e      	ldr	r3, [pc, #248]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e38:	2300      	movs	r3, #0
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4a39      	ldr	r2, [pc, #228]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	6313      	str	r3, [r2, #48]	; 0x30
 8006e48:	4b37      	ldr	r3, [pc, #220]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	4a32      	ldr	r2, [pc, #200]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e5e:	f043 0302 	orr.w	r3, r3, #2
 8006e62:	6313      	str	r3, [r2, #48]	; 0x30
 8006e64:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <HAL_ADC_MspInit+0x14c>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006e70:	230f      	movs	r3, #15
 8006e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e74:	2303      	movs	r3, #3
 8006e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e7c:	f107 031c 	add.w	r3, r7, #28
 8006e80:	4619      	mov	r1, r3
 8006e82:	482a      	ldr	r0, [pc, #168]	; (8006f2c <HAL_ADC_MspInit+0x150>)
 8006e84:	f004 f808 	bl	800ae98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006e88:	23ff      	movs	r3, #255	; 0xff
 8006e8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e94:	f107 031c 	add.w	r3, r7, #28
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4825      	ldr	r0, [pc, #148]	; (8006f30 <HAL_ADC_MspInit+0x154>)
 8006e9c:	f003 fffc 	bl	800ae98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eac:	f107 031c 	add.w	r3, r7, #28
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4820      	ldr	r0, [pc, #128]	; (8006f34 <HAL_ADC_MspInit+0x158>)
 8006eb4:	f003 fff0 	bl	800ae98 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006eb8:	4b1f      	ldr	r3, [pc, #124]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006eba:	4a20      	ldr	r2, [pc, #128]	; (8006f3c <HAL_ADC_MspInit+0x160>)
 8006ebc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ec4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ec6:	4b1c      	ldr	r3, [pc, #112]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006ed2:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ed8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006eda:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006ee2:	4b15      	ldr	r3, [pc, #84]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ee8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ef0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006ef2:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006ef4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ef8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f00:	480d      	ldr	r0, [pc, #52]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006f02:	f003 fc2d 	bl	800a760 <HAL_DMA_Init>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006f0c:	f7ff ff32 	bl	8006d74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
 8006f16:	4a08      	ldr	r2, [pc, #32]	; (8006f38 <HAL_ADC_MspInit+0x15c>)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006f1c:	bf00      	nop
 8006f1e:	3730      	adds	r7, #48	; 0x30
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40012100 	.word	0x40012100
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	40020800 	.word	0x40020800
 8006f30:	40020000 	.word	0x40020000
 8006f34:	40020400 	.word	0x40020400
 8006f38:	20044af0 	.word	0x20044af0
 8006f3c:	40026440 	.word	0x40026440

08006f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08c      	sub	sp, #48	; 0x30
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f48:	f107 031c 	add.w	r3, r7, #28
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	609a      	str	r2, [r3, #8]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a32      	ldr	r2, [pc, #200]	; (8007028 <HAL_I2C_MspInit+0xe8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d12c      	bne.n	8006fbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	4b31      	ldr	r3, [pc, #196]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	4a30      	ldr	r2, [pc, #192]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006f6c:	f043 0302 	orr.w	r3, r3, #2
 8006f70:	6313      	str	r3, [r2, #48]	; 0x30
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f7e:	23c0      	movs	r3, #192	; 0xc0
 8006f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f82:	2312      	movs	r3, #18
 8006f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f86:	2301      	movs	r3, #1
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006f8e:	2304      	movs	r3, #4
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f92:	f107 031c 	add.w	r3, r7, #28
 8006f96:	4619      	mov	r1, r3
 8006f98:	4825      	ldr	r0, [pc, #148]	; (8007030 <HAL_I2C_MspInit+0xf0>)
 8006f9a:	f003 ff7d 	bl	800ae98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	4b22      	ldr	r3, [pc, #136]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a21      	ldr	r2, [pc, #132]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	4b1f      	ldr	r3, [pc, #124]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006fba:	e031      	b.n	8007020 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <HAL_I2C_MspInit+0xf4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d12c      	bne.n	8007020 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	4b18      	ldr	r3, [pc, #96]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd6:	4b15      	ldr	r3, [pc, #84]	; (800702c <HAL_I2C_MspInit+0xec>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006fe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fe8:	2312      	movs	r3, #18
 8006fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fec:	2301      	movs	r3, #1
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff8:	f107 031c 	add.w	r3, r7, #28
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	480c      	ldr	r0, [pc, #48]	; (8007030 <HAL_I2C_MspInit+0xf0>)
 8007000:	f003 ff4a 	bl	800ae98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	4b08      	ldr	r3, [pc, #32]	; (800702c <HAL_I2C_MspInit+0xec>)
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	4a07      	ldr	r2, [pc, #28]	; (800702c <HAL_I2C_MspInit+0xec>)
 800700e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007012:	6413      	str	r3, [r2, #64]	; 0x40
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <HAL_I2C_MspInit+0xec>)
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	bf00      	nop
 8007022:	3730      	adds	r7, #48	; 0x30
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40005400 	.word	0x40005400
 800702c:	40023800 	.word	0x40023800
 8007030:	40020400 	.word	0x40020400
 8007034:	40005800 	.word	0x40005800

08007038 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	609a      	str	r2, [r3, #8]
 800704c:	60da      	str	r2, [r3, #12]
 800704e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a69      	ldr	r2, [pc, #420]	; (80071fc <HAL_SD_MspInit+0x1c4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	f040 80cb 	bne.w	80071f2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800705c:	2300      	movs	r3, #0
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	4b67      	ldr	r3, [pc, #412]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 8007062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007064:	4a66      	ldr	r2, [pc, #408]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 8007066:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800706a:	6453      	str	r3, [r2, #68]	; 0x44
 800706c:	4b64      	ldr	r3, [pc, #400]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 800706e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	4b60      	ldr	r3, [pc, #384]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	4a5f      	ldr	r2, [pc, #380]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 8007082:	f043 0304 	orr.w	r3, r3, #4
 8007086:	6313      	str	r3, [r2, #48]	; 0x30
 8007088:	4b5d      	ldr	r3, [pc, #372]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007094:	2300      	movs	r3, #0
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	4b59      	ldr	r3, [pc, #356]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	4a58      	ldr	r2, [pc, #352]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 800709e:	f043 0308 	orr.w	r3, r3, #8
 80070a2:	6313      	str	r3, [r2, #48]	; 0x30
 80070a4:	4b56      	ldr	r3, [pc, #344]	; (8007200 <HAL_SD_MspInit+0x1c8>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	60bb      	str	r3, [r7, #8]
 80070ae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80070b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80070b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b6:	2302      	movs	r3, #2
 80070b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070be:	2303      	movs	r3, #3
 80070c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80070c2:	230c      	movs	r3, #12
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070c6:	f107 0314 	add.w	r3, r7, #20
 80070ca:	4619      	mov	r1, r3
 80070cc:	484d      	ldr	r0, [pc, #308]	; (8007204 <HAL_SD_MspInit+0x1cc>)
 80070ce:	f003 fee3 	bl	800ae98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070d2:	2304      	movs	r3, #4
 80070d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d6:	2302      	movs	r3, #2
 80070d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070de:	2303      	movs	r3, #3
 80070e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80070e2:	230c      	movs	r3, #12
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070e6:	f107 0314 	add.w	r3, r7, #20
 80070ea:	4619      	mov	r1, r3
 80070ec:	4846      	ldr	r0, [pc, #280]	; (8007208 <HAL_SD_MspInit+0x1d0>)
 80070ee:	f003 fed3 	bl	800ae98 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80070f2:	4b46      	ldr	r3, [pc, #280]	; (800720c <HAL_SD_MspInit+0x1d4>)
 80070f4:	4a46      	ldr	r2, [pc, #280]	; (8007210 <HAL_SD_MspInit+0x1d8>)
 80070f6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80070f8:	4b44      	ldr	r3, [pc, #272]	; (800720c <HAL_SD_MspInit+0x1d4>)
 80070fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070fe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007100:	4b42      	ldr	r3, [pc, #264]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007102:	2200      	movs	r2, #0
 8007104:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007106:	4b41      	ldr	r3, [pc, #260]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007108:	2200      	movs	r2, #0
 800710a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800710c:	4b3f      	ldr	r3, [pc, #252]	; (800720c <HAL_SD_MspInit+0x1d4>)
 800710e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007112:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007114:	4b3d      	ldr	r3, [pc, #244]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800711a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800711c:	4b3b      	ldr	r3, [pc, #236]	; (800720c <HAL_SD_MspInit+0x1d4>)
 800711e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007122:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007124:	4b39      	ldr	r3, [pc, #228]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007126:	2220      	movs	r2, #32
 8007128:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800712a:	4b38      	ldr	r3, [pc, #224]	; (800720c <HAL_SD_MspInit+0x1d4>)
 800712c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007130:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007132:	4b36      	ldr	r3, [pc, #216]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007134:	2204      	movs	r2, #4
 8007136:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007138:	4b34      	ldr	r3, [pc, #208]	; (800720c <HAL_SD_MspInit+0x1d4>)
 800713a:	2203      	movs	r2, #3
 800713c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800713e:	4b33      	ldr	r3, [pc, #204]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007140:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007144:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007146:	4b31      	ldr	r3, [pc, #196]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007148:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800714c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800714e:	482f      	ldr	r0, [pc, #188]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007150:	f003 fb06 	bl	800a760 <HAL_DMA_Init>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800715a:	f7ff fe0b 	bl	8006d74 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2a      	ldr	r2, [pc, #168]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007162:	641a      	str	r2, [r3, #64]	; 0x40
 8007164:	4a29      	ldr	r2, [pc, #164]	; (800720c <HAL_SD_MspInit+0x1d4>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800716a:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 800716c:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <HAL_SD_MspInit+0x1e0>)
 800716e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 8007172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007176:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007178:	4b26      	ldr	r3, [pc, #152]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 800717a:	2240      	movs	r2, #64	; 0x40
 800717c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800717e:	4b25      	ldr	r3, [pc, #148]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 8007180:	2200      	movs	r2, #0
 8007182:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007184:	4b23      	ldr	r3, [pc, #140]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 8007186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800718a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800718c:	4b21      	ldr	r3, [pc, #132]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 800718e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007192:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007194:	4b1f      	ldr	r3, [pc, #124]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 8007196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800719a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 800719e:	2220      	movs	r2, #32
 80071a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071a2:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80071a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071aa:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071ac:	2204      	movs	r2, #4
 80071ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80071b0:	4b18      	ldr	r3, [pc, #96]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071b2:	2203      	movs	r2, #3
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80071b6:	4b17      	ldr	r3, [pc, #92]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80071bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80071c6:	4813      	ldr	r0, [pc, #76]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071c8:	f003 faca 	bl	800a760 <HAL_DMA_Init>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80071d2:	f7ff fdcf 	bl	8006d74 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a0e      	ldr	r2, [pc, #56]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071da:	63da      	str	r2, [r3, #60]	; 0x3c
 80071dc:	4a0d      	ldr	r2, [pc, #52]	; (8007214 <HAL_SD_MspInit+0x1dc>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	2031      	movs	r0, #49	; 0x31
 80071e8:	f003 fa83 	bl	800a6f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80071ec:	2031      	movs	r0, #49	; 0x31
 80071ee:	f003 fa9c 	bl	800a72a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80071f2:	bf00      	nop
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40023800 	.word	0x40023800
 8007204:	40020800 	.word	0x40020800
 8007208:	40020c00 	.word	0x40020c00
 800720c:	20044618 	.word	0x20044618
 8007210:	40026458 	.word	0x40026458
 8007214:	2004494c 	.word	0x2004494c
 8007218:	400264a0 	.word	0x400264a0

0800721c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007224:	f107 0314 	add.w	r3, r7, #20
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	60da      	str	r2, [r3, #12]
 8007232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <HAL_SPI_MspInit+0x84>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d12c      	bne.n	8007298 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <HAL_SPI_MspInit+0x88>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <HAL_SPI_MspInit+0x88>)
 8007248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800724c:	6413      	str	r3, [r2, #64]	; 0x40
 800724e:	4b15      	ldr	r3, [pc, #84]	; (80072a4 <HAL_SPI_MspInit+0x88>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <HAL_SPI_MspInit+0x88>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4a10      	ldr	r2, [pc, #64]	; (80072a4 <HAL_SPI_MspInit+0x88>)
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6313      	str	r3, [r2, #48]	; 0x30
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <HAL_SPI_MspInit+0x88>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007276:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800727a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007284:	2303      	movs	r3, #3
 8007286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007288:	2305      	movs	r3, #5
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4619      	mov	r1, r3
 8007292:	4805      	ldr	r0, [pc, #20]	; (80072a8 <HAL_SPI_MspInit+0x8c>)
 8007294:	f003 fe00 	bl	800ae98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007298:	bf00      	nop
 800729a:	3728      	adds	r7, #40	; 0x28
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40003800 	.word	0x40003800
 80072a4:	40023800 	.word	0x40023800
 80072a8:	40020400 	.word	0x40020400

080072ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b4:	f107 031c 	add.w	r3, r7, #28
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <HAL_TIM_PWM_MspInit+0xd4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d12d      	bne.n	800732a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	4a2b      	ldr	r2, [pc, #172]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6453      	str	r3, [r2, #68]	; 0x44
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	4b25      	ldr	r3, [pc, #148]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	4a24      	ldr	r2, [pc, #144]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 80072f4:	f043 0310 	orr.w	r3, r3, #16
 80072f8:	6313      	str	r3, [r2, #48]	; 0x30
 80072fa:	4b22      	ldr	r3, [pc, #136]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	f003 0310 	and.w	r3, r3, #16
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007306:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800730a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800730c:	2302      	movs	r3, #2
 800730e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007310:	2300      	movs	r3, #0
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007314:	2300      	movs	r3, #0
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007318:	2301      	movs	r3, #1
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800731c:	f107 031c 	add.w	r3, r7, #28
 8007320:	4619      	mov	r1, r3
 8007322:	4819      	ldr	r0, [pc, #100]	; (8007388 <HAL_TIM_PWM_MspInit+0xdc>)
 8007324:	f003 fdb8 	bl	800ae98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007328:	e026      	b.n	8007378 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a17      	ldr	r2, [pc, #92]	; (800738c <HAL_TIM_PWM_MspInit+0xe0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d10e      	bne.n	8007352 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	4b12      	ldr	r3, [pc, #72]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	4a11      	ldr	r2, [pc, #68]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	6413      	str	r3, [r2, #64]	; 0x40
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	693b      	ldr	r3, [r7, #16]
}
 8007350:	e012      	b.n	8007378 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a0e      	ldr	r2, [pc, #56]	; (8007390 <HAL_TIM_PWM_MspInit+0xe4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d10d      	bne.n	8007378 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	4a07      	ldr	r2, [pc, #28]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 8007366:	f043 0304 	orr.w	r3, r3, #4
 800736a:	6413      	str	r3, [r2, #64]	; 0x40
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_TIM_PWM_MspInit+0xd8>)
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	bf00      	nop
 800737a:	3730      	adds	r7, #48	; 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40010000 	.word	0x40010000
 8007384:	40023800 	.word	0x40023800
 8007388:	40021000 	.word	0x40021000
 800738c:	40000400 	.word	0x40000400
 8007390:	40000800 	.word	0x40000800

08007394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a3e      	ldr	r2, [pc, #248]	; (800749c <HAL_TIM_Base_MspInit+0x108>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d116      	bne.n	80073d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	4a3c      	ldr	r2, [pc, #240]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 80073b0:	f043 0310 	orr.w	r3, r3, #16
 80073b4:	6413      	str	r3, [r2, #64]	; 0x40
 80073b6:	4b3a      	ldr	r3, [pc, #232]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80073c2:	2200      	movs	r2, #0
 80073c4:	2101      	movs	r1, #1
 80073c6:	2036      	movs	r0, #54	; 0x36
 80073c8:	f003 f993 	bl	800a6f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80073cc:	2036      	movs	r0, #54	; 0x36
 80073ce:	f003 f9ac 	bl	800a72a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80073d2:	e05e      	b.n	8007492 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a32      	ldr	r2, [pc, #200]	; (80074a4 <HAL_TIM_Base_MspInit+0x110>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d116      	bne.n	800740c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a2e      	ldr	r2, [pc, #184]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
 80073ee:	4b2c      	ldr	r3, [pc, #176]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	2037      	movs	r0, #55	; 0x37
 8007400:	f003 f977 	bl	800a6f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007404:	2037      	movs	r0, #55	; 0x37
 8007406:	f003 f990 	bl	800a72a <HAL_NVIC_EnableIRQ>
}
 800740a:	e042      	b.n	8007492 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a25      	ldr	r2, [pc, #148]	; (80074a8 <HAL_TIM_Base_MspInit+0x114>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 800741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741e:	4a20      	ldr	r2, [pc, #128]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007424:	6453      	str	r3, [r2, #68]	; 0x44
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	697b      	ldr	r3, [r7, #20]
}
 8007432:	e02e      	b.n	8007492 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <HAL_TIM_Base_MspInit+0x118>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d10e      	bne.n	800745c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	4b17      	ldr	r3, [pc, #92]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800744c:	6453      	str	r3, [r2, #68]	; 0x44
 800744e:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	693b      	ldr	r3, [r7, #16]
}
 800745a:	e01a      	b.n	8007492 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <HAL_TIM_Base_MspInit+0x11c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d115      	bne.n	8007492 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	4a0c      	ldr	r2, [pc, #48]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007474:	6413      	str	r3, [r2, #64]	; 0x40
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	202c      	movs	r0, #44	; 0x2c
 8007488:	f003 f933 	bl	800a6f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800748c:	202c      	movs	r0, #44	; 0x2c
 800748e:	f003 f94c 	bl	800a72a <HAL_NVIC_EnableIRQ>
}
 8007492:	bf00      	nop
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40001000 	.word	0x40001000
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40001400 	.word	0x40001400
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800
 80074b0:	40001c00 	.word	0x40001c00

080074b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	60da      	str	r2, [r3, #12]
 80074ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1d      	ldr	r2, [pc, #116]	; (8007548 <HAL_TIM_Encoder_MspInit+0x94>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d133      	bne.n	800753e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80074d6:	2300      	movs	r3, #0
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	4b1c      	ldr	r3, [pc, #112]	; (800754c <HAL_TIM_Encoder_MspInit+0x98>)
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	4a1b      	ldr	r2, [pc, #108]	; (800754c <HAL_TIM_Encoder_MspInit+0x98>)
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	6453      	str	r3, [r2, #68]	; 0x44
 80074e6:	4b19      	ldr	r3, [pc, #100]	; (800754c <HAL_TIM_Encoder_MspInit+0x98>)
 80074e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	4b15      	ldr	r3, [pc, #84]	; (800754c <HAL_TIM_Encoder_MspInit+0x98>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	4a14      	ldr	r2, [pc, #80]	; (800754c <HAL_TIM_Encoder_MspInit+0x98>)
 80074fc:	f043 0304 	orr.w	r3, r3, #4
 8007500:	6313      	str	r3, [r2, #48]	; 0x30
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <HAL_TIM_Encoder_MspInit+0x98>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800750e:	23c0      	movs	r3, #192	; 0xc0
 8007510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007512:	2302      	movs	r3, #2
 8007514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800751a:	2300      	movs	r3, #0
 800751c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800751e:	2303      	movs	r3, #3
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007522:	f107 0314 	add.w	r3, r7, #20
 8007526:	4619      	mov	r1, r3
 8007528:	4809      	ldr	r0, [pc, #36]	; (8007550 <HAL_TIM_Encoder_MspInit+0x9c>)
 800752a:	f003 fcb5 	bl	800ae98 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800752e:	2200      	movs	r2, #0
 8007530:	2100      	movs	r1, #0
 8007532:	202c      	movs	r0, #44	; 0x2c
 8007534:	f003 f8dd 	bl	800a6f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007538:	202c      	movs	r0, #44	; 0x2c
 800753a:	f003 f8f6 	bl	800a72a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800753e:	bf00      	nop
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40010400 	.word	0x40010400
 800754c:	40023800 	.word	0x40023800
 8007550:	40020800 	.word	0x40020800

08007554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08c      	sub	sp, #48	; 0x30
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800755c:	f107 031c 	add.w	r3, r7, #28
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	609a      	str	r2, [r3, #8]
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a5c      	ldr	r2, [pc, #368]	; (80076e4 <HAL_TIM_MspPostInit+0x190>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d11f      	bne.n	80075b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	4b5b      	ldr	r3, [pc, #364]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	4a5a      	ldr	r2, [pc, #360]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 8007580:	f043 0310 	orr.w	r3, r3, #16
 8007584:	6313      	str	r3, [r2, #48]	; 0x30
 8007586:	4b58      	ldr	r3, [pc, #352]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007598:	2302      	movs	r3, #2
 800759a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759c:	2300      	movs	r3, #0
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a0:	2300      	movs	r3, #0
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80075a4:	2301      	movs	r3, #1
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075a8:	f107 031c 	add.w	r3, r7, #28
 80075ac:	4619      	mov	r1, r3
 80075ae:	484f      	ldr	r0, [pc, #316]	; (80076ec <HAL_TIM_MspPostInit+0x198>)
 80075b0:	f003 fc72 	bl	800ae98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80075b4:	e091      	b.n	80076da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a4d      	ldr	r2, [pc, #308]	; (80076f0 <HAL_TIM_MspPostInit+0x19c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d11e      	bne.n	80075fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	4b48      	ldr	r3, [pc, #288]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	4a47      	ldr	r2, [pc, #284]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 80075ca:	f043 0302 	orr.w	r3, r3, #2
 80075ce:	6313      	str	r3, [r2, #48]	; 0x30
 80075d0:	4b45      	ldr	r3, [pc, #276]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80075dc:	2330      	movs	r3, #48	; 0x30
 80075de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e0:	2302      	movs	r3, #2
 80075e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e8:	2300      	movs	r3, #0
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80075ec:	2302      	movs	r3, #2
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f0:	f107 031c 	add.w	r3, r7, #28
 80075f4:	4619      	mov	r1, r3
 80075f6:	483f      	ldr	r0, [pc, #252]	; (80076f4 <HAL_TIM_MspPostInit+0x1a0>)
 80075f8:	f003 fc4e 	bl	800ae98 <HAL_GPIO_Init>
}
 80075fc:	e06d      	b.n	80076da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a3d      	ldr	r2, [pc, #244]	; (80076f8 <HAL_TIM_MspPostInit+0x1a4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d11f      	bne.n	8007648 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	4a35      	ldr	r2, [pc, #212]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 8007612:	f043 0308 	orr.w	r3, r3, #8
 8007616:	6313      	str	r3, [r2, #48]	; 0x30
 8007618:	4b33      	ldr	r3, [pc, #204]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007624:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800762a:	2302      	movs	r3, #2
 800762c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007632:	2300      	movs	r3, #0
 8007634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007636:	2302      	movs	r3, #2
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800763a:	f107 031c 	add.w	r3, r7, #28
 800763e:	4619      	mov	r1, r3
 8007640:	482e      	ldr	r0, [pc, #184]	; (80076fc <HAL_TIM_MspPostInit+0x1a8>)
 8007642:	f003 fc29 	bl	800ae98 <HAL_GPIO_Init>
}
 8007646:	e048      	b.n	80076da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <HAL_TIM_MspPostInit+0x1ac>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d11f      	bne.n	8007692 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 800765c:	f043 0302 	orr.w	r3, r3, #2
 8007660:	6313      	str	r3, [r2, #48]	; 0x30
 8007662:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800766e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007674:	2302      	movs	r3, #2
 8007676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007678:	2300      	movs	r3, #0
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800767c:	2300      	movs	r3, #0
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007680:	2303      	movs	r3, #3
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007684:	f107 031c 	add.w	r3, r7, #28
 8007688:	4619      	mov	r1, r3
 800768a:	481a      	ldr	r0, [pc, #104]	; (80076f4 <HAL_TIM_MspPostInit+0x1a0>)
 800768c:	f003 fc04 	bl	800ae98 <HAL_GPIO_Init>
}
 8007690:	e023      	b.n	80076da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <HAL_TIM_MspPostInit+0x1b0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d11e      	bne.n	80076da <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800769c:	2300      	movs	r3, #0
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 80076a6:	f043 0302 	orr.w	r3, r3, #2
 80076aa:	6313      	str	r3, [r2, #48]	; 0x30
 80076ac:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <HAL_TIM_MspPostInit+0x194>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80076b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076be:	2302      	movs	r3, #2
 80076c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c6:	2300      	movs	r3, #0
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80076ca:	2303      	movs	r3, #3
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ce:	f107 031c 	add.w	r3, r7, #28
 80076d2:	4619      	mov	r1, r3
 80076d4:	4807      	ldr	r0, [pc, #28]	; (80076f4 <HAL_TIM_MspPostInit+0x1a0>)
 80076d6:	f003 fbdf 	bl	800ae98 <HAL_GPIO_Init>
}
 80076da:	bf00      	nop
 80076dc:	3730      	adds	r7, #48	; 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40023800 	.word	0x40023800
 80076ec:	40021000 	.word	0x40021000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40020400 	.word	0x40020400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40020c00 	.word	0x40020c00
 8007700:	40014400 	.word	0x40014400
 8007704:	40014800 	.word	0x40014800

08007708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	; 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	609a      	str	r2, [r3, #8]
 800771c:	60da      	str	r2, [r3, #12]
 800771e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a19      	ldr	r2, [pc, #100]	; (800778c <HAL_UART_MspInit+0x84>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d12b      	bne.n	8007782 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800772a:	2300      	movs	r3, #0
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	4b18      	ldr	r3, [pc, #96]	; (8007790 <HAL_UART_MspInit+0x88>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_UART_MspInit+0x88>)
 8007734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007738:	6413      	str	r3, [r2, #64]	; 0x40
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <HAL_UART_MspInit+0x88>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	4b11      	ldr	r3, [pc, #68]	; (8007790 <HAL_UART_MspInit+0x88>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	4a10      	ldr	r2, [pc, #64]	; (8007790 <HAL_UART_MspInit+0x88>)
 8007750:	f043 0308 	orr.w	r3, r3, #8
 8007754:	6313      	str	r3, [r2, #48]	; 0x30
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <HAL_UART_MspInit+0x88>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007762:	2360      	movs	r3, #96	; 0x60
 8007764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007766:	2302      	movs	r3, #2
 8007768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800776e:	2303      	movs	r3, #3
 8007770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007772:	2307      	movs	r3, #7
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007776:	f107 0314 	add.w	r3, r7, #20
 800777a:	4619      	mov	r1, r3
 800777c:	4805      	ldr	r0, [pc, #20]	; (8007794 <HAL_UART_MspInit+0x8c>)
 800777e:	f003 fb8b 	bl	800ae98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007782:	bf00      	nop
 8007784:	3728      	adds	r7, #40	; 0x28
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40004400 	.word	0x40004400
 8007790:	40023800 	.word	0x40023800
 8007794:	40020c00 	.word	0x40020c00

08007798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800779c:	e7fe      	b.n	800779c <NMI_Handler+0x4>

0800779e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800779e:	b480      	push	{r7}
 80077a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077a2:	e7fe      	b.n	80077a2 <HardFault_Handler+0x4>

080077a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077a8:	e7fe      	b.n	80077a8 <MemManage_Handler+0x4>

080077aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077ae:	e7fe      	b.n	80077ae <BusFault_Handler+0x4>

080077b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077b4:	e7fe      	b.n	80077b4 <UsageFault_Handler+0x4>

080077b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077b6:	b480      	push	{r7}
 80077b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077c8:	bf00      	nop
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077d2:	b480      	push	{r7}
 80077d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077d6:	bf00      	nop
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077e4:	f002 fa64 	bl	8009cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}

080077ec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80077f0:	4803      	ldr	r0, [pc, #12]	; (8007800 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80077f2:	f007 fd34 	bl	800f25e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80077f6:	4803      	ldr	r0, [pc, #12]	; (8007804 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80077f8:	f007 fd31 	bl	800f25e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	200446d0 	.word	0x200446d0
 8007804:	200448cc 	.word	0x200448cc

08007808 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800780c:	4802      	ldr	r0, [pc, #8]	; (8007818 <SDIO_IRQHandler+0x10>)
 800780e:	f005 fdcd 	bl	800d3ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20044a2c 	.word	0x20044a2c

0800781c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007820:	4802      	ldr	r0, [pc, #8]	; (800782c <TIM6_DAC_IRQHandler+0x10>)
 8007822:	f007 fd1c 	bl	800f25e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007826:	bf00      	nop
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200449ac 	.word	0x200449ac

08007830 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <TIM7_IRQHandler+0x10>)
 8007836:	f007 fd12 	bl	800f25e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20044b50 	.word	0x20044b50

08007844 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007848:	4802      	ldr	r0, [pc, #8]	; (8007854 <DMA2_Stream2_IRQHandler+0x10>)
 800784a:	f003 f8b1 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800784e:	bf00      	nop
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20044af0 	.word	0x20044af0

08007858 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800785c:	4802      	ldr	r0, [pc, #8]	; (8007868 <DMA2_Stream3_IRQHandler+0x10>)
 800785e:	f003 f8a7 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007862:	bf00      	nop
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20044618 	.word	0x20044618

0800786c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007870:	4802      	ldr	r0, [pc, #8]	; (800787c <DMA2_Stream6_IRQHandler+0x10>)
 8007872:	f003 f89d 	bl	800a9b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	2004494c 	.word	0x2004494c

08007880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007888:	4a14      	ldr	r2, [pc, #80]	; (80078dc <_sbrk+0x5c>)
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <_sbrk+0x60>)
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007894:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <_sbrk+0x64>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800789c:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <_sbrk+0x64>)
 800789e:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <_sbrk+0x68>)
 80078a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <_sbrk+0x64>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4413      	add	r3, r2
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d207      	bcs.n	80078c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078b0:	f00d ff68 	bl	8015784 <__errno>
 80078b4:	4602      	mov	r2, r0
 80078b6:	230c      	movs	r3, #12
 80078b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	e009      	b.n	80078d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078c0:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <_sbrk+0x64>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <_sbrk+0x64>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <_sbrk+0x64>)
 80078d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20050000 	.word	0x20050000
 80078e0:	00000800 	.word	0x00000800
 80078e4:	200002bc 	.word	0x200002bc
 80078e8:	20046ca0 	.word	0x20046ca0

080078ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078f0:	4b08      	ldr	r3, [pc, #32]	; (8007914 <SystemInit+0x28>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f6:	4a07      	ldr	r2, [pc, #28]	; (8007914 <SystemInit+0x28>)
 80078f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <SystemInit+0x28>)
 8007902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007906:	609a      	str	r2, [r3, #8]
#endif
}
 8007908:	bf00      	nop
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	e000ed00 	.word	0xe000ed00

08007918 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007918:	b598      	push	{r3, r4, r7, lr}
 800791a:	af00      	add	r7, sp, #0
	lcd_init();
 800791c:	f7f9 fb7c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007920:	483b      	ldr	r0, [pc, #236]	; (8007a10 <cppInit+0xf8>)
 8007922:	f7fd fcb3 	bl	800528c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007926:	2064      	movs	r0, #100	; 0x64
 8007928:	f002 f9e2 	bl	8009cf0 <HAL_Delay>
	power_sensor.updateValues();
 800792c:	4838      	ldr	r0, [pc, #224]	; (8007a10 <cppInit+0xf8>)
 800792e:	f7fd fcbb 	bl	80052a8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007932:	f7f9 fbb5 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007936:	2100      	movs	r1, #0
 8007938:	2000      	movs	r0, #0
 800793a:	f7f9 fbc1 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800793e:	4835      	ldr	r0, [pc, #212]	; (8007a14 <cppInit+0xfc>)
 8007940:	f7f9 fbe8 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007944:	2101      	movs	r1, #1
 8007946:	2000      	movs	r0, #0
 8007948:	f7f9 fbba 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800794c:	4830      	ldr	r0, [pc, #192]	; (8007a10 <cppInit+0xf8>)
 800794e:	f7fd fcd5 	bl	80052fc <_ZN11PowerSensor17getButteryVoltageEv>
 8007952:	ee10 3a10 	vmov	r3, s0
 8007956:	4618      	mov	r0, r3
 8007958:	f7f8 fe0e 	bl	8000578 <__aeabi_f2d>
 800795c:	4603      	mov	r3, r0
 800795e:	460c      	mov	r4, r1
 8007960:	461a      	mov	r2, r3
 8007962:	4623      	mov	r3, r4
 8007964:	482c      	ldr	r0, [pc, #176]	; (8007a18 <cppInit+0x100>)
 8007966:	f7f9 fbd5 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800796a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800796e:	f002 f9bf 	bl	8009cf0 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007972:	482a      	ldr	r0, [pc, #168]	; (8007a1c <cppInit+0x104>)
 8007974:	f7fc feac 	bl	80046d0 <_ZN6Logger10sdCardInitEv>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <cppInit+0x76>
		led.fullColor('G');
 800797e:	2147      	movs	r1, #71	; 0x47
 8007980:	4827      	ldr	r0, [pc, #156]	; (8007a20 <cppInit+0x108>)
 8007982:	f7fa fc67 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007986:	2064      	movs	r0, #100	; 0x64
 8007988:	f002 f9b2 	bl	8009cf0 <HAL_Delay>
 800798c:	e006      	b.n	800799c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800798e:	2152      	movs	r1, #82	; 0x52
 8007990:	4823      	ldr	r0, [pc, #140]	; (8007a20 <cppInit+0x108>)
 8007992:	f7fa fc5f 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007996:	2064      	movs	r0, #100	; 0x64
 8007998:	f002 f9aa 	bl	8009cf0 <HAL_Delay>
	}

	line_sensor.ADCStart();
 800799c:	4821      	ldr	r0, [pc, #132]	; (8007a24 <cppInit+0x10c>)
 800799e:	f7fa fdb5 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80079a2:	4821      	ldr	r0, [pc, #132]	; (8007a28 <cppInit+0x110>)
 80079a4:	f7fd f92a 	bl	8004bfc <_ZN5Motor4initEv>
	encoder.init();
 80079a8:	4820      	ldr	r0, [pc, #128]	; (8007a2c <cppInit+0x114>)
 80079aa:	f7f9 fd3b 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80079ae:	4820      	ldr	r0, [pc, #128]	; (8007a30 <cppInit+0x118>)
 80079b0:	f7fa f9fe 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 80079b4:	481f      	ldr	r0, [pc, #124]	; (8007a34 <cppInit+0x11c>)
 80079b6:	f7fb ffd3 	bl	8003960 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80079ba:	481a      	ldr	r0, [pc, #104]	; (8007a24 <cppInit+0x10c>)
 80079bc:	f7fa ff06 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80079c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079c4:	f002 f994 	bl	8009cf0 <HAL_Delay>

	led.fullColor('M');
 80079c8:	214d      	movs	r1, #77	; 0x4d
 80079ca:	4815      	ldr	r0, [pc, #84]	; (8007a20 <cppInit+0x108>)
 80079cc:	f7fa fc42 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 80079d0:	4817      	ldr	r0, [pc, #92]	; (8007a30 <cppInit+0x118>)
 80079d2:	f7fa fac7 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 80079d6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007a38 <cppInit+0x120>
 80079da:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007a3c <cppInit+0x124>
 80079de:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007a40 <cppInit+0x128>
 80079e2:	4818      	ldr	r0, [pc, #96]	; (8007a44 <cppInit+0x12c>)
 80079e4:	f7fe f9dc 	bl	8005da0 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80079e8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007a48 <cppInit+0x130>
 80079ec:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007a4c <cppInit+0x134>
 80079f0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007a50 <cppInit+0x138>
 80079f4:	4813      	ldr	r0, [pc, #76]	; (8007a44 <cppInit+0x12c>)
 80079f6:	f7fe f9ec 	bl	8005dd2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 80079fa:	4816      	ldr	r0, [pc, #88]	; (8007a54 <cppInit+0x13c>)
 80079fc:	f7fd fb50 	bl	80050a0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007a00:	4815      	ldr	r0, [pc, #84]	; (8007a58 <cppInit+0x140>)
 8007a02:	f7fd fbe7 	bl	80051d4 <_ZN13PathFollowing4initEv>

	esc.init();
 8007a06:	4815      	ldr	r0, [pc, #84]	; (8007a5c <cppInit+0x144>)
 8007a08:	f7f9 fbf0 	bl	80011ec <_ZN3ESC4initEv>

}
 8007a0c:	bf00      	nop
 8007a0e:	bd98      	pop	{r3, r4, r7, pc}
 8007a10:	200005d4 	.word	0x200005d4
 8007a14:	08019dbc 	.word	0x08019dbc
 8007a18:	08019dc4 	.word	0x08019dc4
 8007a1c:	200005f4 	.word	0x200005f4
 8007a20:	200005d0 	.word	0x200005d0
 8007a24:	200002c0 	.word	0x200002c0
 8007a28:	200005cc 	.word	0x200005cc
 8007a2c:	2001dac0 	.word	0x2001dac0
 8007a30:	200005e0 	.word	0x200005e0
 8007a34:	2001db64 	.word	0x2001db64
 8007a38:	3a8439b6 	.word	0x3a8439b6
 8007a3c:	40d1a29c 	.word	0x40d1a29c
 8007a40:	3f81f8a1 	.word	0x3f81f8a1
 8007a44:	2001dae0 	.word	0x2001dae0
 8007a48:	00000000 	.word	0x00000000
 8007a4c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007a50:	3d75c28f 	.word	0x3d75c28f
 8007a54:	2001db20 	.word	0x2001db20
 8007a58:	2002ab18 	.word	0x2002ab18
 8007a5c:	2001db60 	.word	0x2001db60

08007a60 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007a64:	480e      	ldr	r0, [pc, #56]	; (8007aa0 <cppFlip1ms+0x40>)
 8007a66:	f7fa fdaf 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007a6a:	480e      	ldr	r0, [pc, #56]	; (8007aa4 <cppFlip1ms+0x44>)
 8007a6c:	f7fa f9c8 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007a70:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <cppFlip1ms+0x48>)
 8007a72:	f7f9 fcf9 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007a76:	480d      	ldr	r0, [pc, #52]	; (8007aac <cppFlip1ms+0x4c>)
 8007a78:	f7fc fa18 	bl	8003eac <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007a7c:	480c      	ldr	r0, [pc, #48]	; (8007ab0 <cppFlip1ms+0x50>)
 8007a7e:	f7fe f9c1 	bl	8005e04 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007a82:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <cppFlip1ms+0x54>)
 8007a84:	f7fd faf0 	bl	8005068 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007a88:	480b      	ldr	r0, [pc, #44]	; (8007ab8 <cppFlip1ms+0x58>)
 8007a8a:	f7fd fcb3 	bl	80053f4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007a8e:	480b      	ldr	r0, [pc, #44]	; (8007abc <cppFlip1ms+0x5c>)
 8007a90:	f7fd f8c6 	bl	8004c20 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007a94:	4804      	ldr	r0, [pc, #16]	; (8007aa8 <cppFlip1ms+0x48>)
 8007a96:	f7f9 fdd1 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007a9a:	bf00      	nop
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200002c0 	.word	0x200002c0
 8007aa4:	200005e0 	.word	0x200005e0
 8007aa8:	2001dac0 	.word	0x2001dac0
 8007aac:	2001db64 	.word	0x2001db64
 8007ab0:	2001dae0 	.word	0x2001dae0
 8007ab4:	2001db20 	.word	0x2001db20
 8007ab8:	200005b8 	.word	0x200005b8
 8007abc:	200005cc 	.word	0x200005cc

08007ac0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007ac4:	4802      	ldr	r0, [pc, #8]	; (8007ad0 <cppFlip100ns+0x10>)
 8007ac6:	f7fa fd31 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	200002c0 	.word	0x200002c0

08007ad4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007ad8:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <cppFlip10ms+0x48>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <cppFlip10ms+0x48>)
 8007ae2:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <cppFlip10ms+0x48>)
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d905      	bls.n	8007af8 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007aec:	480c      	ldr	r0, [pc, #48]	; (8007b20 <cppFlip10ms+0x4c>)
 8007aee:	f7fd ffa7 	bl	8005a40 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007af2:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <cppFlip10ms+0x48>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007af8:	480a      	ldr	r0, [pc, #40]	; (8007b24 <cppFlip10ms+0x50>)
 8007afa:	f7fd f953 	bl	8004da4 <_ZN5Motor20getLeftCounterPeriodEv>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4619      	mov	r1, r3
 8007b02:	4809      	ldr	r0, [pc, #36]	; (8007b28 <cppFlip10ms+0x54>)
 8007b04:	f7fc fe2c 	bl	8004760 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007b08:	4806      	ldr	r0, [pc, #24]	; (8007b24 <cppFlip10ms+0x50>)
 8007b0a:	f7fd f958 	bl	8004dbe <_ZN5Motor21getRightCounterPeriodEv>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4619      	mov	r1, r3
 8007b12:	4805      	ldr	r0, [pc, #20]	; (8007b28 <cppFlip10ms+0x54>)
 8007b14:	f7fc fe5d 	bl	80047d2 <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007b18:	bf00      	nop
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20042240 	.word	0x20042240
 8007b20:	2002a90c 	.word	0x2002a90c
 8007b24:	200005cc 	.word	0x200005cc
 8007b28:	200005f4 	.word	0x200005f4
 8007b2c:	00000000 	.word	0x00000000

08007b30 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007b36:	4baf      	ldr	r3, [pc, #700]	; (8007df4 <cppLoop+0x2c4>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f3bf 8f5b 	dmb	ish
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d015      	beq.n	8007b7e <cppLoop+0x4e>
 8007b52:	48a8      	ldr	r0, [pc, #672]	; (8007df4 <cppLoop+0x2c4>)
 8007b54:	f00c fdb1 	bl	80146ba <__cxa_guard_acquire>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf14      	ite	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	2300      	moveq	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <cppLoop+0x4e>
 8007b68:	48a3      	ldr	r0, [pc, #652]	; (8007df8 <cppLoop+0x2c8>)
 8007b6a:	f7fc f800 	bl	8003b6e <_ZN9LineTrace5getKpEv>
 8007b6e:	eef0 7a40 	vmov.f32	s15, s0
 8007b72:	4ba2      	ldr	r3, [pc, #648]	; (8007dfc <cppLoop+0x2cc>)
 8007b74:	edc3 7a00 	vstr	s15, [r3]
 8007b78:	489e      	ldr	r0, [pc, #632]	; (8007df4 <cppLoop+0x2c4>)
 8007b7a:	f00c fdaa 	bl	80146d2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007b7e:	4ba0      	ldr	r3, [pc, #640]	; (8007e00 <cppLoop+0x2d0>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f3bf 8f5b 	dmb	ish
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d015      	beq.n	8007bc6 <cppLoop+0x96>
 8007b9a:	4899      	ldr	r0, [pc, #612]	; (8007e00 <cppLoop+0x2d0>)
 8007b9c:	f00c fd8d 	bl	80146ba <__cxa_guard_acquire>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf14      	ite	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	2300      	moveq	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <cppLoop+0x96>
 8007bb0:	4891      	ldr	r0, [pc, #580]	; (8007df8 <cppLoop+0x2c8>)
 8007bb2:	f7fb ffeb 	bl	8003b8c <_ZN9LineTrace5getKiEv>
 8007bb6:	eef0 7a40 	vmov.f32	s15, s0
 8007bba:	4b92      	ldr	r3, [pc, #584]	; (8007e04 <cppLoop+0x2d4>)
 8007bbc:	edc3 7a00 	vstr	s15, [r3]
 8007bc0:	488f      	ldr	r0, [pc, #572]	; (8007e00 <cppLoop+0x2d0>)
 8007bc2:	f00c fd86 	bl	80146d2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007bc6:	4b90      	ldr	r3, [pc, #576]	; (8007e08 <cppLoop+0x2d8>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f3bf 8f5b 	dmb	ish
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2301      	moveq	r3, #1
 8007bda:	2300      	movne	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d015      	beq.n	8007c0e <cppLoop+0xde>
 8007be2:	4889      	ldr	r0, [pc, #548]	; (8007e08 <cppLoop+0x2d8>)
 8007be4:	f00c fd69 	bl	80146ba <__cxa_guard_acquire>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf14      	ite	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	2300      	moveq	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <cppLoop+0xde>
 8007bf8:	487f      	ldr	r0, [pc, #508]	; (8007df8 <cppLoop+0x2c8>)
 8007bfa:	f7fb ffd6 	bl	8003baa <_ZN9LineTrace5getKdEv>
 8007bfe:	eef0 7a40 	vmov.f32	s15, s0
 8007c02:	4b82      	ldr	r3, [pc, #520]	; (8007e0c <cppLoop+0x2dc>)
 8007c04:	edc3 7a00 	vstr	s15, [r3]
 8007c08:	487f      	ldr	r0, [pc, #508]	; (8007e08 <cppLoop+0x2d8>)
 8007c0a:	f00c fd62 	bl	80146d2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007c0e:	4b80      	ldr	r3, [pc, #512]	; (8007e10 <cppLoop+0x2e0>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f3bf 8f5b 	dmb	ish
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d015      	beq.n	8007c56 <cppLoop+0x126>
 8007c2a:	4879      	ldr	r0, [pc, #484]	; (8007e10 <cppLoop+0x2e0>)
 8007c2c:	f00c fd45 	bl	80146ba <__cxa_guard_acquire>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <cppLoop+0x126>
 8007c40:	486d      	ldr	r0, [pc, #436]	; (8007df8 <cppLoop+0x2c8>)
 8007c42:	f7fb ffda 	bl	8003bfa <_ZN9LineTrace9getKpSlowEv>
 8007c46:	eef0 7a40 	vmov.f32	s15, s0
 8007c4a:	4b72      	ldr	r3, [pc, #456]	; (8007e14 <cppLoop+0x2e4>)
 8007c4c:	edc3 7a00 	vstr	s15, [r3]
 8007c50:	486f      	ldr	r0, [pc, #444]	; (8007e10 <cppLoop+0x2e0>)
 8007c52:	f00c fd3e 	bl	80146d2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007c56:	4b70      	ldr	r3, [pc, #448]	; (8007e18 <cppLoop+0x2e8>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f3bf 8f5b 	dmb	ish
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bf0c      	ite	eq
 8007c68:	2301      	moveq	r3, #1
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d015      	beq.n	8007c9e <cppLoop+0x16e>
 8007c72:	4869      	ldr	r0, [pc, #420]	; (8007e18 <cppLoop+0x2e8>)
 8007c74:	f00c fd21 	bl	80146ba <__cxa_guard_acquire>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bf14      	ite	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	2300      	moveq	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <cppLoop+0x16e>
 8007c88:	485b      	ldr	r0, [pc, #364]	; (8007df8 <cppLoop+0x2c8>)
 8007c8a:	f7fb ffc5 	bl	8003c18 <_ZN9LineTrace9getKiSlowEv>
 8007c8e:	eef0 7a40 	vmov.f32	s15, s0
 8007c92:	4b62      	ldr	r3, [pc, #392]	; (8007e1c <cppLoop+0x2ec>)
 8007c94:	edc3 7a00 	vstr	s15, [r3]
 8007c98:	485f      	ldr	r0, [pc, #380]	; (8007e18 <cppLoop+0x2e8>)
 8007c9a:	f00c fd1a 	bl	80146d2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007c9e:	4b60      	ldr	r3, [pc, #384]	; (8007e20 <cppLoop+0x2f0>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f3bf 8f5b 	dmb	ish
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf0c      	ite	eq
 8007cb0:	2301      	moveq	r3, #1
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <cppLoop+0x1b6>
 8007cba:	4859      	ldr	r0, [pc, #356]	; (8007e20 <cppLoop+0x2f0>)
 8007cbc:	f00c fcfd 	bl	80146ba <__cxa_guard_acquire>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <cppLoop+0x1b6>
 8007cd0:	4849      	ldr	r0, [pc, #292]	; (8007df8 <cppLoop+0x2c8>)
 8007cd2:	f7fb ffb0 	bl	8003c36 <_ZN9LineTrace9getKdSlowEv>
 8007cd6:	eef0 7a40 	vmov.f32	s15, s0
 8007cda:	4b52      	ldr	r3, [pc, #328]	; (8007e24 <cppLoop+0x2f4>)
 8007cdc:	edc3 7a00 	vstr	s15, [r3]
 8007ce0:	484f      	ldr	r0, [pc, #316]	; (8007e20 <cppLoop+0x2f0>)
 8007ce2:	f00c fcf6 	bl	80146d2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007ce6:	4b50      	ldr	r3, [pc, #320]	; (8007e28 <cppLoop+0x2f8>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f3bf 8f5b 	dmb	ish
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf0c      	ite	eq
 8007cf8:	2301      	moveq	r3, #1
 8007cfa:	2300      	movne	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d015      	beq.n	8007d2e <cppLoop+0x1fe>
 8007d02:	4849      	ldr	r0, [pc, #292]	; (8007e28 <cppLoop+0x2f8>)
 8007d04:	f00c fcd9 	bl	80146ba <__cxa_guard_acquire>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf14      	ite	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	2300      	moveq	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <cppLoop+0x1fe>
 8007d18:	4837      	ldr	r0, [pc, #220]	; (8007df8 <cppLoop+0x2c8>)
 8007d1a:	f7fb fffa 	bl	8003d12 <_ZN9LineTrace17getTargetVelocityEv>
 8007d1e:	eef0 7a40 	vmov.f32	s15, s0
 8007d22:	4b42      	ldr	r3, [pc, #264]	; (8007e2c <cppLoop+0x2fc>)
 8007d24:	edc3 7a00 	vstr	s15, [r3]
 8007d28:	483f      	ldr	r0, [pc, #252]	; (8007e28 <cppLoop+0x2f8>)
 8007d2a:	f00c fcd2 	bl	80146d2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007d2e:	4b40      	ldr	r3, [pc, #256]	; (8007e30 <cppLoop+0x300>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f3bf 8f5b 	dmb	ish
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d015      	beq.n	8007d76 <cppLoop+0x246>
 8007d4a:	4839      	ldr	r0, [pc, #228]	; (8007e30 <cppLoop+0x300>)
 8007d4c:	f00c fcb5 	bl	80146ba <__cxa_guard_acquire>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	2300      	moveq	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <cppLoop+0x246>
 8007d60:	4825      	ldr	r0, [pc, #148]	; (8007df8 <cppLoop+0x2c8>)
 8007d62:	f7fb ffe6 	bl	8003d32 <_ZN9LineTrace14getMaxVelocityEv>
 8007d66:	eef0 7a40 	vmov.f32	s15, s0
 8007d6a:	4b32      	ldr	r3, [pc, #200]	; (8007e34 <cppLoop+0x304>)
 8007d6c:	edc3 7a00 	vstr	s15, [r3]
 8007d70:	482f      	ldr	r0, [pc, #188]	; (8007e30 <cppLoop+0x300>)
 8007d72:	f00c fcae 	bl	80146d2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007d76:	4b30      	ldr	r3, [pc, #192]	; (8007e38 <cppLoop+0x308>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f3bf 8f5b 	dmb	ish
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d015      	beq.n	8007dbe <cppLoop+0x28e>
 8007d92:	4829      	ldr	r0, [pc, #164]	; (8007e38 <cppLoop+0x308>)
 8007d94:	f00c fc91 	bl	80146ba <__cxa_guard_acquire>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf14      	ite	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	2300      	moveq	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <cppLoop+0x28e>
 8007da8:	4813      	ldr	r0, [pc, #76]	; (8007df8 <cppLoop+0x2c8>)
 8007daa:	f7fb ffd2 	bl	8003d52 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007dae:	eef0 7a40 	vmov.f32	s15, s0
 8007db2:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <cppLoop+0x30c>)
 8007db4:	edc3 7a00 	vstr	s15, [r3]
 8007db8:	481f      	ldr	r0, [pc, #124]	; (8007e38 <cppLoop+0x308>)
 8007dba:	f00c fc8a 	bl	80146d2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <cppLoop+0x310>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f3bf 8f5b 	dmb	ish
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bf0c      	ite	eq
 8007dd0:	2301      	moveq	r3, #1
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d03f      	beq.n	8007e5a <cppLoop+0x32a>
 8007dda:	4819      	ldr	r0, [pc, #100]	; (8007e40 <cppLoop+0x310>)
 8007ddc:	f00c fc6d 	bl	80146ba <__cxa_guard_acquire>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bf14      	ite	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	2300      	moveq	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d034      	beq.n	8007e5a <cppLoop+0x32a>
 8007df0:	e028      	b.n	8007e44 <cppLoop+0x314>
 8007df2:	bf00      	nop
 8007df4:	20042250 	.word	0x20042250
 8007df8:	2001db64 	.word	0x2001db64
 8007dfc:	2004224c 	.word	0x2004224c
 8007e00:	20042258 	.word	0x20042258
 8007e04:	20042254 	.word	0x20042254
 8007e08:	20042260 	.word	0x20042260
 8007e0c:	2004225c 	.word	0x2004225c
 8007e10:	20042268 	.word	0x20042268
 8007e14:	20042264 	.word	0x20042264
 8007e18:	20042270 	.word	0x20042270
 8007e1c:	2004226c 	.word	0x2004226c
 8007e20:	20042278 	.word	0x20042278
 8007e24:	20042274 	.word	0x20042274
 8007e28:	20042280 	.word	0x20042280
 8007e2c:	2004227c 	.word	0x2004227c
 8007e30:	20042288 	.word	0x20042288
 8007e34:	20042284 	.word	0x20042284
 8007e38:	20042290 	.word	0x20042290
 8007e3c:	2004228c 	.word	0x2004228c
 8007e40:	20042298 	.word	0x20042298
 8007e44:	48b6      	ldr	r0, [pc, #728]	; (8008120 <cppLoop+0x5f0>)
 8007e46:	f7fb ff94 	bl	8003d72 <_ZN9LineTrace14getMinVelocityEv>
 8007e4a:	eef0 7a40 	vmov.f32	s15, s0
 8007e4e:	4bb5      	ldr	r3, [pc, #724]	; (8008124 <cppLoop+0x5f4>)
 8007e50:	edc3 7a00 	vstr	s15, [r3]
 8007e54:	48b4      	ldr	r0, [pc, #720]	; (8008128 <cppLoop+0x5f8>)
 8007e56:	f00c fc3c 	bl	80146d2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007e5a:	4bb4      	ldr	r3, [pc, #720]	; (800812c <cppLoop+0x5fc>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f3bf 8f5b 	dmb	ish
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2301      	moveq	r3, #1
 8007e6e:	2300      	movne	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d015      	beq.n	8007ea2 <cppLoop+0x372>
 8007e76:	48ad      	ldr	r0, [pc, #692]	; (800812c <cppLoop+0x5fc>)
 8007e78:	f00c fc1f 	bl	80146ba <__cxa_guard_acquire>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2301      	movne	r3, #1
 8007e84:	2300      	moveq	r3, #0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <cppLoop+0x372>
 8007e8c:	48a4      	ldr	r0, [pc, #656]	; (8008120 <cppLoop+0x5f0>)
 8007e8e:	f7fb ff80 	bl	8003d92 <_ZN9LineTrace15getMinVelocity2Ev>
 8007e92:	eef0 7a40 	vmov.f32	s15, s0
 8007e96:	4ba6      	ldr	r3, [pc, #664]	; (8008130 <cppLoop+0x600>)
 8007e98:	edc3 7a00 	vstr	s15, [r3]
 8007e9c:	48a3      	ldr	r0, [pc, #652]	; (800812c <cppLoop+0x5fc>)
 8007e9e:	f00c fc18 	bl	80146d2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007ea2:	4ba4      	ldr	r3, [pc, #656]	; (8008134 <cppLoop+0x604>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	f3bf 8f5b 	dmb	ish
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2301      	moveq	r3, #1
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d015      	beq.n	8007eea <cppLoop+0x3ba>
 8007ebe:	489d      	ldr	r0, [pc, #628]	; (8008134 <cppLoop+0x604>)
 8007ec0:	f00c fbfb 	bl	80146ba <__cxa_guard_acquire>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <cppLoop+0x3ba>
 8007ed4:	4892      	ldr	r0, [pc, #584]	; (8008120 <cppLoop+0x5f0>)
 8007ed6:	f7fb ffa0 	bl	8003e1a <_ZN9LineTrace9getMaxAccEv>
 8007eda:	eef0 7a40 	vmov.f32	s15, s0
 8007ede:	4b96      	ldr	r3, [pc, #600]	; (8008138 <cppLoop+0x608>)
 8007ee0:	edc3 7a00 	vstr	s15, [r3]
 8007ee4:	4893      	ldr	r0, [pc, #588]	; (8008134 <cppLoop+0x604>)
 8007ee6:	f00c fbf4 	bl	80146d2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007eea:	4b94      	ldr	r3, [pc, #592]	; (800813c <cppLoop+0x60c>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f3bf 8f5b 	dmb	ish
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d015      	beq.n	8007f32 <cppLoop+0x402>
 8007f06:	488d      	ldr	r0, [pc, #564]	; (800813c <cppLoop+0x60c>)
 8007f08:	f00c fbd7 	bl	80146ba <__cxa_guard_acquire>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bf14      	ite	ne
 8007f12:	2301      	movne	r3, #1
 8007f14:	2300      	moveq	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <cppLoop+0x402>
 8007f1c:	4880      	ldr	r0, [pc, #512]	; (8008120 <cppLoop+0x5f0>)
 8007f1e:	f7fb ffb2 	bl	8003e86 <_ZN9LineTrace9getMaxDecEv>
 8007f22:	eef0 7a40 	vmov.f32	s15, s0
 8007f26:	4b86      	ldr	r3, [pc, #536]	; (8008140 <cppLoop+0x610>)
 8007f28:	edc3 7a00 	vstr	s15, [r3]
 8007f2c:	4883      	ldr	r0, [pc, #524]	; (800813c <cppLoop+0x60c>)
 8007f2e:	f00c fbd0 	bl	80146d2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007f32:	4b84      	ldr	r3, [pc, #528]	; (8008144 <cppLoop+0x614>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f3bf 8f5b 	dmb	ish
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d015      	beq.n	8007f7a <cppLoop+0x44a>
 8007f4e:	487d      	ldr	r0, [pc, #500]	; (8008144 <cppLoop+0x614>)
 8007f50:	f00c fbb3 	bl	80146ba <__cxa_guard_acquire>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bf14      	ite	ne
 8007f5a:	2301      	movne	r3, #1
 8007f5c:	2300      	moveq	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <cppLoop+0x44a>
 8007f64:	486e      	ldr	r0, [pc, #440]	; (8008120 <cppLoop+0x5f0>)
 8007f66:	f7fb ff7c 	bl	8003e62 <_ZN9LineTrace10getMaxAcc2Ev>
 8007f6a:	eef0 7a40 	vmov.f32	s15, s0
 8007f6e:	4b76      	ldr	r3, [pc, #472]	; (8008148 <cppLoop+0x618>)
 8007f70:	edc3 7a00 	vstr	s15, [r3]
 8007f74:	4873      	ldr	r0, [pc, #460]	; (8008144 <cppLoop+0x614>)
 8007f76:	f00c fbac 	bl	80146d2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007f7a:	4b74      	ldr	r3, [pc, #464]	; (800814c <cppLoop+0x61c>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f3bf 8f5b 	dmb	ish
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d015      	beq.n	8007fc2 <cppLoop+0x492>
 8007f96:	486d      	ldr	r0, [pc, #436]	; (800814c <cppLoop+0x61c>)
 8007f98:	f00c fb8f 	bl	80146ba <__cxa_guard_acquire>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <cppLoop+0x492>
 8007fac:	485c      	ldr	r0, [pc, #368]	; (8008120 <cppLoop+0x5f0>)
 8007fae:	f7fb ff46 	bl	8003e3e <_ZN9LineTrace10getMaxDec2Ev>
 8007fb2:	eef0 7a40 	vmov.f32	s15, s0
 8007fb6:	4b66      	ldr	r3, [pc, #408]	; (8008150 <cppLoop+0x620>)
 8007fb8:	edc3 7a00 	vstr	s15, [r3]
 8007fbc:	4863      	ldr	r0, [pc, #396]	; (800814c <cppLoop+0x61c>)
 8007fbe:	f00c fb88 	bl	80146d2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007fc2:	4864      	ldr	r0, [pc, #400]	; (8008154 <cppLoop+0x624>)
 8007fc4:	f7fd f9aa 	bl	800531c <_ZN12RotarySwitch8getValueEv>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b0f      	cmp	r3, #15
 8007fcc:	f201 8546 	bhi.w	8009a5c <cppLoop+0x1f2c>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <cppLoop+0x4a8>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	08008019 	.word	0x08008019
 8007fdc:	0800839d 	.word	0x0800839d
 8007fe0:	080084b9 	.word	0x080084b9
 8007fe4:	0800860b 	.word	0x0800860b
 8007fe8:	080086e5 	.word	0x080086e5
 8007fec:	08008975 	.word	0x08008975
 8007ff0:	08008ab1 	.word	0x08008ab1
 8007ff4:	08008d35 	.word	0x08008d35
 8007ff8:	08008f7f 	.word	0x08008f7f
 8007ffc:	0800920f 	.word	0x0800920f
 8008000:	080092cb 	.word	0x080092cb
 8008004:	080093c1 	.word	0x080093c1
 8008008:	08009447 	.word	0x08009447
 800800c:	0800950d 	.word	0x0800950d
 8008010:	080095d3 	.word	0x080095d3
 8008014:	080096ed 	.word	0x080096ed
	case 0:
		led.fullColor('W');
 8008018:	2157      	movs	r1, #87	; 0x57
 800801a:	484f      	ldr	r0, [pc, #316]	; (8008158 <cppLoop+0x628>)
 800801c:	f7fa f91a 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008020:	f7f9 f83e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008024:	2100      	movs	r1, #0
 8008026:	2000      	movs	r0, #0
 8008028:	f7f9 f84a 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 800802c:	483c      	ldr	r0, [pc, #240]	; (8008120 <cppLoop+0x5f0>)
 800802e:	f7fb fde4 	bl	8003bfa <_ZN9LineTrace9getKpSlowEv>
 8008032:	eeb0 7a40 	vmov.f32	s14, s0
 8008036:	eddf 7a49 	vldr	s15, [pc, #292]	; 800815c <cppLoop+0x62c>
 800803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803e:	eeb0 0a67 	vmov.f32	s0, s15
 8008042:	f7fa fd33 	bl	8002aac <_ZSt3absf>
 8008046:	ee10 3a10 	vmov	r3, s0
 800804a:	4618      	mov	r0, r3
 800804c:	f7f8 fa94 	bl	8000578 <__aeabi_f2d>
 8008050:	4603      	mov	r3, r0
 8008052:	460c      	mov	r4, r1
 8008054:	461a      	mov	r2, r3
 8008056:	4623      	mov	r3, r4
 8008058:	4841      	ldr	r0, [pc, #260]	; (8008160 <cppLoop+0x630>)
 800805a:	f7f9 f85b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800805e:	2101      	movs	r1, #1
 8008060:	2000      	movs	r0, #0
 8008062:	f7f9 f82d 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 8008066:	482e      	ldr	r0, [pc, #184]	; (8008120 <cppLoop+0x5f0>)
 8008068:	f7fb fdd6 	bl	8003c18 <_ZN9LineTrace9getKiSlowEv>
 800806c:	eeb0 7a40 	vmov.f32	s14, s0
 8008070:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8008164 <cppLoop+0x634>
 8008074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008078:	eeb0 0a67 	vmov.f32	s0, s15
 800807c:	f7fa fd16 	bl	8002aac <_ZSt3absf>
 8008080:	ee10 3a10 	vmov	r3, s0
 8008084:	4618      	mov	r0, r3
 8008086:	f7f8 fa77 	bl	8000578 <__aeabi_f2d>
 800808a:	4605      	mov	r5, r0
 800808c:	460e      	mov	r6, r1
 800808e:	4824      	ldr	r0, [pc, #144]	; (8008120 <cppLoop+0x5f0>)
 8008090:	f7fb fdd1 	bl	8003c36 <_ZN9LineTrace9getKdSlowEv>
 8008094:	eeb0 7a40 	vmov.f32	s14, s0
 8008098:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008168 <cppLoop+0x638>
 800809c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a0:	eeb0 0a67 	vmov.f32	s0, s15
 80080a4:	f7fa fd02 	bl	8002aac <_ZSt3absf>
 80080a8:	ee10 3a10 	vmov	r3, s0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7f8 fa63 	bl	8000578 <__aeabi_f2d>
 80080b2:	4603      	mov	r3, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	e9cd 3400 	strd	r3, r4, [sp]
 80080ba:	462a      	mov	r2, r5
 80080bc:	4633      	mov	r3, r6
 80080be:	482b      	ldr	r0, [pc, #172]	; (800816c <cppLoop+0x63c>)
 80080c0:	f7f9 f828 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80080c4:	482a      	ldr	r0, [pc, #168]	; (8008170 <cppLoop+0x640>)
 80080c6:	f7fa f861 	bl	800218c <_ZN8JoyStick8getValueEv>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	bf0c      	ite	eq
 80080d0:	2301      	moveq	r3, #1
 80080d2:	2300      	movne	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d04e      	beq.n	8008178 <cppLoop+0x648>
			led.LR(-1, 1);
 80080da:	2201      	movs	r2, #1
 80080dc:	f04f 31ff 	mov.w	r1, #4294967295
 80080e0:	481d      	ldr	r0, [pc, #116]	; (8008158 <cppLoop+0x628>)
 80080e2:	f7fa f973 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080ea:	f001 fe01 	bl	8009cf0 <HAL_Delay>

			selector++;
 80080ee:	4b21      	ldr	r3, [pc, #132]	; (8008174 <cppLoop+0x644>)
 80080f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	b21a      	sxth	r2, r3
 80080fc:	4b1d      	ldr	r3, [pc, #116]	; (8008174 <cppLoop+0x644>)
 80080fe:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008100:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <cppLoop+0x644>)
 8008102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008106:	2b02      	cmp	r3, #2
 8008108:	dd02      	ble.n	8008110 <cppLoop+0x5e0>
 800810a:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <cppLoop+0x644>)
 800810c:	2200      	movs	r2, #0
 800810e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008110:	2200      	movs	r2, #0
 8008112:	f04f 31ff 	mov.w	r1, #4294967295
 8008116:	4810      	ldr	r0, [pc, #64]	; (8008158 <cppLoop+0x628>)
 8008118:	f7fa f958 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 800811c:	f001 bca0 	b.w	8009a60 <cppLoop+0x1f30>
 8008120:	2001db64 	.word	0x2001db64
 8008124:	20042294 	.word	0x20042294
 8008128:	20042298 	.word	0x20042298
 800812c:	200422a0 	.word	0x200422a0
 8008130:	2004229c 	.word	0x2004229c
 8008134:	200422a8 	.word	0x200422a8
 8008138:	200422a4 	.word	0x200422a4
 800813c:	200422b0 	.word	0x200422b0
 8008140:	200422ac 	.word	0x200422ac
 8008144:	200422b8 	.word	0x200422b8
 8008148:	200422b4 	.word	0x200422b4
 800814c:	200422c0 	.word	0x200422c0
 8008150:	200422bc 	.word	0x200422bc
 8008154:	200005c8 	.word	0x200005c8
 8008158:	200005d0 	.word	0x200005d0
 800815c:	447a0000 	.word	0x447a0000
 8008160:	08019dc8 	.word	0x08019dc8
 8008164:	42c80000 	.word	0x42c80000
 8008168:	461c4000 	.word	0x461c4000
 800816c:	08019dd4 	.word	0x08019dd4
 8008170:	200005c4 	.word	0x200005c4
 8008174:	20042242 	.word	0x20042242
		else if(joy_stick.getValue() == JOY_R){
 8008178:	48bd      	ldr	r0, [pc, #756]	; (8008470 <cppLoop+0x940>)
 800817a:	f7fa f807 	bl	800218c <_ZN8JoyStick8getValueEv>
 800817e:	4603      	mov	r3, r0
 8008180:	2b10      	cmp	r3, #16
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d059      	beq.n	8008242 <cppLoop+0x712>
			led.LR(-1, 1);
 800818e:	2201      	movs	r2, #1
 8008190:	f04f 31ff 	mov.w	r1, #4294967295
 8008194:	48b7      	ldr	r0, [pc, #732]	; (8008474 <cppLoop+0x944>)
 8008196:	f7fa f919 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800819a:	2064      	movs	r0, #100	; 0x64
 800819c:	f001 fda8 	bl	8009cf0 <HAL_Delay>
			if(selector == 0){
 80081a0:	4bb5      	ldr	r3, [pc, #724]	; (8008478 <cppLoop+0x948>)
 80081a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d113      	bne.n	80081d2 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80081aa:	4bb4      	ldr	r3, [pc, #720]	; (800847c <cppLoop+0x94c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7f8 f9e2 	bl	8000578 <__aeabi_f2d>
 80081b4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008458 <cppLoop+0x928>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 f87f 	bl	80002bc <__adddf3>
 80081be:	4603      	mov	r3, r0
 80081c0:	460c      	mov	r4, r1
 80081c2:	4618      	mov	r0, r3
 80081c4:	4621      	mov	r1, r4
 80081c6:	f7f8 fd27 	bl	8000c18 <__aeabi_d2f>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4bab      	ldr	r3, [pc, #684]	; (800847c <cppLoop+0x94c>)
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e02b      	b.n	800822a <cppLoop+0x6fa>
			else if(selector == 1){
 80081d2:	4ba9      	ldr	r3, [pc, #676]	; (8008478 <cppLoop+0x948>)
 80081d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d113      	bne.n	8008204 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80081dc:	4ba8      	ldr	r3, [pc, #672]	; (8008480 <cppLoop+0x950>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7f8 f9c9 	bl	8000578 <__aeabi_f2d>
 80081e6:	a39e      	add	r3, pc, #632	; (adr r3, 8008460 <cppLoop+0x930>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 f866 	bl	80002bc <__adddf3>
 80081f0:	4603      	mov	r3, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4618      	mov	r0, r3
 80081f6:	4621      	mov	r1, r4
 80081f8:	f7f8 fd0e 	bl	8000c18 <__aeabi_d2f>
 80081fc:	4602      	mov	r2, r0
 80081fe:	4ba0      	ldr	r3, [pc, #640]	; (8008480 <cppLoop+0x950>)
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	e012      	b.n	800822a <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008204:	4b9f      	ldr	r3, [pc, #636]	; (8008484 <cppLoop+0x954>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7f8 f9b5 	bl	8000578 <__aeabi_f2d>
 800820e:	a396      	add	r3, pc, #600	; (adr r3, 8008468 <cppLoop+0x938>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 f852 	bl	80002bc <__adddf3>
 8008218:	4603      	mov	r3, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4618      	mov	r0, r3
 800821e:	4621      	mov	r1, r4
 8008220:	f7f8 fcfa 	bl	8000c18 <__aeabi_d2f>
 8008224:	4602      	mov	r2, r0
 8008226:	4b97      	ldr	r3, [pc, #604]	; (8008484 <cppLoop+0x954>)
 8008228:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800822a:	2152      	movs	r1, #82	; 0x52
 800822c:	4891      	ldr	r0, [pc, #580]	; (8008474 <cppLoop+0x944>)
 800822e:	f7fa f811 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008232:	2200      	movs	r2, #0
 8008234:	f04f 31ff 	mov.w	r1, #4294967295
 8008238:	488e      	ldr	r0, [pc, #568]	; (8008474 <cppLoop+0x944>)
 800823a:	f7fa f8c7 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800823e:	f001 bc0f 	b.w	8009a60 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 8008242:	488b      	ldr	r0, [pc, #556]	; (8008470 <cppLoop+0x940>)
 8008244:	f7f9 ffa2 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	bf0c      	ite	eq
 800824e:	2301      	moveq	r3, #1
 8008250:	2300      	movne	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d059      	beq.n	800830c <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008258:	2201      	movs	r2, #1
 800825a:	f04f 31ff 	mov.w	r1, #4294967295
 800825e:	4885      	ldr	r0, [pc, #532]	; (8008474 <cppLoop+0x944>)
 8008260:	f7fa f8b4 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008264:	2064      	movs	r0, #100	; 0x64
 8008266:	f001 fd43 	bl	8009cf0 <HAL_Delay>
			if(selector == 0){
 800826a:	4b83      	ldr	r3, [pc, #524]	; (8008478 <cppLoop+0x948>)
 800826c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d113      	bne.n	800829c <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 8008274:	4b81      	ldr	r3, [pc, #516]	; (800847c <cppLoop+0x94c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7f8 f97d 	bl	8000578 <__aeabi_f2d>
 800827e:	a376      	add	r3, pc, #472	; (adr r3, 8008458 <cppLoop+0x928>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f8 f818 	bl	80002b8 <__aeabi_dsub>
 8008288:	4603      	mov	r3, r0
 800828a:	460c      	mov	r4, r1
 800828c:	4618      	mov	r0, r3
 800828e:	4621      	mov	r1, r4
 8008290:	f7f8 fcc2 	bl	8000c18 <__aeabi_d2f>
 8008294:	4602      	mov	r2, r0
 8008296:	4b79      	ldr	r3, [pc, #484]	; (800847c <cppLoop+0x94c>)
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e02b      	b.n	80082f4 <cppLoop+0x7c4>
			else if(selector == 1){
 800829c:	4b76      	ldr	r3, [pc, #472]	; (8008478 <cppLoop+0x948>)
 800829e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d113      	bne.n	80082ce <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 80082a6:	4b76      	ldr	r3, [pc, #472]	; (8008480 <cppLoop+0x950>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f8 f964 	bl	8000578 <__aeabi_f2d>
 80082b0:	a36b      	add	r3, pc, #428	; (adr r3, 8008460 <cppLoop+0x930>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f7 ffff 	bl	80002b8 <__aeabi_dsub>
 80082ba:	4603      	mov	r3, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	4618      	mov	r0, r3
 80082c0:	4621      	mov	r1, r4
 80082c2:	f7f8 fca9 	bl	8000c18 <__aeabi_d2f>
 80082c6:	4602      	mov	r2, r0
 80082c8:	4b6d      	ldr	r3, [pc, #436]	; (8008480 <cppLoop+0x950>)
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e012      	b.n	80082f4 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80082ce:	4b6d      	ldr	r3, [pc, #436]	; (8008484 <cppLoop+0x954>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f8 f950 	bl	8000578 <__aeabi_f2d>
 80082d8:	a363      	add	r3, pc, #396	; (adr r3, 8008468 <cppLoop+0x938>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f7 ffeb 	bl	80002b8 <__aeabi_dsub>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	4618      	mov	r0, r3
 80082e8:	4621      	mov	r1, r4
 80082ea:	f7f8 fc95 	bl	8000c18 <__aeabi_d2f>
 80082ee:	4602      	mov	r2, r0
 80082f0:	4b64      	ldr	r3, [pc, #400]	; (8008484 <cppLoop+0x954>)
 80082f2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80082f4:	2152      	movs	r1, #82	; 0x52
 80082f6:	485f      	ldr	r0, [pc, #380]	; (8008474 <cppLoop+0x944>)
 80082f8:	f7f9 ffac 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80082fc:	2200      	movs	r2, #0
 80082fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008302:	485c      	ldr	r0, [pc, #368]	; (8008474 <cppLoop+0x944>)
 8008304:	f7fa f862 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008308:	f001 bbaa 	b.w	8009a60 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 800830c:	4858      	ldr	r0, [pc, #352]	; (8008470 <cppLoop+0x940>)
 800830e:	f7f9 ff3d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008312:	4603      	mov	r3, r0
 8008314:	2b02      	cmp	r3, #2
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	f001 839e 	beq.w	8009a60 <cppLoop+0x1f30>
			led.LR(-1, 1);
 8008324:	2201      	movs	r2, #1
 8008326:	f04f 31ff 	mov.w	r1, #4294967295
 800832a:	4852      	ldr	r0, [pc, #328]	; (8008474 <cppLoop+0x944>)
 800832c:	f7fa f84e 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008330:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008334:	f001 fcdc 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008338:	2300      	movs	r3, #0
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4b4f      	ldr	r3, [pc, #316]	; (800847c <cppLoop+0x94c>)
 800833e:	2201      	movs	r2, #1
 8008340:	4951      	ldr	r1, [pc, #324]	; (8008488 <cppLoop+0x958>)
 8008342:	4852      	ldr	r0, [pc, #328]	; (800848c <cppLoop+0x95c>)
 8008344:	f7f9 fa9a 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008348:	2300      	movs	r3, #0
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4b4c      	ldr	r3, [pc, #304]	; (8008480 <cppLoop+0x950>)
 800834e:	2201      	movs	r2, #1
 8008350:	494f      	ldr	r1, [pc, #316]	; (8008490 <cppLoop+0x960>)
 8008352:	484e      	ldr	r0, [pc, #312]	; (800848c <cppLoop+0x95c>)
 8008354:	f7f9 fa92 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008358:	2300      	movs	r3, #0
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4b49      	ldr	r3, [pc, #292]	; (8008484 <cppLoop+0x954>)
 800835e:	2201      	movs	r2, #1
 8008360:	494c      	ldr	r1, [pc, #304]	; (8008494 <cppLoop+0x964>)
 8008362:	484a      	ldr	r0, [pc, #296]	; (800848c <cppLoop+0x95c>)
 8008364:	f7f9 fa8a 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008368:	4b44      	ldr	r3, [pc, #272]	; (800847c <cppLoop+0x94c>)
 800836a:	edd3 7a00 	vldr	s15, [r3]
 800836e:	4b44      	ldr	r3, [pc, #272]	; (8008480 <cppLoop+0x950>)
 8008370:	ed93 7a00 	vldr	s14, [r3]
 8008374:	4b43      	ldr	r3, [pc, #268]	; (8008484 <cppLoop+0x954>)
 8008376:	edd3 6a00 	vldr	s13, [r3]
 800837a:	eeb0 1a66 	vmov.f32	s2, s13
 800837e:	eef0 0a47 	vmov.f32	s1, s14
 8008382:	eeb0 0a67 	vmov.f32	s0, s15
 8008386:	4844      	ldr	r0, [pc, #272]	; (8008498 <cppLoop+0x968>)
 8008388:	f7fb fc1e 	bl	8003bc8 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 800838c:	2200      	movs	r2, #0
 800838e:	f04f 31ff 	mov.w	r1, #4294967295
 8008392:	4838      	ldr	r0, [pc, #224]	; (8008474 <cppLoop+0x944>)
 8008394:	f7fa f81a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008398:	f001 bb62 	b.w	8009a60 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 800839c:	2143      	movs	r1, #67	; 0x43
 800839e:	4835      	ldr	r0, [pc, #212]	; (8008474 <cppLoop+0x944>)
 80083a0:	f7f9 ff58 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80083a4:	f7f8 fe7c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083a8:	2100      	movs	r1, #0
 80083aa:	2000      	movs	r0, #0
 80083ac:	f7f8 fe88 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80083b0:	483a      	ldr	r0, [pc, #232]	; (800849c <cppLoop+0x96c>)
 80083b2:	f7f8 feaf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80083b6:	2101      	movs	r1, #1
 80083b8:	2000      	movs	r0, #0
 80083ba:	f7f8 fe81 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80083be:	4b38      	ldr	r3, [pc, #224]	; (80084a0 <cppLoop+0x970>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f8 f8d8 	bl	8000578 <__aeabi_f2d>
 80083c8:	4603      	mov	r3, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	461a      	mov	r2, r3
 80083ce:	4623      	mov	r3, r4
 80083d0:	4834      	ldr	r0, [pc, #208]	; (80084a4 <cppLoop+0x974>)
 80083d2:	f7f8 fe9f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083d6:	4826      	ldr	r0, [pc, #152]	; (8008470 <cppLoop+0x940>)
 80083d8:	f7f9 fed8 	bl	800218c <_ZN8JoyStick8getValueEv>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b02      	cmp	r3, #2
 80083e0:	bf0c      	ite	eq
 80083e2:	2301      	moveq	r3, #1
 80083e4:	2300      	movne	r3, #0
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f001 833b 	beq.w	8009a64 <cppLoop+0x1f34>
			HAL_Delay(500);
 80083ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083f2:	f001 fc7d 	bl	8009cf0 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80083f6:	4b2a      	ldr	r3, [pc, #168]	; (80084a0 <cppLoop+0x970>)
 80083f8:	edd3 7a00 	vldr	s15, [r3]
 80083fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008400:	4825      	ldr	r0, [pc, #148]	; (8008498 <cppLoop+0x968>)
 8008402:	f7fb fc36 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008406:	f04f 32ff 	mov.w	r2, #4294967295
 800840a:	2101      	movs	r1, #1
 800840c:	4819      	ldr	r0, [pc, #100]	; (8008474 <cppLoop+0x944>)
 800840e:	f7f9 ffdd 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 8008412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008416:	f001 fc6b 	bl	8009cf0 <HAL_Delay>
			logger.start();
 800841a:	4823      	ldr	r0, [pc, #140]	; (80084a8 <cppLoop+0x978>)
 800841c:	f7fc fbbd 	bl	8004b9a <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008420:	2100      	movs	r1, #0
 8008422:	481d      	ldr	r0, [pc, #116]	; (8008498 <cppLoop+0x968>)
 8008424:	f7fb fe38 	bl	8004098 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008428:	481b      	ldr	r0, [pc, #108]	; (8008498 <cppLoop+0x968>)
 800842a:	f7fb fe73 	bl	8004114 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 800842e:	481e      	ldr	r0, [pc, #120]	; (80084a8 <cppLoop+0x978>)
 8008430:	f7fc fbc3 	bl	8004bba <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 8008434:	4a1d      	ldr	r2, [pc, #116]	; (80084ac <cppLoop+0x97c>)
 8008436:	491e      	ldr	r1, [pc, #120]	; (80084b0 <cppLoop+0x980>)
 8008438:	481b      	ldr	r0, [pc, #108]	; (80084a8 <cppLoop+0x978>)
 800843a:	f7fc fab9 	bl	80049b0 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 800843e:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <cppLoop+0x984>)
 8008440:	491b      	ldr	r1, [pc, #108]	; (80084b0 <cppLoop+0x980>)
 8008442:	4819      	ldr	r0, [pc, #100]	; (80084a8 <cppLoop+0x978>)
 8008444:	f7fc faca 	bl	80049dc <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	2100      	movs	r1, #0
 800844e:	4809      	ldr	r0, [pc, #36]	; (8008474 <cppLoop+0x944>)
 8008450:	f7f9 ffbc 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008454:	f001 bb06 	b.w	8009a64 <cppLoop+0x1f34>
 8008458:	88e368f1 	.word	0x88e368f1
 800845c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008460:	eb1c432d 	.word	0xeb1c432d
 8008464:	3f1a36e2 	.word	0x3f1a36e2
 8008468:	a0b5ed8d 	.word	0xa0b5ed8d
 800846c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008470:	200005c4 	.word	0x200005c4
 8008474:	200005d0 	.word	0x200005d0
 8008478:	20042242 	.word	0x20042242
 800847c:	20042264 	.word	0x20042264
 8008480:	2004226c 	.word	0x2004226c
 8008484:	20042274 	.word	0x20042274
 8008488:	08019de4 	.word	0x08019de4
 800848c:	08019df0 	.word	0x08019df0
 8008490:	08019df8 	.word	0x08019df8
 8008494:	08019e04 	.word	0x08019e04
 8008498:	2001db64 	.word	0x2001db64
 800849c:	08019e10 	.word	0x08019e10
 80084a0:	2004227c 	.word	0x2004227c
 80084a4:	08019e1c 	.word	0x08019e1c
 80084a8:	200005f4 	.word	0x200005f4
 80084ac:	08019e28 	.word	0x08019e28
 80084b0:	08019e34 	.word	0x08019e34
 80084b4:	08019e40 	.word	0x08019e40

	case 2:
		led.fullColor('B');
 80084b8:	2142      	movs	r1, #66	; 0x42
 80084ba:	48b9      	ldr	r0, [pc, #740]	; (80087a0 <cppLoop+0xc70>)
 80084bc:	f7f9 feca 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084c0:	f7f8 fdee 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084c4:	2100      	movs	r1, #0
 80084c6:	2000      	movs	r0, #0
 80084c8:	f7f8 fdfa 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80084cc:	48b5      	ldr	r0, [pc, #724]	; (80087a4 <cppLoop+0xc74>)
 80084ce:	f7f8 fe21 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084d2:	2101      	movs	r1, #1
 80084d4:	2000      	movs	r0, #0
 80084d6:	f7f8 fdf3 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80084da:	4bb3      	ldr	r3, [pc, #716]	; (80087a8 <cppLoop+0xc78>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7f8 f84a 	bl	8000578 <__aeabi_f2d>
 80084e4:	4603      	mov	r3, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	461a      	mov	r2, r3
 80084ea:	4623      	mov	r3, r4
 80084ec:	48af      	ldr	r0, [pc, #700]	; (80087ac <cppLoop+0xc7c>)
 80084ee:	f7f8 fe11 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80084f2:	48af      	ldr	r0, [pc, #700]	; (80087b0 <cppLoop+0xc80>)
 80084f4:	f7f9 fe4a 	bl	800218c <_ZN8JoyStick8getValueEv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d023      	beq.n	8008550 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008508:	2201      	movs	r2, #1
 800850a:	f04f 31ff 	mov.w	r1, #4294967295
 800850e:	48a4      	ldr	r0, [pc, #656]	; (80087a0 <cppLoop+0xc70>)
 8008510:	f7f9 ff5c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008514:	2064      	movs	r0, #100	; 0x64
 8008516:	f001 fbeb 	bl	8009cf0 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800851a:	4ba3      	ldr	r3, [pc, #652]	; (80087a8 <cppLoop+0xc78>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7f8 f82a 	bl	8000578 <__aeabi_f2d>
 8008524:	a39c      	add	r3, pc, #624	; (adr r3, 8008798 <cppLoop+0xc68>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f7f7 fec7 	bl	80002bc <__adddf3>
 800852e:	4603      	mov	r3, r0
 8008530:	460c      	mov	r4, r1
 8008532:	4618      	mov	r0, r3
 8008534:	4621      	mov	r1, r4
 8008536:	f7f8 fb6f 	bl	8000c18 <__aeabi_d2f>
 800853a:	4602      	mov	r2, r0
 800853c:	4b9a      	ldr	r3, [pc, #616]	; (80087a8 <cppLoop+0xc78>)
 800853e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008540:	2200      	movs	r2, #0
 8008542:	f04f 31ff 	mov.w	r1, #4294967295
 8008546:	4896      	ldr	r0, [pc, #600]	; (80087a0 <cppLoop+0xc70>)
 8008548:	f7f9 ff40 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800854c:	f001 ba8c 	b.w	8009a68 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 8008550:	4897      	ldr	r0, [pc, #604]	; (80087b0 <cppLoop+0xc80>)
 8008552:	f7f9 fe1b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008556:	4603      	mov	r3, r0
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d023      	beq.n	80085ae <cppLoop+0xa7e>
			led.LR(-1, 1);
 8008566:	2201      	movs	r2, #1
 8008568:	f04f 31ff 	mov.w	r1, #4294967295
 800856c:	488c      	ldr	r0, [pc, #560]	; (80087a0 <cppLoop+0xc70>)
 800856e:	f7f9 ff2d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008572:	2064      	movs	r0, #100	; 0x64
 8008574:	f001 fbbc 	bl	8009cf0 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008578:	4b8b      	ldr	r3, [pc, #556]	; (80087a8 <cppLoop+0xc78>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f7f7 fffb 	bl	8000578 <__aeabi_f2d>
 8008582:	a385      	add	r3, pc, #532	; (adr r3, 8008798 <cppLoop+0xc68>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f7f7 fe96 	bl	80002b8 <__aeabi_dsub>
 800858c:	4603      	mov	r3, r0
 800858e:	460c      	mov	r4, r1
 8008590:	4618      	mov	r0, r3
 8008592:	4621      	mov	r1, r4
 8008594:	f7f8 fb40 	bl	8000c18 <__aeabi_d2f>
 8008598:	4602      	mov	r2, r0
 800859a:	4b83      	ldr	r3, [pc, #524]	; (80087a8 <cppLoop+0xc78>)
 800859c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800859e:	2200      	movs	r2, #0
 80085a0:	f04f 31ff 	mov.w	r1, #4294967295
 80085a4:	487e      	ldr	r0, [pc, #504]	; (80087a0 <cppLoop+0xc70>)
 80085a6:	f7f9 ff11 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80085aa:	f001 ba5d 	b.w	8009a68 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 80085ae:	4880      	ldr	r0, [pc, #512]	; (80087b0 <cppLoop+0xc80>)
 80085b0:	f7f9 fdec 	bl	800218c <_ZN8JoyStick8getValueEv>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	bf0c      	ite	eq
 80085ba:	2301      	moveq	r3, #1
 80085bc:	2300      	movne	r3, #0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f001 8251 	beq.w	8009a68 <cppLoop+0x1f38>
			led.LR(-1, 1);
 80085c6:	2201      	movs	r2, #1
 80085c8:	f04f 31ff 	mov.w	r1, #4294967295
 80085cc:	4874      	ldr	r0, [pc, #464]	; (80087a0 <cppLoop+0xc70>)
 80085ce:	f7f9 fefd 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085d6:	f001 fb8b 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80085da:	2300      	movs	r3, #0
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	4b72      	ldr	r3, [pc, #456]	; (80087a8 <cppLoop+0xc78>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	4974      	ldr	r1, [pc, #464]	; (80087b4 <cppLoop+0xc84>)
 80085e4:	4874      	ldr	r0, [pc, #464]	; (80087b8 <cppLoop+0xc88>)
 80085e6:	f7f9 f949 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80085ea:	4b6f      	ldr	r3, [pc, #444]	; (80087a8 <cppLoop+0xc78>)
 80085ec:	edd3 7a00 	vldr	s15, [r3]
 80085f0:	eeb0 0a67 	vmov.f32	s0, s15
 80085f4:	4871      	ldr	r0, [pc, #452]	; (80087bc <cppLoop+0xc8c>)
 80085f6:	f7fb fb3c 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80085fa:	2200      	movs	r2, #0
 80085fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008600:	4867      	ldr	r0, [pc, #412]	; (80087a0 <cppLoop+0xc70>)
 8008602:	f7f9 fee3 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008606:	f001 ba2f 	b.w	8009a68 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 800860a:	2159      	movs	r1, #89	; 0x59
 800860c:	4864      	ldr	r0, [pc, #400]	; (80087a0 <cppLoop+0xc70>)
 800860e:	f7f9 fe21 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008612:	f7f8 fd45 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008616:	2100      	movs	r1, #0
 8008618:	2000      	movs	r0, #0
 800861a:	f7f8 fd51 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800861e:	4b68      	ldr	r3, [pc, #416]	; (80087c0 <cppLoop+0xc90>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f7f7 ffa8 	bl	8000578 <__aeabi_f2d>
 8008628:	4603      	mov	r3, r0
 800862a:	460c      	mov	r4, r1
 800862c:	461a      	mov	r2, r3
 800862e:	4623      	mov	r3, r4
 8008630:	4864      	ldr	r0, [pc, #400]	; (80087c4 <cppLoop+0xc94>)
 8008632:	f7f8 fd6f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008636:	2101      	movs	r1, #1
 8008638:	2000      	movs	r0, #0
 800863a:	f7f8 fd41 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800863e:	4b62      	ldr	r3, [pc, #392]	; (80087c8 <cppLoop+0xc98>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f7f7 ff98 	bl	8000578 <__aeabi_f2d>
 8008648:	4603      	mov	r3, r0
 800864a:	460c      	mov	r4, r1
 800864c:	461a      	mov	r2, r3
 800864e:	4623      	mov	r3, r4
 8008650:	485e      	ldr	r0, [pc, #376]	; (80087cc <cppLoop+0xc9c>)
 8008652:	f7f8 fd5f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008656:	4856      	ldr	r0, [pc, #344]	; (80087b0 <cppLoop+0xc80>)
 8008658:	f7f9 fd98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800865c:	4603      	mov	r3, r0
 800865e:	2b02      	cmp	r3, #2
 8008660:	bf0c      	ite	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	2300      	movne	r3, #0
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	f001 81ff 	beq.w	8009a6c <cppLoop+0x1f3c>
			HAL_Delay(500);
 800866e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008672:	f001 fb3d 	bl	8009cf0 <HAL_Delay>

			led.LR(1, -1);
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	2101      	movs	r1, #1
 800867c:	4848      	ldr	r0, [pc, #288]	; (80087a0 <cppLoop+0xc70>)
 800867e:	f7f9 fea5 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008682:	2101      	movs	r1, #1
 8008684:	484d      	ldr	r0, [pc, #308]	; (80087bc <cppLoop+0xc8c>)
 8008686:	f7fb fd07 	bl	8004098 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800868a:	4b4f      	ldr	r3, [pc, #316]	; (80087c8 <cppLoop+0xc98>)
 800868c:	edd3 7a00 	vldr	s15, [r3]
 8008690:	eeb0 0a67 	vmov.f32	s0, s15
 8008694:	4849      	ldr	r0, [pc, #292]	; (80087bc <cppLoop+0xc8c>)
 8008696:	f7fb faec 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800869a:	4b49      	ldr	r3, [pc, #292]	; (80087c0 <cppLoop+0xc90>)
 800869c:	edd3 7a00 	vldr	s15, [r3]
 80086a0:	eeb0 0a67 	vmov.f32	s0, s15
 80086a4:	4845      	ldr	r0, [pc, #276]	; (80087bc <cppLoop+0xc8c>)
 80086a6:	f7fb faf4 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80086aa:	4b47      	ldr	r3, [pc, #284]	; (80087c8 <cppLoop+0xc98>)
 80086ac:	edd3 7a00 	vldr	s15, [r3]
 80086b0:	eeb0 0a67 	vmov.f32	s0, s15
 80086b4:	4841      	ldr	r0, [pc, #260]	; (80087bc <cppLoop+0xc8c>)
 80086b6:	f7fb fb0c 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80086ba:	4840      	ldr	r0, [pc, #256]	; (80087bc <cppLoop+0xc8c>)
 80086bc:	f7fb fe1a 	bl	80042f4 <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80086c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086c4:	f001 fb14 	bl	8009cf0 <HAL_Delay>

			line_trace.running();
 80086c8:	483c      	ldr	r0, [pc, #240]	; (80087bc <cppLoop+0xc8c>)
 80086ca:	f7fb fd23 	bl	8004114 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80086ce:	4840      	ldr	r0, [pc, #256]	; (80087d0 <cppLoop+0xca0>)
 80086d0:	f7f8 fe58 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295
 80086d8:	2100      	movs	r1, #0
 80086da:	4831      	ldr	r0, [pc, #196]	; (80087a0 <cppLoop+0xc70>)
 80086dc:	f7f9 fe76 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80086e0:	f001 b9c4 	b.w	8009a6c <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 80086e4:	2147      	movs	r1, #71	; 0x47
 80086e6:	482e      	ldr	r0, [pc, #184]	; (80087a0 <cppLoop+0xc70>)
 80086e8:	f7f9 fdb4 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80086ec:	f7f8 fcd8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086f0:	2100      	movs	r1, #0
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7f8 fce4 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80086f8:	4830      	ldr	r0, [pc, #192]	; (80087bc <cppLoop+0xc8c>)
 80086fa:	f7fb fb1a 	bl	8003d32 <_ZN9LineTrace14getMaxVelocityEv>
 80086fe:	ee10 3a10 	vmov	r3, s0
 8008702:	4618      	mov	r0, r3
 8008704:	f7f7 ff38 	bl	8000578 <__aeabi_f2d>
 8008708:	4603      	mov	r3, r0
 800870a:	460c      	mov	r4, r1
 800870c:	461a      	mov	r2, r3
 800870e:	4623      	mov	r3, r4
 8008710:	482c      	ldr	r0, [pc, #176]	; (80087c4 <cppLoop+0xc94>)
 8008712:	f7f8 fcff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008716:	2101      	movs	r1, #1
 8008718:	2000      	movs	r0, #0
 800871a:	f7f8 fcd1 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800871e:	4827      	ldr	r0, [pc, #156]	; (80087bc <cppLoop+0xc8c>)
 8008720:	f7fb fb27 	bl	8003d72 <_ZN9LineTrace14getMinVelocityEv>
 8008724:	ee10 3a10 	vmov	r3, s0
 8008728:	4618      	mov	r0, r3
 800872a:	f7f7 ff25 	bl	8000578 <__aeabi_f2d>
 800872e:	4603      	mov	r3, r0
 8008730:	460c      	mov	r4, r1
 8008732:	461a      	mov	r2, r3
 8008734:	4623      	mov	r3, r4
 8008736:	481d      	ldr	r0, [pc, #116]	; (80087ac <cppLoop+0xc7c>)
 8008738:	f7f8 fcec 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800873c:	481c      	ldr	r0, [pc, #112]	; (80087b0 <cppLoop+0xc80>)
 800873e:	f7f9 fd25 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008742:	4603      	mov	r3, r0
 8008744:	2b08      	cmp	r3, #8
 8008746:	bf0c      	ite	eq
 8008748:	2301      	moveq	r3, #1
 800874a:	2300      	movne	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d042      	beq.n	80087d8 <cppLoop+0xca8>
			led.LR(-1, 1);
 8008752:	2201      	movs	r2, #1
 8008754:	f04f 31ff 	mov.w	r1, #4294967295
 8008758:	4811      	ldr	r0, [pc, #68]	; (80087a0 <cppLoop+0xc70>)
 800875a:	f7f9 fe37 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800875e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008762:	f001 fac5 	bl	8009cf0 <HAL_Delay>

			selector_vel++;
 8008766:	4b1b      	ldr	r3, [pc, #108]	; (80087d4 <cppLoop+0xca4>)
 8008768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800876c:	b29b      	uxth	r3, r3
 800876e:	3301      	adds	r3, #1
 8008770:	b29b      	uxth	r3, r3
 8008772:	b21a      	sxth	r2, r3
 8008774:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <cppLoop+0xca4>)
 8008776:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008778:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <cppLoop+0xca4>)
 800877a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877e:	2b01      	cmp	r3, #1
 8008780:	dd02      	ble.n	8008788 <cppLoop+0xc58>
 8008782:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <cppLoop+0xca4>)
 8008784:	2200      	movs	r2, #0
 8008786:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008788:	2200      	movs	r2, #0
 800878a:	f04f 31ff 	mov.w	r1, #4294967295
 800878e:	4804      	ldr	r0, [pc, #16]	; (80087a0 <cppLoop+0xc70>)
 8008790:	f7f9 fe1c 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008794:	f001 b96c 	b.w	8009a70 <cppLoop+0x1f40>
 8008798:	9999999a 	.word	0x9999999a
 800879c:	3fb99999 	.word	0x3fb99999
 80087a0:	200005d0 	.word	0x200005d0
 80087a4:	08019e10 	.word	0x08019e10
 80087a8:	2004227c 	.word	0x2004227c
 80087ac:	08019e4c 	.word	0x08019e4c
 80087b0:	200005c4 	.word	0x200005c4
 80087b4:	08019e58 	.word	0x08019e58
 80087b8:	08019df0 	.word	0x08019df0
 80087bc:	2001db64 	.word	0x2001db64
 80087c0:	20042284 	.word	0x20042284
 80087c4:	08019e64 	.word	0x08019e64
 80087c8:	20042294 	.word	0x20042294
 80087cc:	08019e1c 	.word	0x08019e1c
 80087d0:	2001db60 	.word	0x2001db60
 80087d4:	20042248 	.word	0x20042248
		else if(joy_stick.getValue() == JOY_R){
 80087d8:	48a5      	ldr	r0, [pc, #660]	; (8008a70 <cppLoop+0xf40>)
 80087da:	f7f9 fcd7 	bl	800218c <_ZN8JoyStick8getValueEv>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b10      	cmp	r3, #16
 80087e2:	bf0c      	ite	eq
 80087e4:	2301      	moveq	r3, #1
 80087e6:	2300      	movne	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d03c      	beq.n	8008868 <cppLoop+0xd38>
			led.LR(-1, 1);
 80087ee:	2201      	movs	r2, #1
 80087f0:	f04f 31ff 	mov.w	r1, #4294967295
 80087f4:	489f      	ldr	r0, [pc, #636]	; (8008a74 <cppLoop+0xf44>)
 80087f6:	f7f9 fde9 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087fa:	2064      	movs	r0, #100	; 0x64
 80087fc:	f001 fa78 	bl	8009cf0 <HAL_Delay>
			if(selector_vel == 0)
 8008800:	4b9d      	ldr	r3, [pc, #628]	; (8008a78 <cppLoop+0xf48>)
 8008802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d113      	bne.n	8008832 <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 800880a:	4b9c      	ldr	r3, [pc, #624]	; (8008a7c <cppLoop+0xf4c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7f7 feb2 	bl	8000578 <__aeabi_f2d>
 8008814:	a394      	add	r3, pc, #592	; (adr r3, 8008a68 <cppLoop+0xf38>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fd4f 	bl	80002bc <__adddf3>
 800881e:	4603      	mov	r3, r0
 8008820:	460c      	mov	r4, r1
 8008822:	4618      	mov	r0, r3
 8008824:	4621      	mov	r1, r4
 8008826:	f7f8 f9f7 	bl	8000c18 <__aeabi_d2f>
 800882a:	4602      	mov	r2, r0
 800882c:	4b93      	ldr	r3, [pc, #588]	; (8008a7c <cppLoop+0xf4c>)
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e012      	b.n	8008858 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008832:	4b93      	ldr	r3, [pc, #588]	; (8008a80 <cppLoop+0xf50>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4618      	mov	r0, r3
 8008838:	f7f7 fe9e 	bl	8000578 <__aeabi_f2d>
 800883c:	a38a      	add	r3, pc, #552	; (adr r3, 8008a68 <cppLoop+0xf38>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fd3b 	bl	80002bc <__adddf3>
 8008846:	4603      	mov	r3, r0
 8008848:	460c      	mov	r4, r1
 800884a:	4618      	mov	r0, r3
 800884c:	4621      	mov	r1, r4
 800884e:	f7f8 f9e3 	bl	8000c18 <__aeabi_d2f>
 8008852:	4602      	mov	r2, r0
 8008854:	4b8a      	ldr	r3, [pc, #552]	; (8008a80 <cppLoop+0xf50>)
 8008856:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008858:	2200      	movs	r2, #0
 800885a:	f04f 31ff 	mov.w	r1, #4294967295
 800885e:	4885      	ldr	r0, [pc, #532]	; (8008a74 <cppLoop+0xf44>)
 8008860:	f7f9 fdb4 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008864:	f001 b904 	b.w	8009a70 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 8008868:	4881      	ldr	r0, [pc, #516]	; (8008a70 <cppLoop+0xf40>)
 800886a:	f7f9 fc8f 	bl	800218c <_ZN8JoyStick8getValueEv>
 800886e:	4603      	mov	r3, r0
 8008870:	2b01      	cmp	r3, #1
 8008872:	bf0c      	ite	eq
 8008874:	2301      	moveq	r3, #1
 8008876:	2300      	movne	r3, #0
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d03c      	beq.n	80088f8 <cppLoop+0xdc8>
			led.LR(-1, 1);
 800887e:	2201      	movs	r2, #1
 8008880:	f04f 31ff 	mov.w	r1, #4294967295
 8008884:	487b      	ldr	r0, [pc, #492]	; (8008a74 <cppLoop+0xf44>)
 8008886:	f7f9 fda1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800888a:	2064      	movs	r0, #100	; 0x64
 800888c:	f001 fa30 	bl	8009cf0 <HAL_Delay>
			if(selector_vel == 0)
 8008890:	4b79      	ldr	r3, [pc, #484]	; (8008a78 <cppLoop+0xf48>)
 8008892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d113      	bne.n	80088c2 <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 800889a:	4b78      	ldr	r3, [pc, #480]	; (8008a7c <cppLoop+0xf4c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7f7 fe6a 	bl	8000578 <__aeabi_f2d>
 80088a4:	a370      	add	r3, pc, #448	; (adr r3, 8008a68 <cppLoop+0xf38>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 fd05 	bl	80002b8 <__aeabi_dsub>
 80088ae:	4603      	mov	r3, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	4618      	mov	r0, r3
 80088b4:	4621      	mov	r1, r4
 80088b6:	f7f8 f9af 	bl	8000c18 <__aeabi_d2f>
 80088ba:	4602      	mov	r2, r0
 80088bc:	4b6f      	ldr	r3, [pc, #444]	; (8008a7c <cppLoop+0xf4c>)
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	e012      	b.n	80088e8 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 80088c2:	4b6f      	ldr	r3, [pc, #444]	; (8008a80 <cppLoop+0xf50>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7f7 fe56 	bl	8000578 <__aeabi_f2d>
 80088cc:	a366      	add	r3, pc, #408	; (adr r3, 8008a68 <cppLoop+0xf38>)
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fcf1 	bl	80002b8 <__aeabi_dsub>
 80088d6:	4603      	mov	r3, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	4618      	mov	r0, r3
 80088dc:	4621      	mov	r1, r4
 80088de:	f7f8 f99b 	bl	8000c18 <__aeabi_d2f>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b66      	ldr	r3, [pc, #408]	; (8008a80 <cppLoop+0xf50>)
 80088e6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088e8:	2200      	movs	r2, #0
 80088ea:	f04f 31ff 	mov.w	r1, #4294967295
 80088ee:	4861      	ldr	r0, [pc, #388]	; (8008a74 <cppLoop+0xf44>)
 80088f0:	f7f9 fd6c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80088f4:	f001 b8bc 	b.w	8009a70 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 80088f8:	485d      	ldr	r0, [pc, #372]	; (8008a70 <cppLoop+0xf40>)
 80088fa:	f7f9 fc47 	bl	800218c <_ZN8JoyStick8getValueEv>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b02      	cmp	r3, #2
 8008902:	bf0c      	ite	eq
 8008904:	2301      	moveq	r3, #1
 8008906:	2300      	movne	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	f001 80b0 	beq.w	8009a70 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008910:	2201      	movs	r2, #1
 8008912:	f04f 31ff 	mov.w	r1, #4294967295
 8008916:	4857      	ldr	r0, [pc, #348]	; (8008a74 <cppLoop+0xf44>)
 8008918:	f7f9 fd58 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800891c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008920:	f001 f9e6 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008924:	2300      	movs	r3, #0
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4b54      	ldr	r3, [pc, #336]	; (8008a7c <cppLoop+0xf4c>)
 800892a:	2201      	movs	r2, #1
 800892c:	4955      	ldr	r1, [pc, #340]	; (8008a84 <cppLoop+0xf54>)
 800892e:	4856      	ldr	r0, [pc, #344]	; (8008a88 <cppLoop+0xf58>)
 8008930:	f7f8 ffa4 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008934:	2300      	movs	r3, #0
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4b51      	ldr	r3, [pc, #324]	; (8008a80 <cppLoop+0xf50>)
 800893a:	2201      	movs	r2, #1
 800893c:	4953      	ldr	r1, [pc, #332]	; (8008a8c <cppLoop+0xf5c>)
 800893e:	4852      	ldr	r0, [pc, #328]	; (8008a88 <cppLoop+0xf58>)
 8008940:	f7f8 ff9c 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008944:	4b4d      	ldr	r3, [pc, #308]	; (8008a7c <cppLoop+0xf4c>)
 8008946:	edd3 7a00 	vldr	s15, [r3]
 800894a:	eeb0 0a67 	vmov.f32	s0, s15
 800894e:	4850      	ldr	r0, [pc, #320]	; (8008a90 <cppLoop+0xf60>)
 8008950:	f7fb f99f 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008954:	4b4a      	ldr	r3, [pc, #296]	; (8008a80 <cppLoop+0xf50>)
 8008956:	edd3 7a00 	vldr	s15, [r3]
 800895a:	eeb0 0a67 	vmov.f32	s0, s15
 800895e:	484c      	ldr	r0, [pc, #304]	; (8008a90 <cppLoop+0xf60>)
 8008960:	f7fb f9b7 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008964:	2200      	movs	r2, #0
 8008966:	f04f 31ff 	mov.w	r1, #4294967295
 800896a:	4842      	ldr	r0, [pc, #264]	; (8008a74 <cppLoop+0xf44>)
 800896c:	f7f9 fd2e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008970:	f001 b87e 	b.w	8009a70 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 8008974:	214d      	movs	r1, #77	; 0x4d
 8008976:	483f      	ldr	r0, [pc, #252]	; (8008a74 <cppLoop+0xf44>)
 8008978:	f7f9 fc6c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800897c:	f7f8 fb90 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008980:	2100      	movs	r1, #0
 8008982:	2000      	movs	r0, #0
 8008984:	f7f8 fb9c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008988:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <cppLoop+0xf64>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f7f7 fdf3 	bl	8000578 <__aeabi_f2d>
 8008992:	4603      	mov	r3, r0
 8008994:	460c      	mov	r4, r1
 8008996:	461a      	mov	r2, r3
 8008998:	4623      	mov	r3, r4
 800899a:	483f      	ldr	r0, [pc, #252]	; (8008a98 <cppLoop+0xf68>)
 800899c:	f7f8 fbba 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089a0:	2101      	movs	r1, #1
 80089a2:	2000      	movs	r0, #0
 80089a4:	f7f8 fb8c 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80089a8:	4b3c      	ldr	r3, [pc, #240]	; (8008a9c <cppLoop+0xf6c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7f7 fde3 	bl	8000578 <__aeabi_f2d>
 80089b2:	4603      	mov	r3, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	461a      	mov	r2, r3
 80089b8:	4623      	mov	r3, r4
 80089ba:	4839      	ldr	r0, [pc, #228]	; (8008aa0 <cppLoop+0xf70>)
 80089bc:	f7f8 fbaa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80089c0:	482b      	ldr	r0, [pc, #172]	; (8008a70 <cppLoop+0xf40>)
 80089c2:	f7f9 fbe3 	bl	800218c <_ZN8JoyStick8getValueEv>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	bf0c      	ite	eq
 80089cc:	2301      	moveq	r3, #1
 80089ce:	2300      	movne	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f001 804e 	beq.w	8009a74 <cppLoop+0x1f44>
			HAL_Delay(500);
 80089d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80089dc:	f001 f988 	bl	8009cf0 <HAL_Delay>

			led.LR(1, -1);
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	2101      	movs	r1, #1
 80089e6:	4823      	ldr	r0, [pc, #140]	; (8008a74 <cppLoop+0xf44>)
 80089e8:	f7f9 fcf0 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80089ec:	4b2d      	ldr	r3, [pc, #180]	; (8008aa4 <cppLoop+0xf74>)
 80089ee:	edd3 7a00 	vldr	s15, [r3]
 80089f2:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <cppLoop+0xf78>)
 80089f4:	ed93 7a00 	vldr	s14, [r3]
 80089f8:	4b2c      	ldr	r3, [pc, #176]	; (8008aac <cppLoop+0xf7c>)
 80089fa:	edd3 6a00 	vldr	s13, [r3]
 80089fe:	eeb0 1a66 	vmov.f32	s2, s13
 8008a02:	eef0 0a47 	vmov.f32	s1, s14
 8008a06:	eeb0 0a67 	vmov.f32	s0, s15
 8008a0a:	4821      	ldr	r0, [pc, #132]	; (8008a90 <cppLoop+0xf60>)
 8008a0c:	f7fb f896 	bl	8003b3c <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008a10:	2102      	movs	r1, #2
 8008a12:	481f      	ldr	r0, [pc, #124]	; (8008a90 <cppLoop+0xf60>)
 8008a14:	f7fb fb40 	bl	8004098 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008a18:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <cppLoop+0xf6c>)
 8008a1a:	edd3 7a00 	vldr	s15, [r3]
 8008a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a22:	481b      	ldr	r0, [pc, #108]	; (8008a90 <cppLoop+0xf60>)
 8008a24:	f7fb f925 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008a28:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <cppLoop+0xf64>)
 8008a2a:	edd3 7a00 	vldr	s15, [r3]
 8008a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a32:	4817      	ldr	r0, [pc, #92]	; (8008a90 <cppLoop+0xf60>)
 8008a34:	f7fb f93d 	bl	8003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008a38:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <cppLoop+0xf6c>)
 8008a3a:	edd3 7a00 	vldr	s15, [r3]
 8008a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a42:	4813      	ldr	r0, [pc, #76]	; (8008a90 <cppLoop+0xf60>)
 8008a44:	f7fb f955 	bl	8003cf2 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008a48:	4811      	ldr	r0, [pc, #68]	; (8008a90 <cppLoop+0xf60>)
 8008a4a:	f7fb fc53 	bl	80042f4 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008a4e:	4810      	ldr	r0, [pc, #64]	; (8008a90 <cppLoop+0xf60>)
 8008a50:	f7fb fb60 	bl	8004114 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4806      	ldr	r0, [pc, #24]	; (8008a74 <cppLoop+0xf44>)
 8008a5c:	f7f9 fcb6 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008a60:	f001 b808 	b.w	8009a74 <cppLoop+0x1f44>
 8008a64:	f3af 8000 	nop.w
 8008a68:	9999999a 	.word	0x9999999a
 8008a6c:	3fb99999 	.word	0x3fb99999
 8008a70:	200005c4 	.word	0x200005c4
 8008a74:	200005d0 	.word	0x200005d0
 8008a78:	20042248 	.word	0x20042248
 8008a7c:	20042284 	.word	0x20042284
 8008a80:	20042294 	.word	0x20042294
 8008a84:	08019e70 	.word	0x08019e70
 8008a88:	08019df0 	.word	0x08019df0
 8008a8c:	08019e7c 	.word	0x08019e7c
 8008a90:	2001db64 	.word	0x2001db64
 8008a94:	2004228c 	.word	0x2004228c
 8008a98:	08019e88 	.word	0x08019e88
 8008a9c:	2004229c 	.word	0x2004229c
 8008aa0:	08019e1c 	.word	0x08019e1c
 8008aa4:	2004224c 	.word	0x2004224c
 8008aa8:	20042254 	.word	0x20042254
 8008aac:	2004225c 	.word	0x2004225c

	case 6:
		led.fullColor('R');
 8008ab0:	2152      	movs	r1, #82	; 0x52
 8008ab2:	4895      	ldr	r0, [pc, #596]	; (8008d08 <cppLoop+0x11d8>)
 8008ab4:	f7f9 fbce 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ab8:	f7f8 faf2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008abc:	2100      	movs	r1, #0
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f7f8 fafe 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008ac4:	4891      	ldr	r0, [pc, #580]	; (8008d0c <cppLoop+0x11dc>)
 8008ac6:	f7fb f944 	bl	8003d52 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008aca:	ee10 3a10 	vmov	r3, s0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f7 fd52 	bl	8000578 <__aeabi_f2d>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4623      	mov	r3, r4
 8008adc:	488c      	ldr	r0, [pc, #560]	; (8008d10 <cppLoop+0x11e0>)
 8008ade:	f7f8 fb19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7f8 faeb 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008aea:	4888      	ldr	r0, [pc, #544]	; (8008d0c <cppLoop+0x11dc>)
 8008aec:	f7fb f951 	bl	8003d92 <_ZN9LineTrace15getMinVelocity2Ev>
 8008af0:	ee10 3a10 	vmov	r3, s0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f7 fd3f 	bl	8000578 <__aeabi_f2d>
 8008afa:	4603      	mov	r3, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	461a      	mov	r2, r3
 8008b00:	4623      	mov	r3, r4
 8008b02:	4884      	ldr	r0, [pc, #528]	; (8008d14 <cppLoop+0x11e4>)
 8008b04:	f7f8 fb06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b08:	4883      	ldr	r0, [pc, #524]	; (8008d18 <cppLoop+0x11e8>)
 8008b0a:	f7f9 fb3f 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	bf0c      	ite	eq
 8008b14:	2301      	moveq	r3, #1
 8008b16:	2300      	movne	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d022      	beq.n	8008b64 <cppLoop+0x1034>
			led.LR(-1, 1);
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f04f 31ff 	mov.w	r1, #4294967295
 8008b24:	4878      	ldr	r0, [pc, #480]	; (8008d08 <cppLoop+0x11d8>)
 8008b26:	f7f9 fc51 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b2e:	f001 f8df 	bl	8009cf0 <HAL_Delay>

			selector_vel2++;
 8008b32:	4b7a      	ldr	r3, [pc, #488]	; (8008d1c <cppLoop+0x11ec>)
 8008b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	b21a      	sxth	r2, r3
 8008b40:	4b76      	ldr	r3, [pc, #472]	; (8008d1c <cppLoop+0x11ec>)
 8008b42:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008b44:	4b75      	ldr	r3, [pc, #468]	; (8008d1c <cppLoop+0x11ec>)
 8008b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	dd02      	ble.n	8008b54 <cppLoop+0x1024>
 8008b4e:	4b73      	ldr	r3, [pc, #460]	; (8008d1c <cppLoop+0x11ec>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b54:	2200      	movs	r2, #0
 8008b56:	f04f 31ff 	mov.w	r1, #4294967295
 8008b5a:	486b      	ldr	r0, [pc, #428]	; (8008d08 <cppLoop+0x11d8>)
 8008b5c:	f7f9 fc36 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008b60:	f000 bf8a 	b.w	8009a78 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008b64:	486c      	ldr	r0, [pc, #432]	; (8008d18 <cppLoop+0x11e8>)
 8008b66:	f7f9 fb11 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d03c      	beq.n	8008bf4 <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b80:	4861      	ldr	r0, [pc, #388]	; (8008d08 <cppLoop+0x11d8>)
 8008b82:	f7f9 fc23 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b86:	2064      	movs	r0, #100	; 0x64
 8008b88:	f001 f8b2 	bl	8009cf0 <HAL_Delay>
			if(selector_vel2 == 0)
 8008b8c:	4b63      	ldr	r3, [pc, #396]	; (8008d1c <cppLoop+0x11ec>)
 8008b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d113      	bne.n	8008bbe <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008b96:	4b62      	ldr	r3, [pc, #392]	; (8008d20 <cppLoop+0x11f0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7f7 fcec 	bl	8000578 <__aeabi_f2d>
 8008ba0:	a357      	add	r3, pc, #348	; (adr r3, 8008d00 <cppLoop+0x11d0>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fb89 	bl	80002bc <__adddf3>
 8008baa:	4603      	mov	r3, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f7f8 f831 	bl	8000c18 <__aeabi_d2f>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b59      	ldr	r3, [pc, #356]	; (8008d20 <cppLoop+0x11f0>)
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e012      	b.n	8008be4 <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008bbe:	4b59      	ldr	r3, [pc, #356]	; (8008d24 <cppLoop+0x11f4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f7 fcd8 	bl	8000578 <__aeabi_f2d>
 8008bc8:	a34d      	add	r3, pc, #308	; (adr r3, 8008d00 <cppLoop+0x11d0>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb75 	bl	80002bc <__adddf3>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7f8 f81d 	bl	8000c18 <__aeabi_d2f>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b50      	ldr	r3, [pc, #320]	; (8008d24 <cppLoop+0x11f4>)
 8008be2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008be4:	2200      	movs	r2, #0
 8008be6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bea:	4847      	ldr	r0, [pc, #284]	; (8008d08 <cppLoop+0x11d8>)
 8008bec:	f7f9 fbee 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008bf0:	f000 bf42 	b.w	8009a78 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008bf4:	4848      	ldr	r0, [pc, #288]	; (8008d18 <cppLoop+0x11e8>)
 8008bf6:	f7f9 fac9 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	bf0c      	ite	eq
 8008c00:	2301      	moveq	r3, #1
 8008c02:	2300      	movne	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d03c      	beq.n	8008c84 <cppLoop+0x1154>
			led.LR(-1, 1);
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c10:	483d      	ldr	r0, [pc, #244]	; (8008d08 <cppLoop+0x11d8>)
 8008c12:	f7f9 fbdb 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c16:	2064      	movs	r0, #100	; 0x64
 8008c18:	f001 f86a 	bl	8009cf0 <HAL_Delay>
			if(selector_vel2 == 0)
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <cppLoop+0x11ec>)
 8008c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d113      	bne.n	8008c4e <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008c26:	4b3e      	ldr	r3, [pc, #248]	; (8008d20 <cppLoop+0x11f0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7f7 fca4 	bl	8000578 <__aeabi_f2d>
 8008c30:	a333      	add	r3, pc, #204	; (adr r3, 8008d00 <cppLoop+0x11d0>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f7f7 fb3f 	bl	80002b8 <__aeabi_dsub>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	4621      	mov	r1, r4
 8008c42:	f7f7 ffe9 	bl	8000c18 <__aeabi_d2f>
 8008c46:	4602      	mov	r2, r0
 8008c48:	4b35      	ldr	r3, [pc, #212]	; (8008d20 <cppLoop+0x11f0>)
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	e012      	b.n	8008c74 <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008c4e:	4b35      	ldr	r3, [pc, #212]	; (8008d24 <cppLoop+0x11f4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7f7 fc90 	bl	8000578 <__aeabi_f2d>
 8008c58:	a329      	add	r3, pc, #164	; (adr r3, 8008d00 <cppLoop+0x11d0>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fb2b 	bl	80002b8 <__aeabi_dsub>
 8008c62:	4603      	mov	r3, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	4618      	mov	r0, r3
 8008c68:	4621      	mov	r1, r4
 8008c6a:	f7f7 ffd5 	bl	8000c18 <__aeabi_d2f>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b2c      	ldr	r3, [pc, #176]	; (8008d24 <cppLoop+0x11f4>)
 8008c72:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c74:	2200      	movs	r2, #0
 8008c76:	f04f 31ff 	mov.w	r1, #4294967295
 8008c7a:	4823      	ldr	r0, [pc, #140]	; (8008d08 <cppLoop+0x11d8>)
 8008c7c:	f7f9 fba6 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008c80:	f000 befa 	b.w	8009a78 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 8008c84:	4824      	ldr	r0, [pc, #144]	; (8008d18 <cppLoop+0x11e8>)
 8008c86:	f7f9 fa81 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 86ee 	beq.w	8009a78 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca2:	4819      	ldr	r0, [pc, #100]	; (8008d08 <cppLoop+0x11d8>)
 8008ca4:	f7f9 fb92 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ca8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cac:	f001 f820 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <cppLoop+0x11f0>)
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	491b      	ldr	r1, [pc, #108]	; (8008d28 <cppLoop+0x11f8>)
 8008cba:	481c      	ldr	r0, [pc, #112]	; (8008d2c <cppLoop+0x11fc>)
 8008cbc:	f7f8 fdde 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4b17      	ldr	r3, [pc, #92]	; (8008d24 <cppLoop+0x11f4>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4919      	ldr	r1, [pc, #100]	; (8008d30 <cppLoop+0x1200>)
 8008cca:	4818      	ldr	r0, [pc, #96]	; (8008d2c <cppLoop+0x11fc>)
 8008ccc:	f7f8 fdd6 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008cd0:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <cppLoop+0x11f0>)
 8008cd2:	edd3 7a00 	vldr	s15, [r3]
 8008cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008cda:	480c      	ldr	r0, [pc, #48]	; (8008d0c <cppLoop+0x11dc>)
 8008cdc:	f7fa ffe9 	bl	8003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008ce0:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <cppLoop+0x11f4>)
 8008ce2:	edd3 7a00 	vldr	s15, [r3]
 8008ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8008cea:	4808      	ldr	r0, [pc, #32]	; (8008d0c <cppLoop+0x11dc>)
 8008cec:	f7fb f801 	bl	8003cf2 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf6:	4804      	ldr	r0, [pc, #16]	; (8008d08 <cppLoop+0x11d8>)
 8008cf8:	f7f9 fb68 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008cfc:	f000 bebc 	b.w	8009a78 <cppLoop+0x1f48>
 8008d00:	9999999a 	.word	0x9999999a
 8008d04:	3fb99999 	.word	0x3fb99999
 8008d08:	200005d0 	.word	0x200005d0
 8008d0c:	2001db64 	.word	0x2001db64
 8008d10:	08019e88 	.word	0x08019e88
 8008d14:	08019e4c 	.word	0x08019e4c
 8008d18:	200005c4 	.word	0x200005c4
 8008d1c:	2004224a 	.word	0x2004224a
 8008d20:	2004228c 	.word	0x2004228c
 8008d24:	2004229c 	.word	0x2004229c
 8008d28:	08019e94 	.word	0x08019e94
 8008d2c:	08019df0 	.word	0x08019df0
 8008d30:	08019ea0 	.word	0x08019ea0

	case 7:
		led.fullColor('W');
 8008d34:	2157      	movs	r1, #87	; 0x57
 8008d36:	48c2      	ldr	r0, [pc, #776]	; (8009040 <cppLoop+0x1510>)
 8008d38:	f7f9 fa8c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d3c:	f7f8 f9b0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d40:	2100      	movs	r1, #0
 8008d42:	2000      	movs	r0, #0
 8008d44:	f7f8 f9bc 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008d48:	48be      	ldr	r0, [pc, #760]	; (8009044 <cppLoop+0x1514>)
 8008d4a:	f7fb f866 	bl	8003e1a <_ZN9LineTrace9getMaxAccEv>
 8008d4e:	ee10 3a10 	vmov	r3, s0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fc10 	bl	8000578 <__aeabi_f2d>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4623      	mov	r3, r4
 8008d60:	48b9      	ldr	r0, [pc, #740]	; (8009048 <cppLoop+0x1518>)
 8008d62:	f7f8 f9d7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d66:	2101      	movs	r1, #1
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f7f8 f9a9 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008d6e:	48b5      	ldr	r0, [pc, #724]	; (8009044 <cppLoop+0x1514>)
 8008d70:	f7fb f889 	bl	8003e86 <_ZN9LineTrace9getMaxDecEv>
 8008d74:	ee10 3a10 	vmov	r3, s0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7f7 fbfd 	bl	8000578 <__aeabi_f2d>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	461a      	mov	r2, r3
 8008d84:	4623      	mov	r3, r4
 8008d86:	48b1      	ldr	r0, [pc, #708]	; (800904c <cppLoop+0x151c>)
 8008d88:	f7f8 f9c4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d8c:	48b0      	ldr	r0, [pc, #704]	; (8009050 <cppLoop+0x1520>)
 8008d8e:	f7f9 f9fd 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	bf0c      	ite	eq
 8008d98:	2301      	moveq	r3, #1
 8008d9a:	2300      	movne	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d022      	beq.n	8008de8 <cppLoop+0x12b8>
			led.LR(-1, 1);
 8008da2:	2201      	movs	r2, #1
 8008da4:	f04f 31ff 	mov.w	r1, #4294967295
 8008da8:	48a5      	ldr	r0, [pc, #660]	; (8009040 <cppLoop+0x1510>)
 8008daa:	f7f9 fb0f 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008dae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008db2:	f000 ff9d 	bl	8009cf0 <HAL_Delay>

			selector_acc++;
 8008db6:	4ba7      	ldr	r3, [pc, #668]	; (8009054 <cppLoop+0x1524>)
 8008db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	b21a      	sxth	r2, r3
 8008dc4:	4ba3      	ldr	r3, [pc, #652]	; (8009054 <cppLoop+0x1524>)
 8008dc6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008dc8:	4ba2      	ldr	r3, [pc, #648]	; (8009054 <cppLoop+0x1524>)
 8008dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	dd02      	ble.n	8008dd8 <cppLoop+0x12a8>
 8008dd2:	4ba0      	ldr	r3, [pc, #640]	; (8009054 <cppLoop+0x1524>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f04f 31ff 	mov.w	r1, #4294967295
 8008dde:	4898      	ldr	r0, [pc, #608]	; (8009040 <cppLoop+0x1510>)
 8008de0:	f7f9 faf4 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008de4:	f000 be4a 	b.w	8009a7c <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 8008de8:	4899      	ldr	r0, [pc, #612]	; (8009050 <cppLoop+0x1520>)
 8008dea:	f7f9 f9cf 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d03c      	beq.n	8008e78 <cppLoop+0x1348>
			led.LR(-1, 1);
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f04f 31ff 	mov.w	r1, #4294967295
 8008e04:	488e      	ldr	r0, [pc, #568]	; (8009040 <cppLoop+0x1510>)
 8008e06:	f7f9 fae1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e0a:	2064      	movs	r0, #100	; 0x64
 8008e0c:	f000 ff70 	bl	8009cf0 <HAL_Delay>
			if(selector_acc == 0){
 8008e10:	4b90      	ldr	r3, [pc, #576]	; (8009054 <cppLoop+0x1524>)
 8008e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d113      	bne.n	8008e42 <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 8008e1a:	4b8f      	ldr	r3, [pc, #572]	; (8009058 <cppLoop+0x1528>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f7 fbaa 	bl	8000578 <__aeabi_f2d>
 8008e24:	a384      	add	r3, pc, #528	; (adr r3, 8009038 <cppLoop+0x1508>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fa47 	bl	80002bc <__adddf3>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	4618      	mov	r0, r3
 8008e34:	4621      	mov	r1, r4
 8008e36:	f7f7 feef 	bl	8000c18 <__aeabi_d2f>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	4b86      	ldr	r3, [pc, #536]	; (8009058 <cppLoop+0x1528>)
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	e012      	b.n	8008e68 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 8008e42:	4b86      	ldr	r3, [pc, #536]	; (800905c <cppLoop+0x152c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fb96 	bl	8000578 <__aeabi_f2d>
 8008e4c:	a37a      	add	r3, pc, #488	; (adr r3, 8009038 <cppLoop+0x1508>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa33 	bl	80002bc <__adddf3>
 8008e56:	4603      	mov	r3, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	f7f7 fedb 	bl	8000c18 <__aeabi_d2f>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b7d      	ldr	r3, [pc, #500]	; (800905c <cppLoop+0x152c>)
 8008e66:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e6e:	4874      	ldr	r0, [pc, #464]	; (8009040 <cppLoop+0x1510>)
 8008e70:	f7f9 faac 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008e74:	f000 be02 	b.w	8009a7c <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 8008e78:	4875      	ldr	r0, [pc, #468]	; (8009050 <cppLoop+0x1520>)
 8008e7a:	f7f9 f987 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	bf0c      	ite	eq
 8008e84:	2301      	moveq	r3, #1
 8008e86:	2300      	movne	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d03c      	beq.n	8008f08 <cppLoop+0x13d8>
			led.LR(-1, 1);
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f04f 31ff 	mov.w	r1, #4294967295
 8008e94:	486a      	ldr	r0, [pc, #424]	; (8009040 <cppLoop+0x1510>)
 8008e96:	f7f9 fa99 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e9a:	2064      	movs	r0, #100	; 0x64
 8008e9c:	f000 ff28 	bl	8009cf0 <HAL_Delay>
			if(selector_acc == 0){
 8008ea0:	4b6c      	ldr	r3, [pc, #432]	; (8009054 <cppLoop+0x1524>)
 8008ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d113      	bne.n	8008ed2 <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 8008eaa:	4b6b      	ldr	r3, [pc, #428]	; (8009058 <cppLoop+0x1528>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f7 fb62 	bl	8000578 <__aeabi_f2d>
 8008eb4:	a360      	add	r3, pc, #384	; (adr r3, 8009038 <cppLoop+0x1508>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 f9fd 	bl	80002b8 <__aeabi_dsub>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7f7 fea7 	bl	8000c18 <__aeabi_d2f>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4b62      	ldr	r3, [pc, #392]	; (8009058 <cppLoop+0x1528>)
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e012      	b.n	8008ef8 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 8008ed2:	4b62      	ldr	r3, [pc, #392]	; (800905c <cppLoop+0x152c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f7 fb4e 	bl	8000578 <__aeabi_f2d>
 8008edc:	a356      	add	r3, pc, #344	; (adr r3, 8009038 <cppLoop+0x1508>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9e9 	bl	80002b8 <__aeabi_dsub>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	4618      	mov	r0, r3
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7f7 fe93 	bl	8000c18 <__aeabi_d2f>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b59      	ldr	r3, [pc, #356]	; (800905c <cppLoop+0x152c>)
 8008ef6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f04f 31ff 	mov.w	r1, #4294967295
 8008efe:	4850      	ldr	r0, [pc, #320]	; (8009040 <cppLoop+0x1510>)
 8008f00:	f7f9 fa64 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f04:	f000 bdba 	b.w	8009a7c <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 8008f08:	4851      	ldr	r0, [pc, #324]	; (8009050 <cppLoop+0x1520>)
 8008f0a:	f7f9 f93f 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	bf0c      	ite	eq
 8008f14:	2301      	moveq	r3, #1
 8008f16:	2300      	movne	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 85ae 	beq.w	8009a7c <cppLoop+0x1f4c>
			led.LR(-1, 1);
 8008f20:	2201      	movs	r2, #1
 8008f22:	f04f 31ff 	mov.w	r1, #4294967295
 8008f26:	4846      	ldr	r0, [pc, #280]	; (8009040 <cppLoop+0x1510>)
 8008f28:	f7f9 fa50 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f30:	f000 fede 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008f34:	2300      	movs	r3, #0
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4b47      	ldr	r3, [pc, #284]	; (8009058 <cppLoop+0x1528>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	4948      	ldr	r1, [pc, #288]	; (8009060 <cppLoop+0x1530>)
 8008f3e:	4849      	ldr	r0, [pc, #292]	; (8009064 <cppLoop+0x1534>)
 8008f40:	f7f8 fc9c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008f44:	2300      	movs	r3, #0
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	4b44      	ldr	r3, [pc, #272]	; (800905c <cppLoop+0x152c>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	4946      	ldr	r1, [pc, #280]	; (8009068 <cppLoop+0x1538>)
 8008f4e:	4845      	ldr	r0, [pc, #276]	; (8009064 <cppLoop+0x1534>)
 8008f50:	f7f8 fc94 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008f54:	4b40      	ldr	r3, [pc, #256]	; (8009058 <cppLoop+0x1528>)
 8008f56:	edd3 7a00 	vldr	s15, [r3]
 8008f5a:	4b40      	ldr	r3, [pc, #256]	; (800905c <cppLoop+0x152c>)
 8008f5c:	ed93 7a00 	vldr	s14, [r3]
 8008f60:	eef0 0a47 	vmov.f32	s1, s14
 8008f64:	eeb0 0a67 	vmov.f32	s0, s15
 8008f68:	4836      	ldr	r0, [pc, #216]	; (8009044 <cppLoop+0x1514>)
 8008f6a:	f7fa ff22 	bl	8003db2 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f04f 31ff 	mov.w	r1, #4294967295
 8008f74:	4832      	ldr	r0, [pc, #200]	; (8009040 <cppLoop+0x1510>)
 8008f76:	f7f9 fa29 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f7a:	f000 bd7f 	b.w	8009a7c <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 8008f7e:	2157      	movs	r1, #87	; 0x57
 8008f80:	482f      	ldr	r0, [pc, #188]	; (8009040 <cppLoop+0x1510>)
 8008f82:	f7f9 f967 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f86:	f7f8 f88b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f7f8 f897 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008f92:	482c      	ldr	r0, [pc, #176]	; (8009044 <cppLoop+0x1514>)
 8008f94:	f7fa ff65 	bl	8003e62 <_ZN9LineTrace10getMaxAcc2Ev>
 8008f98:	ee10 3a10 	vmov	r3, s0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f7 faeb 	bl	8000578 <__aeabi_f2d>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	4623      	mov	r3, r4
 8008faa:	4830      	ldr	r0, [pc, #192]	; (800906c <cppLoop+0x153c>)
 8008fac:	f7f8 f8b2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	f7f8 f884 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008fb8:	4822      	ldr	r0, [pc, #136]	; (8009044 <cppLoop+0x1514>)
 8008fba:	f7fa ff40 	bl	8003e3e <_ZN9LineTrace10getMaxDec2Ev>
 8008fbe:	ee10 3a10 	vmov	r3, s0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7f7 fad8 	bl	8000578 <__aeabi_f2d>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4623      	mov	r3, r4
 8008fd0:	4827      	ldr	r0, [pc, #156]	; (8009070 <cppLoop+0x1540>)
 8008fd2:	f7f8 f89f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fd6:	481e      	ldr	r0, [pc, #120]	; (8009050 <cppLoop+0x1520>)
 8008fd8:	f7f9 f8d8 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	bf0c      	ite	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d045      	beq.n	8009078 <cppLoop+0x1548>
			led.LR(-1, 1);
 8008fec:	2201      	movs	r2, #1
 8008fee:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff2:	4813      	ldr	r0, [pc, #76]	; (8009040 <cppLoop+0x1510>)
 8008ff4:	f7f9 f9ea 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ff8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ffc:	f000 fe78 	bl	8009cf0 <HAL_Delay>

			selector_acc2++;
 8009000:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <cppLoop+0x1544>)
 8009002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009006:	b29b      	uxth	r3, r3
 8009008:	3301      	adds	r3, #1
 800900a:	b29b      	uxth	r3, r3
 800900c:	b21a      	sxth	r2, r3
 800900e:	4b19      	ldr	r3, [pc, #100]	; (8009074 <cppLoop+0x1544>)
 8009010:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8009012:	4b18      	ldr	r3, [pc, #96]	; (8009074 <cppLoop+0x1544>)
 8009014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009018:	2b01      	cmp	r3, #1
 800901a:	dd02      	ble.n	8009022 <cppLoop+0x14f2>
 800901c:	4b15      	ldr	r3, [pc, #84]	; (8009074 <cppLoop+0x1544>)
 800901e:	2200      	movs	r2, #0
 8009020:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009022:	2200      	movs	r2, #0
 8009024:	f04f 31ff 	mov.w	r1, #4294967295
 8009028:	4805      	ldr	r0, [pc, #20]	; (8009040 <cppLoop+0x1510>)
 800902a:	f7f9 f9cf 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800902e:	f000 bd27 	b.w	8009a80 <cppLoop+0x1f50>
 8009032:	bf00      	nop
 8009034:	f3af 8000 	nop.w
 8009038:	9999999a 	.word	0x9999999a
 800903c:	3fb99999 	.word	0x3fb99999
 8009040:	200005d0 	.word	0x200005d0
 8009044:	2001db64 	.word	0x2001db64
 8009048:	08019eac 	.word	0x08019eac
 800904c:	08019eb8 	.word	0x08019eb8
 8009050:	200005c4 	.word	0x200005c4
 8009054:	20042244 	.word	0x20042244
 8009058:	200422a4 	.word	0x200422a4
 800905c:	200422ac 	.word	0x200422ac
 8009060:	08019ec4 	.word	0x08019ec4
 8009064:	08019df0 	.word	0x08019df0
 8009068:	08019ecc 	.word	0x08019ecc
 800906c:	08019ed4 	.word	0x08019ed4
 8009070:	08019ee0 	.word	0x08019ee0
 8009074:	20042246 	.word	0x20042246
		else if(joy_stick.getValue() == JOY_R){
 8009078:	48bf      	ldr	r0, [pc, #764]	; (8009378 <cppLoop+0x1848>)
 800907a:	f7f9 f887 	bl	800218c <_ZN8JoyStick8getValueEv>
 800907e:	4603      	mov	r3, r0
 8009080:	2b10      	cmp	r3, #16
 8009082:	bf0c      	ite	eq
 8009084:	2301      	moveq	r3, #1
 8009086:	2300      	movne	r3, #0
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	d03c      	beq.n	8009108 <cppLoop+0x15d8>
			led.LR(-1, 1);
 800908e:	2201      	movs	r2, #1
 8009090:	f04f 31ff 	mov.w	r1, #4294967295
 8009094:	48b9      	ldr	r0, [pc, #740]	; (800937c <cppLoop+0x184c>)
 8009096:	f7f9 f999 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800909a:	2064      	movs	r0, #100	; 0x64
 800909c:	f000 fe28 	bl	8009cf0 <HAL_Delay>
			if(selector_acc2 == 0){
 80090a0:	4bb7      	ldr	r3, [pc, #732]	; (8009380 <cppLoop+0x1850>)
 80090a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d113      	bne.n	80090d2 <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 80090aa:	4bb6      	ldr	r3, [pc, #728]	; (8009384 <cppLoop+0x1854>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7f7 fa62 	bl	8000578 <__aeabi_f2d>
 80090b4:	a3ae      	add	r3, pc, #696	; (adr r3, 8009370 <cppLoop+0x1840>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8ff 	bl	80002bc <__adddf3>
 80090be:	4603      	mov	r3, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	4618      	mov	r0, r3
 80090c4:	4621      	mov	r1, r4
 80090c6:	f7f7 fda7 	bl	8000c18 <__aeabi_d2f>
 80090ca:	4602      	mov	r2, r0
 80090cc:	4bad      	ldr	r3, [pc, #692]	; (8009384 <cppLoop+0x1854>)
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	e012      	b.n	80090f8 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 80090d2:	4bad      	ldr	r3, [pc, #692]	; (8009388 <cppLoop+0x1858>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f7 fa4e 	bl	8000578 <__aeabi_f2d>
 80090dc:	a3a4      	add	r3, pc, #656	; (adr r3, 8009370 <cppLoop+0x1840>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 f8eb 	bl	80002bc <__adddf3>
 80090e6:	4603      	mov	r3, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	4618      	mov	r0, r3
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7f7 fd93 	bl	8000c18 <__aeabi_d2f>
 80090f2:	4602      	mov	r2, r0
 80090f4:	4ba4      	ldr	r3, [pc, #656]	; (8009388 <cppLoop+0x1858>)
 80090f6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80090f8:	2200      	movs	r2, #0
 80090fa:	f04f 31ff 	mov.w	r1, #4294967295
 80090fe:	489f      	ldr	r0, [pc, #636]	; (800937c <cppLoop+0x184c>)
 8009100:	f7f9 f964 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009104:	f000 bcbc 	b.w	8009a80 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8009108:	489b      	ldr	r0, [pc, #620]	; (8009378 <cppLoop+0x1848>)
 800910a:	f7f9 f83f 	bl	800218c <_ZN8JoyStick8getValueEv>
 800910e:	4603      	mov	r3, r0
 8009110:	2b01      	cmp	r3, #1
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d03c      	beq.n	8009198 <cppLoop+0x1668>
			led.LR(-1, 1);
 800911e:	2201      	movs	r2, #1
 8009120:	f04f 31ff 	mov.w	r1, #4294967295
 8009124:	4895      	ldr	r0, [pc, #596]	; (800937c <cppLoop+0x184c>)
 8009126:	f7f9 f951 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800912a:	2064      	movs	r0, #100	; 0x64
 800912c:	f000 fde0 	bl	8009cf0 <HAL_Delay>
			if(selector_acc2 == 0){
 8009130:	4b93      	ldr	r3, [pc, #588]	; (8009380 <cppLoop+0x1850>)
 8009132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d113      	bne.n	8009162 <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 800913a:	4b92      	ldr	r3, [pc, #584]	; (8009384 <cppLoop+0x1854>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7f7 fa1a 	bl	8000578 <__aeabi_f2d>
 8009144:	a38a      	add	r3, pc, #552	; (adr r3, 8009370 <cppLoop+0x1840>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 f8b5 	bl	80002b8 <__aeabi_dsub>
 800914e:	4603      	mov	r3, r0
 8009150:	460c      	mov	r4, r1
 8009152:	4618      	mov	r0, r3
 8009154:	4621      	mov	r1, r4
 8009156:	f7f7 fd5f 	bl	8000c18 <__aeabi_d2f>
 800915a:	4602      	mov	r2, r0
 800915c:	4b89      	ldr	r3, [pc, #548]	; (8009384 <cppLoop+0x1854>)
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	e012      	b.n	8009188 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 8009162:	4b89      	ldr	r3, [pc, #548]	; (8009388 <cppLoop+0x1858>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f7 fa06 	bl	8000578 <__aeabi_f2d>
 800916c:	a380      	add	r3, pc, #512	; (adr r3, 8009370 <cppLoop+0x1840>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f8a1 	bl	80002b8 <__aeabi_dsub>
 8009176:	4603      	mov	r3, r0
 8009178:	460c      	mov	r4, r1
 800917a:	4618      	mov	r0, r3
 800917c:	4621      	mov	r1, r4
 800917e:	f7f7 fd4b 	bl	8000c18 <__aeabi_d2f>
 8009182:	4602      	mov	r2, r0
 8009184:	4b80      	ldr	r3, [pc, #512]	; (8009388 <cppLoop+0x1858>)
 8009186:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009188:	2200      	movs	r2, #0
 800918a:	f04f 31ff 	mov.w	r1, #4294967295
 800918e:	487b      	ldr	r0, [pc, #492]	; (800937c <cppLoop+0x184c>)
 8009190:	f7f9 f91c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009194:	f000 bc74 	b.w	8009a80 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 8009198:	4877      	ldr	r0, [pc, #476]	; (8009378 <cppLoop+0x1848>)
 800919a:	f7f8 fff7 	bl	800218c <_ZN8JoyStick8getValueEv>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	bf0c      	ite	eq
 80091a4:	2301      	moveq	r3, #1
 80091a6:	2300      	movne	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 8468 	beq.w	8009a80 <cppLoop+0x1f50>
			led.LR(-1, 1);
 80091b0:	2201      	movs	r2, #1
 80091b2:	f04f 31ff 	mov.w	r1, #4294967295
 80091b6:	4871      	ldr	r0, [pc, #452]	; (800937c <cppLoop+0x184c>)
 80091b8:	f7f9 f908 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091c0:	f000 fd96 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80091c4:	2300      	movs	r3, #0
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	4b6e      	ldr	r3, [pc, #440]	; (8009384 <cppLoop+0x1854>)
 80091ca:	2201      	movs	r2, #1
 80091cc:	496f      	ldr	r1, [pc, #444]	; (800938c <cppLoop+0x185c>)
 80091ce:	4870      	ldr	r0, [pc, #448]	; (8009390 <cppLoop+0x1860>)
 80091d0:	f7f8 fb54 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4b6b      	ldr	r3, [pc, #428]	; (8009388 <cppLoop+0x1858>)
 80091da:	2201      	movs	r2, #1
 80091dc:	496d      	ldr	r1, [pc, #436]	; (8009394 <cppLoop+0x1864>)
 80091de:	486c      	ldr	r0, [pc, #432]	; (8009390 <cppLoop+0x1860>)
 80091e0:	f7f8 fb4c 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80091e4:	4b67      	ldr	r3, [pc, #412]	; (8009384 <cppLoop+0x1854>)
 80091e6:	edd3 7a00 	vldr	s15, [r3]
 80091ea:	4b67      	ldr	r3, [pc, #412]	; (8009388 <cppLoop+0x1858>)
 80091ec:	ed93 7a00 	vldr	s14, [r3]
 80091f0:	eef0 0a47 	vmov.f32	s1, s14
 80091f4:	eeb0 0a67 	vmov.f32	s0, s15
 80091f8:	4867      	ldr	r0, [pc, #412]	; (8009398 <cppLoop+0x1868>)
 80091fa:	f7fa fdf4 	bl	8003de6 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80091fe:	2200      	movs	r2, #0
 8009200:	f04f 31ff 	mov.w	r1, #4294967295
 8009204:	485d      	ldr	r0, [pc, #372]	; (800937c <cppLoop+0x184c>)
 8009206:	f7f9 f8e1 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800920a:	f000 bc39 	b.w	8009a80 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 800920e:	217e      	movs	r1, #126	; 0x7e
 8009210:	485a      	ldr	r0, [pc, #360]	; (800937c <cppLoop+0x184c>)
 8009212:	f7f9 f81f 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009216:	f7f7 ff43 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800921a:	2100      	movs	r1, #0
 800921c:	2000      	movs	r0, #0
 800921e:	f7f7 ff4f 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009222:	485e      	ldr	r0, [pc, #376]	; (800939c <cppLoop+0x186c>)
 8009224:	f7f7 ff76 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009228:	2101      	movs	r1, #1
 800922a:	2000      	movs	r0, #0
 800922c:	f7f7 ff48 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009230:	485b      	ldr	r0, [pc, #364]	; (80093a0 <cppLoop+0x1870>)
 8009232:	f7f7 ff6f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009236:	4850      	ldr	r0, [pc, #320]	; (8009378 <cppLoop+0x1848>)
 8009238:	f7f8 ffa8 	bl	800218c <_ZN8JoyStick8getValueEv>
 800923c:	4603      	mov	r3, r0
 800923e:	2b02      	cmp	r3, #2
 8009240:	bf0c      	ite	eq
 8009242:	2301      	moveq	r3, #1
 8009244:	2300      	movne	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 841b 	beq.w	8009a84 <cppLoop+0x1f54>
			led.LR(-1, 1);
 800924e:	2201      	movs	r2, #1
 8009250:	f04f 31ff 	mov.w	r1, #4294967295
 8009254:	4849      	ldr	r0, [pc, #292]	; (800937c <cppLoop+0x184c>)
 8009256:	f7f9 f8b9 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 800925a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800925e:	f000 fd47 	bl	8009cf0 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009262:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80093a4 <cppLoop+0x1874>
 8009266:	484c      	ldr	r0, [pc, #304]	; (8009398 <cppLoop+0x1868>)
 8009268:	f7fa fcf4 	bl	8003c54 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800926c:	484a      	ldr	r0, [pc, #296]	; (8009398 <cppLoop+0x1868>)
 800926e:	f7fa ff25 	bl	80040bc <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009276:	f000 fd3b 	bl	8009cf0 <HAL_Delay>

			led.fullColor('R');
 800927a:	2152      	movs	r1, #82	; 0x52
 800927c:	483f      	ldr	r0, [pc, #252]	; (800937c <cppLoop+0x184c>)
 800927e:	f7f8 ffe9 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8009282:	4849      	ldr	r0, [pc, #292]	; (80093a8 <cppLoop+0x1878>)
 8009284:	f7f8 fa4c 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009288:	f242 7010 	movw	r0, #10000	; 0x2710
 800928c:	f000 fd30 	bl	8009cf0 <HAL_Delay>

			line_trace.stop();
 8009290:	4841      	ldr	r0, [pc, #260]	; (8009398 <cppLoop+0x1868>)
 8009292:	f7fa ffb9 	bl	8004208 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8009296:	4945      	ldr	r1, [pc, #276]	; (80093ac <cppLoop+0x187c>)
 8009298:	4845      	ldr	r0, [pc, #276]	; (80093b0 <cppLoop+0x1880>)
 800929a:	f7f8 fa7a 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 800929e:	4842      	ldr	r0, [pc, #264]	; (80093a8 <cppLoop+0x1878>)
 80092a0:	f7f8 fa02 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80092a4:	eef0 7a40 	vmov.f32	s15, s0
 80092a8:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80092ac:	1d3b      	adds	r3, r7, #4
 80092ae:	2201      	movs	r2, #1
 80092b0:	4619      	mov	r1, r3
 80092b2:	2001      	movs	r0, #1
 80092b4:	f7f8 fa90 	bl	80017d8 <sd_write_float>
			user_fclose();
 80092b8:	f7f8 fa7e 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80092bc:	2200      	movs	r2, #0
 80092be:	f04f 31ff 	mov.w	r1, #4294967295
 80092c2:	482e      	ldr	r0, [pc, #184]	; (800937c <cppLoop+0x184c>)
 80092c4:	f7f9 f882 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80092c8:	e3dc      	b.n	8009a84 <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 80092ca:	217e      	movs	r1, #126	; 0x7e
 80092cc:	482b      	ldr	r0, [pc, #172]	; (800937c <cppLoop+0x184c>)
 80092ce:	f7f8 ffc1 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80092d2:	f7f7 fee5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092d6:	2100      	movs	r1, #0
 80092d8:	2000      	movs	r0, #0
 80092da:	f7f7 fef1 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80092de:	4835      	ldr	r0, [pc, #212]	; (80093b4 <cppLoop+0x1884>)
 80092e0:	f7f7 ff18 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092e4:	2101      	movs	r1, #1
 80092e6:	2000      	movs	r0, #0
 80092e8:	f7f7 feea 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80092ec:	4832      	ldr	r0, [pc, #200]	; (80093b8 <cppLoop+0x1888>)
 80092ee:	f7f7 ff11 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80092f2:	4821      	ldr	r0, [pc, #132]	; (8009378 <cppLoop+0x1848>)
 80092f4:	f7f8 ff4a 	bl	800218c <_ZN8JoyStick8getValueEv>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 83bf 	beq.w	8009a88 <cppLoop+0x1f58>
			HAL_Delay(500);
 800930a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800930e:	f000 fcef 	bl	8009cf0 <HAL_Delay>
			led.LR(-1, 1);
 8009312:	2201      	movs	r2, #1
 8009314:	f04f 31ff 	mov.w	r1, #4294967295
 8009318:	4818      	ldr	r0, [pc, #96]	; (800937c <cppLoop+0x184c>)
 800931a:	f7f9 f857 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800931e:	2102      	movs	r1, #2
 8009320:	481d      	ldr	r0, [pc, #116]	; (8009398 <cppLoop+0x1868>)
 8009322:	f7fa feb9 	bl	8004098 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009326:	4b25      	ldr	r3, [pc, #148]	; (80093bc <cppLoop+0x188c>)
 8009328:	edd3 7a00 	vldr	s15, [r3]
 800932c:	eeb0 0a67 	vmov.f32	s0, s15
 8009330:	4819      	ldr	r0, [pc, #100]	; (8009398 <cppLoop+0x1868>)
 8009332:	f7fa fc9e 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009336:	4b21      	ldr	r3, [pc, #132]	; (80093bc <cppLoop+0x188c>)
 8009338:	edd3 7a00 	vldr	s15, [r3]
 800933c:	eeb0 0a67 	vmov.f32	s0, s15
 8009340:	4815      	ldr	r0, [pc, #84]	; (8009398 <cppLoop+0x1868>)
 8009342:	f7fa fca6 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <cppLoop+0x188c>)
 8009348:	edd3 7a00 	vldr	s15, [r3]
 800934c:	eeb0 0a67 	vmov.f32	s0, s15
 8009350:	4811      	ldr	r0, [pc, #68]	; (8009398 <cppLoop+0x1868>)
 8009352:	f7fa fcbe 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009356:	4810      	ldr	r0, [pc, #64]	; (8009398 <cppLoop+0x1868>)
 8009358:	f7fb f89a 	bl	8004490 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800935c:	2200      	movs	r2, #0
 800935e:	f04f 31ff 	mov.w	r1, #4294967295
 8009362:	4806      	ldr	r0, [pc, #24]	; (800937c <cppLoop+0x184c>)
 8009364:	f7f9 f832 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009368:	e38e      	b.n	8009a88 <cppLoop+0x1f58>
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	9999999a 	.word	0x9999999a
 8009374:	3fb99999 	.word	0x3fb99999
 8009378:	200005c4 	.word	0x200005c4
 800937c:	200005d0 	.word	0x200005d0
 8009380:	20042246 	.word	0x20042246
 8009384:	200422b4 	.word	0x200422b4
 8009388:	200422bc 	.word	0x200422bc
 800938c:	08019eec 	.word	0x08019eec
 8009390:	08019df0 	.word	0x08019df0
 8009394:	08019ef8 	.word	0x08019ef8
 8009398:	2001db64 	.word	0x2001db64
 800939c:	08019f04 	.word	0x08019f04
 80093a0:	08019f0c 	.word	0x08019f0c
 80093a4:	00000000 	.word	0x00000000
 80093a8:	2001dac0 	.word	0x2001dac0
 80093ac:	08019f18 	.word	0x08019f18
 80093b0:	08019f20 	.word	0x08019f20
 80093b4:	08019f2c 	.word	0x08019f2c
 80093b8:	08019f38 	.word	0x08019f38
 80093bc:	2004228c 	.word	0x2004228c

	case 11:
		led.fullColor('~');
 80093c0:	217e      	movs	r1, #126	; 0x7e
 80093c2:	48b5      	ldr	r0, [pc, #724]	; (8009698 <cppLoop+0x1b68>)
 80093c4:	f7f8 ff46 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 80093c8:	f7f7 fe6a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093cc:	2100      	movs	r1, #0
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7f7 fe76 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80093d4:	48b1      	ldr	r0, [pc, #708]	; (800969c <cppLoop+0x1b6c>)
 80093d6:	f7f7 fe9d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80093da:	2101      	movs	r1, #1
 80093dc:	2000      	movs	r0, #0
 80093de:	f7f7 fe6f 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80093e2:	48af      	ldr	r0, [pc, #700]	; (80096a0 <cppLoop+0x1b70>)
 80093e4:	f7f7 fe96 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80093e8:	48ae      	ldr	r0, [pc, #696]	; (80096a4 <cppLoop+0x1b74>)
 80093ea:	f7f8 fecf 	bl	800218c <_ZN8JoyStick8getValueEv>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	bf0c      	ite	eq
 80093f4:	2301      	moveq	r3, #1
 80093f6:	2300      	movne	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 8346 	beq.w	8009a8c <cppLoop+0x1f5c>
			HAL_Delay(1000);
 8009400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009404:	f000 fc74 	bl	8009cf0 <HAL_Delay>
			led.LR(-1, 1);
 8009408:	2201      	movs	r2, #1
 800940a:	f04f 31ff 	mov.w	r1, #4294967295
 800940e:	48a2      	ldr	r0, [pc, #648]	; (8009698 <cppLoop+0x1b68>)
 8009410:	f7f8 ffdc 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009414:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80096a8 <cppLoop+0x1b78>
 8009418:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80096a8 <cppLoop+0x1b78>
 800941c:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80096a8 <cppLoop+0x1b78>
 8009420:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80096a8 <cppLoop+0x1b78>
 8009424:	48a1      	ldr	r0, [pc, #644]	; (80096ac <cppLoop+0x1b7c>)
 8009426:	f7f7 ff13 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800942a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800942e:	f000 fc5f 	bl	8009cf0 <HAL_Delay>
			esc.off();
 8009432:	489e      	ldr	r0, [pc, #632]	; (80096ac <cppLoop+0x1b7c>)
 8009434:	f7f7 ffa6 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009438:	2200      	movs	r2, #0
 800943a:	f04f 31ff 	mov.w	r1, #4294967295
 800943e:	4896      	ldr	r0, [pc, #600]	; (8009698 <cppLoop+0x1b68>)
 8009440:	f7f8 ffc4 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8009444:	e322      	b.n	8009a8c <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 8009446:	217e      	movs	r1, #126	; 0x7e
 8009448:	4893      	ldr	r0, [pc, #588]	; (8009698 <cppLoop+0x1b68>)
 800944a:	f7f8 ff03 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800944e:	f7f7 fe27 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009452:	2100      	movs	r1, #0
 8009454:	2000      	movs	r0, #0
 8009456:	f7f7 fe33 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800945a:	4895      	ldr	r0, [pc, #596]	; (80096b0 <cppLoop+0x1b80>)
 800945c:	f7f7 fe5a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009460:	2101      	movs	r1, #1
 8009462:	2000      	movs	r0, #0
 8009464:	f7f7 fe2c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009468:	4892      	ldr	r0, [pc, #584]	; (80096b4 <cppLoop+0x1b84>)
 800946a:	f7f7 fe53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800946e:	488d      	ldr	r0, [pc, #564]	; (80096a4 <cppLoop+0x1b74>)
 8009470:	f7f8 fe8c 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009474:	4603      	mov	r3, r0
 8009476:	2b02      	cmp	r3, #2
 8009478:	bf0c      	ite	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	2300      	movne	r3, #0
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8305 	beq.w	8009a90 <cppLoop+0x1f60>
			HAL_Delay(1500);
 8009486:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800948a:	f000 fc31 	bl	8009cf0 <HAL_Delay>
			led.LR(-1, 1);
 800948e:	2201      	movs	r2, #1
 8009490:	f04f 31ff 	mov.w	r1, #4294967295
 8009494:	4880      	ldr	r0, [pc, #512]	; (8009698 <cppLoop+0x1b68>)
 8009496:	f7f8 ff99 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800949a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800949e:	f000 fc27 	bl	8009cf0 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80094a2:	eddf 1a81 	vldr	s3, [pc, #516]	; 80096a8 <cppLoop+0x1b78>
 80094a6:	ed9f 1a80 	vldr	s2, [pc, #512]	; 80096a8 <cppLoop+0x1b78>
 80094aa:	eddf 0a7f 	vldr	s1, [pc, #508]	; 80096a8 <cppLoop+0x1b78>
 80094ae:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80096a8 <cppLoop+0x1b78>
 80094b2:	487e      	ldr	r0, [pc, #504]	; (80096ac <cppLoop+0x1b7c>)
 80094b4:	f7f7 fecc 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80094b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094bc:	f000 fc18 	bl	8009cf0 <HAL_Delay>

			logger.start();
 80094c0:	487d      	ldr	r0, [pc, #500]	; (80096b8 <cppLoop+0x1b88>)
 80094c2:	f7fb fb6a 	bl	8004b9a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80094c6:	487d      	ldr	r0, [pc, #500]	; (80096bc <cppLoop+0x1b8c>)
 80094c8:	f7fc fcaf 	bl	8005e2a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80094cc:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80096c0 <cppLoop+0x1b90>
 80094d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80094d4:	4879      	ldr	r0, [pc, #484]	; (80096bc <cppLoop+0x1b8c>)
 80094d6:	f7fc fc3b 	bl	8005d50 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80094da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094de:	f000 fc07 	bl	8009cf0 <HAL_Delay>

			logger.stop();
 80094e2:	4875      	ldr	r0, [pc, #468]	; (80096b8 <cppLoop+0x1b88>)
 80094e4:	f7fb fb69 	bl	8004bba <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80094e8:	4874      	ldr	r0, [pc, #464]	; (80096bc <cppLoop+0x1b8c>)
 80094ea:	f7fc fcb1 	bl	8005e50 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80094ee:	486f      	ldr	r0, [pc, #444]	; (80096ac <cppLoop+0x1b7c>)
 80094f0:	f7f7 ff48 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80094f4:	4a73      	ldr	r2, [pc, #460]	; (80096c4 <cppLoop+0x1b94>)
 80094f6:	4974      	ldr	r1, [pc, #464]	; (80096c8 <cppLoop+0x1b98>)
 80094f8:	486f      	ldr	r0, [pc, #444]	; (80096b8 <cppLoop+0x1b88>)
 80094fa:	f7fb fa45 	bl	8004988 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80094fe:	2200      	movs	r2, #0
 8009500:	f04f 31ff 	mov.w	r1, #4294967295
 8009504:	4864      	ldr	r0, [pc, #400]	; (8009698 <cppLoop+0x1b68>)
 8009506:	f7f8 ff61 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 800950a:	e2c1      	b.n	8009a90 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 800950c:	2157      	movs	r1, #87	; 0x57
 800950e:	4862      	ldr	r0, [pc, #392]	; (8009698 <cppLoop+0x1b68>)
 8009510:	f7f8 fea0 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009514:	f7f7 fdc4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009518:	2100      	movs	r1, #0
 800951a:	2000      	movs	r0, #0
 800951c:	f7f7 fdd0 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009520:	486a      	ldr	r0, [pc, #424]	; (80096cc <cppLoop+0x1b9c>)
 8009522:	f7f7 fdf7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009526:	2101      	movs	r1, #1
 8009528:	2000      	movs	r0, #0
 800952a:	f7f7 fdc9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800952e:	4b68      	ldr	r3, [pc, #416]	; (80096d0 <cppLoop+0x1ba0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f7f7 f820 	bl	8000578 <__aeabi_f2d>
 8009538:	4603      	mov	r3, r0
 800953a:	460c      	mov	r4, r1
 800953c:	461a      	mov	r2, r3
 800953e:	4623      	mov	r3, r4
 8009540:	4864      	ldr	r0, [pc, #400]	; (80096d4 <cppLoop+0x1ba4>)
 8009542:	f7f7 fde7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009546:	4857      	ldr	r0, [pc, #348]	; (80096a4 <cppLoop+0x1b74>)
 8009548:	f7f8 fe20 	bl	800218c <_ZN8JoyStick8getValueEv>
 800954c:	4603      	mov	r3, r0
 800954e:	2b02      	cmp	r3, #2
 8009550:	bf0c      	ite	eq
 8009552:	2301      	moveq	r3, #1
 8009554:	2300      	movne	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 829b 	beq.w	8009a94 <cppLoop+0x1f64>
			HAL_Delay(500);
 800955e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009562:	f000 fbc5 	bl	8009cf0 <HAL_Delay>

			led.LR(1, -1);
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	2101      	movs	r1, #1
 800956c:	484a      	ldr	r0, [pc, #296]	; (8009698 <cppLoop+0x1b68>)
 800956e:	f7f8 ff2d 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009572:	2102      	movs	r1, #2
 8009574:	4858      	ldr	r0, [pc, #352]	; (80096d8 <cppLoop+0x1ba8>)
 8009576:	f7fa fd8f 	bl	8004098 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800957a:	4b58      	ldr	r3, [pc, #352]	; (80096dc <cppLoop+0x1bac>)
 800957c:	edd3 7a00 	vldr	s15, [r3]
 8009580:	eeb0 0a67 	vmov.f32	s0, s15
 8009584:	4854      	ldr	r0, [pc, #336]	; (80096d8 <cppLoop+0x1ba8>)
 8009586:	f7fa fb74 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800958a:	4b51      	ldr	r3, [pc, #324]	; (80096d0 <cppLoop+0x1ba0>)
 800958c:	edd3 7a00 	vldr	s15, [r3]
 8009590:	eeb0 0a67 	vmov.f32	s0, s15
 8009594:	4850      	ldr	r0, [pc, #320]	; (80096d8 <cppLoop+0x1ba8>)
 8009596:	f7fa fb7c 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800959a:	4b4d      	ldr	r3, [pc, #308]	; (80096d0 <cppLoop+0x1ba0>)
 800959c:	edd3 7a00 	vldr	s15, [r3]
 80095a0:	eeb0 0a67 	vmov.f32	s0, s15
 80095a4:	484c      	ldr	r0, [pc, #304]	; (80096d8 <cppLoop+0x1ba8>)
 80095a6:	f7fa fb94 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80095aa:	484b      	ldr	r0, [pc, #300]	; (80096d8 <cppLoop+0x1ba8>)
 80095ac:	f7fa ff70 	bl	8004490 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80095b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095b4:	f000 fb9c 	bl	8009cf0 <HAL_Delay>

			line_trace.running();
 80095b8:	4847      	ldr	r0, [pc, #284]	; (80096d8 <cppLoop+0x1ba8>)
 80095ba:	f7fa fdab 	bl	8004114 <_ZN9LineTrace7runningEv>

			esc.off();
 80095be:	483b      	ldr	r0, [pc, #236]	; (80096ac <cppLoop+0x1b7c>)
 80095c0:	f7f7 fee0 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295
 80095c8:	2100      	movs	r1, #0
 80095ca:	4833      	ldr	r0, [pc, #204]	; (8009698 <cppLoop+0x1b68>)
 80095cc:	f7f8 fefe 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80095d0:	e260      	b.n	8009a94 <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 80095d2:	2157      	movs	r1, #87	; 0x57
 80095d4:	4830      	ldr	r0, [pc, #192]	; (8009698 <cppLoop+0x1b68>)
 80095d6:	f7f8 fe3d 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80095da:	f7f7 fd61 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095de:	2100      	movs	r1, #0
 80095e0:	2000      	movs	r0, #0
 80095e2:	f7f7 fd6d 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80095e6:	483e      	ldr	r0, [pc, #248]	; (80096e0 <cppLoop+0x1bb0>)
 80095e8:	f7f7 fd94 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095ec:	2101      	movs	r1, #1
 80095ee:	2000      	movs	r0, #0
 80095f0:	f7f7 fd66 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80095f4:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <cppLoop+0x1bb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f6 ffbd 	bl	8000578 <__aeabi_f2d>
 80095fe:	4603      	mov	r3, r0
 8009600:	460c      	mov	r4, r1
 8009602:	461a      	mov	r2, r3
 8009604:	4623      	mov	r3, r4
 8009606:	4833      	ldr	r0, [pc, #204]	; (80096d4 <cppLoop+0x1ba4>)
 8009608:	f7f7 fd84 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800960c:	4825      	ldr	r0, [pc, #148]	; (80096a4 <cppLoop+0x1b74>)
 800960e:	f7f8 fdbd 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009612:	4603      	mov	r3, r0
 8009614:	2b02      	cmp	r3, #2
 8009616:	bf0c      	ite	eq
 8009618:	2301      	moveq	r3, #1
 800961a:	2300      	movne	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 823a 	beq.w	8009a98 <cppLoop+0x1f68>
			HAL_Delay(500);
 8009624:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009628:	f000 fb62 	bl	8009cf0 <HAL_Delay>

			led.LR(1, -1);
 800962c:	f04f 32ff 	mov.w	r2, #4294967295
 8009630:	2101      	movs	r1, #1
 8009632:	4819      	ldr	r0, [pc, #100]	; (8009698 <cppLoop+0x1b68>)
 8009634:	f7f8 feca 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009638:	2101      	movs	r1, #1
 800963a:	4827      	ldr	r0, [pc, #156]	; (80096d8 <cppLoop+0x1ba8>)
 800963c:	f7fa fd2c 	bl	8004098 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009640:	4b29      	ldr	r3, [pc, #164]	; (80096e8 <cppLoop+0x1bb8>)
 8009642:	edd3 7a00 	vldr	s15, [r3]
 8009646:	eeb0 0a67 	vmov.f32	s0, s15
 800964a:	4823      	ldr	r0, [pc, #140]	; (80096d8 <cppLoop+0x1ba8>)
 800964c:	f7fa fb11 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009650:	4b24      	ldr	r3, [pc, #144]	; (80096e4 <cppLoop+0x1bb4>)
 8009652:	edd3 7a00 	vldr	s15, [r3]
 8009656:	eeb0 0a67 	vmov.f32	s0, s15
 800965a:	481f      	ldr	r0, [pc, #124]	; (80096d8 <cppLoop+0x1ba8>)
 800965c:	f7fa fb19 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009660:	4b21      	ldr	r3, [pc, #132]	; (80096e8 <cppLoop+0x1bb8>)
 8009662:	edd3 7a00 	vldr	s15, [r3]
 8009666:	eeb0 0a67 	vmov.f32	s0, s15
 800966a:	481b      	ldr	r0, [pc, #108]	; (80096d8 <cppLoop+0x1ba8>)
 800966c:	f7fa fb31 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009670:	4819      	ldr	r0, [pc, #100]	; (80096d8 <cppLoop+0x1ba8>)
 8009672:	f7fa ff0d 	bl	8004490 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800967a:	f000 fb39 	bl	8009cf0 <HAL_Delay>

			line_trace.running();
 800967e:	4816      	ldr	r0, [pc, #88]	; (80096d8 <cppLoop+0x1ba8>)
 8009680:	f7fa fd48 	bl	8004114 <_ZN9LineTrace7runningEv>

			esc.off();
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <cppLoop+0x1b7c>)
 8009686:	f7f7 fe7d 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	2100      	movs	r1, #0
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <cppLoop+0x1b68>)
 8009692:	f7f8 fe9b 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009696:	e1ff      	b.n	8009a98 <cppLoop+0x1f68>
 8009698:	200005d0 	.word	0x200005d0
 800969c:	08019f44 	.word	0x08019f44
 80096a0:	08019f48 	.word	0x08019f48
 80096a4:	200005c4 	.word	0x200005c4
 80096a8:	3ea3d70a 	.word	0x3ea3d70a
 80096ac:	2001db60 	.word	0x2001db60
 80096b0:	08019f50 	.word	0x08019f50
 80096b4:	08019f54 	.word	0x08019f54
 80096b8:	200005f4 	.word	0x200005f4
 80096bc:	2001dae0 	.word	0x2001dae0
 80096c0:	00000000 	.word	0x00000000
 80096c4:	08019f60 	.word	0x08019f60
 80096c8:	08019f6c 	.word	0x08019f6c
 80096cc:	08019f78 	.word	0x08019f78
 80096d0:	2004228c 	.word	0x2004228c
 80096d4:	08019e1c 	.word	0x08019e1c
 80096d8:	2001db64 	.word	0x2001db64
 80096dc:	2004229c 	.word	0x2004229c
 80096e0:	08019f84 	.word	0x08019f84
 80096e4:	20042284 	.word	0x20042284
 80096e8:	20042294 	.word	0x20042294

	case 15:
		led.fullColor('W');
 80096ec:	2157      	movs	r1, #87	; 0x57
 80096ee:	48ac      	ldr	r0, [pc, #688]	; (80099a0 <cppLoop+0x1e70>)
 80096f0:	f7f8 fdb0 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80096f4:	f7f7 fcd4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096f8:	2100      	movs	r1, #0
 80096fa:	2000      	movs	r0, #0
 80096fc:	f7f7 fce0 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009700:	48a8      	ldr	r0, [pc, #672]	; (80099a4 <cppLoop+0x1e74>)
 8009702:	f7fa fa34 	bl	8003b6e <_ZN9LineTrace5getKpEv>
 8009706:	eeb0 7a40 	vmov.f32	s14, s0
 800970a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80099a8 <cppLoop+0x1e78>
 800970e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009712:	eeb0 0a67 	vmov.f32	s0, s15
 8009716:	f7f9 f9c9 	bl	8002aac <_ZSt3absf>
 800971a:	ee10 3a10 	vmov	r3, s0
 800971e:	4618      	mov	r0, r3
 8009720:	f7f6 ff2a 	bl	8000578 <__aeabi_f2d>
 8009724:	4603      	mov	r3, r0
 8009726:	460c      	mov	r4, r1
 8009728:	461a      	mov	r2, r3
 800972a:	4623      	mov	r3, r4
 800972c:	489f      	ldr	r0, [pc, #636]	; (80099ac <cppLoop+0x1e7c>)
 800972e:	f7f7 fcf1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009732:	2101      	movs	r1, #1
 8009734:	2000      	movs	r0, #0
 8009736:	f7f7 fcc3 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800973a:	489a      	ldr	r0, [pc, #616]	; (80099a4 <cppLoop+0x1e74>)
 800973c:	f7fa fa26 	bl	8003b8c <_ZN9LineTrace5getKiEv>
 8009740:	eeb0 7a40 	vmov.f32	s14, s0
 8009744:	eddf 7a9a 	vldr	s15, [pc, #616]	; 80099b0 <cppLoop+0x1e80>
 8009748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974c:	eeb0 0a67 	vmov.f32	s0, s15
 8009750:	f7f9 f9ac 	bl	8002aac <_ZSt3absf>
 8009754:	ee10 3a10 	vmov	r3, s0
 8009758:	4618      	mov	r0, r3
 800975a:	f7f6 ff0d 	bl	8000578 <__aeabi_f2d>
 800975e:	4605      	mov	r5, r0
 8009760:	460e      	mov	r6, r1
 8009762:	4890      	ldr	r0, [pc, #576]	; (80099a4 <cppLoop+0x1e74>)
 8009764:	f7fa fa21 	bl	8003baa <_ZN9LineTrace5getKdEv>
 8009768:	eeb0 7a40 	vmov.f32	s14, s0
 800976c:	eddf 7a91 	vldr	s15, [pc, #580]	; 80099b4 <cppLoop+0x1e84>
 8009770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009774:	eeb0 0a67 	vmov.f32	s0, s15
 8009778:	f7f9 f998 	bl	8002aac <_ZSt3absf>
 800977c:	ee10 3a10 	vmov	r3, s0
 8009780:	4618      	mov	r0, r3
 8009782:	f7f6 fef9 	bl	8000578 <__aeabi_f2d>
 8009786:	4603      	mov	r3, r0
 8009788:	460c      	mov	r4, r1
 800978a:	e9cd 3400 	strd	r3, r4, [sp]
 800978e:	462a      	mov	r2, r5
 8009790:	4633      	mov	r3, r6
 8009792:	4889      	ldr	r0, [pc, #548]	; (80099b8 <cppLoop+0x1e88>)
 8009794:	f7f7 fcbe 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009798:	4888      	ldr	r0, [pc, #544]	; (80099bc <cppLoop+0x1e8c>)
 800979a:	f7f8 fcf7 	bl	800218c <_ZN8JoyStick8getValueEv>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	bf0c      	ite	eq
 80097a4:	2301      	moveq	r3, #1
 80097a6:	2300      	movne	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d021      	beq.n	80097f2 <cppLoop+0x1cc2>
			led.LR(-1, 1);
 80097ae:	2201      	movs	r2, #1
 80097b0:	f04f 31ff 	mov.w	r1, #4294967295
 80097b4:	487a      	ldr	r0, [pc, #488]	; (80099a0 <cppLoop+0x1e70>)
 80097b6:	f7f8 fe09 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80097ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80097be:	f000 fa97 	bl	8009cf0 <HAL_Delay>

			selector++;
 80097c2:	4b7f      	ldr	r3, [pc, #508]	; (80099c0 <cppLoop+0x1e90>)
 80097c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3301      	adds	r3, #1
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	b21a      	sxth	r2, r3
 80097d0:	4b7b      	ldr	r3, [pc, #492]	; (80099c0 <cppLoop+0x1e90>)
 80097d2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80097d4:	4b7a      	ldr	r3, [pc, #488]	; (80099c0 <cppLoop+0x1e90>)
 80097d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	dd02      	ble.n	80097e4 <cppLoop+0x1cb4>
 80097de:	4b78      	ldr	r3, [pc, #480]	; (80099c0 <cppLoop+0x1e90>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80097e4:	2200      	movs	r2, #0
 80097e6:	f04f 31ff 	mov.w	r1, #4294967295
 80097ea:	486d      	ldr	r0, [pc, #436]	; (80099a0 <cppLoop+0x1e70>)
 80097ec:	f7f8 fdee 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80097f0:	e154      	b.n	8009a9c <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 80097f2:	4872      	ldr	r0, [pc, #456]	; (80099bc <cppLoop+0x1e8c>)
 80097f4:	f7f8 fcca 	bl	800218c <_ZN8JoyStick8getValueEv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b10      	cmp	r3, #16
 80097fc:	bf0c      	ite	eq
 80097fe:	2301      	moveq	r3, #1
 8009800:	2300      	movne	r3, #0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d058      	beq.n	80098ba <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009808:	2201      	movs	r2, #1
 800980a:	f04f 31ff 	mov.w	r1, #4294967295
 800980e:	4864      	ldr	r0, [pc, #400]	; (80099a0 <cppLoop+0x1e70>)
 8009810:	f7f8 fddc 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009814:	2064      	movs	r0, #100	; 0x64
 8009816:	f000 fa6b 	bl	8009cf0 <HAL_Delay>
			if(selector == 0){
 800981a:	4b69      	ldr	r3, [pc, #420]	; (80099c0 <cppLoop+0x1e90>)
 800981c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d113      	bne.n	800984c <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 8009824:	4b67      	ldr	r3, [pc, #412]	; (80099c4 <cppLoop+0x1e94>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7f6 fea5 	bl	8000578 <__aeabi_f2d>
 800982e:	a356      	add	r3, pc, #344	; (adr r3, 8009988 <cppLoop+0x1e58>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f6 fd42 	bl	80002bc <__adddf3>
 8009838:	4603      	mov	r3, r0
 800983a:	460c      	mov	r4, r1
 800983c:	4618      	mov	r0, r3
 800983e:	4621      	mov	r1, r4
 8009840:	f7f7 f9ea 	bl	8000c18 <__aeabi_d2f>
 8009844:	4602      	mov	r2, r0
 8009846:	4b5f      	ldr	r3, [pc, #380]	; (80099c4 <cppLoop+0x1e94>)
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	e02b      	b.n	80098a4 <cppLoop+0x1d74>
			else if(selector == 1){
 800984c:	4b5c      	ldr	r3, [pc, #368]	; (80099c0 <cppLoop+0x1e90>)
 800984e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d113      	bne.n	800987e <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 8009856:	4b5c      	ldr	r3, [pc, #368]	; (80099c8 <cppLoop+0x1e98>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f7f6 fe8c 	bl	8000578 <__aeabi_f2d>
 8009860:	a34b      	add	r3, pc, #300	; (adr r3, 8009990 <cppLoop+0x1e60>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fd29 	bl	80002bc <__adddf3>
 800986a:	4603      	mov	r3, r0
 800986c:	460c      	mov	r4, r1
 800986e:	4618      	mov	r0, r3
 8009870:	4621      	mov	r1, r4
 8009872:	f7f7 f9d1 	bl	8000c18 <__aeabi_d2f>
 8009876:	4602      	mov	r2, r0
 8009878:	4b53      	ldr	r3, [pc, #332]	; (80099c8 <cppLoop+0x1e98>)
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	e012      	b.n	80098a4 <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 800987e:	4b53      	ldr	r3, [pc, #332]	; (80099cc <cppLoop+0x1e9c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7f6 fe78 	bl	8000578 <__aeabi_f2d>
 8009888:	a343      	add	r3, pc, #268	; (adr r3, 8009998 <cppLoop+0x1e68>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 fd15 	bl	80002bc <__adddf3>
 8009892:	4603      	mov	r3, r0
 8009894:	460c      	mov	r4, r1
 8009896:	4618      	mov	r0, r3
 8009898:	4621      	mov	r1, r4
 800989a:	f7f7 f9bd 	bl	8000c18 <__aeabi_d2f>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b4a      	ldr	r3, [pc, #296]	; (80099cc <cppLoop+0x1e9c>)
 80098a2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80098a4:	2152      	movs	r1, #82	; 0x52
 80098a6:	483e      	ldr	r0, [pc, #248]	; (80099a0 <cppLoop+0x1e70>)
 80098a8:	f7f8 fcd4 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80098ac:	2200      	movs	r2, #0
 80098ae:	f04f 31ff 	mov.w	r1, #4294967295
 80098b2:	483b      	ldr	r0, [pc, #236]	; (80099a0 <cppLoop+0x1e70>)
 80098b4:	f7f8 fd8a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80098b8:	e0f0      	b.n	8009a9c <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 80098ba:	4840      	ldr	r0, [pc, #256]	; (80099bc <cppLoop+0x1e8c>)
 80098bc:	f7f8 fc66 	bl	800218c <_ZN8JoyStick8getValueEv>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	bf0c      	ite	eq
 80098c6:	2301      	moveq	r3, #1
 80098c8:	2300      	movne	r3, #0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d07f      	beq.n	80099d0 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 80098d0:	2201      	movs	r2, #1
 80098d2:	f04f 31ff 	mov.w	r1, #4294967295
 80098d6:	4832      	ldr	r0, [pc, #200]	; (80099a0 <cppLoop+0x1e70>)
 80098d8:	f7f8 fd78 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80098dc:	2064      	movs	r0, #100	; 0x64
 80098de:	f000 fa07 	bl	8009cf0 <HAL_Delay>
			if(selector == 0){
 80098e2:	4b37      	ldr	r3, [pc, #220]	; (80099c0 <cppLoop+0x1e90>)
 80098e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d113      	bne.n	8009914 <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 80098ec:	4b35      	ldr	r3, [pc, #212]	; (80099c4 <cppLoop+0x1e94>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7f6 fe41 	bl	8000578 <__aeabi_f2d>
 80098f6:	a324      	add	r3, pc, #144	; (adr r3, 8009988 <cppLoop+0x1e58>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fcdc 	bl	80002b8 <__aeabi_dsub>
 8009900:	4603      	mov	r3, r0
 8009902:	460c      	mov	r4, r1
 8009904:	4618      	mov	r0, r3
 8009906:	4621      	mov	r1, r4
 8009908:	f7f7 f986 	bl	8000c18 <__aeabi_d2f>
 800990c:	4602      	mov	r2, r0
 800990e:	4b2d      	ldr	r3, [pc, #180]	; (80099c4 <cppLoop+0x1e94>)
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	e02b      	b.n	800996c <cppLoop+0x1e3c>
			else if(selector == 1){
 8009914:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <cppLoop+0x1e90>)
 8009916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d113      	bne.n	8009946 <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <cppLoop+0x1e98>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f7f6 fe28 	bl	8000578 <__aeabi_f2d>
 8009928:	a319      	add	r3, pc, #100	; (adr r3, 8009990 <cppLoop+0x1e60>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fcc3 	bl	80002b8 <__aeabi_dsub>
 8009932:	4603      	mov	r3, r0
 8009934:	460c      	mov	r4, r1
 8009936:	4618      	mov	r0, r3
 8009938:	4621      	mov	r1, r4
 800993a:	f7f7 f96d 	bl	8000c18 <__aeabi_d2f>
 800993e:	4602      	mov	r2, r0
 8009940:	4b21      	ldr	r3, [pc, #132]	; (80099c8 <cppLoop+0x1e98>)
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	e012      	b.n	800996c <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 8009946:	4b21      	ldr	r3, [pc, #132]	; (80099cc <cppLoop+0x1e9c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4618      	mov	r0, r3
 800994c:	f7f6 fe14 	bl	8000578 <__aeabi_f2d>
 8009950:	a311      	add	r3, pc, #68	; (adr r3, 8009998 <cppLoop+0x1e68>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fcaf 	bl	80002b8 <__aeabi_dsub>
 800995a:	4603      	mov	r3, r0
 800995c:	460c      	mov	r4, r1
 800995e:	4618      	mov	r0, r3
 8009960:	4621      	mov	r1, r4
 8009962:	f7f7 f959 	bl	8000c18 <__aeabi_d2f>
 8009966:	4602      	mov	r2, r0
 8009968:	4b18      	ldr	r3, [pc, #96]	; (80099cc <cppLoop+0x1e9c>)
 800996a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800996c:	2152      	movs	r1, #82	; 0x52
 800996e:	480c      	ldr	r0, [pc, #48]	; (80099a0 <cppLoop+0x1e70>)
 8009970:	f7f8 fc70 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009974:	2200      	movs	r2, #0
 8009976:	f04f 31ff 	mov.w	r1, #4294967295
 800997a:	4809      	ldr	r0, [pc, #36]	; (80099a0 <cppLoop+0x1e70>)
 800997c:	f7f8 fd26 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009980:	e08c      	b.n	8009a9c <cppLoop+0x1f6c>
 8009982:	bf00      	nop
 8009984:	f3af 8000 	nop.w
 8009988:	88e368f1 	.word	0x88e368f1
 800998c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009990:	eb1c432d 	.word	0xeb1c432d
 8009994:	3f1a36e2 	.word	0x3f1a36e2
 8009998:	a0b5ed8d 	.word	0xa0b5ed8d
 800999c:	3eb0c6f7 	.word	0x3eb0c6f7
 80099a0:	200005d0 	.word	0x200005d0
 80099a4:	2001db64 	.word	0x2001db64
 80099a8:	447a0000 	.word	0x447a0000
 80099ac:	08019f90 	.word	0x08019f90
 80099b0:	42c80000 	.word	0x42c80000
 80099b4:	461c4000 	.word	0x461c4000
 80099b8:	08019dd4 	.word	0x08019dd4
 80099bc:	200005c4 	.word	0x200005c4
 80099c0:	20042242 	.word	0x20042242
 80099c4:	2004224c 	.word	0x2004224c
 80099c8:	20042254 	.word	0x20042254
 80099cc:	2004225c 	.word	0x2004225c
		else if(joy_stick.getValue() == JOY_C){
 80099d0:	4836      	ldr	r0, [pc, #216]	; (8009aac <cppLoop+0x1f7c>)
 80099d2:	f7f8 fbdb 	bl	800218c <_ZN8JoyStick8getValueEv>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b02      	cmp	r3, #2
 80099da:	bf0c      	ite	eq
 80099dc:	2301      	moveq	r3, #1
 80099de:	2300      	movne	r3, #0
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d05a      	beq.n	8009a9c <cppLoop+0x1f6c>
			led.LR(-1, 1);
 80099e6:	2201      	movs	r2, #1
 80099e8:	f04f 31ff 	mov.w	r1, #4294967295
 80099ec:	4830      	ldr	r0, [pc, #192]	; (8009ab0 <cppLoop+0x1f80>)
 80099ee:	f7f8 fced 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80099f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099f6:	f000 f97b 	bl	8009cf0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80099fa:	2300      	movs	r3, #0
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <cppLoop+0x1f84>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	492d      	ldr	r1, [pc, #180]	; (8009ab8 <cppLoop+0x1f88>)
 8009a04:	482d      	ldr	r0, [pc, #180]	; (8009abc <cppLoop+0x1f8c>)
 8009a06:	f7f7 ff39 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	4b2c      	ldr	r3, [pc, #176]	; (8009ac0 <cppLoop+0x1f90>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	492c      	ldr	r1, [pc, #176]	; (8009ac4 <cppLoop+0x1f94>)
 8009a14:	4829      	ldr	r0, [pc, #164]	; (8009abc <cppLoop+0x1f8c>)
 8009a16:	f7f7 ff31 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ac8 <cppLoop+0x1f98>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	492a      	ldr	r1, [pc, #168]	; (8009acc <cppLoop+0x1f9c>)
 8009a24:	4825      	ldr	r0, [pc, #148]	; (8009abc <cppLoop+0x1f8c>)
 8009a26:	f7f7 ff29 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009a2a:	4b22      	ldr	r3, [pc, #136]	; (8009ab4 <cppLoop+0x1f84>)
 8009a2c:	edd3 7a00 	vldr	s15, [r3]
 8009a30:	4b23      	ldr	r3, [pc, #140]	; (8009ac0 <cppLoop+0x1f90>)
 8009a32:	ed93 7a00 	vldr	s14, [r3]
 8009a36:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <cppLoop+0x1f98>)
 8009a38:	edd3 6a00 	vldr	s13, [r3]
 8009a3c:	eeb0 1a66 	vmov.f32	s2, s13
 8009a40:	eef0 0a47 	vmov.f32	s1, s14
 8009a44:	eeb0 0a67 	vmov.f32	s0, s15
 8009a48:	4821      	ldr	r0, [pc, #132]	; (8009ad0 <cppLoop+0x1fa0>)
 8009a4a:	f7fa f877 	bl	8003b3c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f04f 31ff 	mov.w	r1, #4294967295
 8009a54:	4816      	ldr	r0, [pc, #88]	; (8009ab0 <cppLoop+0x1f80>)
 8009a56:	f7f8 fcb9 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009a5a:	e01f      	b.n	8009a9c <cppLoop+0x1f6c>

	default:
		break;
 8009a5c:	bf00      	nop
 8009a5e:	e01e      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a60:	bf00      	nop
 8009a62:	e01c      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a64:	bf00      	nop
 8009a66:	e01a      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a68:	bf00      	nop
 8009a6a:	e018      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a6c:	bf00      	nop
 8009a6e:	e016      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a70:	bf00      	nop
 8009a72:	e014      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a74:	bf00      	nop
 8009a76:	e012      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a78:	bf00      	nop
 8009a7a:	e010      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a7c:	bf00      	nop
 8009a7e:	e00e      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a80:	bf00      	nop
 8009a82:	e00c      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a84:	bf00      	nop
 8009a86:	e00a      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a88:	bf00      	nop
 8009a8a:	e008      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a8c:	bf00      	nop
 8009a8e:	e006      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a90:	bf00      	nop
 8009a92:	e004      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a94:	bf00      	nop
 8009a96:	e002      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <cppLoop+0x1f6e>
		break;
 8009a9c:	bf00      	nop

	}

	HAL_Delay(30);
 8009a9e:	201e      	movs	r0, #30
 8009aa0:	f000 f926 	bl	8009cf0 <HAL_Delay>

}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	200005c4 	.word	0x200005c4
 8009ab0:	200005d0 	.word	0x200005d0
 8009ab4:	2004224c 	.word	0x2004224c
 8009ab8:	08019f9c 	.word	0x08019f9c
 8009abc:	08019df0 	.word	0x08019df0
 8009ac0:	20042254 	.word	0x20042254
 8009ac4:	08019fa4 	.word	0x08019fa4
 8009ac8:	2004225c 	.word	0x2004225c
 8009acc:	08019fac 	.word	0x08019fac
 8009ad0:	2001db64 	.word	0x2001db64

08009ad4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af06      	add	r7, sp, #24
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d142      	bne.n	8009b6a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d13d      	bne.n	8009b6a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009aee:	4821      	ldr	r0, [pc, #132]	; (8009b74 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009af0:	f7f8 fca4 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009af4:	4820      	ldr	r0, [pc, #128]	; (8009b78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009af6:	f7fb fc5f 	bl	80053b8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009afa:	4820      	ldr	r0, [pc, #128]	; (8009b7c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009afc:	f7f8 fb3a 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009b00:	481f      	ldr	r0, [pc, #124]	; (8009b80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b02:	f7fb f86a 	bl	8004bda <_ZN5MotorC1Ev>
IMU imu;
 8009b06:	481f      	ldr	r0, [pc, #124]	; (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b08:	f7f8 f930 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009b0c:	481e      	ldr	r0, [pc, #120]	; (8009b88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b0e:	f7fa fdaf 	bl	8004670 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009b12:	481e      	ldr	r0, [pc, #120]	; (8009b8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b14:	f7f7 fc5a 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009b18:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b1a:	4a1c      	ldr	r2, [pc, #112]	; (8009b8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b1c:	4918      	ldr	r1, [pc, #96]	; (8009b80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b1e:	481c      	ldr	r0, [pc, #112]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b20:	f7fb ffe0 	bl	8005ae4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009b24:	4b1a      	ldr	r3, [pc, #104]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b26:	4a17      	ldr	r2, [pc, #92]	; (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b28:	4918      	ldr	r1, [pc, #96]	; (8009b8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b2a:	481a      	ldr	r0, [pc, #104]	; (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009b2c:	f7fb f954 	bl	8004dd8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009b30:	4819      	ldr	r0, [pc, #100]	; (8009b98 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b32:	f7f7 fb4f 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009b36:	4b18      	ldr	r3, [pc, #96]	; (8009b98 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b38:	9305      	str	r3, [sp, #20]
 8009b3a:	4b12      	ldr	r3, [pc, #72]	; (8009b84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	4b12      	ldr	r3, [pc, #72]	; (8009b88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009b44:	9302      	str	r3, [sp, #8]
 8009b46:	4b11      	ldr	r3, [pc, #68]	; (8009b8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b50:	4a08      	ldr	r2, [pc, #32]	; (8009b74 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b52:	490b      	ldr	r1, [pc, #44]	; (8009b80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b54:	4811      	ldr	r0, [pc, #68]	; (8009b9c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009b56:	f7f8 ffb9 	bl	8002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009b5a:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b5c:	490a      	ldr	r1, [pc, #40]	; (8009b88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b5e:	4810      	ldr	r0, [pc, #64]	; (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009b60:	f7fb fda6 	bl	80056b0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009b64:	480f      	ldr	r0, [pc, #60]	; (8009ba4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009b66:	f7fb fab9 	bl	80050dc <_ZN13PathFollowingC1Ev>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200002c0 	.word	0x200002c0
 8009b78:	200005b8 	.word	0x200005b8
 8009b7c:	200005c4 	.word	0x200005c4
 8009b80:	200005cc 	.word	0x200005cc
 8009b84:	200005e0 	.word	0x200005e0
 8009b88:	200005f4 	.word	0x200005f4
 8009b8c:	2001dac0 	.word	0x2001dac0
 8009b90:	2001dae0 	.word	0x2001dae0
 8009b94:	2001db20 	.word	0x2001db20
 8009b98:	2001db60 	.word	0x2001db60
 8009b9c:	2001db64 	.word	0x2001db64
 8009ba0:	2002a90c 	.word	0x2002a90c
 8009ba4:	2002ab18 	.word	0x2002ab18

08009ba8 <_GLOBAL__sub_I_line_sensor>:
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f7ff ff8f 	bl	8009ad4 <_Z41__static_initialization_and_destruction_0ii>
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009bf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009bbe:	e003      	b.n	8009bc8 <LoopCopyDataInit>

08009bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009bc0:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009bc6:	3104      	adds	r1, #4

08009bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009bc8:	480b      	ldr	r0, [pc, #44]	; (8009bf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009bd0:	d3f6      	bcc.n	8009bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8009bd2:	4a0b      	ldr	r2, [pc, #44]	; (8009c00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009bd4:	e002      	b.n	8009bdc <LoopFillZerobss>

08009bd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009bd8:	f842 3b04 	str.w	r3, [r2], #4

08009bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009bdc:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009be0:	d3f9      	bcc.n	8009bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009be2:	f7fd fe83 	bl	80078ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009be6:	f00b fdd3 	bl	8015790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009bea:	f7fc f9bd 	bl	8005f68 <main>
  bx  lr    
 8009bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009bf0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009bf4:	0801a5a0 	.word	0x0801a5a0
  ldr  r0, =_sdata
 8009bf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009bfc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009c00:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009c04:	20046ca0 	.word	0x20046ca0

08009c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c08:	e7fe      	b.n	8009c08 <ADC_IRQHandler>
	...

08009c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c10:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <HAL_Init+0x40>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a0d      	ldr	r2, [pc, #52]	; (8009c4c <HAL_Init+0x40>)
 8009c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c1c:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <HAL_Init+0x40>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a0a      	ldr	r2, [pc, #40]	; (8009c4c <HAL_Init+0x40>)
 8009c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c28:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <HAL_Init+0x40>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a07      	ldr	r2, [pc, #28]	; (8009c4c <HAL_Init+0x40>)
 8009c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c34:	2003      	movs	r0, #3
 8009c36:	f000 fd51 	bl	800a6dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	f000 f808 	bl	8009c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c40:	f7fd f8a4 	bl	8006d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	40023c00 	.word	0x40023c00

08009c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c58:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <HAL_InitTick+0x54>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <HAL_InitTick+0x58>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	4619      	mov	r1, r3
 8009c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fd69 	bl	800a746 <HAL_SYSTICK_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e00e      	b.n	8009c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b0f      	cmp	r3, #15
 8009c82:	d80a      	bhi.n	8009c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c84:	2200      	movs	r2, #0
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8c:	f000 fd31 	bl	800a6f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c90:	4a06      	ldr	r2, [pc, #24]	; (8009cac <HAL_InitTick+0x5c>)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	e000      	b.n	8009c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20000000 	.word	0x20000000
 8009ca8:	20000008 	.word	0x20000008
 8009cac:	20000004 	.word	0x20000004

08009cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cb4:	4b06      	ldr	r3, [pc, #24]	; (8009cd0 <HAL_IncTick+0x20>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <HAL_IncTick+0x24>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	4a04      	ldr	r2, [pc, #16]	; (8009cd4 <HAL_IncTick+0x24>)
 8009cc2:	6013      	str	r3, [r2, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	20000008 	.word	0x20000008
 8009cd4:	20044c28 	.word	0x20044c28

08009cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  return uwTick;
 8009cdc:	4b03      	ldr	r3, [pc, #12]	; (8009cec <HAL_GetTick+0x14>)
 8009cde:	681b      	ldr	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20044c28 	.word	0x20044c28

08009cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cf8:	f7ff ffee 	bl	8009cd8 <HAL_GetTick>
 8009cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d005      	beq.n	8009d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <HAL_Delay+0x40>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d16:	bf00      	nop
 8009d18:	f7ff ffde 	bl	8009cd8 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d8f7      	bhi.n	8009d18 <HAL_Delay+0x28>
  {
  }
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20000008 	.word	0x20000008

08009d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e033      	b.n	8009db2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7fd f842 	bl	8006ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f003 0310 	and.w	r3, r3, #16
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d118      	bne.n	8009da4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d7a:	f023 0302 	bic.w	r3, r3, #2
 8009d7e:	f043 0202 	orr.w	r2, r3, #2
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa5a 	bl	800a240 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	f043 0201 	orr.w	r2, r3, #1
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	641a      	str	r2, [r3, #64]	; 0x40
 8009da2:	e001      	b.n	8009da8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_ADC_Start_DMA+0x1e>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e0cc      	b.n	8009f74 <HAL_ADC_Start_DMA+0x1b8>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d018      	beq.n	8009e22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0201 	orr.w	r2, r2, #1
 8009dfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009e00:	4b5e      	ldr	r3, [pc, #376]	; (8009f7c <HAL_ADC_Start_DMA+0x1c0>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a5e      	ldr	r2, [pc, #376]	; (8009f80 <HAL_ADC_Start_DMA+0x1c4>)
 8009e06:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0a:	0c9a      	lsrs	r2, r3, #18
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	4413      	add	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e14:	e002      	b.n	8009e1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f9      	bne.n	8009e16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	f040 80a0 	bne.w	8009f72 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e70:	d106      	bne.n	8009e80 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e76:	f023 0206 	bic.w	r2, r3, #6
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	645a      	str	r2, [r3, #68]	; 0x44
 8009e7e:	e002      	b.n	8009e86 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e8e:	4b3d      	ldr	r3, [pc, #244]	; (8009f84 <HAL_ADC_Start_DMA+0x1c8>)
 8009e90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	4a3c      	ldr	r2, [pc, #240]	; (8009f88 <HAL_ADC_Start_DMA+0x1cc>)
 8009e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9e:	4a3b      	ldr	r2, [pc, #236]	; (8009f8c <HAL_ADC_Start_DMA+0x1d0>)
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	4a3a      	ldr	r2, [pc, #232]	; (8009f90 <HAL_ADC_Start_DMA+0x1d4>)
 8009ea8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009eb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ec2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	334c      	adds	r3, #76	; 0x4c
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f000 fcea 	bl	800a8bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f003 031f 	and.w	r3, r3, #31
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d12a      	bne.n	8009f4a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a26      	ldr	r2, [pc, #152]	; (8009f94 <HAL_ADC_Start_DMA+0x1d8>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d015      	beq.n	8009f2a <HAL_ADC_Start_DMA+0x16e>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a25      	ldr	r2, [pc, #148]	; (8009f98 <HAL_ADC_Start_DMA+0x1dc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d105      	bne.n	8009f14 <HAL_ADC_Start_DMA+0x158>
 8009f08:	4b1e      	ldr	r3, [pc, #120]	; (8009f84 <HAL_ADC_Start_DMA+0x1c8>)
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f003 031f 	and.w	r3, r3, #31
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a20      	ldr	r2, [pc, #128]	; (8009f9c <HAL_ADC_Start_DMA+0x1e0>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d129      	bne.n	8009f72 <HAL_ADC_Start_DMA+0x1b6>
 8009f1e:	4b19      	ldr	r3, [pc, #100]	; (8009f84 <HAL_ADC_Start_DMA+0x1c8>)
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	2b0f      	cmp	r3, #15
 8009f28:	d823      	bhi.n	8009f72 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d11c      	bne.n	8009f72 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f46:	609a      	str	r2, [r3, #8]
 8009f48:	e013      	b.n	8009f72 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a11      	ldr	r2, [pc, #68]	; (8009f94 <HAL_ADC_Start_DMA+0x1d8>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d10e      	bne.n	8009f72 <HAL_ADC_Start_DMA+0x1b6>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d107      	bne.n	8009f72 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f70:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20000000 	.word	0x20000000
 8009f80:	431bde83 	.word	0x431bde83
 8009f84:	40012300 	.word	0x40012300
 8009f88:	0800a439 	.word	0x0800a439
 8009f8c:	0800a4f3 	.word	0x0800a4f3
 8009f90:	0800a50f 	.word	0x0800a50f
 8009f94:	40012000 	.word	0x40012000
 8009f98:	40012100 	.word	0x40012100
 8009f9c:	40012200 	.word	0x40012200

08009fa0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_ADC_ConfigChannel+0x1c>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e113      	b.n	800a220 <HAL_ADC_ConfigChannel+0x244>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b09      	cmp	r3, #9
 800a006:	d925      	bls.n	800a054 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68d9      	ldr	r1, [r3, #12]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	461a      	mov	r2, r3
 800a016:	4613      	mov	r3, r2
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	4413      	add	r3, r2
 800a01c:	3b1e      	subs	r3, #30
 800a01e:	2207      	movs	r2, #7
 800a020:	fa02 f303 	lsl.w	r3, r2, r3
 800a024:	43da      	mvns	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	400a      	ands	r2, r1
 800a02c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68d9      	ldr	r1, [r3, #12]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689a      	ldr	r2, [r3, #8]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4618      	mov	r0, r3
 800a040:	4603      	mov	r3, r0
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	4403      	add	r3, r0
 800a046:	3b1e      	subs	r3, #30
 800a048:	409a      	lsls	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	e022      	b.n	800a09a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6919      	ldr	r1, [r3, #16]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	461a      	mov	r2, r3
 800a062:	4613      	mov	r3, r2
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	4413      	add	r3, r2
 800a068:	2207      	movs	r2, #7
 800a06a:	fa02 f303 	lsl.w	r3, r2, r3
 800a06e:	43da      	mvns	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	400a      	ands	r2, r1
 800a076:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6919      	ldr	r1, [r3, #16]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	b29b      	uxth	r3, r3
 800a088:	4618      	mov	r0, r3
 800a08a:	4603      	mov	r3, r0
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4403      	add	r3, r0
 800a090:	409a      	lsls	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d824      	bhi.n	800a0ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	3b05      	subs	r3, #5
 800a0b4:	221f      	movs	r2, #31
 800a0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ba:	43da      	mvns	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	400a      	ands	r2, r1
 800a0c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	3b05      	subs	r3, #5
 800a0de:	fa00 f203 	lsl.w	r2, r0, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	635a      	str	r2, [r3, #52]	; 0x34
 800a0ea:	e04c      	b.n	800a186 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b0c      	cmp	r3, #12
 800a0f2:	d824      	bhi.n	800a13e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	3b23      	subs	r3, #35	; 0x23
 800a106:	221f      	movs	r2, #31
 800a108:	fa02 f303 	lsl.w	r3, r2, r3
 800a10c:	43da      	mvns	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	400a      	ands	r2, r1
 800a114:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	4618      	mov	r0, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	4613      	mov	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	3b23      	subs	r3, #35	; 0x23
 800a130:	fa00 f203 	lsl.w	r2, r0, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	631a      	str	r2, [r3, #48]	; 0x30
 800a13c:	e023      	b.n	800a186 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	3b41      	subs	r3, #65	; 0x41
 800a150:	221f      	movs	r2, #31
 800a152:	fa02 f303 	lsl.w	r3, r2, r3
 800a156:	43da      	mvns	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	400a      	ands	r2, r1
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4618      	mov	r0, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	3b41      	subs	r3, #65	; 0x41
 800a17a:	fa00 f203 	lsl.w	r2, r0, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a186:	4b29      	ldr	r3, [pc, #164]	; (800a22c <HAL_ADC_ConfigChannel+0x250>)
 800a188:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a28      	ldr	r2, [pc, #160]	; (800a230 <HAL_ADC_ConfigChannel+0x254>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d10f      	bne.n	800a1b4 <HAL_ADC_ConfigChannel+0x1d8>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b12      	cmp	r3, #18
 800a19a:	d10b      	bne.n	800a1b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a1d      	ldr	r2, [pc, #116]	; (800a230 <HAL_ADC_ConfigChannel+0x254>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d12b      	bne.n	800a216 <HAL_ADC_ConfigChannel+0x23a>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a1c      	ldr	r2, [pc, #112]	; (800a234 <HAL_ADC_ConfigChannel+0x258>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d003      	beq.n	800a1d0 <HAL_ADC_ConfigChannel+0x1f4>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b11      	cmp	r3, #17
 800a1ce:	d122      	bne.n	800a216 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a11      	ldr	r2, [pc, #68]	; (800a234 <HAL_ADC_ConfigChannel+0x258>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d111      	bne.n	800a216 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a1f2:	4b11      	ldr	r3, [pc, #68]	; (800a238 <HAL_ADC_ConfigChannel+0x25c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a11      	ldr	r2, [pc, #68]	; (800a23c <HAL_ADC_ConfigChannel+0x260>)
 800a1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fc:	0c9a      	lsrs	r2, r3, #18
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a208:	e002      	b.n	800a210 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1f9      	bne.n	800a20a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	40012300 	.word	0x40012300
 800a230:	40012000 	.word	0x40012000
 800a234:	10000012 	.word	0x10000012
 800a238:	20000000 	.word	0x20000000
 800a23c:	431bde83 	.word	0x431bde83

0800a240 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a248:	4b79      	ldr	r3, [pc, #484]	; (800a430 <ADC_Init+0x1f0>)
 800a24a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	431a      	orrs	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6859      	ldr	r1, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	021a      	lsls	r2, r3, #8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6859      	ldr	r1, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6899      	ldr	r1, [r3, #8]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d2:	4a58      	ldr	r2, [pc, #352]	; (800a434 <ADC_Init+0x1f4>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d022      	beq.n	800a31e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6899      	ldr	r1, [r3, #8]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6899      	ldr	r1, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	609a      	str	r2, [r3, #8]
 800a31c:	e00f      	b.n	800a33e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a32c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a33c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0202 	bic.w	r2, r2, #2
 800a34c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6899      	ldr	r1, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7e1b      	ldrb	r3, [r3, #24]
 800a358:	005a      	lsls	r2, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01b      	beq.n	800a3a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a37a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a38a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6859      	ldr	r1, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	3b01      	subs	r3, #1
 800a398:	035a      	lsls	r2, r3, #13
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
 800a3a2:	e007      	b.n	800a3b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a3c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	051a      	lsls	r2, r3, #20
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6899      	ldr	r1, [r3, #8]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3f6:	025a      	lsls	r2, r3, #9
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689a      	ldr	r2, [r3, #8]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a40e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6899      	ldr	r1, [r3, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	029a      	lsls	r2, r3, #10
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	609a      	str	r2, [r3, #8]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	40012300 	.word	0x40012300
 800a434:	0f000001 	.word	0x0f000001

0800a438 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d13c      	bne.n	800a4cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d12b      	bne.n	800a4c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a470:	2b00      	cmp	r3, #0
 800a472:	d127      	bne.n	800a4c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d119      	bne.n	800a4c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0220 	bic.w	r2, r2, #32
 800a49e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d105      	bne.n	800a4c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4bc:	f043 0201 	orr.w	r2, r3, #1
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff fd6b 	bl	8009fa0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a4ca:	e00e      	b.n	800a4ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff fd75 	bl	8009fc8 <HAL_ADC_ErrorCallback>
}
 800a4de:	e004      	b.n	800a4ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fd57 	bl	8009fb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a506:	bf00      	nop
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2240      	movs	r2, #64	; 0x40
 800a520:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a526:	f043 0204 	orr.w	r2, r3, #4
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7ff fd4a 	bl	8009fc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a534:	bf00      	nop
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a54c:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <__NVIC_SetPriorityGrouping+0x44>)
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a558:	4013      	ands	r3, r2
 800a55a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a56c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a56e:	4a04      	ldr	r2, [pc, #16]	; (800a580 <__NVIC_SetPriorityGrouping+0x44>)
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	60d3      	str	r3, [r2, #12]
}
 800a574:	bf00      	nop
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr
 800a580:	e000ed00 	.word	0xe000ed00

0800a584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a588:	4b04      	ldr	r3, [pc, #16]	; (800a59c <__NVIC_GetPriorityGrouping+0x18>)
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	f003 0307 	and.w	r3, r3, #7
}
 800a592:	4618      	mov	r0, r3
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	e000ed00 	.word	0xe000ed00

0800a5a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	db0b      	blt.n	800a5ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f003 021f 	and.w	r2, r3, #31
 800a5b8:	4907      	ldr	r1, [pc, #28]	; (800a5d8 <__NVIC_EnableIRQ+0x38>)
 800a5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	e000e100 	.word	0xe000e100

0800a5dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	db0a      	blt.n	800a606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	490c      	ldr	r1, [pc, #48]	; (800a628 <__NVIC_SetPriority+0x4c>)
 800a5f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5fa:	0112      	lsls	r2, r2, #4
 800a5fc:	b2d2      	uxtb	r2, r2
 800a5fe:	440b      	add	r3, r1
 800a600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a604:	e00a      	b.n	800a61c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	4908      	ldr	r1, [pc, #32]	; (800a62c <__NVIC_SetPriority+0x50>)
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	f003 030f 	and.w	r3, r3, #15
 800a612:	3b04      	subs	r3, #4
 800a614:	0112      	lsls	r2, r2, #4
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	440b      	add	r3, r1
 800a61a:	761a      	strb	r2, [r3, #24]
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	e000e100 	.word	0xe000e100
 800a62c:	e000ed00 	.word	0xe000ed00

0800a630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a630:	b480      	push	{r7}
 800a632:	b089      	sub	sp, #36	; 0x24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	f1c3 0307 	rsb	r3, r3, #7
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	bf28      	it	cs
 800a64e:	2304      	movcs	r3, #4
 800a650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	3304      	adds	r3, #4
 800a656:	2b06      	cmp	r3, #6
 800a658:	d902      	bls.n	800a660 <NVIC_EncodePriority+0x30>
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	3b03      	subs	r3, #3
 800a65e:	e000      	b.n	800a662 <NVIC_EncodePriority+0x32>
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a664:	f04f 32ff 	mov.w	r2, #4294967295
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	fa02 f303 	lsl.w	r3, r2, r3
 800a66e:	43da      	mvns	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	401a      	ands	r2, r3
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a678:	f04f 31ff 	mov.w	r1, #4294967295
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	fa01 f303 	lsl.w	r3, r1, r3
 800a682:	43d9      	mvns	r1, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a688:	4313      	orrs	r3, r2
         );
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3724      	adds	r7, #36	; 0x24
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6a8:	d301      	bcc.n	800a6ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e00f      	b.n	800a6ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a6ae:	4a0a      	ldr	r2, [pc, #40]	; (800a6d8 <SysTick_Config+0x40>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a6b6:	210f      	movs	r1, #15
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	f7ff ff8e 	bl	800a5dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <SysTick_Config+0x40>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a6c6:	4b04      	ldr	r3, [pc, #16]	; (800a6d8 <SysTick_Config+0x40>)
 800a6c8:	2207      	movs	r2, #7
 800a6ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	e000e010 	.word	0xe000e010

0800a6dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ff29 	bl	800a53c <__NVIC_SetPriorityGrouping>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b086      	sub	sp, #24
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
 800a6fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a704:	f7ff ff3e 	bl	800a584 <__NVIC_GetPriorityGrouping>
 800a708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	6978      	ldr	r0, [r7, #20]
 800a710:	f7ff ff8e 	bl	800a630 <NVIC_EncodePriority>
 800a714:	4602      	mov	r2, r0
 800a716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff ff5d 	bl	800a5dc <__NVIC_SetPriority>
}
 800a722:	bf00      	nop
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	4603      	mov	r3, r0
 800a732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff ff31 	bl	800a5a0 <__NVIC_EnableIRQ>
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff ffa2 	bl	800a698 <SysTick_Config>
 800a754:	4603      	mov	r3, r0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
	...

0800a760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a76c:	f7ff fab4 	bl	8009cd8 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e099      	b.n	800a8b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0201 	bic.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a79c:	e00f      	b.n	800a7be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a79e:	f7ff fa9b 	bl	8009cd8 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	2b05      	cmp	r3, #5
 800a7aa:	d908      	bls.n	800a7be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e078      	b.n	800a8b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e8      	bne.n	800a79e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4b38      	ldr	r3, [pc, #224]	; (800a8b8 <HAL_DMA_Init+0x158>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b04      	cmp	r3, #4
 800a816:	d107      	bne.n	800a828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a820:	4313      	orrs	r3, r2
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d117      	bne.n	800a882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	4313      	orrs	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00e      	beq.n	800a882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fa9d 	bl	800ada4 <DMA_CheckFifoParam>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d008      	beq.n	800a882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2240      	movs	r2, #64	; 0x40
 800a874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a87e:	2301      	movs	r3, #1
 800a880:	e016      	b.n	800a8b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa54 	bl	800ad38 <DMA_CalcBaseAndBitshift>
 800a890:	4603      	mov	r3, r0
 800a892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a898:	223f      	movs	r2, #63	; 0x3f
 800a89a:	409a      	lsls	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	f010803f 	.word	0xf010803f

0800a8bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <HAL_DMA_Start_IT+0x26>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e040      	b.n	800a964 <HAL_DMA_Start_IT+0xa8>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d12f      	bne.n	800a956 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f9e6 	bl	800acdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a914:	223f      	movs	r2, #63	; 0x3f
 800a916:	409a      	lsls	r2, r3
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f042 0216 	orr.w	r2, r2, #22
 800a92a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 0208 	orr.w	r2, r2, #8
 800a942:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0201 	orr.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e005      	b.n	800a962 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a95e:	2302      	movs	r3, #2
 800a960:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a962:	7dfb      	ldrb	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d004      	beq.n	800a98a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2280      	movs	r2, #128	; 0x80
 800a984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e00c      	b.n	800a9a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2205      	movs	r2, #5
 800a98e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a9bc:	4b92      	ldr	r3, [pc, #584]	; (800ac08 <HAL_DMA_IRQHandler+0x258>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a92      	ldr	r2, [pc, #584]	; (800ac0c <HAL_DMA_IRQHandler+0x25c>)
 800a9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c6:	0a9b      	lsrs	r3, r3, #10
 800a9c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9da:	2208      	movs	r2, #8
 800a9dc:	409a      	lsls	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01a      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d013      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0204 	bic.w	r2, r2, #4
 800aa02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa08:	2208      	movs	r2, #8
 800aa0a:	409a      	lsls	r2, r3
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	2201      	movs	r2, #1
 800aa22:	409a      	lsls	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4013      	ands	r3, r2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d012      	beq.n	800aa52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00b      	beq.n	800aa52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3e:	2201      	movs	r2, #1
 800aa40:	409a      	lsls	r2, r3
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4a:	f043 0202 	orr.w	r2, r3, #2
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa56:	2204      	movs	r2, #4
 800aa58:	409a      	lsls	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d012      	beq.n	800aa88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa74:	2204      	movs	r2, #4
 800aa76:	409a      	lsls	r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa80:	f043 0204 	orr.w	r2, r3, #4
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8c:	2210      	movs	r2, #16
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4013      	ands	r3, r2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d043      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d03c      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaaa:	2210      	movs	r2, #16
 800aaac:	409a      	lsls	r2, r3
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d018      	beq.n	800aaf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d108      	bne.n	800aae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d024      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
 800aade:	e01f      	b.n	800ab20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d01b      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
 800aaf0:	e016      	b.n	800ab20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d107      	bne.n	800ab10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0208 	bic.w	r2, r2, #8
 800ab0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	2220      	movs	r2, #32
 800ab26:	409a      	lsls	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 808e 	beq.w	800ac4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8086 	beq.w	800ac4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab46:	2220      	movs	r2, #32
 800ab48:	409a      	lsls	r2, r3
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d136      	bne.n	800abc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0216 	bic.w	r2, r2, #22
 800ab68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695a      	ldr	r2, [r3, #20]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d103      	bne.n	800ab8a <HAL_DMA_IRQHandler+0x1da>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0208 	bic.w	r2, r2, #8
 800ab98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9e:	223f      	movs	r2, #63	; 0x3f
 800aba0:	409a      	lsls	r2, r3
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d07d      	beq.n	800acba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
        }
        return;
 800abc6:	e078      	b.n	800acba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01c      	beq.n	800ac10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d108      	bne.n	800abf6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d030      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	4798      	blx	r3
 800abf4:	e02b      	b.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d027      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
 800ac06:	e022      	b.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
 800ac08:	20000000 	.word	0x20000000
 800ac0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10f      	bne.n	800ac3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f022 0210 	bic.w	r2, r2, #16
 800ac2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d032      	beq.n	800acbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d022      	beq.n	800aca8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2205      	movs	r2, #5
 800ac66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0201 	bic.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d307      	bcc.n	800ac96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f2      	bne.n	800ac7a <HAL_DMA_IRQHandler+0x2ca>
 800ac94:	e000      	b.n	800ac98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ac96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
 800acb8:	e000      	b.n	800acbc <HAL_DMA_IRQHandler+0x30c>
        return;
 800acba:	bf00      	nop
    }
  }
}
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop

0800acc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	2b40      	cmp	r3, #64	; 0x40
 800ad08:	d108      	bne.n	800ad1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad1a:	e007      	b.n	800ad2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	60da      	str	r2, [r3, #12]
}
 800ad2c:	bf00      	nop
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	3b10      	subs	r3, #16
 800ad48:	4a14      	ldr	r2, [pc, #80]	; (800ad9c <DMA_CalcBaseAndBitshift+0x64>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	091b      	lsrs	r3, r3, #4
 800ad50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad52:	4a13      	ldr	r2, [pc, #76]	; (800ada0 <DMA_CalcBaseAndBitshift+0x68>)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d909      	bls.n	800ad7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad6e:	f023 0303 	bic.w	r3, r3, #3
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	659a      	str	r2, [r3, #88]	; 0x58
 800ad78:	e007      	b.n	800ad8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	aaaaaaab 	.word	0xaaaaaaab
 800ada0:	08019fe8 	.word	0x08019fe8

0800ada4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d11f      	bne.n	800adfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d855      	bhi.n	800ae70 <DMA_CheckFifoParam+0xcc>
 800adc4:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <DMA_CheckFifoParam+0x28>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800addd 	.word	0x0800addd
 800add0:	0800adef 	.word	0x0800adef
 800add4:	0800addd 	.word	0x0800addd
 800add8:	0800ae71 	.word	0x0800ae71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d045      	beq.n	800ae74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adec:	e042      	b.n	800ae74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800adf6:	d13f      	bne.n	800ae78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adfc:	e03c      	b.n	800ae78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae06:	d121      	bne.n	800ae4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d836      	bhi.n	800ae7c <DMA_CheckFifoParam+0xd8>
 800ae0e:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <DMA_CheckFifoParam+0x70>)
 800ae10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae2b 	.word	0x0800ae2b
 800ae1c:	0800ae25 	.word	0x0800ae25
 800ae20:	0800ae3d 	.word	0x0800ae3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	73fb      	strb	r3, [r7, #15]
      break;
 800ae28:	e02f      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d024      	beq.n	800ae80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae3a:	e021      	b.n	800ae80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae44:	d11e      	bne.n	800ae84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae4a:	e01b      	b.n	800ae84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d902      	bls.n	800ae58 <DMA_CheckFifoParam+0xb4>
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d003      	beq.n	800ae5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae56:	e018      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5c:	e015      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00e      	beq.n	800ae88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6e:	e00b      	b.n	800ae88 <DMA_CheckFifoParam+0xe4>
      break;
 800ae70:	bf00      	nop
 800ae72:	e00a      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae74:	bf00      	nop
 800ae76:	e008      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae78:	bf00      	nop
 800ae7a:	e006      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae7c:	bf00      	nop
 800ae7e:	e004      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae80:	bf00      	nop
 800ae82:	e002      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;   
 800ae84:	bf00      	nop
 800ae86:	e000      	b.n	800ae8a <DMA_CheckFifoParam+0xe6>
      break;
 800ae88:	bf00      	nop
    }
  } 
  
  return status; 
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b089      	sub	sp, #36	; 0x24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	e177      	b.n	800b1a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800aebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	4013      	ands	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	429a      	cmp	r2, r3
 800aece:	f040 8166 	bne.w	800b19e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d00b      	beq.n	800aef2 <HAL_GPIO_Init+0x5a>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d007      	beq.n	800aef2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aee6:	2b11      	cmp	r3, #17
 800aee8:	d003      	beq.n	800aef2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	2b12      	cmp	r3, #18
 800aef0:	d130      	bne.n	800af54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	2203      	movs	r2, #3
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	43db      	mvns	r3, r3
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	4013      	ands	r3, r2
 800af08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68da      	ldr	r2, [r3, #12]
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	fa02 f303 	lsl.w	r3, r2, r3
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	4313      	orrs	r3, r2
 800af1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af28:	2201      	movs	r2, #1
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	fa02 f303 	lsl.w	r3, r2, r3
 800af30:	43db      	mvns	r3, r3
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	4013      	ands	r3, r2
 800af36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	091b      	lsrs	r3, r3, #4
 800af3e:	f003 0201 	and.w	r2, r3, #1
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	fa02 f303 	lsl.w	r3, r2, r3
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69ba      	ldr	r2, [r7, #24]
 800af52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	005b      	lsls	r3, r3, #1
 800af5e:	2203      	movs	r2, #3
 800af60:	fa02 f303 	lsl.w	r3, r2, r3
 800af64:	43db      	mvns	r3, r3
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	4013      	ands	r3, r2
 800af6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689a      	ldr	r2, [r3, #8]
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	fa02 f303 	lsl.w	r3, r2, r3
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d003      	beq.n	800af94 <HAL_GPIO_Init+0xfc>
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	2b12      	cmp	r3, #18
 800af92:	d123      	bne.n	800afdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	08da      	lsrs	r2, r3, #3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3208      	adds	r2, #8
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	f003 0307 	and.w	r3, r3, #7
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	220f      	movs	r2, #15
 800afac:	fa02 f303 	lsl.w	r3, r2, r3
 800afb0:	43db      	mvns	r3, r3
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	4013      	ands	r3, r2
 800afb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	691a      	ldr	r2, [r3, #16]
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	fa02 f303 	lsl.w	r3, r2, r3
 800afc8:	69ba      	ldr	r2, [r7, #24]
 800afca:	4313      	orrs	r3, r2
 800afcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	08da      	lsrs	r2, r3, #3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3208      	adds	r2, #8
 800afd6:	69b9      	ldr	r1, [r7, #24]
 800afd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	2203      	movs	r2, #3
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	43db      	mvns	r3, r3
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	4013      	ands	r3, r2
 800aff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f003 0203 	and.w	r2, r3, #3
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	4313      	orrs	r3, r2
 800b008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	69ba      	ldr	r2, [r7, #24]
 800b00e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 80c0 	beq.w	800b19e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	4b65      	ldr	r3, [pc, #404]	; (800b1b8 <HAL_GPIO_Init+0x320>)
 800b024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b026:	4a64      	ldr	r2, [pc, #400]	; (800b1b8 <HAL_GPIO_Init+0x320>)
 800b028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b02c:	6453      	str	r3, [r2, #68]	; 0x44
 800b02e:	4b62      	ldr	r3, [pc, #392]	; (800b1b8 <HAL_GPIO_Init+0x320>)
 800b030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b03a:	4a60      	ldr	r2, [pc, #384]	; (800b1bc <HAL_GPIO_Init+0x324>)
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	089b      	lsrs	r3, r3, #2
 800b040:	3302      	adds	r3, #2
 800b042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	220f      	movs	r2, #15
 800b052:	fa02 f303 	lsl.w	r3, r2, r3
 800b056:	43db      	mvns	r3, r3
 800b058:	69ba      	ldr	r2, [r7, #24]
 800b05a:	4013      	ands	r3, r2
 800b05c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a57      	ldr	r2, [pc, #348]	; (800b1c0 <HAL_GPIO_Init+0x328>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d037      	beq.n	800b0d6 <HAL_GPIO_Init+0x23e>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a56      	ldr	r2, [pc, #344]	; (800b1c4 <HAL_GPIO_Init+0x32c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d031      	beq.n	800b0d2 <HAL_GPIO_Init+0x23a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a55      	ldr	r2, [pc, #340]	; (800b1c8 <HAL_GPIO_Init+0x330>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d02b      	beq.n	800b0ce <HAL_GPIO_Init+0x236>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a54      	ldr	r2, [pc, #336]	; (800b1cc <HAL_GPIO_Init+0x334>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d025      	beq.n	800b0ca <HAL_GPIO_Init+0x232>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a53      	ldr	r2, [pc, #332]	; (800b1d0 <HAL_GPIO_Init+0x338>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d01f      	beq.n	800b0c6 <HAL_GPIO_Init+0x22e>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a52      	ldr	r2, [pc, #328]	; (800b1d4 <HAL_GPIO_Init+0x33c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d019      	beq.n	800b0c2 <HAL_GPIO_Init+0x22a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a51      	ldr	r2, [pc, #324]	; (800b1d8 <HAL_GPIO_Init+0x340>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d013      	beq.n	800b0be <HAL_GPIO_Init+0x226>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a50      	ldr	r2, [pc, #320]	; (800b1dc <HAL_GPIO_Init+0x344>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d00d      	beq.n	800b0ba <HAL_GPIO_Init+0x222>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a4f      	ldr	r2, [pc, #316]	; (800b1e0 <HAL_GPIO_Init+0x348>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d007      	beq.n	800b0b6 <HAL_GPIO_Init+0x21e>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a4e      	ldr	r2, [pc, #312]	; (800b1e4 <HAL_GPIO_Init+0x34c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d101      	bne.n	800b0b2 <HAL_GPIO_Init+0x21a>
 800b0ae:	2309      	movs	r3, #9
 800b0b0:	e012      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0b2:	230a      	movs	r3, #10
 800b0b4:	e010      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0b6:	2308      	movs	r3, #8
 800b0b8:	e00e      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0ba:	2307      	movs	r3, #7
 800b0bc:	e00c      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0be:	2306      	movs	r3, #6
 800b0c0:	e00a      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0c2:	2305      	movs	r3, #5
 800b0c4:	e008      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0c6:	2304      	movs	r3, #4
 800b0c8:	e006      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e004      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e002      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <HAL_GPIO_Init+0x240>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	69fa      	ldr	r2, [r7, #28]
 800b0da:	f002 0203 	and.w	r2, r2, #3
 800b0de:	0092      	lsls	r2, r2, #2
 800b0e0:	4093      	lsls	r3, r2
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0e8:	4934      	ldr	r1, [pc, #208]	; (800b1bc <HAL_GPIO_Init+0x324>)
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	089b      	lsrs	r3, r3, #2
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b0f6:	4b3c      	ldr	r3, [pc, #240]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	43db      	mvns	r3, r3
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	4013      	ands	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b11a:	4a33      	ldr	r2, [pc, #204]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b120:	4b31      	ldr	r3, [pc, #196]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	43db      	mvns	r3, r3
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	4013      	ands	r3, r2
 800b12e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	4313      	orrs	r3, r2
 800b142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b144:	4a28      	ldr	r2, [pc, #160]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b14a:	4b27      	ldr	r3, [pc, #156]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	43db      	mvns	r3, r3
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	4013      	ands	r3, r2
 800b158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b16e:	4a1e      	ldr	r2, [pc, #120]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	43db      	mvns	r3, r3
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	4013      	ands	r3, r2
 800b182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	4313      	orrs	r3, r2
 800b196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b198:	4a13      	ldr	r2, [pc, #76]	; (800b1e8 <HAL_GPIO_Init+0x350>)
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	2b0f      	cmp	r3, #15
 800b1a8:	f67f ae84 	bls.w	800aeb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	3724      	adds	r7, #36	; 0x24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	40023800 	.word	0x40023800
 800b1bc:	40013800 	.word	0x40013800
 800b1c0:	40020000 	.word	0x40020000
 800b1c4:	40020400 	.word	0x40020400
 800b1c8:	40020800 	.word	0x40020800
 800b1cc:	40020c00 	.word	0x40020c00
 800b1d0:	40021000 	.word	0x40021000
 800b1d4:	40021400 	.word	0x40021400
 800b1d8:	40021800 	.word	0x40021800
 800b1dc:	40021c00 	.word	0x40021c00
 800b1e0:	40022000 	.word	0x40022000
 800b1e4:	40022400 	.word	0x40022400
 800b1e8:	40013c00 	.word	0x40013c00

0800b1ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	887b      	ldrh	r3, [r7, #2]
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b204:	2301      	movs	r3, #1
 800b206:	73fb      	strb	r3, [r7, #15]
 800b208:	e001      	b.n	800b20e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	807b      	strh	r3, [r7, #2]
 800b228:	4613      	mov	r3, r2
 800b22a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b22c:	787b      	ldrb	r3, [r7, #1]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b232:	887a      	ldrh	r2, [r7, #2]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b238:	e003      	b.n	800b242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b23a:	887b      	ldrh	r3, [r7, #2]
 800b23c:	041a      	lsls	r2, r3, #16
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	619a      	str	r2, [r3, #24]
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
	...

0800b250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e11f      	b.n	800b4a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7fb fe62 	bl	8006f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2224      	movs	r2, #36	; 0x24
 800b280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f022 0201 	bic.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b2b4:	f001 f96e 	bl	800c594 <HAL_RCC_GetPCLK1Freq>
 800b2b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	4a7b      	ldr	r2, [pc, #492]	; (800b4ac <HAL_I2C_Init+0x25c>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d807      	bhi.n	800b2d4 <HAL_I2C_Init+0x84>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4a7a      	ldr	r2, [pc, #488]	; (800b4b0 <HAL_I2C_Init+0x260>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	bf94      	ite	ls
 800b2cc:	2301      	movls	r3, #1
 800b2ce:	2300      	movhi	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	e006      	b.n	800b2e2 <HAL_I2C_Init+0x92>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	4a77      	ldr	r2, [pc, #476]	; (800b4b4 <HAL_I2C_Init+0x264>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	bf94      	ite	ls
 800b2dc:	2301      	movls	r3, #1
 800b2de:	2300      	movhi	r3, #0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e0db      	b.n	800b4a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4a72      	ldr	r2, [pc, #456]	; (800b4b8 <HAL_I2C_Init+0x268>)
 800b2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f2:	0c9b      	lsrs	r3, r3, #18
 800b2f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	430a      	orrs	r2, r1
 800b308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4a64      	ldr	r2, [pc, #400]	; (800b4ac <HAL_I2C_Init+0x25c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d802      	bhi.n	800b324 <HAL_I2C_Init+0xd4>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	3301      	adds	r3, #1
 800b322:	e009      	b.n	800b338 <HAL_I2C_Init+0xe8>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b32a:	fb02 f303 	mul.w	r3, r2, r3
 800b32e:	4a63      	ldr	r2, [pc, #396]	; (800b4bc <HAL_I2C_Init+0x26c>)
 800b330:	fba2 2303 	umull	r2, r3, r2, r3
 800b334:	099b      	lsrs	r3, r3, #6
 800b336:	3301      	adds	r3, #1
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	6812      	ldr	r2, [r2, #0]
 800b33c:	430b      	orrs	r3, r1
 800b33e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	69db      	ldr	r3, [r3, #28]
 800b346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b34a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	4956      	ldr	r1, [pc, #344]	; (800b4ac <HAL_I2C_Init+0x25c>)
 800b354:	428b      	cmp	r3, r1
 800b356:	d80d      	bhi.n	800b374 <HAL_I2C_Init+0x124>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	1e59      	subs	r1, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	fbb1 f3f3 	udiv	r3, r1, r3
 800b366:	3301      	adds	r3, #1
 800b368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b36c:	2b04      	cmp	r3, #4
 800b36e:	bf38      	it	cc
 800b370:	2304      	movcc	r3, #4
 800b372:	e04f      	b.n	800b414 <HAL_I2C_Init+0x1c4>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d111      	bne.n	800b3a0 <HAL_I2C_Init+0x150>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	1e58      	subs	r0, r3, #1
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6859      	ldr	r1, [r3, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	440b      	add	r3, r1
 800b38a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b38e:	3301      	adds	r3, #1
 800b390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b394:	2b00      	cmp	r3, #0
 800b396:	bf0c      	ite	eq
 800b398:	2301      	moveq	r3, #1
 800b39a:	2300      	movne	r3, #0
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	e012      	b.n	800b3c6 <HAL_I2C_Init+0x176>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	1e58      	subs	r0, r3, #1
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6859      	ldr	r1, [r3, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	0099      	lsls	r1, r3, #2
 800b3b0:	440b      	add	r3, r1
 800b3b2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bf0c      	ite	eq
 800b3c0:	2301      	moveq	r3, #1
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <HAL_I2C_Init+0x17e>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e022      	b.n	800b414 <HAL_I2C_Init+0x1c4>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10e      	bne.n	800b3f4 <HAL_I2C_Init+0x1a4>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	1e58      	subs	r0, r3, #1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6859      	ldr	r1, [r3, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	440b      	add	r3, r1
 800b3e4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3f2:	e00f      	b.n	800b414 <HAL_I2C_Init+0x1c4>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	1e58      	subs	r0, r3, #1
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6859      	ldr	r1, [r3, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	440b      	add	r3, r1
 800b402:	0099      	lsls	r1, r3, #2
 800b404:	440b      	add	r3, r1
 800b406:	fbb0 f3f3 	udiv	r3, r0, r3
 800b40a:	3301      	adds	r3, #1
 800b40c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	6809      	ldr	r1, [r1, #0]
 800b418:	4313      	orrs	r3, r2
 800b41a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	69da      	ldr	r2, [r3, #28]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b442:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6911      	ldr	r1, [r2, #16]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	68d2      	ldr	r2, [r2, #12]
 800b44e:	4311      	orrs	r1, r2
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6812      	ldr	r2, [r2, #0]
 800b454:	430b      	orrs	r3, r1
 800b456:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695a      	ldr	r2, [r3, #20]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	431a      	orrs	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f042 0201 	orr.w	r2, r2, #1
 800b482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	000186a0 	.word	0x000186a0
 800b4b0:	001e847f 	.word	0x001e847f
 800b4b4:	003d08ff 	.word	0x003d08ff
 800b4b8:	431bde83 	.word	0x431bde83
 800b4bc:	10624dd3 	.word	0x10624dd3

0800b4c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	607a      	str	r2, [r7, #4]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	817b      	strh	r3, [r7, #10]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b4d4:	f7fe fc00 	bl	8009cd8 <HAL_GetTick>
 800b4d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	f040 80e0 	bne.w	800b6a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	2319      	movs	r3, #25
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4970      	ldr	r1, [pc, #448]	; (800b6b4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 fc58 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b4fe:	2302      	movs	r3, #2
 800b500:	e0d3      	b.n	800b6aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d101      	bne.n	800b510 <HAL_I2C_Master_Transmit+0x50>
 800b50c:	2302      	movs	r3, #2
 800b50e:	e0cc      	b.n	800b6aa <HAL_I2C_Master_Transmit+0x1ea>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b01      	cmp	r3, #1
 800b524:	d007      	beq.n	800b536 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f042 0201 	orr.w	r2, r2, #1
 800b534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2221      	movs	r2, #33	; 0x21
 800b54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2210      	movs	r2, #16
 800b552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	893a      	ldrh	r2, [r7, #8]
 800b566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4a50      	ldr	r2, [pc, #320]	; (800b6b8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b576:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b578:	8979      	ldrh	r1, [r7, #10]
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	6a3a      	ldr	r2, [r7, #32]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 fac2 	bl	800bb08 <I2C_MasterRequestWrite>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e08d      	b.n	800b6aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b58e:	2300      	movs	r3, #0
 800b590:	613b      	str	r3, [r7, #16]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b5a4:	e066      	b.n	800b674 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	6a39      	ldr	r1, [r7, #32]
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 fcd2 	bl	800bf54 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00d      	beq.n	800b5d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d107      	bne.n	800b5ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e06b      	b.n	800b6aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	781a      	ldrb	r2, [r3, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d11b      	bne.n	800b648 <HAL_I2C_Master_Transmit+0x188>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b614:	2b00      	cmp	r3, #0
 800b616:	d017      	beq.n	800b648 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	781a      	ldrb	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b632:	b29b      	uxth	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	b29a      	uxth	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b640:	3b01      	subs	r3, #1
 800b642:	b29a      	uxth	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	6a39      	ldr	r1, [r7, #32]
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 fcc2 	bl	800bfd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00d      	beq.n	800b674 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	d107      	bne.n	800b670 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b66e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e01a      	b.n	800b6aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d194      	bne.n	800b5a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b68a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2220      	movs	r2, #32
 800b690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e000      	b.n	800b6aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b6a8:	2302      	movs	r3, #2
  }
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	00100002 	.word	0x00100002
 800b6b8:	ffff0000 	.word	0xffff0000

0800b6bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08c      	sub	sp, #48	; 0x30
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	607a      	str	r2, [r7, #4]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	817b      	strh	r3, [r7, #10]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6d0:	f7fe fb02 	bl	8009cd8 <HAL_GetTick>
 800b6d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	f040 820b 	bne.w	800bafa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2319      	movs	r3, #25
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	497c      	ldr	r1, [pc, #496]	; (800b8e0 <HAL_I2C_Master_Receive+0x224>)
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f000 fb5a 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d001      	beq.n	800b6fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	e1fe      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_I2C_Master_Receive+0x50>
 800b708:	2302      	movs	r3, #2
 800b70a:	e1f7      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d007      	beq.n	800b732 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f042 0201 	orr.w	r2, r2, #1
 800b730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2222      	movs	r2, #34	; 0x22
 800b746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2210      	movs	r2, #16
 800b74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	893a      	ldrh	r2, [r7, #8]
 800b762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4a5c      	ldr	r2, [pc, #368]	; (800b8e4 <HAL_I2C_Master_Receive+0x228>)
 800b772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b774:	8979      	ldrh	r1, [r7, #10]
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 fa46 	bl	800bc0c <I2C_MasterRequestRead>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e1b8      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d113      	bne.n	800b7ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b792:	2300      	movs	r3, #0
 800b794:	623b      	str	r3, [r7, #32]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	623b      	str	r3, [r7, #32]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	623b      	str	r3, [r7, #32]
 800b7a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	e18c      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d11b      	bne.n	800b7fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61fb      	str	r3, [r7, #28]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	61fb      	str	r3, [r7, #28]
 800b7e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	e16c      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d11b      	bne.n	800b83a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b810:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	61bb      	str	r3, [r7, #24]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	e14c      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b860:	e138      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b866:	2b03      	cmp	r3, #3
 800b868:	f200 80f1 	bhi.w	800ba4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b870:	2b01      	cmp	r3, #1
 800b872:	d123      	bne.n	800b8bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 fbed 	bl	800c058 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e139      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	691a      	ldr	r2, [r3, #16]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	b2d2      	uxtb	r2, r2
 800b894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8ba:	e10b      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d14e      	bne.n	800b962 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	4906      	ldr	r1, [pc, #24]	; (800b8e8 <HAL_I2C_Master_Receive+0x22c>)
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 fa6a 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d008      	beq.n	800b8ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e10e      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
 800b8de:	bf00      	nop
 800b8e0:	00100002 	.word	0x00100002
 800b8e4:	ffff0000 	.word	0xffff0000
 800b8e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	691a      	ldr	r2, [r3, #16]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	b2d2      	uxtb	r2, r2
 800b908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b924:	b29b      	uxth	r3, r3
 800b926:	3b01      	subs	r3, #1
 800b928:	b29a      	uxth	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	691a      	ldr	r2, [r3, #16]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b938:	b2d2      	uxtb	r2, r2
 800b93a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94a:	3b01      	subs	r3, #1
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b956:	b29b      	uxth	r3, r3
 800b958:	3b01      	subs	r3, #1
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b960:	e0b8      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	2200      	movs	r2, #0
 800b96a:	4966      	ldr	r1, [pc, #408]	; (800bb04 <HAL_I2C_Master_Receive+0x448>)
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 fa1b 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e0bf      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b98a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	b2d2      	uxtb	r2, r2
 800b998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	494f      	ldr	r1, [pc, #316]	; (800bb04 <HAL_I2C_Master_Receive+0x448>)
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f9ed 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e091      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	691a      	ldr	r2, [r3, #16]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	b2d2      	uxtb	r2, r2
 800b9f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba04:	3b01      	subs	r3, #1
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	691a      	ldr	r2, [r3, #16]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	3b01      	subs	r3, #1
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba4c:	e042      	b.n	800bad4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 fb00 	bl	800c058 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e04c      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	691a      	ldr	r2, [r3, #16]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	b2d2      	uxtb	r2, r2
 800ba6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d118      	bne.n	800bad4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baca:	b29b      	uxth	r3, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f47f aec2 	bne.w	800b862 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	e000      	b.n	800bafc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bafa:	2302      	movs	r3, #2
  }
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3728      	adds	r7, #40	; 0x28
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	00010004 	.word	0x00010004

0800bb08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af02      	add	r7, sp, #8
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	607a      	str	r2, [r7, #4]
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	460b      	mov	r3, r1
 800bb16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d006      	beq.n	800bb32 <I2C_MasterRequestWrite+0x2a>
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d003      	beq.n	800bb32 <I2C_MasterRequestWrite+0x2a>
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb30:	d108      	bne.n	800bb44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	e00b      	b.n	800bb5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb48:	2b12      	cmp	r3, #18
 800bb4a:	d107      	bne.n	800bb5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 f91d 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00d      	beq.n	800bb90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb82:	d103      	bne.n	800bb8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e035      	b.n	800bbfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb98:	d108      	bne.n	800bbac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bb9a:	897b      	ldrh	r3, [r7, #10]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	461a      	mov	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bba8:	611a      	str	r2, [r3, #16]
 800bbaa:	e01b      	b.n	800bbe4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bbac:	897b      	ldrh	r3, [r7, #10]
 800bbae:	11db      	asrs	r3, r3, #7
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	f003 0306 	and.w	r3, r3, #6
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	f063 030f 	orn	r3, r3, #15
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	490e      	ldr	r1, [pc, #56]	; (800bc04 <I2C_MasterRequestWrite+0xfc>)
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f943 	bl	800be56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e010      	b.n	800bbfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bbda:	897b      	ldrh	r3, [r7, #10]
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4907      	ldr	r1, [pc, #28]	; (800bc08 <I2C_MasterRequestWrite+0x100>)
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 f933 	bl	800be56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	00010008 	.word	0x00010008
 800bc08:	00010002 	.word	0x00010002

0800bc0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b088      	sub	sp, #32
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	607a      	str	r2, [r7, #4]
 800bc16:	603b      	str	r3, [r7, #0]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b08      	cmp	r3, #8
 800bc36:	d006      	beq.n	800bc46 <I2C_MasterRequestRead+0x3a>
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d003      	beq.n	800bc46 <I2C_MasterRequestRead+0x3a>
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc44:	d108      	bne.n	800bc58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	e00b      	b.n	800bc70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5c:	2b11      	cmp	r3, #17
 800bc5e:	d107      	bne.n	800bc70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f000 f893 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00d      	beq.n	800bca4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc96:	d103      	bne.n	800bca0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e079      	b.n	800bd98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcac:	d108      	bne.n	800bcc0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bcae:	897b      	ldrh	r3, [r7, #10]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	f043 0301 	orr.w	r3, r3, #1
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	611a      	str	r2, [r3, #16]
 800bcbe:	e05f      	b.n	800bd80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bcc0:	897b      	ldrh	r3, [r7, #10]
 800bcc2:	11db      	asrs	r3, r3, #7
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	f003 0306 	and.w	r3, r3, #6
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	f063 030f 	orn	r3, r3, #15
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	4930      	ldr	r1, [pc, #192]	; (800bda0 <I2C_MasterRequestRead+0x194>)
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 f8b9 	bl	800be56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e054      	b.n	800bd98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bcee:	897b      	ldrh	r3, [r7, #10]
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4929      	ldr	r1, [pc, #164]	; (800bda4 <I2C_MasterRequestRead+0x198>)
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f000 f8a9 	bl	800be56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e044      	b.n	800bd98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd0e:	2300      	movs	r3, #0
 800bd10:	613b      	str	r3, [r7, #16]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	695b      	ldr	r3, [r3, #20]
 800bd18:	613b      	str	r3, [r7, #16]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 f831 	bl	800bda8 <I2C_WaitOnFlagUntilTimeout>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00d      	beq.n	800bd68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd5a:	d103      	bne.n	800bd64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e017      	b.n	800bd98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bd68:	897b      	ldrh	r3, [r7, #10]
 800bd6a:	11db      	asrs	r3, r3, #7
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 0306 	and.w	r3, r3, #6
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	f063 030e 	orn	r3, r3, #14
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	4907      	ldr	r1, [pc, #28]	; (800bda4 <I2C_MasterRequestRead+0x198>)
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 f865 	bl	800be56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e000      	b.n	800bd98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	00010008 	.word	0x00010008
 800bda4:	00010002 	.word	0x00010002

0800bda8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	603b      	str	r3, [r7, #0]
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdb8:	e025      	b.n	800be06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc0:	d021      	beq.n	800be06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdc2:	f7fd ff89 	bl	8009cd8 <HAL_GetTick>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d302      	bcc.n	800bdd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d116      	bne.n	800be06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2220      	movs	r2, #32
 800bde2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	f043 0220 	orr.w	r2, r3, #32
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e023      	b.n	800be4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	0c1b      	lsrs	r3, r3, #16
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d10d      	bne.n	800be2c <I2C_WaitOnFlagUntilTimeout+0x84>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	43da      	mvns	r2, r3
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	4013      	ands	r3, r2
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bf0c      	ite	eq
 800be22:	2301      	moveq	r3, #1
 800be24:	2300      	movne	r3, #0
 800be26:	b2db      	uxtb	r3, r3
 800be28:	461a      	mov	r2, r3
 800be2a:	e00c      	b.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	43da      	mvns	r2, r3
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	4013      	ands	r3, r2
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bf0c      	ite	eq
 800be3e:	2301      	moveq	r3, #1
 800be40:	2300      	movne	r3, #0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	461a      	mov	r2, r3
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d0b6      	beq.n	800bdba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b084      	sub	sp, #16
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be64:	e051      	b.n	800bf0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be74:	d123      	bne.n	800bebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800be8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2220      	movs	r2, #32
 800be9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	f043 0204 	orr.w	r2, r3, #4
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e046      	b.n	800bf4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec4:	d021      	beq.n	800bf0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bec6:	f7fd ff07 	bl	8009cd8 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d302      	bcc.n	800bedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d116      	bne.n	800bf0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef6:	f043 0220 	orr.w	r2, r3, #32
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e020      	b.n	800bf4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	0c1b      	lsrs	r3, r3, #16
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d10c      	bne.n	800bf2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	43da      	mvns	r2, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	4013      	ands	r3, r2
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	bf14      	ite	ne
 800bf26:	2301      	movne	r3, #1
 800bf28:	2300      	moveq	r3, #0
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	e00b      	b.n	800bf46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	43da      	mvns	r2, r3
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bf14      	ite	ne
 800bf40:	2301      	movne	r3, #1
 800bf42:	2300      	moveq	r3, #0
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d18d      	bne.n	800be66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf60:	e02d      	b.n	800bfbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 f8ce 	bl	800c104 <I2C_IsAcknowledgeFailed>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e02d      	b.n	800bfce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf78:	d021      	beq.n	800bfbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf7a:	f7fd fead 	bl	8009cd8 <HAL_GetTick>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d302      	bcc.n	800bf90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d116      	bne.n	800bfbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfaa:	f043 0220 	orr.w	r2, r3, #32
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e007      	b.n	800bfce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc8:	2b80      	cmp	r3, #128	; 0x80
 800bfca:	d1ca      	bne.n	800bf62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b084      	sub	sp, #16
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bfe2:	e02d      	b.n	800c040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f000 f88d 	bl	800c104 <I2C_IsAcknowledgeFailed>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e02d      	b.n	800c050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffa:	d021      	beq.n	800c040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bffc:	f7fd fe6c 	bl	8009cd8 <HAL_GetTick>
 800c000:	4602      	mov	r2, r0
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d302      	bcc.n	800c012 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d116      	bne.n	800c040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02c:	f043 0220 	orr.w	r2, r3, #32
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e007      	b.n	800c050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	f003 0304 	and.w	r3, r3, #4
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d1ca      	bne.n	800bfe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c064:	e042      	b.n	800c0ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	695b      	ldr	r3, [r3, #20]
 800c06c:	f003 0310 	and.w	r3, r3, #16
 800c070:	2b10      	cmp	r3, #16
 800c072:	d119      	bne.n	800c0a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f06f 0210 	mvn.w	r2, #16
 800c07c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2220      	movs	r2, #32
 800c088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e029      	b.n	800c0fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0a8:	f7fd fe16 	bl	8009cd8 <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d302      	bcc.n	800c0be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d116      	bne.n	800c0ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2220      	movs	r2, #32
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d8:	f043 0220 	orr.w	r2, r3, #32
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e007      	b.n	800c0fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f6:	2b40      	cmp	r3, #64	; 0x40
 800c0f8:	d1b5      	bne.n	800c066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c11a:	d11b      	bne.n	800c154 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c124:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c140:	f043 0204 	orr.w	r2, r3, #4
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
	...

0800c164 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c16e:	2300      	movs	r3, #0
 800c170:	603b      	str	r3, [r7, #0]
 800c172:	4b20      	ldr	r3, [pc, #128]	; (800c1f4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c176:	4a1f      	ldr	r2, [pc, #124]	; (800c1f4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c17c:	6413      	str	r3, [r2, #64]	; 0x40
 800c17e:	4b1d      	ldr	r3, [pc, #116]	; (800c1f4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c18a:	4b1b      	ldr	r3, [pc, #108]	; (800c1f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c190:	f7fd fda2 	bl	8009cd8 <HAL_GetTick>
 800c194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c196:	e009      	b.n	800c1ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c198:	f7fd fd9e 	bl	8009cd8 <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1a6:	d901      	bls.n	800c1ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e01f      	b.n	800c1ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c1ac:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <HAL_PWREx_EnableOverDrive+0x98>)
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b8:	d1ee      	bne.n	800c198 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c1ba:	4b11      	ldr	r3, [pc, #68]	; (800c200 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c1c0:	f7fd fd8a 	bl	8009cd8 <HAL_GetTick>
 800c1c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c1c6:	e009      	b.n	800c1dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c1c8:	f7fd fd86 	bl	8009cd8 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1d6:	d901      	bls.n	800c1dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	e007      	b.n	800c1ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c1dc:	4b07      	ldr	r3, [pc, #28]	; (800c1fc <HAL_PWREx_EnableOverDrive+0x98>)
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e8:	d1ee      	bne.n	800c1c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	40023800 	.word	0x40023800
 800c1f8:	420e0040 	.word	0x420e0040
 800c1fc:	40007000 	.word	0x40007000
 800c200:	420e0044 	.word	0x420e0044

0800c204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e0cc      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c218:	4b68      	ldr	r3, [pc, #416]	; (800c3bc <HAL_RCC_ClockConfig+0x1b8>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 030f 	and.w	r3, r3, #15
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	429a      	cmp	r2, r3
 800c224:	d90c      	bls.n	800c240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c226:	4b65      	ldr	r3, [pc, #404]	; (800c3bc <HAL_RCC_ClockConfig+0x1b8>)
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	b2d2      	uxtb	r2, r2
 800c22c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c22e:	4b63      	ldr	r3, [pc, #396]	; (800c3bc <HAL_RCC_ClockConfig+0x1b8>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 030f 	and.w	r3, r3, #15
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d001      	beq.n	800c240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e0b8      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0302 	and.w	r3, r3, #2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d020      	beq.n	800c28e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	d005      	beq.n	800c264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c258:	4b59      	ldr	r3, [pc, #356]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	4a58      	ldr	r2, [pc, #352]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c25e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 0308 	and.w	r3, r3, #8
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d005      	beq.n	800c27c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c270:	4b53      	ldr	r3, [pc, #332]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	4a52      	ldr	r2, [pc, #328]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c27a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c27c:	4b50      	ldr	r3, [pc, #320]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	494d      	ldr	r1, [pc, #308]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d044      	beq.n	800c324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d107      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2a2:	4b47      	ldr	r3, [pc, #284]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d119      	bne.n	800c2e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e07f      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d003      	beq.n	800c2c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d107      	bne.n	800c2d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c2c2:	4b3f      	ldr	r3, [pc, #252]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d109      	bne.n	800c2e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e06f      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2d2:	4b3b      	ldr	r3, [pc, #236]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e067      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c2e2:	4b37      	ldr	r3, [pc, #220]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f023 0203 	bic.w	r2, r3, #3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	4934      	ldr	r1, [pc, #208]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c2f4:	f7fd fcf0 	bl	8009cd8 <HAL_GetTick>
 800c2f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2fa:	e00a      	b.n	800c312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2fc:	f7fd fcec 	bl	8009cd8 <HAL_GetTick>
 800c300:	4602      	mov	r2, r0
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	f241 3288 	movw	r2, #5000	; 0x1388
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d901      	bls.n	800c312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e04f      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c312:	4b2b      	ldr	r3, [pc, #172]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	f003 020c 	and.w	r2, r3, #12
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	429a      	cmp	r2, r3
 800c322:	d1eb      	bne.n	800c2fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c324:	4b25      	ldr	r3, [pc, #148]	; (800c3bc <HAL_RCC_ClockConfig+0x1b8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 030f 	and.w	r3, r3, #15
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d20c      	bcs.n	800c34c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c332:	4b22      	ldr	r3, [pc, #136]	; (800c3bc <HAL_RCC_ClockConfig+0x1b8>)
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	b2d2      	uxtb	r2, r2
 800c338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c33a:	4b20      	ldr	r3, [pc, #128]	; (800c3bc <HAL_RCC_ClockConfig+0x1b8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 030f 	and.w	r3, r3, #15
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d001      	beq.n	800c34c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	e032      	b.n	800c3b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b00      	cmp	r3, #0
 800c356:	d008      	beq.n	800c36a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c358:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	4916      	ldr	r1, [pc, #88]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c366:	4313      	orrs	r3, r2
 800c368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0308 	and.w	r3, r3, #8
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c376:	4b12      	ldr	r3, [pc, #72]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	490e      	ldr	r1, [pc, #56]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c386:	4313      	orrs	r3, r2
 800c388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c38a:	f000 f821 	bl	800c3d0 <HAL_RCC_GetSysClockFreq>
 800c38e:	4601      	mov	r1, r0
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <HAL_RCC_ClockConfig+0x1bc>)
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	091b      	lsrs	r3, r3, #4
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	4a0a      	ldr	r2, [pc, #40]	; (800c3c4 <HAL_RCC_ClockConfig+0x1c0>)
 800c39c:	5cd3      	ldrb	r3, [r2, r3]
 800c39e:	fa21 f303 	lsr.w	r3, r1, r3
 800c3a2:	4a09      	ldr	r2, [pc, #36]	; (800c3c8 <HAL_RCC_ClockConfig+0x1c4>)
 800c3a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c3a6:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <HAL_RCC_ClockConfig+0x1c8>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fd fc50 	bl	8009c50 <HAL_InitTick>

  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	40023c00 	.word	0x40023c00
 800c3c0:	40023800 	.word	0x40023800
 800c3c4:	08019fd0 	.word	0x08019fd0
 800c3c8:	20000000 	.word	0x20000000
 800c3cc:	20000004 	.word	0x20000004

0800c3d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3e6:	4b63      	ldr	r3, [pc, #396]	; (800c574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f003 030c 	and.w	r3, r3, #12
 800c3ee:	2b04      	cmp	r3, #4
 800c3f0:	d007      	beq.n	800c402 <HAL_RCC_GetSysClockFreq+0x32>
 800c3f2:	2b08      	cmp	r3, #8
 800c3f4:	d008      	beq.n	800c408 <HAL_RCC_GetSysClockFreq+0x38>
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f040 80b4 	bne.w	800c564 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c3fc:	4b5e      	ldr	r3, [pc, #376]	; (800c578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c3fe:	60bb      	str	r3, [r7, #8]
       break;
 800c400:	e0b3      	b.n	800c56a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c402:	4b5d      	ldr	r3, [pc, #372]	; (800c578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c404:	60bb      	str	r3, [r7, #8]
      break;
 800c406:	e0b0      	b.n	800c56a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c408:	4b5a      	ldr	r3, [pc, #360]	; (800c574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c412:	4b58      	ldr	r3, [pc, #352]	; (800c574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d04a      	beq.n	800c4b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c41e:	4b55      	ldr	r3, [pc, #340]	; (800c574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	099b      	lsrs	r3, r3, #6
 800c424:	f04f 0400 	mov.w	r4, #0
 800c428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c42c:	f04f 0200 	mov.w	r2, #0
 800c430:	ea03 0501 	and.w	r5, r3, r1
 800c434:	ea04 0602 	and.w	r6, r4, r2
 800c438:	4629      	mov	r1, r5
 800c43a:	4632      	mov	r2, r6
 800c43c:	f04f 0300 	mov.w	r3, #0
 800c440:	f04f 0400 	mov.w	r4, #0
 800c444:	0154      	lsls	r4, r2, #5
 800c446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c44a:	014b      	lsls	r3, r1, #5
 800c44c:	4619      	mov	r1, r3
 800c44e:	4622      	mov	r2, r4
 800c450:	1b49      	subs	r1, r1, r5
 800c452:	eb62 0206 	sbc.w	r2, r2, r6
 800c456:	f04f 0300 	mov.w	r3, #0
 800c45a:	f04f 0400 	mov.w	r4, #0
 800c45e:	0194      	lsls	r4, r2, #6
 800c460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c464:	018b      	lsls	r3, r1, #6
 800c466:	1a5b      	subs	r3, r3, r1
 800c468:	eb64 0402 	sbc.w	r4, r4, r2
 800c46c:	f04f 0100 	mov.w	r1, #0
 800c470:	f04f 0200 	mov.w	r2, #0
 800c474:	00e2      	lsls	r2, r4, #3
 800c476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c47a:	00d9      	lsls	r1, r3, #3
 800c47c:	460b      	mov	r3, r1
 800c47e:	4614      	mov	r4, r2
 800c480:	195b      	adds	r3, r3, r5
 800c482:	eb44 0406 	adc.w	r4, r4, r6
 800c486:	f04f 0100 	mov.w	r1, #0
 800c48a:	f04f 0200 	mov.w	r2, #0
 800c48e:	02a2      	lsls	r2, r4, #10
 800c490:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c494:	0299      	lsls	r1, r3, #10
 800c496:	460b      	mov	r3, r1
 800c498:	4614      	mov	r4, r2
 800c49a:	4618      	mov	r0, r3
 800c49c:	4621      	mov	r1, r4
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f04f 0400 	mov.w	r4, #0
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4623      	mov	r3, r4
 800c4a8:	f7f4 fc06 	bl	8000cb8 <__aeabi_uldivmod>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	e049      	b.n	800c548 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4b4:	4b2f      	ldr	r3, [pc, #188]	; (800c574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	099b      	lsrs	r3, r3, #6
 800c4ba:	f04f 0400 	mov.w	r4, #0
 800c4be:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c4c2:	f04f 0200 	mov.w	r2, #0
 800c4c6:	ea03 0501 	and.w	r5, r3, r1
 800c4ca:	ea04 0602 	and.w	r6, r4, r2
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	f04f 0300 	mov.w	r3, #0
 800c4d6:	f04f 0400 	mov.w	r4, #0
 800c4da:	0154      	lsls	r4, r2, #5
 800c4dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c4e0:	014b      	lsls	r3, r1, #5
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4622      	mov	r2, r4
 800c4e6:	1b49      	subs	r1, r1, r5
 800c4e8:	eb62 0206 	sbc.w	r2, r2, r6
 800c4ec:	f04f 0300 	mov.w	r3, #0
 800c4f0:	f04f 0400 	mov.w	r4, #0
 800c4f4:	0194      	lsls	r4, r2, #6
 800c4f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c4fa:	018b      	lsls	r3, r1, #6
 800c4fc:	1a5b      	subs	r3, r3, r1
 800c4fe:	eb64 0402 	sbc.w	r4, r4, r2
 800c502:	f04f 0100 	mov.w	r1, #0
 800c506:	f04f 0200 	mov.w	r2, #0
 800c50a:	00e2      	lsls	r2, r4, #3
 800c50c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c510:	00d9      	lsls	r1, r3, #3
 800c512:	460b      	mov	r3, r1
 800c514:	4614      	mov	r4, r2
 800c516:	195b      	adds	r3, r3, r5
 800c518:	eb44 0406 	adc.w	r4, r4, r6
 800c51c:	f04f 0100 	mov.w	r1, #0
 800c520:	f04f 0200 	mov.w	r2, #0
 800c524:	02a2      	lsls	r2, r4, #10
 800c526:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c52a:	0299      	lsls	r1, r3, #10
 800c52c:	460b      	mov	r3, r1
 800c52e:	4614      	mov	r4, r2
 800c530:	4618      	mov	r0, r3
 800c532:	4621      	mov	r1, r4
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f04f 0400 	mov.w	r4, #0
 800c53a:	461a      	mov	r2, r3
 800c53c:	4623      	mov	r3, r4
 800c53e:	f7f4 fbbb 	bl	8000cb8 <__aeabi_uldivmod>
 800c542:	4603      	mov	r3, r0
 800c544:	460c      	mov	r4, r1
 800c546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c548:	4b0a      	ldr	r3, [pc, #40]	; (800c574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	0c1b      	lsrs	r3, r3, #16
 800c54e:	f003 0303 	and.w	r3, r3, #3
 800c552:	3301      	adds	r3, #1
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c560:	60bb      	str	r3, [r7, #8]
      break;
 800c562:	e002      	b.n	800c56a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c564:	4b04      	ldr	r3, [pc, #16]	; (800c578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c566:	60bb      	str	r3, [r7, #8]
      break;
 800c568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c56a:	68bb      	ldr	r3, [r7, #8]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c574:	40023800 	.word	0x40023800
 800c578:	00f42400 	.word	0x00f42400

0800c57c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c580:	4b03      	ldr	r3, [pc, #12]	; (800c590 <HAL_RCC_GetHCLKFreq+0x14>)
 800c582:	681b      	ldr	r3, [r3, #0]
}
 800c584:	4618      	mov	r0, r3
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	20000000 	.word	0x20000000

0800c594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c598:	f7ff fff0 	bl	800c57c <HAL_RCC_GetHCLKFreq>
 800c59c:	4601      	mov	r1, r0
 800c59e:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	0a9b      	lsrs	r3, r3, #10
 800c5a4:	f003 0307 	and.w	r3, r3, #7
 800c5a8:	4a03      	ldr	r2, [pc, #12]	; (800c5b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5aa:	5cd3      	ldrb	r3, [r2, r3]
 800c5ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	40023800 	.word	0x40023800
 800c5b8:	08019fe0 	.word	0x08019fe0

0800c5bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c5c0:	f7ff ffdc 	bl	800c57c <HAL_RCC_GetHCLKFreq>
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	0b5b      	lsrs	r3, r3, #13
 800c5cc:	f003 0307 	and.w	r3, r3, #7
 800c5d0:	4a03      	ldr	r2, [pc, #12]	; (800c5e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5d2:	5cd3      	ldrb	r3, [r2, r3]
 800c5d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	40023800 	.word	0x40023800
 800c5e0:	08019fe0 	.word	0x08019fe0

0800c5e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00a      	beq.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c60c:	4b66      	ldr	r3, [pc, #408]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c612:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61a:	4963      	ldr	r1, [pc, #396]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00a      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c62e:	4b5e      	ldr	r3, [pc, #376]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c634:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63c:	495a      	ldr	r1, [pc, #360]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10b      	bne.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d105      	bne.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c664:	2b00      	cmp	r3, #0
 800c666:	d075      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c668:	4b50      	ldr	r3, [pc, #320]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c66e:	f7fd fb33 	bl	8009cd8 <HAL_GetTick>
 800c672:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c674:	e008      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c676:	f7fd fb2f 	bl	8009cd8 <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	2b02      	cmp	r3, #2
 800c682:	d901      	bls.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e1dc      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c688:	4b47      	ldr	r3, [pc, #284]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f0      	bne.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	019a      	lsls	r2, r3, #6
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	071b      	lsls	r3, r3, #28
 800c6ac:	493e      	ldr	r1, [pc, #248]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0302 	and.w	r3, r3, #2
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d01f      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c6c0:	4b39      	ldr	r3, [pc, #228]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6c6:	0f1b      	lsrs	r3, r3, #28
 800c6c8:	f003 0307 	and.w	r3, r3, #7
 800c6cc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	019a      	lsls	r2, r3, #6
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	061b      	lsls	r3, r3, #24
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	071b      	lsls	r3, r3, #28
 800c6e0:	4931      	ldr	r1, [pc, #196]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c6e8:	4b2f      	ldr	r3, [pc, #188]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ee:	f023 021f 	bic.w	r2, r3, #31
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	492b      	ldr	r1, [pc, #172]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00d      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	019a      	lsls	r2, r3, #6
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	061b      	lsls	r3, r3, #24
 800c718:	431a      	orrs	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	071b      	lsls	r3, r3, #28
 800c720:	4921      	ldr	r1, [pc, #132]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c722:	4313      	orrs	r3, r2
 800c724:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c728:	4b20      	ldr	r3, [pc, #128]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c72a:	2201      	movs	r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c72e:	f7fd fad3 	bl	8009cd8 <HAL_GetTick>
 800c732:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c734:	e008      	b.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c736:	f7fd facf 	bl	8009cd8 <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d901      	bls.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e17c      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c748:	4b17      	ldr	r3, [pc, #92]	; (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0f0      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f003 0304 	and.w	r3, r3, #4
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d112      	bne.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10c      	bne.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 80ce 	beq.w	800c916 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c77e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c782:	f040 80c8 	bne.w	800c916 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c786:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c78c:	f7fd faa4 	bl	8009cd8 <HAL_GetTick>
 800c790:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c792:	e00f      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c794:	f7fd faa0 	bl	8009cd8 <HAL_GetTick>
 800c798:	4602      	mov	r2, r0
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d908      	bls.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e14d      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c7a6:	bf00      	nop
 800c7a8:	40023800 	.word	0x40023800
 800c7ac:	42470068 	.word	0x42470068
 800c7b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c7b4:	4ba5      	ldr	r3, [pc, #660]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7c0:	d0e8      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 0304 	and.w	r3, r3, #4
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d02e      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c7ce:	4b9f      	ldr	r3, [pc, #636]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d4:	0c1b      	lsrs	r3, r3, #16
 800c7d6:	f003 0303 	and.w	r3, r3, #3
 800c7da:	3301      	adds	r3, #1
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c7e0:	4b9a      	ldr	r3, [pc, #616]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e6:	0f1b      	lsrs	r3, r3, #28
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	019a      	lsls	r2, r3, #6
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	085b      	lsrs	r3, r3, #1
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	041b      	lsls	r3, r3, #16
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	061b      	lsls	r3, r3, #24
 800c804:	431a      	orrs	r2, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	071b      	lsls	r3, r3, #28
 800c80a:	4990      	ldr	r1, [pc, #576]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c812:	4b8e      	ldr	r3, [pc, #568]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c818:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c820:	3b01      	subs	r3, #1
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	4989      	ldr	r1, [pc, #548]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c826:	4313      	orrs	r3, r2
 800c828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b00      	cmp	r3, #0
 800c836:	d02c      	beq.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c838:	4b84      	ldr	r3, [pc, #528]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c83e:	0c1b      	lsrs	r3, r3, #16
 800c840:	f003 0303 	and.w	r3, r3, #3
 800c844:	3301      	adds	r3, #1
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c84a:	4b80      	ldr	r3, [pc, #512]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c850:	0e1b      	lsrs	r3, r3, #24
 800c852:	f003 030f 	and.w	r3, r3, #15
 800c856:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	019a      	lsls	r2, r3, #6
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	3b01      	subs	r3, #1
 800c864:	041b      	lsls	r3, r3, #16
 800c866:	431a      	orrs	r2, r3
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	061b      	lsls	r3, r3, #24
 800c86c:	431a      	orrs	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	071b      	lsls	r3, r3, #28
 800c874:	4975      	ldr	r1, [pc, #468]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c876:	4313      	orrs	r3, r2
 800c878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c87c:	4b73      	ldr	r3, [pc, #460]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c882:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88a:	4970      	ldr	r1, [pc, #448]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c88c:	4313      	orrs	r3, r2
 800c88e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d024      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c8a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a6:	d11f      	bne.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8a8:	4b68      	ldr	r3, [pc, #416]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ae:	0e1b      	lsrs	r3, r3, #24
 800c8b0:	f003 030f 	and.w	r3, r3, #15
 800c8b4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c8b6:	4b65      	ldr	r3, [pc, #404]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8bc:	0f1b      	lsrs	r3, r3, #28
 800c8be:	f003 0307 	and.w	r3, r3, #7
 800c8c2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	019a      	lsls	r2, r3, #6
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	085b      	lsrs	r3, r3, #1
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	041b      	lsls	r3, r3, #16
 800c8d4:	431a      	orrs	r2, r3
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	061b      	lsls	r3, r3, #24
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	071b      	lsls	r3, r3, #28
 800c8e0:	495a      	ldr	r1, [pc, #360]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c8e8:	4b59      	ldr	r3, [pc, #356]	; (800ca50 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8ee:	f7fd f9f3 	bl	8009cd8 <HAL_GetTick>
 800c8f2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c8f4:	e008      	b.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c8f6:	f7fd f9ef 	bl	8009cd8 <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	2b02      	cmp	r3, #2
 800c902:	d901      	bls.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c904:	2303      	movs	r3, #3
 800c906:	e09c      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c908:	4b50      	ldr	r3, [pc, #320]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c914:	d1ef      	bne.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f003 0320 	and.w	r3, r3, #32
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 8083 	beq.w	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c924:	2300      	movs	r3, #0
 800c926:	60bb      	str	r3, [r7, #8]
 800c928:	4b48      	ldr	r3, [pc, #288]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92c:	4a47      	ldr	r2, [pc, #284]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c92e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c932:	6413      	str	r3, [r2, #64]	; 0x40
 800c934:	4b45      	ldr	r3, [pc, #276]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c93c:	60bb      	str	r3, [r7, #8]
 800c93e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c940:	4b44      	ldr	r3, [pc, #272]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a43      	ldr	r2, [pc, #268]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c94a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c94c:	f7fd f9c4 	bl	8009cd8 <HAL_GetTick>
 800c950:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c952:	e008      	b.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c954:	f7fd f9c0 	bl	8009cd8 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d901      	bls.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e06d      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c966:	4b3b      	ldr	r3, [pc, #236]	; (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0f0      	beq.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c972:	4b36      	ldr	r3, [pc, #216]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c97a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d02f      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d028      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c990:	4b2e      	ldr	r3, [pc, #184]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c998:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c99a:	4b2f      	ldr	r3, [pc, #188]	; (800ca58 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c99c:	2201      	movs	r2, #1
 800c99e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c9a0:	4b2d      	ldr	r3, [pc, #180]	; (800ca58 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c9a6:	4a29      	ldr	r2, [pc, #164]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c9ac:	4b27      	ldr	r3, [pc, #156]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d114      	bne.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c9b8:	f7fd f98e 	bl	8009cd8 <HAL_GetTick>
 800c9bc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9be:	e00a      	b.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9c0:	f7fd f98a 	bl	8009cd8 <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d901      	bls.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e035      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0ee      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9ee:	d10d      	bne.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c9f0:	4b16      	ldr	r3, [pc, #88]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca04:	4911      	ldr	r1, [pc, #68]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca06:	4313      	orrs	r3, r2
 800ca08:	608b      	str	r3, [r1, #8]
 800ca0a:	e005      	b.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ca0c:	4b0f      	ldr	r3, [pc, #60]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	4a0e      	ldr	r2, [pc, #56]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca16:	6093      	str	r3, [r2, #8]
 800ca18:	4b0c      	ldr	r3, [pc, #48]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca24:	4909      	ldr	r1, [pc, #36]	; (800ca4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca26:	4313      	orrs	r3, r2
 800ca28:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0310 	and.w	r3, r3, #16
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d004      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca3c:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ca3e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3720      	adds	r7, #32
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	40023800 	.word	0x40023800
 800ca50:	42470070 	.word	0x42470070
 800ca54:	40007000 	.word	0x40007000
 800ca58:	42470e40 	.word	0x42470e40
 800ca5c:	424711e0 	.word	0x424711e0

0800ca60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d075      	beq.n	800cb64 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ca78:	4ba2      	ldr	r3, [pc, #648]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f003 030c 	and.w	r3, r3, #12
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d00c      	beq.n	800ca9e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca84:	4b9f      	ldr	r3, [pc, #636]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ca8c:	2b08      	cmp	r3, #8
 800ca8e:	d112      	bne.n	800cab6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca90:	4b9c      	ldr	r3, [pc, #624]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca9c:	d10b      	bne.n	800cab6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca9e:	4b99      	ldr	r3, [pc, #612]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d05b      	beq.n	800cb62 <HAL_RCC_OscConfig+0x102>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d157      	bne.n	800cb62 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	e20b      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cabe:	d106      	bne.n	800cace <HAL_RCC_OscConfig+0x6e>
 800cac0:	4b90      	ldr	r3, [pc, #576]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a8f      	ldr	r2, [pc, #572]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	e01d      	b.n	800cb0a <HAL_RCC_OscConfig+0xaa>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cad6:	d10c      	bne.n	800caf2 <HAL_RCC_OscConfig+0x92>
 800cad8:	4b8a      	ldr	r3, [pc, #552]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a89      	ldr	r2, [pc, #548]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	4b87      	ldr	r3, [pc, #540]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a86      	ldr	r2, [pc, #536]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800caea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	e00b      	b.n	800cb0a <HAL_RCC_OscConfig+0xaa>
 800caf2:	4b84      	ldr	r3, [pc, #528]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a83      	ldr	r2, [pc, #524]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800caf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	4b81      	ldr	r3, [pc, #516]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a80      	ldr	r2, [pc, #512]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d013      	beq.n	800cb3a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb12:	f7fd f8e1 	bl	8009cd8 <HAL_GetTick>
 800cb16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb18:	e008      	b.n	800cb2c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb1a:	f7fd f8dd 	bl	8009cd8 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	2b64      	cmp	r3, #100	; 0x64
 800cb26:	d901      	bls.n	800cb2c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e1d0      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb2c:	4b75      	ldr	r3, [pc, #468]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0f0      	beq.n	800cb1a <HAL_RCC_OscConfig+0xba>
 800cb38:	e014      	b.n	800cb64 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb3a:	f7fd f8cd 	bl	8009cd8 <HAL_GetTick>
 800cb3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb40:	e008      	b.n	800cb54 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb42:	f7fd f8c9 	bl	8009cd8 <HAL_GetTick>
 800cb46:	4602      	mov	r2, r0
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	2b64      	cmp	r3, #100	; 0x64
 800cb4e:	d901      	bls.n	800cb54 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cb50:	2303      	movs	r3, #3
 800cb52:	e1bc      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb54:	4b6b      	ldr	r3, [pc, #428]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1f0      	bne.n	800cb42 <HAL_RCC_OscConfig+0xe2>
 800cb60:	e000      	b.n	800cb64 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d063      	beq.n	800cc38 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cb70:	4b64      	ldr	r3, [pc, #400]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f003 030c 	and.w	r3, r3, #12
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00b      	beq.n	800cb94 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb7c:	4b61      	ldr	r3, [pc, #388]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cb84:	2b08      	cmp	r3, #8
 800cb86:	d11c      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb88:	4b5e      	ldr	r3, [pc, #376]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d116      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb94:	4b5b      	ldr	r3, [pc, #364]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0302 	and.w	r3, r3, #2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d005      	beq.n	800cbac <HAL_RCC_OscConfig+0x14c>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d001      	beq.n	800cbac <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e190      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbac:	4b55      	ldr	r3, [pc, #340]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	4952      	ldr	r1, [pc, #328]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbc0:	e03a      	b.n	800cc38 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d020      	beq.n	800cc0c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cbca:	4b4f      	ldr	r3, [pc, #316]	; (800cd08 <HAL_RCC_OscConfig+0x2a8>)
 800cbcc:	2201      	movs	r2, #1
 800cbce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd0:	f7fd f882 	bl	8009cd8 <HAL_GetTick>
 800cbd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbd6:	e008      	b.n	800cbea <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbd8:	f7fd f87e 	bl	8009cd8 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d901      	bls.n	800cbea <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e171      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbea:	4b46      	ldr	r3, [pc, #280]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0f0      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbf6:	4b43      	ldr	r3, [pc, #268]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	493f      	ldr	r1, [pc, #252]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	600b      	str	r3, [r1, #0]
 800cc0a:	e015      	b.n	800cc38 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc0c:	4b3e      	ldr	r3, [pc, #248]	; (800cd08 <HAL_RCC_OscConfig+0x2a8>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc12:	f7fd f861 	bl	8009cd8 <HAL_GetTick>
 800cc16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc18:	e008      	b.n	800cc2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc1a:	f7fd f85d 	bl	8009cd8 <HAL_GetTick>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d901      	bls.n	800cc2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e150      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc2c:	4b35      	ldr	r3, [pc, #212]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0302 	and.w	r3, r3, #2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1f0      	bne.n	800cc1a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0308 	and.w	r3, r3, #8
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d030      	beq.n	800cca6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d016      	beq.n	800cc7a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc4c:	4b2f      	ldr	r3, [pc, #188]	; (800cd0c <HAL_RCC_OscConfig+0x2ac>)
 800cc4e:	2201      	movs	r2, #1
 800cc50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc52:	f7fd f841 	bl	8009cd8 <HAL_GetTick>
 800cc56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc58:	e008      	b.n	800cc6c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc5a:	f7fd f83d 	bl	8009cd8 <HAL_GetTick>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d901      	bls.n	800cc6c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	e130      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc6c:	4b25      	ldr	r3, [pc, #148]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cc6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc70:	f003 0302 	and.w	r3, r3, #2
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d0f0      	beq.n	800cc5a <HAL_RCC_OscConfig+0x1fa>
 800cc78:	e015      	b.n	800cca6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc7a:	4b24      	ldr	r3, [pc, #144]	; (800cd0c <HAL_RCC_OscConfig+0x2ac>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc80:	f7fd f82a 	bl	8009cd8 <HAL_GetTick>
 800cc84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc86:	e008      	b.n	800cc9a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc88:	f7fd f826 	bl	8009cd8 <HAL_GetTick>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d901      	bls.n	800cc9a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e119      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc9a:	4b1a      	ldr	r3, [pc, #104]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800cc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1f0      	bne.n	800cc88 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0304 	and.w	r3, r3, #4
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 809f 	beq.w	800cdf2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccb8:	4b12      	ldr	r3, [pc, #72]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ccba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10f      	bne.n	800cce4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ccca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cccc:	4a0d      	ldr	r2, [pc, #52]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ccce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccd2:	6413      	str	r3, [r2, #64]	; 0x40
 800ccd4:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <HAL_RCC_OscConfig+0x2a4>)
 800ccd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cce0:	2301      	movs	r3, #1
 800cce2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cce4:	4b0a      	ldr	r3, [pc, #40]	; (800cd10 <HAL_RCC_OscConfig+0x2b0>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d120      	bne.n	800cd32 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ccf0:	4b07      	ldr	r3, [pc, #28]	; (800cd10 <HAL_RCC_OscConfig+0x2b0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a06      	ldr	r2, [pc, #24]	; (800cd10 <HAL_RCC_OscConfig+0x2b0>)
 800ccf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ccfc:	f7fc ffec 	bl	8009cd8 <HAL_GetTick>
 800cd00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd02:	e010      	b.n	800cd26 <HAL_RCC_OscConfig+0x2c6>
 800cd04:	40023800 	.word	0x40023800
 800cd08:	42470000 	.word	0x42470000
 800cd0c:	42470e80 	.word	0x42470e80
 800cd10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd14:	f7fc ffe0 	bl	8009cd8 <HAL_GetTick>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d901      	bls.n	800cd26 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e0d3      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd26:	4b6c      	ldr	r3, [pc, #432]	; (800ced8 <HAL_RCC_OscConfig+0x478>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0f0      	beq.n	800cd14 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d106      	bne.n	800cd48 <HAL_RCC_OscConfig+0x2e8>
 800cd3a:	4b68      	ldr	r3, [pc, #416]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3e:	4a67      	ldr	r2, [pc, #412]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd40:	f043 0301 	orr.w	r3, r3, #1
 800cd44:	6713      	str	r3, [r2, #112]	; 0x70
 800cd46:	e01c      	b.n	800cd82 <HAL_RCC_OscConfig+0x322>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	2b05      	cmp	r3, #5
 800cd4e:	d10c      	bne.n	800cd6a <HAL_RCC_OscConfig+0x30a>
 800cd50:	4b62      	ldr	r3, [pc, #392]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd54:	4a61      	ldr	r2, [pc, #388]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd56:	f043 0304 	orr.w	r3, r3, #4
 800cd5a:	6713      	str	r3, [r2, #112]	; 0x70
 800cd5c:	4b5f      	ldr	r3, [pc, #380]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd60:	4a5e      	ldr	r2, [pc, #376]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd62:	f043 0301 	orr.w	r3, r3, #1
 800cd66:	6713      	str	r3, [r2, #112]	; 0x70
 800cd68:	e00b      	b.n	800cd82 <HAL_RCC_OscConfig+0x322>
 800cd6a:	4b5c      	ldr	r3, [pc, #368]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd6e:	4a5b      	ldr	r2, [pc, #364]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd70:	f023 0301 	bic.w	r3, r3, #1
 800cd74:	6713      	str	r3, [r2, #112]	; 0x70
 800cd76:	4b59      	ldr	r3, [pc, #356]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7a:	4a58      	ldr	r2, [pc, #352]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cd7c:	f023 0304 	bic.w	r3, r3, #4
 800cd80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d015      	beq.n	800cdb6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd8a:	f7fc ffa5 	bl	8009cd8 <HAL_GetTick>
 800cd8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd90:	e00a      	b.n	800cda8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd92:	f7fc ffa1 	bl	8009cd8 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d901      	bls.n	800cda8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e092      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cda8:	4b4c      	ldr	r3, [pc, #304]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cdaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdac:	f003 0302 	and.w	r3, r3, #2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0ee      	beq.n	800cd92 <HAL_RCC_OscConfig+0x332>
 800cdb4:	e014      	b.n	800cde0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdb6:	f7fc ff8f 	bl	8009cd8 <HAL_GetTick>
 800cdba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdbc:	e00a      	b.n	800cdd4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdbe:	f7fc ff8b 	bl	8009cd8 <HAL_GetTick>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d901      	bls.n	800cdd4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e07c      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdd4:	4b41      	ldr	r3, [pc, #260]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd8:	f003 0302 	and.w	r3, r3, #2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1ee      	bne.n	800cdbe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d105      	bne.n	800cdf2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cde6:	4b3d      	ldr	r3, [pc, #244]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdea:	4a3c      	ldr	r2, [pc, #240]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cdec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d068      	beq.n	800cecc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cdfa:	4b38      	ldr	r3, [pc, #224]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	f003 030c 	and.w	r3, r3, #12
 800ce02:	2b08      	cmp	r3, #8
 800ce04:	d060      	beq.n	800cec8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d145      	bne.n	800ce9a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce0e:	4b34      	ldr	r3, [pc, #208]	; (800cee0 <HAL_RCC_OscConfig+0x480>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce14:	f7fc ff60 	bl	8009cd8 <HAL_GetTick>
 800ce18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce1a:	e008      	b.n	800ce2e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce1c:	f7fc ff5c 	bl	8009cd8 <HAL_GetTick>
 800ce20:	4602      	mov	r2, r0
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d901      	bls.n	800ce2e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e04f      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce2e:	4b2b      	ldr	r3, [pc, #172]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1f0      	bne.n	800ce1c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	69da      	ldr	r2, [r3, #28]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a1b      	ldr	r3, [r3, #32]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce48:	019b      	lsls	r3, r3, #6
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	085b      	lsrs	r3, r3, #1
 800ce52:	3b01      	subs	r3, #1
 800ce54:	041b      	lsls	r3, r3, #16
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5c:	061b      	lsls	r3, r3, #24
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce64:	071b      	lsls	r3, r3, #28
 800ce66:	491d      	ldr	r1, [pc, #116]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce6c:	4b1c      	ldr	r3, [pc, #112]	; (800cee0 <HAL_RCC_OscConfig+0x480>)
 800ce6e:	2201      	movs	r2, #1
 800ce70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce72:	f7fc ff31 	bl	8009cd8 <HAL_GetTick>
 800ce76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce78:	e008      	b.n	800ce8c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce7a:	f7fc ff2d 	bl	8009cd8 <HAL_GetTick>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d901      	bls.n	800ce8c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e020      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce8c:	4b13      	ldr	r3, [pc, #76]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0f0      	beq.n	800ce7a <HAL_RCC_OscConfig+0x41a>
 800ce98:	e018      	b.n	800cecc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce9a:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <HAL_RCC_OscConfig+0x480>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea0:	f7fc ff1a 	bl	8009cd8 <HAL_GetTick>
 800cea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cea6:	e008      	b.n	800ceba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cea8:	f7fc ff16 	bl	8009cd8 <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d901      	bls.n	800ceba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e009      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ceba:	4b08      	ldr	r3, [pc, #32]	; (800cedc <HAL_RCC_OscConfig+0x47c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f0      	bne.n	800cea8 <HAL_RCC_OscConfig+0x448>
 800cec6:	e001      	b.n	800cecc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e000      	b.n	800cece <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	40007000 	.word	0x40007000
 800cedc:	40023800 	.word	0x40023800
 800cee0:	42470060 	.word	0x42470060

0800cee4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e022      	b.n	800cf3c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7fa f895 	bl	8007038 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2203      	movs	r2, #3
 800cf12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f814 	bl	800cf44 <HAL_SD_InitCard>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e00a      	b.n	800cf3c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf44:	b5b0      	push	{r4, r5, r7, lr}
 800cf46:	b08e      	sub	sp, #56	; 0x38
 800cf48:	af04      	add	r7, sp, #16
 800cf4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cf54:	2300      	movs	r3, #0
 800cf56:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cf60:	2376      	movs	r3, #118	; 0x76
 800cf62:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681d      	ldr	r5, [r3, #0]
 800cf68:	466c      	mov	r4, sp
 800cf6a:	f107 0314 	add.w	r3, r7, #20
 800cf6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f003 fa87 	bl	8010490 <SDIO_Init>
 800cf82:	4603      	mov	r3, r0
 800cf84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e031      	b.n	800cff8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cf94:	4b1a      	ldr	r3, [pc, #104]	; (800d000 <HAL_SD_InitCard+0xbc>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f003 fabf 	bl	8010522 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cfa4:	4b16      	ldr	r3, [pc, #88]	; (800d000 <HAL_SD_InitCard+0xbc>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 ffc6 	bl	800df3c <SD_PowerON>
 800cfb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00b      	beq.n	800cfd0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e013      	b.n	800cff8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fee5 	bl	800dda0 <SD_InitCard>
 800cfd6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00b      	beq.n	800cff6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3728      	adds	r7, #40	; 0x28
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bdb0      	pop	{r4, r5, r7, pc}
 800d000:	422580a0 	.word	0x422580a0

0800d004 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08c      	sub	sp, #48	; 0x30
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d107      	bne.n	800d02c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d020:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e0c7      	b.n	800d1bc <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b01      	cmp	r3, #1
 800d036:	f040 80c0 	bne.w	800d1ba <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	441a      	add	r2, r3
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d907      	bls.n	800d05e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d052:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e0ae      	b.n	800d1bc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2203      	movs	r2, #3
 800d062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2200      	movs	r2, #0
 800d06c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d07c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d082:	4a50      	ldr	r2, [pc, #320]	; (800d1c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08a:	4a4f      	ldr	r2, [pc, #316]	; (800d1c8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d08c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	2200      	movs	r2, #0
 800d094:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	3380      	adds	r3, #128	; 0x80
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	025b      	lsls	r3, r3, #9
 800d0a8:	089b      	lsrs	r3, r3, #2
 800d0aa:	f7fd fc07 	bl	800a8bc <HAL_DMA_Start_IT>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d017      	beq.n	800d0e4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d0c2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a40      	ldr	r2, [pc, #256]	; (800d1cc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d0ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e06b      	b.n	800d1bc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d0e4:	4b3a      	ldr	r3, [pc, #232]	; (800d1d0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d002      	beq.n	800d0f8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	025b      	lsls	r3, r3, #9
 800d0f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d100:	4618      	mov	r0, r3
 800d102:	f003 faa1 	bl	8010648 <SDMMC_CmdBlockLength>
 800d106:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00f      	beq.n	800d12e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a2e      	ldr	r2, [pc, #184]	; (800d1cc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d114:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11c:	431a      	orrs	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e046      	b.n	800d1bc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d12e:	f04f 33ff 	mov.w	r3, #4294967295
 800d132:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	025b      	lsls	r3, r3, #9
 800d138:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d13a:	2390      	movs	r3, #144	; 0x90
 800d13c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d13e:	2302      	movs	r3, #2
 800d140:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d142:	2300      	movs	r3, #0
 800d144:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d146:	2301      	movs	r3, #1
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f107 0210 	add.w	r2, r7, #16
 800d152:	4611      	mov	r1, r2
 800d154:	4618      	mov	r0, r3
 800d156:	f003 fa4b 	bl	80105f0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d90a      	bls.n	800d176 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2282      	movs	r2, #130	; 0x82
 800d164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d16c:	4618      	mov	r0, r3
 800d16e:	f003 faaf 	bl	80106d0 <SDMMC_CmdReadMultiBlock>
 800d172:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d174:	e009      	b.n	800d18a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2281      	movs	r2, #129	; 0x81
 800d17a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d182:	4618      	mov	r0, r3
 800d184:	f003 fa82 	bl	801068c <SDMMC_CmdReadSingleBlock>
 800d188:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d012      	beq.n	800d1b6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a0d      	ldr	r2, [pc, #52]	; (800d1cc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d196:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e002      	b.n	800d1bc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e000      	b.n	800d1bc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d1ba:	2302      	movs	r3, #2
  }
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3730      	adds	r7, #48	; 0x30
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	0800dbaf 	.word	0x0800dbaf
 800d1c8:	0800dc21 	.word	0x0800dc21
 800d1cc:	004005ff 	.word	0x004005ff
 800d1d0:	4225858c 	.word	0x4225858c

0800d1d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08c      	sub	sp, #48	; 0x30
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e0ca      	b.n	800d392 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b01      	cmp	r3, #1
 800d206:	f040 80c3 	bne.w	800d390 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	441a      	add	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d907      	bls.n	800d22e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e0b1      	b.n	800d392 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2203      	movs	r2, #3
 800d232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2200      	movs	r2, #0
 800d23c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f042 021a 	orr.w	r2, r2, #26
 800d24c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d252:	4a52      	ldr	r2, [pc, #328]	; (800d39c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25a:	4a51      	ldr	r2, [pc, #324]	; (800d3a0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d25c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	2200      	movs	r2, #0
 800d264:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d002      	beq.n	800d274 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d270:	025b      	lsls	r3, r3, #9
 800d272:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d27c:	4618      	mov	r0, r3
 800d27e:	f003 f9e3 	bl	8010648 <SDMMC_CmdBlockLength>
 800d282:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a45      	ldr	r2, [pc, #276]	; (800d3a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	431a      	orrs	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e073      	b.n	800d392 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d90a      	bls.n	800d2c6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	22a0      	movs	r2, #160	; 0xa0
 800d2b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f003 fa4b 	bl	8010758 <SDMMC_CmdWriteMultiBlock>
 800d2c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d2c4:	e009      	b.n	800d2da <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2290      	movs	r2, #144	; 0x90
 800d2ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f003 fa1e 	bl	8010714 <SDMMC_CmdWriteSingleBlock>
 800d2d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d012      	beq.n	800d306 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a2f      	ldr	r2, [pc, #188]	; (800d3a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	431a      	orrs	r2, r3
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	e045      	b.n	800d392 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d306:	4b28      	ldr	r3, [pc, #160]	; (800d3a8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d308:	2201      	movs	r2, #1
 800d30a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3380      	adds	r3, #128	; 0x80
 800d318:	461a      	mov	r2, r3
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	025b      	lsls	r3, r3, #9
 800d31e:	089b      	lsrs	r3, r3, #2
 800d320:	f7fd facc 	bl	800a8bc <HAL_DMA_Start_IT>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d01a      	beq.n	800d360 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f022 021a 	bic.w	r2, r2, #26
 800d338:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a19      	ldr	r2, [pc, #100]	; (800d3a4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d35c:	2301      	movs	r3, #1
 800d35e:	e018      	b.n	800d392 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d360:	f04f 33ff 	mov.w	r3, #4294967295
 800d364:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	025b      	lsls	r3, r3, #9
 800d36a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d36c:	2390      	movs	r3, #144	; 0x90
 800d36e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d370:	2300      	movs	r3, #0
 800d372:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d374:	2300      	movs	r3, #0
 800d376:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d378:	2301      	movs	r3, #1
 800d37a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f107 0210 	add.w	r2, r7, #16
 800d384:	4611      	mov	r1, r2
 800d386:	4618      	mov	r0, r3
 800d388:	f003 f932 	bl	80105f0 <SDIO_ConfigData>

      return HAL_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e000      	b.n	800d392 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d390:	2302      	movs	r3, #2
  }
}
 800d392:	4618      	mov	r0, r3
 800d394:	3730      	adds	r7, #48	; 0x30
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	0800db85 	.word	0x0800db85
 800d3a0:	0800dc21 	.word	0x0800dc21
 800d3a4:	004005ff 	.word	0x004005ff
 800d3a8:	4225858c 	.word	0x4225858c

0800d3ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d008      	beq.n	800d3da <HAL_SD_IRQHandler+0x2e>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f003 0308 	and.w	r3, r3, #8
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 ffc8 	bl	800e368 <SD_Read_IT>
 800d3d8:	e155      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 808f 	beq.w	800d508 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	6812      	ldr	r2, [r2, #0]
 800d3fe:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d402:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d406:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f022 0201 	bic.w	r2, r2, #1
 800d416:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f003 0308 	and.w	r3, r3, #8
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d039      	beq.n	800d496 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f003 0302 	and.w	r3, r3, #2
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d104      	bne.n	800d436 <HAL_SD_IRQHandler+0x8a>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f003 0320 	and.w	r3, r3, #32
 800d432:	2b00      	cmp	r3, #0
 800d434:	d011      	beq.n	800d45a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f003 f9ae 	bl	801079c <SDMMC_CmdStopTransfer>
 800d440:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d008      	beq.n	800d45a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	431a      	orrs	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 f91f 	bl	800d698 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d462:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d104      	bne.n	800d486 <HAL_SD_IRQHandler+0xda>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f003 0302 	and.w	r3, r3, #2
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f003 fe04 	bl	8011094 <HAL_SD_RxCpltCallback>
 800d48c:	e0fb      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f003 fdf6 	bl	8011080 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d494:	e0f7      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 80f2 	beq.w	800d686 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f003 0320 	and.w	r3, r3, #32
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d011      	beq.n	800d4d0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f003 f973 	bl	801079c <SDMMC_CmdStopTransfer>
 800d4b6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d008      	beq.n	800d4d0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f8e4 	bl	800d698 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f040 80d5 	bne.w	800d686 <HAL_SD_IRQHandler+0x2da>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f040 80cf 	bne.w	800d686 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f022 0208 	bic.w	r2, r2, #8
 800d4f6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f003 fdbd 	bl	8011080 <HAL_SD_TxCpltCallback>
}
 800d506:	e0be      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d512:	2b00      	cmp	r3, #0
 800d514:	d008      	beq.n	800d528 <HAL_SD_IRQHandler+0x17c>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f003 0308 	and.w	r3, r3, #8
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d003      	beq.n	800d528 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 ff72 	bl	800e40a <SD_Write_IT>
 800d526:	e0ae      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 80a7 	beq.w	800d686 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	2b00      	cmp	r3, #0
 800d544:	d005      	beq.n	800d552 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54a:	f043 0202 	orr.w	r2, r3, #2
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d558:	f003 0308 	and.w	r3, r3, #8
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d005      	beq.n	800d56c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d564:	f043 0208 	orr.w	r2, r3, #8
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d572:	f003 0320 	and.w	r3, r3, #32
 800d576:	2b00      	cmp	r3, #0
 800d578:	d005      	beq.n	800d586 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	f043 0220 	orr.w	r2, r3, #32
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58c:	f003 0310 	and.w	r3, r3, #16
 800d590:	2b00      	cmp	r3, #0
 800d592:	d005      	beq.n	800d5a0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d598:	f043 0210 	orr.w	r2, r3, #16
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5a8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d5b8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f003 f8ec 	bl	801079c <SDMMC_CmdStopTransfer>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f003 0308 	and.w	r3, r3, #8
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 f855 	bl	800d698 <HAL_SD_ErrorCallback>
}
 800d5ee:	e04a      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d045      	beq.n	800d686 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f003 0310 	and.w	r3, r3, #16
 800d600:	2b00      	cmp	r3, #0
 800d602:	d104      	bne.n	800d60e <HAL_SD_IRQHandler+0x262>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f003 0320 	and.w	r3, r3, #32
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d011      	beq.n	800d632 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d612:	4a1f      	ldr	r2, [pc, #124]	; (800d690 <HAL_SD_IRQHandler+0x2e4>)
 800d614:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fd f9a6 	bl	800a96c <HAL_DMA_Abort_IT>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d02f      	beq.n	800d686 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fb4a 	bl	800dcc4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d630:	e029      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d104      	bne.n	800d646 <HAL_SD_IRQHandler+0x29a>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d011      	beq.n	800d66a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	4a12      	ldr	r2, [pc, #72]	; (800d694 <HAL_SD_IRQHandler+0x2e8>)
 800d64c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d652:	4618      	mov	r0, r3
 800d654:	f7fd f98a 	bl	800a96c <HAL_DMA_Abort_IT>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d013      	beq.n	800d686 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d662:	4618      	mov	r0, r3
 800d664:	f000 fb65 	bl	800dd32 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d668:	e00d      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f003 fcf4 	bl	801106c <HAL_SD_AbortCallback>
}
 800d684:	e7ff      	b.n	800d686 <HAL_SD_IRQHandler+0x2da>
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	0800dcc5 	.word	0x0800dcc5
 800d694:	0800dd33 	.word	0x0800dd33

0800d698 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ba:	0f9b      	lsrs	r3, r3, #30
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c6:	0e9b      	lsrs	r3, r3, #26
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	f003 030f 	and.w	r3, r3, #15
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6d8:	0e1b      	lsrs	r3, r3, #24
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	f003 0303 	and.w	r3, r3, #3
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ea:	0c1b      	lsrs	r3, r3, #16
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f6:	0a1b      	lsrs	r3, r3, #8
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d702:	b2da      	uxtb	r2, r3
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d70c:	0d1b      	lsrs	r3, r3, #20
 800d70e:	b29a      	uxth	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d718:	0c1b      	lsrs	r3, r3, #16
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	f003 030f 	and.w	r3, r3, #15
 800d720:	b2da      	uxtb	r2, r3
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d72a:	0bdb      	lsrs	r3, r3, #15
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	b2da      	uxtb	r2, r3
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d73c:	0b9b      	lsrs	r3, r3, #14
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f003 0301 	and.w	r3, r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d74e:	0b5b      	lsrs	r3, r3, #13
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	b2da      	uxtb	r2, r3
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d760:	0b1b      	lsrs	r3, r3, #12
 800d762:	b2db      	uxtb	r3, r3
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2200      	movs	r2, #0
 800d772:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d163      	bne.n	800d844 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d780:	009a      	lsls	r2, r3, #2
 800d782:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d786:	4013      	ands	r3, r2
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d78c:	0f92      	lsrs	r2, r2, #30
 800d78e:	431a      	orrs	r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d798:	0edb      	lsrs	r3, r3, #27
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	f003 0307 	and.w	r3, r3, #7
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7aa:	0e1b      	lsrs	r3, r3, #24
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	f003 0307 	and.w	r3, r3, #7
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7bc:	0d5b      	lsrs	r3, r3, #21
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 0307 	and.w	r3, r3, #7
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ce:	0c9b      	lsrs	r3, r3, #18
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e0:	0bdb      	lsrs	r3, r3, #15
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f003 0307 	and.w	r3, r3, #7
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	1c5a      	adds	r2, r3, #1
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	7e1b      	ldrb	r3, [r3, #24]
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0307 	and.w	r3, r3, #7
 800d802:	3302      	adds	r3, #2
 800d804:	2201      	movs	r2, #1
 800d806:	fa02 f303 	lsl.w	r3, r2, r3
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d80e:	fb02 f203 	mul.w	r2, r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	7a1b      	ldrb	r3, [r3, #8]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f003 030f 	and.w	r3, r3, #15
 800d820:	2201      	movs	r2, #1
 800d822:	409a      	lsls	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d830:	0a52      	lsrs	r2, r2, #9
 800d832:	fb02 f203 	mul.w	r2, r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d840:	661a      	str	r2, [r3, #96]	; 0x60
 800d842:	e031      	b.n	800d8a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d11d      	bne.n	800d888 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d850:	041b      	lsls	r3, r3, #16
 800d852:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d85a:	0c1b      	lsrs	r3, r3, #16
 800d85c:	431a      	orrs	r2, r3
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	3301      	adds	r3, #1
 800d868:	029a      	lsls	r2, r3, #10
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d87c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	661a      	str	r2, [r3, #96]	; 0x60
 800d886:	e00f      	b.n	800d8a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a58      	ldr	r2, [pc, #352]	; (800d9f0 <HAL_SD_GetCardCSD+0x344>)
 800d88e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e09d      	b.n	800d9e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ac:	0b9b      	lsrs	r3, r3, #14
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 0301 	and.w	r3, r3, #1
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8be:	09db      	lsrs	r3, r3, #7
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e0:	0fdb      	lsrs	r3, r3, #31
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ec:	0f5b      	lsrs	r3, r3, #29
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f003 0303 	and.w	r3, r3, #3
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fe:	0e9b      	lsrs	r3, r3, #26
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 0307 	and.w	r3, r3, #7
 800d906:	b2da      	uxtb	r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d910:	0d9b      	lsrs	r3, r3, #22
 800d912:	b2db      	uxtb	r3, r3
 800d914:	f003 030f 	and.w	r3, r3, #15
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d922:	0d5b      	lsrs	r3, r3, #21
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	b2db      	uxtb	r3, r3
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	b2da      	uxtb	r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d952:	0bdb      	lsrs	r3, r3, #15
 800d954:	b2db      	uxtb	r3, r3
 800d956:	f003 0301 	and.w	r3, r3, #1
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d966:	0b9b      	lsrs	r3, r3, #14
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d97a:	0b5b      	lsrs	r3, r3, #13
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	b2da      	uxtb	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98e:	0b1b      	lsrs	r3, r3, #12
 800d990:	b2db      	uxtb	r3, r3
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	b2da      	uxtb	r2, r3
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a2:	0a9b      	lsrs	r3, r3, #10
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	f003 0303 	and.w	r3, r3, #3
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b6:	0a1b      	lsrs	r3, r3, #8
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 0303 	and.w	r3, r3, #3
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ca:	085b      	lsrs	r3, r3, #1
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9d2:	b2da      	uxtb	r2, r3
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	004005ff 	.word	0x004005ff

0800d9f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	4618      	mov	r0, r3
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800da4c:	b5b0      	push	{r4, r5, r7, lr}
 800da4e:	b08e      	sub	sp, #56	; 0x38
 800da50:	af04      	add	r7, sp, #16
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2203      	movs	r2, #3
 800da5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da62:	2b03      	cmp	r3, #3
 800da64:	d02e      	beq.n	800dac4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da6c:	d106      	bne.n	800da7c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	639a      	str	r2, [r3, #56]	; 0x38
 800da7a:	e029      	b.n	800dad0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da82:	d10a      	bne.n	800da9a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fb0f 	bl	800e0a8 <SD_WideBus_Enable>
 800da8a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da92:	431a      	orrs	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	639a      	str	r2, [r3, #56]	; 0x38
 800da98:	e01a      	b.n	800dad0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fb4c 	bl	800e13e <SD_WideBus_Disable>
 800daa6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	431a      	orrs	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	639a      	str	r2, [r3, #56]	; 0x38
 800dab4:	e00c      	b.n	800dad0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	639a      	str	r2, [r3, #56]	; 0x38
 800dac2:	e005      	b.n	800dad0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d009      	beq.n	800daec <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a18      	ldr	r2, [pc, #96]	; (800db40 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	e024      	b.n	800db36 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681d      	ldr	r5, [r3, #0]
 800db12:	466c      	mov	r4, sp
 800db14:	f107 0318 	add.w	r3, r7, #24
 800db18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db20:	f107 030c 	add.w	r3, r7, #12
 800db24:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db26:	4628      	mov	r0, r5
 800db28:	f002 fcb2 	bl	8010490 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3728      	adds	r7, #40	; 0x28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bdb0      	pop	{r4, r5, r7, pc}
 800db3e:	bf00      	nop
 800db40:	004005ff 	.word	0x004005ff

0800db44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800db50:	f107 030c 	add.w	r3, r7, #12
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fa7e 	bl	800e058 <SD_SendStatus>
 800db5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d005      	beq.n	800db70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	431a      	orrs	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	0a5b      	lsrs	r3, r3, #9
 800db74:	f003 030f 	and.w	r3, r3, #15
 800db78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800db7a:	693b      	ldr	r3, [r7, #16]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db90:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dba0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dba2:	bf00      	nop
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc0:	2b82      	cmp	r3, #130	; 0x82
 800dbc2:	d111      	bne.n	800dbe8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f002 fde7 	bl	801079c <SDMMC_CmdStopTransfer>
 800dbce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d008      	beq.n	800dbe8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	431a      	orrs	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f7ff fd58 	bl	800d698 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f022 0208 	bic.w	r2, r2, #8
 800dbf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc00:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2201      	movs	r2, #1
 800dc06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f003 fa3f 	bl	8011094 <HAL_SD_RxCpltCallback>
#endif
}
 800dc16:	bf00      	nop
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fd f848 	bl	800acc4 <HAL_DMA_GetError>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d03e      	beq.n	800dcb8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc40:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc48:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d002      	beq.n	800dc56 <SD_DMAError+0x36>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d12d      	bne.n	800dcb2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a19      	ldr	r2, [pc, #100]	; (800dcc0 <SD_DMAError+0xa0>)
 800dc5c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dc6c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dc7a:	6978      	ldr	r0, [r7, #20]
 800dc7c:	f7ff ff62 	bl	800db44 <HAL_SD_GetCardState>
 800dc80:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2b06      	cmp	r3, #6
 800dc86:	d002      	beq.n	800dc8e <SD_DMAError+0x6e>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b05      	cmp	r3, #5
 800dc8c:	d10a      	bne.n	800dca4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f002 fd82 	bl	801079c <SDMMC_CmdStopTransfer>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dcb2:	6978      	ldr	r0, [r7, #20]
 800dcb4:	f7ff fcf0 	bl	800d698 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dcb8:	bf00      	nop
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	004005ff 	.word	0x004005ff

0800dcc4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dcda:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f7ff ff31 	bl	800db44 <HAL_SD_GetCardState>
 800dce2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b06      	cmp	r3, #6
 800dcf6:	d002      	beq.n	800dcfe <SD_DMATxAbort+0x3a>
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b05      	cmp	r3, #5
 800dcfc:	d10a      	bne.n	800dd14 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f002 fd4a 	bl	801079c <SDMMC_CmdStopTransfer>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d103      	bne.n	800dd24 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f003 f9a5 	bl	801106c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd22:	e002      	b.n	800dd2a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff fcb7 	bl	800d698 <HAL_SD_ErrorCallback>
}
 800dd2a:	bf00      	nop
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b084      	sub	sp, #16
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd48:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f7ff fefa 	bl	800db44 <HAL_SD_GetCardState>
 800dd50:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2201      	movs	r2, #1
 800dd56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2b06      	cmp	r3, #6
 800dd64:	d002      	beq.n	800dd6c <SD_DMARxAbort+0x3a>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2b05      	cmp	r3, #5
 800dd6a:	d10a      	bne.n	800dd82 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f002 fd13 	bl	801079c <SDMMC_CmdStopTransfer>
 800dd76:	4602      	mov	r2, r0
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7c:	431a      	orrs	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d103      	bne.n	800dd92 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f003 f96e 	bl	801106c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd90:	e002      	b.n	800dd98 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff fc80 	bl	800d698 <HAL_SD_ErrorCallback>
}
 800dd98:	bf00      	nop
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dda0:	b5b0      	push	{r4, r5, r7, lr}
 800dda2:	b094      	sub	sp, #80	; 0x50
 800dda4:	af04      	add	r7, sp, #16
 800dda6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f002 fbc5 	bl	8010540 <SDIO_GetPowerState>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ddbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ddc0:	e0b7      	b.n	800df32 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddc6:	2b03      	cmp	r3, #3
 800ddc8:	d02f      	beq.n	800de2a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f002 fdee 	bl	80109b0 <SDMMC_CmdSendCID>
 800ddd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <SD_InitCard+0x40>
    {
      return errorstate;
 800dddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddde:	e0a8      	b.n	800df32 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2100      	movs	r1, #0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f002 fbef 	bl	80105ca <SDIO_GetResponse>
 800ddec:	4602      	mov	r2, r0
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2104      	movs	r1, #4
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f002 fbe6 	bl	80105ca <SDIO_GetResponse>
 800ddfe:	4602      	mov	r2, r0
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2108      	movs	r1, #8
 800de0a:	4618      	mov	r0, r3
 800de0c:	f002 fbdd 	bl	80105ca <SDIO_GetResponse>
 800de10:	4602      	mov	r2, r0
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	210c      	movs	r1, #12
 800de1c:	4618      	mov	r0, r3
 800de1e:	f002 fbd4 	bl	80105ca <SDIO_GetResponse>
 800de22:	4602      	mov	r2, r0
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d00d      	beq.n	800de4e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f107 020e 	add.w	r2, r7, #14
 800de3a:	4611      	mov	r1, r2
 800de3c:	4618      	mov	r0, r3
 800de3e:	f002 fdf4 	bl	8010a2a <SDMMC_CmdSetRelAdd>
 800de42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <SD_InitCard+0xae>
    {
      return errorstate;
 800de4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4c:	e071      	b.n	800df32 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de52:	2b03      	cmp	r3, #3
 800de54:	d036      	beq.n	800dec4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800de56:	89fb      	ldrh	r3, [r7, #14]
 800de58:	461a      	mov	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de66:	041b      	lsls	r3, r3, #16
 800de68:	4619      	mov	r1, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	f002 fdbe 	bl	80109ec <SDMMC_CmdSendCSD>
 800de70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <SD_InitCard+0xdc>
    {
      return errorstate;
 800de78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de7a:	e05a      	b.n	800df32 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2100      	movs	r1, #0
 800de82:	4618      	mov	r0, r3
 800de84:	f002 fba1 	bl	80105ca <SDIO_GetResponse>
 800de88:	4602      	mov	r2, r0
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2104      	movs	r1, #4
 800de94:	4618      	mov	r0, r3
 800de96:	f002 fb98 	bl	80105ca <SDIO_GetResponse>
 800de9a:	4602      	mov	r2, r0
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2108      	movs	r1, #8
 800dea6:	4618      	mov	r0, r3
 800dea8:	f002 fb8f 	bl	80105ca <SDIO_GetResponse>
 800deac:	4602      	mov	r2, r0
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	210c      	movs	r1, #12
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 fb86 	bl	80105ca <SDIO_GetResponse>
 800debe:	4602      	mov	r2, r0
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2104      	movs	r1, #4
 800deca:	4618      	mov	r0, r3
 800decc:	f002 fb7d 	bl	80105ca <SDIO_GetResponse>
 800ded0:	4603      	mov	r3, r0
 800ded2:	0d1a      	lsrs	r2, r3, #20
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ded8:	f107 0310 	add.w	r3, r7, #16
 800dedc:	4619      	mov	r1, r3
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff fbe4 	bl	800d6ac <HAL_SD_GetCardCSD>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d002      	beq.n	800def0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800deee:	e020      	b.n	800df32 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6819      	ldr	r1, [r3, #0]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800def8:	041b      	lsls	r3, r3, #16
 800defa:	f04f 0400 	mov.w	r4, #0
 800defe:	461a      	mov	r2, r3
 800df00:	4623      	mov	r3, r4
 800df02:	4608      	mov	r0, r1
 800df04:	f002 fc6c 	bl	80107e0 <SDMMC_CmdSelDesel>
 800df08:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <SD_InitCard+0x174>
  {
    return errorstate;
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	e00e      	b.n	800df32 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681d      	ldr	r5, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	466c      	mov	r4, sp
 800df1c:	f103 0210 	add.w	r2, r3, #16
 800df20:	ca07      	ldmia	r2, {r0, r1, r2}
 800df22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df26:	3304      	adds	r3, #4
 800df28:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df2a:	4628      	mov	r0, r5
 800df2c:	f002 fab0 	bl	8010490 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3740      	adds	r7, #64	; 0x40
 800df36:	46bd      	mov	sp, r7
 800df38:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df44:	2300      	movs	r3, #0
 800df46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800df48:	2300      	movs	r3, #0
 800df4a:	617b      	str	r3, [r7, #20]
 800df4c:	2300      	movs	r3, #0
 800df4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4618      	mov	r0, r3
 800df56:	f002 fc66 	bl	8010826 <SDMMC_CmdGoIdleState>
 800df5a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <SD_PowerON+0x2a>
  {
    return errorstate;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	e072      	b.n	800e04c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f002 fc79 	bl	8010862 <SDMMC_CmdOperCond>
 800df70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00d      	beq.n	800df94 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4618      	mov	r0, r3
 800df84:	f002 fc4f 	bl	8010826 <SDMMC_CmdGoIdleState>
 800df88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <SD_PowerON+0x5e>
    {
      return errorstate;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	e05b      	b.n	800e04c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d137      	bne.n	800e012 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2100      	movs	r1, #0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f002 fc79 	bl	80108a0 <SDMMC_CmdAppCommand>
 800dfae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d02d      	beq.n	800e012 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dfba:	e047      	b.n	800e04c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 fc6c 	bl	80108a0 <SDMMC_CmdAppCommand>
 800dfc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <SD_PowerON+0x98>
    {
      return errorstate;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	e03b      	b.n	800e04c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	491e      	ldr	r1, [pc, #120]	; (800e054 <SD_PowerON+0x118>)
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f002 fc82 	bl	80108e4 <SDMMC_CmdAppOperCommand>
 800dfe0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dfec:	e02e      	b.n	800e04c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2100      	movs	r1, #0
 800dff4:	4618      	mov	r0, r3
 800dff6:	f002 fae8 	bl	80105ca <SDIO_GetResponse>
 800dffa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	0fdb      	lsrs	r3, r3, #31
 800e000:	2b01      	cmp	r3, #1
 800e002:	d101      	bne.n	800e008 <SD_PowerON+0xcc>
 800e004:	2301      	movs	r3, #1
 800e006:	e000      	b.n	800e00a <SD_PowerON+0xce>
 800e008:	2300      	movs	r3, #0
 800e00a:	613b      	str	r3, [r7, #16]

    count++;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	3301      	adds	r3, #1
 800e010:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e018:	4293      	cmp	r3, r2
 800e01a:	d802      	bhi.n	800e022 <SD_PowerON+0xe6>
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0cc      	beq.n	800dfbc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e028:	4293      	cmp	r3, r2
 800e02a:	d902      	bls.n	800e032 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e02c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e030:	e00c      	b.n	800e04c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	645a      	str	r2, [r3, #68]	; 0x44
 800e042:	e002      	b.n	800e04a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	c1100000 	.word	0xc1100000

0800e058 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d102      	bne.n	800e06e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e06c:	e018      	b.n	800e0a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e076:	041b      	lsls	r3, r3, #16
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f002 fcf6 	bl	8010a6c <SDMMC_CmdSendStatus>
 800e080:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	e009      	b.n	800e0a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2100      	movs	r1, #0
 800e092:	4618      	mov	r0, r3
 800e094:	f002 fa99 	bl	80105ca <SDIO_GetResponse>
 800e098:	4602      	mov	r2, r0
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b086      	sub	sp, #24
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f002 fa83 	bl	80105ca <SDIO_GetResponse>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0ce:	d102      	bne.n	800e0d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e0d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0d4:	e02f      	b.n	800e136 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e0d6:	f107 030c 	add.w	r3, r7, #12
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f879 	bl	800e1d4 <SD_FindSCR>
 800e0e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	e023      	b.n	800e136 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d01c      	beq.n	800e132 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e100:	041b      	lsls	r3, r3, #16
 800e102:	4619      	mov	r1, r3
 800e104:	4610      	mov	r0, r2
 800e106:	f002 fbcb 	bl	80108a0 <SDMMC_CmdAppCommand>
 800e10a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	e00f      	b.n	800e136 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2102      	movs	r1, #2
 800e11c:	4618      	mov	r0, r3
 800e11e:	f002 fc04 	bl	801092a <SDMMC_CmdBusWidth>
 800e122:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	e003      	b.n	800e136 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e12e:	2300      	movs	r3, #0
 800e130:	e001      	b.n	800e136 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b086      	sub	sp, #24
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e146:	2300      	movs	r3, #0
 800e148:	60fb      	str	r3, [r7, #12]
 800e14a:	2300      	movs	r3, #0
 800e14c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2100      	movs	r1, #0
 800e154:	4618      	mov	r0, r3
 800e156:	f002 fa38 	bl	80105ca <SDIO_GetResponse>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e164:	d102      	bne.n	800e16c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e16a:	e02f      	b.n	800e1cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e16c:	f107 030c 	add.w	r3, r7, #12
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f82e 	bl	800e1d4 <SD_FindSCR>
 800e178:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	e023      	b.n	800e1cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d01c      	beq.n	800e1c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e196:	041b      	lsls	r3, r3, #16
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f002 fb80 	bl	80108a0 <SDMMC_CmdAppCommand>
 800e1a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	e00f      	b.n	800e1cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f002 fbb9 	bl	801092a <SDMMC_CmdBusWidth>
 800e1b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	e003      	b.n	800e1cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e001      	b.n	800e1cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e1c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e1d4:	b590      	push	{r4, r7, lr}
 800e1d6:	b08f      	sub	sp, #60	; 0x3c
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1de:	f7fb fd7b 	bl	8009cd8 <HAL_GetTick>
 800e1e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	60bb      	str	r3, [r7, #8]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2108      	movs	r1, #8
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f002 fa24 	bl	8010648 <SDMMC_CmdBlockLength>
 800e200:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	e0a9      	b.n	800e360 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e214:	041b      	lsls	r3, r3, #16
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f002 fb41 	bl	80108a0 <SDMMC_CmdAppCommand>
 800e21e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	2b00      	cmp	r3, #0
 800e224:	d001      	beq.n	800e22a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e228:	e09a      	b.n	800e360 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e22a:	f04f 33ff 	mov.w	r3, #4294967295
 800e22e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e230:	2308      	movs	r3, #8
 800e232:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e234:	2330      	movs	r3, #48	; 0x30
 800e236:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e238:	2302      	movs	r3, #2
 800e23a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e240:	2301      	movs	r3, #1
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f107 0210 	add.w	r2, r7, #16
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f002 f9ce 	bl	80105f0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4618      	mov	r0, r3
 800e25a:	f002 fb88 	bl	801096e <SDMMC_CmdSendSCR>
 800e25e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	2b00      	cmp	r3, #0
 800e264:	d022      	beq.n	800e2ac <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	e07a      	b.n	800e360 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00e      	beq.n	800e296 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6819      	ldr	r1, [r3, #0]
 800e27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	f107 0208 	add.w	r2, r7, #8
 800e284:	18d4      	adds	r4, r2, r3
 800e286:	4608      	mov	r0, r1
 800e288:	f002 f92d 	bl	80104e6 <SDIO_ReadFIFO>
 800e28c:	4603      	mov	r3, r0
 800e28e:	6023      	str	r3, [r4, #0]
      index++;
 800e290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e292:	3301      	adds	r3, #1
 800e294:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e296:	f7fb fd1f 	bl	8009cd8 <HAL_GetTick>
 800e29a:	4602      	mov	r2, r0
 800e29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a4:	d102      	bne.n	800e2ac <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2aa:	e059      	b.n	800e360 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2b2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0d6      	beq.n	800e26a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c2:	f003 0308 	and.w	r3, r3, #8
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d005      	beq.n	800e2d6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2208      	movs	r2, #8
 800e2d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2d2:	2308      	movs	r3, #8
 800e2d4:	e044      	b.n	800e360 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2dc:	f003 0302 	and.w	r3, r3, #2
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	e037      	b.n	800e360 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d005      	beq.n	800e30a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2220      	movs	r2, #32
 800e304:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e306:	2320      	movs	r3, #32
 800e308:	e02a      	b.n	800e360 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e312:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	061a      	lsls	r2, r3, #24
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	021b      	lsls	r3, r3, #8
 800e31c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e320:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	0a1b      	lsrs	r3, r3, #8
 800e326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e32a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	0e1b      	lsrs	r3, r3, #24
 800e330:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e334:	601a      	str	r2, [r3, #0]
    scr++;
 800e336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e338:	3304      	adds	r3, #4
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	061a      	lsls	r2, r3, #24
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	021b      	lsls	r3, r3, #8
 800e344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e348:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	0a1b      	lsrs	r3, r3, #8
 800e34e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e352:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	0e1b      	lsrs	r3, r3, #24
 800e358:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	373c      	adds	r7, #60	; 0x3c
 800e364:	46bd      	mov	sp, r7
 800e366:	bd90      	pop	{r4, r7, pc}

0800e368 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e374:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d03f      	beq.n	800e402 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e382:	2300      	movs	r3, #0
 800e384:	617b      	str	r3, [r7, #20]
 800e386:	e033      	b.n	800e3f0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f002 f8aa 	bl	80104e6 <SDIO_ReadFIFO>
 800e392:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	b2da      	uxtb	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	0a1b      	lsrs	r3, r3, #8
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	0c1b      	lsrs	r3, r3, #16
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	0e1b      	lsrs	r3, r3, #24
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2b07      	cmp	r3, #7
 800e3f4:	d9c8      	bls.n	800e388 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e402:	bf00      	nop
 800e404:	3718      	adds	r7, #24
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b086      	sub	sp, #24
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d043      	beq.n	800e4ac <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e424:	2300      	movs	r3, #0
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	e037      	b.n	800e49a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3301      	adds	r3, #1
 800e434:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	3b01      	subs	r3, #1
 800e43a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	021a      	lsls	r2, r3, #8
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	4313      	orrs	r3, r2
 800e446:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3301      	adds	r3, #1
 800e44c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	3b01      	subs	r3, #1
 800e452:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	041a      	lsls	r2, r3, #16
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3301      	adds	r3, #1
 800e464:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	3b01      	subs	r3, #1
 800e46a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	061a      	lsls	r2, r3, #24
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	4313      	orrs	r3, r2
 800e476:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3301      	adds	r3, #1
 800e47c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	3b01      	subs	r3, #1
 800e482:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f107 0208 	add.w	r2, r7, #8
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f002 f836 	bl	8010500 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	3301      	adds	r3, #1
 800e498:	617b      	str	r3, [r7, #20]
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b07      	cmp	r3, #7
 800e49e:	d9c4      	bls.n	800e42a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	693a      	ldr	r2, [r7, #16]
 800e4aa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	3718      	adds	r7, #24
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e056      	b.n	800e574 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d106      	bne.n	800e4e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7f8 fe9b 	bl	800721c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	431a      	orrs	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	431a      	orrs	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	691b      	ldr	r3, [r3, #16]
 800e512:	431a      	orrs	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	695b      	ldr	r3, [r3, #20]
 800e518:	431a      	orrs	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e522:	431a      	orrs	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	69db      	ldr	r3, [r3, #28]
 800e528:	431a      	orrs	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a1b      	ldr	r3, [r3, #32]
 800e52e:	ea42 0103 	orr.w	r1, r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	430a      	orrs	r2, r1
 800e53c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	0c1b      	lsrs	r3, r3, #16
 800e544:	f003 0104 	and.w	r1, r3, #4
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	69da      	ldr	r2, [r3, #28]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e562:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	603b      	str	r3, [r7, #0]
 800e588:	4613      	mov	r3, r2
 800e58a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e596:	2b01      	cmp	r3, #1
 800e598:	d101      	bne.n	800e59e <HAL_SPI_Transmit+0x22>
 800e59a:	2302      	movs	r3, #2
 800e59c:	e11e      	b.n	800e7dc <HAL_SPI_Transmit+0x260>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5a6:	f7fb fb97 	bl	8009cd8 <HAL_GetTick>
 800e5aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d002      	beq.n	800e5c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e5bc:	2302      	movs	r3, #2
 800e5be:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e5c0:	e103      	b.n	800e7ca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <HAL_SPI_Transmit+0x52>
 800e5c8:	88fb      	ldrh	r3, [r7, #6]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d102      	bne.n	800e5d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e5d2:	e0fa      	b.n	800e7ca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	88fa      	ldrh	r2, [r7, #6]
 800e5ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	88fa      	ldrh	r2, [r7, #6]
 800e5f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e61a:	d107      	bne.n	800e62c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e62a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e636:	2b40      	cmp	r3, #64	; 0x40
 800e638:	d007      	beq.n	800e64a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e648:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e652:	d14b      	bne.n	800e6ec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <HAL_SPI_Transmit+0xe6>
 800e65c:	8afb      	ldrh	r3, [r7, #22]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d13e      	bne.n	800e6e0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e666:	881a      	ldrh	r2, [r3, #0]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e672:	1c9a      	adds	r2, r3, #2
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	3b01      	subs	r3, #1
 800e680:	b29a      	uxth	r2, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e686:	e02b      	b.n	800e6e0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f003 0302 	and.w	r3, r3, #2
 800e692:	2b02      	cmp	r3, #2
 800e694:	d112      	bne.n	800e6bc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69a:	881a      	ldrh	r2, [r3, #0]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a6:	1c9a      	adds	r2, r3, #2
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e6ba:	e011      	b.n	800e6e0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6bc:	f7fb fb0c 	bl	8009cd8 <HAL_GetTick>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d803      	bhi.n	800e6d4 <HAL_SPI_Transmit+0x158>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d2:	d102      	bne.n	800e6da <HAL_SPI_Transmit+0x15e>
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d102      	bne.n	800e6e0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e6de:	e074      	b.n	800e7ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d1ce      	bne.n	800e688 <HAL_SPI_Transmit+0x10c>
 800e6ea:	e04c      	b.n	800e786 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <HAL_SPI_Transmit+0x17e>
 800e6f4:	8afb      	ldrh	r3, [r7, #22]
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d140      	bne.n	800e77c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	330c      	adds	r3, #12
 800e704:	7812      	ldrb	r2, [r2, #0]
 800e706:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e716:	b29b      	uxth	r3, r3
 800e718:	3b01      	subs	r3, #1
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e720:	e02c      	b.n	800e77c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	f003 0302 	and.w	r3, r3, #2
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d113      	bne.n	800e758 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	330c      	adds	r3, #12
 800e73a:	7812      	ldrb	r2, [r2, #0]
 800e73c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	3b01      	subs	r3, #1
 800e750:	b29a      	uxth	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	86da      	strh	r2, [r3, #54]	; 0x36
 800e756:	e011      	b.n	800e77c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e758:	f7fb fabe 	bl	8009cd8 <HAL_GetTick>
 800e75c:	4602      	mov	r2, r0
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	429a      	cmp	r2, r3
 800e766:	d803      	bhi.n	800e770 <HAL_SPI_Transmit+0x1f4>
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d102      	bne.n	800e776 <HAL_SPI_Transmit+0x1fa>
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d102      	bne.n	800e77c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e776:	2303      	movs	r3, #3
 800e778:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e77a:	e026      	b.n	800e7ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e780:	b29b      	uxth	r3, r3
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1cd      	bne.n	800e722 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f000 fba4 	bl	800eed8 <SPI_EndRxTxTransaction>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d002      	beq.n	800e79c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2220      	movs	r2, #32
 800e79a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10a      	bne.n	800e7ba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	613b      	str	r3, [r7, #16]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	613b      	str	r3, [r7, #16]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	613b      	str	r3, [r7, #16]
 800e7b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d002      	beq.n	800e7c8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	77fb      	strb	r3, [r7, #31]
 800e7c6:	e000      	b.n	800e7ca <HAL_SPI_Transmit+0x24e>
  }

error:
 800e7c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e7da:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3720      	adds	r7, #32
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b088      	sub	sp, #32
 800e7e8:	af02      	add	r7, sp, #8
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	603b      	str	r3, [r7, #0]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e800:	d112      	bne.n	800e828 <HAL_SPI_Receive+0x44>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10e      	bne.n	800e828 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2204      	movs	r2, #4
 800e80e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e812:	88fa      	ldrh	r2, [r7, #6]
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	4613      	mov	r3, r2
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f000 f8e9 	bl	800e9f6 <HAL_SPI_TransmitReceive>
 800e824:	4603      	mov	r3, r0
 800e826:	e0e2      	b.n	800e9ee <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d101      	bne.n	800e836 <HAL_SPI_Receive+0x52>
 800e832:	2302      	movs	r3, #2
 800e834:	e0db      	b.n	800e9ee <HAL_SPI_Receive+0x20a>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2201      	movs	r2, #1
 800e83a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e83e:	f7fb fa4b 	bl	8009cd8 <HAL_GetTick>
 800e842:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d002      	beq.n	800e856 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e850:	2302      	movs	r3, #2
 800e852:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e854:	e0c2      	b.n	800e9dc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <HAL_SPI_Receive+0x7e>
 800e85c:	88fb      	ldrh	r3, [r7, #6]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e866:	e0b9      	b.n	800e9dc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2204      	movs	r2, #4
 800e86c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	88fa      	ldrh	r2, [r7, #6]
 800e880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	88fa      	ldrh	r2, [r7, #6]
 800e886:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ae:	d107      	bne.n	800e8c0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e8be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ca:	2b40      	cmp	r3, #64	; 0x40
 800e8cc:	d007      	beq.n	800e8de <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d162      	bne.n	800e9ac <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e8e6:	e02e      	b.n	800e946 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d115      	bne.n	800e922 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f103 020c 	add.w	r2, r3, #12
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e902:	7812      	ldrb	r2, [r2, #0]
 800e904:	b2d2      	uxtb	r2, r2
 800e906:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90c:	1c5a      	adds	r2, r3, #1
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e916:	b29b      	uxth	r3, r3
 800e918:	3b01      	subs	r3, #1
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e920:	e011      	b.n	800e946 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e922:	f7fb f9d9 	bl	8009cd8 <HAL_GetTick>
 800e926:	4602      	mov	r2, r0
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d803      	bhi.n	800e93a <HAL_SPI_Receive+0x156>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e938:	d102      	bne.n	800e940 <HAL_SPI_Receive+0x15c>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d102      	bne.n	800e946 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e940:	2303      	movs	r3, #3
 800e942:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e944:	e04a      	b.n	800e9dc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d1cb      	bne.n	800e8e8 <HAL_SPI_Receive+0x104>
 800e950:	e031      	b.n	800e9b6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d113      	bne.n	800e988 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96a:	b292      	uxth	r2, r2
 800e96c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e972:	1c9a      	adds	r2, r3, #2
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	3b01      	subs	r3, #1
 800e980:	b29a      	uxth	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e986:	e011      	b.n	800e9ac <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e988:	f7fb f9a6 	bl	8009cd8 <HAL_GetTick>
 800e98c:	4602      	mov	r2, r0
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	429a      	cmp	r2, r3
 800e996:	d803      	bhi.n	800e9a0 <HAL_SPI_Receive+0x1bc>
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e99e:	d102      	bne.n	800e9a6 <HAL_SPI_Receive+0x1c2>
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d102      	bne.n	800e9ac <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e9aa:	e017      	b.n	800e9dc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1cd      	bne.n	800e952 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f000 fa27 	bl	800ee0e <SPI_EndRxTransaction>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2220      	movs	r2, #32
 800e9ca:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d002      	beq.n	800e9da <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	75fb      	strb	r3, [r7, #23]
 800e9d8:	e000      	b.n	800e9dc <HAL_SPI_Receive+0x1f8>
  }

error :
 800e9da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b08c      	sub	sp, #48	; 0x30
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	60f8      	str	r0, [r7, #12]
 800e9fe:	60b9      	str	r1, [r7, #8]
 800ea00:	607a      	str	r2, [r7, #4]
 800ea02:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea04:	2301      	movs	r3, #1
 800ea06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d101      	bne.n	800ea1c <HAL_SPI_TransmitReceive+0x26>
 800ea18:	2302      	movs	r3, #2
 800ea1a:	e18a      	b.n	800ed32 <HAL_SPI_TransmitReceive+0x33c>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea24:	f7fb f958 	bl	8009cd8 <HAL_GetTick>
 800ea28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ea3a:	887b      	ldrh	r3, [r7, #2]
 800ea3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d00f      	beq.n	800ea66 <HAL_SPI_TransmitReceive+0x70>
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea4c:	d107      	bne.n	800ea5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d103      	bne.n	800ea5e <HAL_SPI_TransmitReceive+0x68>
 800ea56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea5a:	2b04      	cmp	r3, #4
 800ea5c:	d003      	beq.n	800ea66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ea5e:	2302      	movs	r3, #2
 800ea60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ea64:	e15b      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <HAL_SPI_TransmitReceive+0x82>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d002      	beq.n	800ea78 <HAL_SPI_TransmitReceive+0x82>
 800ea72:	887b      	ldrh	r3, [r7, #2]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d103      	bne.n	800ea80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ea7e:	e14e      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b04      	cmp	r3, #4
 800ea8a:	d003      	beq.n	800ea94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2205      	movs	r2, #5
 800ea90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2200      	movs	r2, #0
 800ea98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	887a      	ldrh	r2, [r7, #2]
 800eaa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	887a      	ldrh	r2, [r7, #2]
 800eaaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	887a      	ldrh	r2, [r7, #2]
 800eab6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	887a      	ldrh	r2, [r7, #2]
 800eabc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead4:	2b40      	cmp	r3, #64	; 0x40
 800ead6:	d007      	beq.n	800eae8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eaf0:	d178      	bne.n	800ebe4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d002      	beq.n	800eb00 <HAL_SPI_TransmitReceive+0x10a>
 800eafa:	8b7b      	ldrh	r3, [r7, #26]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d166      	bne.n	800ebce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb04:	881a      	ldrh	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb10:	1c9a      	adds	r2, r3, #2
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb24:	e053      	b.n	800ebce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	f003 0302 	and.w	r3, r3, #2
 800eb30:	2b02      	cmp	r3, #2
 800eb32:	d11b      	bne.n	800eb6c <HAL_SPI_TransmitReceive+0x176>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d016      	beq.n	800eb6c <HAL_SPI_TransmitReceive+0x176>
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d113      	bne.n	800eb6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb48:	881a      	ldrh	r2, [r3, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb54:	1c9a      	adds	r2, r3, #2
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	3b01      	subs	r3, #1
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	f003 0301 	and.w	r3, r3, #1
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d119      	bne.n	800ebae <HAL_SPI_TransmitReceive+0x1b8>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d014      	beq.n	800ebae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68da      	ldr	r2, [r3, #12]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8e:	b292      	uxth	r2, r2
 800eb90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb96:	1c9a      	adds	r2, r3, #2
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	3b01      	subs	r3, #1
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ebae:	f7fb f893 	bl	8009cd8 <HAL_GetTick>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d807      	bhi.n	800ebce <HAL_SPI_TransmitReceive+0x1d8>
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc4:	d003      	beq.n	800ebce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ebcc:	e0a7      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1a6      	bne.n	800eb26 <HAL_SPI_TransmitReceive+0x130>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1a1      	bne.n	800eb26 <HAL_SPI_TransmitReceive+0x130>
 800ebe2:	e07c      	b.n	800ecde <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <HAL_SPI_TransmitReceive+0x1fc>
 800ebec:	8b7b      	ldrh	r3, [r7, #26]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d16b      	bne.n	800ecca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	330c      	adds	r3, #12
 800ebfc:	7812      	ldrb	r2, [r2, #0]
 800ebfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec04:	1c5a      	adds	r2, r3, #1
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	3b01      	subs	r3, #1
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec18:	e057      	b.n	800ecca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	f003 0302 	and.w	r3, r3, #2
 800ec24:	2b02      	cmp	r3, #2
 800ec26:	d11c      	bne.n	800ec62 <HAL_SPI_TransmitReceive+0x26c>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d017      	beq.n	800ec62 <HAL_SPI_TransmitReceive+0x26c>
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d114      	bne.n	800ec62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	330c      	adds	r3, #12
 800ec42:	7812      	ldrb	r2, [r2, #0]
 800ec44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec4a:	1c5a      	adds	r2, r3, #1
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3b01      	subs	r3, #1
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	f003 0301 	and.w	r3, r3, #1
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d119      	bne.n	800eca4 <HAL_SPI_TransmitReceive+0x2ae>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d014      	beq.n	800eca4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68da      	ldr	r2, [r3, #12]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec84:	b2d2      	uxtb	r2, r2
 800ec86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8c:	1c5a      	adds	r2, r3, #1
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eca0:	2301      	movs	r3, #1
 800eca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eca4:	f7fb f818 	bl	8009cd8 <HAL_GetTick>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d803      	bhi.n	800ecbc <HAL_SPI_TransmitReceive+0x2c6>
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecba:	d102      	bne.n	800ecc2 <HAL_SPI_TransmitReceive+0x2cc>
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d103      	bne.n	800ecca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ecc8:	e029      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1a2      	bne.n	800ec1a <HAL_SPI_TransmitReceive+0x224>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d19d      	bne.n	800ec1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ecde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 f8f8 	bl	800eed8 <SPI_EndRxTxTransaction>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d006      	beq.n	800ecfc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2220      	movs	r2, #32
 800ecf8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ecfa:	e010      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10b      	bne.n	800ed1c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed04:	2300      	movs	r3, #0
 800ed06:	617b      	str	r3, [r7, #20]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	617b      	str	r3, [r7, #20]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	617b      	str	r3, [r7, #20]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	e000      	b.n	800ed1e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ed1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2201      	movs	r2, #1
 800ed22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3730      	adds	r7, #48	; 0x30
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	60b9      	str	r1, [r7, #8]
 800ed44:	603b      	str	r3, [r7, #0]
 800ed46:	4613      	mov	r3, r2
 800ed48:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ed4a:	e04c      	b.n	800ede6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed52:	d048      	beq.n	800ede6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ed54:	f7fa ffc0 	bl	8009cd8 <HAL_GetTick>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	683a      	ldr	r2, [r7, #0]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d902      	bls.n	800ed6a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d13d      	bne.n	800ede6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ed78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed82:	d111      	bne.n	800eda8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed8c:	d004      	beq.n	800ed98 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed96:	d107      	bne.n	800eda8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eda6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edb0:	d10f      	bne.n	800edd2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800edd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ede2:	2303      	movs	r3, #3
 800ede4:	e00f      	b.n	800ee06 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	689a      	ldr	r2, [r3, #8]
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	4013      	ands	r3, r2
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	bf0c      	ite	eq
 800edf6:	2301      	moveq	r3, #1
 800edf8:	2300      	movne	r3, #0
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	461a      	mov	r2, r3
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d1a3      	bne.n	800ed4c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b086      	sub	sp, #24
 800ee12:	af02      	add	r7, sp, #8
 800ee14:	60f8      	str	r0, [r7, #12]
 800ee16:	60b9      	str	r1, [r7, #8]
 800ee18:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee22:	d111      	bne.n	800ee48 <SPI_EndRxTransaction+0x3a>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee2c:	d004      	beq.n	800ee38 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee36:	d107      	bne.n	800ee48 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee46:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee50:	d12a      	bne.n	800eea8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee5a:	d012      	beq.n	800ee82 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	2200      	movs	r2, #0
 800ee64:	2180      	movs	r1, #128	; 0x80
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff ff67 	bl	800ed3a <SPI_WaitFlagStateUntilTimeout>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d02d      	beq.n	800eece <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee76:	f043 0220 	orr.w	r2, r3, #32
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ee7e:	2303      	movs	r3, #3
 800ee80:	e026      	b.n	800eed0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2101      	movs	r1, #1
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f7ff ff54 	bl	800ed3a <SPI_WaitFlagStateUntilTimeout>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d01a      	beq.n	800eece <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee9c:	f043 0220 	orr.w	r2, r3, #32
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eea4:	2303      	movs	r3, #3
 800eea6:	e013      	b.n	800eed0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7ff ff41 	bl	800ed3a <SPI_WaitFlagStateUntilTimeout>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d007      	beq.n	800eece <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eec2:	f043 0220 	orr.w	r2, r3, #32
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e000      	b.n	800eed0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af02      	add	r7, sp, #8
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eee4:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <SPI_EndRxTxTransaction+0x7c>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a1b      	ldr	r2, [pc, #108]	; (800ef58 <SPI_EndRxTxTransaction+0x80>)
 800eeea:	fba2 2303 	umull	r2, r3, r2, r3
 800eeee:	0d5b      	lsrs	r3, r3, #21
 800eef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eef4:	fb02 f303 	mul.w	r3, r2, r3
 800eef8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef02:	d112      	bne.n	800ef2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2180      	movs	r1, #128	; 0x80
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7ff ff13 	bl	800ed3a <SPI_WaitFlagStateUntilTimeout>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d016      	beq.n	800ef48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef1e:	f043 0220 	orr.w	r2, r3, #32
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef26:	2303      	movs	r3, #3
 800ef28:	e00f      	b.n	800ef4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00a      	beq.n	800ef46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	3b01      	subs	r3, #1
 800ef34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef40:	2b80      	cmp	r3, #128	; 0x80
 800ef42:	d0f2      	beq.n	800ef2a <SPI_EndRxTxTransaction+0x52>
 800ef44:	e000      	b.n	800ef48 <SPI_EndRxTxTransaction+0x70>
        break;
 800ef46:	bf00      	nop
  }

  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20000000 	.word	0x20000000
 800ef58:	165e9f81 	.word	0x165e9f81

0800ef5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e01d      	b.n	800efaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7f8 fa06 	bl	8007394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	3304      	adds	r3, #4
 800ef98:	4619      	mov	r1, r3
 800ef9a:	4610      	mov	r0, r2
 800ef9c:	f000 fb56 	bl	800f64c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2201      	movs	r2, #1
 800efa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b085      	sub	sp, #20
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68da      	ldr	r2, [r3, #12]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f042 0201 	orr.w	r2, r2, #1
 800efc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b06      	cmp	r3, #6
 800efda:	d007      	beq.n	800efec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f042 0201 	orr.w	r2, r2, #1
 800efea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d101      	bne.n	800f00c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	e01d      	b.n	800f048 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d106      	bne.n	800f026 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7f8 f943 	bl	80072ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2202      	movs	r2, #2
 800f02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3304      	adds	r3, #4
 800f036:	4619      	mov	r1, r3
 800f038:	4610      	mov	r0, r2
 800f03a:	f000 fb07 	bl	800f64c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2201      	movs	r2, #1
 800f042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2201      	movs	r2, #1
 800f060:	6839      	ldr	r1, [r7, #0]
 800f062:	4618      	mov	r0, r3
 800f064:	f000 fd42 	bl	800faec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a15      	ldr	r2, [pc, #84]	; (800f0c4 <HAL_TIM_PWM_Start+0x74>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d004      	beq.n	800f07c <HAL_TIM_PWM_Start+0x2c>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a14      	ldr	r2, [pc, #80]	; (800f0c8 <HAL_TIM_PWM_Start+0x78>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d101      	bne.n	800f080 <HAL_TIM_PWM_Start+0x30>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e000      	b.n	800f082 <HAL_TIM_PWM_Start+0x32>
 800f080:	2300      	movs	r3, #0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d007      	beq.n	800f096 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	f003 0307 	and.w	r3, r3, #7
 800f0a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b06      	cmp	r3, #6
 800f0a6:	d007      	beq.n	800f0b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f042 0201 	orr.w	r2, r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	40010000 	.word	0x40010000
 800f0c8:	40010400 	.word	0x40010400

0800f0cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e083      	b.n	800f1e8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d106      	bne.n	800f0fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7f8 f9dd 	bl	80074b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	6812      	ldr	r2, [r2, #0]
 800f10c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f110:	f023 0307 	bic.w	r3, r3, #7
 800f114:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3304      	adds	r3, #4
 800f11e:	4619      	mov	r1, r3
 800f120:	4610      	mov	r0, r2
 800f122:	f000 fa93 	bl	800f64c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	699b      	ldr	r3, [r3, #24]
 800f134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6a1b      	ldr	r3, [r3, #32]
 800f13c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	697a      	ldr	r2, [r7, #20]
 800f144:	4313      	orrs	r3, r2
 800f146:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f14e:	f023 0303 	bic.w	r3, r3, #3
 800f152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	689a      	ldr	r2, [r3, #8]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	4313      	orrs	r3, r2
 800f160:	693a      	ldr	r2, [r7, #16]
 800f162:	4313      	orrs	r3, r2
 800f164:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f16c:	f023 030c 	bic.w	r3, r3, #12
 800f170:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f17c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	68da      	ldr	r2, [r3, #12]
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	69db      	ldr	r3, [r3, #28]
 800f186:	021b      	lsls	r3, r3, #8
 800f188:	4313      	orrs	r3, r2
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	011a      	lsls	r2, r3, #4
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	031b      	lsls	r3, r3, #12
 800f19c:	4313      	orrs	r3, r2
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f1aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f1b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	011b      	lsls	r3, r3, #4
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <HAL_TIM_Encoder_Start+0x16>
 800f200:	2b04      	cmp	r3, #4
 800f202:	d008      	beq.n	800f216 <HAL_TIM_Encoder_Start+0x26>
 800f204:	e00f      	b.n	800f226 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2201      	movs	r2, #1
 800f20c:	2100      	movs	r1, #0
 800f20e:	4618      	mov	r0, r3
 800f210:	f000 fc6c 	bl	800faec <TIM_CCxChannelCmd>
      break;
 800f214:	e016      	b.n	800f244 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2201      	movs	r2, #1
 800f21c:	2104      	movs	r1, #4
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fc64 	bl	800faec <TIM_CCxChannelCmd>
      break;
 800f224:	e00e      	b.n	800f244 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2201      	movs	r2, #1
 800f22c:	2100      	movs	r1, #0
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 fc5c 	bl	800faec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2201      	movs	r2, #1
 800f23a:	2104      	movs	r1, #4
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 fc55 	bl	800faec <TIM_CCxChannelCmd>
      break;
 800f242:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f042 0201 	orr.w	r2, r2, #1
 800f252:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b082      	sub	sp, #8
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	f003 0302 	and.w	r3, r3, #2
 800f270:	2b02      	cmp	r3, #2
 800f272:	d122      	bne.n	800f2ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	f003 0302 	and.w	r3, r3, #2
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d11b      	bne.n	800f2ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f06f 0202 	mvn.w	r2, #2
 800f28a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	699b      	ldr	r3, [r3, #24]
 800f298:	f003 0303 	and.w	r3, r3, #3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 f9b5 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f2a6:	e005      	b.n	800f2b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 f9a7 	bl	800f5fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 f9b8 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	2b04      	cmp	r3, #4
 800f2c6:	d122      	bne.n	800f30e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	f003 0304 	and.w	r3, r3, #4
 800f2d2:	2b04      	cmp	r3, #4
 800f2d4:	d11b      	bne.n	800f30e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f06f 0204 	mvn.w	r2, #4
 800f2de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d003      	beq.n	800f2fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 f98b 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f2fa:	e005      	b.n	800f308 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f97d 	bl	800f5fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 f98e 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	f003 0308 	and.w	r3, r3, #8
 800f318:	2b08      	cmp	r3, #8
 800f31a:	d122      	bne.n	800f362 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	f003 0308 	and.w	r3, r3, #8
 800f326:	2b08      	cmp	r3, #8
 800f328:	d11b      	bne.n	800f362 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f06f 0208 	mvn.w	r2, #8
 800f332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2204      	movs	r2, #4
 800f338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	69db      	ldr	r3, [r3, #28]
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d003      	beq.n	800f350 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 f961 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f34e:	e005      	b.n	800f35c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f953 	bl	800f5fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f964 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	f003 0310 	and.w	r3, r3, #16
 800f36c:	2b10      	cmp	r3, #16
 800f36e:	d122      	bne.n	800f3b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	f003 0310 	and.w	r3, r3, #16
 800f37a:	2b10      	cmp	r3, #16
 800f37c:	d11b      	bne.n	800f3b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f06f 0210 	mvn.w	r2, #16
 800f386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2208      	movs	r2, #8
 800f38c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	69db      	ldr	r3, [r3, #28]
 800f394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d003      	beq.n	800f3a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 f937 	bl	800f610 <HAL_TIM_IC_CaptureCallback>
 800f3a2:	e005      	b.n	800f3b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f929 	bl	800f5fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f93a 	bl	800f624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f003 0301 	and.w	r3, r3, #1
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d10e      	bne.n	800f3e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	f003 0301 	and.w	r3, r3, #1
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d107      	bne.n	800f3e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f06f 0201 	mvn.w	r2, #1
 800f3da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7f6 fd53 	bl	8005e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3ec:	2b80      	cmp	r3, #128	; 0x80
 800f3ee:	d10e      	bne.n	800f40e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3fa:	2b80      	cmp	r3, #128	; 0x80
 800f3fc:	d107      	bne.n	800f40e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fc6d 	bl	800fce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f418:	2b40      	cmp	r3, #64	; 0x40
 800f41a:	d10e      	bne.n	800f43a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f426:	2b40      	cmp	r3, #64	; 0x40
 800f428:	d107      	bne.n	800f43a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f8ff 	bl	800f638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	691b      	ldr	r3, [r3, #16]
 800f440:	f003 0320 	and.w	r3, r3, #32
 800f444:	2b20      	cmp	r3, #32
 800f446:	d10e      	bne.n	800f466 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	f003 0320 	and.w	r3, r3, #32
 800f452:	2b20      	cmp	r3, #32
 800f454:	d107      	bne.n	800f466 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f06f 0220 	mvn.w	r2, #32
 800f45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fc37 	bl	800fcd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f466:	bf00      	nop
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
	...

0800f470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f482:	2b01      	cmp	r3, #1
 800f484:	d101      	bne.n	800f48a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f486:	2302      	movs	r3, #2
 800f488:	e0b4      	b.n	800f5f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2202      	movs	r2, #2
 800f496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b0c      	cmp	r3, #12
 800f49e:	f200 809f 	bhi.w	800f5e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f4a2:	a201      	add	r2, pc, #4	; (adr r2, 800f4a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a8:	0800f4dd 	.word	0x0800f4dd
 800f4ac:	0800f5e1 	.word	0x0800f5e1
 800f4b0:	0800f5e1 	.word	0x0800f5e1
 800f4b4:	0800f5e1 	.word	0x0800f5e1
 800f4b8:	0800f51d 	.word	0x0800f51d
 800f4bc:	0800f5e1 	.word	0x0800f5e1
 800f4c0:	0800f5e1 	.word	0x0800f5e1
 800f4c4:	0800f5e1 	.word	0x0800f5e1
 800f4c8:	0800f55f 	.word	0x0800f55f
 800f4cc:	0800f5e1 	.word	0x0800f5e1
 800f4d0:	0800f5e1 	.word	0x0800f5e1
 800f4d4:	0800f5e1 	.word	0x0800f5e1
 800f4d8:	0800f59f 	.word	0x0800f59f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68b9      	ldr	r1, [r7, #8]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 f952 	bl	800f78c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	699a      	ldr	r2, [r3, #24]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f042 0208 	orr.w	r2, r2, #8
 800f4f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	699a      	ldr	r2, [r3, #24]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f022 0204 	bic.w	r2, r2, #4
 800f506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6999      	ldr	r1, [r3, #24]
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	691a      	ldr	r2, [r3, #16]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	430a      	orrs	r2, r1
 800f518:	619a      	str	r2, [r3, #24]
      break;
 800f51a:	e062      	b.n	800f5e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68b9      	ldr	r1, [r7, #8]
 800f522:	4618      	mov	r0, r3
 800f524:	f000 f9a2 	bl	800f86c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	699a      	ldr	r2, [r3, #24]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	699a      	ldr	r2, [r3, #24]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6999      	ldr	r1, [r3, #24]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	021a      	lsls	r2, r3, #8
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	430a      	orrs	r2, r1
 800f55a:	619a      	str	r2, [r3, #24]
      break;
 800f55c:	e041      	b.n	800f5e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68b9      	ldr	r1, [r7, #8]
 800f564:	4618      	mov	r0, r3
 800f566:	f000 f9f7 	bl	800f958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	69da      	ldr	r2, [r3, #28]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f042 0208 	orr.w	r2, r2, #8
 800f578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	69da      	ldr	r2, [r3, #28]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f022 0204 	bic.w	r2, r2, #4
 800f588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	69d9      	ldr	r1, [r3, #28]
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	691a      	ldr	r2, [r3, #16]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	430a      	orrs	r2, r1
 800f59a:	61da      	str	r2, [r3, #28]
      break;
 800f59c:	e021      	b.n	800f5e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f000 fa4b 	bl	800fa40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	69da      	ldr	r2, [r3, #28]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	69da      	ldr	r2, [r3, #28]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	69d9      	ldr	r1, [r3, #28]
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	021a      	lsls	r2, r3, #8
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	430a      	orrs	r2, r1
 800f5dc:	61da      	str	r2, [r3, #28]
      break;
 800f5de:	e000      	b.n	800f5e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f5e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f604:	bf00      	nop
 800f606:	370c      	adds	r7, #12
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f618:	bf00      	nop
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f62c:	bf00      	nop
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f640:	bf00      	nop
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a40      	ldr	r2, [pc, #256]	; (800f760 <TIM_Base_SetConfig+0x114>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d013      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f66a:	d00f      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a3d      	ldr	r2, [pc, #244]	; (800f764 <TIM_Base_SetConfig+0x118>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d00b      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a3c      	ldr	r2, [pc, #240]	; (800f768 <TIM_Base_SetConfig+0x11c>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d007      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a3b      	ldr	r2, [pc, #236]	; (800f76c <TIM_Base_SetConfig+0x120>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d003      	beq.n	800f68c <TIM_Base_SetConfig+0x40>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a3a      	ldr	r2, [pc, #232]	; (800f770 <TIM_Base_SetConfig+0x124>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d108      	bne.n	800f69e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a2f      	ldr	r2, [pc, #188]	; (800f760 <TIM_Base_SetConfig+0x114>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d02b      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ac:	d027      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a2c      	ldr	r2, [pc, #176]	; (800f764 <TIM_Base_SetConfig+0x118>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d023      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a2b      	ldr	r2, [pc, #172]	; (800f768 <TIM_Base_SetConfig+0x11c>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d01f      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a2a      	ldr	r2, [pc, #168]	; (800f76c <TIM_Base_SetConfig+0x120>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d01b      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a29      	ldr	r2, [pc, #164]	; (800f770 <TIM_Base_SetConfig+0x124>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d017      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a28      	ldr	r2, [pc, #160]	; (800f774 <TIM_Base_SetConfig+0x128>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d013      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a27      	ldr	r2, [pc, #156]	; (800f778 <TIM_Base_SetConfig+0x12c>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d00f      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a26      	ldr	r2, [pc, #152]	; (800f77c <TIM_Base_SetConfig+0x130>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d00b      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a25      	ldr	r2, [pc, #148]	; (800f780 <TIM_Base_SetConfig+0x134>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d007      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a24      	ldr	r2, [pc, #144]	; (800f784 <TIM_Base_SetConfig+0x138>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d003      	beq.n	800f6fe <TIM_Base_SetConfig+0xb2>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a23      	ldr	r2, [pc, #140]	; (800f788 <TIM_Base_SetConfig+0x13c>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d108      	bne.n	800f710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	4313      	orrs	r3, r2
 800f70e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	695b      	ldr	r3, [r3, #20]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	689a      	ldr	r2, [r3, #8]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	4a0a      	ldr	r2, [pc, #40]	; (800f760 <TIM_Base_SetConfig+0x114>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d003      	beq.n	800f744 <TIM_Base_SetConfig+0xf8>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4a0c      	ldr	r2, [pc, #48]	; (800f770 <TIM_Base_SetConfig+0x124>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d103      	bne.n	800f74c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	691a      	ldr	r2, [r3, #16]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	615a      	str	r2, [r3, #20]
}
 800f752:	bf00      	nop
 800f754:	3714      	adds	r7, #20
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	40010000 	.word	0x40010000
 800f764:	40000400 	.word	0x40000400
 800f768:	40000800 	.word	0x40000800
 800f76c:	40000c00 	.word	0x40000c00
 800f770:	40010400 	.word	0x40010400
 800f774:	40014000 	.word	0x40014000
 800f778:	40014400 	.word	0x40014400
 800f77c:	40014800 	.word	0x40014800
 800f780:	40001800 	.word	0x40001800
 800f784:	40001c00 	.word	0x40001c00
 800f788:	40002000 	.word	0x40002000

0800f78c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a1b      	ldr	r3, [r3, #32]
 800f79a:	f023 0201 	bic.w	r2, r3, #1
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	699b      	ldr	r3, [r3, #24]
 800f7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f023 0303 	bic.w	r3, r3, #3
 800f7c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f023 0302 	bic.w	r3, r3, #2
 800f7d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	697a      	ldr	r2, [r7, #20]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a20      	ldr	r2, [pc, #128]	; (800f864 <TIM_OC1_SetConfig+0xd8>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d003      	beq.n	800f7f0 <TIM_OC1_SetConfig+0x64>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a1f      	ldr	r2, [pc, #124]	; (800f868 <TIM_OC1_SetConfig+0xdc>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d10c      	bne.n	800f80a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	f023 0308 	bic.w	r3, r3, #8
 800f7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	697a      	ldr	r2, [r7, #20]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	f023 0304 	bic.w	r3, r3, #4
 800f808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a15      	ldr	r2, [pc, #84]	; (800f864 <TIM_OC1_SetConfig+0xd8>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d003      	beq.n	800f81a <TIM_OC1_SetConfig+0x8e>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a14      	ldr	r2, [pc, #80]	; (800f868 <TIM_OC1_SetConfig+0xdc>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d111      	bne.n	800f83e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	695b      	ldr	r3, [r3, #20]
 800f82e:	693a      	ldr	r2, [r7, #16]
 800f830:	4313      	orrs	r3, r2
 800f832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	699b      	ldr	r3, [r3, #24]
 800f838:	693a      	ldr	r2, [r7, #16]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	685a      	ldr	r2, [r3, #4]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	621a      	str	r2, [r3, #32]
}
 800f858:	bf00      	nop
 800f85a:	371c      	adds	r7, #28
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr
 800f864:	40010000 	.word	0x40010000
 800f868:	40010400 	.word	0x40010400

0800f86c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b087      	sub	sp, #28
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6a1b      	ldr	r3, [r3, #32]
 800f87a:	f023 0210 	bic.w	r2, r3, #16
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a1b      	ldr	r3, [r3, #32]
 800f886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	699b      	ldr	r3, [r3, #24]
 800f892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	021b      	lsls	r3, r3, #8
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	f023 0320 	bic.w	r3, r3, #32
 800f8b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	011b      	lsls	r3, r3, #4
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a22      	ldr	r2, [pc, #136]	; (800f950 <TIM_OC2_SetConfig+0xe4>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d003      	beq.n	800f8d4 <TIM_OC2_SetConfig+0x68>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a21      	ldr	r2, [pc, #132]	; (800f954 <TIM_OC2_SetConfig+0xe8>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d10d      	bne.n	800f8f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	011b      	lsls	r3, r3, #4
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a17      	ldr	r2, [pc, #92]	; (800f950 <TIM_OC2_SetConfig+0xe4>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d003      	beq.n	800f900 <TIM_OC2_SetConfig+0x94>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a16      	ldr	r2, [pc, #88]	; (800f954 <TIM_OC2_SetConfig+0xe8>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d113      	bne.n	800f928 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f90e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	695b      	ldr	r3, [r3, #20]
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	693a      	ldr	r2, [r7, #16]
 800f918:	4313      	orrs	r3, r2
 800f91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	699b      	ldr	r3, [r3, #24]
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	4313      	orrs	r3, r2
 800f926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	693a      	ldr	r2, [r7, #16]
 800f92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	685a      	ldr	r2, [r3, #4]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	697a      	ldr	r2, [r7, #20]
 800f940:	621a      	str	r2, [r3, #32]
}
 800f942:	bf00      	nop
 800f944:	371c      	adds	r7, #28
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	40010000 	.word	0x40010000
 800f954:	40010400 	.word	0x40010400

0800f958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f958:	b480      	push	{r7}
 800f95a:	b087      	sub	sp, #28
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a1b      	ldr	r3, [r3, #32]
 800f966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	69db      	ldr	r3, [r3, #28]
 800f97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f023 0303 	bic.w	r3, r3, #3
 800f98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	4313      	orrs	r3, r2
 800f998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	021b      	lsls	r3, r3, #8
 800f9a8:	697a      	ldr	r2, [r7, #20]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4a21      	ldr	r2, [pc, #132]	; (800fa38 <TIM_OC3_SetConfig+0xe0>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d003      	beq.n	800f9be <TIM_OC3_SetConfig+0x66>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4a20      	ldr	r2, [pc, #128]	; (800fa3c <TIM_OC3_SetConfig+0xe4>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d10d      	bne.n	800f9da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	021b      	lsls	r3, r3, #8
 800f9cc:	697a      	ldr	r2, [r7, #20]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a16      	ldr	r2, [pc, #88]	; (800fa38 <TIM_OC3_SetConfig+0xe0>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d003      	beq.n	800f9ea <TIM_OC3_SetConfig+0x92>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a15      	ldr	r2, [pc, #84]	; (800fa3c <TIM_OC3_SetConfig+0xe4>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d113      	bne.n	800fa12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	011b      	lsls	r3, r3, #4
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	011b      	lsls	r3, r3, #4
 800fa0c:	693a      	ldr	r2, [r7, #16]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	693a      	ldr	r2, [r7, #16]
 800fa16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	685a      	ldr	r2, [r3, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	621a      	str	r2, [r3, #32]
}
 800fa2c:	bf00      	nop
 800fa2e:	371c      	adds	r7, #28
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr
 800fa38:	40010000 	.word	0x40010000
 800fa3c:	40010400 	.word	0x40010400

0800fa40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	69db      	ldr	r3, [r3, #28]
 800fa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	021b      	lsls	r3, r3, #8
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	031b      	lsls	r3, r3, #12
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	4313      	orrs	r3, r2
 800fa96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4a12      	ldr	r2, [pc, #72]	; (800fae4 <TIM_OC4_SetConfig+0xa4>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d003      	beq.n	800faa8 <TIM_OC4_SetConfig+0x68>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4a11      	ldr	r2, [pc, #68]	; (800fae8 <TIM_OC4_SetConfig+0xa8>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d109      	bne.n	800fabc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800faae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	019b      	lsls	r3, r3, #6
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	4313      	orrs	r3, r2
 800faba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	621a      	str	r2, [r3, #32]
}
 800fad6:	bf00      	nop
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	40010000 	.word	0x40010000
 800fae8:	40010400 	.word	0x40010400

0800faec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800faec:	b480      	push	{r7}
 800faee:	b087      	sub	sp, #28
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	f003 031f 	and.w	r3, r3, #31
 800fafe:	2201      	movs	r2, #1
 800fb00:	fa02 f303 	lsl.w	r3, r2, r3
 800fb04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6a1a      	ldr	r2, [r3, #32]
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	43db      	mvns	r3, r3
 800fb0e:	401a      	ands	r2, r3
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6a1a      	ldr	r2, [r3, #32]
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	f003 031f 	and.w	r3, r3, #31
 800fb1e:	6879      	ldr	r1, [r7, #4]
 800fb20:	fa01 f303 	lsl.w	r3, r1, r3
 800fb24:	431a      	orrs	r2, r3
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	621a      	str	r2, [r3, #32]
}
 800fb2a:	bf00      	nop
 800fb2c:	371c      	adds	r7, #28
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
	...

0800fb38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d101      	bne.n	800fb50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb4c:	2302      	movs	r3, #2
 800fb4e:	e05a      	b.n	800fc06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2202      	movs	r2, #2
 800fb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a21      	ldr	r2, [pc, #132]	; (800fc14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d022      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb9c:	d01d      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a1d      	ldr	r2, [pc, #116]	; (800fc18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d018      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a1b      	ldr	r2, [pc, #108]	; (800fc1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d013      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a1a      	ldr	r2, [pc, #104]	; (800fc20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00e      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a18      	ldr	r2, [pc, #96]	; (800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d009      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a17      	ldr	r2, [pc, #92]	; (800fc28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d004      	beq.n	800fbda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a15      	ldr	r2, [pc, #84]	; (800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d10c      	bne.n	800fbf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	68ba      	ldr	r2, [r7, #8]
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	40010000 	.word	0x40010000
 800fc18:	40000400 	.word	0x40000400
 800fc1c:	40000800 	.word	0x40000800
 800fc20:	40000c00 	.word	0x40000c00
 800fc24:	40010400 	.word	0x40010400
 800fc28:	40014000 	.word	0x40014000
 800fc2c:	40001800 	.word	0x40001800

0800fc30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d101      	bne.n	800fc4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fc48:	2302      	movs	r3, #2
 800fc4a:	e03d      	b.n	800fcc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2201      	movs	r2, #1
 800fc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	4313      	orrs	r3, r2
 800fc98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	695b      	ldr	r3, [r3, #20]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fcdc:	bf00      	nop
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr

0800fce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr

0800fcfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e03f      	b.n	800fd8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7f7 fcf0 	bl	8007708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2224      	movs	r2, #36	; 0x24
 800fd2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	68da      	ldr	r2, [r3, #12]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fd3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f829 	bl	800fd98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	691a      	ldr	r2, [r3, #16]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	695a      	ldr	r2, [r3, #20]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68da      	ldr	r2, [r3, #12]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fd74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2220      	movs	r2, #32
 800fd80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2220      	movs	r2, #32
 800fd88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3708      	adds	r7, #8
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
	...

0800fd98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	b085      	sub	sp, #20
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	68da      	ldr	r2, [r3, #12]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	430a      	orrs	r2, r1
 800fdb6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	689a      	ldr	r2, [r3, #8]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	431a      	orrs	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	695b      	ldr	r3, [r3, #20]
 800fdc6:	431a      	orrs	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	69db      	ldr	r3, [r3, #28]
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fdda:	f023 030c 	bic.w	r3, r3, #12
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	6812      	ldr	r2, [r2, #0]
 800fde2:	68f9      	ldr	r1, [r7, #12]
 800fde4:	430b      	orrs	r3, r1
 800fde6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	699a      	ldr	r2, [r3, #24]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	69db      	ldr	r3, [r3, #28]
 800fe02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe06:	f040 818b 	bne.w	8010120 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4ac1      	ldr	r2, [pc, #772]	; (8010114 <UART_SetConfig+0x37c>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d005      	beq.n	800fe20 <UART_SetConfig+0x88>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4abf      	ldr	r2, [pc, #764]	; (8010118 <UART_SetConfig+0x380>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	f040 80bd 	bne.w	800ff9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe20:	f7fc fbcc 	bl	800c5bc <HAL_RCC_GetPCLK2Freq>
 800fe24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	461d      	mov	r5, r3
 800fe2a:	f04f 0600 	mov.w	r6, #0
 800fe2e:	46a8      	mov	r8, r5
 800fe30:	46b1      	mov	r9, r6
 800fe32:	eb18 0308 	adds.w	r3, r8, r8
 800fe36:	eb49 0409 	adc.w	r4, r9, r9
 800fe3a:	4698      	mov	r8, r3
 800fe3c:	46a1      	mov	r9, r4
 800fe3e:	eb18 0805 	adds.w	r8, r8, r5
 800fe42:	eb49 0906 	adc.w	r9, r9, r6
 800fe46:	f04f 0100 	mov.w	r1, #0
 800fe4a:	f04f 0200 	mov.w	r2, #0
 800fe4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fe56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fe5a:	4688      	mov	r8, r1
 800fe5c:	4691      	mov	r9, r2
 800fe5e:	eb18 0005 	adds.w	r0, r8, r5
 800fe62:	eb49 0106 	adc.w	r1, r9, r6
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	461d      	mov	r5, r3
 800fe6c:	f04f 0600 	mov.w	r6, #0
 800fe70:	196b      	adds	r3, r5, r5
 800fe72:	eb46 0406 	adc.w	r4, r6, r6
 800fe76:	461a      	mov	r2, r3
 800fe78:	4623      	mov	r3, r4
 800fe7a:	f7f0 ff1d 	bl	8000cb8 <__aeabi_uldivmod>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	460c      	mov	r4, r1
 800fe82:	461a      	mov	r2, r3
 800fe84:	4ba5      	ldr	r3, [pc, #660]	; (801011c <UART_SetConfig+0x384>)
 800fe86:	fba3 2302 	umull	r2, r3, r3, r2
 800fe8a:	095b      	lsrs	r3, r3, #5
 800fe8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	461d      	mov	r5, r3
 800fe94:	f04f 0600 	mov.w	r6, #0
 800fe98:	46a9      	mov	r9, r5
 800fe9a:	46b2      	mov	sl, r6
 800fe9c:	eb19 0309 	adds.w	r3, r9, r9
 800fea0:	eb4a 040a 	adc.w	r4, sl, sl
 800fea4:	4699      	mov	r9, r3
 800fea6:	46a2      	mov	sl, r4
 800fea8:	eb19 0905 	adds.w	r9, r9, r5
 800feac:	eb4a 0a06 	adc.w	sl, sl, r6
 800feb0:	f04f 0100 	mov.w	r1, #0
 800feb4:	f04f 0200 	mov.w	r2, #0
 800feb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800febc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fec0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fec4:	4689      	mov	r9, r1
 800fec6:	4692      	mov	sl, r2
 800fec8:	eb19 0005 	adds.w	r0, r9, r5
 800fecc:	eb4a 0106 	adc.w	r1, sl, r6
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	461d      	mov	r5, r3
 800fed6:	f04f 0600 	mov.w	r6, #0
 800feda:	196b      	adds	r3, r5, r5
 800fedc:	eb46 0406 	adc.w	r4, r6, r6
 800fee0:	461a      	mov	r2, r3
 800fee2:	4623      	mov	r3, r4
 800fee4:	f7f0 fee8 	bl	8000cb8 <__aeabi_uldivmod>
 800fee8:	4603      	mov	r3, r0
 800feea:	460c      	mov	r4, r1
 800feec:	461a      	mov	r2, r3
 800feee:	4b8b      	ldr	r3, [pc, #556]	; (801011c <UART_SetConfig+0x384>)
 800fef0:	fba3 1302 	umull	r1, r3, r3, r2
 800fef4:	095b      	lsrs	r3, r3, #5
 800fef6:	2164      	movs	r1, #100	; 0x64
 800fef8:	fb01 f303 	mul.w	r3, r1, r3
 800fefc:	1ad3      	subs	r3, r2, r3
 800fefe:	00db      	lsls	r3, r3, #3
 800ff00:	3332      	adds	r3, #50	; 0x32
 800ff02:	4a86      	ldr	r2, [pc, #536]	; (801011c <UART_SetConfig+0x384>)
 800ff04:	fba2 2303 	umull	r2, r3, r2, r3
 800ff08:	095b      	lsrs	r3, r3, #5
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ff10:	4498      	add	r8, r3
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	461d      	mov	r5, r3
 800ff16:	f04f 0600 	mov.w	r6, #0
 800ff1a:	46a9      	mov	r9, r5
 800ff1c:	46b2      	mov	sl, r6
 800ff1e:	eb19 0309 	adds.w	r3, r9, r9
 800ff22:	eb4a 040a 	adc.w	r4, sl, sl
 800ff26:	4699      	mov	r9, r3
 800ff28:	46a2      	mov	sl, r4
 800ff2a:	eb19 0905 	adds.w	r9, r9, r5
 800ff2e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff32:	f04f 0100 	mov.w	r1, #0
 800ff36:	f04f 0200 	mov.w	r2, #0
 800ff3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff46:	4689      	mov	r9, r1
 800ff48:	4692      	mov	sl, r2
 800ff4a:	eb19 0005 	adds.w	r0, r9, r5
 800ff4e:	eb4a 0106 	adc.w	r1, sl, r6
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	461d      	mov	r5, r3
 800ff58:	f04f 0600 	mov.w	r6, #0
 800ff5c:	196b      	adds	r3, r5, r5
 800ff5e:	eb46 0406 	adc.w	r4, r6, r6
 800ff62:	461a      	mov	r2, r3
 800ff64:	4623      	mov	r3, r4
 800ff66:	f7f0 fea7 	bl	8000cb8 <__aeabi_uldivmod>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	461a      	mov	r2, r3
 800ff70:	4b6a      	ldr	r3, [pc, #424]	; (801011c <UART_SetConfig+0x384>)
 800ff72:	fba3 1302 	umull	r1, r3, r3, r2
 800ff76:	095b      	lsrs	r3, r3, #5
 800ff78:	2164      	movs	r1, #100	; 0x64
 800ff7a:	fb01 f303 	mul.w	r3, r1, r3
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	00db      	lsls	r3, r3, #3
 800ff82:	3332      	adds	r3, #50	; 0x32
 800ff84:	4a65      	ldr	r2, [pc, #404]	; (801011c <UART_SetConfig+0x384>)
 800ff86:	fba2 2303 	umull	r2, r3, r2, r3
 800ff8a:	095b      	lsrs	r3, r3, #5
 800ff8c:	f003 0207 	and.w	r2, r3, #7
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4442      	add	r2, r8
 800ff96:	609a      	str	r2, [r3, #8]
 800ff98:	e26f      	b.n	801047a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ff9a:	f7fc fafb 	bl	800c594 <HAL_RCC_GetPCLK1Freq>
 800ff9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	461d      	mov	r5, r3
 800ffa4:	f04f 0600 	mov.w	r6, #0
 800ffa8:	46a8      	mov	r8, r5
 800ffaa:	46b1      	mov	r9, r6
 800ffac:	eb18 0308 	adds.w	r3, r8, r8
 800ffb0:	eb49 0409 	adc.w	r4, r9, r9
 800ffb4:	4698      	mov	r8, r3
 800ffb6:	46a1      	mov	r9, r4
 800ffb8:	eb18 0805 	adds.w	r8, r8, r5
 800ffbc:	eb49 0906 	adc.w	r9, r9, r6
 800ffc0:	f04f 0100 	mov.w	r1, #0
 800ffc4:	f04f 0200 	mov.w	r2, #0
 800ffc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ffcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ffd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ffd4:	4688      	mov	r8, r1
 800ffd6:	4691      	mov	r9, r2
 800ffd8:	eb18 0005 	adds.w	r0, r8, r5
 800ffdc:	eb49 0106 	adc.w	r1, r9, r6
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	461d      	mov	r5, r3
 800ffe6:	f04f 0600 	mov.w	r6, #0
 800ffea:	196b      	adds	r3, r5, r5
 800ffec:	eb46 0406 	adc.w	r4, r6, r6
 800fff0:	461a      	mov	r2, r3
 800fff2:	4623      	mov	r3, r4
 800fff4:	f7f0 fe60 	bl	8000cb8 <__aeabi_uldivmod>
 800fff8:	4603      	mov	r3, r0
 800fffa:	460c      	mov	r4, r1
 800fffc:	461a      	mov	r2, r3
 800fffe:	4b47      	ldr	r3, [pc, #284]	; (801011c <UART_SetConfig+0x384>)
 8010000:	fba3 2302 	umull	r2, r3, r3, r2
 8010004:	095b      	lsrs	r3, r3, #5
 8010006:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	461d      	mov	r5, r3
 801000e:	f04f 0600 	mov.w	r6, #0
 8010012:	46a9      	mov	r9, r5
 8010014:	46b2      	mov	sl, r6
 8010016:	eb19 0309 	adds.w	r3, r9, r9
 801001a:	eb4a 040a 	adc.w	r4, sl, sl
 801001e:	4699      	mov	r9, r3
 8010020:	46a2      	mov	sl, r4
 8010022:	eb19 0905 	adds.w	r9, r9, r5
 8010026:	eb4a 0a06 	adc.w	sl, sl, r6
 801002a:	f04f 0100 	mov.w	r1, #0
 801002e:	f04f 0200 	mov.w	r2, #0
 8010032:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010036:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801003a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801003e:	4689      	mov	r9, r1
 8010040:	4692      	mov	sl, r2
 8010042:	eb19 0005 	adds.w	r0, r9, r5
 8010046:	eb4a 0106 	adc.w	r1, sl, r6
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	461d      	mov	r5, r3
 8010050:	f04f 0600 	mov.w	r6, #0
 8010054:	196b      	adds	r3, r5, r5
 8010056:	eb46 0406 	adc.w	r4, r6, r6
 801005a:	461a      	mov	r2, r3
 801005c:	4623      	mov	r3, r4
 801005e:	f7f0 fe2b 	bl	8000cb8 <__aeabi_uldivmod>
 8010062:	4603      	mov	r3, r0
 8010064:	460c      	mov	r4, r1
 8010066:	461a      	mov	r2, r3
 8010068:	4b2c      	ldr	r3, [pc, #176]	; (801011c <UART_SetConfig+0x384>)
 801006a:	fba3 1302 	umull	r1, r3, r3, r2
 801006e:	095b      	lsrs	r3, r3, #5
 8010070:	2164      	movs	r1, #100	; 0x64
 8010072:	fb01 f303 	mul.w	r3, r1, r3
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	3332      	adds	r3, #50	; 0x32
 801007c:	4a27      	ldr	r2, [pc, #156]	; (801011c <UART_SetConfig+0x384>)
 801007e:	fba2 2303 	umull	r2, r3, r2, r3
 8010082:	095b      	lsrs	r3, r3, #5
 8010084:	005b      	lsls	r3, r3, #1
 8010086:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801008a:	4498      	add	r8, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	461d      	mov	r5, r3
 8010090:	f04f 0600 	mov.w	r6, #0
 8010094:	46a9      	mov	r9, r5
 8010096:	46b2      	mov	sl, r6
 8010098:	eb19 0309 	adds.w	r3, r9, r9
 801009c:	eb4a 040a 	adc.w	r4, sl, sl
 80100a0:	4699      	mov	r9, r3
 80100a2:	46a2      	mov	sl, r4
 80100a4:	eb19 0905 	adds.w	r9, r9, r5
 80100a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80100ac:	f04f 0100 	mov.w	r1, #0
 80100b0:	f04f 0200 	mov.w	r2, #0
 80100b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100c0:	4689      	mov	r9, r1
 80100c2:	4692      	mov	sl, r2
 80100c4:	eb19 0005 	adds.w	r0, r9, r5
 80100c8:	eb4a 0106 	adc.w	r1, sl, r6
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	461d      	mov	r5, r3
 80100d2:	f04f 0600 	mov.w	r6, #0
 80100d6:	196b      	adds	r3, r5, r5
 80100d8:	eb46 0406 	adc.w	r4, r6, r6
 80100dc:	461a      	mov	r2, r3
 80100de:	4623      	mov	r3, r4
 80100e0:	f7f0 fdea 	bl	8000cb8 <__aeabi_uldivmod>
 80100e4:	4603      	mov	r3, r0
 80100e6:	460c      	mov	r4, r1
 80100e8:	461a      	mov	r2, r3
 80100ea:	4b0c      	ldr	r3, [pc, #48]	; (801011c <UART_SetConfig+0x384>)
 80100ec:	fba3 1302 	umull	r1, r3, r3, r2
 80100f0:	095b      	lsrs	r3, r3, #5
 80100f2:	2164      	movs	r1, #100	; 0x64
 80100f4:	fb01 f303 	mul.w	r3, r1, r3
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	00db      	lsls	r3, r3, #3
 80100fc:	3332      	adds	r3, #50	; 0x32
 80100fe:	4a07      	ldr	r2, [pc, #28]	; (801011c <UART_SetConfig+0x384>)
 8010100:	fba2 2303 	umull	r2, r3, r2, r3
 8010104:	095b      	lsrs	r3, r3, #5
 8010106:	f003 0207 	and.w	r2, r3, #7
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4442      	add	r2, r8
 8010110:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010112:	e1b2      	b.n	801047a <UART_SetConfig+0x6e2>
 8010114:	40011000 	.word	0x40011000
 8010118:	40011400 	.word	0x40011400
 801011c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4ad7      	ldr	r2, [pc, #860]	; (8010484 <UART_SetConfig+0x6ec>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d005      	beq.n	8010136 <UART_SetConfig+0x39e>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4ad6      	ldr	r2, [pc, #856]	; (8010488 <UART_SetConfig+0x6f0>)
 8010130:	4293      	cmp	r3, r2
 8010132:	f040 80d1 	bne.w	80102d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010136:	f7fc fa41 	bl	800c5bc <HAL_RCC_GetPCLK2Freq>
 801013a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	469a      	mov	sl, r3
 8010140:	f04f 0b00 	mov.w	fp, #0
 8010144:	46d0      	mov	r8, sl
 8010146:	46d9      	mov	r9, fp
 8010148:	eb18 0308 	adds.w	r3, r8, r8
 801014c:	eb49 0409 	adc.w	r4, r9, r9
 8010150:	4698      	mov	r8, r3
 8010152:	46a1      	mov	r9, r4
 8010154:	eb18 080a 	adds.w	r8, r8, sl
 8010158:	eb49 090b 	adc.w	r9, r9, fp
 801015c:	f04f 0100 	mov.w	r1, #0
 8010160:	f04f 0200 	mov.w	r2, #0
 8010164:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010168:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801016c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010170:	4688      	mov	r8, r1
 8010172:	4691      	mov	r9, r2
 8010174:	eb1a 0508 	adds.w	r5, sl, r8
 8010178:	eb4b 0609 	adc.w	r6, fp, r9
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	4619      	mov	r1, r3
 8010182:	f04f 0200 	mov.w	r2, #0
 8010186:	f04f 0300 	mov.w	r3, #0
 801018a:	f04f 0400 	mov.w	r4, #0
 801018e:	0094      	lsls	r4, r2, #2
 8010190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010194:	008b      	lsls	r3, r1, #2
 8010196:	461a      	mov	r2, r3
 8010198:	4623      	mov	r3, r4
 801019a:	4628      	mov	r0, r5
 801019c:	4631      	mov	r1, r6
 801019e:	f7f0 fd8b 	bl	8000cb8 <__aeabi_uldivmod>
 80101a2:	4603      	mov	r3, r0
 80101a4:	460c      	mov	r4, r1
 80101a6:	461a      	mov	r2, r3
 80101a8:	4bb8      	ldr	r3, [pc, #736]	; (801048c <UART_SetConfig+0x6f4>)
 80101aa:	fba3 2302 	umull	r2, r3, r3, r2
 80101ae:	095b      	lsrs	r3, r3, #5
 80101b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	469b      	mov	fp, r3
 80101b8:	f04f 0c00 	mov.w	ip, #0
 80101bc:	46d9      	mov	r9, fp
 80101be:	46e2      	mov	sl, ip
 80101c0:	eb19 0309 	adds.w	r3, r9, r9
 80101c4:	eb4a 040a 	adc.w	r4, sl, sl
 80101c8:	4699      	mov	r9, r3
 80101ca:	46a2      	mov	sl, r4
 80101cc:	eb19 090b 	adds.w	r9, r9, fp
 80101d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80101d4:	f04f 0100 	mov.w	r1, #0
 80101d8:	f04f 0200 	mov.w	r2, #0
 80101dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101e8:	4689      	mov	r9, r1
 80101ea:	4692      	mov	sl, r2
 80101ec:	eb1b 0509 	adds.w	r5, fp, r9
 80101f0:	eb4c 060a 	adc.w	r6, ip, sl
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	4619      	mov	r1, r3
 80101fa:	f04f 0200 	mov.w	r2, #0
 80101fe:	f04f 0300 	mov.w	r3, #0
 8010202:	f04f 0400 	mov.w	r4, #0
 8010206:	0094      	lsls	r4, r2, #2
 8010208:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801020c:	008b      	lsls	r3, r1, #2
 801020e:	461a      	mov	r2, r3
 8010210:	4623      	mov	r3, r4
 8010212:	4628      	mov	r0, r5
 8010214:	4631      	mov	r1, r6
 8010216:	f7f0 fd4f 	bl	8000cb8 <__aeabi_uldivmod>
 801021a:	4603      	mov	r3, r0
 801021c:	460c      	mov	r4, r1
 801021e:	461a      	mov	r2, r3
 8010220:	4b9a      	ldr	r3, [pc, #616]	; (801048c <UART_SetConfig+0x6f4>)
 8010222:	fba3 1302 	umull	r1, r3, r3, r2
 8010226:	095b      	lsrs	r3, r3, #5
 8010228:	2164      	movs	r1, #100	; 0x64
 801022a:	fb01 f303 	mul.w	r3, r1, r3
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	011b      	lsls	r3, r3, #4
 8010232:	3332      	adds	r3, #50	; 0x32
 8010234:	4a95      	ldr	r2, [pc, #596]	; (801048c <UART_SetConfig+0x6f4>)
 8010236:	fba2 2303 	umull	r2, r3, r2, r3
 801023a:	095b      	lsrs	r3, r3, #5
 801023c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010240:	4498      	add	r8, r3
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	469b      	mov	fp, r3
 8010246:	f04f 0c00 	mov.w	ip, #0
 801024a:	46d9      	mov	r9, fp
 801024c:	46e2      	mov	sl, ip
 801024e:	eb19 0309 	adds.w	r3, r9, r9
 8010252:	eb4a 040a 	adc.w	r4, sl, sl
 8010256:	4699      	mov	r9, r3
 8010258:	46a2      	mov	sl, r4
 801025a:	eb19 090b 	adds.w	r9, r9, fp
 801025e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010262:	f04f 0100 	mov.w	r1, #0
 8010266:	f04f 0200 	mov.w	r2, #0
 801026a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801026e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010276:	4689      	mov	r9, r1
 8010278:	4692      	mov	sl, r2
 801027a:	eb1b 0509 	adds.w	r5, fp, r9
 801027e:	eb4c 060a 	adc.w	r6, ip, sl
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	4619      	mov	r1, r3
 8010288:	f04f 0200 	mov.w	r2, #0
 801028c:	f04f 0300 	mov.w	r3, #0
 8010290:	f04f 0400 	mov.w	r4, #0
 8010294:	0094      	lsls	r4, r2, #2
 8010296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801029a:	008b      	lsls	r3, r1, #2
 801029c:	461a      	mov	r2, r3
 801029e:	4623      	mov	r3, r4
 80102a0:	4628      	mov	r0, r5
 80102a2:	4631      	mov	r1, r6
 80102a4:	f7f0 fd08 	bl	8000cb8 <__aeabi_uldivmod>
 80102a8:	4603      	mov	r3, r0
 80102aa:	460c      	mov	r4, r1
 80102ac:	461a      	mov	r2, r3
 80102ae:	4b77      	ldr	r3, [pc, #476]	; (801048c <UART_SetConfig+0x6f4>)
 80102b0:	fba3 1302 	umull	r1, r3, r3, r2
 80102b4:	095b      	lsrs	r3, r3, #5
 80102b6:	2164      	movs	r1, #100	; 0x64
 80102b8:	fb01 f303 	mul.w	r3, r1, r3
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	011b      	lsls	r3, r3, #4
 80102c0:	3332      	adds	r3, #50	; 0x32
 80102c2:	4a72      	ldr	r2, [pc, #456]	; (801048c <UART_SetConfig+0x6f4>)
 80102c4:	fba2 2303 	umull	r2, r3, r2, r3
 80102c8:	095b      	lsrs	r3, r3, #5
 80102ca:	f003 020f 	and.w	r2, r3, #15
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4442      	add	r2, r8
 80102d4:	609a      	str	r2, [r3, #8]
 80102d6:	e0d0      	b.n	801047a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80102d8:	f7fc f95c 	bl	800c594 <HAL_RCC_GetPCLK1Freq>
 80102dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	469a      	mov	sl, r3
 80102e2:	f04f 0b00 	mov.w	fp, #0
 80102e6:	46d0      	mov	r8, sl
 80102e8:	46d9      	mov	r9, fp
 80102ea:	eb18 0308 	adds.w	r3, r8, r8
 80102ee:	eb49 0409 	adc.w	r4, r9, r9
 80102f2:	4698      	mov	r8, r3
 80102f4:	46a1      	mov	r9, r4
 80102f6:	eb18 080a 	adds.w	r8, r8, sl
 80102fa:	eb49 090b 	adc.w	r9, r9, fp
 80102fe:	f04f 0100 	mov.w	r1, #0
 8010302:	f04f 0200 	mov.w	r2, #0
 8010306:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801030a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801030e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010312:	4688      	mov	r8, r1
 8010314:	4691      	mov	r9, r2
 8010316:	eb1a 0508 	adds.w	r5, sl, r8
 801031a:	eb4b 0609 	adc.w	r6, fp, r9
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	4619      	mov	r1, r3
 8010324:	f04f 0200 	mov.w	r2, #0
 8010328:	f04f 0300 	mov.w	r3, #0
 801032c:	f04f 0400 	mov.w	r4, #0
 8010330:	0094      	lsls	r4, r2, #2
 8010332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010336:	008b      	lsls	r3, r1, #2
 8010338:	461a      	mov	r2, r3
 801033a:	4623      	mov	r3, r4
 801033c:	4628      	mov	r0, r5
 801033e:	4631      	mov	r1, r6
 8010340:	f7f0 fcba 	bl	8000cb8 <__aeabi_uldivmod>
 8010344:	4603      	mov	r3, r0
 8010346:	460c      	mov	r4, r1
 8010348:	461a      	mov	r2, r3
 801034a:	4b50      	ldr	r3, [pc, #320]	; (801048c <UART_SetConfig+0x6f4>)
 801034c:	fba3 2302 	umull	r2, r3, r3, r2
 8010350:	095b      	lsrs	r3, r3, #5
 8010352:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	469b      	mov	fp, r3
 801035a:	f04f 0c00 	mov.w	ip, #0
 801035e:	46d9      	mov	r9, fp
 8010360:	46e2      	mov	sl, ip
 8010362:	eb19 0309 	adds.w	r3, r9, r9
 8010366:	eb4a 040a 	adc.w	r4, sl, sl
 801036a:	4699      	mov	r9, r3
 801036c:	46a2      	mov	sl, r4
 801036e:	eb19 090b 	adds.w	r9, r9, fp
 8010372:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010376:	f04f 0100 	mov.w	r1, #0
 801037a:	f04f 0200 	mov.w	r2, #0
 801037e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010382:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010386:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801038a:	4689      	mov	r9, r1
 801038c:	4692      	mov	sl, r2
 801038e:	eb1b 0509 	adds.w	r5, fp, r9
 8010392:	eb4c 060a 	adc.w	r6, ip, sl
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	4619      	mov	r1, r3
 801039c:	f04f 0200 	mov.w	r2, #0
 80103a0:	f04f 0300 	mov.w	r3, #0
 80103a4:	f04f 0400 	mov.w	r4, #0
 80103a8:	0094      	lsls	r4, r2, #2
 80103aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103ae:	008b      	lsls	r3, r1, #2
 80103b0:	461a      	mov	r2, r3
 80103b2:	4623      	mov	r3, r4
 80103b4:	4628      	mov	r0, r5
 80103b6:	4631      	mov	r1, r6
 80103b8:	f7f0 fc7e 	bl	8000cb8 <__aeabi_uldivmod>
 80103bc:	4603      	mov	r3, r0
 80103be:	460c      	mov	r4, r1
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b32      	ldr	r3, [pc, #200]	; (801048c <UART_SetConfig+0x6f4>)
 80103c4:	fba3 1302 	umull	r1, r3, r3, r2
 80103c8:	095b      	lsrs	r3, r3, #5
 80103ca:	2164      	movs	r1, #100	; 0x64
 80103cc:	fb01 f303 	mul.w	r3, r1, r3
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	011b      	lsls	r3, r3, #4
 80103d4:	3332      	adds	r3, #50	; 0x32
 80103d6:	4a2d      	ldr	r2, [pc, #180]	; (801048c <UART_SetConfig+0x6f4>)
 80103d8:	fba2 2303 	umull	r2, r3, r2, r3
 80103dc:	095b      	lsrs	r3, r3, #5
 80103de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103e2:	4498      	add	r8, r3
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	469b      	mov	fp, r3
 80103e8:	f04f 0c00 	mov.w	ip, #0
 80103ec:	46d9      	mov	r9, fp
 80103ee:	46e2      	mov	sl, ip
 80103f0:	eb19 0309 	adds.w	r3, r9, r9
 80103f4:	eb4a 040a 	adc.w	r4, sl, sl
 80103f8:	4699      	mov	r9, r3
 80103fa:	46a2      	mov	sl, r4
 80103fc:	eb19 090b 	adds.w	r9, r9, fp
 8010400:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010404:	f04f 0100 	mov.w	r1, #0
 8010408:	f04f 0200 	mov.w	r2, #0
 801040c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010418:	4689      	mov	r9, r1
 801041a:	4692      	mov	sl, r2
 801041c:	eb1b 0509 	adds.w	r5, fp, r9
 8010420:	eb4c 060a 	adc.w	r6, ip, sl
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	4619      	mov	r1, r3
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	f04f 0300 	mov.w	r3, #0
 8010432:	f04f 0400 	mov.w	r4, #0
 8010436:	0094      	lsls	r4, r2, #2
 8010438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801043c:	008b      	lsls	r3, r1, #2
 801043e:	461a      	mov	r2, r3
 8010440:	4623      	mov	r3, r4
 8010442:	4628      	mov	r0, r5
 8010444:	4631      	mov	r1, r6
 8010446:	f7f0 fc37 	bl	8000cb8 <__aeabi_uldivmod>
 801044a:	4603      	mov	r3, r0
 801044c:	460c      	mov	r4, r1
 801044e:	461a      	mov	r2, r3
 8010450:	4b0e      	ldr	r3, [pc, #56]	; (801048c <UART_SetConfig+0x6f4>)
 8010452:	fba3 1302 	umull	r1, r3, r3, r2
 8010456:	095b      	lsrs	r3, r3, #5
 8010458:	2164      	movs	r1, #100	; 0x64
 801045a:	fb01 f303 	mul.w	r3, r1, r3
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	011b      	lsls	r3, r3, #4
 8010462:	3332      	adds	r3, #50	; 0x32
 8010464:	4a09      	ldr	r2, [pc, #36]	; (801048c <UART_SetConfig+0x6f4>)
 8010466:	fba2 2303 	umull	r2, r3, r2, r3
 801046a:	095b      	lsrs	r3, r3, #5
 801046c:	f003 020f 	and.w	r2, r3, #15
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4442      	add	r2, r8
 8010476:	609a      	str	r2, [r3, #8]
}
 8010478:	e7ff      	b.n	801047a <UART_SetConfig+0x6e2>
 801047a:	bf00      	nop
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010484:	40011000 	.word	0x40011000
 8010488:	40011400 	.word	0x40011400
 801048c:	51eb851f 	.word	0x51eb851f

08010490 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010490:	b084      	sub	sp, #16
 8010492:	b480      	push	{r7}
 8010494:	b085      	sub	sp, #20
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	f107 001c 	add.w	r0, r7, #28
 801049e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80104a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80104a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80104aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80104ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80104b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80104b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80104b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80104ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	4313      	orrs	r3, r2
 80104c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80104ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	431a      	orrs	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80104d6:	2300      	movs	r3, #0
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3714      	adds	r7, #20
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	b004      	add	sp, #16
 80104e4:	4770      	bx	lr

080104e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80104e6:	b480      	push	{r7}
 80104e8:	b083      	sub	sp, #12
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr

08010522 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010522:	b580      	push	{r7, lr}
 8010524:	b082      	sub	sp, #8
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2203      	movs	r2, #3
 801052e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010530:	2002      	movs	r0, #2
 8010532:	f7f9 fbdd 	bl	8009cf0 <HAL_Delay>
  
  return HAL_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f003 0303 	and.w	r3, r3, #3
}
 8010550:	4618      	mov	r0, r3
 8010552:	370c      	adds	r7, #12
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr

0801055c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801055c:	b480      	push	{r7}
 801055e:	b085      	sub	sp, #20
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010566:	2300      	movs	r3, #0
 8010568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801057a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010580:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010586:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	4313      	orrs	r3, r2
 801058c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010596:	f023 030f 	bic.w	r3, r3, #15
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	431a      	orrs	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80105a2:	2300      	movs	r3, #0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3714      	adds	r7, #20
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	b2db      	uxtb	r3, r3
}
 80105be:	4618      	mov	r0, r3
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr

080105ca <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80105ca:	b480      	push	{r7}
 80105cc:	b085      	sub	sp, #20
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	3314      	adds	r3, #20
 80105d8:	461a      	mov	r2, r3
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	4413      	add	r3, r2
 80105de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
}  
 80105e4:	4618      	mov	r0, r3
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	685a      	ldr	r2, [r3, #4]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010616:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801061c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010622:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	4313      	orrs	r3, r2
 8010628:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	431a      	orrs	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801063a:	2300      	movs	r3, #0

}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b088      	sub	sp, #32
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010656:	2310      	movs	r3, #16
 8010658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801065a:	2340      	movs	r3, #64	; 0x40
 801065c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801065e:	2300      	movs	r3, #0
 8010660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010668:	f107 0308 	add.w	r3, r7, #8
 801066c:	4619      	mov	r1, r3
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f7ff ff74 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010674:	f241 3288 	movw	r2, #5000	; 0x1388
 8010678:	2110      	movs	r1, #16
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fa40 	bl	8010b00 <SDMMC_GetCmdResp1>
 8010680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010682:	69fb      	ldr	r3, [r7, #28]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3720      	adds	r7, #32
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b088      	sub	sp, #32
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801069a:	2311      	movs	r3, #17
 801069c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801069e:	2340      	movs	r3, #64	; 0x40
 80106a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106a2:	2300      	movs	r3, #0
 80106a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106ac:	f107 0308 	add.w	r3, r7, #8
 80106b0:	4619      	mov	r1, r3
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7ff ff52 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80106b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80106bc:	2111      	movs	r1, #17
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 fa1e 	bl	8010b00 <SDMMC_GetCmdResp1>
 80106c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c6:	69fb      	ldr	r3, [r7, #28]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3720      	adds	r7, #32
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80106de:	2312      	movs	r3, #18
 80106e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106e2:	2340      	movs	r3, #64	; 0x40
 80106e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106e6:	2300      	movs	r3, #0
 80106e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106f0:	f107 0308 	add.w	r3, r7, #8
 80106f4:	4619      	mov	r1, r3
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff ff30 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80106fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010700:	2112      	movs	r1, #18
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f9fc 	bl	8010b00 <SDMMC_GetCmdResp1>
 8010708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801070a:	69fb      	ldr	r3, [r7, #28]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b088      	sub	sp, #32
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010722:	2318      	movs	r3, #24
 8010724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801072a:	2300      	movs	r3, #0
 801072c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010734:	f107 0308 	add.w	r3, r7, #8
 8010738:	4619      	mov	r1, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff ff0e 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010740:	f241 3288 	movw	r2, #5000	; 0x1388
 8010744:	2118      	movs	r1, #24
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 f9da 	bl	8010b00 <SDMMC_GetCmdResp1>
 801074c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801074e:	69fb      	ldr	r3, [r7, #28]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010766:	2319      	movs	r3, #25
 8010768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801076a:	2340      	movs	r3, #64	; 0x40
 801076c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801076e:	2300      	movs	r3, #0
 8010770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010778:	f107 0308 	add.w	r3, r7, #8
 801077c:	4619      	mov	r1, r3
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7ff feec 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010784:	f241 3288 	movw	r2, #5000	; 0x1388
 8010788:	2119      	movs	r1, #25
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f9b8 	bl	8010b00 <SDMMC_GetCmdResp1>
 8010790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010792:	69fb      	ldr	r3, [r7, #28]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3720      	adds	r7, #32
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80107a4:	2300      	movs	r3, #0
 80107a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80107a8:	230c      	movs	r3, #12
 80107aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107ac:	2340      	movs	r3, #64	; 0x40
 80107ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107b0:	2300      	movs	r3, #0
 80107b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff fecb 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80107c6:	4a05      	ldr	r2, [pc, #20]	; (80107dc <SDMMC_CmdStopTransfer+0x40>)
 80107c8:	210c      	movs	r1, #12
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 f998 	bl	8010b00 <SDMMC_GetCmdResp1>
 80107d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d2:	69fb      	ldr	r3, [r7, #28]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3720      	adds	r7, #32
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	05f5e100 	.word	0x05f5e100

080107e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b08a      	sub	sp, #40	; 0x28
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80107f0:	2307      	movs	r3, #7
 80107f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107f4:	2340      	movs	r3, #64	; 0x40
 80107f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107f8:	2300      	movs	r3, #0
 80107fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010800:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010802:	f107 0310 	add.w	r3, r7, #16
 8010806:	4619      	mov	r1, r3
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	f7ff fea7 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801080e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010812:	2107      	movs	r1, #7
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f000 f973 	bl	8010b00 <SDMMC_GetCmdResp1>
 801081a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801081e:	4618      	mov	r0, r3
 8010820:	3728      	adds	r7, #40	; 0x28
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b088      	sub	sp, #32
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801082e:	2300      	movs	r3, #0
 8010830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010832:	2300      	movs	r3, #0
 8010834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010836:	2300      	movs	r3, #0
 8010838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801083a:	2300      	movs	r3, #0
 801083c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801083e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010844:	f107 0308 	add.w	r3, r7, #8
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff fe86 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 f92d 	bl	8010ab0 <SDMMC_GetCmdError>
 8010856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010858:	69fb      	ldr	r3, [r7, #28]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b088      	sub	sp, #32
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801086a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801086e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010870:	2308      	movs	r3, #8
 8010872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010874:	2340      	movs	r3, #64	; 0x40
 8010876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010878:	2300      	movs	r3, #0
 801087a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010882:	f107 0308 	add.w	r3, r7, #8
 8010886:	4619      	mov	r1, r3
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff fe67 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fb16 	bl	8010ec0 <SDMMC_GetCmdResp7>
 8010894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010896:	69fb      	ldr	r3, [r7, #28]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3720      	adds	r7, #32
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b088      	sub	sp, #32
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80108ae:	2337      	movs	r3, #55	; 0x37
 80108b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108b2:	2340      	movs	r3, #64	; 0x40
 80108b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108b6:	2300      	movs	r3, #0
 80108b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108c0:	f107 0308 	add.w	r3, r7, #8
 80108c4:	4619      	mov	r1, r3
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff fe48 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80108cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80108d0:	2137      	movs	r1, #55	; 0x37
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 f914 	bl	8010b00 <SDMMC_GetCmdResp1>
 80108d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108da:	69fb      	ldr	r3, [r7, #28]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3720      	adds	r7, #32
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b088      	sub	sp, #32
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80108f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80108f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80108fa:	2329      	movs	r3, #41	; 0x29
 80108fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108fe:	2340      	movs	r3, #64	; 0x40
 8010900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010902:	2300      	movs	r3, #0
 8010904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801090a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801090c:	f107 0308 	add.w	r3, r7, #8
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7ff fe22 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 fa23 	bl	8010d64 <SDMMC_GetCmdResp3>
 801091e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010920:	69fb      	ldr	r3, [r7, #28]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3720      	adds	r7, #32
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b088      	sub	sp, #32
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010938:	2306      	movs	r3, #6
 801093a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801093c:	2340      	movs	r3, #64	; 0x40
 801093e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010940:	2300      	movs	r3, #0
 8010942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010948:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801094a:	f107 0308 	add.w	r3, r7, #8
 801094e:	4619      	mov	r1, r3
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7ff fe03 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010956:	f241 3288 	movw	r2, #5000	; 0x1388
 801095a:	2106      	movs	r1, #6
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 f8cf 	bl	8010b00 <SDMMC_GetCmdResp1>
 8010962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010964:	69fb      	ldr	r3, [r7, #28]
}
 8010966:	4618      	mov	r0, r3
 8010968:	3720      	adds	r7, #32
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b088      	sub	sp, #32
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010976:	2300      	movs	r3, #0
 8010978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801097a:	2333      	movs	r3, #51	; 0x33
 801097c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801097e:	2340      	movs	r3, #64	; 0x40
 8010980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010982:	2300      	movs	r3, #0
 8010984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801098a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801098c:	f107 0308 	add.w	r3, r7, #8
 8010990:	4619      	mov	r1, r3
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7ff fde2 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010998:	f241 3288 	movw	r2, #5000	; 0x1388
 801099c:	2133      	movs	r1, #51	; 0x33
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 f8ae 	bl	8010b00 <SDMMC_GetCmdResp1>
 80109a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a6:	69fb      	ldr	r3, [r7, #28]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3720      	adds	r7, #32
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b088      	sub	sp, #32
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80109b8:	2300      	movs	r3, #0
 80109ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80109bc:	2302      	movs	r3, #2
 80109be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80109c0:	23c0      	movs	r3, #192	; 0xc0
 80109c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109c4:	2300      	movs	r3, #0
 80109c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109ce:	f107 0308 	add.w	r3, r7, #8
 80109d2:	4619      	mov	r1, r3
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff fdc1 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f97c 	bl	8010cd8 <SDMMC_GetCmdResp2>
 80109e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e2:	69fb      	ldr	r3, [r7, #28]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3720      	adds	r7, #32
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b088      	sub	sp, #32
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80109fa:	2309      	movs	r3, #9
 80109fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80109fe:	23c0      	movs	r3, #192	; 0xc0
 8010a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a02:	2300      	movs	r3, #0
 8010a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff fda2 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 f95d 	bl	8010cd8 <SDMMC_GetCmdResp2>
 8010a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a20:	69fb      	ldr	r3, [r7, #28]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3720      	adds	r7, #32
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b088      	sub	sp, #32
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a34:	2300      	movs	r3, #0
 8010a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010a38:	2303      	movs	r3, #3
 8010a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a3c:	2340      	movs	r3, #64	; 0x40
 8010a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a40:	2300      	movs	r3, #0
 8010a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a4a:	f107 0308 	add.w	r3, r7, #8
 8010a4e:	4619      	mov	r1, r3
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f7ff fd83 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	2103      	movs	r1, #3
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f9bc 	bl	8010dd8 <SDMMC_GetCmdResp6>
 8010a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a62:	69fb      	ldr	r3, [r7, #28]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3720      	adds	r7, #32
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b088      	sub	sp, #32
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010a7a:	230d      	movs	r3, #13
 8010a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a7e:	2340      	movs	r3, #64	; 0x40
 8010a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a82:	2300      	movs	r3, #0
 8010a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a8c:	f107 0308 	add.w	r3, r7, #8
 8010a90:	4619      	mov	r1, r3
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7ff fd62 	bl	801055c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a9c:	210d      	movs	r1, #13
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 f82e 	bl	8010b00 <SDMMC_GetCmdResp1>
 8010aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa6:	69fb      	ldr	r3, [r7, #28]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3720      	adds	r7, #32
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010ab0:	b490      	push	{r4, r7}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ab8:	4b0f      	ldr	r3, [pc, #60]	; (8010af8 <SDMMC_GetCmdError+0x48>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a0f      	ldr	r2, [pc, #60]	; (8010afc <SDMMC_GetCmdError+0x4c>)
 8010abe:	fba2 2303 	umull	r2, r3, r2, r3
 8010ac2:	0a5b      	lsrs	r3, r3, #9
 8010ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ac8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010acc:	4623      	mov	r3, r4
 8010ace:	1e5c      	subs	r4, r3, #1
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d102      	bne.n	8010ada <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ad8:	e009      	b.n	8010aee <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0f2      	beq.n	8010acc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	22c5      	movs	r2, #197	; 0xc5
 8010aea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010aec:	2300      	movs	r3, #0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bc90      	pop	{r4, r7}
 8010af6:	4770      	bx	lr
 8010af8:	20000000 	.word	0x20000000
 8010afc:	10624dd3 	.word	0x10624dd3

08010b00 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b00:	b590      	push	{r4, r7, lr}
 8010b02:	b087      	sub	sp, #28
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010b0e:	4b6f      	ldr	r3, [pc, #444]	; (8010ccc <SDMMC_GetCmdResp1+0x1cc>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a6f      	ldr	r2, [pc, #444]	; (8010cd0 <SDMMC_GetCmdResp1+0x1d0>)
 8010b14:	fba2 2303 	umull	r2, r3, r2, r3
 8010b18:	0a5b      	lsrs	r3, r3, #9
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b20:	4623      	mov	r3, r4
 8010b22:	1e5c      	subs	r4, r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d102      	bne.n	8010b2e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b2c:	e0c9      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b32:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0f0      	beq.n	8010b20 <SDMMC_GetCmdResp1+0x20>
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d1eb      	bne.n	8010b20 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b4c:	f003 0304 	and.w	r3, r3, #4
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d004      	beq.n	8010b5e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2204      	movs	r2, #4
 8010b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b5a:	2304      	movs	r3, #4
 8010b5c:	e0b1      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b62:	f003 0301 	and.w	r3, r3, #1
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d004      	beq.n	8010b74 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e0a6      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	22c5      	movs	r2, #197	; 0xc5
 8010b78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7ff fd18 	bl	80105b0 <SDIO_GetCommandResponse>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	7afb      	ldrb	r3, [r7, #11]
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d001      	beq.n	8010b8e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e099      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b8e:	2100      	movs	r1, #0
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f7ff fd1a 	bl	80105ca <SDIO_GetResponse>
 8010b96:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010b98:	693a      	ldr	r2, [r7, #16]
 8010b9a:	4b4e      	ldr	r3, [pc, #312]	; (8010cd4 <SDMMC_GetCmdResp1+0x1d4>)
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d101      	bne.n	8010ba6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e08d      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	da02      	bge.n	8010bb2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010bb0:	e087      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010bbc:	2340      	movs	r3, #64	; 0x40
 8010bbe:	e080      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d001      	beq.n	8010bce <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010bca:	2380      	movs	r3, #128	; 0x80
 8010bcc:	e079      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bdc:	e071      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bec:	e069      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bfc:	e061      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d002      	beq.n	8010c0e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c0c:	e059      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d002      	beq.n	8010c1e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c1c:	e051      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c2c:	e049      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010c3c:	e041      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c4c:	e039      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c5c:	e031      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010c6c:	e029      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010c78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010c7c:	e021      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d002      	beq.n	8010c8e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010c8c:	e019      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010c98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010c9c:	e011      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010cac:	e009      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	f003 0308 	and.w	r3, r3, #8
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010cb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010cbc:	e001      	b.n	8010cc2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	371c      	adds	r7, #28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd90      	pop	{r4, r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20000000 	.word	0x20000000
 8010cd0:	10624dd3 	.word	0x10624dd3
 8010cd4:	fdffe008 	.word	0xfdffe008

08010cd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010cd8:	b490      	push	{r4, r7}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ce0:	4b1e      	ldr	r3, [pc, #120]	; (8010d5c <SDMMC_GetCmdResp2+0x84>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4a1e      	ldr	r2, [pc, #120]	; (8010d60 <SDMMC_GetCmdResp2+0x88>)
 8010ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cea:	0a5b      	lsrs	r3, r3, #9
 8010cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cf0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cf4:	4623      	mov	r3, r4
 8010cf6:	1e5c      	subs	r4, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d102      	bne.n	8010d02 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d00:	e026      	b.n	8010d50 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d06:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d0f0      	beq.n	8010cf4 <SDMMC_GetCmdResp2+0x1c>
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1eb      	bne.n	8010cf4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d20:	f003 0304 	and.w	r3, r3, #4
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d004      	beq.n	8010d32 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2204      	movs	r2, #4
 8010d2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d2e:	2304      	movs	r3, #4
 8010d30:	e00e      	b.n	8010d50 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d36:	f003 0301 	and.w	r3, r3, #1
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2201      	movs	r2, #1
 8010d42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d44:	2301      	movs	r3, #1
 8010d46:	e003      	b.n	8010d50 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	22c5      	movs	r2, #197	; 0xc5
 8010d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010d4e:	2300      	movs	r3, #0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	3710      	adds	r7, #16
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bc90      	pop	{r4, r7}
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop
 8010d5c:	20000000 	.word	0x20000000
 8010d60:	10624dd3 	.word	0x10624dd3

08010d64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010d64:	b490      	push	{r4, r7}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d6c:	4b18      	ldr	r3, [pc, #96]	; (8010dd0 <SDMMC_GetCmdResp3+0x6c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a18      	ldr	r2, [pc, #96]	; (8010dd4 <SDMMC_GetCmdResp3+0x70>)
 8010d72:	fba2 2303 	umull	r2, r3, r2, r3
 8010d76:	0a5b      	lsrs	r3, r3, #9
 8010d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d80:	4623      	mov	r3, r4
 8010d82:	1e5c      	subs	r4, r3, #1
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d102      	bne.n	8010d8e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d8c:	e01b      	b.n	8010dc6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d0f0      	beq.n	8010d80 <SDMMC_GetCmdResp3+0x1c>
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d1eb      	bne.n	8010d80 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dac:	f003 0304 	and.w	r3, r3, #4
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d004      	beq.n	8010dbe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2204      	movs	r2, #4
 8010db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dba:	2304      	movs	r3, #4
 8010dbc:	e003      	b.n	8010dc6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	22c5      	movs	r2, #197	; 0xc5
 8010dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bc90      	pop	{r4, r7}
 8010dce:	4770      	bx	lr
 8010dd0:	20000000 	.word	0x20000000
 8010dd4:	10624dd3 	.word	0x10624dd3

08010dd8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010dd8:	b590      	push	{r4, r7, lr}
 8010dda:	b087      	sub	sp, #28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	460b      	mov	r3, r1
 8010de2:	607a      	str	r2, [r7, #4]
 8010de4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010de6:	4b34      	ldr	r3, [pc, #208]	; (8010eb8 <SDMMC_GetCmdResp6+0xe0>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a34      	ldr	r2, [pc, #208]	; (8010ebc <SDMMC_GetCmdResp6+0xe4>)
 8010dec:	fba2 2303 	umull	r2, r3, r2, r3
 8010df0:	0a5b      	lsrs	r3, r3, #9
 8010df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010df6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010dfa:	4623      	mov	r3, r4
 8010dfc:	1e5c      	subs	r4, r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d102      	bne.n	8010e08 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e06:	e052      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d0f0      	beq.n	8010dfa <SDMMC_GetCmdResp6+0x22>
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1eb      	bne.n	8010dfa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e26:	f003 0304 	and.w	r3, r3, #4
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d004      	beq.n	8010e38 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2204      	movs	r2, #4
 8010e32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e34:	2304      	movs	r3, #4
 8010e36:	e03a      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e3c:	f003 0301 	and.w	r3, r3, #1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d004      	beq.n	8010e4e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2201      	movs	r2, #1
 8010e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e02f      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010e4e:	68f8      	ldr	r0, [r7, #12]
 8010e50:	f7ff fbae 	bl	80105b0 <SDIO_GetCommandResponse>
 8010e54:	4603      	mov	r3, r0
 8010e56:	461a      	mov	r2, r3
 8010e58:	7afb      	ldrb	r3, [r7, #11]
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d001      	beq.n	8010e62 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	e025      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	22c5      	movs	r2, #197	; 0xc5
 8010e66:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010e68:	2100      	movs	r1, #0
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ff fbad 	bl	80105ca <SDIO_GetResponse>
 8010e70:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d106      	bne.n	8010e8a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	0c1b      	lsrs	r3, r3, #16
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010e86:	2300      	movs	r3, #0
 8010e88:	e011      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e98:	e009      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ea8:	e001      	b.n	8010eae <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	371c      	adds	r7, #28
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd90      	pop	{r4, r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	20000000 	.word	0x20000000
 8010ebc:	10624dd3 	.word	0x10624dd3

08010ec0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010ec0:	b490      	push	{r4, r7}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ec8:	4b21      	ldr	r3, [pc, #132]	; (8010f50 <SDMMC_GetCmdResp7+0x90>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a21      	ldr	r2, [pc, #132]	; (8010f54 <SDMMC_GetCmdResp7+0x94>)
 8010ece:	fba2 2303 	umull	r2, r3, r2, r3
 8010ed2:	0a5b      	lsrs	r3, r3, #9
 8010ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ed8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010edc:	4623      	mov	r3, r4
 8010ede:	1e5c      	subs	r4, r3, #1
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d102      	bne.n	8010eea <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ee8:	e02c      	b.n	8010f44 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d0f0      	beq.n	8010edc <SDMMC_GetCmdResp7+0x1c>
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1eb      	bne.n	8010edc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f08:	f003 0304 	and.w	r3, r3, #4
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d004      	beq.n	8010f1a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2204      	movs	r2, #4
 8010f14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f16:	2304      	movs	r3, #4
 8010f18:	e014      	b.n	8010f44 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d004      	beq.n	8010f30 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e009      	b.n	8010f44 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d002      	beq.n	8010f42 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2240      	movs	r2, #64	; 0x40
 8010f40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010f42:	2300      	movs	r3, #0
  
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bc90      	pop	{r4, r7}
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop
 8010f50:	20000000 	.word	0x20000000
 8010f54:	10624dd3 	.word	0x10624dd3

08010f58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f5c:	4904      	ldr	r1, [pc, #16]	; (8010f70 <MX_FATFS_Init+0x18>)
 8010f5e:	4805      	ldr	r0, [pc, #20]	; (8010f74 <MX_FATFS_Init+0x1c>)
 8010f60:	f003 fb9c 	bl	801469c <FATFS_LinkDriver>
 8010f64:	4603      	mov	r3, r0
 8010f66:	461a      	mov	r2, r3
 8010f68:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <MX_FATFS_Init+0x20>)
 8010f6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010f6c:	bf00      	nop
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	20044c30 	.word	0x20044c30
 8010f74:	08019ff0 	.word	0x08019ff0
 8010f78:	20044c2c 	.word	0x20044c2c

08010f7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010f82:	2300      	movs	r3, #0
 8010f84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010f86:	f000 f896 	bl	80110b6 <BSP_SD_IsDetected>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d001      	beq.n	8010f94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010f90:	2301      	movs	r3, #1
 8010f92:	e012      	b.n	8010fba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010f94:	480b      	ldr	r0, [pc, #44]	; (8010fc4 <BSP_SD_Init+0x48>)
 8010f96:	f7fb ffa5 	bl	800cee4 <HAL_SD_Init>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010f9e:	79fb      	ldrb	r3, [r7, #7]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d109      	bne.n	8010fb8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010fa8:	4806      	ldr	r0, [pc, #24]	; (8010fc4 <BSP_SD_Init+0x48>)
 8010faa:	f7fc fd4f 	bl	800da4c <HAL_SD_ConfigWideBusOperation>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	20044a2c 	.word	0x20044a2c

08010fc8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b086      	sub	sp, #24
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	68f9      	ldr	r1, [r7, #12]
 8010fde:	4806      	ldr	r0, [pc, #24]	; (8010ff8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010fe0:	f7fc f810 	bl	800d004 <HAL_SD_ReadBlocks_DMA>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d001      	beq.n	8010fee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010fea:	2301      	movs	r3, #1
 8010fec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3718      	adds	r7, #24
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	20044a2c 	.word	0x20044a2c

08010ffc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b086      	sub	sp, #24
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011008:	2300      	movs	r3, #0
 801100a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	68f9      	ldr	r1, [r7, #12]
 8011012:	4806      	ldr	r0, [pc, #24]	; (801102c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011014:	f7fc f8de 	bl	800d1d4 <HAL_SD_WriteBlocks_DMA>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d001      	beq.n	8011022 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801101e:	2301      	movs	r3, #1
 8011020:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011022:	7dfb      	ldrb	r3, [r7, #23]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3718      	adds	r7, #24
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	20044a2c 	.word	0x20044a2c

08011030 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011034:	4805      	ldr	r0, [pc, #20]	; (801104c <BSP_SD_GetCardState+0x1c>)
 8011036:	f7fc fd85 	bl	800db44 <HAL_SD_GetCardState>
 801103a:	4603      	mov	r3, r0
 801103c:	2b04      	cmp	r3, #4
 801103e:	bf14      	ite	ne
 8011040:	2301      	movne	r3, #1
 8011042:	2300      	moveq	r3, #0
 8011044:	b2db      	uxtb	r3, r3
}
 8011046:	4618      	mov	r0, r3
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	20044a2c 	.word	0x20044a2c

08011050 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011058:	6879      	ldr	r1, [r7, #4]
 801105a:	4803      	ldr	r0, [pc, #12]	; (8011068 <BSP_SD_GetCardInfo+0x18>)
 801105c:	f7fc fcca 	bl	800d9f4 <HAL_SD_GetCardInfo>
}
 8011060:	bf00      	nop
 8011062:	3708      	adds	r7, #8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	20044a2c 	.word	0x20044a2c

0801106c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011074:	f000 f818 	bl	80110a8 <BSP_SD_AbortCallback>
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011088:	f000 f9a8 	bl	80113dc <BSP_SD_WriteCpltCallback>
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801109c:	f000 f9aa 	bl	80113f4 <BSP_SD_ReadCpltCallback>
}
 80110a0:	bf00      	nop
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80110a8:	b480      	push	{r7}
 80110aa:	af00      	add	r7, sp, #0

}
 80110ac:	bf00      	nop
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80110bc:	2301      	movs	r3, #1
 80110be:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80110c0:	f000 f80c 	bl	80110dc <BSP_PlatformIsDetected>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d101      	bne.n	80110ce <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80110ca:	2300      	movs	r3, #0
 80110cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	b2db      	uxtb	r3, r3
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80110e2:	2301      	movs	r3, #1
 80110e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80110ea:	4806      	ldr	r0, [pc, #24]	; (8011104 <BSP_PlatformIsDetected+0x28>)
 80110ec:	f7fa f87e 	bl	800b1ec <HAL_GPIO_ReadPin>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d001      	beq.n	80110fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80110f6:	2300      	movs	r3, #0
 80110f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80110fa:	79fb      	ldrb	r3, [r7, #7]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	40020000 	.word	0x40020000

08011108 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011110:	f7f8 fde2 	bl	8009cd8 <HAL_GetTick>
 8011114:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011116:	e006      	b.n	8011126 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011118:	f7ff ff8a 	bl	8011030 <BSP_SD_GetCardState>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011122:	2300      	movs	r3, #0
 8011124:	e009      	b.n	801113a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011126:	f7f8 fdd7 	bl	8009cd8 <HAL_GetTick>
 801112a:	4602      	mov	r2, r0
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d8f0      	bhi.n	8011118 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011136:	f04f 33ff 	mov.w	r3, #4294967295
}
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
	...

08011144 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	4603      	mov	r3, r0
 801114c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801114e:	4b0b      	ldr	r3, [pc, #44]	; (801117c <SD_CheckStatus+0x38>)
 8011150:	2201      	movs	r2, #1
 8011152:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011154:	f7ff ff6c 	bl	8011030 <BSP_SD_GetCardState>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d107      	bne.n	801116e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801115e:	4b07      	ldr	r3, [pc, #28]	; (801117c <SD_CheckStatus+0x38>)
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f023 0301 	bic.w	r3, r3, #1
 8011168:	b2da      	uxtb	r2, r3
 801116a:	4b04      	ldr	r3, [pc, #16]	; (801117c <SD_CheckStatus+0x38>)
 801116c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801116e:	4b03      	ldr	r3, [pc, #12]	; (801117c <SD_CheckStatus+0x38>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	b2db      	uxtb	r3, r3
}
 8011174:	4618      	mov	r0, r3
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	20000009 	.word	0x20000009

08011180 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	4603      	mov	r3, r0
 8011188:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801118a:	f7ff fef7 	bl	8010f7c <BSP_SD_Init>
 801118e:	4603      	mov	r3, r0
 8011190:	2b00      	cmp	r3, #0
 8011192:	d107      	bne.n	80111a4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011194:	79fb      	ldrb	r3, [r7, #7]
 8011196:	4618      	mov	r0, r3
 8011198:	f7ff ffd4 	bl	8011144 <SD_CheckStatus>
 801119c:	4603      	mov	r3, r0
 801119e:	461a      	mov	r2, r3
 80111a0:	4b04      	ldr	r3, [pc, #16]	; (80111b4 <SD_initialize+0x34>)
 80111a2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80111a4:	4b03      	ldr	r3, [pc, #12]	; (80111b4 <SD_initialize+0x34>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	b2db      	uxtb	r3, r3
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20000009 	.word	0x20000009

080111b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	4603      	mov	r3, r0
 80111c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80111c2:	79fb      	ldrb	r3, [r7, #7]
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7ff ffbd 	bl	8011144 <SD_CheckStatus>
 80111ca:	4603      	mov	r3, r0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60b9      	str	r1, [r7, #8]
 80111dc:	607a      	str	r2, [r7, #4]
 80111de:	603b      	str	r3, [r7, #0]
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80111e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80111ec:	f7ff ff8c 	bl	8011108 <SD_CheckStatusWithTimeout>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	da01      	bge.n	80111fa <SD_read+0x26>
  {
    return res;
 80111f6:	7dfb      	ldrb	r3, [r7, #23]
 80111f8:	e03b      	b.n	8011272 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	68b8      	ldr	r0, [r7, #8]
 8011200:	f7ff fee2 	bl	8010fc8 <BSP_SD_ReadBlocks_DMA>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d132      	bne.n	8011270 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801120a:	4b1c      	ldr	r3, [pc, #112]	; (801127c <SD_read+0xa8>)
 801120c:	2200      	movs	r2, #0
 801120e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011210:	f7f8 fd62 	bl	8009cd8 <HAL_GetTick>
 8011214:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011216:	bf00      	nop
 8011218:	4b18      	ldr	r3, [pc, #96]	; (801127c <SD_read+0xa8>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d108      	bne.n	8011232 <SD_read+0x5e>
 8011220:	f7f8 fd5a 	bl	8009cd8 <HAL_GetTick>
 8011224:	4602      	mov	r2, r0
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	1ad3      	subs	r3, r2, r3
 801122a:	f247 522f 	movw	r2, #29999	; 0x752f
 801122e:	4293      	cmp	r3, r2
 8011230:	d9f2      	bls.n	8011218 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011232:	4b12      	ldr	r3, [pc, #72]	; (801127c <SD_read+0xa8>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d102      	bne.n	8011240 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801123a:	2301      	movs	r3, #1
 801123c:	75fb      	strb	r3, [r7, #23]
 801123e:	e017      	b.n	8011270 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011240:	4b0e      	ldr	r3, [pc, #56]	; (801127c <SD_read+0xa8>)
 8011242:	2200      	movs	r2, #0
 8011244:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011246:	f7f8 fd47 	bl	8009cd8 <HAL_GetTick>
 801124a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801124c:	e007      	b.n	801125e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801124e:	f7ff feef 	bl	8011030 <BSP_SD_GetCardState>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d102      	bne.n	801125e <SD_read+0x8a>
          {
            res = RES_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801125c:	e008      	b.n	8011270 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801125e:	f7f8 fd3b 	bl	8009cd8 <HAL_GetTick>
 8011262:	4602      	mov	r2, r0
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	f247 522f 	movw	r2, #29999	; 0x752f
 801126c:	4293      	cmp	r3, r2
 801126e:	d9ee      	bls.n	801124e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011270:	7dfb      	ldrb	r3, [r7, #23]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3718      	adds	r7, #24
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	200422c8 	.word	0x200422c8

08011280 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	60b9      	str	r1, [r7, #8]
 8011288:	607a      	str	r2, [r7, #4]
 801128a:	603b      	str	r3, [r7, #0]
 801128c:	4603      	mov	r3, r0
 801128e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011290:	2301      	movs	r3, #1
 8011292:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011294:	4b24      	ldr	r3, [pc, #144]	; (8011328 <SD_write+0xa8>)
 8011296:	2200      	movs	r2, #0
 8011298:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801129a:	f247 5030 	movw	r0, #30000	; 0x7530
 801129e:	f7ff ff33 	bl	8011108 <SD_CheckStatusWithTimeout>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	da01      	bge.n	80112ac <SD_write+0x2c>
  {
    return res;
 80112a8:	7dfb      	ldrb	r3, [r7, #23]
 80112aa:	e038      	b.n	801131e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80112ac:	683a      	ldr	r2, [r7, #0]
 80112ae:	6879      	ldr	r1, [r7, #4]
 80112b0:	68b8      	ldr	r0, [r7, #8]
 80112b2:	f7ff fea3 	bl	8010ffc <BSP_SD_WriteBlocks_DMA>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d12f      	bne.n	801131c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80112bc:	f7f8 fd0c 	bl	8009cd8 <HAL_GetTick>
 80112c0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80112c2:	bf00      	nop
 80112c4:	4b18      	ldr	r3, [pc, #96]	; (8011328 <SD_write+0xa8>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d108      	bne.n	80112de <SD_write+0x5e>
 80112cc:	f7f8 fd04 	bl	8009cd8 <HAL_GetTick>
 80112d0:	4602      	mov	r2, r0
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80112da:	4293      	cmp	r3, r2
 80112dc:	d9f2      	bls.n	80112c4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80112de:	4b12      	ldr	r3, [pc, #72]	; (8011328 <SD_write+0xa8>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d102      	bne.n	80112ec <SD_write+0x6c>
      {
        res = RES_ERROR;
 80112e6:	2301      	movs	r3, #1
 80112e8:	75fb      	strb	r3, [r7, #23]
 80112ea:	e017      	b.n	801131c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80112ec:	4b0e      	ldr	r3, [pc, #56]	; (8011328 <SD_write+0xa8>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80112f2:	f7f8 fcf1 	bl	8009cd8 <HAL_GetTick>
 80112f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112f8:	e007      	b.n	801130a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112fa:	f7ff fe99 	bl	8011030 <BSP_SD_GetCardState>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d102      	bne.n	801130a <SD_write+0x8a>
          {
            res = RES_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	75fb      	strb	r3, [r7, #23]
            break;
 8011308:	e008      	b.n	801131c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801130a:	f7f8 fce5 	bl	8009cd8 <HAL_GetTick>
 801130e:	4602      	mov	r2, r0
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	1ad3      	subs	r3, r2, r3
 8011314:	f247 522f 	movw	r2, #29999	; 0x752f
 8011318:	4293      	cmp	r3, r2
 801131a:	d9ee      	bls.n	80112fa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801131c:	7dfb      	ldrb	r3, [r7, #23]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	200422c4 	.word	0x200422c4

0801132c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08c      	sub	sp, #48	; 0x30
 8011330:	af00      	add	r7, sp, #0
 8011332:	4603      	mov	r3, r0
 8011334:	603a      	str	r2, [r7, #0]
 8011336:	71fb      	strb	r3, [r7, #7]
 8011338:	460b      	mov	r3, r1
 801133a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801133c:	2301      	movs	r3, #1
 801133e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011342:	4b25      	ldr	r3, [pc, #148]	; (80113d8 <SD_ioctl+0xac>)
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	f003 0301 	and.w	r3, r3, #1
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <SD_ioctl+0x28>
 8011350:	2303      	movs	r3, #3
 8011352:	e03c      	b.n	80113ce <SD_ioctl+0xa2>

  switch (cmd)
 8011354:	79bb      	ldrb	r3, [r7, #6]
 8011356:	2b03      	cmp	r3, #3
 8011358:	d834      	bhi.n	80113c4 <SD_ioctl+0x98>
 801135a:	a201      	add	r2, pc, #4	; (adr r2, 8011360 <SD_ioctl+0x34>)
 801135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011360:	08011371 	.word	0x08011371
 8011364:	08011379 	.word	0x08011379
 8011368:	08011391 	.word	0x08011391
 801136c:	080113ab 	.word	0x080113ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011370:	2300      	movs	r3, #0
 8011372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011376:	e028      	b.n	80113ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011378:	f107 030c 	add.w	r3, r7, #12
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fe67 	bl	8011050 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801138e:	e01c      	b.n	80113ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011390:	f107 030c 	add.w	r3, r7, #12
 8011394:	4618      	mov	r0, r3
 8011396:	f7ff fe5b 	bl	8011050 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139c:	b29a      	uxth	r2, r3
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80113a2:	2300      	movs	r3, #0
 80113a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113a8:	e00f      	b.n	80113ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113aa:	f107 030c 	add.w	r3, r7, #12
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff fe4e 	bl	8011050 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80113b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b6:	0a5a      	lsrs	r2, r3, #9
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113bc:	2300      	movs	r3, #0
 80113be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113c2:	e002      	b.n	80113ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80113c4:	2304      	movs	r3, #4
 80113c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80113ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3730      	adds	r7, #48	; 0x30
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	20000009 	.word	0x20000009

080113dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80113dc:	b480      	push	{r7}
 80113de:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80113e0:	4b03      	ldr	r3, [pc, #12]	; (80113f0 <BSP_SD_WriteCpltCallback+0x14>)
 80113e2:	2201      	movs	r2, #1
 80113e4:	601a      	str	r2, [r3, #0]
}
 80113e6:	bf00      	nop
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr
 80113f0:	200422c4 	.word	0x200422c4

080113f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80113f4:	b480      	push	{r7}
 80113f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80113f8:	4b03      	ldr	r3, [pc, #12]	; (8011408 <BSP_SD_ReadCpltCallback+0x14>)
 80113fa:	2201      	movs	r2, #1
 80113fc:	601a      	str	r2, [r3, #0]
}
 80113fe:	bf00      	nop
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr
 8011408:	200422c8 	.word	0x200422c8

0801140c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	4603      	mov	r3, r0
 8011414:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	4a08      	ldr	r2, [pc, #32]	; (801143c <disk_status+0x30>)
 801141a:	009b      	lsls	r3, r3, #2
 801141c:	4413      	add	r3, r2
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	79fa      	ldrb	r2, [r7, #7]
 8011424:	4905      	ldr	r1, [pc, #20]	; (801143c <disk_status+0x30>)
 8011426:	440a      	add	r2, r1
 8011428:	7a12      	ldrb	r2, [r2, #8]
 801142a:	4610      	mov	r0, r2
 801142c:	4798      	blx	r3
 801142e:	4603      	mov	r3, r0
 8011430:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011432:	7bfb      	ldrb	r3, [r7, #15]
}
 8011434:	4618      	mov	r0, r3
 8011436:	3710      	adds	r7, #16
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	200422f4 	.word	0x200422f4

08011440 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	4603      	mov	r3, r0
 8011448:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801144a:	2300      	movs	r3, #0
 801144c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801144e:	79fb      	ldrb	r3, [r7, #7]
 8011450:	4a0d      	ldr	r2, [pc, #52]	; (8011488 <disk_initialize+0x48>)
 8011452:	5cd3      	ldrb	r3, [r2, r3]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d111      	bne.n	801147c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011458:	79fb      	ldrb	r3, [r7, #7]
 801145a:	4a0b      	ldr	r2, [pc, #44]	; (8011488 <disk_initialize+0x48>)
 801145c:	2101      	movs	r1, #1
 801145e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011460:	79fb      	ldrb	r3, [r7, #7]
 8011462:	4a09      	ldr	r2, [pc, #36]	; (8011488 <disk_initialize+0x48>)
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	4413      	add	r3, r2
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	79fa      	ldrb	r2, [r7, #7]
 801146e:	4906      	ldr	r1, [pc, #24]	; (8011488 <disk_initialize+0x48>)
 8011470:	440a      	add	r2, r1
 8011472:	7a12      	ldrb	r2, [r2, #8]
 8011474:	4610      	mov	r0, r2
 8011476:	4798      	blx	r3
 8011478:	4603      	mov	r3, r0
 801147a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801147c:	7bfb      	ldrb	r3, [r7, #15]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	200422f4 	.word	0x200422f4

0801148c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801148c:	b590      	push	{r4, r7, lr}
 801148e:	b087      	sub	sp, #28
 8011490:	af00      	add	r7, sp, #0
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	607a      	str	r2, [r7, #4]
 8011496:	603b      	str	r3, [r7, #0]
 8011498:	4603      	mov	r3, r0
 801149a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801149c:	7bfb      	ldrb	r3, [r7, #15]
 801149e:	4a0a      	ldr	r2, [pc, #40]	; (80114c8 <disk_read+0x3c>)
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	4413      	add	r3, r2
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	689c      	ldr	r4, [r3, #8]
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
 80114aa:	4a07      	ldr	r2, [pc, #28]	; (80114c8 <disk_read+0x3c>)
 80114ac:	4413      	add	r3, r2
 80114ae:	7a18      	ldrb	r0, [r3, #8]
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	68b9      	ldr	r1, [r7, #8]
 80114b6:	47a0      	blx	r4
 80114b8:	4603      	mov	r3, r0
 80114ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80114bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	371c      	adds	r7, #28
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd90      	pop	{r4, r7, pc}
 80114c6:	bf00      	nop
 80114c8:	200422f4 	.word	0x200422f4

080114cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80114cc:	b590      	push	{r4, r7, lr}
 80114ce:	b087      	sub	sp, #28
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	60b9      	str	r1, [r7, #8]
 80114d4:	607a      	str	r2, [r7, #4]
 80114d6:	603b      	str	r3, [r7, #0]
 80114d8:	4603      	mov	r3, r0
 80114da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
 80114de:	4a0a      	ldr	r2, [pc, #40]	; (8011508 <disk_write+0x3c>)
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	4413      	add	r3, r2
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	68dc      	ldr	r4, [r3, #12]
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
 80114ea:	4a07      	ldr	r2, [pc, #28]	; (8011508 <disk_write+0x3c>)
 80114ec:	4413      	add	r3, r2
 80114ee:	7a18      	ldrb	r0, [r3, #8]
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	68b9      	ldr	r1, [r7, #8]
 80114f6:	47a0      	blx	r4
 80114f8:	4603      	mov	r3, r0
 80114fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80114fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114fe:	4618      	mov	r0, r3
 8011500:	371c      	adds	r7, #28
 8011502:	46bd      	mov	sp, r7
 8011504:	bd90      	pop	{r4, r7, pc}
 8011506:	bf00      	nop
 8011508:	200422f4 	.word	0x200422f4

0801150c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	4603      	mov	r3, r0
 8011514:	603a      	str	r2, [r7, #0]
 8011516:	71fb      	strb	r3, [r7, #7]
 8011518:	460b      	mov	r3, r1
 801151a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801151c:	79fb      	ldrb	r3, [r7, #7]
 801151e:	4a09      	ldr	r2, [pc, #36]	; (8011544 <disk_ioctl+0x38>)
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	691b      	ldr	r3, [r3, #16]
 8011528:	79fa      	ldrb	r2, [r7, #7]
 801152a:	4906      	ldr	r1, [pc, #24]	; (8011544 <disk_ioctl+0x38>)
 801152c:	440a      	add	r2, r1
 801152e:	7a10      	ldrb	r0, [r2, #8]
 8011530:	79b9      	ldrb	r1, [r7, #6]
 8011532:	683a      	ldr	r2, [r7, #0]
 8011534:	4798      	blx	r3
 8011536:	4603      	mov	r3, r0
 8011538:	73fb      	strb	r3, [r7, #15]
  return res;
 801153a:	7bfb      	ldrb	r3, [r7, #15]
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	200422f4 	.word	0x200422f4

08011548 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	3301      	adds	r3, #1
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011558:	89fb      	ldrh	r3, [r7, #14]
 801155a:	021b      	lsls	r3, r3, #8
 801155c:	b21a      	sxth	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	b21b      	sxth	r3, r3
 8011564:	4313      	orrs	r3, r2
 8011566:	b21b      	sxth	r3, r3
 8011568:	81fb      	strh	r3, [r7, #14]
	return rv;
 801156a:	89fb      	ldrh	r3, [r7, #14]
}
 801156c:	4618      	mov	r0, r3
 801156e:	3714      	adds	r7, #20
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr

08011578 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011578:	b480      	push	{r7}
 801157a:	b085      	sub	sp, #20
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3303      	adds	r3, #3
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	021b      	lsls	r3, r3, #8
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	3202      	adds	r2, #2
 8011590:	7812      	ldrb	r2, [r2, #0]
 8011592:	4313      	orrs	r3, r2
 8011594:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	021b      	lsls	r3, r3, #8
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	3201      	adds	r2, #1
 801159e:	7812      	ldrb	r2, [r2, #0]
 80115a0:	4313      	orrs	r3, r2
 80115a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	021b      	lsls	r3, r3, #8
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	7812      	ldrb	r2, [r2, #0]
 80115ac:	4313      	orrs	r3, r2
 80115ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80115b0:	68fb      	ldr	r3, [r7, #12]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3714      	adds	r7, #20
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80115be:	b480      	push	{r7}
 80115c0:	b083      	sub	sp, #12
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	460b      	mov	r3, r1
 80115c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	1c5a      	adds	r2, r3, #1
 80115ce:	607a      	str	r2, [r7, #4]
 80115d0:	887a      	ldrh	r2, [r7, #2]
 80115d2:	b2d2      	uxtb	r2, r2
 80115d4:	701a      	strb	r2, [r3, #0]
 80115d6:	887b      	ldrh	r3, [r7, #2]
 80115d8:	0a1b      	lsrs	r3, r3, #8
 80115da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	1c5a      	adds	r2, r3, #1
 80115e0:	607a      	str	r2, [r7, #4]
 80115e2:	887a      	ldrh	r2, [r7, #2]
 80115e4:	b2d2      	uxtb	r2, r2
 80115e6:	701a      	strb	r2, [r3, #0]
}
 80115e8:	bf00      	nop
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	1c5a      	adds	r2, r3, #1
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	b2d2      	uxtb	r2, r2
 8011608:	701a      	strb	r2, [r3, #0]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	0a1b      	lsrs	r3, r3, #8
 801160e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	1c5a      	adds	r2, r3, #1
 8011614:	607a      	str	r2, [r7, #4]
 8011616:	683a      	ldr	r2, [r7, #0]
 8011618:	b2d2      	uxtb	r2, r2
 801161a:	701a      	strb	r2, [r3, #0]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	0a1b      	lsrs	r3, r3, #8
 8011620:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	1c5a      	adds	r2, r3, #1
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	683a      	ldr	r2, [r7, #0]
 801162a:	b2d2      	uxtb	r2, r2
 801162c:	701a      	strb	r2, [r3, #0]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	0a1b      	lsrs	r3, r3, #8
 8011632:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	1c5a      	adds	r2, r3, #1
 8011638:	607a      	str	r2, [r7, #4]
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	b2d2      	uxtb	r2, r2
 801163e:	701a      	strb	r2, [r3, #0]
}
 8011640:	bf00      	nop
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr

0801164c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801164c:	b480      	push	{r7}
 801164e:	b087      	sub	sp, #28
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d00d      	beq.n	8011682 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011666:	693a      	ldr	r2, [r7, #16]
 8011668:	1c53      	adds	r3, r2, #1
 801166a:	613b      	str	r3, [r7, #16]
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	1c59      	adds	r1, r3, #1
 8011670:	6179      	str	r1, [r7, #20]
 8011672:	7812      	ldrb	r2, [r2, #0]
 8011674:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	3b01      	subs	r3, #1
 801167a:	607b      	str	r3, [r7, #4]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d1f1      	bne.n	8011666 <mem_cpy+0x1a>
	}
}
 8011682:	bf00      	nop
 8011684:	371c      	adds	r7, #28
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr

0801168e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801168e:	b480      	push	{r7}
 8011690:	b087      	sub	sp, #28
 8011692:	af00      	add	r7, sp, #0
 8011694:	60f8      	str	r0, [r7, #12]
 8011696:	60b9      	str	r1, [r7, #8]
 8011698:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	1c5a      	adds	r2, r3, #1
 80116a2:	617a      	str	r2, [r7, #20]
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	b2d2      	uxtb	r2, r2
 80116a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	3b01      	subs	r3, #1
 80116ae:	607b      	str	r3, [r7, #4]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1f3      	bne.n	801169e <mem_set+0x10>
}
 80116b6:	bf00      	nop
 80116b8:	371c      	adds	r7, #28
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr

080116c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80116c2:	b480      	push	{r7}
 80116c4:	b089      	sub	sp, #36	; 0x24
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	60f8      	str	r0, [r7, #12]
 80116ca:	60b9      	str	r1, [r7, #8]
 80116cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	61fb      	str	r3, [r7, #28]
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	1c5a      	adds	r2, r3, #1
 80116de:	61fa      	str	r2, [r7, #28]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	4619      	mov	r1, r3
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	1c5a      	adds	r2, r3, #1
 80116e8:	61ba      	str	r2, [r7, #24]
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	1acb      	subs	r3, r1, r3
 80116ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3b01      	subs	r3, #1
 80116f4:	607b      	str	r3, [r7, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d002      	beq.n	8011702 <mem_cmp+0x40>
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d0eb      	beq.n	80116da <mem_cmp+0x18>

	return r;
 8011702:	697b      	ldr	r3, [r7, #20]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3724      	adds	r7, #36	; 0x24
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr

08011710 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801171a:	e002      	b.n	8011722 <chk_chr+0x12>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3301      	adds	r3, #1
 8011720:	607b      	str	r3, [r7, #4]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d005      	beq.n	8011736 <chk_chr+0x26>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	461a      	mov	r2, r3
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	4293      	cmp	r3, r2
 8011734:	d1f2      	bne.n	801171c <chk_chr+0xc>
	return *str;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	781b      	ldrb	r3, [r3, #0]
}
 801173a:	4618      	mov	r0, r3
 801173c:	370c      	adds	r7, #12
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr
	...

08011748 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011748:	b480      	push	{r7}
 801174a:	b085      	sub	sp, #20
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011752:	2300      	movs	r3, #0
 8011754:	60bb      	str	r3, [r7, #8]
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	e029      	b.n	80117b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801175c:	4a27      	ldr	r2, [pc, #156]	; (80117fc <chk_lock+0xb4>)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	011b      	lsls	r3, r3, #4
 8011762:	4413      	add	r3, r2
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d01d      	beq.n	80117a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801176a:	4a24      	ldr	r2, [pc, #144]	; (80117fc <chk_lock+0xb4>)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	011b      	lsls	r3, r3, #4
 8011770:	4413      	add	r3, r2
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	429a      	cmp	r2, r3
 801177a:	d116      	bne.n	80117aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801177c:	4a1f      	ldr	r2, [pc, #124]	; (80117fc <chk_lock+0xb4>)
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	011b      	lsls	r3, r3, #4
 8011782:	4413      	add	r3, r2
 8011784:	3304      	adds	r3, #4
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801178c:	429a      	cmp	r2, r3
 801178e:	d10c      	bne.n	80117aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011790:	4a1a      	ldr	r2, [pc, #104]	; (80117fc <chk_lock+0xb4>)
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	011b      	lsls	r3, r3, #4
 8011796:	4413      	add	r3, r2
 8011798:	3308      	adds	r3, #8
 801179a:	681a      	ldr	r2, [r3, #0]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d102      	bne.n	80117aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80117a4:	e007      	b.n	80117b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80117a6:	2301      	movs	r3, #1
 80117a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	3301      	adds	r3, #1
 80117ae:	60fb      	str	r3, [r7, #12]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d9d2      	bls.n	801175c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2b02      	cmp	r3, #2
 80117ba:	d109      	bne.n	80117d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d102      	bne.n	80117c8 <chk_lock+0x80>
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	2b02      	cmp	r3, #2
 80117c6:	d101      	bne.n	80117cc <chk_lock+0x84>
 80117c8:	2300      	movs	r3, #0
 80117ca:	e010      	b.n	80117ee <chk_lock+0xa6>
 80117cc:	2312      	movs	r3, #18
 80117ce:	e00e      	b.n	80117ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d108      	bne.n	80117e8 <chk_lock+0xa0>
 80117d6:	4a09      	ldr	r2, [pc, #36]	; (80117fc <chk_lock+0xb4>)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	011b      	lsls	r3, r3, #4
 80117dc:	4413      	add	r3, r2
 80117de:	330c      	adds	r3, #12
 80117e0:	881b      	ldrh	r3, [r3, #0]
 80117e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117e6:	d101      	bne.n	80117ec <chk_lock+0xa4>
 80117e8:	2310      	movs	r3, #16
 80117ea:	e000      	b.n	80117ee <chk_lock+0xa6>
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3714      	adds	r7, #20
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	200422d4 	.word	0x200422d4

08011800 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011806:	2300      	movs	r3, #0
 8011808:	607b      	str	r3, [r7, #4]
 801180a:	e002      	b.n	8011812 <enq_lock+0x12>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	3301      	adds	r3, #1
 8011810:	607b      	str	r3, [r7, #4]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d806      	bhi.n	8011826 <enq_lock+0x26>
 8011818:	4a09      	ldr	r2, [pc, #36]	; (8011840 <enq_lock+0x40>)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	011b      	lsls	r3, r3, #4
 801181e:	4413      	add	r3, r2
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1f2      	bne.n	801180c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2b02      	cmp	r3, #2
 801182a:	bf14      	ite	ne
 801182c:	2301      	movne	r3, #1
 801182e:	2300      	moveq	r3, #0
 8011830:	b2db      	uxtb	r3, r3
}
 8011832:	4618      	mov	r0, r3
 8011834:	370c      	adds	r7, #12
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop
 8011840:	200422d4 	.word	0x200422d4

08011844 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011844:	b480      	push	{r7}
 8011846:	b085      	sub	sp, #20
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801184e:	2300      	movs	r3, #0
 8011850:	60fb      	str	r3, [r7, #12]
 8011852:	e01f      	b.n	8011894 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011854:	4a41      	ldr	r2, [pc, #260]	; (801195c <inc_lock+0x118>)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	011b      	lsls	r3, r3, #4
 801185a:	4413      	add	r3, r2
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	429a      	cmp	r2, r3
 8011864:	d113      	bne.n	801188e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011866:	4a3d      	ldr	r2, [pc, #244]	; (801195c <inc_lock+0x118>)
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	011b      	lsls	r3, r3, #4
 801186c:	4413      	add	r3, r2
 801186e:	3304      	adds	r3, #4
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011876:	429a      	cmp	r2, r3
 8011878:	d109      	bne.n	801188e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801187a:	4a38      	ldr	r2, [pc, #224]	; (801195c <inc_lock+0x118>)
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	011b      	lsls	r3, r3, #4
 8011880:	4413      	add	r3, r2
 8011882:	3308      	adds	r3, #8
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801188a:	429a      	cmp	r2, r3
 801188c:	d006      	beq.n	801189c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	3301      	adds	r3, #1
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2b01      	cmp	r3, #1
 8011898:	d9dc      	bls.n	8011854 <inc_lock+0x10>
 801189a:	e000      	b.n	801189e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801189c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2b02      	cmp	r3, #2
 80118a2:	d132      	bne.n	801190a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80118a4:	2300      	movs	r3, #0
 80118a6:	60fb      	str	r3, [r7, #12]
 80118a8:	e002      	b.n	80118b0 <inc_lock+0x6c>
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	3301      	adds	r3, #1
 80118ae:	60fb      	str	r3, [r7, #12]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d806      	bhi.n	80118c4 <inc_lock+0x80>
 80118b6:	4a29      	ldr	r2, [pc, #164]	; (801195c <inc_lock+0x118>)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	011b      	lsls	r3, r3, #4
 80118bc:	4413      	add	r3, r2
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1f2      	bne.n	80118aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d101      	bne.n	80118ce <inc_lock+0x8a>
 80118ca:	2300      	movs	r3, #0
 80118cc:	e040      	b.n	8011950 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	4922      	ldr	r1, [pc, #136]	; (801195c <inc_lock+0x118>)
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	011b      	lsls	r3, r3, #4
 80118d8:	440b      	add	r3, r1
 80118da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	689a      	ldr	r2, [r3, #8]
 80118e0:	491e      	ldr	r1, [pc, #120]	; (801195c <inc_lock+0x118>)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	011b      	lsls	r3, r3, #4
 80118e6:	440b      	add	r3, r1
 80118e8:	3304      	adds	r3, #4
 80118ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	695a      	ldr	r2, [r3, #20]
 80118f0:	491a      	ldr	r1, [pc, #104]	; (801195c <inc_lock+0x118>)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	011b      	lsls	r3, r3, #4
 80118f6:	440b      	add	r3, r1
 80118f8:	3308      	adds	r3, #8
 80118fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80118fc:	4a17      	ldr	r2, [pc, #92]	; (801195c <inc_lock+0x118>)
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	011b      	lsls	r3, r3, #4
 8011902:	4413      	add	r3, r2
 8011904:	330c      	adds	r3, #12
 8011906:	2200      	movs	r2, #0
 8011908:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d009      	beq.n	8011924 <inc_lock+0xe0>
 8011910:	4a12      	ldr	r2, [pc, #72]	; (801195c <inc_lock+0x118>)
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	011b      	lsls	r3, r3, #4
 8011916:	4413      	add	r3, r2
 8011918:	330c      	adds	r3, #12
 801191a:	881b      	ldrh	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d001      	beq.n	8011924 <inc_lock+0xe0>
 8011920:	2300      	movs	r3, #0
 8011922:	e015      	b.n	8011950 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d108      	bne.n	801193c <inc_lock+0xf8>
 801192a:	4a0c      	ldr	r2, [pc, #48]	; (801195c <inc_lock+0x118>)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	011b      	lsls	r3, r3, #4
 8011930:	4413      	add	r3, r2
 8011932:	330c      	adds	r3, #12
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	3301      	adds	r3, #1
 8011938:	b29a      	uxth	r2, r3
 801193a:	e001      	b.n	8011940 <inc_lock+0xfc>
 801193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011940:	4906      	ldr	r1, [pc, #24]	; (801195c <inc_lock+0x118>)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	011b      	lsls	r3, r3, #4
 8011946:	440b      	add	r3, r1
 8011948:	330c      	adds	r3, #12
 801194a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	3301      	adds	r3, #1
}
 8011950:	4618      	mov	r0, r3
 8011952:	3714      	adds	r7, #20
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	200422d4 	.word	0x200422d4

08011960 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011960:	b480      	push	{r7}
 8011962:	b085      	sub	sp, #20
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	3b01      	subs	r3, #1
 801196c:	607b      	str	r3, [r7, #4]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b01      	cmp	r3, #1
 8011972:	d825      	bhi.n	80119c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011974:	4a17      	ldr	r2, [pc, #92]	; (80119d4 <dec_lock+0x74>)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	4413      	add	r3, r2
 801197c:	330c      	adds	r3, #12
 801197e:	881b      	ldrh	r3, [r3, #0]
 8011980:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011982:	89fb      	ldrh	r3, [r7, #14]
 8011984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011988:	d101      	bne.n	801198e <dec_lock+0x2e>
 801198a:	2300      	movs	r3, #0
 801198c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801198e:	89fb      	ldrh	r3, [r7, #14]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <dec_lock+0x3a>
 8011994:	89fb      	ldrh	r3, [r7, #14]
 8011996:	3b01      	subs	r3, #1
 8011998:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801199a:	4a0e      	ldr	r2, [pc, #56]	; (80119d4 <dec_lock+0x74>)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	4413      	add	r3, r2
 80119a2:	330c      	adds	r3, #12
 80119a4:	89fa      	ldrh	r2, [r7, #14]
 80119a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80119a8:	89fb      	ldrh	r3, [r7, #14]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d105      	bne.n	80119ba <dec_lock+0x5a>
 80119ae:	4a09      	ldr	r2, [pc, #36]	; (80119d4 <dec_lock+0x74>)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	011b      	lsls	r3, r3, #4
 80119b4:	4413      	add	r3, r2
 80119b6:	2200      	movs	r2, #0
 80119b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80119ba:	2300      	movs	r3, #0
 80119bc:	737b      	strb	r3, [r7, #13]
 80119be:	e001      	b.n	80119c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80119c0:	2302      	movs	r3, #2
 80119c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80119c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3714      	adds	r7, #20
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr
 80119d2:	bf00      	nop
 80119d4:	200422d4 	.word	0x200422d4

080119d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80119e0:	2300      	movs	r3, #0
 80119e2:	60fb      	str	r3, [r7, #12]
 80119e4:	e010      	b.n	8011a08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80119e6:	4a0d      	ldr	r2, [pc, #52]	; (8011a1c <clear_lock+0x44>)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	011b      	lsls	r3, r3, #4
 80119ec:	4413      	add	r3, r2
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d105      	bne.n	8011a02 <clear_lock+0x2a>
 80119f6:	4a09      	ldr	r2, [pc, #36]	; (8011a1c <clear_lock+0x44>)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	011b      	lsls	r3, r3, #4
 80119fc:	4413      	add	r3, r2
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	3301      	adds	r3, #1
 8011a06:	60fb      	str	r3, [r7, #12]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d9eb      	bls.n	80119e6 <clear_lock+0xe>
	}
}
 8011a0e:	bf00      	nop
 8011a10:	3714      	adds	r7, #20
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop
 8011a1c:	200422d4 	.word	0x200422d4

08011a20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b086      	sub	sp, #24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	78db      	ldrb	r3, [r3, #3]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d034      	beq.n	8011a9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7858      	ldrb	r0, [r3, #1]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a44:	2301      	movs	r3, #1
 8011a46:	697a      	ldr	r2, [r7, #20]
 8011a48:	f7ff fd40 	bl	80114cc <disk_write>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d002      	beq.n	8011a58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011a52:	2301      	movs	r3, #1
 8011a54:	73fb      	strb	r3, [r7, #15]
 8011a56:	e022      	b.n	8011a9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a62:	697a      	ldr	r2, [r7, #20]
 8011a64:	1ad2      	subs	r2, r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6a1b      	ldr	r3, [r3, #32]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d217      	bcs.n	8011a9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	789b      	ldrb	r3, [r3, #2]
 8011a72:	613b      	str	r3, [r7, #16]
 8011a74:	e010      	b.n	8011a98 <sync_window+0x78>
					wsect += fs->fsize;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6a1b      	ldr	r3, [r3, #32]
 8011a7a:	697a      	ldr	r2, [r7, #20]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	7858      	ldrb	r0, [r3, #1]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	697a      	ldr	r2, [r7, #20]
 8011a8e:	f7ff fd1d 	bl	80114cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	3b01      	subs	r3, #1
 8011a96:	613b      	str	r3, [r7, #16]
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d8eb      	bhi.n	8011a76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3718      	adds	r7, #24
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d01b      	beq.n	8011af8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff ffad 	bl	8011a20 <sync_window>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011aca:	7bfb      	ldrb	r3, [r7, #15]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d113      	bne.n	8011af8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	7858      	ldrb	r0, [r3, #1]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ada:	2301      	movs	r3, #1
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	f7ff fcd5 	bl	801148c <disk_read>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011aee:	2301      	movs	r3, #1
 8011af0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
	...

08011b04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ff ff87 	bl	8011a20 <sync_window>
 8011b12:	4603      	mov	r3, r0
 8011b14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b16:	7bfb      	ldrb	r3, [r7, #15]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d159      	bne.n	8011bd0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	2b03      	cmp	r3, #3
 8011b22:	d149      	bne.n	8011bb8 <sync_fs+0xb4>
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	791b      	ldrb	r3, [r3, #4]
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d145      	bne.n	8011bb8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	899b      	ldrh	r3, [r3, #12]
 8011b36:	461a      	mov	r2, r3
 8011b38:	2100      	movs	r1, #0
 8011b3a:	f7ff fda8 	bl	801168e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	3338      	adds	r3, #56	; 0x38
 8011b42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b46:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7ff fd37 	bl	80115be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3338      	adds	r3, #56	; 0x38
 8011b54:	4921      	ldr	r1, [pc, #132]	; (8011bdc <sync_fs+0xd8>)
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7ff fd4c 	bl	80115f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	3338      	adds	r3, #56	; 0x38
 8011b60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011b64:	491e      	ldr	r1, [pc, #120]	; (8011be0 <sync_fs+0xdc>)
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7ff fd44 	bl	80115f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3338      	adds	r3, #56	; 0x38
 8011b70:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	695b      	ldr	r3, [r3, #20]
 8011b78:	4619      	mov	r1, r3
 8011b7a:	4610      	mov	r0, r2
 8011b7c:	f7ff fd3a 	bl	80115f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	3338      	adds	r3, #56	; 0x38
 8011b84:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	691b      	ldr	r3, [r3, #16]
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	4610      	mov	r0, r2
 8011b90:	f7ff fd30 	bl	80115f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b98:	1c5a      	adds	r2, r3, #1
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7858      	ldrb	r0, [r3, #1]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bac:	2301      	movs	r3, #1
 8011bae:	f7ff fc8d 	bl	80114cc <disk_write>
			fs->fsi_flag = 0;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	785b      	ldrb	r3, [r3, #1]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ff fca3 	bl	801150c <disk_ioctl>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d001      	beq.n	8011bd0 <sync_fs+0xcc>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	41615252 	.word	0x41615252
 8011be0:	61417272 	.word	0x61417272

08011be4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011be4:	b480      	push	{r7}
 8011be6:	b083      	sub	sp, #12
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	3b02      	subs	r3, #2
 8011bf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	69db      	ldr	r3, [r3, #28]
 8011bf8:	3b02      	subs	r3, #2
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d301      	bcc.n	8011c04 <clust2sect+0x20>
 8011c00:	2300      	movs	r3, #0
 8011c02:	e008      	b.n	8011c16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	895b      	ldrh	r3, [r3, #10]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	fb03 f202 	mul.w	r2, r3, r2
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c14:	4413      	add	r3, r2
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	370c      	adds	r7, #12
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr

08011c22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b086      	sub	sp, #24
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d904      	bls.n	8011c42 <get_fat+0x20>
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	69db      	ldr	r3, [r3, #28]
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d302      	bcc.n	8011c48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011c42:	2301      	movs	r3, #1
 8011c44:	617b      	str	r3, [r7, #20]
 8011c46:	e0b7      	b.n	8011db8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011c48:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	2b02      	cmp	r3, #2
 8011c54:	d05a      	beq.n	8011d0c <get_fat+0xea>
 8011c56:	2b03      	cmp	r3, #3
 8011c58:	d07d      	beq.n	8011d56 <get_fat+0x134>
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	f040 80a2 	bne.w	8011da4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	085b      	lsrs	r3, r3, #1
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	899b      	ldrh	r3, [r3, #12]
 8011c76:	4619      	mov	r1, r3
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c7e:	4413      	add	r3, r2
 8011c80:	4619      	mov	r1, r3
 8011c82:	6938      	ldr	r0, [r7, #16]
 8011c84:	f7ff ff10 	bl	8011aa8 <move_window>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f040 808d 	bne.w	8011daa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	60fa      	str	r2, [r7, #12]
 8011c96:	693a      	ldr	r2, [r7, #16]
 8011c98:	8992      	ldrh	r2, [r2, #12]
 8011c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c9e:	fb02 f201 	mul.w	r2, r2, r1
 8011ca2:	1a9b      	subs	r3, r3, r2
 8011ca4:	693a      	ldr	r2, [r7, #16]
 8011ca6:	4413      	add	r3, r2
 8011ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011cac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	899b      	ldrh	r3, [r3, #12]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cbe:	4413      	add	r3, r2
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	6938      	ldr	r0, [r7, #16]
 8011cc4:	f7ff fef0 	bl	8011aa8 <move_window>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d16f      	bne.n	8011dae <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	899b      	ldrh	r3, [r3, #12]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cda:	fb02 f201 	mul.w	r2, r2, r1
 8011cde:	1a9b      	subs	r3, r3, r2
 8011ce0:	693a      	ldr	r2, [r7, #16]
 8011ce2:	4413      	add	r3, r2
 8011ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ce8:	021b      	lsls	r3, r3, #8
 8011cea:	461a      	mov	r2, r3
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	4313      	orrs	r3, r2
 8011cf0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	f003 0301 	and.w	r3, r3, #1
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d002      	beq.n	8011d02 <get_fat+0xe0>
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	091b      	lsrs	r3, r3, #4
 8011d00:	e002      	b.n	8011d08 <get_fat+0xe6>
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d08:	617b      	str	r3, [r7, #20]
			break;
 8011d0a:	e055      	b.n	8011db8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	899b      	ldrh	r3, [r3, #12]
 8011d14:	085b      	lsrs	r3, r3, #1
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	4619      	mov	r1, r3
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d20:	4413      	add	r3, r2
 8011d22:	4619      	mov	r1, r3
 8011d24:	6938      	ldr	r0, [r7, #16]
 8011d26:	f7ff febf 	bl	8011aa8 <move_window>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d140      	bne.n	8011db2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	693a      	ldr	r2, [r7, #16]
 8011d3c:	8992      	ldrh	r2, [r2, #12]
 8011d3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d42:	fb02 f200 	mul.w	r2, r2, r0
 8011d46:	1a9b      	subs	r3, r3, r2
 8011d48:	440b      	add	r3, r1
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff fbfc 	bl	8011548 <ld_word>
 8011d50:	4603      	mov	r3, r0
 8011d52:	617b      	str	r3, [r7, #20]
			break;
 8011d54:	e030      	b.n	8011db8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	899b      	ldrh	r3, [r3, #12]
 8011d5e:	089b      	lsrs	r3, r3, #2
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	4619      	mov	r1, r3
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d6a:	4413      	add	r3, r2
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	6938      	ldr	r0, [r7, #16]
 8011d70:	f7ff fe9a 	bl	8011aa8 <move_window>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d11d      	bne.n	8011db6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	693a      	ldr	r2, [r7, #16]
 8011d86:	8992      	ldrh	r2, [r2, #12]
 8011d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d8c:	fb02 f200 	mul.w	r2, r2, r0
 8011d90:	1a9b      	subs	r3, r3, r2
 8011d92:	440b      	add	r3, r1
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7ff fbef 	bl	8011578 <ld_dword>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011da0:	617b      	str	r3, [r7, #20]
			break;
 8011da2:	e009      	b.n	8011db8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011da4:	2301      	movs	r3, #1
 8011da6:	617b      	str	r3, [r7, #20]
 8011da8:	e006      	b.n	8011db8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011daa:	bf00      	nop
 8011dac:	e004      	b.n	8011db8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dae:	bf00      	nop
 8011db0:	e002      	b.n	8011db8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011db2:	bf00      	nop
 8011db4:	e000      	b.n	8011db8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011db6:	bf00      	nop
		}
	}

	return val;
 8011db8:	697b      	ldr	r3, [r7, #20]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3718      	adds	r7, #24
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011dc2:	b590      	push	{r4, r7, lr}
 8011dc4:	b089      	sub	sp, #36	; 0x24
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	60b9      	str	r1, [r7, #8]
 8011dcc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011dce:	2302      	movs	r3, #2
 8011dd0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	f240 8106 	bls.w	8011fe6 <put_fat+0x224>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	69db      	ldr	r3, [r3, #28]
 8011dde:	68ba      	ldr	r2, [r7, #8]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	f080 8100 	bcs.w	8011fe6 <put_fat+0x224>
		switch (fs->fs_type) {
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	2b02      	cmp	r3, #2
 8011dec:	f000 8088 	beq.w	8011f00 <put_fat+0x13e>
 8011df0:	2b03      	cmp	r3, #3
 8011df2:	f000 80b0 	beq.w	8011f56 <put_fat+0x194>
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	f040 80f5 	bne.w	8011fe6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	61bb      	str	r3, [r7, #24]
 8011e00:	69bb      	ldr	r3, [r7, #24]
 8011e02:	085b      	lsrs	r3, r3, #1
 8011e04:	69ba      	ldr	r2, [r7, #24]
 8011e06:	4413      	add	r3, r2
 8011e08:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	899b      	ldrh	r3, [r3, #12]
 8011e12:	4619      	mov	r1, r3
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e1a:	4413      	add	r3, r2
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f7ff fe42 	bl	8011aa8 <move_window>
 8011e24:	4603      	mov	r3, r0
 8011e26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e28:	7ffb      	ldrb	r3, [r7, #31]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	f040 80d4 	bne.w	8011fd8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	1c5a      	adds	r2, r3, #1
 8011e3a:	61ba      	str	r2, [r7, #24]
 8011e3c:	68fa      	ldr	r2, [r7, #12]
 8011e3e:	8992      	ldrh	r2, [r2, #12]
 8011e40:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e44:	fb02 f200 	mul.w	r2, r2, r0
 8011e48:	1a9b      	subs	r3, r3, r2
 8011e4a:	440b      	add	r3, r1
 8011e4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	f003 0301 	and.w	r3, r3, #1
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00d      	beq.n	8011e74 <put_fat+0xb2>
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	b25b      	sxtb	r3, r3
 8011e5e:	f003 030f 	and.w	r3, r3, #15
 8011e62:	b25a      	sxtb	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	011b      	lsls	r3, r3, #4
 8011e6a:	b25b      	sxtb	r3, r3
 8011e6c:	4313      	orrs	r3, r2
 8011e6e:	b25b      	sxtb	r3, r3
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	e001      	b.n	8011e78 <put_fat+0xb6>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	697a      	ldr	r2, [r7, #20]
 8011e7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2201      	movs	r2, #1
 8011e80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	899b      	ldrh	r3, [r3, #12]
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e92:	4413      	add	r3, r2
 8011e94:	4619      	mov	r1, r3
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f7ff fe06 	bl	8011aa8 <move_window>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ea0:	7ffb      	ldrb	r3, [r7, #31]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	f040 809a 	bne.w	8011fdc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	899b      	ldrh	r3, [r3, #12]
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	69bb      	ldr	r3, [r7, #24]
 8011eb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eba:	fb02 f200 	mul.w	r2, r2, r0
 8011ebe:	1a9b      	subs	r3, r3, r2
 8011ec0:	440b      	add	r3, r1
 8011ec2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	f003 0301 	and.w	r3, r3, #1
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d003      	beq.n	8011ed6 <put_fat+0x114>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	091b      	lsrs	r3, r3, #4
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	e00e      	b.n	8011ef4 <put_fat+0x132>
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	b25b      	sxtb	r3, r3
 8011edc:	f023 030f 	bic.w	r3, r3, #15
 8011ee0:	b25a      	sxtb	r2, r3
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	0a1b      	lsrs	r3, r3, #8
 8011ee6:	b25b      	sxtb	r3, r3
 8011ee8:	f003 030f 	and.w	r3, r3, #15
 8011eec:	b25b      	sxtb	r3, r3
 8011eee:	4313      	orrs	r3, r2
 8011ef0:	b25b      	sxtb	r3, r3
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2201      	movs	r2, #1
 8011efc:	70da      	strb	r2, [r3, #3]
			break;
 8011efe:	e072      	b.n	8011fe6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	899b      	ldrh	r3, [r3, #12]
 8011f08:	085b      	lsrs	r3, r3, #1
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f14:	4413      	add	r3, r2
 8011f16:	4619      	mov	r1, r3
 8011f18:	68f8      	ldr	r0, [r7, #12]
 8011f1a:	f7ff fdc5 	bl	8011aa8 <move_window>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f22:	7ffb      	ldrb	r3, [r7, #31]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d15b      	bne.n	8011fe0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	005b      	lsls	r3, r3, #1
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	8992      	ldrh	r2, [r2, #12]
 8011f36:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f3a:	fb02 f200 	mul.w	r2, r2, r0
 8011f3e:	1a9b      	subs	r3, r3, r2
 8011f40:	440b      	add	r3, r1
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	b292      	uxth	r2, r2
 8011f46:	4611      	mov	r1, r2
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7ff fb38 	bl	80115be <st_word>
			fs->wflag = 1;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2201      	movs	r2, #1
 8011f52:	70da      	strb	r2, [r3, #3]
			break;
 8011f54:	e047      	b.n	8011fe6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	899b      	ldrh	r3, [r3, #12]
 8011f5e:	089b      	lsrs	r3, r3, #2
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4619      	mov	r1, r3
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f6a:	4413      	add	r3, r2
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f7ff fd9a 	bl	8011aa8 <move_window>
 8011f74:	4603      	mov	r3, r0
 8011f76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f78:	7ffb      	ldrb	r3, [r7, #31]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d132      	bne.n	8011fe4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	009b      	lsls	r3, r3, #2
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	8992      	ldrh	r2, [r2, #12]
 8011f92:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f96:	fb02 f200 	mul.w	r2, r2, r0
 8011f9a:	1a9b      	subs	r3, r3, r2
 8011f9c:	440b      	add	r3, r1
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff faea 	bl	8011578 <ld_dword>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011faa:	4323      	orrs	r3, r4
 8011fac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	8992      	ldrh	r2, [r2, #12]
 8011fbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fc0:	fb02 f200 	mul.w	r2, r2, r0
 8011fc4:	1a9b      	subs	r3, r3, r2
 8011fc6:	440b      	add	r3, r1
 8011fc8:	6879      	ldr	r1, [r7, #4]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7ff fb12 	bl	80115f4 <st_dword>
			fs->wflag = 1;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	70da      	strb	r2, [r3, #3]
			break;
 8011fd6:	e006      	b.n	8011fe6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fd8:	bf00      	nop
 8011fda:	e004      	b.n	8011fe6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fdc:	bf00      	nop
 8011fde:	e002      	b.n	8011fe6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fe0:	bf00      	nop
 8011fe2:	e000      	b.n	8011fe6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fe4:	bf00      	nop
		}
	}
	return res;
 8011fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3724      	adds	r7, #36	; 0x24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd90      	pop	{r4, r7, pc}

08011ff0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b088      	sub	sp, #32
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d904      	bls.n	8012016 <remove_chain+0x26>
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	69db      	ldr	r3, [r3, #28]
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	429a      	cmp	r2, r3
 8012014:	d301      	bcc.n	801201a <remove_chain+0x2a>
 8012016:	2302      	movs	r3, #2
 8012018:	e04b      	b.n	80120b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d00c      	beq.n	801203a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012020:	f04f 32ff 	mov.w	r2, #4294967295
 8012024:	6879      	ldr	r1, [r7, #4]
 8012026:	69b8      	ldr	r0, [r7, #24]
 8012028:	f7ff fecb 	bl	8011dc2 <put_fat>
 801202c:	4603      	mov	r3, r0
 801202e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012030:	7ffb      	ldrb	r3, [r7, #31]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <remove_chain+0x4a>
 8012036:	7ffb      	ldrb	r3, [r7, #31]
 8012038:	e03b      	b.n	80120b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801203a:	68b9      	ldr	r1, [r7, #8]
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f7ff fdf0 	bl	8011c22 <get_fat>
 8012042:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d031      	beq.n	80120ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	2b01      	cmp	r3, #1
 801204e:	d101      	bne.n	8012054 <remove_chain+0x64>
 8012050:	2302      	movs	r3, #2
 8012052:	e02e      	b.n	80120b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	f1b3 3fff 	cmp.w	r3, #4294967295
 801205a:	d101      	bne.n	8012060 <remove_chain+0x70>
 801205c:	2301      	movs	r3, #1
 801205e:	e028      	b.n	80120b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012060:	2200      	movs	r2, #0
 8012062:	68b9      	ldr	r1, [r7, #8]
 8012064:	69b8      	ldr	r0, [r7, #24]
 8012066:	f7ff feac 	bl	8011dc2 <put_fat>
 801206a:	4603      	mov	r3, r0
 801206c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801206e:	7ffb      	ldrb	r3, [r7, #31]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <remove_chain+0x88>
 8012074:	7ffb      	ldrb	r3, [r7, #31]
 8012076:	e01c      	b.n	80120b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	695a      	ldr	r2, [r3, #20]
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	3b02      	subs	r3, #2
 8012082:	429a      	cmp	r2, r3
 8012084:	d20b      	bcs.n	801209e <remove_chain+0xae>
			fs->free_clst++;
 8012086:	69bb      	ldr	r3, [r7, #24]
 8012088:	695b      	ldr	r3, [r3, #20]
 801208a:	1c5a      	adds	r2, r3, #1
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	791b      	ldrb	r3, [r3, #4]
 8012094:	f043 0301 	orr.w	r3, r3, #1
 8012098:	b2da      	uxtb	r2, r3
 801209a:	69bb      	ldr	r3, [r7, #24]
 801209c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	69db      	ldr	r3, [r3, #28]
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d3c6      	bcc.n	801203a <remove_chain+0x4a>
 80120ac:	e000      	b.n	80120b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80120ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80120b0:	2300      	movs	r3, #0
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3720      	adds	r7, #32
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b088      	sub	sp, #32
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10d      	bne.n	80120ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	691b      	ldr	r3, [r3, #16]
 80120d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <create_chain+0x2c>
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	69ba      	ldr	r2, [r7, #24]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d31b      	bcc.n	801211e <create_chain+0x64>
 80120e6:	2301      	movs	r3, #1
 80120e8:	61bb      	str	r3, [r7, #24]
 80120ea:	e018      	b.n	801211e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80120ec:	6839      	ldr	r1, [r7, #0]
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7ff fd97 	bl	8011c22 <get_fat>
 80120f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d801      	bhi.n	8012100 <create_chain+0x46>
 80120fc:	2301      	movs	r3, #1
 80120fe:	e070      	b.n	80121e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012106:	d101      	bne.n	801210c <create_chain+0x52>
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	e06a      	b.n	80121e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	69db      	ldr	r3, [r3, #28]
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	429a      	cmp	r2, r3
 8012114:	d201      	bcs.n	801211a <create_chain+0x60>
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	e063      	b.n	80121e2 <create_chain+0x128>
		scl = clst;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	3301      	adds	r3, #1
 8012126:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	69db      	ldr	r3, [r3, #28]
 801212c:	69fa      	ldr	r2, [r7, #28]
 801212e:	429a      	cmp	r2, r3
 8012130:	d307      	bcc.n	8012142 <create_chain+0x88>
				ncl = 2;
 8012132:	2302      	movs	r3, #2
 8012134:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012136:	69fa      	ldr	r2, [r7, #28]
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	429a      	cmp	r2, r3
 801213c:	d901      	bls.n	8012142 <create_chain+0x88>
 801213e:	2300      	movs	r3, #0
 8012140:	e04f      	b.n	80121e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012142:	69f9      	ldr	r1, [r7, #28]
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7ff fd6c 	bl	8011c22 <get_fat>
 801214a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d00e      	beq.n	8012170 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d003      	beq.n	8012160 <create_chain+0xa6>
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801215e:	d101      	bne.n	8012164 <create_chain+0xaa>
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	e03e      	b.n	80121e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012164:	69fa      	ldr	r2, [r7, #28]
 8012166:	69bb      	ldr	r3, [r7, #24]
 8012168:	429a      	cmp	r2, r3
 801216a:	d1da      	bne.n	8012122 <create_chain+0x68>
 801216c:	2300      	movs	r3, #0
 801216e:	e038      	b.n	80121e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012170:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012172:	f04f 32ff 	mov.w	r2, #4294967295
 8012176:	69f9      	ldr	r1, [r7, #28]
 8012178:	6938      	ldr	r0, [r7, #16]
 801217a:	f7ff fe22 	bl	8011dc2 <put_fat>
 801217e:	4603      	mov	r3, r0
 8012180:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012182:	7dfb      	ldrb	r3, [r7, #23]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d109      	bne.n	801219c <create_chain+0xe2>
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d006      	beq.n	801219c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801218e:	69fa      	ldr	r2, [r7, #28]
 8012190:	6839      	ldr	r1, [r7, #0]
 8012192:	6938      	ldr	r0, [r7, #16]
 8012194:	f7ff fe15 	bl	8011dc2 <put_fat>
 8012198:	4603      	mov	r3, r0
 801219a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801219c:	7dfb      	ldrb	r3, [r7, #23]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d116      	bne.n	80121d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	69fa      	ldr	r2, [r7, #28]
 80121a6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	695a      	ldr	r2, [r3, #20]
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	69db      	ldr	r3, [r3, #28]
 80121b0:	3b02      	subs	r3, #2
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d804      	bhi.n	80121c0 <create_chain+0x106>
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	1e5a      	subs	r2, r3, #1
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	791b      	ldrb	r3, [r3, #4]
 80121c4:	f043 0301 	orr.w	r3, r3, #1
 80121c8:	b2da      	uxtb	r2, r3
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	711a      	strb	r2, [r3, #4]
 80121ce:	e007      	b.n	80121e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80121d0:	7dfb      	ldrb	r3, [r7, #23]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d102      	bne.n	80121dc <create_chain+0x122>
 80121d6:	f04f 33ff 	mov.w	r3, #4294967295
 80121da:	e000      	b.n	80121de <create_chain+0x124>
 80121dc:	2301      	movs	r3, #1
 80121de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80121e0:	69fb      	ldr	r3, [r7, #28]
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3720      	adds	r7, #32
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80121ea:	b480      	push	{r7}
 80121ec:	b087      	sub	sp, #28
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
 80121f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fe:	3304      	adds	r3, #4
 8012200:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	899b      	ldrh	r3, [r3, #12]
 8012206:	461a      	mov	r2, r3
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	fbb3 f3f2 	udiv	r3, r3, r2
 801220e:	68fa      	ldr	r2, [r7, #12]
 8012210:	8952      	ldrh	r2, [r2, #10]
 8012212:	fbb3 f3f2 	udiv	r3, r3, r2
 8012216:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	1d1a      	adds	r2, r3, #4
 801221c:	613a      	str	r2, [r7, #16]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d101      	bne.n	801222c <clmt_clust+0x42>
 8012228:	2300      	movs	r3, #0
 801222a:	e010      	b.n	801224e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801222c:	697a      	ldr	r2, [r7, #20]
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	429a      	cmp	r2, r3
 8012232:	d307      	bcc.n	8012244 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	1ad3      	subs	r3, r2, r3
 801223a:	617b      	str	r3, [r7, #20]
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	3304      	adds	r3, #4
 8012240:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012242:	e7e9      	b.n	8012218 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012244:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	4413      	add	r3, r2
}
 801224e:	4618      	mov	r0, r3
 8012250:	371c      	adds	r7, #28
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr

0801225a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801225a:	b580      	push	{r7, lr}
 801225c:	b086      	sub	sp, #24
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012270:	d204      	bcs.n	801227c <dir_sdi+0x22>
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	f003 031f 	and.w	r3, r3, #31
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <dir_sdi+0x26>
		return FR_INT_ERR;
 801227c:	2302      	movs	r3, #2
 801227e:	e071      	b.n	8012364 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	683a      	ldr	r2, [r7, #0]
 8012284:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d106      	bne.n	80122a0 <dir_sdi+0x46>
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	2b02      	cmp	r3, #2
 8012298:	d902      	bls.n	80122a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801229e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d10c      	bne.n	80122c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	095b      	lsrs	r3, r3, #5
 80122aa:	693a      	ldr	r2, [r7, #16]
 80122ac:	8912      	ldrh	r2, [r2, #8]
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d301      	bcc.n	80122b6 <dir_sdi+0x5c>
 80122b2:	2302      	movs	r3, #2
 80122b4:	e056      	b.n	8012364 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	61da      	str	r2, [r3, #28]
 80122be:	e02d      	b.n	801231c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	895b      	ldrh	r3, [r3, #10]
 80122c4:	461a      	mov	r2, r3
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	899b      	ldrh	r3, [r3, #12]
 80122ca:	fb03 f302 	mul.w	r3, r3, r2
 80122ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122d0:	e019      	b.n	8012306 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6979      	ldr	r1, [r7, #20]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7ff fca3 	bl	8011c22 <get_fat>
 80122dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e4:	d101      	bne.n	80122ea <dir_sdi+0x90>
 80122e6:	2301      	movs	r3, #1
 80122e8:	e03c      	b.n	8012364 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d904      	bls.n	80122fa <dir_sdi+0xa0>
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	69db      	ldr	r3, [r3, #28]
 80122f4:	697a      	ldr	r2, [r7, #20]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d301      	bcc.n	80122fe <dir_sdi+0xa4>
 80122fa:	2302      	movs	r3, #2
 80122fc:	e032      	b.n	8012364 <dir_sdi+0x10a>
			ofs -= csz;
 80122fe:	683a      	ldr	r2, [r7, #0]
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	1ad3      	subs	r3, r2, r3
 8012304:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012306:	683a      	ldr	r2, [r7, #0]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	429a      	cmp	r2, r3
 801230c:	d2e1      	bcs.n	80122d2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801230e:	6979      	ldr	r1, [r7, #20]
 8012310:	6938      	ldr	r0, [r7, #16]
 8012312:	f7ff fc67 	bl	8011be4 <clust2sect>
 8012316:	4602      	mov	r2, r0
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	697a      	ldr	r2, [r7, #20]
 8012320:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	69db      	ldr	r3, [r3, #28]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d101      	bne.n	801232e <dir_sdi+0xd4>
 801232a:	2302      	movs	r3, #2
 801232c:	e01a      	b.n	8012364 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	69da      	ldr	r2, [r3, #28]
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	899b      	ldrh	r3, [r3, #12]
 8012336:	4619      	mov	r1, r3
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	fbb3 f3f1 	udiv	r3, r3, r1
 801233e:	441a      	add	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	899b      	ldrh	r3, [r3, #12]
 801234e:	461a      	mov	r2, r3
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	fbb3 f0f2 	udiv	r0, r3, r2
 8012356:	fb02 f200 	mul.w	r2, r2, r0
 801235a:	1a9b      	subs	r3, r3, r2
 801235c:	18ca      	adds	r2, r1, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	695b      	ldr	r3, [r3, #20]
 8012380:	3320      	adds	r3, #32
 8012382:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	69db      	ldr	r3, [r3, #28]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d003      	beq.n	8012394 <dir_next+0x28>
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012392:	d301      	bcc.n	8012398 <dir_next+0x2c>
 8012394:	2304      	movs	r3, #4
 8012396:	e0bb      	b.n	8012510 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	899b      	ldrh	r3, [r3, #12]
 801239c:	461a      	mov	r2, r3
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80123a4:	fb02 f201 	mul.w	r2, r2, r1
 80123a8:	1a9b      	subs	r3, r3, r2
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f040 809d 	bne.w	80124ea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	69db      	ldr	r3, [r3, #28]
 80123b4:	1c5a      	adds	r2, r3, #1
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	699b      	ldr	r3, [r3, #24]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d10b      	bne.n	80123da <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	095b      	lsrs	r3, r3, #5
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	8912      	ldrh	r2, [r2, #8]
 80123ca:	4293      	cmp	r3, r2
 80123cc:	f0c0 808d 	bcc.w	80124ea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	61da      	str	r2, [r3, #28]
 80123d6:	2304      	movs	r3, #4
 80123d8:	e09a      	b.n	8012510 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	899b      	ldrh	r3, [r3, #12]
 80123de:	461a      	mov	r2, r3
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	8952      	ldrh	r2, [r2, #10]
 80123ea:	3a01      	subs	r2, #1
 80123ec:	4013      	ands	r3, r2
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d17b      	bne.n	80124ea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	699b      	ldr	r3, [r3, #24]
 80123f8:	4619      	mov	r1, r3
 80123fa:	4610      	mov	r0, r2
 80123fc:	f7ff fc11 	bl	8011c22 <get_fat>
 8012400:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d801      	bhi.n	801240c <dir_next+0xa0>
 8012408:	2302      	movs	r3, #2
 801240a:	e081      	b.n	8012510 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012412:	d101      	bne.n	8012418 <dir_next+0xac>
 8012414:	2301      	movs	r3, #1
 8012416:	e07b      	b.n	8012510 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	69db      	ldr	r3, [r3, #28]
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	429a      	cmp	r2, r3
 8012420:	d359      	bcc.n	80124d6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d104      	bne.n	8012432 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2200      	movs	r2, #0
 801242c:	61da      	str	r2, [r3, #28]
 801242e:	2304      	movs	r3, #4
 8012430:	e06e      	b.n	8012510 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	4619      	mov	r1, r3
 801243a:	4610      	mov	r0, r2
 801243c:	f7ff fe3d 	bl	80120ba <create_chain>
 8012440:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d101      	bne.n	801244c <dir_next+0xe0>
 8012448:	2307      	movs	r3, #7
 801244a:	e061      	b.n	8012510 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	2b01      	cmp	r3, #1
 8012450:	d101      	bne.n	8012456 <dir_next+0xea>
 8012452:	2302      	movs	r3, #2
 8012454:	e05c      	b.n	8012510 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245c:	d101      	bne.n	8012462 <dir_next+0xf6>
 801245e:	2301      	movs	r3, #1
 8012460:	e056      	b.n	8012510 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012462:	68f8      	ldr	r0, [r7, #12]
 8012464:	f7ff fadc 	bl	8011a20 <sync_window>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <dir_next+0x106>
 801246e:	2301      	movs	r3, #1
 8012470:	e04e      	b.n	8012510 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	899b      	ldrh	r3, [r3, #12]
 801247c:	461a      	mov	r2, r3
 801247e:	2100      	movs	r1, #0
 8012480:	f7ff f905 	bl	801168e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012484:	2300      	movs	r3, #0
 8012486:	613b      	str	r3, [r7, #16]
 8012488:	6979      	ldr	r1, [r7, #20]
 801248a:	68f8      	ldr	r0, [r7, #12]
 801248c:	f7ff fbaa 	bl	8011be4 <clust2sect>
 8012490:	4602      	mov	r2, r0
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	635a      	str	r2, [r3, #52]	; 0x34
 8012496:	e012      	b.n	80124be <dir_next+0x152>
						fs->wflag = 1;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2201      	movs	r2, #1
 801249c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f7ff fabe 	bl	8011a20 <sync_window>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d001      	beq.n	80124ae <dir_next+0x142>
 80124aa:	2301      	movs	r3, #1
 80124ac:	e030      	b.n	8012510 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	3301      	adds	r3, #1
 80124b2:	613b      	str	r3, [r7, #16]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124b8:	1c5a      	adds	r2, r3, #1
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	635a      	str	r2, [r3, #52]	; 0x34
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	895b      	ldrh	r3, [r3, #10]
 80124c2:	461a      	mov	r2, r3
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d3e6      	bcc.n	8012498 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	1ad2      	subs	r2, r2, r3
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	697a      	ldr	r2, [r7, #20]
 80124da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80124dc:	6979      	ldr	r1, [r7, #20]
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f7ff fb80 	bl	8011be4 <clust2sect>
 80124e4:	4602      	mov	r2, r0
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	68ba      	ldr	r2, [r7, #8]
 80124ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	899b      	ldrh	r3, [r3, #12]
 80124fa:	461a      	mov	r2, r3
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8012502:	fb02 f200 	mul.w	r2, r2, r0
 8012506:	1a9b      	subs	r3, r3, r2
 8012508:	18ca      	adds	r2, r1, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801250e:	2300      	movs	r3, #0
}
 8012510:	4618      	mov	r0, r3
 8012512:	3718      	adds	r7, #24
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012528:	2100      	movs	r1, #0
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff fe95 	bl	801225a <dir_sdi>
 8012530:	4603      	mov	r3, r0
 8012532:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d12b      	bne.n	8012592 <dir_alloc+0x7a>
		n = 0;
 801253a:	2300      	movs	r3, #0
 801253c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	69db      	ldr	r3, [r3, #28]
 8012542:	4619      	mov	r1, r3
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f7ff faaf 	bl	8011aa8 <move_window>
 801254a:	4603      	mov	r3, r0
 801254c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801254e:	7dfb      	ldrb	r3, [r7, #23]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d11d      	bne.n	8012590 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6a1b      	ldr	r3, [r3, #32]
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	2be5      	cmp	r3, #229	; 0xe5
 801255c:	d004      	beq.n	8012568 <dir_alloc+0x50>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d107      	bne.n	8012578 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	3301      	adds	r3, #1
 801256c:	613b      	str	r3, [r7, #16]
 801256e:	693a      	ldr	r2, [r7, #16]
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	429a      	cmp	r2, r3
 8012574:	d102      	bne.n	801257c <dir_alloc+0x64>
 8012576:	e00c      	b.n	8012592 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012578:	2300      	movs	r3, #0
 801257a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801257c:	2101      	movs	r1, #1
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff fef4 	bl	801236c <dir_next>
 8012584:	4603      	mov	r3, r0
 8012586:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012588:	7dfb      	ldrb	r3, [r7, #23]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d0d7      	beq.n	801253e <dir_alloc+0x26>
 801258e:	e000      	b.n	8012592 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012590:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012592:	7dfb      	ldrb	r3, [r7, #23]
 8012594:	2b04      	cmp	r3, #4
 8012596:	d101      	bne.n	801259c <dir_alloc+0x84>
 8012598:	2307      	movs	r3, #7
 801259a:	75fb      	strb	r3, [r7, #23]
	return res;
 801259c:	7dfb      	ldrb	r3, [r7, #23]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3718      	adds	r7, #24
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b084      	sub	sp, #16
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	331a      	adds	r3, #26
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fe ffc7 	bl	8011548 <ld_word>
 80125ba:	4603      	mov	r3, r0
 80125bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	2b03      	cmp	r3, #3
 80125c4:	d109      	bne.n	80125da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	3314      	adds	r3, #20
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fe ffbc 	bl	8011548 <ld_word>
 80125d0:	4603      	mov	r3, r0
 80125d2:	041b      	lsls	r3, r3, #16
 80125d4:	68fa      	ldr	r2, [r7, #12]
 80125d6:	4313      	orrs	r3, r2
 80125d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80125da:	68fb      	ldr	r3, [r7, #12]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3710      	adds	r7, #16
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	331a      	adds	r3, #26
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	b292      	uxth	r2, r2
 80125f8:	4611      	mov	r1, r2
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fe ffdf 	bl	80115be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b03      	cmp	r3, #3
 8012606:	d109      	bne.n	801261c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	f103 0214 	add.w	r2, r3, #20
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	0c1b      	lsrs	r3, r3, #16
 8012612:	b29b      	uxth	r3, r3
 8012614:	4619      	mov	r1, r3
 8012616:	4610      	mov	r0, r2
 8012618:	f7fe ffd1 	bl	80115be <st_word>
	}
}
 801261c:	bf00      	nop
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b086      	sub	sp, #24
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801262e:	2304      	movs	r3, #4
 8012630:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012638:	e03c      	b.n	80126b4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	69db      	ldr	r3, [r3, #28]
 801263e:	4619      	mov	r1, r3
 8012640:	6938      	ldr	r0, [r7, #16]
 8012642:	f7ff fa31 	bl	8011aa8 <move_window>
 8012646:	4603      	mov	r3, r0
 8012648:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801264a:	7dfb      	ldrb	r3, [r7, #23]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d136      	bne.n	80126be <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a1b      	ldr	r3, [r3, #32]
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012658:	7bfb      	ldrb	r3, [r7, #15]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801265e:	2304      	movs	r3, #4
 8012660:	75fb      	strb	r3, [r7, #23]
 8012662:	e031      	b.n	80126c8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a1b      	ldr	r3, [r3, #32]
 8012668:	330b      	adds	r3, #11
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012670:	73bb      	strb	r3, [r7, #14]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	7bba      	ldrb	r2, [r7, #14]
 8012676:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012678:	7bfb      	ldrb	r3, [r7, #15]
 801267a:	2be5      	cmp	r3, #229	; 0xe5
 801267c:	d011      	beq.n	80126a2 <dir_read+0x7e>
 801267e:	7bfb      	ldrb	r3, [r7, #15]
 8012680:	2b2e      	cmp	r3, #46	; 0x2e
 8012682:	d00e      	beq.n	80126a2 <dir_read+0x7e>
 8012684:	7bbb      	ldrb	r3, [r7, #14]
 8012686:	2b0f      	cmp	r3, #15
 8012688:	d00b      	beq.n	80126a2 <dir_read+0x7e>
 801268a:	7bbb      	ldrb	r3, [r7, #14]
 801268c:	f023 0320 	bic.w	r3, r3, #32
 8012690:	2b08      	cmp	r3, #8
 8012692:	bf0c      	ite	eq
 8012694:	2301      	moveq	r3, #1
 8012696:	2300      	movne	r3, #0
 8012698:	b2db      	uxtb	r3, r3
 801269a:	461a      	mov	r2, r3
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	4293      	cmp	r3, r2
 80126a0:	d00f      	beq.n	80126c2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80126a2:	2100      	movs	r1, #0
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f7ff fe61 	bl	801236c <dir_next>
 80126aa:	4603      	mov	r3, r0
 80126ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126ae:	7dfb      	ldrb	r3, [r7, #23]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d108      	bne.n	80126c6 <dir_read+0xa2>
	while (dp->sect) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	69db      	ldr	r3, [r3, #28]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1be      	bne.n	801263a <dir_read+0x16>
 80126bc:	e004      	b.n	80126c8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80126be:	bf00      	nop
 80126c0:	e002      	b.n	80126c8 <dir_read+0xa4>
				break;
 80126c2:	bf00      	nop
 80126c4:	e000      	b.n	80126c8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80126c6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d002      	beq.n	80126d4 <dir_read+0xb0>
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	61da      	str	r2, [r3, #28]
	return res;
 80126d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3718      	adds	r7, #24
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	b086      	sub	sp, #24
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126ec:	2100      	movs	r1, #0
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7ff fdb3 	bl	801225a <dir_sdi>
 80126f4:	4603      	mov	r3, r0
 80126f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80126f8:	7dfb      	ldrb	r3, [r7, #23]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d001      	beq.n	8012702 <dir_find+0x24>
 80126fe:	7dfb      	ldrb	r3, [r7, #23]
 8012700:	e03e      	b.n	8012780 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	69db      	ldr	r3, [r3, #28]
 8012706:	4619      	mov	r1, r3
 8012708:	6938      	ldr	r0, [r7, #16]
 801270a:	f7ff f9cd 	bl	8011aa8 <move_window>
 801270e:	4603      	mov	r3, r0
 8012710:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012712:	7dfb      	ldrb	r3, [r7, #23]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d12f      	bne.n	8012778 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6a1b      	ldr	r3, [r3, #32]
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012720:	7bfb      	ldrb	r3, [r7, #15]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d102      	bne.n	801272c <dir_find+0x4e>
 8012726:	2304      	movs	r3, #4
 8012728:	75fb      	strb	r3, [r7, #23]
 801272a:	e028      	b.n	801277e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6a1b      	ldr	r3, [r3, #32]
 8012730:	330b      	adds	r3, #11
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012738:	b2da      	uxtb	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6a1b      	ldr	r3, [r3, #32]
 8012742:	330b      	adds	r3, #11
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	f003 0308 	and.w	r3, r3, #8
 801274a:	2b00      	cmp	r3, #0
 801274c:	d10a      	bne.n	8012764 <dir_find+0x86>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6a18      	ldr	r0, [r3, #32]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	3324      	adds	r3, #36	; 0x24
 8012756:	220b      	movs	r2, #11
 8012758:	4619      	mov	r1, r3
 801275a:	f7fe ffb2 	bl	80116c2 <mem_cmp>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d00b      	beq.n	801277c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012764:	2100      	movs	r1, #0
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f7ff fe00 	bl	801236c <dir_next>
 801276c:	4603      	mov	r3, r0
 801276e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012770:	7dfb      	ldrb	r3, [r7, #23]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d0c5      	beq.n	8012702 <dir_find+0x24>
 8012776:	e002      	b.n	801277e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012778:	bf00      	nop
 801277a:	e000      	b.n	801277e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801277c:	bf00      	nop

	return res;
 801277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3718      	adds	r7, #24
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012796:	2101      	movs	r1, #1
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7ff febd 	bl	8012518 <dir_alloc>
 801279e:	4603      	mov	r3, r0
 80127a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80127a2:	7bfb      	ldrb	r3, [r7, #15]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d11c      	bne.n	80127e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	69db      	ldr	r3, [r3, #28]
 80127ac:	4619      	mov	r1, r3
 80127ae:	68b8      	ldr	r0, [r7, #8]
 80127b0:	f7ff f97a 	bl	8011aa8 <move_window>
 80127b4:	4603      	mov	r3, r0
 80127b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d111      	bne.n	80127e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a1b      	ldr	r3, [r3, #32]
 80127c2:	2220      	movs	r2, #32
 80127c4:	2100      	movs	r1, #0
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe ff61 	bl	801168e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6a18      	ldr	r0, [r3, #32]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	3324      	adds	r3, #36	; 0x24
 80127d4:	220b      	movs	r2, #11
 80127d6:	4619      	mov	r1, r3
 80127d8:	f7fe ff38 	bl	801164c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	2201      	movs	r2, #1
 80127e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3710      	adds	r7, #16
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	69db      	ldr	r3, [r3, #28]
 80127fe:	4619      	mov	r1, r3
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f7ff f951 	bl	8011aa8 <move_window>
 8012806:	4603      	mov	r3, r0
 8012808:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801280a:	7afb      	ldrb	r3, [r7, #11]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d106      	bne.n	801281e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6a1b      	ldr	r3, [r3, #32]
 8012814:	22e5      	movs	r2, #229	; 0xe5
 8012816:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2201      	movs	r2, #1
 801281c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801281e:	7afb      	ldrb	r3, [r7, #11]
}
 8012820:	4618      	mov	r0, r3
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b088      	sub	sp, #32
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	60fb      	str	r3, [r7, #12]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3324      	adds	r3, #36	; 0x24
 801283c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801283e:	220b      	movs	r2, #11
 8012840:	2120      	movs	r1, #32
 8012842:	68b8      	ldr	r0, [r7, #8]
 8012844:	f7fe ff23 	bl	801168e <mem_set>
	si = i = 0; ni = 8;
 8012848:	2300      	movs	r3, #0
 801284a:	613b      	str	r3, [r7, #16]
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	617b      	str	r3, [r7, #20]
 8012850:	2308      	movs	r3, #8
 8012852:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012854:	68fa      	ldr	r2, [r7, #12]
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	4413      	add	r3, r2
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b2e      	cmp	r3, #46	; 0x2e
 801285e:	d12f      	bne.n	80128c0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	617a      	str	r2, [r7, #20]
 8012866:	68fa      	ldr	r2, [r7, #12]
 8012868:	4413      	add	r3, r2
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801286e:	7ffb      	ldrb	r3, [r7, #31]
 8012870:	2b2e      	cmp	r3, #46	; 0x2e
 8012872:	d10a      	bne.n	801288a <create_name+0x62>
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	2b02      	cmp	r3, #2
 8012878:	d807      	bhi.n	801288a <create_name+0x62>
			sfn[i++] = c;
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	613a      	str	r2, [r7, #16]
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	4413      	add	r3, r2
 8012884:	7ffa      	ldrb	r2, [r7, #31]
 8012886:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012888:	e7ea      	b.n	8012860 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801288a:	7ffb      	ldrb	r3, [r7, #31]
 801288c:	2b2f      	cmp	r3, #47	; 0x2f
 801288e:	d007      	beq.n	80128a0 <create_name+0x78>
 8012890:	7ffb      	ldrb	r3, [r7, #31]
 8012892:	2b5c      	cmp	r3, #92	; 0x5c
 8012894:	d004      	beq.n	80128a0 <create_name+0x78>
 8012896:	7ffb      	ldrb	r3, [r7, #31]
 8012898:	2b20      	cmp	r3, #32
 801289a:	d901      	bls.n	80128a0 <create_name+0x78>
 801289c:	2306      	movs	r3, #6
 801289e:	e084      	b.n	80129aa <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	441a      	add	r2, r3
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80128aa:	7ffb      	ldrb	r3, [r7, #31]
 80128ac:	2b20      	cmp	r3, #32
 80128ae:	d801      	bhi.n	80128b4 <create_name+0x8c>
 80128b0:	2224      	movs	r2, #36	; 0x24
 80128b2:	e000      	b.n	80128b6 <create_name+0x8e>
 80128b4:	2220      	movs	r2, #32
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	330b      	adds	r3, #11
 80128ba:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80128bc:	2300      	movs	r3, #0
 80128be:	e074      	b.n	80129aa <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	1c5a      	adds	r2, r3, #1
 80128c4:	617a      	str	r2, [r7, #20]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4413      	add	r3, r2
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80128ce:	7ffb      	ldrb	r3, [r7, #31]
 80128d0:	2b20      	cmp	r3, #32
 80128d2:	d94e      	bls.n	8012972 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80128d4:	7ffb      	ldrb	r3, [r7, #31]
 80128d6:	2b2f      	cmp	r3, #47	; 0x2f
 80128d8:	d006      	beq.n	80128e8 <create_name+0xc0>
 80128da:	7ffb      	ldrb	r3, [r7, #31]
 80128dc:	2b5c      	cmp	r3, #92	; 0x5c
 80128de:	d110      	bne.n	8012902 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80128e0:	e002      	b.n	80128e8 <create_name+0xc0>
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	3301      	adds	r3, #1
 80128e6:	617b      	str	r3, [r7, #20]
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	4413      	add	r3, r2
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	2b2f      	cmp	r3, #47	; 0x2f
 80128f2:	d0f6      	beq.n	80128e2 <create_name+0xba>
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	4413      	add	r3, r2
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	2b5c      	cmp	r3, #92	; 0x5c
 80128fe:	d0f0      	beq.n	80128e2 <create_name+0xba>
			break;
 8012900:	e038      	b.n	8012974 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012902:	7ffb      	ldrb	r3, [r7, #31]
 8012904:	2b2e      	cmp	r3, #46	; 0x2e
 8012906:	d003      	beq.n	8012910 <create_name+0xe8>
 8012908:	693a      	ldr	r2, [r7, #16]
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	429a      	cmp	r2, r3
 801290e:	d30c      	bcc.n	801292a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	2b0b      	cmp	r3, #11
 8012914:	d002      	beq.n	801291c <create_name+0xf4>
 8012916:	7ffb      	ldrb	r3, [r7, #31]
 8012918:	2b2e      	cmp	r3, #46	; 0x2e
 801291a:	d001      	beq.n	8012920 <create_name+0xf8>
 801291c:	2306      	movs	r3, #6
 801291e:	e044      	b.n	80129aa <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012920:	2308      	movs	r3, #8
 8012922:	613b      	str	r3, [r7, #16]
 8012924:	230b      	movs	r3, #11
 8012926:	61bb      	str	r3, [r7, #24]
			continue;
 8012928:	e022      	b.n	8012970 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801292a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801292e:	2b00      	cmp	r3, #0
 8012930:	da04      	bge.n	801293c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012932:	7ffb      	ldrb	r3, [r7, #31]
 8012934:	3b80      	subs	r3, #128	; 0x80
 8012936:	4a1f      	ldr	r2, [pc, #124]	; (80129b4 <create_name+0x18c>)
 8012938:	5cd3      	ldrb	r3, [r2, r3]
 801293a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801293c:	7ffb      	ldrb	r3, [r7, #31]
 801293e:	4619      	mov	r1, r3
 8012940:	481d      	ldr	r0, [pc, #116]	; (80129b8 <create_name+0x190>)
 8012942:	f7fe fee5 	bl	8011710 <chk_chr>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d001      	beq.n	8012950 <create_name+0x128>
 801294c:	2306      	movs	r3, #6
 801294e:	e02c      	b.n	80129aa <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012950:	7ffb      	ldrb	r3, [r7, #31]
 8012952:	2b60      	cmp	r3, #96	; 0x60
 8012954:	d905      	bls.n	8012962 <create_name+0x13a>
 8012956:	7ffb      	ldrb	r3, [r7, #31]
 8012958:	2b7a      	cmp	r3, #122	; 0x7a
 801295a:	d802      	bhi.n	8012962 <create_name+0x13a>
 801295c:	7ffb      	ldrb	r3, [r7, #31]
 801295e:	3b20      	subs	r3, #32
 8012960:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	613a      	str	r2, [r7, #16]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	4413      	add	r3, r2
 801296c:	7ffa      	ldrb	r2, [r7, #31]
 801296e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012970:	e7a6      	b.n	80128c0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012972:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	441a      	add	r2, r3
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d101      	bne.n	8012988 <create_name+0x160>
 8012984:	2306      	movs	r3, #6
 8012986:	e010      	b.n	80129aa <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	2be5      	cmp	r3, #229	; 0xe5
 801298e:	d102      	bne.n	8012996 <create_name+0x16e>
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	2205      	movs	r2, #5
 8012994:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012996:	7ffb      	ldrb	r3, [r7, #31]
 8012998:	2b20      	cmp	r3, #32
 801299a:	d801      	bhi.n	80129a0 <create_name+0x178>
 801299c:	2204      	movs	r2, #4
 801299e:	e000      	b.n	80129a2 <create_name+0x17a>
 80129a0:	2200      	movs	r2, #0
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	330b      	adds	r3, #11
 80129a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80129a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3720      	adds	r7, #32
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	0801a004 	.word	0x0801a004
 80129b8:	08019fb4 	.word	0x08019fb4

080129bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b2f      	cmp	r3, #47	; 0x2f
 80129d6:	d00b      	beq.n	80129f0 <follow_path+0x34>
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b5c      	cmp	r3, #92	; 0x5c
 80129de:	d007      	beq.n	80129f0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	699a      	ldr	r2, [r3, #24]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	609a      	str	r2, [r3, #8]
 80129e8:	e00d      	b.n	8012a06 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	3301      	adds	r3, #1
 80129ee:	603b      	str	r3, [r7, #0]
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	2b2f      	cmp	r3, #47	; 0x2f
 80129f6:	d0f8      	beq.n	80129ea <follow_path+0x2e>
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b5c      	cmp	r3, #92	; 0x5c
 80129fe:	d0f4      	beq.n	80129ea <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	2200      	movs	r2, #0
 8012a04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	2b1f      	cmp	r3, #31
 8012a0c:	d80a      	bhi.n	8012a24 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2280      	movs	r2, #128	; 0x80
 8012a12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012a16:	2100      	movs	r1, #0
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff fc1e 	bl	801225a <dir_sdi>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	75fb      	strb	r3, [r7, #23]
 8012a22:	e05b      	b.n	8012adc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a24:	463b      	mov	r3, r7
 8012a26:	4619      	mov	r1, r3
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f7ff fefd 	bl	8012828 <create_name>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a32:	7dfb      	ldrb	r3, [r7, #23]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d14c      	bne.n	8012ad2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f7ff fe50 	bl	80126de <dir_find>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012a48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d01b      	beq.n	8012a88 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	2b04      	cmp	r3, #4
 8012a54:	d13f      	bne.n	8012ad6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012a56:	7afb      	ldrb	r3, [r7, #11]
 8012a58:	f003 0320 	and.w	r3, r3, #32
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d00b      	beq.n	8012a78 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012a60:	7afb      	ldrb	r3, [r7, #11]
 8012a62:	f003 0304 	and.w	r3, r3, #4
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d031      	beq.n	8012ace <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2280      	movs	r2, #128	; 0x80
 8012a6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012a76:	e02e      	b.n	8012ad6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012a78:	7afb      	ldrb	r3, [r7, #11]
 8012a7a:	f003 0304 	and.w	r3, r3, #4
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d129      	bne.n	8012ad6 <follow_path+0x11a>
 8012a82:	2305      	movs	r3, #5
 8012a84:	75fb      	strb	r3, [r7, #23]
				break;
 8012a86:	e026      	b.n	8012ad6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a88:	7afb      	ldrb	r3, [r7, #11]
 8012a8a:	f003 0304 	and.w	r3, r3, #4
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d123      	bne.n	8012ada <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	799b      	ldrb	r3, [r3, #6]
 8012a96:	f003 0310 	and.w	r3, r3, #16
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d102      	bne.n	8012aa4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012a9e:	2305      	movs	r3, #5
 8012aa0:	75fb      	strb	r3, [r7, #23]
 8012aa2:	e01b      	b.n	8012adc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	695b      	ldr	r3, [r3, #20]
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	8992      	ldrh	r2, [r2, #12]
 8012ab2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ab6:	fb02 f200 	mul.w	r2, r2, r0
 8012aba:	1a9b      	subs	r3, r3, r2
 8012abc:	440b      	add	r3, r1
 8012abe:	4619      	mov	r1, r3
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	f7ff fd70 	bl	80125a6 <ld_clust>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	609a      	str	r2, [r3, #8]
 8012acc:	e7aa      	b.n	8012a24 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012ace:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ad0:	e7a8      	b.n	8012a24 <follow_path+0x68>
			if (res != FR_OK) break;
 8012ad2:	bf00      	nop
 8012ad4:	e002      	b.n	8012adc <follow_path+0x120>
				break;
 8012ad6:	bf00      	nop
 8012ad8:	e000      	b.n	8012adc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ada:	bf00      	nop
			}
		}
	}

	return res;
 8012adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3718      	adds	r7, #24
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012ae6:	b480      	push	{r7}
 8012ae8:	b087      	sub	sp, #28
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012aee:	f04f 33ff 	mov.w	r3, #4294967295
 8012af2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d031      	beq.n	8012b60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	617b      	str	r3, [r7, #20]
 8012b02:	e002      	b.n	8012b0a <get_ldnumber+0x24>
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	3301      	adds	r3, #1
 8012b08:	617b      	str	r3, [r7, #20]
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	2b20      	cmp	r3, #32
 8012b10:	d903      	bls.n	8012b1a <get_ldnumber+0x34>
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	2b3a      	cmp	r3, #58	; 0x3a
 8012b18:	d1f4      	bne.n	8012b04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b3a      	cmp	r3, #58	; 0x3a
 8012b20:	d11c      	bne.n	8012b5c <get_ldnumber+0x76>
			tp = *path;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	1c5a      	adds	r2, r3, #1
 8012b2c:	60fa      	str	r2, [r7, #12]
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	3b30      	subs	r3, #48	; 0x30
 8012b32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	2b09      	cmp	r3, #9
 8012b38:	d80e      	bhi.n	8012b58 <get_ldnumber+0x72>
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d10a      	bne.n	8012b58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d107      	bne.n	8012b58 <get_ldnumber+0x72>
					vol = (int)i;
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	617b      	str	r3, [r7, #20]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	697a      	ldr	r2, [r7, #20]
 8012b56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	e002      	b.n	8012b62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012b60:	693b      	ldr	r3, [r7, #16]
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	371c      	adds	r7, #28
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr
	...

08012b70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	70da      	strb	r2, [r3, #3]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f04f 32ff 	mov.w	r2, #4294967295
 8012b86:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7fe ff8c 	bl	8011aa8 <move_window>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d001      	beq.n	8012b9a <check_fs+0x2a>
 8012b96:	2304      	movs	r3, #4
 8012b98:	e038      	b.n	8012c0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	3338      	adds	r3, #56	; 0x38
 8012b9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fe fcd0 	bl	8011548 <ld_word>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	461a      	mov	r2, r3
 8012bac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d001      	beq.n	8012bb8 <check_fs+0x48>
 8012bb4:	2303      	movs	r3, #3
 8012bb6:	e029      	b.n	8012c0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012bbe:	2be9      	cmp	r3, #233	; 0xe9
 8012bc0:	d009      	beq.n	8012bd6 <check_fs+0x66>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012bc8:	2beb      	cmp	r3, #235	; 0xeb
 8012bca:	d11e      	bne.n	8012c0a <check_fs+0x9a>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012bd2:	2b90      	cmp	r3, #144	; 0x90
 8012bd4:	d119      	bne.n	8012c0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3338      	adds	r3, #56	; 0x38
 8012bda:	3336      	adds	r3, #54	; 0x36
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7fe fccb 	bl	8011578 <ld_dword>
 8012be2:	4603      	mov	r3, r0
 8012be4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012be8:	4a0a      	ldr	r2, [pc, #40]	; (8012c14 <check_fs+0xa4>)
 8012bea:	4293      	cmp	r3, r2
 8012bec:	d101      	bne.n	8012bf2 <check_fs+0x82>
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e00c      	b.n	8012c0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	3338      	adds	r3, #56	; 0x38
 8012bf6:	3352      	adds	r3, #82	; 0x52
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fe fcbd 	bl	8011578 <ld_dword>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	4b05      	ldr	r3, [pc, #20]	; (8012c18 <check_fs+0xa8>)
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d101      	bne.n	8012c0a <check_fs+0x9a>
 8012c06:	2300      	movs	r3, #0
 8012c08:	e000      	b.n	8012c0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012c0a:	2302      	movs	r3, #2
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	00544146 	.word	0x00544146
 8012c18:	33544146 	.word	0x33544146

08012c1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b096      	sub	sp, #88	; 0x58
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	4613      	mov	r3, r2
 8012c28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012c30:	68f8      	ldr	r0, [r7, #12]
 8012c32:	f7ff ff58 	bl	8012ae6 <get_ldnumber>
 8012c36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	da01      	bge.n	8012c42 <find_volume+0x26>
 8012c3e:	230b      	movs	r3, #11
 8012c40:	e268      	b.n	8013114 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012c42:	4ab0      	ldr	r2, [pc, #704]	; (8012f04 <find_volume+0x2e8>)
 8012c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d101      	bne.n	8012c56 <find_volume+0x3a>
 8012c52:	230c      	movs	r3, #12
 8012c54:	e25e      	b.n	8013114 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012c5c:	79fb      	ldrb	r3, [r7, #7]
 8012c5e:	f023 0301 	bic.w	r3, r3, #1
 8012c62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d01a      	beq.n	8012ca2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	785b      	ldrb	r3, [r3, #1]
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7fe fbcb 	bl	801140c <disk_status>
 8012c76:	4603      	mov	r3, r0
 8012c78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c80:	f003 0301 	and.w	r3, r3, #1
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d10c      	bne.n	8012ca2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012c88:	79fb      	ldrb	r3, [r7, #7]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d007      	beq.n	8012c9e <find_volume+0x82>
 8012c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c92:	f003 0304 	and.w	r3, r3, #4
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d001      	beq.n	8012c9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012c9a:	230a      	movs	r3, #10
 8012c9c:	e23a      	b.n	8013114 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	e238      	b.n	8013114 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012caa:	b2da      	uxtb	r2, r3
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb2:	785b      	ldrb	r3, [r3, #1]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fe fbc3 	bl	8011440 <disk_initialize>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cc4:	f003 0301 	and.w	r3, r3, #1
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d001      	beq.n	8012cd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ccc:	2303      	movs	r3, #3
 8012cce:	e221      	b.n	8013114 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012cd0:	79fb      	ldrb	r3, [r7, #7]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d007      	beq.n	8012ce6 <find_volume+0xca>
 8012cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cda:	f003 0304 	and.w	r3, r3, #4
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d001      	beq.n	8012ce6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012ce2:	230a      	movs	r3, #10
 8012ce4:	e216      	b.n	8013114 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce8:	7858      	ldrb	r0, [r3, #1]
 8012cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cec:	330c      	adds	r3, #12
 8012cee:	461a      	mov	r2, r3
 8012cf0:	2102      	movs	r1, #2
 8012cf2:	f7fe fc0b 	bl	801150c <disk_ioctl>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d001      	beq.n	8012d00 <find_volume+0xe4>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e209      	b.n	8013114 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d02:	899b      	ldrh	r3, [r3, #12]
 8012d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d08:	d80d      	bhi.n	8012d26 <find_volume+0x10a>
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0c:	899b      	ldrh	r3, [r3, #12]
 8012d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d12:	d308      	bcc.n	8012d26 <find_volume+0x10a>
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	899b      	ldrh	r3, [r3, #12]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	899b      	ldrh	r3, [r3, #12]
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	4013      	ands	r3, r2
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <find_volume+0x10e>
 8012d26:	2301      	movs	r3, #1
 8012d28:	e1f4      	b.n	8013114 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012d2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d32:	f7ff ff1d 	bl	8012b70 <check_fs>
 8012d36:	4603      	mov	r3, r0
 8012d38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d40:	2b02      	cmp	r3, #2
 8012d42:	d14b      	bne.n	8012ddc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d44:	2300      	movs	r3, #0
 8012d46:	643b      	str	r3, [r7, #64]	; 0x40
 8012d48:	e01f      	b.n	8012d8a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d52:	011b      	lsls	r3, r3, #4
 8012d54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012d58:	4413      	add	r3, r2
 8012d5a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	3304      	adds	r3, #4
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d006      	beq.n	8012d74 <find_volume+0x158>
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	3308      	adds	r3, #8
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fe fc04 	bl	8011578 <ld_dword>
 8012d70:	4602      	mov	r2, r0
 8012d72:	e000      	b.n	8012d76 <find_volume+0x15a>
 8012d74:	2200      	movs	r2, #0
 8012d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012d7e:	440b      	add	r3, r1
 8012d80:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d86:	3301      	adds	r3, #1
 8012d88:	643b      	str	r3, [r7, #64]	; 0x40
 8012d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d8c:	2b03      	cmp	r3, #3
 8012d8e:	d9dc      	bls.n	8012d4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012d90:	2300      	movs	r3, #0
 8012d92:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d002      	beq.n	8012da0 <find_volume+0x184>
 8012d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d9c:	3b01      	subs	r3, #1
 8012d9e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012da8:	4413      	add	r3, r2
 8012daa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012dae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d005      	beq.n	8012dc2 <find_volume+0x1a6>
 8012db6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012db8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dba:	f7ff fed9 	bl	8012b70 <check_fs>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	e000      	b.n	8012dc4 <find_volume+0x1a8>
 8012dc2:	2303      	movs	r3, #3
 8012dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	d905      	bls.n	8012ddc <find_volume+0x1c0>
 8012dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8012dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dd8:	2b03      	cmp	r3, #3
 8012dda:	d9e1      	bls.n	8012da0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012de0:	2b04      	cmp	r3, #4
 8012de2:	d101      	bne.n	8012de8 <find_volume+0x1cc>
 8012de4:	2301      	movs	r3, #1
 8012de6:	e195      	b.n	8013114 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d901      	bls.n	8012df4 <find_volume+0x1d8>
 8012df0:	230d      	movs	r3, #13
 8012df2:	e18f      	b.n	8013114 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df6:	3338      	adds	r3, #56	; 0x38
 8012df8:	330b      	adds	r3, #11
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7fe fba4 	bl	8011548 <ld_word>
 8012e00:	4603      	mov	r3, r0
 8012e02:	461a      	mov	r2, r3
 8012e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e06:	899b      	ldrh	r3, [r3, #12]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d001      	beq.n	8012e10 <find_volume+0x1f4>
 8012e0c:	230d      	movs	r3, #13
 8012e0e:	e181      	b.n	8013114 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	3338      	adds	r3, #56	; 0x38
 8012e14:	3316      	adds	r3, #22
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fe fb96 	bl	8011548 <ld_word>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d106      	bne.n	8012e34 <find_volume+0x218>
 8012e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e28:	3338      	adds	r3, #56	; 0x38
 8012e2a:	3324      	adds	r3, #36	; 0x24
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fe fba3 	bl	8011578 <ld_dword>
 8012e32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e38:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e46:	789b      	ldrb	r3, [r3, #2]
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d005      	beq.n	8012e58 <find_volume+0x23c>
 8012e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4e:	789b      	ldrb	r3, [r3, #2]
 8012e50:	2b02      	cmp	r3, #2
 8012e52:	d001      	beq.n	8012e58 <find_volume+0x23c>
 8012e54:	230d      	movs	r3, #13
 8012e56:	e15d      	b.n	8013114 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5a:	789b      	ldrb	r3, [r3, #2]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e60:	fb02 f303 	mul.w	r3, r2, r3
 8012e64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e74:	895b      	ldrh	r3, [r3, #10]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d008      	beq.n	8012e8c <find_volume+0x270>
 8012e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7c:	895b      	ldrh	r3, [r3, #10]
 8012e7e:	461a      	mov	r2, r3
 8012e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e82:	895b      	ldrh	r3, [r3, #10]
 8012e84:	3b01      	subs	r3, #1
 8012e86:	4013      	ands	r3, r2
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <find_volume+0x274>
 8012e8c:	230d      	movs	r3, #13
 8012e8e:	e141      	b.n	8013114 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e92:	3338      	adds	r3, #56	; 0x38
 8012e94:	3311      	adds	r3, #17
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fe fb56 	bl	8011548 <ld_word>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea6:	891b      	ldrh	r3, [r3, #8]
 8012ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012eaa:	8992      	ldrh	r2, [r2, #12]
 8012eac:	0952      	lsrs	r2, r2, #5
 8012eae:	b292      	uxth	r2, r2
 8012eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012eb4:	fb02 f201 	mul.w	r2, r2, r1
 8012eb8:	1a9b      	subs	r3, r3, r2
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d001      	beq.n	8012ec4 <find_volume+0x2a8>
 8012ec0:	230d      	movs	r3, #13
 8012ec2:	e127      	b.n	8013114 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec6:	3338      	adds	r3, #56	; 0x38
 8012ec8:	3313      	adds	r3, #19
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7fe fb3c 	bl	8011548 <ld_word>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d106      	bne.n	8012ee8 <find_volume+0x2cc>
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	3338      	adds	r3, #56	; 0x38
 8012ede:	3320      	adds	r3, #32
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7fe fb49 	bl	8011578 <ld_dword>
 8012ee6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eea:	3338      	adds	r3, #56	; 0x38
 8012eec:	330e      	adds	r3, #14
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fe fb2a 	bl	8011548 <ld_word>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012ef8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d104      	bne.n	8012f08 <find_volume+0x2ec>
 8012efe:	230d      	movs	r3, #13
 8012f00:	e108      	b.n	8013114 <find_volume+0x4f8>
 8012f02:	bf00      	nop
 8012f04:	200422cc 	.word	0x200422cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012f08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f0c:	4413      	add	r3, r2
 8012f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f10:	8911      	ldrh	r1, [r2, #8]
 8012f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f14:	8992      	ldrh	r2, [r2, #12]
 8012f16:	0952      	lsrs	r2, r2, #5
 8012f18:	b292      	uxth	r2, r2
 8012f1a:	fbb1 f2f2 	udiv	r2, r1, r2
 8012f1e:	b292      	uxth	r2, r2
 8012f20:	4413      	add	r3, r2
 8012f22:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d201      	bcs.n	8012f30 <find_volume+0x314>
 8012f2c:	230d      	movs	r3, #13
 8012f2e:	e0f1      	b.n	8013114 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f34:	1ad3      	subs	r3, r2, r3
 8012f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f38:	8952      	ldrh	r2, [r2, #10]
 8012f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d101      	bne.n	8012f4a <find_volume+0x32e>
 8012f46:	230d      	movs	r3, #13
 8012f48:	e0e4      	b.n	8013114 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012f4a:	2303      	movs	r3, #3
 8012f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f52:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d802      	bhi.n	8012f60 <find_volume+0x344>
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f62:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d802      	bhi.n	8012f70 <find_volume+0x354>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f72:	1c9a      	adds	r2, r3, #2
 8012f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f76:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f7c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012f7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f82:	441a      	add	r2, r3
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012f88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8c:	441a      	add	r2, r3
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012f92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f96:	2b03      	cmp	r3, #3
 8012f98:	d11e      	bne.n	8012fd8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9c:	3338      	adds	r3, #56	; 0x38
 8012f9e:	332a      	adds	r3, #42	; 0x2a
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7fe fad1 	bl	8011548 <ld_word>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d001      	beq.n	8012fb0 <find_volume+0x394>
 8012fac:	230d      	movs	r3, #13
 8012fae:	e0b1      	b.n	8013114 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb2:	891b      	ldrh	r3, [r3, #8]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <find_volume+0x3a0>
 8012fb8:	230d      	movs	r3, #13
 8012fba:	e0ab      	b.n	8013114 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbe:	3338      	adds	r3, #56	; 0x38
 8012fc0:	332c      	adds	r3, #44	; 0x2c
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fe fad8 	bl	8011578 <ld_dword>
 8012fc8:	4602      	mov	r2, r0
 8012fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fcc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd0:	69db      	ldr	r3, [r3, #28]
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8012fd6:	e01f      	b.n	8013018 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fda:	891b      	ldrh	r3, [r3, #8]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d101      	bne.n	8012fe4 <find_volume+0x3c8>
 8012fe0:	230d      	movs	r3, #13
 8012fe2:	e097      	b.n	8013114 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fea:	441a      	add	r2, r3
 8012fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fee:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ff4:	2b02      	cmp	r3, #2
 8012ff6:	d103      	bne.n	8013000 <find_volume+0x3e4>
 8012ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffa:	69db      	ldr	r3, [r3, #28]
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	e00a      	b.n	8013016 <find_volume+0x3fa>
 8013000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013002:	69da      	ldr	r2, [r3, #28]
 8013004:	4613      	mov	r3, r2
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	4413      	add	r3, r2
 801300a:	085a      	lsrs	r2, r3, #1
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	69db      	ldr	r3, [r3, #28]
 8013010:	f003 0301 	and.w	r3, r3, #1
 8013014:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013016:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301a:	6a1a      	ldr	r2, [r3, #32]
 801301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301e:	899b      	ldrh	r3, [r3, #12]
 8013020:	4619      	mov	r1, r3
 8013022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013024:	440b      	add	r3, r1
 8013026:	3b01      	subs	r3, #1
 8013028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801302a:	8989      	ldrh	r1, [r1, #12]
 801302c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013030:	429a      	cmp	r2, r3
 8013032:	d201      	bcs.n	8013038 <find_volume+0x41c>
 8013034:	230d      	movs	r3, #13
 8013036:	e06d      	b.n	8013114 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303a:	f04f 32ff 	mov.w	r2, #4294967295
 801303e:	615a      	str	r2, [r3, #20]
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	695a      	ldr	r2, [r3, #20]
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	2280      	movs	r2, #128	; 0x80
 801304c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801304e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013052:	2b03      	cmp	r3, #3
 8013054:	d149      	bne.n	80130ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013058:	3338      	adds	r3, #56	; 0x38
 801305a:	3330      	adds	r3, #48	; 0x30
 801305c:	4618      	mov	r0, r3
 801305e:	f7fe fa73 	bl	8011548 <ld_word>
 8013062:	4603      	mov	r3, r0
 8013064:	2b01      	cmp	r3, #1
 8013066:	d140      	bne.n	80130ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801306a:	3301      	adds	r3, #1
 801306c:	4619      	mov	r1, r3
 801306e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013070:	f7fe fd1a 	bl	8011aa8 <move_window>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d137      	bne.n	80130ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307c:	2200      	movs	r2, #0
 801307e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013082:	3338      	adds	r3, #56	; 0x38
 8013084:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013088:	4618      	mov	r0, r3
 801308a:	f7fe fa5d 	bl	8011548 <ld_word>
 801308e:	4603      	mov	r3, r0
 8013090:	461a      	mov	r2, r3
 8013092:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013096:	429a      	cmp	r2, r3
 8013098:	d127      	bne.n	80130ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309c:	3338      	adds	r3, #56	; 0x38
 801309e:	4618      	mov	r0, r3
 80130a0:	f7fe fa6a 	bl	8011578 <ld_dword>
 80130a4:	4602      	mov	r2, r0
 80130a6:	4b1d      	ldr	r3, [pc, #116]	; (801311c <find_volume+0x500>)
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d11e      	bne.n	80130ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80130ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ae:	3338      	adds	r3, #56	; 0x38
 80130b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fe fa5f 	bl	8011578 <ld_dword>
 80130ba:	4602      	mov	r2, r0
 80130bc:	4b18      	ldr	r3, [pc, #96]	; (8013120 <find_volume+0x504>)
 80130be:	429a      	cmp	r2, r3
 80130c0:	d113      	bne.n	80130ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	3338      	adds	r3, #56	; 0x38
 80130c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fe fa54 	bl	8011578 <ld_dword>
 80130d0:	4602      	mov	r2, r0
 80130d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d8:	3338      	adds	r3, #56	; 0x38
 80130da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fe fa4a 	bl	8011578 <ld_dword>
 80130e4:	4602      	mov	r2, r0
 80130e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80130ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80130f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80130f2:	4b0c      	ldr	r3, [pc, #48]	; (8013124 <find_volume+0x508>)
 80130f4:	881b      	ldrh	r3, [r3, #0]
 80130f6:	3301      	adds	r3, #1
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	4b0a      	ldr	r3, [pc, #40]	; (8013124 <find_volume+0x508>)
 80130fc:	801a      	strh	r2, [r3, #0]
 80130fe:	4b09      	ldr	r3, [pc, #36]	; (8013124 <find_volume+0x508>)
 8013100:	881a      	ldrh	r2, [r3, #0]
 8013102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013104:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013108:	2200      	movs	r2, #0
 801310a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801310c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801310e:	f7fe fc63 	bl	80119d8 <clear_lock>
#endif
	return FR_OK;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3758      	adds	r7, #88	; 0x58
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	41615252 	.word	0x41615252
 8013120:	61417272 	.word	0x61417272
 8013124:	200422d0 	.word	0x200422d0

08013128 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013132:	2309      	movs	r3, #9
 8013134:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d01c      	beq.n	8013176 <validate+0x4e>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d018      	beq.n	8013176 <validate+0x4e>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d013      	beq.n	8013176 <validate+0x4e>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	889a      	ldrh	r2, [r3, #4]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	88db      	ldrh	r3, [r3, #6]
 8013158:	429a      	cmp	r2, r3
 801315a:	d10c      	bne.n	8013176 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	785b      	ldrb	r3, [r3, #1]
 8013162:	4618      	mov	r0, r3
 8013164:	f7fe f952 	bl	801140c <disk_status>
 8013168:	4603      	mov	r3, r0
 801316a:	f003 0301 	and.w	r3, r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	d101      	bne.n	8013176 <validate+0x4e>
			res = FR_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013176:	7bfb      	ldrb	r3, [r7, #15]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <validate+0x5a>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	e000      	b.n	8013184 <validate+0x5c>
 8013182:	2300      	movs	r3, #0
 8013184:	683a      	ldr	r2, [r7, #0]
 8013186:	6013      	str	r3, [r2, #0]
	return res;
 8013188:	7bfb      	ldrb	r3, [r7, #15]
}
 801318a:	4618      	mov	r0, r3
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
	...

08013194 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b088      	sub	sp, #32
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	4613      	mov	r3, r2
 80131a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80131a6:	f107 0310 	add.w	r3, r7, #16
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fc9b 	bl	8012ae6 <get_ldnumber>
 80131b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	da01      	bge.n	80131bc <f_mount+0x28>
 80131b8:	230b      	movs	r3, #11
 80131ba:	e02b      	b.n	8013214 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80131bc:	4a17      	ldr	r2, [pc, #92]	; (801321c <f_mount+0x88>)
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d005      	beq.n	80131d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80131cc:	69b8      	ldr	r0, [r7, #24]
 80131ce:	f7fe fc03 	bl	80119d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	2200      	movs	r2, #0
 80131d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d002      	beq.n	80131e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2200      	movs	r2, #0
 80131e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80131e4:	68fa      	ldr	r2, [r7, #12]
 80131e6:	490d      	ldr	r1, [pc, #52]	; (801321c <f_mount+0x88>)
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d002      	beq.n	80131fa <f_mount+0x66>
 80131f4:	79fb      	ldrb	r3, [r7, #7]
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d001      	beq.n	80131fe <f_mount+0x6a>
 80131fa:	2300      	movs	r3, #0
 80131fc:	e00a      	b.n	8013214 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80131fe:	f107 010c 	add.w	r1, r7, #12
 8013202:	f107 0308 	add.w	r3, r7, #8
 8013206:	2200      	movs	r2, #0
 8013208:	4618      	mov	r0, r3
 801320a:	f7ff fd07 	bl	8012c1c <find_volume>
 801320e:	4603      	mov	r3, r0
 8013210:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013212:	7dfb      	ldrb	r3, [r7, #23]
}
 8013214:	4618      	mov	r0, r3
 8013216:	3720      	adds	r7, #32
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	200422cc 	.word	0x200422cc

08013220 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b098      	sub	sp, #96	; 0x60
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	4613      	mov	r3, r2
 801322c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d101      	bne.n	8013238 <f_open+0x18>
 8013234:	2309      	movs	r3, #9
 8013236:	e1ba      	b.n	80135ae <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013238:	79fb      	ldrb	r3, [r7, #7]
 801323a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801323e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013240:	79fa      	ldrb	r2, [r7, #7]
 8013242:	f107 0110 	add.w	r1, r7, #16
 8013246:	f107 0308 	add.w	r3, r7, #8
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff fce6 	bl	8012c1c <find_volume>
 8013250:	4603      	mov	r3, r0
 8013252:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801325a:	2b00      	cmp	r3, #0
 801325c:	f040 819e 	bne.w	801359c <f_open+0x37c>
		dj.obj.fs = fs;
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	f107 0314 	add.w	r3, r7, #20
 801326a:	4611      	mov	r1, r2
 801326c:	4618      	mov	r0, r3
 801326e:	f7ff fba5 	bl	80129bc <follow_path>
 8013272:	4603      	mov	r3, r0
 8013274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801327c:	2b00      	cmp	r3, #0
 801327e:	d11a      	bne.n	80132b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013280:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013284:	b25b      	sxtb	r3, r3
 8013286:	2b00      	cmp	r3, #0
 8013288:	da03      	bge.n	8013292 <f_open+0x72>
				res = FR_INVALID_NAME;
 801328a:	2306      	movs	r3, #6
 801328c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013290:	e011      	b.n	80132b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013292:	79fb      	ldrb	r3, [r7, #7]
 8013294:	f023 0301 	bic.w	r3, r3, #1
 8013298:	2b00      	cmp	r3, #0
 801329a:	bf14      	ite	ne
 801329c:	2301      	movne	r3, #1
 801329e:	2300      	moveq	r3, #0
 80132a0:	b2db      	uxtb	r3, r3
 80132a2:	461a      	mov	r2, r3
 80132a4:	f107 0314 	add.w	r3, r7, #20
 80132a8:	4611      	mov	r1, r2
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fe fa4c 	bl	8011748 <chk_lock>
 80132b0:	4603      	mov	r3, r0
 80132b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80132b6:	79fb      	ldrb	r3, [r7, #7]
 80132b8:	f003 031c 	and.w	r3, r3, #28
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d07e      	beq.n	80133be <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80132c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d017      	beq.n	80132f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80132c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132cc:	2b04      	cmp	r3, #4
 80132ce:	d10e      	bne.n	80132ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80132d0:	f7fe fa96 	bl	8011800 <enq_lock>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d006      	beq.n	80132e8 <f_open+0xc8>
 80132da:	f107 0314 	add.w	r3, r7, #20
 80132de:	4618      	mov	r0, r3
 80132e0:	f7ff fa52 	bl	8012788 <dir_register>
 80132e4:	4603      	mov	r3, r0
 80132e6:	e000      	b.n	80132ea <f_open+0xca>
 80132e8:	2312      	movs	r3, #18
 80132ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80132ee:	79fb      	ldrb	r3, [r7, #7]
 80132f0:	f043 0308 	orr.w	r3, r3, #8
 80132f4:	71fb      	strb	r3, [r7, #7]
 80132f6:	e010      	b.n	801331a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80132f8:	7ebb      	ldrb	r3, [r7, #26]
 80132fa:	f003 0311 	and.w	r3, r3, #17
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d003      	beq.n	801330a <f_open+0xea>
					res = FR_DENIED;
 8013302:	2307      	movs	r3, #7
 8013304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013308:	e007      	b.n	801331a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	f003 0304 	and.w	r3, r3, #4
 8013310:	2b00      	cmp	r3, #0
 8013312:	d002      	beq.n	801331a <f_open+0xfa>
 8013314:	2308      	movs	r3, #8
 8013316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801331a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801331e:	2b00      	cmp	r3, #0
 8013320:	d167      	bne.n	80133f2 <f_open+0x1d2>
 8013322:	79fb      	ldrb	r3, [r7, #7]
 8013324:	f003 0308 	and.w	r3, r3, #8
 8013328:	2b00      	cmp	r3, #0
 801332a:	d062      	beq.n	80133f2 <f_open+0x1d2>
				dw = GET_FATTIME();
 801332c:	4ba2      	ldr	r3, [pc, #648]	; (80135b8 <f_open+0x398>)
 801332e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013332:	330e      	adds	r3, #14
 8013334:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013336:	4618      	mov	r0, r3
 8013338:	f7fe f95c 	bl	80115f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801333c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333e:	3316      	adds	r3, #22
 8013340:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013342:	4618      	mov	r0, r3
 8013344:	f7fe f956 	bl	80115f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801334a:	330b      	adds	r3, #11
 801334c:	2220      	movs	r2, #32
 801334e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f7ff f925 	bl	80125a6 <ld_clust>
 801335c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013362:	2200      	movs	r2, #0
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff f93d 	bl	80125e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801336c:	331c      	adds	r3, #28
 801336e:	2100      	movs	r1, #0
 8013370:	4618      	mov	r0, r3
 8013372:	f7fe f93f 	bl	80115f4 <st_dword>
					fs->wflag = 1;
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	2201      	movs	r2, #1
 801337a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801337c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801337e:	2b00      	cmp	r3, #0
 8013380:	d037      	beq.n	80133f2 <f_open+0x1d2>
						dw = fs->winsect;
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013386:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013388:	f107 0314 	add.w	r3, r7, #20
 801338c:	2200      	movs	r2, #0
 801338e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013390:	4618      	mov	r0, r3
 8013392:	f7fe fe2d 	bl	8011ff0 <remove_chain>
 8013396:	4603      	mov	r3, r0
 8013398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801339c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d126      	bne.n	80133f2 <f_open+0x1d2>
							res = move_window(fs, dw);
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fe fb7d 	bl	8011aa8 <move_window>
 80133ae:	4603      	mov	r3, r0
 80133b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80133b8:	3a01      	subs	r2, #1
 80133ba:	611a      	str	r2, [r3, #16]
 80133bc:	e019      	b.n	80133f2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80133be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d115      	bne.n	80133f2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80133c6:	7ebb      	ldrb	r3, [r7, #26]
 80133c8:	f003 0310 	and.w	r3, r3, #16
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d003      	beq.n	80133d8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80133d0:	2304      	movs	r3, #4
 80133d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80133d6:	e00c      	b.n	80133f2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80133d8:	79fb      	ldrb	r3, [r7, #7]
 80133da:	f003 0302 	and.w	r3, r3, #2
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d007      	beq.n	80133f2 <f_open+0x1d2>
 80133e2:	7ebb      	ldrb	r3, [r7, #26]
 80133e4:	f003 0301 	and.w	r3, r3, #1
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d002      	beq.n	80133f2 <f_open+0x1d2>
						res = FR_DENIED;
 80133ec:	2307      	movs	r3, #7
 80133ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80133f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d128      	bne.n	801344c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80133fa:	79fb      	ldrb	r3, [r7, #7]
 80133fc:	f003 0308 	and.w	r3, r3, #8
 8013400:	2b00      	cmp	r3, #0
 8013402:	d003      	beq.n	801340c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013404:	79fb      	ldrb	r3, [r7, #7]
 8013406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801340a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801341a:	79fb      	ldrb	r3, [r7, #7]
 801341c:	f023 0301 	bic.w	r3, r3, #1
 8013420:	2b00      	cmp	r3, #0
 8013422:	bf14      	ite	ne
 8013424:	2301      	movne	r3, #1
 8013426:	2300      	moveq	r3, #0
 8013428:	b2db      	uxtb	r3, r3
 801342a:	461a      	mov	r2, r3
 801342c:	f107 0314 	add.w	r3, r7, #20
 8013430:	4611      	mov	r1, r2
 8013432:	4618      	mov	r0, r3
 8013434:	f7fe fa06 	bl	8011844 <inc_lock>
 8013438:	4602      	mov	r2, r0
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d102      	bne.n	801344c <f_open+0x22c>
 8013446:	2302      	movs	r3, #2
 8013448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801344c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013450:	2b00      	cmp	r3, #0
 8013452:	f040 80a3 	bne.w	801359c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801345a:	4611      	mov	r1, r2
 801345c:	4618      	mov	r0, r3
 801345e:	f7ff f8a2 	bl	80125a6 <ld_clust>
 8013462:	4602      	mov	r2, r0
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346a:	331c      	adds	r3, #28
 801346c:	4618      	mov	r0, r3
 801346e:	f7fe f883 	bl	8011578 <ld_dword>
 8013472:	4602      	mov	r2, r0
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2200      	movs	r2, #0
 801347c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801347e:	693a      	ldr	r2, [r7, #16]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	88da      	ldrh	r2, [r3, #6]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	79fa      	ldrb	r2, [r7, #7]
 8013490:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2200      	movs	r2, #0
 8013496:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	2200      	movs	r2, #0
 801349c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2200      	movs	r2, #0
 80134a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	3330      	adds	r3, #48	; 0x30
 80134a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80134ac:	2100      	movs	r1, #0
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fe f8ed 	bl	801168e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80134b4:	79fb      	ldrb	r3, [r7, #7]
 80134b6:	f003 0320 	and.w	r3, r3, #32
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d06e      	beq.n	801359c <f_open+0x37c>
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d06a      	beq.n	801359c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	68da      	ldr	r2, [r3, #12]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	895b      	ldrh	r3, [r3, #10]
 80134d2:	461a      	mov	r2, r3
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	899b      	ldrh	r3, [r3, #12]
 80134d8:	fb03 f302 	mul.w	r3, r3, r2
 80134dc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	689b      	ldr	r3, [r3, #8]
 80134e2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	657b      	str	r3, [r7, #84]	; 0x54
 80134ea:	e016      	b.n	801351a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7fe fb96 	bl	8011c22 <get_fat>
 80134f6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80134f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	d802      	bhi.n	8013504 <f_open+0x2e4>
 80134fe:	2302      	movs	r3, #2
 8013500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801350a:	d102      	bne.n	8013512 <f_open+0x2f2>
 801350c:	2301      	movs	r3, #1
 801350e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013512:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	657b      	str	r3, [r7, #84]	; 0x54
 801351a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801351e:	2b00      	cmp	r3, #0
 8013520:	d103      	bne.n	801352a <f_open+0x30a>
 8013522:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013526:	429a      	cmp	r2, r3
 8013528:	d8e0      	bhi.n	80134ec <f_open+0x2cc>
				}
				fp->clust = clst;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801352e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013534:	2b00      	cmp	r3, #0
 8013536:	d131      	bne.n	801359c <f_open+0x37c>
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	899b      	ldrh	r3, [r3, #12]
 801353c:	461a      	mov	r2, r3
 801353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013540:	fbb3 f1f2 	udiv	r1, r3, r2
 8013544:	fb02 f201 	mul.w	r2, r2, r1
 8013548:	1a9b      	subs	r3, r3, r2
 801354a:	2b00      	cmp	r3, #0
 801354c:	d026      	beq.n	801359c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe fb46 	bl	8011be4 <clust2sect>
 8013558:	6478      	str	r0, [r7, #68]	; 0x44
 801355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801355c:	2b00      	cmp	r3, #0
 801355e:	d103      	bne.n	8013568 <f_open+0x348>
						res = FR_INT_ERR;
 8013560:	2302      	movs	r3, #2
 8013562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013566:	e019      	b.n	801359c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	899b      	ldrh	r3, [r3, #12]
 801356c:	461a      	mov	r2, r3
 801356e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013570:	fbb3 f2f2 	udiv	r2, r3, r2
 8013574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013576:	441a      	add	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801357c:	693b      	ldr	r3, [r7, #16]
 801357e:	7858      	ldrb	r0, [r3, #1]
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	6a1a      	ldr	r2, [r3, #32]
 801358a:	2301      	movs	r3, #1
 801358c:	f7fd ff7e 	bl	801148c <disk_read>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d002      	beq.n	801359c <f_open+0x37c>
 8013596:	2301      	movs	r3, #1
 8013598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801359c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d002      	beq.n	80135aa <f_open+0x38a>
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2200      	movs	r2, #0
 80135a8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80135aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3760      	adds	r7, #96	; 0x60
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	274a0000 	.word	0x274a0000

080135bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b08e      	sub	sp, #56	; 0x38
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
 80135c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	2200      	movs	r2, #0
 80135d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f107 0214 	add.w	r2, r7, #20
 80135da:	4611      	mov	r1, r2
 80135dc:	4618      	mov	r0, r3
 80135de:	f7ff fda3 	bl	8013128 <validate>
 80135e2:	4603      	mov	r3, r0
 80135e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80135e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d107      	bne.n	8013600 <f_read+0x44>
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	7d5b      	ldrb	r3, [r3, #21]
 80135f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80135f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d002      	beq.n	8013606 <f_read+0x4a>
 8013600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013604:	e135      	b.n	8013872 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	7d1b      	ldrb	r3, [r3, #20]
 801360a:	f003 0301 	and.w	r3, r3, #1
 801360e:	2b00      	cmp	r3, #0
 8013610:	d101      	bne.n	8013616 <f_read+0x5a>
 8013612:	2307      	movs	r3, #7
 8013614:	e12d      	b.n	8013872 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	68da      	ldr	r2, [r3, #12]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	699b      	ldr	r3, [r3, #24]
 801361e:	1ad3      	subs	r3, r2, r3
 8013620:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	6a3b      	ldr	r3, [r7, #32]
 8013626:	429a      	cmp	r2, r3
 8013628:	f240 811e 	bls.w	8013868 <f_read+0x2ac>
 801362c:	6a3b      	ldr	r3, [r7, #32]
 801362e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013630:	e11a      	b.n	8013868 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	699b      	ldr	r3, [r3, #24]
 8013636:	697a      	ldr	r2, [r7, #20]
 8013638:	8992      	ldrh	r2, [r2, #12]
 801363a:	fbb3 f1f2 	udiv	r1, r3, r2
 801363e:	fb02 f201 	mul.w	r2, r2, r1
 8013642:	1a9b      	subs	r3, r3, r2
 8013644:	2b00      	cmp	r3, #0
 8013646:	f040 80d5 	bne.w	80137f4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	699b      	ldr	r3, [r3, #24]
 801364e:	697a      	ldr	r2, [r7, #20]
 8013650:	8992      	ldrh	r2, [r2, #12]
 8013652:	fbb3 f3f2 	udiv	r3, r3, r2
 8013656:	697a      	ldr	r2, [r7, #20]
 8013658:	8952      	ldrh	r2, [r2, #10]
 801365a:	3a01      	subs	r2, #1
 801365c:	4013      	ands	r3, r2
 801365e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d12f      	bne.n	80136c6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	699b      	ldr	r3, [r3, #24]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d103      	bne.n	8013676 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	633b      	str	r3, [r7, #48]	; 0x30
 8013674:	e013      	b.n	801369e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367a:	2b00      	cmp	r3, #0
 801367c:	d007      	beq.n	801368e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	699b      	ldr	r3, [r3, #24]
 8013682:	4619      	mov	r1, r3
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	f7fe fdb0 	bl	80121ea <clmt_clust>
 801368a:	6338      	str	r0, [r7, #48]	; 0x30
 801368c:	e007      	b.n	801369e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801368e:	68fa      	ldr	r2, [r7, #12]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	69db      	ldr	r3, [r3, #28]
 8013694:	4619      	mov	r1, r3
 8013696:	4610      	mov	r0, r2
 8013698:	f7fe fac3 	bl	8011c22 <get_fat>
 801369c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	d804      	bhi.n	80136ae <f_read+0xf2>
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	2202      	movs	r2, #2
 80136a8:	755a      	strb	r2, [r3, #21]
 80136aa:	2302      	movs	r3, #2
 80136ac:	e0e1      	b.n	8013872 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80136ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136b4:	d104      	bne.n	80136c0 <f_read+0x104>
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2201      	movs	r2, #1
 80136ba:	755a      	strb	r2, [r3, #21]
 80136bc:	2301      	movs	r3, #1
 80136be:	e0d8      	b.n	8013872 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80136c6:	697a      	ldr	r2, [r7, #20]
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	69db      	ldr	r3, [r3, #28]
 80136cc:	4619      	mov	r1, r3
 80136ce:	4610      	mov	r0, r2
 80136d0:	f7fe fa88 	bl	8011be4 <clust2sect>
 80136d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d104      	bne.n	80136e6 <f_read+0x12a>
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2202      	movs	r2, #2
 80136e0:	755a      	strb	r2, [r3, #21]
 80136e2:	2302      	movs	r3, #2
 80136e4:	e0c5      	b.n	8013872 <f_read+0x2b6>
			sect += csect;
 80136e6:	69ba      	ldr	r2, [r7, #24]
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	4413      	add	r3, r2
 80136ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	899b      	ldrh	r3, [r3, #12]
 80136f2:	461a      	mov	r2, r3
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80136fa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d041      	beq.n	8013786 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013702:	69fa      	ldr	r2, [r7, #28]
 8013704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013706:	4413      	add	r3, r2
 8013708:	697a      	ldr	r2, [r7, #20]
 801370a:	8952      	ldrh	r2, [r2, #10]
 801370c:	4293      	cmp	r3, r2
 801370e:	d905      	bls.n	801371c <f_read+0x160>
					cc = fs->csize - csect;
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	895b      	ldrh	r3, [r3, #10]
 8013714:	461a      	mov	r2, r3
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	1ad3      	subs	r3, r2, r3
 801371a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	7858      	ldrb	r0, [r3, #1]
 8013720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013722:	69ba      	ldr	r2, [r7, #24]
 8013724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013726:	f7fd feb1 	bl	801148c <disk_read>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d004      	beq.n	801373a <f_read+0x17e>
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2201      	movs	r2, #1
 8013734:	755a      	strb	r2, [r3, #21]
 8013736:	2301      	movs	r3, #1
 8013738:	e09b      	b.n	8013872 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	7d1b      	ldrb	r3, [r3, #20]
 801373e:	b25b      	sxtb	r3, r3
 8013740:	2b00      	cmp	r3, #0
 8013742:	da18      	bge.n	8013776 <f_read+0x1ba>
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	6a1a      	ldr	r2, [r3, #32]
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	1ad3      	subs	r3, r2, r3
 801374c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801374e:	429a      	cmp	r2, r3
 8013750:	d911      	bls.n	8013776 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	6a1a      	ldr	r2, [r3, #32]
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	1ad3      	subs	r3, r2, r3
 801375a:	697a      	ldr	r2, [r7, #20]
 801375c:	8992      	ldrh	r2, [r2, #12]
 801375e:	fb02 f303 	mul.w	r3, r2, r3
 8013762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013764:	18d0      	adds	r0, r2, r3
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	899b      	ldrh	r3, [r3, #12]
 8013770:	461a      	mov	r2, r3
 8013772:	f7fd ff6b 	bl	801164c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	899b      	ldrh	r3, [r3, #12]
 801377a:	461a      	mov	r2, r3
 801377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377e:	fb02 f303 	mul.w	r3, r2, r3
 8013782:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013784:	e05c      	b.n	8013840 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	6a1b      	ldr	r3, [r3, #32]
 801378a:	69ba      	ldr	r2, [r7, #24]
 801378c:	429a      	cmp	r2, r3
 801378e:	d02e      	beq.n	80137ee <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	7d1b      	ldrb	r3, [r3, #20]
 8013794:	b25b      	sxtb	r3, r3
 8013796:	2b00      	cmp	r3, #0
 8013798:	da18      	bge.n	80137cc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	7858      	ldrb	r0, [r3, #1]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6a1a      	ldr	r2, [r3, #32]
 80137a8:	2301      	movs	r3, #1
 80137aa:	f7fd fe8f 	bl	80114cc <disk_write>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d004      	beq.n	80137be <f_read+0x202>
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2201      	movs	r2, #1
 80137b8:	755a      	strb	r2, [r3, #21]
 80137ba:	2301      	movs	r3, #1
 80137bc:	e059      	b.n	8013872 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	7d1b      	ldrb	r3, [r3, #20]
 80137c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	7858      	ldrb	r0, [r3, #1]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137d6:	2301      	movs	r3, #1
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	f7fd fe57 	bl	801148c <disk_read>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d004      	beq.n	80137ee <f_read+0x232>
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2201      	movs	r2, #1
 80137e8:	755a      	strb	r2, [r3, #21]
 80137ea:	2301      	movs	r3, #1
 80137ec:	e041      	b.n	8013872 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	69ba      	ldr	r2, [r7, #24]
 80137f2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	899b      	ldrh	r3, [r3, #12]
 80137f8:	4618      	mov	r0, r3
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	699b      	ldr	r3, [r3, #24]
 80137fe:	697a      	ldr	r2, [r7, #20]
 8013800:	8992      	ldrh	r2, [r2, #12]
 8013802:	fbb3 f1f2 	udiv	r1, r3, r2
 8013806:	fb02 f201 	mul.w	r2, r2, r1
 801380a:	1a9b      	subs	r3, r3, r2
 801380c:	1ac3      	subs	r3, r0, r3
 801380e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	429a      	cmp	r2, r3
 8013816:	d901      	bls.n	801381c <f_read+0x260>
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	699b      	ldr	r3, [r3, #24]
 8013826:	697a      	ldr	r2, [r7, #20]
 8013828:	8992      	ldrh	r2, [r2, #12]
 801382a:	fbb3 f0f2 	udiv	r0, r3, r2
 801382e:	fb02 f200 	mul.w	r2, r2, r0
 8013832:	1a9b      	subs	r3, r3, r2
 8013834:	440b      	add	r3, r1
 8013836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013838:	4619      	mov	r1, r3
 801383a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801383c:	f7fd ff06 	bl	801164c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013844:	4413      	add	r3, r2
 8013846:	627b      	str	r3, [r7, #36]	; 0x24
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	699a      	ldr	r2, [r3, #24]
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384e:	441a      	add	r2, r3
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	619a      	str	r2, [r3, #24]
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	681a      	ldr	r2, [r3, #0]
 8013858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385a:	441a      	add	r2, r3
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013864:	1ad3      	subs	r3, r2, r3
 8013866:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2b00      	cmp	r3, #0
 801386c:	f47f aee1 	bne.w	8013632 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013870:	2300      	movs	r3, #0
}
 8013872:	4618      	mov	r0, r3
 8013874:	3738      	adds	r7, #56	; 0x38
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801387a:	b580      	push	{r7, lr}
 801387c:	b08c      	sub	sp, #48	; 0x30
 801387e:	af00      	add	r7, sp, #0
 8013880:	60f8      	str	r0, [r7, #12]
 8013882:	60b9      	str	r1, [r7, #8]
 8013884:	607a      	str	r2, [r7, #4]
 8013886:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	2200      	movs	r2, #0
 8013890:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f107 0210 	add.w	r2, r7, #16
 8013898:	4611      	mov	r1, r2
 801389a:	4618      	mov	r0, r3
 801389c:	f7ff fc44 	bl	8013128 <validate>
 80138a0:	4603      	mov	r3, r0
 80138a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80138a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d107      	bne.n	80138be <f_write+0x44>
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	7d5b      	ldrb	r3, [r3, #21]
 80138b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80138b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d002      	beq.n	80138c4 <f_write+0x4a>
 80138be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138c2:	e16a      	b.n	8013b9a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	7d1b      	ldrb	r3, [r3, #20]
 80138c8:	f003 0302 	and.w	r3, r3, #2
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d101      	bne.n	80138d4 <f_write+0x5a>
 80138d0:	2307      	movs	r3, #7
 80138d2:	e162      	b.n	8013b9a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	699a      	ldr	r2, [r3, #24]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	441a      	add	r2, r3
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	699b      	ldr	r3, [r3, #24]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	f080 814c 	bcs.w	8013b7e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	699b      	ldr	r3, [r3, #24]
 80138ea:	43db      	mvns	r3, r3
 80138ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80138ee:	e146      	b.n	8013b7e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	699b      	ldr	r3, [r3, #24]
 80138f4:	693a      	ldr	r2, [r7, #16]
 80138f6:	8992      	ldrh	r2, [r2, #12]
 80138f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80138fc:	fb02 f201 	mul.w	r2, r2, r1
 8013900:	1a9b      	subs	r3, r3, r2
 8013902:	2b00      	cmp	r3, #0
 8013904:	f040 80f1 	bne.w	8013aea <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	699b      	ldr	r3, [r3, #24]
 801390c:	693a      	ldr	r2, [r7, #16]
 801390e:	8992      	ldrh	r2, [r2, #12]
 8013910:	fbb3 f3f2 	udiv	r3, r3, r2
 8013914:	693a      	ldr	r2, [r7, #16]
 8013916:	8952      	ldrh	r2, [r2, #10]
 8013918:	3a01      	subs	r2, #1
 801391a:	4013      	ands	r3, r2
 801391c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d143      	bne.n	80139ac <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	699b      	ldr	r3, [r3, #24]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10c      	bne.n	8013946 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013934:	2b00      	cmp	r3, #0
 8013936:	d11a      	bne.n	801396e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2100      	movs	r1, #0
 801393c:	4618      	mov	r0, r3
 801393e:	f7fe fbbc 	bl	80120ba <create_chain>
 8013942:	62b8      	str	r0, [r7, #40]	; 0x28
 8013944:	e013      	b.n	801396e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394a:	2b00      	cmp	r3, #0
 801394c:	d007      	beq.n	801395e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	699b      	ldr	r3, [r3, #24]
 8013952:	4619      	mov	r1, r3
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f7fe fc48 	bl	80121ea <clmt_clust>
 801395a:	62b8      	str	r0, [r7, #40]	; 0x28
 801395c:	e007      	b.n	801396e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801395e:	68fa      	ldr	r2, [r7, #12]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	4619      	mov	r1, r3
 8013966:	4610      	mov	r0, r2
 8013968:	f7fe fba7 	bl	80120ba <create_chain>
 801396c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013970:	2b00      	cmp	r3, #0
 8013972:	f000 8109 	beq.w	8013b88 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013978:	2b01      	cmp	r3, #1
 801397a:	d104      	bne.n	8013986 <f_write+0x10c>
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2202      	movs	r2, #2
 8013980:	755a      	strb	r2, [r3, #21]
 8013982:	2302      	movs	r3, #2
 8013984:	e109      	b.n	8013b9a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801398c:	d104      	bne.n	8013998 <f_write+0x11e>
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2201      	movs	r2, #1
 8013992:	755a      	strb	r2, [r3, #21]
 8013994:	2301      	movs	r3, #1
 8013996:	e100      	b.n	8013b9a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801399c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	689b      	ldr	r3, [r3, #8]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d102      	bne.n	80139ac <f_write+0x132>
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	7d1b      	ldrb	r3, [r3, #20]
 80139b0:	b25b      	sxtb	r3, r3
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	da18      	bge.n	80139e8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	7858      	ldrb	r0, [r3, #1]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	6a1a      	ldr	r2, [r3, #32]
 80139c4:	2301      	movs	r3, #1
 80139c6:	f7fd fd81 	bl	80114cc <disk_write>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d004      	beq.n	80139da <f_write+0x160>
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2201      	movs	r2, #1
 80139d4:	755a      	strb	r2, [r3, #21]
 80139d6:	2301      	movs	r3, #1
 80139d8:	e0df      	b.n	8013b9a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	7d1b      	ldrb	r3, [r3, #20]
 80139de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139e2:	b2da      	uxtb	r2, r3
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80139e8:	693a      	ldr	r2, [r7, #16]
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	4619      	mov	r1, r3
 80139f0:	4610      	mov	r0, r2
 80139f2:	f7fe f8f7 	bl	8011be4 <clust2sect>
 80139f6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d104      	bne.n	8013a08 <f_write+0x18e>
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2202      	movs	r2, #2
 8013a02:	755a      	strb	r2, [r3, #21]
 8013a04:	2302      	movs	r3, #2
 8013a06:	e0c8      	b.n	8013b9a <f_write+0x320>
			sect += csect;
 8013a08:	697a      	ldr	r2, [r7, #20]
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	899b      	ldrh	r3, [r3, #12]
 8013a14:	461a      	mov	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a1c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013a1e:	6a3b      	ldr	r3, [r7, #32]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d043      	beq.n	8013aac <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013a24:	69ba      	ldr	r2, [r7, #24]
 8013a26:	6a3b      	ldr	r3, [r7, #32]
 8013a28:	4413      	add	r3, r2
 8013a2a:	693a      	ldr	r2, [r7, #16]
 8013a2c:	8952      	ldrh	r2, [r2, #10]
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	d905      	bls.n	8013a3e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	895b      	ldrh	r3, [r3, #10]
 8013a36:	461a      	mov	r2, r3
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	7858      	ldrb	r0, [r3, #1]
 8013a42:	6a3b      	ldr	r3, [r7, #32]
 8013a44:	697a      	ldr	r2, [r7, #20]
 8013a46:	69f9      	ldr	r1, [r7, #28]
 8013a48:	f7fd fd40 	bl	80114cc <disk_write>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d004      	beq.n	8013a5c <f_write+0x1e2>
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2201      	movs	r2, #1
 8013a56:	755a      	strb	r2, [r3, #21]
 8013a58:	2301      	movs	r3, #1
 8013a5a:	e09e      	b.n	8013b9a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6a1a      	ldr	r2, [r3, #32]
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	6a3a      	ldr	r2, [r7, #32]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d918      	bls.n	8013a9c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	6a1a      	ldr	r2, [r3, #32]
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	1ad3      	subs	r3, r2, r3
 8013a78:	693a      	ldr	r2, [r7, #16]
 8013a7a:	8992      	ldrh	r2, [r2, #12]
 8013a7c:	fb02 f303 	mul.w	r3, r2, r3
 8013a80:	69fa      	ldr	r2, [r7, #28]
 8013a82:	18d1      	adds	r1, r2, r3
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	899b      	ldrh	r3, [r3, #12]
 8013a88:	461a      	mov	r2, r3
 8013a8a:	f7fd fddf 	bl	801164c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	7d1b      	ldrb	r3, [r3, #20]
 8013a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a96:	b2da      	uxtb	r2, r3
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	899b      	ldrh	r3, [r3, #12]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	fb02 f303 	mul.w	r3, r2, r3
 8013aa8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013aaa:	e04b      	b.n	8013b44 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6a1b      	ldr	r3, [r3, #32]
 8013ab0:	697a      	ldr	r2, [r7, #20]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d016      	beq.n	8013ae4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	699a      	ldr	r2, [r3, #24]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d210      	bcs.n	8013ae4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	7858      	ldrb	r0, [r3, #1]
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013acc:	2301      	movs	r3, #1
 8013ace:	697a      	ldr	r2, [r7, #20]
 8013ad0:	f7fd fcdc 	bl	801148c <disk_read>
 8013ad4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d004      	beq.n	8013ae4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2201      	movs	r2, #1
 8013ade:	755a      	strb	r2, [r3, #21]
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	e05a      	b.n	8013b9a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	899b      	ldrh	r3, [r3, #12]
 8013aee:	4618      	mov	r0, r3
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	699b      	ldr	r3, [r3, #24]
 8013af4:	693a      	ldr	r2, [r7, #16]
 8013af6:	8992      	ldrh	r2, [r2, #12]
 8013af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013afc:	fb02 f201 	mul.w	r2, r2, r1
 8013b00:	1a9b      	subs	r3, r3, r2
 8013b02:	1ac3      	subs	r3, r0, r3
 8013b04:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d901      	bls.n	8013b12 <f_write+0x298>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	699b      	ldr	r3, [r3, #24]
 8013b1c:	693a      	ldr	r2, [r7, #16]
 8013b1e:	8992      	ldrh	r2, [r2, #12]
 8013b20:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b24:	fb02 f200 	mul.w	r2, r2, r0
 8013b28:	1a9b      	subs	r3, r3, r2
 8013b2a:	440b      	add	r3, r1
 8013b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b2e:	69f9      	ldr	r1, [r7, #28]
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7fd fd8b 	bl	801164c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	7d1b      	ldrb	r3, [r3, #20]
 8013b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b3e:	b2da      	uxtb	r2, r3
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013b44:	69fa      	ldr	r2, [r7, #28]
 8013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b48:	4413      	add	r3, r2
 8013b4a:	61fb      	str	r3, [r7, #28]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	699a      	ldr	r2, [r3, #24]
 8013b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b52:	441a      	add	r2, r3
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	619a      	str	r2, [r3, #24]
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	68da      	ldr	r2, [r3, #12]
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	699b      	ldr	r3, [r3, #24]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	bf38      	it	cc
 8013b64:	461a      	movcc	r2, r3
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	60da      	str	r2, [r3, #12]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b70:	441a      	add	r2, r3
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	601a      	str	r2, [r3, #0]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	f47f aeb5 	bne.w	80138f0 <f_write+0x76>
 8013b86:	e000      	b.n	8013b8a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b88:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	7d1b      	ldrb	r3, [r3, #20]
 8013b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b92:	b2da      	uxtb	r2, r3
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3730      	adds	r7, #48	; 0x30
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
	...

08013ba4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f107 0208 	add.w	r2, r7, #8
 8013bb2:	4611      	mov	r1, r2
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7ff fab7 	bl	8013128 <validate>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013bbe:	7dfb      	ldrb	r3, [r7, #23]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d167      	bne.n	8013c94 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d061      	beq.n	8013c94 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	7d1b      	ldrb	r3, [r3, #20]
 8013bd4:	b25b      	sxtb	r3, r3
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	da15      	bge.n	8013c06 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	7858      	ldrb	r0, [r3, #1]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6a1a      	ldr	r2, [r3, #32]
 8013be8:	2301      	movs	r3, #1
 8013bea:	f7fd fc6f 	bl	80114cc <disk_write>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d001      	beq.n	8013bf8 <f_sync+0x54>
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	e04e      	b.n	8013c96 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	7d1b      	ldrb	r3, [r3, #20]
 8013bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c00:	b2da      	uxtb	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c06:	4b26      	ldr	r3, [pc, #152]	; (8013ca0 <f_sync+0xfc>)
 8013c08:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013c0a:	68ba      	ldr	r2, [r7, #8]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c10:	4619      	mov	r1, r3
 8013c12:	4610      	mov	r0, r2
 8013c14:	f7fd ff48 	bl	8011aa8 <move_window>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013c1c:	7dfb      	ldrb	r3, [r7, #23]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d138      	bne.n	8013c94 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	330b      	adds	r3, #11
 8013c2c:	781a      	ldrb	r2, [r3, #0]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	330b      	adds	r3, #11
 8013c32:	f042 0220 	orr.w	r2, r2, #32
 8013c36:	b2d2      	uxtb	r2, r2
 8013c38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6818      	ldr	r0, [r3, #0]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	689b      	ldr	r3, [r3, #8]
 8013c42:	461a      	mov	r2, r3
 8013c44:	68f9      	ldr	r1, [r7, #12]
 8013c46:	f7fe fccd 	bl	80125e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f103 021c 	add.w	r2, r3, #28
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	4619      	mov	r1, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	f7fd fccc 	bl	80115f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	3316      	adds	r3, #22
 8013c60:	6939      	ldr	r1, [r7, #16]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7fd fcc6 	bl	80115f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	3312      	adds	r3, #18
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7fd fca5 	bl	80115be <st_word>
					fs->wflag = 1;
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	2201      	movs	r2, #1
 8013c78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7fd ff41 	bl	8011b04 <sync_fs>
 8013c82:	4603      	mov	r3, r0
 8013c84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	7d1b      	ldrb	r3, [r3, #20]
 8013c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c8e:	b2da      	uxtb	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3718      	adds	r7, #24
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	274a0000 	.word	0x274a0000

08013ca4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b084      	sub	sp, #16
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f7ff ff79 	bl	8013ba4 <f_sync>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013cb6:	7bfb      	ldrb	r3, [r7, #15]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d118      	bne.n	8013cee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f107 0208 	add.w	r2, r7, #8
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7ff fa2f 	bl	8013128 <validate>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013cce:	7bfb      	ldrb	r3, [r7, #15]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d10c      	bne.n	8013cee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	691b      	ldr	r3, [r3, #16]
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fd fe41 	bl	8011960 <dec_lock>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013ce2:	7bfb      	ldrb	r3, [r7, #15]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d102      	bne.n	8013cee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2200      	movs	r2, #0
 8013cec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3710      	adds	r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013cf8:	b590      	push	{r4, r7, lr}
 8013cfa:	b091      	sub	sp, #68	; 0x44
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013d00:	f107 0108 	add.w	r1, r7, #8
 8013d04:	1d3b      	adds	r3, r7, #4
 8013d06:	2200      	movs	r2, #0
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7fe ff87 	bl	8012c1c <find_volume>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013d14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d131      	bne.n	8013d80 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013d20:	687a      	ldr	r2, [r7, #4]
 8013d22:	f107 030c 	add.w	r3, r7, #12
 8013d26:	4611      	mov	r1, r2
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fe fe47 	bl	80129bc <follow_path>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013d34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d11a      	bne.n	8013d72 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013d40:	b25b      	sxtb	r3, r3
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	da03      	bge.n	8013d4e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	697a      	ldr	r2, [r7, #20]
 8013d4a:	619a      	str	r2, [r3, #24]
 8013d4c:	e011      	b.n	8013d72 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013d4e:	7cbb      	ldrb	r3, [r7, #18]
 8013d50:	f003 0310 	and.w	r3, r3, #16
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d009      	beq.n	8013d6c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d5c:	68bc      	ldr	r4, [r7, #8]
 8013d5e:	4611      	mov	r1, r2
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fe fc20 	bl	80125a6 <ld_clust>
 8013d66:	4603      	mov	r3, r0
 8013d68:	61a3      	str	r3, [r4, #24]
 8013d6a:	e002      	b.n	8013d72 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013d6c:	2305      	movs	r3, #5
 8013d6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013d72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d76:	2b04      	cmp	r3, #4
 8013d78:	d102      	bne.n	8013d80 <f_chdir+0x88>
 8013d7a:	2305      	movs	r3, #5
 8013d7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013d80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3744      	adds	r7, #68	; 0x44
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd90      	pop	{r4, r7, pc}

08013d8c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b090      	sub	sp, #64	; 0x40
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f107 0208 	add.w	r2, r7, #8
 8013d9c:	4611      	mov	r1, r2
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7ff f9c2 	bl	8013128 <validate>
 8013da4:	4603      	mov	r3, r0
 8013da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d103      	bne.n	8013dba <f_lseek+0x2e>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	7d5b      	ldrb	r3, [r3, #21]
 8013db6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013dba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d002      	beq.n	8013dc8 <f_lseek+0x3c>
 8013dc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dc6:	e201      	b.n	80141cc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f000 80d9 	beq.w	8013f84 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dd8:	d15a      	bne.n	8013e90 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dde:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de2:	1d1a      	adds	r2, r3, #4
 8013de4:	627a      	str	r2, [r7, #36]	; 0x24
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	617b      	str	r3, [r7, #20]
 8013dea:	2302      	movs	r3, #2
 8013dec:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d03a      	beq.n	8013e70 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfc:	613b      	str	r3, [r7, #16]
 8013dfe:	2300      	movs	r3, #0
 8013e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e04:	3302      	adds	r3, #2
 8013e06:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0e:	3301      	adds	r3, #1
 8013e10:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fd ff03 	bl	8011c22 <get_fat>
 8013e1c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d804      	bhi.n	8013e2e <f_lseek+0xa2>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2202      	movs	r2, #2
 8013e28:	755a      	strb	r2, [r3, #21]
 8013e2a:	2302      	movs	r3, #2
 8013e2c:	e1ce      	b.n	80141cc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e34:	d104      	bne.n	8013e40 <f_lseek+0xb4>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2201      	movs	r2, #1
 8013e3a:	755a      	strb	r2, [r3, #21]
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e1c5      	b.n	80141cc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	3301      	adds	r3, #1
 8013e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d0de      	beq.n	8013e08 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d809      	bhi.n	8013e66 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e54:	1d1a      	adds	r2, r3, #4
 8013e56:	627a      	str	r2, [r7, #36]	; 0x24
 8013e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e5a:	601a      	str	r2, [r3, #0]
 8013e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5e:	1d1a      	adds	r2, r3, #4
 8013e60:	627a      	str	r2, [r7, #36]	; 0x24
 8013e62:	693a      	ldr	r2, [r7, #16]
 8013e64:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	69db      	ldr	r3, [r3, #28]
 8013e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d3c4      	bcc.n	8013dfa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e76:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d803      	bhi.n	8013e88 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e82:	2200      	movs	r2, #0
 8013e84:	601a      	str	r2, [r3, #0]
 8013e86:	e19f      	b.n	80141c8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013e88:	2311      	movs	r3, #17
 8013e8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013e8e:	e19b      	b.n	80141c8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	683a      	ldr	r2, [r7, #0]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d902      	bls.n	8013ea0 <f_lseek+0x114>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	683a      	ldr	r2, [r7, #0]
 8013ea4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f000 818d 	beq.w	80141c8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	3b01      	subs	r3, #1
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f7fe f998 	bl	80121ea <clmt_clust>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013ec0:	68ba      	ldr	r2, [r7, #8]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	69db      	ldr	r3, [r3, #28]
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	4610      	mov	r0, r2
 8013eca:	f7fd fe8b 	bl	8011be4 <clust2sect>
 8013ece:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013ed0:	69bb      	ldr	r3, [r7, #24]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d104      	bne.n	8013ee0 <f_lseek+0x154>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2202      	movs	r2, #2
 8013eda:	755a      	strb	r2, [r3, #21]
 8013edc:	2302      	movs	r3, #2
 8013ede:	e175      	b.n	80141cc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	3b01      	subs	r3, #1
 8013ee4:	68ba      	ldr	r2, [r7, #8]
 8013ee6:	8992      	ldrh	r2, [r2, #12]
 8013ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	8952      	ldrh	r2, [r2, #10]
 8013ef0:	3a01      	subs	r2, #1
 8013ef2:	4013      	ands	r3, r2
 8013ef4:	69ba      	ldr	r2, [r7, #24]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	699b      	ldr	r3, [r3, #24]
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	8992      	ldrh	r2, [r2, #12]
 8013f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f06:	fb02 f201 	mul.w	r2, r2, r1
 8013f0a:	1a9b      	subs	r3, r3, r2
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f000 815b 	beq.w	80141c8 <f_lseek+0x43c>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6a1b      	ldr	r3, [r3, #32]
 8013f16:	69ba      	ldr	r2, [r7, #24]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	f000 8155 	beq.w	80141c8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	7d1b      	ldrb	r3, [r3, #20]
 8013f22:	b25b      	sxtb	r3, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	da18      	bge.n	8013f5a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	7858      	ldrb	r0, [r3, #1]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6a1a      	ldr	r2, [r3, #32]
 8013f36:	2301      	movs	r3, #1
 8013f38:	f7fd fac8 	bl	80114cc <disk_write>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d004      	beq.n	8013f4c <f_lseek+0x1c0>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2201      	movs	r2, #1
 8013f46:	755a      	strb	r2, [r3, #21]
 8013f48:	2301      	movs	r3, #1
 8013f4a:	e13f      	b.n	80141cc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	7d1b      	ldrb	r3, [r3, #20]
 8013f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f54:	b2da      	uxtb	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	7858      	ldrb	r0, [r3, #1]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f64:	2301      	movs	r3, #1
 8013f66:	69ba      	ldr	r2, [r7, #24]
 8013f68:	f7fd fa90 	bl	801148c <disk_read>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d004      	beq.n	8013f7c <f_lseek+0x1f0>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2201      	movs	r2, #1
 8013f76:	755a      	strb	r2, [r3, #21]
 8013f78:	2301      	movs	r3, #1
 8013f7a:	e127      	b.n	80141cc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	69ba      	ldr	r2, [r7, #24]
 8013f80:	621a      	str	r2, [r3, #32]
 8013f82:	e121      	b.n	80141c8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	683a      	ldr	r2, [r7, #0]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d908      	bls.n	8013fa0 <f_lseek+0x214>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	7d1b      	ldrb	r3, [r3, #20]
 8013f92:	f003 0302 	and.w	r3, r3, #2
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d102      	bne.n	8013fa0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	699b      	ldr	r3, [r3, #24]
 8013fa4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fae:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f000 80b5 	beq.w	8014122 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	895b      	ldrh	r3, [r3, #10]
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	899b      	ldrh	r3, [r3, #12]
 8013fc2:	fb03 f302 	mul.w	r3, r3, r2
 8013fc6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013fc8:	6a3b      	ldr	r3, [r7, #32]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d01b      	beq.n	8014006 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	1e5a      	subs	r2, r3, #1
 8013fd2:	69fb      	ldr	r3, [r7, #28]
 8013fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8013fd8:	6a3b      	ldr	r3, [r7, #32]
 8013fda:	1e59      	subs	r1, r3, #1
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d30f      	bcc.n	8014006 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013fe6:	6a3b      	ldr	r3, [r7, #32]
 8013fe8:	1e5a      	subs	r2, r3, #1
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	425b      	negs	r3, r3
 8013fee:	401a      	ands	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	699b      	ldr	r3, [r3, #24]
 8013ff8:	683a      	ldr	r2, [r7, #0]
 8013ffa:	1ad3      	subs	r3, r2, r3
 8013ffc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	69db      	ldr	r3, [r3, #28]
 8014002:	63bb      	str	r3, [r7, #56]	; 0x38
 8014004:	e022      	b.n	801404c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	689b      	ldr	r3, [r3, #8]
 801400a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400e:	2b00      	cmp	r3, #0
 8014010:	d119      	bne.n	8014046 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2100      	movs	r1, #0
 8014016:	4618      	mov	r0, r3
 8014018:	f7fe f84f 	bl	80120ba <create_chain>
 801401c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014020:	2b01      	cmp	r3, #1
 8014022:	d104      	bne.n	801402e <f_lseek+0x2a2>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2202      	movs	r2, #2
 8014028:	755a      	strb	r2, [r3, #21]
 801402a:	2302      	movs	r3, #2
 801402c:	e0ce      	b.n	80141cc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014034:	d104      	bne.n	8014040 <f_lseek+0x2b4>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2201      	movs	r2, #1
 801403a:	755a      	strb	r2, [r3, #21]
 801403c:	2301      	movs	r3, #1
 801403e:	e0c5      	b.n	80141cc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014044:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801404a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	2b00      	cmp	r3, #0
 8014050:	d067      	beq.n	8014122 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014052:	e03a      	b.n	80140ca <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014054:	683a      	ldr	r2, [r7, #0]
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	603b      	str	r3, [r7, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	699a      	ldr	r2, [r3, #24]
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	441a      	add	r2, r3
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	7d1b      	ldrb	r3, [r3, #20]
 801406c:	f003 0302 	and.w	r3, r3, #2
 8014070:	2b00      	cmp	r3, #0
 8014072:	d00b      	beq.n	801408c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014078:	4618      	mov	r0, r3
 801407a:	f7fe f81e 	bl	80120ba <create_chain>
 801407e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014082:	2b00      	cmp	r3, #0
 8014084:	d108      	bne.n	8014098 <f_lseek+0x30c>
							ofs = 0; break;
 8014086:	2300      	movs	r3, #0
 8014088:	603b      	str	r3, [r7, #0]
 801408a:	e022      	b.n	80140d2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014090:	4618      	mov	r0, r3
 8014092:	f7fd fdc6 	bl	8011c22 <get_fat>
 8014096:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801409e:	d104      	bne.n	80140aa <f_lseek+0x31e>
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2201      	movs	r2, #1
 80140a4:	755a      	strb	r2, [r3, #21]
 80140a6:	2301      	movs	r3, #1
 80140a8:	e090      	b.n	80141cc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80140aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d904      	bls.n	80140ba <f_lseek+0x32e>
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	69db      	ldr	r3, [r3, #28]
 80140b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d304      	bcc.n	80140c4 <f_lseek+0x338>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2202      	movs	r2, #2
 80140be:	755a      	strb	r2, [r3, #21]
 80140c0:	2302      	movs	r3, #2
 80140c2:	e083      	b.n	80141cc <f_lseek+0x440>
					fp->clust = clst;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140c8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d8c0      	bhi.n	8014054 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	699a      	ldr	r2, [r3, #24]
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	441a      	add	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	899b      	ldrh	r3, [r3, #12]
 80140e2:	461a      	mov	r2, r3
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80140ea:	fb02 f201 	mul.w	r2, r2, r1
 80140ee:	1a9b      	subs	r3, r3, r2
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d016      	beq.n	8014122 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fd fd73 	bl	8011be4 <clust2sect>
 80140fe:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014102:	2b00      	cmp	r3, #0
 8014104:	d104      	bne.n	8014110 <f_lseek+0x384>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2202      	movs	r2, #2
 801410a:	755a      	strb	r2, [r3, #21]
 801410c:	2302      	movs	r3, #2
 801410e:	e05d      	b.n	80141cc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	899b      	ldrh	r3, [r3, #12]
 8014114:	461a      	mov	r2, r3
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	fbb3 f3f2 	udiv	r3, r3, r2
 801411c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801411e:	4413      	add	r3, r2
 8014120:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	699a      	ldr	r2, [r3, #24]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	429a      	cmp	r2, r3
 801412c:	d90a      	bls.n	8014144 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	699a      	ldr	r2, [r3, #24]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	7d1b      	ldrb	r3, [r3, #20]
 801413a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801413e:	b2da      	uxtb	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	8992      	ldrh	r2, [r2, #12]
 801414c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014150:	fb02 f201 	mul.w	r2, r2, r1
 8014154:	1a9b      	subs	r3, r3, r2
 8014156:	2b00      	cmp	r3, #0
 8014158:	d036      	beq.n	80141c8 <f_lseek+0x43c>
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6a1b      	ldr	r3, [r3, #32]
 801415e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014160:	429a      	cmp	r2, r3
 8014162:	d031      	beq.n	80141c8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	7d1b      	ldrb	r3, [r3, #20]
 8014168:	b25b      	sxtb	r3, r3
 801416a:	2b00      	cmp	r3, #0
 801416c:	da18      	bge.n	80141a0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	7858      	ldrb	r0, [r3, #1]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6a1a      	ldr	r2, [r3, #32]
 801417c:	2301      	movs	r3, #1
 801417e:	f7fd f9a5 	bl	80114cc <disk_write>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d004      	beq.n	8014192 <f_lseek+0x406>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2201      	movs	r2, #1
 801418c:	755a      	strb	r2, [r3, #21]
 801418e:	2301      	movs	r3, #1
 8014190:	e01c      	b.n	80141cc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	7d1b      	ldrb	r3, [r3, #20]
 8014196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801419a:	b2da      	uxtb	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	7858      	ldrb	r0, [r3, #1]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141aa:	2301      	movs	r3, #1
 80141ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141ae:	f7fd f96d 	bl	801148c <disk_read>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d004      	beq.n	80141c2 <f_lseek+0x436>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2201      	movs	r2, #1
 80141bc:	755a      	strb	r2, [r3, #21]
 80141be:	2301      	movs	r3, #1
 80141c0:	e004      	b.n	80141cc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141c6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80141c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3740      	adds	r7, #64	; 0x40
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}

080141d4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b09e      	sub	sp, #120	; 0x78
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80141dc:	2300      	movs	r3, #0
 80141de:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80141e0:	f107 010c 	add.w	r1, r7, #12
 80141e4:	1d3b      	adds	r3, r7, #4
 80141e6:	2202      	movs	r2, #2
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7fe fd17 	bl	8012c1c <find_volume>
 80141ee:	4603      	mov	r3, r0
 80141f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80141f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	f040 80a4 	bne.w	801434a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014208:	4611      	mov	r1, r2
 801420a:	4618      	mov	r0, r3
 801420c:	f7fe fbd6 	bl	80129bc <follow_path>
 8014210:	4603      	mov	r3, r0
 8014212:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014216:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801421a:	2b00      	cmp	r3, #0
 801421c:	d108      	bne.n	8014230 <f_unlink+0x5c>
 801421e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014222:	f003 0320 	and.w	r3, r3, #32
 8014226:	2b00      	cmp	r3, #0
 8014228:	d002      	beq.n	8014230 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801422a:	2306      	movs	r3, #6
 801422c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014230:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014234:	2b00      	cmp	r3, #0
 8014236:	d108      	bne.n	801424a <f_unlink+0x76>
 8014238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801423c:	2102      	movs	r1, #2
 801423e:	4618      	mov	r0, r3
 8014240:	f7fd fa82 	bl	8011748 <chk_lock>
 8014244:	4603      	mov	r3, r0
 8014246:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801424a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801424e:	2b00      	cmp	r3, #0
 8014250:	d17b      	bne.n	801434a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014252:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014256:	b25b      	sxtb	r3, r3
 8014258:	2b00      	cmp	r3, #0
 801425a:	da03      	bge.n	8014264 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801425c:	2306      	movs	r3, #6
 801425e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014262:	e008      	b.n	8014276 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014264:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014268:	f003 0301 	and.w	r3, r3, #1
 801426c:	2b00      	cmp	r3, #0
 801426e:	d002      	beq.n	8014276 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014270:	2307      	movs	r3, #7
 8014272:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014276:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801427a:	2b00      	cmp	r3, #0
 801427c:	d13d      	bne.n	80142fa <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014282:	4611      	mov	r1, r2
 8014284:	4618      	mov	r0, r3
 8014286:	f7fe f98e 	bl	80125a6 <ld_clust>
 801428a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801428c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014290:	f003 0310 	and.w	r3, r3, #16
 8014294:	2b00      	cmp	r3, #0
 8014296:	d030      	beq.n	80142fa <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	699b      	ldr	r3, [r3, #24]
 801429c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801429e:	429a      	cmp	r2, r3
 80142a0:	d103      	bne.n	80142aa <f_unlink+0xd6>
						res = FR_DENIED;
 80142a2:	2307      	movs	r3, #7
 80142a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80142a8:	e027      	b.n	80142fa <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80142ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142b0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80142b2:	f107 0310 	add.w	r3, r7, #16
 80142b6:	2100      	movs	r1, #0
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fd ffce 	bl	801225a <dir_sdi>
 80142be:	4603      	mov	r3, r0
 80142c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80142c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d116      	bne.n	80142fa <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80142cc:	f107 0310 	add.w	r3, r7, #16
 80142d0:	2100      	movs	r1, #0
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fe f9a6 	bl	8012624 <dir_read>
 80142d8:	4603      	mov	r3, r0
 80142da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80142de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d102      	bne.n	80142ec <f_unlink+0x118>
 80142e6:	2307      	movs	r3, #7
 80142e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80142ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142f0:	2b04      	cmp	r3, #4
 80142f2:	d102      	bne.n	80142fa <f_unlink+0x126>
 80142f4:	2300      	movs	r3, #0
 80142f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80142fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d123      	bne.n	801434a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014306:	4618      	mov	r0, r3
 8014308:	f7fe fa70 	bl	80127ec <dir_remove>
 801430c:	4603      	mov	r3, r0
 801430e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014312:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014316:	2b00      	cmp	r3, #0
 8014318:	d10c      	bne.n	8014334 <f_unlink+0x160>
 801431a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801431c:	2b00      	cmp	r3, #0
 801431e:	d009      	beq.n	8014334 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014324:	2200      	movs	r2, #0
 8014326:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014328:	4618      	mov	r0, r3
 801432a:	f7fd fe61 	bl	8011ff0 <remove_chain>
 801432e:	4603      	mov	r3, r0
 8014330:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014334:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014338:	2b00      	cmp	r3, #0
 801433a:	d106      	bne.n	801434a <f_unlink+0x176>
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	4618      	mov	r0, r3
 8014340:	f7fd fbe0 	bl	8011b04 <sync_fs>
 8014344:	4603      	mov	r3, r0
 8014346:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801434a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801434e:	4618      	mov	r0, r3
 8014350:	3778      	adds	r7, #120	; 0x78
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
	...

08014358 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b096      	sub	sp, #88	; 0x58
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014360:	f107 0108 	add.w	r1, r7, #8
 8014364:	1d3b      	adds	r3, r7, #4
 8014366:	2202      	movs	r2, #2
 8014368:	4618      	mov	r0, r3
 801436a:	f7fe fc57 	bl	8012c1c <find_volume>
 801436e:	4603      	mov	r3, r0
 8014370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801437c:	2b00      	cmp	r3, #0
 801437e:	f040 80fe 	bne.w	801457e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	f107 030c 	add.w	r3, r7, #12
 8014388:	4611      	mov	r1, r2
 801438a:	4618      	mov	r0, r3
 801438c:	f7fe fb16 	bl	80129bc <follow_path>
 8014390:	4603      	mov	r3, r0
 8014392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801439a:	2b00      	cmp	r3, #0
 801439c:	d102      	bne.n	80143a4 <f_mkdir+0x4c>
 801439e:	2308      	movs	r3, #8
 80143a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80143a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143a8:	2b04      	cmp	r3, #4
 80143aa:	d108      	bne.n	80143be <f_mkdir+0x66>
 80143ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80143b0:	f003 0320 	and.w	r3, r3, #32
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d002      	beq.n	80143be <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80143b8:	2306      	movs	r3, #6
 80143ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80143be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143c2:	2b04      	cmp	r3, #4
 80143c4:	f040 80db 	bne.w	801457e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80143c8:	f107 030c 	add.w	r3, r7, #12
 80143cc:	2100      	movs	r1, #0
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7fd fe73 	bl	80120ba <create_chain>
 80143d4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	895b      	ldrh	r3, [r3, #10]
 80143da:	461a      	mov	r2, r3
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	899b      	ldrh	r3, [r3, #12]
 80143e0:	fb03 f302 	mul.w	r3, r3, r2
 80143e4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80143e6:	2300      	movs	r3, #0
 80143e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80143ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d102      	bne.n	80143f8 <f_mkdir+0xa0>
 80143f2:	2307      	movs	r3, #7
 80143f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80143f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d102      	bne.n	8014404 <f_mkdir+0xac>
 80143fe:	2302      	movs	r3, #2
 8014400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801440a:	d102      	bne.n	8014412 <f_mkdir+0xba>
 801440c:	2301      	movs	r3, #1
 801440e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014412:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014416:	2b00      	cmp	r3, #0
 8014418:	d106      	bne.n	8014428 <f_mkdir+0xd0>
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	4618      	mov	r0, r3
 801441e:	f7fd faff 	bl	8011a20 <sync_window>
 8014422:	4603      	mov	r3, r0
 8014424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014428:	4b58      	ldr	r3, [pc, #352]	; (801458c <f_mkdir+0x234>)
 801442a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801442c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014430:	2b00      	cmp	r3, #0
 8014432:	d16c      	bne.n	801450e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014438:	4618      	mov	r0, r3
 801443a:	f7fd fbd3 	bl	8011be4 <clust2sect>
 801443e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	3338      	adds	r3, #56	; 0x38
 8014444:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	899b      	ldrh	r3, [r3, #12]
 801444a:	461a      	mov	r2, r3
 801444c:	2100      	movs	r1, #0
 801444e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014450:	f7fd f91d 	bl	801168e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014454:	220b      	movs	r2, #11
 8014456:	2120      	movs	r1, #32
 8014458:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801445a:	f7fd f918 	bl	801168e <mem_set>
					dir[DIR_Name] = '.';
 801445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014460:	222e      	movs	r2, #46	; 0x2e
 8014462:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014466:	330b      	adds	r3, #11
 8014468:	2210      	movs	r2, #16
 801446a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801446c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801446e:	3316      	adds	r3, #22
 8014470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014472:	4618      	mov	r0, r3
 8014474:	f7fd f8be 	bl	80115f4 <st_dword>
					st_clust(fs, dir, dcl);
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801447c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801447e:	4618      	mov	r0, r3
 8014480:	f7fe f8b0 	bl	80125e4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014486:	3320      	adds	r3, #32
 8014488:	2220      	movs	r2, #32
 801448a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801448c:	4618      	mov	r0, r3
 801448e:	f7fd f8dd 	bl	801164c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014494:	3321      	adds	r3, #33	; 0x21
 8014496:	222e      	movs	r2, #46	; 0x2e
 8014498:	701a      	strb	r2, [r3, #0]
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	2b03      	cmp	r3, #3
 80144a4:	d106      	bne.n	80144b4 <f_mkdir+0x15c>
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d101      	bne.n	80144b4 <f_mkdir+0x15c>
 80144b0:	2300      	movs	r3, #0
 80144b2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80144b4:	68b8      	ldr	r0, [r7, #8]
 80144b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144b8:	3320      	adds	r3, #32
 80144ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80144bc:	4619      	mov	r1, r3
 80144be:	f7fe f891 	bl	80125e4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	895b      	ldrh	r3, [r3, #10]
 80144c6:	653b      	str	r3, [r7, #80]	; 0x50
 80144c8:	e01c      	b.n	8014504 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80144ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144cc:	1c5a      	adds	r2, r3, #1
 80144ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80144d0:	68ba      	ldr	r2, [r7, #8]
 80144d2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	2201      	movs	r2, #1
 80144d8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fd fa9f 	bl	8011a20 <sync_window>
 80144e2:	4603      	mov	r3, r0
 80144e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80144e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d10d      	bne.n	801450c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	899b      	ldrh	r3, [r3, #12]
 80144f4:	461a      	mov	r2, r3
 80144f6:	2100      	movs	r1, #0
 80144f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144fa:	f7fd f8c8 	bl	801168e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80144fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014500:	3b01      	subs	r3, #1
 8014502:	653b      	str	r3, [r7, #80]	; 0x50
 8014504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1df      	bne.n	80144ca <f_mkdir+0x172>
 801450a:	e000      	b.n	801450e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801450c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801450e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014512:	2b00      	cmp	r3, #0
 8014514:	d107      	bne.n	8014526 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014516:	f107 030c 	add.w	r3, r7, #12
 801451a:	4618      	mov	r0, r3
 801451c:	f7fe f934 	bl	8012788 <dir_register>
 8014520:	4603      	mov	r3, r0
 8014522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801452a:	2b00      	cmp	r3, #0
 801452c:	d120      	bne.n	8014570 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014530:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014534:	3316      	adds	r3, #22
 8014536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014538:	4618      	mov	r0, r3
 801453a:	f7fd f85b 	bl	80115f4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014544:	4618      	mov	r0, r3
 8014546:	f7fe f84d 	bl	80125e4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801454c:	330b      	adds	r3, #11
 801454e:	2210      	movs	r2, #16
 8014550:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	2201      	movs	r2, #1
 8014556:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801455c:	2b00      	cmp	r3, #0
 801455e:	d10e      	bne.n	801457e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	4618      	mov	r0, r3
 8014564:	f7fd face 	bl	8011b04 <sync_fs>
 8014568:	4603      	mov	r3, r0
 801456a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801456e:	e006      	b.n	801457e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014570:	f107 030c 	add.w	r3, r7, #12
 8014574:	2200      	movs	r2, #0
 8014576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014578:	4618      	mov	r0, r3
 801457a:	f7fd fd39 	bl	8011ff0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801457e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014582:	4618      	mov	r0, r3
 8014584:	3758      	adds	r7, #88	; 0x58
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	274a0000 	.word	0x274a0000

08014590 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b088      	sub	sp, #32
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801459c:	2300      	movs	r3, #0
 801459e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80145a4:	e017      	b.n	80145d6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80145a6:	f107 0310 	add.w	r3, r7, #16
 80145aa:	f107 0114 	add.w	r1, r7, #20
 80145ae:	2201      	movs	r2, #1
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7ff f803 	bl	80135bc <f_read>
		if (rc != 1) break;
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	d112      	bne.n	80145e2 <f_gets+0x52>
		c = s[0];
 80145bc:	7d3b      	ldrb	r3, [r7, #20]
 80145be:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80145c0:	69bb      	ldr	r3, [r7, #24]
 80145c2:	1c5a      	adds	r2, r3, #1
 80145c4:	61ba      	str	r2, [r7, #24]
 80145c6:	7dfa      	ldrb	r2, [r7, #23]
 80145c8:	701a      	strb	r2, [r3, #0]
		n++;
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	3301      	adds	r3, #1
 80145ce:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
 80145d2:	2b0a      	cmp	r3, #10
 80145d4:	d007      	beq.n	80145e6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	3b01      	subs	r3, #1
 80145da:	69fa      	ldr	r2, [r7, #28]
 80145dc:	429a      	cmp	r2, r3
 80145de:	dbe2      	blt.n	80145a6 <f_gets+0x16>
 80145e0:	e002      	b.n	80145e8 <f_gets+0x58>
		if (rc != 1) break;
 80145e2:	bf00      	nop
 80145e4:	e000      	b.n	80145e8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80145e6:	bf00      	nop
	}
	*p = 0;
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	2200      	movs	r2, #0
 80145ec:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d001      	beq.n	80145f8 <f_gets+0x68>
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	e000      	b.n	80145fa <f_gets+0x6a>
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3720      	adds	r7, #32
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
	...

08014604 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014604:	b480      	push	{r7}
 8014606:	b087      	sub	sp, #28
 8014608:	af00      	add	r7, sp, #0
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	4613      	mov	r3, r2
 8014610:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014612:	2301      	movs	r3, #1
 8014614:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801461a:	4b1f      	ldr	r3, [pc, #124]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801461c:	7a5b      	ldrb	r3, [r3, #9]
 801461e:	b2db      	uxtb	r3, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	d131      	bne.n	8014688 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014624:	4b1c      	ldr	r3, [pc, #112]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014626:	7a5b      	ldrb	r3, [r3, #9]
 8014628:	b2db      	uxtb	r3, r3
 801462a:	461a      	mov	r2, r3
 801462c:	4b1a      	ldr	r3, [pc, #104]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801462e:	2100      	movs	r1, #0
 8014630:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014632:	4b19      	ldr	r3, [pc, #100]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014634:	7a5b      	ldrb	r3, [r3, #9]
 8014636:	b2db      	uxtb	r3, r3
 8014638:	4a17      	ldr	r2, [pc, #92]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	4413      	add	r3, r2
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014642:	4b15      	ldr	r3, [pc, #84]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014644:	7a5b      	ldrb	r3, [r3, #9]
 8014646:	b2db      	uxtb	r3, r3
 8014648:	461a      	mov	r2, r3
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801464c:	4413      	add	r3, r2
 801464e:	79fa      	ldrb	r2, [r7, #7]
 8014650:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014652:	4b11      	ldr	r3, [pc, #68]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014654:	7a5b      	ldrb	r3, [r3, #9]
 8014656:	b2db      	uxtb	r3, r3
 8014658:	1c5a      	adds	r2, r3, #1
 801465a:	b2d1      	uxtb	r1, r2
 801465c:	4a0e      	ldr	r2, [pc, #56]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801465e:	7251      	strb	r1, [r2, #9]
 8014660:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014662:	7dbb      	ldrb	r3, [r7, #22]
 8014664:	3330      	adds	r3, #48	; 0x30
 8014666:	b2da      	uxtb	r2, r3
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	3301      	adds	r3, #1
 8014670:	223a      	movs	r2, #58	; 0x3a
 8014672:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	3302      	adds	r3, #2
 8014678:	222f      	movs	r2, #47	; 0x2f
 801467a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	3303      	adds	r3, #3
 8014680:	2200      	movs	r2, #0
 8014682:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014684:	2300      	movs	r3, #0
 8014686:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014688:	7dfb      	ldrb	r3, [r7, #23]
}
 801468a:	4618      	mov	r0, r3
 801468c:	371c      	adds	r7, #28
 801468e:	46bd      	mov	sp, r7
 8014690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014694:	4770      	bx	lr
 8014696:	bf00      	nop
 8014698:	200422f4 	.word	0x200422f4

0801469c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80146a6:	2200      	movs	r2, #0
 80146a8:	6839      	ldr	r1, [r7, #0]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7ff ffaa 	bl	8014604 <FATFS_LinkDriverEx>
 80146b0:	4603      	mov	r3, r0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <__cxa_guard_acquire>:
 80146ba:	6803      	ldr	r3, [r0, #0]
 80146bc:	07db      	lsls	r3, r3, #31
 80146be:	d406      	bmi.n	80146ce <__cxa_guard_acquire+0x14>
 80146c0:	7843      	ldrb	r3, [r0, #1]
 80146c2:	b103      	cbz	r3, 80146c6 <__cxa_guard_acquire+0xc>
 80146c4:	deff      	udf	#255	; 0xff
 80146c6:	2301      	movs	r3, #1
 80146c8:	7043      	strb	r3, [r0, #1]
 80146ca:	4618      	mov	r0, r3
 80146cc:	4770      	bx	lr
 80146ce:	2000      	movs	r0, #0
 80146d0:	4770      	bx	lr

080146d2 <__cxa_guard_release>:
 80146d2:	2301      	movs	r3, #1
 80146d4:	6003      	str	r3, [r0, #0]
 80146d6:	4770      	bx	lr

080146d8 <cos>:
 80146d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146da:	ec51 0b10 	vmov	r0, r1, d0
 80146de:	4a1e      	ldr	r2, [pc, #120]	; (8014758 <cos+0x80>)
 80146e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80146e4:	4293      	cmp	r3, r2
 80146e6:	dc06      	bgt.n	80146f6 <cos+0x1e>
 80146e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014750 <cos+0x78>
 80146ec:	f000 fa74 	bl	8014bd8 <__kernel_cos>
 80146f0:	ec51 0b10 	vmov	r0, r1, d0
 80146f4:	e007      	b.n	8014706 <cos+0x2e>
 80146f6:	4a19      	ldr	r2, [pc, #100]	; (801475c <cos+0x84>)
 80146f8:	4293      	cmp	r3, r2
 80146fa:	dd09      	ble.n	8014710 <cos+0x38>
 80146fc:	ee10 2a10 	vmov	r2, s0
 8014700:	460b      	mov	r3, r1
 8014702:	f7eb fdd9 	bl	80002b8 <__aeabi_dsub>
 8014706:	ec41 0b10 	vmov	d0, r0, r1
 801470a:	b005      	add	sp, #20
 801470c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014710:	4668      	mov	r0, sp
 8014712:	f000 f86d 	bl	80147f0 <__ieee754_rem_pio2>
 8014716:	f000 0003 	and.w	r0, r0, #3
 801471a:	2801      	cmp	r0, #1
 801471c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014720:	ed9d 0b00 	vldr	d0, [sp]
 8014724:	d007      	beq.n	8014736 <cos+0x5e>
 8014726:	2802      	cmp	r0, #2
 8014728:	d00e      	beq.n	8014748 <cos+0x70>
 801472a:	2800      	cmp	r0, #0
 801472c:	d0de      	beq.n	80146ec <cos+0x14>
 801472e:	2001      	movs	r0, #1
 8014730:	f000 fe5a 	bl	80153e8 <__kernel_sin>
 8014734:	e7dc      	b.n	80146f0 <cos+0x18>
 8014736:	f000 fe57 	bl	80153e8 <__kernel_sin>
 801473a:	ec53 2b10 	vmov	r2, r3, d0
 801473e:	ee10 0a10 	vmov	r0, s0
 8014742:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014746:	e7de      	b.n	8014706 <cos+0x2e>
 8014748:	f000 fa46 	bl	8014bd8 <__kernel_cos>
 801474c:	e7f5      	b.n	801473a <cos+0x62>
 801474e:	bf00      	nop
	...
 8014758:	3fe921fb 	.word	0x3fe921fb
 801475c:	7fefffff 	.word	0x7fefffff

08014760 <sin>:
 8014760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014762:	ec51 0b10 	vmov	r0, r1, d0
 8014766:	4a20      	ldr	r2, [pc, #128]	; (80147e8 <sin+0x88>)
 8014768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801476c:	4293      	cmp	r3, r2
 801476e:	dc07      	bgt.n	8014780 <sin+0x20>
 8014770:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80147e0 <sin+0x80>
 8014774:	2000      	movs	r0, #0
 8014776:	f000 fe37 	bl	80153e8 <__kernel_sin>
 801477a:	ec51 0b10 	vmov	r0, r1, d0
 801477e:	e007      	b.n	8014790 <sin+0x30>
 8014780:	4a1a      	ldr	r2, [pc, #104]	; (80147ec <sin+0x8c>)
 8014782:	4293      	cmp	r3, r2
 8014784:	dd09      	ble.n	801479a <sin+0x3a>
 8014786:	ee10 2a10 	vmov	r2, s0
 801478a:	460b      	mov	r3, r1
 801478c:	f7eb fd94 	bl	80002b8 <__aeabi_dsub>
 8014790:	ec41 0b10 	vmov	d0, r0, r1
 8014794:	b005      	add	sp, #20
 8014796:	f85d fb04 	ldr.w	pc, [sp], #4
 801479a:	4668      	mov	r0, sp
 801479c:	f000 f828 	bl	80147f0 <__ieee754_rem_pio2>
 80147a0:	f000 0003 	and.w	r0, r0, #3
 80147a4:	2801      	cmp	r0, #1
 80147a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80147aa:	ed9d 0b00 	vldr	d0, [sp]
 80147ae:	d004      	beq.n	80147ba <sin+0x5a>
 80147b0:	2802      	cmp	r0, #2
 80147b2:	d005      	beq.n	80147c0 <sin+0x60>
 80147b4:	b970      	cbnz	r0, 80147d4 <sin+0x74>
 80147b6:	2001      	movs	r0, #1
 80147b8:	e7dd      	b.n	8014776 <sin+0x16>
 80147ba:	f000 fa0d 	bl	8014bd8 <__kernel_cos>
 80147be:	e7dc      	b.n	801477a <sin+0x1a>
 80147c0:	2001      	movs	r0, #1
 80147c2:	f000 fe11 	bl	80153e8 <__kernel_sin>
 80147c6:	ec53 2b10 	vmov	r2, r3, d0
 80147ca:	ee10 0a10 	vmov	r0, s0
 80147ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147d2:	e7dd      	b.n	8014790 <sin+0x30>
 80147d4:	f000 fa00 	bl	8014bd8 <__kernel_cos>
 80147d8:	e7f5      	b.n	80147c6 <sin+0x66>
 80147da:	bf00      	nop
 80147dc:	f3af 8000 	nop.w
	...
 80147e8:	3fe921fb 	.word	0x3fe921fb
 80147ec:	7fefffff 	.word	0x7fefffff

080147f0 <__ieee754_rem_pio2>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	ec57 6b10 	vmov	r6, r7, d0
 80147f8:	4bc3      	ldr	r3, [pc, #780]	; (8014b08 <__ieee754_rem_pio2+0x318>)
 80147fa:	b08d      	sub	sp, #52	; 0x34
 80147fc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014800:	4598      	cmp	r8, r3
 8014802:	4604      	mov	r4, r0
 8014804:	9704      	str	r7, [sp, #16]
 8014806:	dc07      	bgt.n	8014818 <__ieee754_rem_pio2+0x28>
 8014808:	2200      	movs	r2, #0
 801480a:	2300      	movs	r3, #0
 801480c:	ed84 0b00 	vstr	d0, [r4]
 8014810:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014814:	2500      	movs	r5, #0
 8014816:	e027      	b.n	8014868 <__ieee754_rem_pio2+0x78>
 8014818:	4bbc      	ldr	r3, [pc, #752]	; (8014b0c <__ieee754_rem_pio2+0x31c>)
 801481a:	4598      	cmp	r8, r3
 801481c:	dc75      	bgt.n	801490a <__ieee754_rem_pio2+0x11a>
 801481e:	9b04      	ldr	r3, [sp, #16]
 8014820:	4dbb      	ldr	r5, [pc, #748]	; (8014b10 <__ieee754_rem_pio2+0x320>)
 8014822:	2b00      	cmp	r3, #0
 8014824:	ee10 0a10 	vmov	r0, s0
 8014828:	a3a9      	add	r3, pc, #676	; (adr r3, 8014ad0 <__ieee754_rem_pio2+0x2e0>)
 801482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801482e:	4639      	mov	r1, r7
 8014830:	dd36      	ble.n	80148a0 <__ieee754_rem_pio2+0xb0>
 8014832:	f7eb fd41 	bl	80002b8 <__aeabi_dsub>
 8014836:	45a8      	cmp	r8, r5
 8014838:	4606      	mov	r6, r0
 801483a:	460f      	mov	r7, r1
 801483c:	d018      	beq.n	8014870 <__ieee754_rem_pio2+0x80>
 801483e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014ad8 <__ieee754_rem_pio2+0x2e8>)
 8014840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014844:	f7eb fd38 	bl	80002b8 <__aeabi_dsub>
 8014848:	4602      	mov	r2, r0
 801484a:	460b      	mov	r3, r1
 801484c:	e9c4 2300 	strd	r2, r3, [r4]
 8014850:	4630      	mov	r0, r6
 8014852:	4639      	mov	r1, r7
 8014854:	f7eb fd30 	bl	80002b8 <__aeabi_dsub>
 8014858:	a39f      	add	r3, pc, #636	; (adr r3, 8014ad8 <__ieee754_rem_pio2+0x2e8>)
 801485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485e:	f7eb fd2b 	bl	80002b8 <__aeabi_dsub>
 8014862:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014866:	2501      	movs	r5, #1
 8014868:	4628      	mov	r0, r5
 801486a:	b00d      	add	sp, #52	; 0x34
 801486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014870:	a39b      	add	r3, pc, #620	; (adr r3, 8014ae0 <__ieee754_rem_pio2+0x2f0>)
 8014872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014876:	f7eb fd1f 	bl	80002b8 <__aeabi_dsub>
 801487a:	a39b      	add	r3, pc, #620	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x2f8>)
 801487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014880:	4606      	mov	r6, r0
 8014882:	460f      	mov	r7, r1
 8014884:	f7eb fd18 	bl	80002b8 <__aeabi_dsub>
 8014888:	4602      	mov	r2, r0
 801488a:	460b      	mov	r3, r1
 801488c:	e9c4 2300 	strd	r2, r3, [r4]
 8014890:	4630      	mov	r0, r6
 8014892:	4639      	mov	r1, r7
 8014894:	f7eb fd10 	bl	80002b8 <__aeabi_dsub>
 8014898:	a393      	add	r3, pc, #588	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x2f8>)
 801489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489e:	e7de      	b.n	801485e <__ieee754_rem_pio2+0x6e>
 80148a0:	f7eb fd0c 	bl	80002bc <__adddf3>
 80148a4:	45a8      	cmp	r8, r5
 80148a6:	4606      	mov	r6, r0
 80148a8:	460f      	mov	r7, r1
 80148aa:	d016      	beq.n	80148da <__ieee754_rem_pio2+0xea>
 80148ac:	a38a      	add	r3, pc, #552	; (adr r3, 8014ad8 <__ieee754_rem_pio2+0x2e8>)
 80148ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b2:	f7eb fd03 	bl	80002bc <__adddf3>
 80148b6:	4602      	mov	r2, r0
 80148b8:	460b      	mov	r3, r1
 80148ba:	e9c4 2300 	strd	r2, r3, [r4]
 80148be:	4630      	mov	r0, r6
 80148c0:	4639      	mov	r1, r7
 80148c2:	f7eb fcf9 	bl	80002b8 <__aeabi_dsub>
 80148c6:	a384      	add	r3, pc, #528	; (adr r3, 8014ad8 <__ieee754_rem_pio2+0x2e8>)
 80148c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148cc:	f7eb fcf6 	bl	80002bc <__adddf3>
 80148d0:	f04f 35ff 	mov.w	r5, #4294967295
 80148d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148d8:	e7c6      	b.n	8014868 <__ieee754_rem_pio2+0x78>
 80148da:	a381      	add	r3, pc, #516	; (adr r3, 8014ae0 <__ieee754_rem_pio2+0x2f0>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	f7eb fcec 	bl	80002bc <__adddf3>
 80148e4:	a380      	add	r3, pc, #512	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x2f8>)
 80148e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ea:	4606      	mov	r6, r0
 80148ec:	460f      	mov	r7, r1
 80148ee:	f7eb fce5 	bl	80002bc <__adddf3>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	e9c4 2300 	strd	r2, r3, [r4]
 80148fa:	4630      	mov	r0, r6
 80148fc:	4639      	mov	r1, r7
 80148fe:	f7eb fcdb 	bl	80002b8 <__aeabi_dsub>
 8014902:	a379      	add	r3, pc, #484	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x2f8>)
 8014904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014908:	e7e0      	b.n	80148cc <__ieee754_rem_pio2+0xdc>
 801490a:	4b82      	ldr	r3, [pc, #520]	; (8014b14 <__ieee754_rem_pio2+0x324>)
 801490c:	4598      	cmp	r8, r3
 801490e:	f300 80d0 	bgt.w	8014ab2 <__ieee754_rem_pio2+0x2c2>
 8014912:	f000 fe23 	bl	801555c <fabs>
 8014916:	ec57 6b10 	vmov	r6, r7, d0
 801491a:	ee10 0a10 	vmov	r0, s0
 801491e:	a374      	add	r3, pc, #464	; (adr r3, 8014af0 <__ieee754_rem_pio2+0x300>)
 8014920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014924:	4639      	mov	r1, r7
 8014926:	f7eb fe7f 	bl	8000628 <__aeabi_dmul>
 801492a:	2200      	movs	r2, #0
 801492c:	4b7a      	ldr	r3, [pc, #488]	; (8014b18 <__ieee754_rem_pio2+0x328>)
 801492e:	f7eb fcc5 	bl	80002bc <__adddf3>
 8014932:	f7ec f929 	bl	8000b88 <__aeabi_d2iz>
 8014936:	4605      	mov	r5, r0
 8014938:	f7eb fe0c 	bl	8000554 <__aeabi_i2d>
 801493c:	a364      	add	r3, pc, #400	; (adr r3, 8014ad0 <__ieee754_rem_pio2+0x2e0>)
 801493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014946:	f7eb fe6f 	bl	8000628 <__aeabi_dmul>
 801494a:	4602      	mov	r2, r0
 801494c:	460b      	mov	r3, r1
 801494e:	4630      	mov	r0, r6
 8014950:	4639      	mov	r1, r7
 8014952:	f7eb fcb1 	bl	80002b8 <__aeabi_dsub>
 8014956:	a360      	add	r3, pc, #384	; (adr r3, 8014ad8 <__ieee754_rem_pio2+0x2e8>)
 8014958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495c:	4682      	mov	sl, r0
 801495e:	468b      	mov	fp, r1
 8014960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014964:	f7eb fe60 	bl	8000628 <__aeabi_dmul>
 8014968:	2d1f      	cmp	r5, #31
 801496a:	4606      	mov	r6, r0
 801496c:	460f      	mov	r7, r1
 801496e:	dc0c      	bgt.n	801498a <__ieee754_rem_pio2+0x19a>
 8014970:	1e6a      	subs	r2, r5, #1
 8014972:	4b6a      	ldr	r3, [pc, #424]	; (8014b1c <__ieee754_rem_pio2+0x32c>)
 8014974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014978:	4543      	cmp	r3, r8
 801497a:	d006      	beq.n	801498a <__ieee754_rem_pio2+0x19a>
 801497c:	4632      	mov	r2, r6
 801497e:	463b      	mov	r3, r7
 8014980:	4650      	mov	r0, sl
 8014982:	4659      	mov	r1, fp
 8014984:	f7eb fc98 	bl	80002b8 <__aeabi_dsub>
 8014988:	e00e      	b.n	80149a8 <__ieee754_rem_pio2+0x1b8>
 801498a:	4632      	mov	r2, r6
 801498c:	463b      	mov	r3, r7
 801498e:	4650      	mov	r0, sl
 8014990:	4659      	mov	r1, fp
 8014992:	f7eb fc91 	bl	80002b8 <__aeabi_dsub>
 8014996:	ea4f 5328 	mov.w	r3, r8, asr #20
 801499a:	9305      	str	r3, [sp, #20]
 801499c:	9a05      	ldr	r2, [sp, #20]
 801499e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80149a2:	1ad3      	subs	r3, r2, r3
 80149a4:	2b10      	cmp	r3, #16
 80149a6:	dc02      	bgt.n	80149ae <__ieee754_rem_pio2+0x1be>
 80149a8:	e9c4 0100 	strd	r0, r1, [r4]
 80149ac:	e039      	b.n	8014a22 <__ieee754_rem_pio2+0x232>
 80149ae:	a34c      	add	r3, pc, #304	; (adr r3, 8014ae0 <__ieee754_rem_pio2+0x2f0>)
 80149b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149b8:	f7eb fe36 	bl	8000628 <__aeabi_dmul>
 80149bc:	4606      	mov	r6, r0
 80149be:	460f      	mov	r7, r1
 80149c0:	4602      	mov	r2, r0
 80149c2:	460b      	mov	r3, r1
 80149c4:	4650      	mov	r0, sl
 80149c6:	4659      	mov	r1, fp
 80149c8:	f7eb fc76 	bl	80002b8 <__aeabi_dsub>
 80149cc:	4602      	mov	r2, r0
 80149ce:	460b      	mov	r3, r1
 80149d0:	4680      	mov	r8, r0
 80149d2:	4689      	mov	r9, r1
 80149d4:	4650      	mov	r0, sl
 80149d6:	4659      	mov	r1, fp
 80149d8:	f7eb fc6e 	bl	80002b8 <__aeabi_dsub>
 80149dc:	4632      	mov	r2, r6
 80149de:	463b      	mov	r3, r7
 80149e0:	f7eb fc6a 	bl	80002b8 <__aeabi_dsub>
 80149e4:	a340      	add	r3, pc, #256	; (adr r3, 8014ae8 <__ieee754_rem_pio2+0x2f8>)
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	4606      	mov	r6, r0
 80149ec:	460f      	mov	r7, r1
 80149ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149f2:	f7eb fe19 	bl	8000628 <__aeabi_dmul>
 80149f6:	4632      	mov	r2, r6
 80149f8:	463b      	mov	r3, r7
 80149fa:	f7eb fc5d 	bl	80002b8 <__aeabi_dsub>
 80149fe:	4602      	mov	r2, r0
 8014a00:	460b      	mov	r3, r1
 8014a02:	4606      	mov	r6, r0
 8014a04:	460f      	mov	r7, r1
 8014a06:	4640      	mov	r0, r8
 8014a08:	4649      	mov	r1, r9
 8014a0a:	f7eb fc55 	bl	80002b8 <__aeabi_dsub>
 8014a0e:	9a05      	ldr	r2, [sp, #20]
 8014a10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a14:	1ad3      	subs	r3, r2, r3
 8014a16:	2b31      	cmp	r3, #49	; 0x31
 8014a18:	dc20      	bgt.n	8014a5c <__ieee754_rem_pio2+0x26c>
 8014a1a:	e9c4 0100 	strd	r0, r1, [r4]
 8014a1e:	46c2      	mov	sl, r8
 8014a20:	46cb      	mov	fp, r9
 8014a22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014a26:	4650      	mov	r0, sl
 8014a28:	4642      	mov	r2, r8
 8014a2a:	464b      	mov	r3, r9
 8014a2c:	4659      	mov	r1, fp
 8014a2e:	f7eb fc43 	bl	80002b8 <__aeabi_dsub>
 8014a32:	463b      	mov	r3, r7
 8014a34:	4632      	mov	r2, r6
 8014a36:	f7eb fc3f 	bl	80002b8 <__aeabi_dsub>
 8014a3a:	9b04      	ldr	r3, [sp, #16]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a42:	f6bf af11 	bge.w	8014868 <__ieee754_rem_pio2+0x78>
 8014a46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014a4a:	6063      	str	r3, [r4, #4]
 8014a4c:	f8c4 8000 	str.w	r8, [r4]
 8014a50:	60a0      	str	r0, [r4, #8]
 8014a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a56:	60e3      	str	r3, [r4, #12]
 8014a58:	426d      	negs	r5, r5
 8014a5a:	e705      	b.n	8014868 <__ieee754_rem_pio2+0x78>
 8014a5c:	a326      	add	r3, pc, #152	; (adr r3, 8014af8 <__ieee754_rem_pio2+0x308>)
 8014a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a66:	f7eb fddf 	bl	8000628 <__aeabi_dmul>
 8014a6a:	4606      	mov	r6, r0
 8014a6c:	460f      	mov	r7, r1
 8014a6e:	4602      	mov	r2, r0
 8014a70:	460b      	mov	r3, r1
 8014a72:	4640      	mov	r0, r8
 8014a74:	4649      	mov	r1, r9
 8014a76:	f7eb fc1f 	bl	80002b8 <__aeabi_dsub>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	4682      	mov	sl, r0
 8014a80:	468b      	mov	fp, r1
 8014a82:	4640      	mov	r0, r8
 8014a84:	4649      	mov	r1, r9
 8014a86:	f7eb fc17 	bl	80002b8 <__aeabi_dsub>
 8014a8a:	4632      	mov	r2, r6
 8014a8c:	463b      	mov	r3, r7
 8014a8e:	f7eb fc13 	bl	80002b8 <__aeabi_dsub>
 8014a92:	a31b      	add	r3, pc, #108	; (adr r3, 8014b00 <__ieee754_rem_pio2+0x310>)
 8014a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a98:	4606      	mov	r6, r0
 8014a9a:	460f      	mov	r7, r1
 8014a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aa0:	f7eb fdc2 	bl	8000628 <__aeabi_dmul>
 8014aa4:	4632      	mov	r2, r6
 8014aa6:	463b      	mov	r3, r7
 8014aa8:	f7eb fc06 	bl	80002b8 <__aeabi_dsub>
 8014aac:	4606      	mov	r6, r0
 8014aae:	460f      	mov	r7, r1
 8014ab0:	e764      	b.n	801497c <__ieee754_rem_pio2+0x18c>
 8014ab2:	4b1b      	ldr	r3, [pc, #108]	; (8014b20 <__ieee754_rem_pio2+0x330>)
 8014ab4:	4598      	cmp	r8, r3
 8014ab6:	dd35      	ble.n	8014b24 <__ieee754_rem_pio2+0x334>
 8014ab8:	ee10 2a10 	vmov	r2, s0
 8014abc:	463b      	mov	r3, r7
 8014abe:	4630      	mov	r0, r6
 8014ac0:	4639      	mov	r1, r7
 8014ac2:	f7eb fbf9 	bl	80002b8 <__aeabi_dsub>
 8014ac6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014aca:	e9c4 0100 	strd	r0, r1, [r4]
 8014ace:	e6a1      	b.n	8014814 <__ieee754_rem_pio2+0x24>
 8014ad0:	54400000 	.word	0x54400000
 8014ad4:	3ff921fb 	.word	0x3ff921fb
 8014ad8:	1a626331 	.word	0x1a626331
 8014adc:	3dd0b461 	.word	0x3dd0b461
 8014ae0:	1a600000 	.word	0x1a600000
 8014ae4:	3dd0b461 	.word	0x3dd0b461
 8014ae8:	2e037073 	.word	0x2e037073
 8014aec:	3ba3198a 	.word	0x3ba3198a
 8014af0:	6dc9c883 	.word	0x6dc9c883
 8014af4:	3fe45f30 	.word	0x3fe45f30
 8014af8:	2e000000 	.word	0x2e000000
 8014afc:	3ba3198a 	.word	0x3ba3198a
 8014b00:	252049c1 	.word	0x252049c1
 8014b04:	397b839a 	.word	0x397b839a
 8014b08:	3fe921fb 	.word	0x3fe921fb
 8014b0c:	4002d97b 	.word	0x4002d97b
 8014b10:	3ff921fb 	.word	0x3ff921fb
 8014b14:	413921fb 	.word	0x413921fb
 8014b18:	3fe00000 	.word	0x3fe00000
 8014b1c:	0801a084 	.word	0x0801a084
 8014b20:	7fefffff 	.word	0x7fefffff
 8014b24:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014b28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014b2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014b30:	4630      	mov	r0, r6
 8014b32:	460f      	mov	r7, r1
 8014b34:	f7ec f828 	bl	8000b88 <__aeabi_d2iz>
 8014b38:	f7eb fd0c 	bl	8000554 <__aeabi_i2d>
 8014b3c:	4602      	mov	r2, r0
 8014b3e:	460b      	mov	r3, r1
 8014b40:	4630      	mov	r0, r6
 8014b42:	4639      	mov	r1, r7
 8014b44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b48:	f7eb fbb6 	bl	80002b8 <__aeabi_dsub>
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	4b1f      	ldr	r3, [pc, #124]	; (8014bcc <__ieee754_rem_pio2+0x3dc>)
 8014b50:	f7eb fd6a 	bl	8000628 <__aeabi_dmul>
 8014b54:	460f      	mov	r7, r1
 8014b56:	4606      	mov	r6, r0
 8014b58:	f7ec f816 	bl	8000b88 <__aeabi_d2iz>
 8014b5c:	f7eb fcfa 	bl	8000554 <__aeabi_i2d>
 8014b60:	4602      	mov	r2, r0
 8014b62:	460b      	mov	r3, r1
 8014b64:	4630      	mov	r0, r6
 8014b66:	4639      	mov	r1, r7
 8014b68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b6c:	f7eb fba4 	bl	80002b8 <__aeabi_dsub>
 8014b70:	2200      	movs	r2, #0
 8014b72:	4b16      	ldr	r3, [pc, #88]	; (8014bcc <__ieee754_rem_pio2+0x3dc>)
 8014b74:	f7eb fd58 	bl	8000628 <__aeabi_dmul>
 8014b78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014b7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014b80:	f04f 0803 	mov.w	r8, #3
 8014b84:	2600      	movs	r6, #0
 8014b86:	2700      	movs	r7, #0
 8014b88:	4632      	mov	r2, r6
 8014b8a:	463b      	mov	r3, r7
 8014b8c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8014b94:	f7eb ffb0 	bl	8000af8 <__aeabi_dcmpeq>
 8014b98:	b9b0      	cbnz	r0, 8014bc8 <__ieee754_rem_pio2+0x3d8>
 8014b9a:	4b0d      	ldr	r3, [pc, #52]	; (8014bd0 <__ieee754_rem_pio2+0x3e0>)
 8014b9c:	9301      	str	r3, [sp, #4]
 8014b9e:	2302      	movs	r3, #2
 8014ba0:	9300      	str	r3, [sp, #0]
 8014ba2:	462a      	mov	r2, r5
 8014ba4:	4643      	mov	r3, r8
 8014ba6:	4621      	mov	r1, r4
 8014ba8:	a806      	add	r0, sp, #24
 8014baa:	f000 f8dd 	bl	8014d68 <__kernel_rem_pio2>
 8014bae:	9b04      	ldr	r3, [sp, #16]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	4605      	mov	r5, r0
 8014bb4:	f6bf ae58 	bge.w	8014868 <__ieee754_rem_pio2+0x78>
 8014bb8:	6863      	ldr	r3, [r4, #4]
 8014bba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014bbe:	6063      	str	r3, [r4, #4]
 8014bc0:	68e3      	ldr	r3, [r4, #12]
 8014bc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014bc6:	e746      	b.n	8014a56 <__ieee754_rem_pio2+0x266>
 8014bc8:	46d0      	mov	r8, sl
 8014bca:	e7dd      	b.n	8014b88 <__ieee754_rem_pio2+0x398>
 8014bcc:	41700000 	.word	0x41700000
 8014bd0:	0801a104 	.word	0x0801a104
 8014bd4:	00000000 	.word	0x00000000

08014bd8 <__kernel_cos>:
 8014bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bdc:	ec59 8b10 	vmov	r8, r9, d0
 8014be0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014be4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014be8:	ed2d 8b02 	vpush	{d8}
 8014bec:	eeb0 8a41 	vmov.f32	s16, s2
 8014bf0:	eef0 8a61 	vmov.f32	s17, s3
 8014bf4:	da07      	bge.n	8014c06 <__kernel_cos+0x2e>
 8014bf6:	ee10 0a10 	vmov	r0, s0
 8014bfa:	4649      	mov	r1, r9
 8014bfc:	f7eb ffc4 	bl	8000b88 <__aeabi_d2iz>
 8014c00:	2800      	cmp	r0, #0
 8014c02:	f000 8089 	beq.w	8014d18 <__kernel_cos+0x140>
 8014c06:	4642      	mov	r2, r8
 8014c08:	464b      	mov	r3, r9
 8014c0a:	4640      	mov	r0, r8
 8014c0c:	4649      	mov	r1, r9
 8014c0e:	f7eb fd0b 	bl	8000628 <__aeabi_dmul>
 8014c12:	2200      	movs	r2, #0
 8014c14:	4b4e      	ldr	r3, [pc, #312]	; (8014d50 <__kernel_cos+0x178>)
 8014c16:	4604      	mov	r4, r0
 8014c18:	460d      	mov	r5, r1
 8014c1a:	f7eb fd05 	bl	8000628 <__aeabi_dmul>
 8014c1e:	a340      	add	r3, pc, #256	; (adr r3, 8014d20 <__kernel_cos+0x148>)
 8014c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c24:	4682      	mov	sl, r0
 8014c26:	468b      	mov	fp, r1
 8014c28:	4620      	mov	r0, r4
 8014c2a:	4629      	mov	r1, r5
 8014c2c:	f7eb fcfc 	bl	8000628 <__aeabi_dmul>
 8014c30:	a33d      	add	r3, pc, #244	; (adr r3, 8014d28 <__kernel_cos+0x150>)
 8014c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c36:	f7eb fb41 	bl	80002bc <__adddf3>
 8014c3a:	4622      	mov	r2, r4
 8014c3c:	462b      	mov	r3, r5
 8014c3e:	f7eb fcf3 	bl	8000628 <__aeabi_dmul>
 8014c42:	a33b      	add	r3, pc, #236	; (adr r3, 8014d30 <__kernel_cos+0x158>)
 8014c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c48:	f7eb fb36 	bl	80002b8 <__aeabi_dsub>
 8014c4c:	4622      	mov	r2, r4
 8014c4e:	462b      	mov	r3, r5
 8014c50:	f7eb fcea 	bl	8000628 <__aeabi_dmul>
 8014c54:	a338      	add	r3, pc, #224	; (adr r3, 8014d38 <__kernel_cos+0x160>)
 8014c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c5a:	f7eb fb2f 	bl	80002bc <__adddf3>
 8014c5e:	4622      	mov	r2, r4
 8014c60:	462b      	mov	r3, r5
 8014c62:	f7eb fce1 	bl	8000628 <__aeabi_dmul>
 8014c66:	a336      	add	r3, pc, #216	; (adr r3, 8014d40 <__kernel_cos+0x168>)
 8014c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6c:	f7eb fb24 	bl	80002b8 <__aeabi_dsub>
 8014c70:	4622      	mov	r2, r4
 8014c72:	462b      	mov	r3, r5
 8014c74:	f7eb fcd8 	bl	8000628 <__aeabi_dmul>
 8014c78:	a333      	add	r3, pc, #204	; (adr r3, 8014d48 <__kernel_cos+0x170>)
 8014c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7e:	f7eb fb1d 	bl	80002bc <__adddf3>
 8014c82:	4622      	mov	r2, r4
 8014c84:	462b      	mov	r3, r5
 8014c86:	f7eb fccf 	bl	8000628 <__aeabi_dmul>
 8014c8a:	4622      	mov	r2, r4
 8014c8c:	462b      	mov	r3, r5
 8014c8e:	f7eb fccb 	bl	8000628 <__aeabi_dmul>
 8014c92:	ec53 2b18 	vmov	r2, r3, d8
 8014c96:	4604      	mov	r4, r0
 8014c98:	460d      	mov	r5, r1
 8014c9a:	4640      	mov	r0, r8
 8014c9c:	4649      	mov	r1, r9
 8014c9e:	f7eb fcc3 	bl	8000628 <__aeabi_dmul>
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f7eb fb05 	bl	80002b8 <__aeabi_dsub>
 8014cae:	4b29      	ldr	r3, [pc, #164]	; (8014d54 <__kernel_cos+0x17c>)
 8014cb0:	429e      	cmp	r6, r3
 8014cb2:	4680      	mov	r8, r0
 8014cb4:	4689      	mov	r9, r1
 8014cb6:	dc11      	bgt.n	8014cdc <__kernel_cos+0x104>
 8014cb8:	4602      	mov	r2, r0
 8014cba:	460b      	mov	r3, r1
 8014cbc:	4650      	mov	r0, sl
 8014cbe:	4659      	mov	r1, fp
 8014cc0:	f7eb fafa 	bl	80002b8 <__aeabi_dsub>
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	4924      	ldr	r1, [pc, #144]	; (8014d58 <__kernel_cos+0x180>)
 8014cc8:	4602      	mov	r2, r0
 8014cca:	2000      	movs	r0, #0
 8014ccc:	f7eb faf4 	bl	80002b8 <__aeabi_dsub>
 8014cd0:	ecbd 8b02 	vpop	{d8}
 8014cd4:	ec41 0b10 	vmov	d0, r0, r1
 8014cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cdc:	4b1f      	ldr	r3, [pc, #124]	; (8014d5c <__kernel_cos+0x184>)
 8014cde:	491e      	ldr	r1, [pc, #120]	; (8014d58 <__kernel_cos+0x180>)
 8014ce0:	429e      	cmp	r6, r3
 8014ce2:	bfcc      	ite	gt
 8014ce4:	4d1e      	ldrgt	r5, [pc, #120]	; (8014d60 <__kernel_cos+0x188>)
 8014ce6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014cea:	2400      	movs	r4, #0
 8014cec:	4622      	mov	r2, r4
 8014cee:	462b      	mov	r3, r5
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	f7eb fae1 	bl	80002b8 <__aeabi_dsub>
 8014cf6:	4622      	mov	r2, r4
 8014cf8:	4606      	mov	r6, r0
 8014cfa:	460f      	mov	r7, r1
 8014cfc:	462b      	mov	r3, r5
 8014cfe:	4650      	mov	r0, sl
 8014d00:	4659      	mov	r1, fp
 8014d02:	f7eb fad9 	bl	80002b8 <__aeabi_dsub>
 8014d06:	4642      	mov	r2, r8
 8014d08:	464b      	mov	r3, r9
 8014d0a:	f7eb fad5 	bl	80002b8 <__aeabi_dsub>
 8014d0e:	4602      	mov	r2, r0
 8014d10:	460b      	mov	r3, r1
 8014d12:	4630      	mov	r0, r6
 8014d14:	4639      	mov	r1, r7
 8014d16:	e7d9      	b.n	8014ccc <__kernel_cos+0xf4>
 8014d18:	2000      	movs	r0, #0
 8014d1a:	490f      	ldr	r1, [pc, #60]	; (8014d58 <__kernel_cos+0x180>)
 8014d1c:	e7d8      	b.n	8014cd0 <__kernel_cos+0xf8>
 8014d1e:	bf00      	nop
 8014d20:	be8838d4 	.word	0xbe8838d4
 8014d24:	bda8fae9 	.word	0xbda8fae9
 8014d28:	bdb4b1c4 	.word	0xbdb4b1c4
 8014d2c:	3e21ee9e 	.word	0x3e21ee9e
 8014d30:	809c52ad 	.word	0x809c52ad
 8014d34:	3e927e4f 	.word	0x3e927e4f
 8014d38:	19cb1590 	.word	0x19cb1590
 8014d3c:	3efa01a0 	.word	0x3efa01a0
 8014d40:	16c15177 	.word	0x16c15177
 8014d44:	3f56c16c 	.word	0x3f56c16c
 8014d48:	5555554c 	.word	0x5555554c
 8014d4c:	3fa55555 	.word	0x3fa55555
 8014d50:	3fe00000 	.word	0x3fe00000
 8014d54:	3fd33332 	.word	0x3fd33332
 8014d58:	3ff00000 	.word	0x3ff00000
 8014d5c:	3fe90000 	.word	0x3fe90000
 8014d60:	3fd20000 	.word	0x3fd20000
 8014d64:	00000000 	.word	0x00000000

08014d68 <__kernel_rem_pio2>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	ed2d 8b02 	vpush	{d8}
 8014d70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014d74:	1ed4      	subs	r4, r2, #3
 8014d76:	9308      	str	r3, [sp, #32]
 8014d78:	9101      	str	r1, [sp, #4]
 8014d7a:	4bc5      	ldr	r3, [pc, #788]	; (8015090 <__kernel_rem_pio2+0x328>)
 8014d7c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014d7e:	9009      	str	r0, [sp, #36]	; 0x24
 8014d80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d84:	9304      	str	r3, [sp, #16]
 8014d86:	9b08      	ldr	r3, [sp, #32]
 8014d88:	3b01      	subs	r3, #1
 8014d8a:	9307      	str	r3, [sp, #28]
 8014d8c:	2318      	movs	r3, #24
 8014d8e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014d92:	f06f 0317 	mvn.w	r3, #23
 8014d96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014d9a:	fb04 3303 	mla	r3, r4, r3, r3
 8014d9e:	eb03 0a02 	add.w	sl, r3, r2
 8014da2:	9b04      	ldr	r3, [sp, #16]
 8014da4:	9a07      	ldr	r2, [sp, #28]
 8014da6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015080 <__kernel_rem_pio2+0x318>
 8014daa:	eb03 0802 	add.w	r8, r3, r2
 8014dae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014db0:	1aa7      	subs	r7, r4, r2
 8014db2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014db6:	ae22      	add	r6, sp, #136	; 0x88
 8014db8:	2500      	movs	r5, #0
 8014dba:	4545      	cmp	r5, r8
 8014dbc:	dd13      	ble.n	8014de6 <__kernel_rem_pio2+0x7e>
 8014dbe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015080 <__kernel_rem_pio2+0x318>
 8014dc2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014dc6:	2600      	movs	r6, #0
 8014dc8:	9b04      	ldr	r3, [sp, #16]
 8014dca:	429e      	cmp	r6, r3
 8014dcc:	dc32      	bgt.n	8014e34 <__kernel_rem_pio2+0xcc>
 8014dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dd0:	9302      	str	r3, [sp, #8]
 8014dd2:	9b08      	ldr	r3, [sp, #32]
 8014dd4:	199d      	adds	r5, r3, r6
 8014dd6:	ab22      	add	r3, sp, #136	; 0x88
 8014dd8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014ddc:	9306      	str	r3, [sp, #24]
 8014dde:	ec59 8b18 	vmov	r8, r9, d8
 8014de2:	2700      	movs	r7, #0
 8014de4:	e01f      	b.n	8014e26 <__kernel_rem_pio2+0xbe>
 8014de6:	42ef      	cmn	r7, r5
 8014de8:	d407      	bmi.n	8014dfa <__kernel_rem_pio2+0x92>
 8014dea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014dee:	f7eb fbb1 	bl	8000554 <__aeabi_i2d>
 8014df2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014df6:	3501      	adds	r5, #1
 8014df8:	e7df      	b.n	8014dba <__kernel_rem_pio2+0x52>
 8014dfa:	ec51 0b18 	vmov	r0, r1, d8
 8014dfe:	e7f8      	b.n	8014df2 <__kernel_rem_pio2+0x8a>
 8014e00:	9906      	ldr	r1, [sp, #24]
 8014e02:	9d02      	ldr	r5, [sp, #8]
 8014e04:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014e08:	9106      	str	r1, [sp, #24]
 8014e0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014e0e:	9502      	str	r5, [sp, #8]
 8014e10:	f7eb fc0a 	bl	8000628 <__aeabi_dmul>
 8014e14:	4602      	mov	r2, r0
 8014e16:	460b      	mov	r3, r1
 8014e18:	4640      	mov	r0, r8
 8014e1a:	4649      	mov	r1, r9
 8014e1c:	f7eb fa4e 	bl	80002bc <__adddf3>
 8014e20:	3701      	adds	r7, #1
 8014e22:	4680      	mov	r8, r0
 8014e24:	4689      	mov	r9, r1
 8014e26:	9b07      	ldr	r3, [sp, #28]
 8014e28:	429f      	cmp	r7, r3
 8014e2a:	dde9      	ble.n	8014e00 <__kernel_rem_pio2+0x98>
 8014e2c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014e30:	3601      	adds	r6, #1
 8014e32:	e7c9      	b.n	8014dc8 <__kernel_rem_pio2+0x60>
 8014e34:	9b04      	ldr	r3, [sp, #16]
 8014e36:	aa0e      	add	r2, sp, #56	; 0x38
 8014e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8014e3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014e40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014e44:	9c04      	ldr	r4, [sp, #16]
 8014e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e48:	ab9a      	add	r3, sp, #616	; 0x268
 8014e4a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014e4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e56:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014e5a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014e5e:	ab9a      	add	r3, sp, #616	; 0x268
 8014e60:	445b      	add	r3, fp
 8014e62:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014e66:	2500      	movs	r5, #0
 8014e68:	1b63      	subs	r3, r4, r5
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	dc78      	bgt.n	8014f60 <__kernel_rem_pio2+0x1f8>
 8014e6e:	4650      	mov	r0, sl
 8014e70:	ec49 8b10 	vmov	d0, r8, r9
 8014e74:	f000 fc00 	bl	8015678 <scalbn>
 8014e78:	ec57 6b10 	vmov	r6, r7, d0
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014e82:	ee10 0a10 	vmov	r0, s0
 8014e86:	4639      	mov	r1, r7
 8014e88:	f7eb fbce 	bl	8000628 <__aeabi_dmul>
 8014e8c:	ec41 0b10 	vmov	d0, r0, r1
 8014e90:	f000 fb6e 	bl	8015570 <floor>
 8014e94:	2200      	movs	r2, #0
 8014e96:	ec51 0b10 	vmov	r0, r1, d0
 8014e9a:	4b7e      	ldr	r3, [pc, #504]	; (8015094 <__kernel_rem_pio2+0x32c>)
 8014e9c:	f7eb fbc4 	bl	8000628 <__aeabi_dmul>
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	460b      	mov	r3, r1
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	4639      	mov	r1, r7
 8014ea8:	f7eb fa06 	bl	80002b8 <__aeabi_dsub>
 8014eac:	460f      	mov	r7, r1
 8014eae:	4606      	mov	r6, r0
 8014eb0:	f7eb fe6a 	bl	8000b88 <__aeabi_d2iz>
 8014eb4:	9006      	str	r0, [sp, #24]
 8014eb6:	f7eb fb4d 	bl	8000554 <__aeabi_i2d>
 8014eba:	4602      	mov	r2, r0
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	4630      	mov	r0, r6
 8014ec0:	4639      	mov	r1, r7
 8014ec2:	f7eb f9f9 	bl	80002b8 <__aeabi_dsub>
 8014ec6:	f1ba 0f00 	cmp.w	sl, #0
 8014eca:	4606      	mov	r6, r0
 8014ecc:	460f      	mov	r7, r1
 8014ece:	dd6c      	ble.n	8014faa <__kernel_rem_pio2+0x242>
 8014ed0:	1e62      	subs	r2, r4, #1
 8014ed2:	ab0e      	add	r3, sp, #56	; 0x38
 8014ed4:	f1ca 0118 	rsb	r1, sl, #24
 8014ed8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014edc:	9d06      	ldr	r5, [sp, #24]
 8014ede:	fa40 f301 	asr.w	r3, r0, r1
 8014ee2:	441d      	add	r5, r3
 8014ee4:	408b      	lsls	r3, r1
 8014ee6:	1ac0      	subs	r0, r0, r3
 8014ee8:	ab0e      	add	r3, sp, #56	; 0x38
 8014eea:	9506      	str	r5, [sp, #24]
 8014eec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014ef0:	f1ca 0317 	rsb	r3, sl, #23
 8014ef4:	fa40 f303 	asr.w	r3, r0, r3
 8014ef8:	9302      	str	r3, [sp, #8]
 8014efa:	9b02      	ldr	r3, [sp, #8]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	dd62      	ble.n	8014fc6 <__kernel_rem_pio2+0x25e>
 8014f00:	9b06      	ldr	r3, [sp, #24]
 8014f02:	2200      	movs	r2, #0
 8014f04:	3301      	adds	r3, #1
 8014f06:	9306      	str	r3, [sp, #24]
 8014f08:	4615      	mov	r5, r2
 8014f0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014f0e:	4294      	cmp	r4, r2
 8014f10:	f300 8095 	bgt.w	801503e <__kernel_rem_pio2+0x2d6>
 8014f14:	f1ba 0f00 	cmp.w	sl, #0
 8014f18:	dd07      	ble.n	8014f2a <__kernel_rem_pio2+0x1c2>
 8014f1a:	f1ba 0f01 	cmp.w	sl, #1
 8014f1e:	f000 80a2 	beq.w	8015066 <__kernel_rem_pio2+0x2fe>
 8014f22:	f1ba 0f02 	cmp.w	sl, #2
 8014f26:	f000 80c1 	beq.w	80150ac <__kernel_rem_pio2+0x344>
 8014f2a:	9b02      	ldr	r3, [sp, #8]
 8014f2c:	2b02      	cmp	r3, #2
 8014f2e:	d14a      	bne.n	8014fc6 <__kernel_rem_pio2+0x25e>
 8014f30:	4632      	mov	r2, r6
 8014f32:	463b      	mov	r3, r7
 8014f34:	2000      	movs	r0, #0
 8014f36:	4958      	ldr	r1, [pc, #352]	; (8015098 <__kernel_rem_pio2+0x330>)
 8014f38:	f7eb f9be 	bl	80002b8 <__aeabi_dsub>
 8014f3c:	4606      	mov	r6, r0
 8014f3e:	460f      	mov	r7, r1
 8014f40:	2d00      	cmp	r5, #0
 8014f42:	d040      	beq.n	8014fc6 <__kernel_rem_pio2+0x25e>
 8014f44:	4650      	mov	r0, sl
 8014f46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015088 <__kernel_rem_pio2+0x320>
 8014f4a:	f000 fb95 	bl	8015678 <scalbn>
 8014f4e:	4630      	mov	r0, r6
 8014f50:	4639      	mov	r1, r7
 8014f52:	ec53 2b10 	vmov	r2, r3, d0
 8014f56:	f7eb f9af 	bl	80002b8 <__aeabi_dsub>
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	460f      	mov	r7, r1
 8014f5e:	e032      	b.n	8014fc6 <__kernel_rem_pio2+0x25e>
 8014f60:	2200      	movs	r2, #0
 8014f62:	4b4e      	ldr	r3, [pc, #312]	; (801509c <__kernel_rem_pio2+0x334>)
 8014f64:	4640      	mov	r0, r8
 8014f66:	4649      	mov	r1, r9
 8014f68:	f7eb fb5e 	bl	8000628 <__aeabi_dmul>
 8014f6c:	f7eb fe0c 	bl	8000b88 <__aeabi_d2iz>
 8014f70:	f7eb faf0 	bl	8000554 <__aeabi_i2d>
 8014f74:	2200      	movs	r2, #0
 8014f76:	4b4a      	ldr	r3, [pc, #296]	; (80150a0 <__kernel_rem_pio2+0x338>)
 8014f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f7c:	f7eb fb54 	bl	8000628 <__aeabi_dmul>
 8014f80:	4602      	mov	r2, r0
 8014f82:	460b      	mov	r3, r1
 8014f84:	4640      	mov	r0, r8
 8014f86:	4649      	mov	r1, r9
 8014f88:	f7eb f996 	bl	80002b8 <__aeabi_dsub>
 8014f8c:	f7eb fdfc 	bl	8000b88 <__aeabi_d2iz>
 8014f90:	ab0e      	add	r3, sp, #56	; 0x38
 8014f92:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014f96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f9e:	f7eb f98d 	bl	80002bc <__adddf3>
 8014fa2:	3501      	adds	r5, #1
 8014fa4:	4680      	mov	r8, r0
 8014fa6:	4689      	mov	r9, r1
 8014fa8:	e75e      	b.n	8014e68 <__kernel_rem_pio2+0x100>
 8014faa:	d105      	bne.n	8014fb8 <__kernel_rem_pio2+0x250>
 8014fac:	1e63      	subs	r3, r4, #1
 8014fae:	aa0e      	add	r2, sp, #56	; 0x38
 8014fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014fb4:	15c3      	asrs	r3, r0, #23
 8014fb6:	e79f      	b.n	8014ef8 <__kernel_rem_pio2+0x190>
 8014fb8:	2200      	movs	r2, #0
 8014fba:	4b3a      	ldr	r3, [pc, #232]	; (80150a4 <__kernel_rem_pio2+0x33c>)
 8014fbc:	f7eb fdba 	bl	8000b34 <__aeabi_dcmpge>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d139      	bne.n	8015038 <__kernel_rem_pio2+0x2d0>
 8014fc4:	9002      	str	r0, [sp, #8]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	2300      	movs	r3, #0
 8014fca:	4630      	mov	r0, r6
 8014fcc:	4639      	mov	r1, r7
 8014fce:	f7eb fd93 	bl	8000af8 <__aeabi_dcmpeq>
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	f000 80c7 	beq.w	8015166 <__kernel_rem_pio2+0x3fe>
 8014fd8:	1e65      	subs	r5, r4, #1
 8014fda:	462b      	mov	r3, r5
 8014fdc:	2200      	movs	r2, #0
 8014fde:	9904      	ldr	r1, [sp, #16]
 8014fe0:	428b      	cmp	r3, r1
 8014fe2:	da6a      	bge.n	80150ba <__kernel_rem_pio2+0x352>
 8014fe4:	2a00      	cmp	r2, #0
 8014fe6:	f000 8088 	beq.w	80150fa <__kernel_rem_pio2+0x392>
 8014fea:	ab0e      	add	r3, sp, #56	; 0x38
 8014fec:	f1aa 0a18 	sub.w	sl, sl, #24
 8014ff0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	f000 80b4 	beq.w	8015162 <__kernel_rem_pio2+0x3fa>
 8014ffa:	4650      	mov	r0, sl
 8014ffc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015088 <__kernel_rem_pio2+0x320>
 8015000:	f000 fb3a 	bl	8015678 <scalbn>
 8015004:	00ec      	lsls	r4, r5, #3
 8015006:	ab72      	add	r3, sp, #456	; 0x1c8
 8015008:	191e      	adds	r6, r3, r4
 801500a:	ec59 8b10 	vmov	r8, r9, d0
 801500e:	f106 0a08 	add.w	sl, r6, #8
 8015012:	462f      	mov	r7, r5
 8015014:	2f00      	cmp	r7, #0
 8015016:	f280 80df 	bge.w	80151d8 <__kernel_rem_pio2+0x470>
 801501a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015080 <__kernel_rem_pio2+0x318>
 801501e:	f04f 0a00 	mov.w	sl, #0
 8015022:	eba5 030a 	sub.w	r3, r5, sl
 8015026:	2b00      	cmp	r3, #0
 8015028:	f2c0 810a 	blt.w	8015240 <__kernel_rem_pio2+0x4d8>
 801502c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80150a8 <__kernel_rem_pio2+0x340>
 8015030:	ec59 8b18 	vmov	r8, r9, d8
 8015034:	2700      	movs	r7, #0
 8015036:	e0f5      	b.n	8015224 <__kernel_rem_pio2+0x4bc>
 8015038:	2302      	movs	r3, #2
 801503a:	9302      	str	r3, [sp, #8]
 801503c:	e760      	b.n	8014f00 <__kernel_rem_pio2+0x198>
 801503e:	ab0e      	add	r3, sp, #56	; 0x38
 8015040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015044:	b94d      	cbnz	r5, 801505a <__kernel_rem_pio2+0x2f2>
 8015046:	b12b      	cbz	r3, 8015054 <__kernel_rem_pio2+0x2ec>
 8015048:	a80e      	add	r0, sp, #56	; 0x38
 801504a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801504e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015052:	2301      	movs	r3, #1
 8015054:	3201      	adds	r2, #1
 8015056:	461d      	mov	r5, r3
 8015058:	e759      	b.n	8014f0e <__kernel_rem_pio2+0x1a6>
 801505a:	a80e      	add	r0, sp, #56	; 0x38
 801505c:	1acb      	subs	r3, r1, r3
 801505e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015062:	462b      	mov	r3, r5
 8015064:	e7f6      	b.n	8015054 <__kernel_rem_pio2+0x2ec>
 8015066:	1e62      	subs	r2, r4, #1
 8015068:	ab0e      	add	r3, sp, #56	; 0x38
 801506a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801506e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015072:	a90e      	add	r1, sp, #56	; 0x38
 8015074:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015078:	e757      	b.n	8014f2a <__kernel_rem_pio2+0x1c2>
 801507a:	bf00      	nop
 801507c:	f3af 8000 	nop.w
	...
 801508c:	3ff00000 	.word	0x3ff00000
 8015090:	0801a250 	.word	0x0801a250
 8015094:	40200000 	.word	0x40200000
 8015098:	3ff00000 	.word	0x3ff00000
 801509c:	3e700000 	.word	0x3e700000
 80150a0:	41700000 	.word	0x41700000
 80150a4:	3fe00000 	.word	0x3fe00000
 80150a8:	0801a210 	.word	0x0801a210
 80150ac:	1e62      	subs	r2, r4, #1
 80150ae:	ab0e      	add	r3, sp, #56	; 0x38
 80150b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80150b8:	e7db      	b.n	8015072 <__kernel_rem_pio2+0x30a>
 80150ba:	a90e      	add	r1, sp, #56	; 0x38
 80150bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80150c0:	3b01      	subs	r3, #1
 80150c2:	430a      	orrs	r2, r1
 80150c4:	e78b      	b.n	8014fde <__kernel_rem_pio2+0x276>
 80150c6:	3301      	adds	r3, #1
 80150c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80150cc:	2900      	cmp	r1, #0
 80150ce:	d0fa      	beq.n	80150c6 <__kernel_rem_pio2+0x35e>
 80150d0:	9a08      	ldr	r2, [sp, #32]
 80150d2:	4422      	add	r2, r4
 80150d4:	00d2      	lsls	r2, r2, #3
 80150d6:	a922      	add	r1, sp, #136	; 0x88
 80150d8:	18e3      	adds	r3, r4, r3
 80150da:	9206      	str	r2, [sp, #24]
 80150dc:	440a      	add	r2, r1
 80150de:	9302      	str	r3, [sp, #8]
 80150e0:	f10b 0108 	add.w	r1, fp, #8
 80150e4:	f102 0308 	add.w	r3, r2, #8
 80150e8:	1c66      	adds	r6, r4, #1
 80150ea:	910a      	str	r1, [sp, #40]	; 0x28
 80150ec:	2500      	movs	r5, #0
 80150ee:	930d      	str	r3, [sp, #52]	; 0x34
 80150f0:	9b02      	ldr	r3, [sp, #8]
 80150f2:	42b3      	cmp	r3, r6
 80150f4:	da04      	bge.n	8015100 <__kernel_rem_pio2+0x398>
 80150f6:	461c      	mov	r4, r3
 80150f8:	e6a6      	b.n	8014e48 <__kernel_rem_pio2+0xe0>
 80150fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150fc:	2301      	movs	r3, #1
 80150fe:	e7e3      	b.n	80150c8 <__kernel_rem_pio2+0x360>
 8015100:	9b06      	ldr	r3, [sp, #24]
 8015102:	18ef      	adds	r7, r5, r3
 8015104:	ab22      	add	r3, sp, #136	; 0x88
 8015106:	441f      	add	r7, r3
 8015108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801510a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801510e:	f7eb fa21 	bl	8000554 <__aeabi_i2d>
 8015112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015114:	461c      	mov	r4, r3
 8015116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015118:	e9c7 0100 	strd	r0, r1, [r7]
 801511c:	eb03 0b05 	add.w	fp, r3, r5
 8015120:	2700      	movs	r7, #0
 8015122:	f04f 0800 	mov.w	r8, #0
 8015126:	f04f 0900 	mov.w	r9, #0
 801512a:	9b07      	ldr	r3, [sp, #28]
 801512c:	429f      	cmp	r7, r3
 801512e:	dd08      	ble.n	8015142 <__kernel_rem_pio2+0x3da>
 8015130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015132:	aa72      	add	r2, sp, #456	; 0x1c8
 8015134:	18eb      	adds	r3, r5, r3
 8015136:	4413      	add	r3, r2
 8015138:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801513c:	3601      	adds	r6, #1
 801513e:	3508      	adds	r5, #8
 8015140:	e7d6      	b.n	80150f0 <__kernel_rem_pio2+0x388>
 8015142:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015146:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801514a:	f7eb fa6d 	bl	8000628 <__aeabi_dmul>
 801514e:	4602      	mov	r2, r0
 8015150:	460b      	mov	r3, r1
 8015152:	4640      	mov	r0, r8
 8015154:	4649      	mov	r1, r9
 8015156:	f7eb f8b1 	bl	80002bc <__adddf3>
 801515a:	3701      	adds	r7, #1
 801515c:	4680      	mov	r8, r0
 801515e:	4689      	mov	r9, r1
 8015160:	e7e3      	b.n	801512a <__kernel_rem_pio2+0x3c2>
 8015162:	3d01      	subs	r5, #1
 8015164:	e741      	b.n	8014fea <__kernel_rem_pio2+0x282>
 8015166:	f1ca 0000 	rsb	r0, sl, #0
 801516a:	ec47 6b10 	vmov	d0, r6, r7
 801516e:	f000 fa83 	bl	8015678 <scalbn>
 8015172:	ec57 6b10 	vmov	r6, r7, d0
 8015176:	2200      	movs	r2, #0
 8015178:	4b99      	ldr	r3, [pc, #612]	; (80153e0 <__kernel_rem_pio2+0x678>)
 801517a:	ee10 0a10 	vmov	r0, s0
 801517e:	4639      	mov	r1, r7
 8015180:	f7eb fcd8 	bl	8000b34 <__aeabi_dcmpge>
 8015184:	b1f8      	cbz	r0, 80151c6 <__kernel_rem_pio2+0x45e>
 8015186:	2200      	movs	r2, #0
 8015188:	4b96      	ldr	r3, [pc, #600]	; (80153e4 <__kernel_rem_pio2+0x67c>)
 801518a:	4630      	mov	r0, r6
 801518c:	4639      	mov	r1, r7
 801518e:	f7eb fa4b 	bl	8000628 <__aeabi_dmul>
 8015192:	f7eb fcf9 	bl	8000b88 <__aeabi_d2iz>
 8015196:	4680      	mov	r8, r0
 8015198:	f7eb f9dc 	bl	8000554 <__aeabi_i2d>
 801519c:	2200      	movs	r2, #0
 801519e:	4b90      	ldr	r3, [pc, #576]	; (80153e0 <__kernel_rem_pio2+0x678>)
 80151a0:	f7eb fa42 	bl	8000628 <__aeabi_dmul>
 80151a4:	460b      	mov	r3, r1
 80151a6:	4602      	mov	r2, r0
 80151a8:	4639      	mov	r1, r7
 80151aa:	4630      	mov	r0, r6
 80151ac:	f7eb f884 	bl	80002b8 <__aeabi_dsub>
 80151b0:	f7eb fcea 	bl	8000b88 <__aeabi_d2iz>
 80151b4:	1c65      	adds	r5, r4, #1
 80151b6:	ab0e      	add	r3, sp, #56	; 0x38
 80151b8:	f10a 0a18 	add.w	sl, sl, #24
 80151bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80151c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80151c4:	e719      	b.n	8014ffa <__kernel_rem_pio2+0x292>
 80151c6:	4630      	mov	r0, r6
 80151c8:	4639      	mov	r1, r7
 80151ca:	f7eb fcdd 	bl	8000b88 <__aeabi_d2iz>
 80151ce:	ab0e      	add	r3, sp, #56	; 0x38
 80151d0:	4625      	mov	r5, r4
 80151d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80151d6:	e710      	b.n	8014ffa <__kernel_rem_pio2+0x292>
 80151d8:	ab0e      	add	r3, sp, #56	; 0x38
 80151da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80151de:	f7eb f9b9 	bl	8000554 <__aeabi_i2d>
 80151e2:	4642      	mov	r2, r8
 80151e4:	464b      	mov	r3, r9
 80151e6:	f7eb fa1f 	bl	8000628 <__aeabi_dmul>
 80151ea:	2200      	movs	r2, #0
 80151ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80151f0:	4b7c      	ldr	r3, [pc, #496]	; (80153e4 <__kernel_rem_pio2+0x67c>)
 80151f2:	4640      	mov	r0, r8
 80151f4:	4649      	mov	r1, r9
 80151f6:	f7eb fa17 	bl	8000628 <__aeabi_dmul>
 80151fa:	3f01      	subs	r7, #1
 80151fc:	4680      	mov	r8, r0
 80151fe:	4689      	mov	r9, r1
 8015200:	e708      	b.n	8015014 <__kernel_rem_pio2+0x2ac>
 8015202:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8015206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801520e:	f7eb fa0b 	bl	8000628 <__aeabi_dmul>
 8015212:	4602      	mov	r2, r0
 8015214:	460b      	mov	r3, r1
 8015216:	4640      	mov	r0, r8
 8015218:	4649      	mov	r1, r9
 801521a:	f7eb f84f 	bl	80002bc <__adddf3>
 801521e:	3701      	adds	r7, #1
 8015220:	4680      	mov	r8, r0
 8015222:	4689      	mov	r9, r1
 8015224:	9b04      	ldr	r3, [sp, #16]
 8015226:	429f      	cmp	r7, r3
 8015228:	dc01      	bgt.n	801522e <__kernel_rem_pio2+0x4c6>
 801522a:	45ba      	cmp	sl, r7
 801522c:	dae9      	bge.n	8015202 <__kernel_rem_pio2+0x49a>
 801522e:	ab4a      	add	r3, sp, #296	; 0x128
 8015230:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015234:	e9c3 8900 	strd	r8, r9, [r3]
 8015238:	f10a 0a01 	add.w	sl, sl, #1
 801523c:	3e08      	subs	r6, #8
 801523e:	e6f0      	b.n	8015022 <__kernel_rem_pio2+0x2ba>
 8015240:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015242:	2b03      	cmp	r3, #3
 8015244:	d85b      	bhi.n	80152fe <__kernel_rem_pio2+0x596>
 8015246:	e8df f003 	tbb	[pc, r3]
 801524a:	264a      	.short	0x264a
 801524c:	0226      	.short	0x0226
 801524e:	ab9a      	add	r3, sp, #616	; 0x268
 8015250:	441c      	add	r4, r3
 8015252:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015256:	46a2      	mov	sl, r4
 8015258:	46ab      	mov	fp, r5
 801525a:	f1bb 0f00 	cmp.w	fp, #0
 801525e:	dc6c      	bgt.n	801533a <__kernel_rem_pio2+0x5d2>
 8015260:	46a2      	mov	sl, r4
 8015262:	46ab      	mov	fp, r5
 8015264:	f1bb 0f01 	cmp.w	fp, #1
 8015268:	f300 8086 	bgt.w	8015378 <__kernel_rem_pio2+0x610>
 801526c:	2000      	movs	r0, #0
 801526e:	2100      	movs	r1, #0
 8015270:	2d01      	cmp	r5, #1
 8015272:	f300 80a0 	bgt.w	80153b6 <__kernel_rem_pio2+0x64e>
 8015276:	9b02      	ldr	r3, [sp, #8]
 8015278:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801527c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015280:	2b00      	cmp	r3, #0
 8015282:	f040 809e 	bne.w	80153c2 <__kernel_rem_pio2+0x65a>
 8015286:	9b01      	ldr	r3, [sp, #4]
 8015288:	e9c3 7800 	strd	r7, r8, [r3]
 801528c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015290:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015294:	e033      	b.n	80152fe <__kernel_rem_pio2+0x596>
 8015296:	3408      	adds	r4, #8
 8015298:	ab4a      	add	r3, sp, #296	; 0x128
 801529a:	441c      	add	r4, r3
 801529c:	462e      	mov	r6, r5
 801529e:	2000      	movs	r0, #0
 80152a0:	2100      	movs	r1, #0
 80152a2:	2e00      	cmp	r6, #0
 80152a4:	da3a      	bge.n	801531c <__kernel_rem_pio2+0x5b4>
 80152a6:	9b02      	ldr	r3, [sp, #8]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d03d      	beq.n	8015328 <__kernel_rem_pio2+0x5c0>
 80152ac:	4602      	mov	r2, r0
 80152ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152b2:	9c01      	ldr	r4, [sp, #4]
 80152b4:	e9c4 2300 	strd	r2, r3, [r4]
 80152b8:	4602      	mov	r2, r0
 80152ba:	460b      	mov	r3, r1
 80152bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80152c0:	f7ea fffa 	bl	80002b8 <__aeabi_dsub>
 80152c4:	ae4c      	add	r6, sp, #304	; 0x130
 80152c6:	2401      	movs	r4, #1
 80152c8:	42a5      	cmp	r5, r4
 80152ca:	da30      	bge.n	801532e <__kernel_rem_pio2+0x5c6>
 80152cc:	9b02      	ldr	r3, [sp, #8]
 80152ce:	b113      	cbz	r3, 80152d6 <__kernel_rem_pio2+0x56e>
 80152d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152d4:	4619      	mov	r1, r3
 80152d6:	9b01      	ldr	r3, [sp, #4]
 80152d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80152dc:	e00f      	b.n	80152fe <__kernel_rem_pio2+0x596>
 80152de:	ab9a      	add	r3, sp, #616	; 0x268
 80152e0:	441c      	add	r4, r3
 80152e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80152e6:	2000      	movs	r0, #0
 80152e8:	2100      	movs	r1, #0
 80152ea:	2d00      	cmp	r5, #0
 80152ec:	da10      	bge.n	8015310 <__kernel_rem_pio2+0x5a8>
 80152ee:	9b02      	ldr	r3, [sp, #8]
 80152f0:	b113      	cbz	r3, 80152f8 <__kernel_rem_pio2+0x590>
 80152f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152f6:	4619      	mov	r1, r3
 80152f8:	9b01      	ldr	r3, [sp, #4]
 80152fa:	e9c3 0100 	strd	r0, r1, [r3]
 80152fe:	9b06      	ldr	r3, [sp, #24]
 8015300:	f003 0007 	and.w	r0, r3, #7
 8015304:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015308:	ecbd 8b02 	vpop	{d8}
 801530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015310:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015314:	f7ea ffd2 	bl	80002bc <__adddf3>
 8015318:	3d01      	subs	r5, #1
 801531a:	e7e6      	b.n	80152ea <__kernel_rem_pio2+0x582>
 801531c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015320:	f7ea ffcc 	bl	80002bc <__adddf3>
 8015324:	3e01      	subs	r6, #1
 8015326:	e7bc      	b.n	80152a2 <__kernel_rem_pio2+0x53a>
 8015328:	4602      	mov	r2, r0
 801532a:	460b      	mov	r3, r1
 801532c:	e7c1      	b.n	80152b2 <__kernel_rem_pio2+0x54a>
 801532e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015332:	f7ea ffc3 	bl	80002bc <__adddf3>
 8015336:	3401      	adds	r4, #1
 8015338:	e7c6      	b.n	80152c8 <__kernel_rem_pio2+0x560>
 801533a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801533e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015342:	4640      	mov	r0, r8
 8015344:	ec53 2b17 	vmov	r2, r3, d7
 8015348:	4649      	mov	r1, r9
 801534a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801534e:	f7ea ffb5 	bl	80002bc <__adddf3>
 8015352:	4602      	mov	r2, r0
 8015354:	460b      	mov	r3, r1
 8015356:	4606      	mov	r6, r0
 8015358:	460f      	mov	r7, r1
 801535a:	4640      	mov	r0, r8
 801535c:	4649      	mov	r1, r9
 801535e:	f7ea ffab 	bl	80002b8 <__aeabi_dsub>
 8015362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015366:	f7ea ffa9 	bl	80002bc <__adddf3>
 801536a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801536e:	e9ca 0100 	strd	r0, r1, [sl]
 8015372:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015376:	e770      	b.n	801525a <__kernel_rem_pio2+0x4f2>
 8015378:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801537c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015380:	4630      	mov	r0, r6
 8015382:	ec53 2b17 	vmov	r2, r3, d7
 8015386:	4639      	mov	r1, r7
 8015388:	ed8d 7b04 	vstr	d7, [sp, #16]
 801538c:	f7ea ff96 	bl	80002bc <__adddf3>
 8015390:	4602      	mov	r2, r0
 8015392:	460b      	mov	r3, r1
 8015394:	4680      	mov	r8, r0
 8015396:	4689      	mov	r9, r1
 8015398:	4630      	mov	r0, r6
 801539a:	4639      	mov	r1, r7
 801539c:	f7ea ff8c 	bl	80002b8 <__aeabi_dsub>
 80153a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153a4:	f7ea ff8a 	bl	80002bc <__adddf3>
 80153a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80153ac:	e9ca 0100 	strd	r0, r1, [sl]
 80153b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80153b4:	e756      	b.n	8015264 <__kernel_rem_pio2+0x4fc>
 80153b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80153ba:	f7ea ff7f 	bl	80002bc <__adddf3>
 80153be:	3d01      	subs	r5, #1
 80153c0:	e756      	b.n	8015270 <__kernel_rem_pio2+0x508>
 80153c2:	9b01      	ldr	r3, [sp, #4]
 80153c4:	9a01      	ldr	r2, [sp, #4]
 80153c6:	601f      	str	r7, [r3, #0]
 80153c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80153cc:	605c      	str	r4, [r3, #4]
 80153ce:	609d      	str	r5, [r3, #8]
 80153d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80153d4:	60d3      	str	r3, [r2, #12]
 80153d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153da:	6110      	str	r0, [r2, #16]
 80153dc:	6153      	str	r3, [r2, #20]
 80153de:	e78e      	b.n	80152fe <__kernel_rem_pio2+0x596>
 80153e0:	41700000 	.word	0x41700000
 80153e4:	3e700000 	.word	0x3e700000

080153e8 <__kernel_sin>:
 80153e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ec:	ec55 4b10 	vmov	r4, r5, d0
 80153f0:	b085      	sub	sp, #20
 80153f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80153fa:	ed8d 1b00 	vstr	d1, [sp]
 80153fe:	9002      	str	r0, [sp, #8]
 8015400:	da06      	bge.n	8015410 <__kernel_sin+0x28>
 8015402:	ee10 0a10 	vmov	r0, s0
 8015406:	4629      	mov	r1, r5
 8015408:	f7eb fbbe 	bl	8000b88 <__aeabi_d2iz>
 801540c:	2800      	cmp	r0, #0
 801540e:	d051      	beq.n	80154b4 <__kernel_sin+0xcc>
 8015410:	4622      	mov	r2, r4
 8015412:	462b      	mov	r3, r5
 8015414:	4620      	mov	r0, r4
 8015416:	4629      	mov	r1, r5
 8015418:	f7eb f906 	bl	8000628 <__aeabi_dmul>
 801541c:	4682      	mov	sl, r0
 801541e:	468b      	mov	fp, r1
 8015420:	4602      	mov	r2, r0
 8015422:	460b      	mov	r3, r1
 8015424:	4620      	mov	r0, r4
 8015426:	4629      	mov	r1, r5
 8015428:	f7eb f8fe 	bl	8000628 <__aeabi_dmul>
 801542c:	a341      	add	r3, pc, #260	; (adr r3, 8015534 <__kernel_sin+0x14c>)
 801542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015432:	4680      	mov	r8, r0
 8015434:	4689      	mov	r9, r1
 8015436:	4650      	mov	r0, sl
 8015438:	4659      	mov	r1, fp
 801543a:	f7eb f8f5 	bl	8000628 <__aeabi_dmul>
 801543e:	a33f      	add	r3, pc, #252	; (adr r3, 801553c <__kernel_sin+0x154>)
 8015440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015444:	f7ea ff38 	bl	80002b8 <__aeabi_dsub>
 8015448:	4652      	mov	r2, sl
 801544a:	465b      	mov	r3, fp
 801544c:	f7eb f8ec 	bl	8000628 <__aeabi_dmul>
 8015450:	a33c      	add	r3, pc, #240	; (adr r3, 8015544 <__kernel_sin+0x15c>)
 8015452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015456:	f7ea ff31 	bl	80002bc <__adddf3>
 801545a:	4652      	mov	r2, sl
 801545c:	465b      	mov	r3, fp
 801545e:	f7eb f8e3 	bl	8000628 <__aeabi_dmul>
 8015462:	a33a      	add	r3, pc, #232	; (adr r3, 801554c <__kernel_sin+0x164>)
 8015464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015468:	f7ea ff26 	bl	80002b8 <__aeabi_dsub>
 801546c:	4652      	mov	r2, sl
 801546e:	465b      	mov	r3, fp
 8015470:	f7eb f8da 	bl	8000628 <__aeabi_dmul>
 8015474:	a337      	add	r3, pc, #220	; (adr r3, 8015554 <__kernel_sin+0x16c>)
 8015476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801547a:	f7ea ff1f 	bl	80002bc <__adddf3>
 801547e:	9b02      	ldr	r3, [sp, #8]
 8015480:	4606      	mov	r6, r0
 8015482:	460f      	mov	r7, r1
 8015484:	b9db      	cbnz	r3, 80154be <__kernel_sin+0xd6>
 8015486:	4602      	mov	r2, r0
 8015488:	460b      	mov	r3, r1
 801548a:	4650      	mov	r0, sl
 801548c:	4659      	mov	r1, fp
 801548e:	f7eb f8cb 	bl	8000628 <__aeabi_dmul>
 8015492:	a325      	add	r3, pc, #148	; (adr r3, 8015528 <__kernel_sin+0x140>)
 8015494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015498:	f7ea ff0e 	bl	80002b8 <__aeabi_dsub>
 801549c:	4642      	mov	r2, r8
 801549e:	464b      	mov	r3, r9
 80154a0:	f7eb f8c2 	bl	8000628 <__aeabi_dmul>
 80154a4:	4602      	mov	r2, r0
 80154a6:	460b      	mov	r3, r1
 80154a8:	4620      	mov	r0, r4
 80154aa:	4629      	mov	r1, r5
 80154ac:	f7ea ff06 	bl	80002bc <__adddf3>
 80154b0:	4604      	mov	r4, r0
 80154b2:	460d      	mov	r5, r1
 80154b4:	ec45 4b10 	vmov	d0, r4, r5
 80154b8:	b005      	add	sp, #20
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	2200      	movs	r2, #0
 80154c0:	4b1b      	ldr	r3, [pc, #108]	; (8015530 <__kernel_sin+0x148>)
 80154c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154c6:	f7eb f8af 	bl	8000628 <__aeabi_dmul>
 80154ca:	4632      	mov	r2, r6
 80154cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154d0:	463b      	mov	r3, r7
 80154d2:	4640      	mov	r0, r8
 80154d4:	4649      	mov	r1, r9
 80154d6:	f7eb f8a7 	bl	8000628 <__aeabi_dmul>
 80154da:	4602      	mov	r2, r0
 80154dc:	460b      	mov	r3, r1
 80154de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154e2:	f7ea fee9 	bl	80002b8 <__aeabi_dsub>
 80154e6:	4652      	mov	r2, sl
 80154e8:	465b      	mov	r3, fp
 80154ea:	f7eb f89d 	bl	8000628 <__aeabi_dmul>
 80154ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154f2:	f7ea fee1 	bl	80002b8 <__aeabi_dsub>
 80154f6:	a30c      	add	r3, pc, #48	; (adr r3, 8015528 <__kernel_sin+0x140>)
 80154f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154fc:	4606      	mov	r6, r0
 80154fe:	460f      	mov	r7, r1
 8015500:	4640      	mov	r0, r8
 8015502:	4649      	mov	r1, r9
 8015504:	f7eb f890 	bl	8000628 <__aeabi_dmul>
 8015508:	4602      	mov	r2, r0
 801550a:	460b      	mov	r3, r1
 801550c:	4630      	mov	r0, r6
 801550e:	4639      	mov	r1, r7
 8015510:	f7ea fed4 	bl	80002bc <__adddf3>
 8015514:	4602      	mov	r2, r0
 8015516:	460b      	mov	r3, r1
 8015518:	4620      	mov	r0, r4
 801551a:	4629      	mov	r1, r5
 801551c:	f7ea fecc 	bl	80002b8 <__aeabi_dsub>
 8015520:	e7c6      	b.n	80154b0 <__kernel_sin+0xc8>
 8015522:	bf00      	nop
 8015524:	f3af 8000 	nop.w
 8015528:	55555549 	.word	0x55555549
 801552c:	3fc55555 	.word	0x3fc55555
 8015530:	3fe00000 	.word	0x3fe00000
 8015534:	5acfd57c 	.word	0x5acfd57c
 8015538:	3de5d93a 	.word	0x3de5d93a
 801553c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015540:	3e5ae5e6 	.word	0x3e5ae5e6
 8015544:	57b1fe7d 	.word	0x57b1fe7d
 8015548:	3ec71de3 	.word	0x3ec71de3
 801554c:	19c161d5 	.word	0x19c161d5
 8015550:	3f2a01a0 	.word	0x3f2a01a0
 8015554:	1110f8a6 	.word	0x1110f8a6
 8015558:	3f811111 	.word	0x3f811111

0801555c <fabs>:
 801555c:	ec51 0b10 	vmov	r0, r1, d0
 8015560:	ee10 2a10 	vmov	r2, s0
 8015564:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015568:	ec43 2b10 	vmov	d0, r2, r3
 801556c:	4770      	bx	lr
	...

08015570 <floor>:
 8015570:	ec51 0b10 	vmov	r0, r1, d0
 8015574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015578:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801557c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015580:	2e13      	cmp	r6, #19
 8015582:	460c      	mov	r4, r1
 8015584:	ee10 5a10 	vmov	r5, s0
 8015588:	4680      	mov	r8, r0
 801558a:	dc34      	bgt.n	80155f6 <floor+0x86>
 801558c:	2e00      	cmp	r6, #0
 801558e:	da16      	bge.n	80155be <floor+0x4e>
 8015590:	a335      	add	r3, pc, #212	; (adr r3, 8015668 <floor+0xf8>)
 8015592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015596:	f7ea fe91 	bl	80002bc <__adddf3>
 801559a:	2200      	movs	r2, #0
 801559c:	2300      	movs	r3, #0
 801559e:	f7eb fad3 	bl	8000b48 <__aeabi_dcmpgt>
 80155a2:	b148      	cbz	r0, 80155b8 <floor+0x48>
 80155a4:	2c00      	cmp	r4, #0
 80155a6:	da59      	bge.n	801565c <floor+0xec>
 80155a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80155ac:	4a30      	ldr	r2, [pc, #192]	; (8015670 <floor+0x100>)
 80155ae:	432b      	orrs	r3, r5
 80155b0:	2500      	movs	r5, #0
 80155b2:	42ab      	cmp	r3, r5
 80155b4:	bf18      	it	ne
 80155b6:	4614      	movne	r4, r2
 80155b8:	4621      	mov	r1, r4
 80155ba:	4628      	mov	r0, r5
 80155bc:	e025      	b.n	801560a <floor+0x9a>
 80155be:	4f2d      	ldr	r7, [pc, #180]	; (8015674 <floor+0x104>)
 80155c0:	4137      	asrs	r7, r6
 80155c2:	ea01 0307 	and.w	r3, r1, r7
 80155c6:	4303      	orrs	r3, r0
 80155c8:	d01f      	beq.n	801560a <floor+0x9a>
 80155ca:	a327      	add	r3, pc, #156	; (adr r3, 8015668 <floor+0xf8>)
 80155cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d0:	f7ea fe74 	bl	80002bc <__adddf3>
 80155d4:	2200      	movs	r2, #0
 80155d6:	2300      	movs	r3, #0
 80155d8:	f7eb fab6 	bl	8000b48 <__aeabi_dcmpgt>
 80155dc:	2800      	cmp	r0, #0
 80155de:	d0eb      	beq.n	80155b8 <floor+0x48>
 80155e0:	2c00      	cmp	r4, #0
 80155e2:	bfbe      	ittt	lt
 80155e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80155e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80155ec:	19a4      	addlt	r4, r4, r6
 80155ee:	ea24 0407 	bic.w	r4, r4, r7
 80155f2:	2500      	movs	r5, #0
 80155f4:	e7e0      	b.n	80155b8 <floor+0x48>
 80155f6:	2e33      	cmp	r6, #51	; 0x33
 80155f8:	dd0b      	ble.n	8015612 <floor+0xa2>
 80155fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80155fe:	d104      	bne.n	801560a <floor+0x9a>
 8015600:	ee10 2a10 	vmov	r2, s0
 8015604:	460b      	mov	r3, r1
 8015606:	f7ea fe59 	bl	80002bc <__adddf3>
 801560a:	ec41 0b10 	vmov	d0, r0, r1
 801560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015612:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015616:	f04f 33ff 	mov.w	r3, #4294967295
 801561a:	fa23 f707 	lsr.w	r7, r3, r7
 801561e:	4207      	tst	r7, r0
 8015620:	d0f3      	beq.n	801560a <floor+0x9a>
 8015622:	a311      	add	r3, pc, #68	; (adr r3, 8015668 <floor+0xf8>)
 8015624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015628:	f7ea fe48 	bl	80002bc <__adddf3>
 801562c:	2200      	movs	r2, #0
 801562e:	2300      	movs	r3, #0
 8015630:	f7eb fa8a 	bl	8000b48 <__aeabi_dcmpgt>
 8015634:	2800      	cmp	r0, #0
 8015636:	d0bf      	beq.n	80155b8 <floor+0x48>
 8015638:	2c00      	cmp	r4, #0
 801563a:	da02      	bge.n	8015642 <floor+0xd2>
 801563c:	2e14      	cmp	r6, #20
 801563e:	d103      	bne.n	8015648 <floor+0xd8>
 8015640:	3401      	adds	r4, #1
 8015642:	ea25 0507 	bic.w	r5, r5, r7
 8015646:	e7b7      	b.n	80155b8 <floor+0x48>
 8015648:	2301      	movs	r3, #1
 801564a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801564e:	fa03 f606 	lsl.w	r6, r3, r6
 8015652:	4435      	add	r5, r6
 8015654:	4545      	cmp	r5, r8
 8015656:	bf38      	it	cc
 8015658:	18e4      	addcc	r4, r4, r3
 801565a:	e7f2      	b.n	8015642 <floor+0xd2>
 801565c:	2500      	movs	r5, #0
 801565e:	462c      	mov	r4, r5
 8015660:	e7aa      	b.n	80155b8 <floor+0x48>
 8015662:	bf00      	nop
 8015664:	f3af 8000 	nop.w
 8015668:	8800759c 	.word	0x8800759c
 801566c:	7e37e43c 	.word	0x7e37e43c
 8015670:	bff00000 	.word	0xbff00000
 8015674:	000fffff 	.word	0x000fffff

08015678 <scalbn>:
 8015678:	b570      	push	{r4, r5, r6, lr}
 801567a:	ec55 4b10 	vmov	r4, r5, d0
 801567e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015682:	4606      	mov	r6, r0
 8015684:	462b      	mov	r3, r5
 8015686:	b9aa      	cbnz	r2, 80156b4 <scalbn+0x3c>
 8015688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801568c:	4323      	orrs	r3, r4
 801568e:	d03b      	beq.n	8015708 <scalbn+0x90>
 8015690:	4b31      	ldr	r3, [pc, #196]	; (8015758 <scalbn+0xe0>)
 8015692:	4629      	mov	r1, r5
 8015694:	2200      	movs	r2, #0
 8015696:	ee10 0a10 	vmov	r0, s0
 801569a:	f7ea ffc5 	bl	8000628 <__aeabi_dmul>
 801569e:	4b2f      	ldr	r3, [pc, #188]	; (801575c <scalbn+0xe4>)
 80156a0:	429e      	cmp	r6, r3
 80156a2:	4604      	mov	r4, r0
 80156a4:	460d      	mov	r5, r1
 80156a6:	da12      	bge.n	80156ce <scalbn+0x56>
 80156a8:	a327      	add	r3, pc, #156	; (adr r3, 8015748 <scalbn+0xd0>)
 80156aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ae:	f7ea ffbb 	bl	8000628 <__aeabi_dmul>
 80156b2:	e009      	b.n	80156c8 <scalbn+0x50>
 80156b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80156b8:	428a      	cmp	r2, r1
 80156ba:	d10c      	bne.n	80156d6 <scalbn+0x5e>
 80156bc:	ee10 2a10 	vmov	r2, s0
 80156c0:	4620      	mov	r0, r4
 80156c2:	4629      	mov	r1, r5
 80156c4:	f7ea fdfa 	bl	80002bc <__adddf3>
 80156c8:	4604      	mov	r4, r0
 80156ca:	460d      	mov	r5, r1
 80156cc:	e01c      	b.n	8015708 <scalbn+0x90>
 80156ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80156d2:	460b      	mov	r3, r1
 80156d4:	3a36      	subs	r2, #54	; 0x36
 80156d6:	4432      	add	r2, r6
 80156d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80156dc:	428a      	cmp	r2, r1
 80156de:	dd0b      	ble.n	80156f8 <scalbn+0x80>
 80156e0:	ec45 4b11 	vmov	d1, r4, r5
 80156e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015750 <scalbn+0xd8>
 80156e8:	f000 f83c 	bl	8015764 <copysign>
 80156ec:	a318      	add	r3, pc, #96	; (adr r3, 8015750 <scalbn+0xd8>)
 80156ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f2:	ec51 0b10 	vmov	r0, r1, d0
 80156f6:	e7da      	b.n	80156ae <scalbn+0x36>
 80156f8:	2a00      	cmp	r2, #0
 80156fa:	dd08      	ble.n	801570e <scalbn+0x96>
 80156fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015700:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015704:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015708:	ec45 4b10 	vmov	d0, r4, r5
 801570c:	bd70      	pop	{r4, r5, r6, pc}
 801570e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015712:	da0d      	bge.n	8015730 <scalbn+0xb8>
 8015714:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015718:	429e      	cmp	r6, r3
 801571a:	ec45 4b11 	vmov	d1, r4, r5
 801571e:	dce1      	bgt.n	80156e4 <scalbn+0x6c>
 8015720:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015748 <scalbn+0xd0>
 8015724:	f000 f81e 	bl	8015764 <copysign>
 8015728:	a307      	add	r3, pc, #28	; (adr r3, 8015748 <scalbn+0xd0>)
 801572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572e:	e7e0      	b.n	80156f2 <scalbn+0x7a>
 8015730:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015734:	3236      	adds	r2, #54	; 0x36
 8015736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801573a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801573e:	4620      	mov	r0, r4
 8015740:	4629      	mov	r1, r5
 8015742:	2200      	movs	r2, #0
 8015744:	4b06      	ldr	r3, [pc, #24]	; (8015760 <scalbn+0xe8>)
 8015746:	e7b2      	b.n	80156ae <scalbn+0x36>
 8015748:	c2f8f359 	.word	0xc2f8f359
 801574c:	01a56e1f 	.word	0x01a56e1f
 8015750:	8800759c 	.word	0x8800759c
 8015754:	7e37e43c 	.word	0x7e37e43c
 8015758:	43500000 	.word	0x43500000
 801575c:	ffff3cb0 	.word	0xffff3cb0
 8015760:	3c900000 	.word	0x3c900000

08015764 <copysign>:
 8015764:	ec51 0b10 	vmov	r0, r1, d0
 8015768:	ee11 0a90 	vmov	r0, s3
 801576c:	ee10 2a10 	vmov	r2, s0
 8015770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015774:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015778:	ea41 0300 	orr.w	r3, r1, r0
 801577c:	ec43 2b10 	vmov	d0, r2, r3
 8015780:	4770      	bx	lr
	...

08015784 <__errno>:
 8015784:	4b01      	ldr	r3, [pc, #4]	; (801578c <__errno+0x8>)
 8015786:	6818      	ldr	r0, [r3, #0]
 8015788:	4770      	bx	lr
 801578a:	bf00      	nop
 801578c:	2000000c 	.word	0x2000000c

08015790 <__libc_init_array>:
 8015790:	b570      	push	{r4, r5, r6, lr}
 8015792:	4e0d      	ldr	r6, [pc, #52]	; (80157c8 <__libc_init_array+0x38>)
 8015794:	4c0d      	ldr	r4, [pc, #52]	; (80157cc <__libc_init_array+0x3c>)
 8015796:	1ba4      	subs	r4, r4, r6
 8015798:	10a4      	asrs	r4, r4, #2
 801579a:	2500      	movs	r5, #0
 801579c:	42a5      	cmp	r5, r4
 801579e:	d109      	bne.n	80157b4 <__libc_init_array+0x24>
 80157a0:	4e0b      	ldr	r6, [pc, #44]	; (80157d0 <__libc_init_array+0x40>)
 80157a2:	4c0c      	ldr	r4, [pc, #48]	; (80157d4 <__libc_init_array+0x44>)
 80157a4:	f004 f9e6 	bl	8019b74 <_init>
 80157a8:	1ba4      	subs	r4, r4, r6
 80157aa:	10a4      	asrs	r4, r4, #2
 80157ac:	2500      	movs	r5, #0
 80157ae:	42a5      	cmp	r5, r4
 80157b0:	d105      	bne.n	80157be <__libc_init_array+0x2e>
 80157b2:	bd70      	pop	{r4, r5, r6, pc}
 80157b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80157b8:	4798      	blx	r3
 80157ba:	3501      	adds	r5, #1
 80157bc:	e7ee      	b.n	801579c <__libc_init_array+0xc>
 80157be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80157c2:	4798      	blx	r3
 80157c4:	3501      	adds	r5, #1
 80157c6:	e7f2      	b.n	80157ae <__libc_init_array+0x1e>
 80157c8:	0801a594 	.word	0x0801a594
 80157cc:	0801a594 	.word	0x0801a594
 80157d0:	0801a594 	.word	0x0801a594
 80157d4:	0801a59c 	.word	0x0801a59c

080157d8 <memset>:
 80157d8:	4402      	add	r2, r0
 80157da:	4603      	mov	r3, r0
 80157dc:	4293      	cmp	r3, r2
 80157de:	d100      	bne.n	80157e2 <memset+0xa>
 80157e0:	4770      	bx	lr
 80157e2:	f803 1b01 	strb.w	r1, [r3], #1
 80157e6:	e7f9      	b.n	80157dc <memset+0x4>

080157e8 <__cvt>:
 80157e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157ec:	ec55 4b10 	vmov	r4, r5, d0
 80157f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80157f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80157f6:	2d00      	cmp	r5, #0
 80157f8:	460e      	mov	r6, r1
 80157fa:	4691      	mov	r9, r2
 80157fc:	4619      	mov	r1, r3
 80157fe:	bfb8      	it	lt
 8015800:	4622      	movlt	r2, r4
 8015802:	462b      	mov	r3, r5
 8015804:	f027 0720 	bic.w	r7, r7, #32
 8015808:	bfbb      	ittet	lt
 801580a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801580e:	461d      	movlt	r5, r3
 8015810:	2300      	movge	r3, #0
 8015812:	232d      	movlt	r3, #45	; 0x2d
 8015814:	bfb8      	it	lt
 8015816:	4614      	movlt	r4, r2
 8015818:	2f46      	cmp	r7, #70	; 0x46
 801581a:	700b      	strb	r3, [r1, #0]
 801581c:	d004      	beq.n	8015828 <__cvt+0x40>
 801581e:	2f45      	cmp	r7, #69	; 0x45
 8015820:	d100      	bne.n	8015824 <__cvt+0x3c>
 8015822:	3601      	adds	r6, #1
 8015824:	2102      	movs	r1, #2
 8015826:	e000      	b.n	801582a <__cvt+0x42>
 8015828:	2103      	movs	r1, #3
 801582a:	ab03      	add	r3, sp, #12
 801582c:	9301      	str	r3, [sp, #4]
 801582e:	ab02      	add	r3, sp, #8
 8015830:	9300      	str	r3, [sp, #0]
 8015832:	4632      	mov	r2, r6
 8015834:	4653      	mov	r3, sl
 8015836:	ec45 4b10 	vmov	d0, r4, r5
 801583a:	f001 fdfd 	bl	8017438 <_dtoa_r>
 801583e:	2f47      	cmp	r7, #71	; 0x47
 8015840:	4680      	mov	r8, r0
 8015842:	d102      	bne.n	801584a <__cvt+0x62>
 8015844:	f019 0f01 	tst.w	r9, #1
 8015848:	d026      	beq.n	8015898 <__cvt+0xb0>
 801584a:	2f46      	cmp	r7, #70	; 0x46
 801584c:	eb08 0906 	add.w	r9, r8, r6
 8015850:	d111      	bne.n	8015876 <__cvt+0x8e>
 8015852:	f898 3000 	ldrb.w	r3, [r8]
 8015856:	2b30      	cmp	r3, #48	; 0x30
 8015858:	d10a      	bne.n	8015870 <__cvt+0x88>
 801585a:	2200      	movs	r2, #0
 801585c:	2300      	movs	r3, #0
 801585e:	4620      	mov	r0, r4
 8015860:	4629      	mov	r1, r5
 8015862:	f7eb f949 	bl	8000af8 <__aeabi_dcmpeq>
 8015866:	b918      	cbnz	r0, 8015870 <__cvt+0x88>
 8015868:	f1c6 0601 	rsb	r6, r6, #1
 801586c:	f8ca 6000 	str.w	r6, [sl]
 8015870:	f8da 3000 	ldr.w	r3, [sl]
 8015874:	4499      	add	r9, r3
 8015876:	2200      	movs	r2, #0
 8015878:	2300      	movs	r3, #0
 801587a:	4620      	mov	r0, r4
 801587c:	4629      	mov	r1, r5
 801587e:	f7eb f93b 	bl	8000af8 <__aeabi_dcmpeq>
 8015882:	b938      	cbnz	r0, 8015894 <__cvt+0xac>
 8015884:	2230      	movs	r2, #48	; 0x30
 8015886:	9b03      	ldr	r3, [sp, #12]
 8015888:	454b      	cmp	r3, r9
 801588a:	d205      	bcs.n	8015898 <__cvt+0xb0>
 801588c:	1c59      	adds	r1, r3, #1
 801588e:	9103      	str	r1, [sp, #12]
 8015890:	701a      	strb	r2, [r3, #0]
 8015892:	e7f8      	b.n	8015886 <__cvt+0x9e>
 8015894:	f8cd 900c 	str.w	r9, [sp, #12]
 8015898:	9b03      	ldr	r3, [sp, #12]
 801589a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801589c:	eba3 0308 	sub.w	r3, r3, r8
 80158a0:	4640      	mov	r0, r8
 80158a2:	6013      	str	r3, [r2, #0]
 80158a4:	b004      	add	sp, #16
 80158a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080158aa <__exponent>:
 80158aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158ac:	2900      	cmp	r1, #0
 80158ae:	4604      	mov	r4, r0
 80158b0:	bfba      	itte	lt
 80158b2:	4249      	neglt	r1, r1
 80158b4:	232d      	movlt	r3, #45	; 0x2d
 80158b6:	232b      	movge	r3, #43	; 0x2b
 80158b8:	2909      	cmp	r1, #9
 80158ba:	f804 2b02 	strb.w	r2, [r4], #2
 80158be:	7043      	strb	r3, [r0, #1]
 80158c0:	dd20      	ble.n	8015904 <__exponent+0x5a>
 80158c2:	f10d 0307 	add.w	r3, sp, #7
 80158c6:	461f      	mov	r7, r3
 80158c8:	260a      	movs	r6, #10
 80158ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80158ce:	fb06 1115 	mls	r1, r6, r5, r1
 80158d2:	3130      	adds	r1, #48	; 0x30
 80158d4:	2d09      	cmp	r5, #9
 80158d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80158da:	f103 32ff 	add.w	r2, r3, #4294967295
 80158de:	4629      	mov	r1, r5
 80158e0:	dc09      	bgt.n	80158f6 <__exponent+0x4c>
 80158e2:	3130      	adds	r1, #48	; 0x30
 80158e4:	3b02      	subs	r3, #2
 80158e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80158ea:	42bb      	cmp	r3, r7
 80158ec:	4622      	mov	r2, r4
 80158ee:	d304      	bcc.n	80158fa <__exponent+0x50>
 80158f0:	1a10      	subs	r0, r2, r0
 80158f2:	b003      	add	sp, #12
 80158f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158f6:	4613      	mov	r3, r2
 80158f8:	e7e7      	b.n	80158ca <__exponent+0x20>
 80158fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158fe:	f804 2b01 	strb.w	r2, [r4], #1
 8015902:	e7f2      	b.n	80158ea <__exponent+0x40>
 8015904:	2330      	movs	r3, #48	; 0x30
 8015906:	4419      	add	r1, r3
 8015908:	7083      	strb	r3, [r0, #2]
 801590a:	1d02      	adds	r2, r0, #4
 801590c:	70c1      	strb	r1, [r0, #3]
 801590e:	e7ef      	b.n	80158f0 <__exponent+0x46>

08015910 <_printf_float>:
 8015910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015914:	b08d      	sub	sp, #52	; 0x34
 8015916:	460c      	mov	r4, r1
 8015918:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801591c:	4616      	mov	r6, r2
 801591e:	461f      	mov	r7, r3
 8015920:	4605      	mov	r5, r0
 8015922:	f002 fe7b 	bl	801861c <_localeconv_r>
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	9304      	str	r3, [sp, #16]
 801592a:	4618      	mov	r0, r3
 801592c:	f7ea fc68 	bl	8000200 <strlen>
 8015930:	2300      	movs	r3, #0
 8015932:	930a      	str	r3, [sp, #40]	; 0x28
 8015934:	f8d8 3000 	ldr.w	r3, [r8]
 8015938:	9005      	str	r0, [sp, #20]
 801593a:	3307      	adds	r3, #7
 801593c:	f023 0307 	bic.w	r3, r3, #7
 8015940:	f103 0208 	add.w	r2, r3, #8
 8015944:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015948:	f8d4 b000 	ldr.w	fp, [r4]
 801594c:	f8c8 2000 	str.w	r2, [r8]
 8015950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015954:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015958:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801595c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015960:	9307      	str	r3, [sp, #28]
 8015962:	f8cd 8018 	str.w	r8, [sp, #24]
 8015966:	f04f 32ff 	mov.w	r2, #4294967295
 801596a:	4ba7      	ldr	r3, [pc, #668]	; (8015c08 <_printf_float+0x2f8>)
 801596c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015970:	f7eb f8f4 	bl	8000b5c <__aeabi_dcmpun>
 8015974:	bb70      	cbnz	r0, 80159d4 <_printf_float+0xc4>
 8015976:	f04f 32ff 	mov.w	r2, #4294967295
 801597a:	4ba3      	ldr	r3, [pc, #652]	; (8015c08 <_printf_float+0x2f8>)
 801597c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015980:	f7eb f8ce 	bl	8000b20 <__aeabi_dcmple>
 8015984:	bb30      	cbnz	r0, 80159d4 <_printf_float+0xc4>
 8015986:	2200      	movs	r2, #0
 8015988:	2300      	movs	r3, #0
 801598a:	4640      	mov	r0, r8
 801598c:	4649      	mov	r1, r9
 801598e:	f7eb f8bd 	bl	8000b0c <__aeabi_dcmplt>
 8015992:	b110      	cbz	r0, 801599a <_printf_float+0x8a>
 8015994:	232d      	movs	r3, #45	; 0x2d
 8015996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801599a:	4a9c      	ldr	r2, [pc, #624]	; (8015c0c <_printf_float+0x2fc>)
 801599c:	4b9c      	ldr	r3, [pc, #624]	; (8015c10 <_printf_float+0x300>)
 801599e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80159a2:	bf8c      	ite	hi
 80159a4:	4690      	movhi	r8, r2
 80159a6:	4698      	movls	r8, r3
 80159a8:	2303      	movs	r3, #3
 80159aa:	f02b 0204 	bic.w	r2, fp, #4
 80159ae:	6123      	str	r3, [r4, #16]
 80159b0:	6022      	str	r2, [r4, #0]
 80159b2:	f04f 0900 	mov.w	r9, #0
 80159b6:	9700      	str	r7, [sp, #0]
 80159b8:	4633      	mov	r3, r6
 80159ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80159bc:	4621      	mov	r1, r4
 80159be:	4628      	mov	r0, r5
 80159c0:	f000 f9e6 	bl	8015d90 <_printf_common>
 80159c4:	3001      	adds	r0, #1
 80159c6:	f040 808d 	bne.w	8015ae4 <_printf_float+0x1d4>
 80159ca:	f04f 30ff 	mov.w	r0, #4294967295
 80159ce:	b00d      	add	sp, #52	; 0x34
 80159d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d4:	4642      	mov	r2, r8
 80159d6:	464b      	mov	r3, r9
 80159d8:	4640      	mov	r0, r8
 80159da:	4649      	mov	r1, r9
 80159dc:	f7eb f8be 	bl	8000b5c <__aeabi_dcmpun>
 80159e0:	b110      	cbz	r0, 80159e8 <_printf_float+0xd8>
 80159e2:	4a8c      	ldr	r2, [pc, #560]	; (8015c14 <_printf_float+0x304>)
 80159e4:	4b8c      	ldr	r3, [pc, #560]	; (8015c18 <_printf_float+0x308>)
 80159e6:	e7da      	b.n	801599e <_printf_float+0x8e>
 80159e8:	6861      	ldr	r1, [r4, #4]
 80159ea:	1c4b      	adds	r3, r1, #1
 80159ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80159f0:	a80a      	add	r0, sp, #40	; 0x28
 80159f2:	d13e      	bne.n	8015a72 <_printf_float+0x162>
 80159f4:	2306      	movs	r3, #6
 80159f6:	6063      	str	r3, [r4, #4]
 80159f8:	2300      	movs	r3, #0
 80159fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80159fe:	ab09      	add	r3, sp, #36	; 0x24
 8015a00:	9300      	str	r3, [sp, #0]
 8015a02:	ec49 8b10 	vmov	d0, r8, r9
 8015a06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a0a:	6022      	str	r2, [r4, #0]
 8015a0c:	f8cd a004 	str.w	sl, [sp, #4]
 8015a10:	6861      	ldr	r1, [r4, #4]
 8015a12:	4628      	mov	r0, r5
 8015a14:	f7ff fee8 	bl	80157e8 <__cvt>
 8015a18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015a1c:	2b47      	cmp	r3, #71	; 0x47
 8015a1e:	4680      	mov	r8, r0
 8015a20:	d109      	bne.n	8015a36 <_printf_float+0x126>
 8015a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a24:	1cd8      	adds	r0, r3, #3
 8015a26:	db02      	blt.n	8015a2e <_printf_float+0x11e>
 8015a28:	6862      	ldr	r2, [r4, #4]
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	dd47      	ble.n	8015abe <_printf_float+0x1ae>
 8015a2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015a32:	fa5f fa8a 	uxtb.w	sl, sl
 8015a36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a3c:	d824      	bhi.n	8015a88 <_printf_float+0x178>
 8015a3e:	3901      	subs	r1, #1
 8015a40:	4652      	mov	r2, sl
 8015a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015a46:	9109      	str	r1, [sp, #36]	; 0x24
 8015a48:	f7ff ff2f 	bl	80158aa <__exponent>
 8015a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a4e:	1813      	adds	r3, r2, r0
 8015a50:	2a01      	cmp	r2, #1
 8015a52:	4681      	mov	r9, r0
 8015a54:	6123      	str	r3, [r4, #16]
 8015a56:	dc02      	bgt.n	8015a5e <_printf_float+0x14e>
 8015a58:	6822      	ldr	r2, [r4, #0]
 8015a5a:	07d1      	lsls	r1, r2, #31
 8015a5c:	d501      	bpl.n	8015a62 <_printf_float+0x152>
 8015a5e:	3301      	adds	r3, #1
 8015a60:	6123      	str	r3, [r4, #16]
 8015a62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d0a5      	beq.n	80159b6 <_printf_float+0xa6>
 8015a6a:	232d      	movs	r3, #45	; 0x2d
 8015a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a70:	e7a1      	b.n	80159b6 <_printf_float+0xa6>
 8015a72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015a76:	f000 8177 	beq.w	8015d68 <_printf_float+0x458>
 8015a7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a7e:	d1bb      	bne.n	80159f8 <_printf_float+0xe8>
 8015a80:	2900      	cmp	r1, #0
 8015a82:	d1b9      	bne.n	80159f8 <_printf_float+0xe8>
 8015a84:	2301      	movs	r3, #1
 8015a86:	e7b6      	b.n	80159f6 <_printf_float+0xe6>
 8015a88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015a8c:	d119      	bne.n	8015ac2 <_printf_float+0x1b2>
 8015a8e:	2900      	cmp	r1, #0
 8015a90:	6863      	ldr	r3, [r4, #4]
 8015a92:	dd0c      	ble.n	8015aae <_printf_float+0x19e>
 8015a94:	6121      	str	r1, [r4, #16]
 8015a96:	b913      	cbnz	r3, 8015a9e <_printf_float+0x18e>
 8015a98:	6822      	ldr	r2, [r4, #0]
 8015a9a:	07d2      	lsls	r2, r2, #31
 8015a9c:	d502      	bpl.n	8015aa4 <_printf_float+0x194>
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	440b      	add	r3, r1
 8015aa2:	6123      	str	r3, [r4, #16]
 8015aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aa6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015aa8:	f04f 0900 	mov.w	r9, #0
 8015aac:	e7d9      	b.n	8015a62 <_printf_float+0x152>
 8015aae:	b913      	cbnz	r3, 8015ab6 <_printf_float+0x1a6>
 8015ab0:	6822      	ldr	r2, [r4, #0]
 8015ab2:	07d0      	lsls	r0, r2, #31
 8015ab4:	d501      	bpl.n	8015aba <_printf_float+0x1aa>
 8015ab6:	3302      	adds	r3, #2
 8015ab8:	e7f3      	b.n	8015aa2 <_printf_float+0x192>
 8015aba:	2301      	movs	r3, #1
 8015abc:	e7f1      	b.n	8015aa2 <_printf_float+0x192>
 8015abe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015ac2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	db05      	blt.n	8015ad6 <_printf_float+0x1c6>
 8015aca:	6822      	ldr	r2, [r4, #0]
 8015acc:	6123      	str	r3, [r4, #16]
 8015ace:	07d1      	lsls	r1, r2, #31
 8015ad0:	d5e8      	bpl.n	8015aa4 <_printf_float+0x194>
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	e7e5      	b.n	8015aa2 <_printf_float+0x192>
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	bfd4      	ite	le
 8015ada:	f1c3 0302 	rsble	r3, r3, #2
 8015ade:	2301      	movgt	r3, #1
 8015ae0:	4413      	add	r3, r2
 8015ae2:	e7de      	b.n	8015aa2 <_printf_float+0x192>
 8015ae4:	6823      	ldr	r3, [r4, #0]
 8015ae6:	055a      	lsls	r2, r3, #21
 8015ae8:	d407      	bmi.n	8015afa <_printf_float+0x1ea>
 8015aea:	6923      	ldr	r3, [r4, #16]
 8015aec:	4642      	mov	r2, r8
 8015aee:	4631      	mov	r1, r6
 8015af0:	4628      	mov	r0, r5
 8015af2:	47b8      	blx	r7
 8015af4:	3001      	adds	r0, #1
 8015af6:	d12b      	bne.n	8015b50 <_printf_float+0x240>
 8015af8:	e767      	b.n	80159ca <_printf_float+0xba>
 8015afa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015afe:	f240 80dc 	bls.w	8015cba <_printf_float+0x3aa>
 8015b02:	2200      	movs	r2, #0
 8015b04:	2300      	movs	r3, #0
 8015b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b0a:	f7ea fff5 	bl	8000af8 <__aeabi_dcmpeq>
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	d033      	beq.n	8015b7a <_printf_float+0x26a>
 8015b12:	2301      	movs	r3, #1
 8015b14:	4a41      	ldr	r2, [pc, #260]	; (8015c1c <_printf_float+0x30c>)
 8015b16:	4631      	mov	r1, r6
 8015b18:	4628      	mov	r0, r5
 8015b1a:	47b8      	blx	r7
 8015b1c:	3001      	adds	r0, #1
 8015b1e:	f43f af54 	beq.w	80159ca <_printf_float+0xba>
 8015b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b26:	429a      	cmp	r2, r3
 8015b28:	db02      	blt.n	8015b30 <_printf_float+0x220>
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	07d8      	lsls	r0, r3, #31
 8015b2e:	d50f      	bpl.n	8015b50 <_printf_float+0x240>
 8015b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b34:	4631      	mov	r1, r6
 8015b36:	4628      	mov	r0, r5
 8015b38:	47b8      	blx	r7
 8015b3a:	3001      	adds	r0, #1
 8015b3c:	f43f af45 	beq.w	80159ca <_printf_float+0xba>
 8015b40:	f04f 0800 	mov.w	r8, #0
 8015b44:	f104 091a 	add.w	r9, r4, #26
 8015b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b4a:	3b01      	subs	r3, #1
 8015b4c:	4543      	cmp	r3, r8
 8015b4e:	dc09      	bgt.n	8015b64 <_printf_float+0x254>
 8015b50:	6823      	ldr	r3, [r4, #0]
 8015b52:	079b      	lsls	r3, r3, #30
 8015b54:	f100 8103 	bmi.w	8015d5e <_printf_float+0x44e>
 8015b58:	68e0      	ldr	r0, [r4, #12]
 8015b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b5c:	4298      	cmp	r0, r3
 8015b5e:	bfb8      	it	lt
 8015b60:	4618      	movlt	r0, r3
 8015b62:	e734      	b.n	80159ce <_printf_float+0xbe>
 8015b64:	2301      	movs	r3, #1
 8015b66:	464a      	mov	r2, r9
 8015b68:	4631      	mov	r1, r6
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	47b8      	blx	r7
 8015b6e:	3001      	adds	r0, #1
 8015b70:	f43f af2b 	beq.w	80159ca <_printf_float+0xba>
 8015b74:	f108 0801 	add.w	r8, r8, #1
 8015b78:	e7e6      	b.n	8015b48 <_printf_float+0x238>
 8015b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	dc2b      	bgt.n	8015bd8 <_printf_float+0x2c8>
 8015b80:	2301      	movs	r3, #1
 8015b82:	4a26      	ldr	r2, [pc, #152]	; (8015c1c <_printf_float+0x30c>)
 8015b84:	4631      	mov	r1, r6
 8015b86:	4628      	mov	r0, r5
 8015b88:	47b8      	blx	r7
 8015b8a:	3001      	adds	r0, #1
 8015b8c:	f43f af1d 	beq.w	80159ca <_printf_float+0xba>
 8015b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b92:	b923      	cbnz	r3, 8015b9e <_printf_float+0x28e>
 8015b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b96:	b913      	cbnz	r3, 8015b9e <_printf_float+0x28e>
 8015b98:	6823      	ldr	r3, [r4, #0]
 8015b9a:	07d9      	lsls	r1, r3, #31
 8015b9c:	d5d8      	bpl.n	8015b50 <_printf_float+0x240>
 8015b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ba2:	4631      	mov	r1, r6
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	47b8      	blx	r7
 8015ba8:	3001      	adds	r0, #1
 8015baa:	f43f af0e 	beq.w	80159ca <_printf_float+0xba>
 8015bae:	f04f 0900 	mov.w	r9, #0
 8015bb2:	f104 0a1a 	add.w	sl, r4, #26
 8015bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bb8:	425b      	negs	r3, r3
 8015bba:	454b      	cmp	r3, r9
 8015bbc:	dc01      	bgt.n	8015bc2 <_printf_float+0x2b2>
 8015bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bc0:	e794      	b.n	8015aec <_printf_float+0x1dc>
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	4652      	mov	r2, sl
 8015bc6:	4631      	mov	r1, r6
 8015bc8:	4628      	mov	r0, r5
 8015bca:	47b8      	blx	r7
 8015bcc:	3001      	adds	r0, #1
 8015bce:	f43f aefc 	beq.w	80159ca <_printf_float+0xba>
 8015bd2:	f109 0901 	add.w	r9, r9, #1
 8015bd6:	e7ee      	b.n	8015bb6 <_printf_float+0x2a6>
 8015bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	bfa8      	it	ge
 8015be0:	461a      	movge	r2, r3
 8015be2:	2a00      	cmp	r2, #0
 8015be4:	4691      	mov	r9, r2
 8015be6:	dd07      	ble.n	8015bf8 <_printf_float+0x2e8>
 8015be8:	4613      	mov	r3, r2
 8015bea:	4631      	mov	r1, r6
 8015bec:	4642      	mov	r2, r8
 8015bee:	4628      	mov	r0, r5
 8015bf0:	47b8      	blx	r7
 8015bf2:	3001      	adds	r0, #1
 8015bf4:	f43f aee9 	beq.w	80159ca <_printf_float+0xba>
 8015bf8:	f104 031a 	add.w	r3, r4, #26
 8015bfc:	f04f 0b00 	mov.w	fp, #0
 8015c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c04:	9306      	str	r3, [sp, #24]
 8015c06:	e015      	b.n	8015c34 <_printf_float+0x324>
 8015c08:	7fefffff 	.word	0x7fefffff
 8015c0c:	0801a264 	.word	0x0801a264
 8015c10:	0801a260 	.word	0x0801a260
 8015c14:	0801a26c 	.word	0x0801a26c
 8015c18:	0801a268 	.word	0x0801a268
 8015c1c:	0801a423 	.word	0x0801a423
 8015c20:	2301      	movs	r3, #1
 8015c22:	9a06      	ldr	r2, [sp, #24]
 8015c24:	4631      	mov	r1, r6
 8015c26:	4628      	mov	r0, r5
 8015c28:	47b8      	blx	r7
 8015c2a:	3001      	adds	r0, #1
 8015c2c:	f43f aecd 	beq.w	80159ca <_printf_float+0xba>
 8015c30:	f10b 0b01 	add.w	fp, fp, #1
 8015c34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015c38:	ebaa 0309 	sub.w	r3, sl, r9
 8015c3c:	455b      	cmp	r3, fp
 8015c3e:	dcef      	bgt.n	8015c20 <_printf_float+0x310>
 8015c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c44:	429a      	cmp	r2, r3
 8015c46:	44d0      	add	r8, sl
 8015c48:	db15      	blt.n	8015c76 <_printf_float+0x366>
 8015c4a:	6823      	ldr	r3, [r4, #0]
 8015c4c:	07da      	lsls	r2, r3, #31
 8015c4e:	d412      	bmi.n	8015c76 <_printf_float+0x366>
 8015c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c54:	eba3 020a 	sub.w	r2, r3, sl
 8015c58:	eba3 0a01 	sub.w	sl, r3, r1
 8015c5c:	4592      	cmp	sl, r2
 8015c5e:	bfa8      	it	ge
 8015c60:	4692      	movge	sl, r2
 8015c62:	f1ba 0f00 	cmp.w	sl, #0
 8015c66:	dc0e      	bgt.n	8015c86 <_printf_float+0x376>
 8015c68:	f04f 0800 	mov.w	r8, #0
 8015c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c70:	f104 091a 	add.w	r9, r4, #26
 8015c74:	e019      	b.n	8015caa <_printf_float+0x39a>
 8015c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c7a:	4631      	mov	r1, r6
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	47b8      	blx	r7
 8015c80:	3001      	adds	r0, #1
 8015c82:	d1e5      	bne.n	8015c50 <_printf_float+0x340>
 8015c84:	e6a1      	b.n	80159ca <_printf_float+0xba>
 8015c86:	4653      	mov	r3, sl
 8015c88:	4642      	mov	r2, r8
 8015c8a:	4631      	mov	r1, r6
 8015c8c:	4628      	mov	r0, r5
 8015c8e:	47b8      	blx	r7
 8015c90:	3001      	adds	r0, #1
 8015c92:	d1e9      	bne.n	8015c68 <_printf_float+0x358>
 8015c94:	e699      	b.n	80159ca <_printf_float+0xba>
 8015c96:	2301      	movs	r3, #1
 8015c98:	464a      	mov	r2, r9
 8015c9a:	4631      	mov	r1, r6
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	47b8      	blx	r7
 8015ca0:	3001      	adds	r0, #1
 8015ca2:	f43f ae92 	beq.w	80159ca <_printf_float+0xba>
 8015ca6:	f108 0801 	add.w	r8, r8, #1
 8015caa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cae:	1a9b      	subs	r3, r3, r2
 8015cb0:	eba3 030a 	sub.w	r3, r3, sl
 8015cb4:	4543      	cmp	r3, r8
 8015cb6:	dcee      	bgt.n	8015c96 <_printf_float+0x386>
 8015cb8:	e74a      	b.n	8015b50 <_printf_float+0x240>
 8015cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cbc:	2a01      	cmp	r2, #1
 8015cbe:	dc01      	bgt.n	8015cc4 <_printf_float+0x3b4>
 8015cc0:	07db      	lsls	r3, r3, #31
 8015cc2:	d53a      	bpl.n	8015d3a <_printf_float+0x42a>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	4642      	mov	r2, r8
 8015cc8:	4631      	mov	r1, r6
 8015cca:	4628      	mov	r0, r5
 8015ccc:	47b8      	blx	r7
 8015cce:	3001      	adds	r0, #1
 8015cd0:	f43f ae7b 	beq.w	80159ca <_printf_float+0xba>
 8015cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cd8:	4631      	mov	r1, r6
 8015cda:	4628      	mov	r0, r5
 8015cdc:	47b8      	blx	r7
 8015cde:	3001      	adds	r0, #1
 8015ce0:	f108 0801 	add.w	r8, r8, #1
 8015ce4:	f43f ae71 	beq.w	80159ca <_printf_float+0xba>
 8015ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cea:	2200      	movs	r2, #0
 8015cec:	f103 3aff 	add.w	sl, r3, #4294967295
 8015cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f7ea feff 	bl	8000af8 <__aeabi_dcmpeq>
 8015cfa:	b9c8      	cbnz	r0, 8015d30 <_printf_float+0x420>
 8015cfc:	4653      	mov	r3, sl
 8015cfe:	4642      	mov	r2, r8
 8015d00:	4631      	mov	r1, r6
 8015d02:	4628      	mov	r0, r5
 8015d04:	47b8      	blx	r7
 8015d06:	3001      	adds	r0, #1
 8015d08:	d10e      	bne.n	8015d28 <_printf_float+0x418>
 8015d0a:	e65e      	b.n	80159ca <_printf_float+0xba>
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	4652      	mov	r2, sl
 8015d10:	4631      	mov	r1, r6
 8015d12:	4628      	mov	r0, r5
 8015d14:	47b8      	blx	r7
 8015d16:	3001      	adds	r0, #1
 8015d18:	f43f ae57 	beq.w	80159ca <_printf_float+0xba>
 8015d1c:	f108 0801 	add.w	r8, r8, #1
 8015d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d22:	3b01      	subs	r3, #1
 8015d24:	4543      	cmp	r3, r8
 8015d26:	dcf1      	bgt.n	8015d0c <_printf_float+0x3fc>
 8015d28:	464b      	mov	r3, r9
 8015d2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015d2e:	e6de      	b.n	8015aee <_printf_float+0x1de>
 8015d30:	f04f 0800 	mov.w	r8, #0
 8015d34:	f104 0a1a 	add.w	sl, r4, #26
 8015d38:	e7f2      	b.n	8015d20 <_printf_float+0x410>
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	e7df      	b.n	8015cfe <_printf_float+0x3ee>
 8015d3e:	2301      	movs	r3, #1
 8015d40:	464a      	mov	r2, r9
 8015d42:	4631      	mov	r1, r6
 8015d44:	4628      	mov	r0, r5
 8015d46:	47b8      	blx	r7
 8015d48:	3001      	adds	r0, #1
 8015d4a:	f43f ae3e 	beq.w	80159ca <_printf_float+0xba>
 8015d4e:	f108 0801 	add.w	r8, r8, #1
 8015d52:	68e3      	ldr	r3, [r4, #12]
 8015d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d56:	1a9b      	subs	r3, r3, r2
 8015d58:	4543      	cmp	r3, r8
 8015d5a:	dcf0      	bgt.n	8015d3e <_printf_float+0x42e>
 8015d5c:	e6fc      	b.n	8015b58 <_printf_float+0x248>
 8015d5e:	f04f 0800 	mov.w	r8, #0
 8015d62:	f104 0919 	add.w	r9, r4, #25
 8015d66:	e7f4      	b.n	8015d52 <_printf_float+0x442>
 8015d68:	2900      	cmp	r1, #0
 8015d6a:	f43f ae8b 	beq.w	8015a84 <_printf_float+0x174>
 8015d6e:	2300      	movs	r3, #0
 8015d70:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015d74:	ab09      	add	r3, sp, #36	; 0x24
 8015d76:	9300      	str	r3, [sp, #0]
 8015d78:	ec49 8b10 	vmov	d0, r8, r9
 8015d7c:	6022      	str	r2, [r4, #0]
 8015d7e:	f8cd a004 	str.w	sl, [sp, #4]
 8015d82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7ff fd2e 	bl	80157e8 <__cvt>
 8015d8c:	4680      	mov	r8, r0
 8015d8e:	e648      	b.n	8015a22 <_printf_float+0x112>

08015d90 <_printf_common>:
 8015d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d94:	4691      	mov	r9, r2
 8015d96:	461f      	mov	r7, r3
 8015d98:	688a      	ldr	r2, [r1, #8]
 8015d9a:	690b      	ldr	r3, [r1, #16]
 8015d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015da0:	4293      	cmp	r3, r2
 8015da2:	bfb8      	it	lt
 8015da4:	4613      	movlt	r3, r2
 8015da6:	f8c9 3000 	str.w	r3, [r9]
 8015daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015dae:	4606      	mov	r6, r0
 8015db0:	460c      	mov	r4, r1
 8015db2:	b112      	cbz	r2, 8015dba <_printf_common+0x2a>
 8015db4:	3301      	adds	r3, #1
 8015db6:	f8c9 3000 	str.w	r3, [r9]
 8015dba:	6823      	ldr	r3, [r4, #0]
 8015dbc:	0699      	lsls	r1, r3, #26
 8015dbe:	bf42      	ittt	mi
 8015dc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015dc4:	3302      	addmi	r3, #2
 8015dc6:	f8c9 3000 	strmi.w	r3, [r9]
 8015dca:	6825      	ldr	r5, [r4, #0]
 8015dcc:	f015 0506 	ands.w	r5, r5, #6
 8015dd0:	d107      	bne.n	8015de2 <_printf_common+0x52>
 8015dd2:	f104 0a19 	add.w	sl, r4, #25
 8015dd6:	68e3      	ldr	r3, [r4, #12]
 8015dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8015ddc:	1a9b      	subs	r3, r3, r2
 8015dde:	42ab      	cmp	r3, r5
 8015de0:	dc28      	bgt.n	8015e34 <_printf_common+0xa4>
 8015de2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015de6:	6822      	ldr	r2, [r4, #0]
 8015de8:	3300      	adds	r3, #0
 8015dea:	bf18      	it	ne
 8015dec:	2301      	movne	r3, #1
 8015dee:	0692      	lsls	r2, r2, #26
 8015df0:	d42d      	bmi.n	8015e4e <_printf_common+0xbe>
 8015df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015df6:	4639      	mov	r1, r7
 8015df8:	4630      	mov	r0, r6
 8015dfa:	47c0      	blx	r8
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d020      	beq.n	8015e42 <_printf_common+0xb2>
 8015e00:	6823      	ldr	r3, [r4, #0]
 8015e02:	68e5      	ldr	r5, [r4, #12]
 8015e04:	f8d9 2000 	ldr.w	r2, [r9]
 8015e08:	f003 0306 	and.w	r3, r3, #6
 8015e0c:	2b04      	cmp	r3, #4
 8015e0e:	bf08      	it	eq
 8015e10:	1aad      	subeq	r5, r5, r2
 8015e12:	68a3      	ldr	r3, [r4, #8]
 8015e14:	6922      	ldr	r2, [r4, #16]
 8015e16:	bf0c      	ite	eq
 8015e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e1c:	2500      	movne	r5, #0
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	bfc4      	itt	gt
 8015e22:	1a9b      	subgt	r3, r3, r2
 8015e24:	18ed      	addgt	r5, r5, r3
 8015e26:	f04f 0900 	mov.w	r9, #0
 8015e2a:	341a      	adds	r4, #26
 8015e2c:	454d      	cmp	r5, r9
 8015e2e:	d11a      	bne.n	8015e66 <_printf_common+0xd6>
 8015e30:	2000      	movs	r0, #0
 8015e32:	e008      	b.n	8015e46 <_printf_common+0xb6>
 8015e34:	2301      	movs	r3, #1
 8015e36:	4652      	mov	r2, sl
 8015e38:	4639      	mov	r1, r7
 8015e3a:	4630      	mov	r0, r6
 8015e3c:	47c0      	blx	r8
 8015e3e:	3001      	adds	r0, #1
 8015e40:	d103      	bne.n	8015e4a <_printf_common+0xba>
 8015e42:	f04f 30ff 	mov.w	r0, #4294967295
 8015e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e4a:	3501      	adds	r5, #1
 8015e4c:	e7c3      	b.n	8015dd6 <_printf_common+0x46>
 8015e4e:	18e1      	adds	r1, r4, r3
 8015e50:	1c5a      	adds	r2, r3, #1
 8015e52:	2030      	movs	r0, #48	; 0x30
 8015e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e58:	4422      	add	r2, r4
 8015e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e62:	3302      	adds	r3, #2
 8015e64:	e7c5      	b.n	8015df2 <_printf_common+0x62>
 8015e66:	2301      	movs	r3, #1
 8015e68:	4622      	mov	r2, r4
 8015e6a:	4639      	mov	r1, r7
 8015e6c:	4630      	mov	r0, r6
 8015e6e:	47c0      	blx	r8
 8015e70:	3001      	adds	r0, #1
 8015e72:	d0e6      	beq.n	8015e42 <_printf_common+0xb2>
 8015e74:	f109 0901 	add.w	r9, r9, #1
 8015e78:	e7d8      	b.n	8015e2c <_printf_common+0x9c>
	...

08015e7c <_printf_i>:
 8015e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015e84:	460c      	mov	r4, r1
 8015e86:	7e09      	ldrb	r1, [r1, #24]
 8015e88:	b085      	sub	sp, #20
 8015e8a:	296e      	cmp	r1, #110	; 0x6e
 8015e8c:	4617      	mov	r7, r2
 8015e8e:	4606      	mov	r6, r0
 8015e90:	4698      	mov	r8, r3
 8015e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e94:	f000 80b3 	beq.w	8015ffe <_printf_i+0x182>
 8015e98:	d822      	bhi.n	8015ee0 <_printf_i+0x64>
 8015e9a:	2963      	cmp	r1, #99	; 0x63
 8015e9c:	d036      	beq.n	8015f0c <_printf_i+0x90>
 8015e9e:	d80a      	bhi.n	8015eb6 <_printf_i+0x3a>
 8015ea0:	2900      	cmp	r1, #0
 8015ea2:	f000 80b9 	beq.w	8016018 <_printf_i+0x19c>
 8015ea6:	2958      	cmp	r1, #88	; 0x58
 8015ea8:	f000 8083 	beq.w	8015fb2 <_printf_i+0x136>
 8015eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015eb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015eb4:	e032      	b.n	8015f1c <_printf_i+0xa0>
 8015eb6:	2964      	cmp	r1, #100	; 0x64
 8015eb8:	d001      	beq.n	8015ebe <_printf_i+0x42>
 8015eba:	2969      	cmp	r1, #105	; 0x69
 8015ebc:	d1f6      	bne.n	8015eac <_printf_i+0x30>
 8015ebe:	6820      	ldr	r0, [r4, #0]
 8015ec0:	6813      	ldr	r3, [r2, #0]
 8015ec2:	0605      	lsls	r5, r0, #24
 8015ec4:	f103 0104 	add.w	r1, r3, #4
 8015ec8:	d52a      	bpl.n	8015f20 <_printf_i+0xa4>
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	6011      	str	r1, [r2, #0]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	da03      	bge.n	8015eda <_printf_i+0x5e>
 8015ed2:	222d      	movs	r2, #45	; 0x2d
 8015ed4:	425b      	negs	r3, r3
 8015ed6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015eda:	486f      	ldr	r0, [pc, #444]	; (8016098 <_printf_i+0x21c>)
 8015edc:	220a      	movs	r2, #10
 8015ede:	e039      	b.n	8015f54 <_printf_i+0xd8>
 8015ee0:	2973      	cmp	r1, #115	; 0x73
 8015ee2:	f000 809d 	beq.w	8016020 <_printf_i+0x1a4>
 8015ee6:	d808      	bhi.n	8015efa <_printf_i+0x7e>
 8015ee8:	296f      	cmp	r1, #111	; 0x6f
 8015eea:	d020      	beq.n	8015f2e <_printf_i+0xb2>
 8015eec:	2970      	cmp	r1, #112	; 0x70
 8015eee:	d1dd      	bne.n	8015eac <_printf_i+0x30>
 8015ef0:	6823      	ldr	r3, [r4, #0]
 8015ef2:	f043 0320 	orr.w	r3, r3, #32
 8015ef6:	6023      	str	r3, [r4, #0]
 8015ef8:	e003      	b.n	8015f02 <_printf_i+0x86>
 8015efa:	2975      	cmp	r1, #117	; 0x75
 8015efc:	d017      	beq.n	8015f2e <_printf_i+0xb2>
 8015efe:	2978      	cmp	r1, #120	; 0x78
 8015f00:	d1d4      	bne.n	8015eac <_printf_i+0x30>
 8015f02:	2378      	movs	r3, #120	; 0x78
 8015f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f08:	4864      	ldr	r0, [pc, #400]	; (801609c <_printf_i+0x220>)
 8015f0a:	e055      	b.n	8015fb8 <_printf_i+0x13c>
 8015f0c:	6813      	ldr	r3, [r2, #0]
 8015f0e:	1d19      	adds	r1, r3, #4
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	6011      	str	r1, [r2, #0]
 8015f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	e08c      	b.n	801603a <_printf_i+0x1be>
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	6011      	str	r1, [r2, #0]
 8015f24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f28:	bf18      	it	ne
 8015f2a:	b21b      	sxthne	r3, r3
 8015f2c:	e7cf      	b.n	8015ece <_printf_i+0x52>
 8015f2e:	6813      	ldr	r3, [r2, #0]
 8015f30:	6825      	ldr	r5, [r4, #0]
 8015f32:	1d18      	adds	r0, r3, #4
 8015f34:	6010      	str	r0, [r2, #0]
 8015f36:	0628      	lsls	r0, r5, #24
 8015f38:	d501      	bpl.n	8015f3e <_printf_i+0xc2>
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	e002      	b.n	8015f44 <_printf_i+0xc8>
 8015f3e:	0668      	lsls	r0, r5, #25
 8015f40:	d5fb      	bpl.n	8015f3a <_printf_i+0xbe>
 8015f42:	881b      	ldrh	r3, [r3, #0]
 8015f44:	4854      	ldr	r0, [pc, #336]	; (8016098 <_printf_i+0x21c>)
 8015f46:	296f      	cmp	r1, #111	; 0x6f
 8015f48:	bf14      	ite	ne
 8015f4a:	220a      	movne	r2, #10
 8015f4c:	2208      	moveq	r2, #8
 8015f4e:	2100      	movs	r1, #0
 8015f50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f54:	6865      	ldr	r5, [r4, #4]
 8015f56:	60a5      	str	r5, [r4, #8]
 8015f58:	2d00      	cmp	r5, #0
 8015f5a:	f2c0 8095 	blt.w	8016088 <_printf_i+0x20c>
 8015f5e:	6821      	ldr	r1, [r4, #0]
 8015f60:	f021 0104 	bic.w	r1, r1, #4
 8015f64:	6021      	str	r1, [r4, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d13d      	bne.n	8015fe6 <_printf_i+0x16a>
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	f040 808e 	bne.w	801608c <_printf_i+0x210>
 8015f70:	4665      	mov	r5, ip
 8015f72:	2a08      	cmp	r2, #8
 8015f74:	d10b      	bne.n	8015f8e <_printf_i+0x112>
 8015f76:	6823      	ldr	r3, [r4, #0]
 8015f78:	07db      	lsls	r3, r3, #31
 8015f7a:	d508      	bpl.n	8015f8e <_printf_i+0x112>
 8015f7c:	6923      	ldr	r3, [r4, #16]
 8015f7e:	6862      	ldr	r2, [r4, #4]
 8015f80:	429a      	cmp	r2, r3
 8015f82:	bfde      	ittt	le
 8015f84:	2330      	movle	r3, #48	; 0x30
 8015f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f8e:	ebac 0305 	sub.w	r3, ip, r5
 8015f92:	6123      	str	r3, [r4, #16]
 8015f94:	f8cd 8000 	str.w	r8, [sp]
 8015f98:	463b      	mov	r3, r7
 8015f9a:	aa03      	add	r2, sp, #12
 8015f9c:	4621      	mov	r1, r4
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	f7ff fef6 	bl	8015d90 <_printf_common>
 8015fa4:	3001      	adds	r0, #1
 8015fa6:	d14d      	bne.n	8016044 <_printf_i+0x1c8>
 8015fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fac:	b005      	add	sp, #20
 8015fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fb2:	4839      	ldr	r0, [pc, #228]	; (8016098 <_printf_i+0x21c>)
 8015fb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015fb8:	6813      	ldr	r3, [r2, #0]
 8015fba:	6821      	ldr	r1, [r4, #0]
 8015fbc:	1d1d      	adds	r5, r3, #4
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	6015      	str	r5, [r2, #0]
 8015fc2:	060a      	lsls	r2, r1, #24
 8015fc4:	d50b      	bpl.n	8015fde <_printf_i+0x162>
 8015fc6:	07ca      	lsls	r2, r1, #31
 8015fc8:	bf44      	itt	mi
 8015fca:	f041 0120 	orrmi.w	r1, r1, #32
 8015fce:	6021      	strmi	r1, [r4, #0]
 8015fd0:	b91b      	cbnz	r3, 8015fda <_printf_i+0x15e>
 8015fd2:	6822      	ldr	r2, [r4, #0]
 8015fd4:	f022 0220 	bic.w	r2, r2, #32
 8015fd8:	6022      	str	r2, [r4, #0]
 8015fda:	2210      	movs	r2, #16
 8015fdc:	e7b7      	b.n	8015f4e <_printf_i+0xd2>
 8015fde:	064d      	lsls	r5, r1, #25
 8015fe0:	bf48      	it	mi
 8015fe2:	b29b      	uxthmi	r3, r3
 8015fe4:	e7ef      	b.n	8015fc6 <_printf_i+0x14a>
 8015fe6:	4665      	mov	r5, ip
 8015fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8015fec:	fb02 3311 	mls	r3, r2, r1, r3
 8015ff0:	5cc3      	ldrb	r3, [r0, r3]
 8015ff2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015ff6:	460b      	mov	r3, r1
 8015ff8:	2900      	cmp	r1, #0
 8015ffa:	d1f5      	bne.n	8015fe8 <_printf_i+0x16c>
 8015ffc:	e7b9      	b.n	8015f72 <_printf_i+0xf6>
 8015ffe:	6813      	ldr	r3, [r2, #0]
 8016000:	6825      	ldr	r5, [r4, #0]
 8016002:	6961      	ldr	r1, [r4, #20]
 8016004:	1d18      	adds	r0, r3, #4
 8016006:	6010      	str	r0, [r2, #0]
 8016008:	0628      	lsls	r0, r5, #24
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	d501      	bpl.n	8016012 <_printf_i+0x196>
 801600e:	6019      	str	r1, [r3, #0]
 8016010:	e002      	b.n	8016018 <_printf_i+0x19c>
 8016012:	066a      	lsls	r2, r5, #25
 8016014:	d5fb      	bpl.n	801600e <_printf_i+0x192>
 8016016:	8019      	strh	r1, [r3, #0]
 8016018:	2300      	movs	r3, #0
 801601a:	6123      	str	r3, [r4, #16]
 801601c:	4665      	mov	r5, ip
 801601e:	e7b9      	b.n	8015f94 <_printf_i+0x118>
 8016020:	6813      	ldr	r3, [r2, #0]
 8016022:	1d19      	adds	r1, r3, #4
 8016024:	6011      	str	r1, [r2, #0]
 8016026:	681d      	ldr	r5, [r3, #0]
 8016028:	6862      	ldr	r2, [r4, #4]
 801602a:	2100      	movs	r1, #0
 801602c:	4628      	mov	r0, r5
 801602e:	f7ea f8ef 	bl	8000210 <memchr>
 8016032:	b108      	cbz	r0, 8016038 <_printf_i+0x1bc>
 8016034:	1b40      	subs	r0, r0, r5
 8016036:	6060      	str	r0, [r4, #4]
 8016038:	6863      	ldr	r3, [r4, #4]
 801603a:	6123      	str	r3, [r4, #16]
 801603c:	2300      	movs	r3, #0
 801603e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016042:	e7a7      	b.n	8015f94 <_printf_i+0x118>
 8016044:	6923      	ldr	r3, [r4, #16]
 8016046:	462a      	mov	r2, r5
 8016048:	4639      	mov	r1, r7
 801604a:	4630      	mov	r0, r6
 801604c:	47c0      	blx	r8
 801604e:	3001      	adds	r0, #1
 8016050:	d0aa      	beq.n	8015fa8 <_printf_i+0x12c>
 8016052:	6823      	ldr	r3, [r4, #0]
 8016054:	079b      	lsls	r3, r3, #30
 8016056:	d413      	bmi.n	8016080 <_printf_i+0x204>
 8016058:	68e0      	ldr	r0, [r4, #12]
 801605a:	9b03      	ldr	r3, [sp, #12]
 801605c:	4298      	cmp	r0, r3
 801605e:	bfb8      	it	lt
 8016060:	4618      	movlt	r0, r3
 8016062:	e7a3      	b.n	8015fac <_printf_i+0x130>
 8016064:	2301      	movs	r3, #1
 8016066:	464a      	mov	r2, r9
 8016068:	4639      	mov	r1, r7
 801606a:	4630      	mov	r0, r6
 801606c:	47c0      	blx	r8
 801606e:	3001      	adds	r0, #1
 8016070:	d09a      	beq.n	8015fa8 <_printf_i+0x12c>
 8016072:	3501      	adds	r5, #1
 8016074:	68e3      	ldr	r3, [r4, #12]
 8016076:	9a03      	ldr	r2, [sp, #12]
 8016078:	1a9b      	subs	r3, r3, r2
 801607a:	42ab      	cmp	r3, r5
 801607c:	dcf2      	bgt.n	8016064 <_printf_i+0x1e8>
 801607e:	e7eb      	b.n	8016058 <_printf_i+0x1dc>
 8016080:	2500      	movs	r5, #0
 8016082:	f104 0919 	add.w	r9, r4, #25
 8016086:	e7f5      	b.n	8016074 <_printf_i+0x1f8>
 8016088:	2b00      	cmp	r3, #0
 801608a:	d1ac      	bne.n	8015fe6 <_printf_i+0x16a>
 801608c:	7803      	ldrb	r3, [r0, #0]
 801608e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016096:	e76c      	b.n	8015f72 <_printf_i+0xf6>
 8016098:	0801a270 	.word	0x0801a270
 801609c:	0801a281 	.word	0x0801a281

080160a0 <_scanf_float>:
 80160a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a4:	469a      	mov	sl, r3
 80160a6:	688b      	ldr	r3, [r1, #8]
 80160a8:	4616      	mov	r6, r2
 80160aa:	1e5a      	subs	r2, r3, #1
 80160ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80160b0:	b087      	sub	sp, #28
 80160b2:	bf83      	ittte	hi
 80160b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80160b8:	189b      	addhi	r3, r3, r2
 80160ba:	9301      	strhi	r3, [sp, #4]
 80160bc:	2300      	movls	r3, #0
 80160be:	bf86      	itte	hi
 80160c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80160c4:	608b      	strhi	r3, [r1, #8]
 80160c6:	9301      	strls	r3, [sp, #4]
 80160c8:	680b      	ldr	r3, [r1, #0]
 80160ca:	4688      	mov	r8, r1
 80160cc:	f04f 0b00 	mov.w	fp, #0
 80160d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80160d4:	f848 3b1c 	str.w	r3, [r8], #28
 80160d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80160dc:	4607      	mov	r7, r0
 80160de:	460c      	mov	r4, r1
 80160e0:	4645      	mov	r5, r8
 80160e2:	465a      	mov	r2, fp
 80160e4:	46d9      	mov	r9, fp
 80160e6:	f8cd b008 	str.w	fp, [sp, #8]
 80160ea:	68a1      	ldr	r1, [r4, #8]
 80160ec:	b181      	cbz	r1, 8016110 <_scanf_float+0x70>
 80160ee:	6833      	ldr	r3, [r6, #0]
 80160f0:	781b      	ldrb	r3, [r3, #0]
 80160f2:	2b49      	cmp	r3, #73	; 0x49
 80160f4:	d071      	beq.n	80161da <_scanf_float+0x13a>
 80160f6:	d84d      	bhi.n	8016194 <_scanf_float+0xf4>
 80160f8:	2b39      	cmp	r3, #57	; 0x39
 80160fa:	d840      	bhi.n	801617e <_scanf_float+0xde>
 80160fc:	2b31      	cmp	r3, #49	; 0x31
 80160fe:	f080 8088 	bcs.w	8016212 <_scanf_float+0x172>
 8016102:	2b2d      	cmp	r3, #45	; 0x2d
 8016104:	f000 8090 	beq.w	8016228 <_scanf_float+0x188>
 8016108:	d815      	bhi.n	8016136 <_scanf_float+0x96>
 801610a:	2b2b      	cmp	r3, #43	; 0x2b
 801610c:	f000 808c 	beq.w	8016228 <_scanf_float+0x188>
 8016110:	f1b9 0f00 	cmp.w	r9, #0
 8016114:	d003      	beq.n	801611e <_scanf_float+0x7e>
 8016116:	6823      	ldr	r3, [r4, #0]
 8016118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801611c:	6023      	str	r3, [r4, #0]
 801611e:	3a01      	subs	r2, #1
 8016120:	2a01      	cmp	r2, #1
 8016122:	f200 80ea 	bhi.w	80162fa <_scanf_float+0x25a>
 8016126:	4545      	cmp	r5, r8
 8016128:	f200 80dc 	bhi.w	80162e4 <_scanf_float+0x244>
 801612c:	2601      	movs	r6, #1
 801612e:	4630      	mov	r0, r6
 8016130:	b007      	add	sp, #28
 8016132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016136:	2b2e      	cmp	r3, #46	; 0x2e
 8016138:	f000 809f 	beq.w	801627a <_scanf_float+0x1da>
 801613c:	2b30      	cmp	r3, #48	; 0x30
 801613e:	d1e7      	bne.n	8016110 <_scanf_float+0x70>
 8016140:	6820      	ldr	r0, [r4, #0]
 8016142:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016146:	d064      	beq.n	8016212 <_scanf_float+0x172>
 8016148:	9b01      	ldr	r3, [sp, #4]
 801614a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801614e:	6020      	str	r0, [r4, #0]
 8016150:	f109 0901 	add.w	r9, r9, #1
 8016154:	b11b      	cbz	r3, 801615e <_scanf_float+0xbe>
 8016156:	3b01      	subs	r3, #1
 8016158:	3101      	adds	r1, #1
 801615a:	9301      	str	r3, [sp, #4]
 801615c:	60a1      	str	r1, [r4, #8]
 801615e:	68a3      	ldr	r3, [r4, #8]
 8016160:	3b01      	subs	r3, #1
 8016162:	60a3      	str	r3, [r4, #8]
 8016164:	6923      	ldr	r3, [r4, #16]
 8016166:	3301      	adds	r3, #1
 8016168:	6123      	str	r3, [r4, #16]
 801616a:	6873      	ldr	r3, [r6, #4]
 801616c:	3b01      	subs	r3, #1
 801616e:	2b00      	cmp	r3, #0
 8016170:	6073      	str	r3, [r6, #4]
 8016172:	f340 80ac 	ble.w	80162ce <_scanf_float+0x22e>
 8016176:	6833      	ldr	r3, [r6, #0]
 8016178:	3301      	adds	r3, #1
 801617a:	6033      	str	r3, [r6, #0]
 801617c:	e7b5      	b.n	80160ea <_scanf_float+0x4a>
 801617e:	2b45      	cmp	r3, #69	; 0x45
 8016180:	f000 8085 	beq.w	801628e <_scanf_float+0x1ee>
 8016184:	2b46      	cmp	r3, #70	; 0x46
 8016186:	d06a      	beq.n	801625e <_scanf_float+0x1be>
 8016188:	2b41      	cmp	r3, #65	; 0x41
 801618a:	d1c1      	bne.n	8016110 <_scanf_float+0x70>
 801618c:	2a01      	cmp	r2, #1
 801618e:	d1bf      	bne.n	8016110 <_scanf_float+0x70>
 8016190:	2202      	movs	r2, #2
 8016192:	e046      	b.n	8016222 <_scanf_float+0x182>
 8016194:	2b65      	cmp	r3, #101	; 0x65
 8016196:	d07a      	beq.n	801628e <_scanf_float+0x1ee>
 8016198:	d818      	bhi.n	80161cc <_scanf_float+0x12c>
 801619a:	2b54      	cmp	r3, #84	; 0x54
 801619c:	d066      	beq.n	801626c <_scanf_float+0x1cc>
 801619e:	d811      	bhi.n	80161c4 <_scanf_float+0x124>
 80161a0:	2b4e      	cmp	r3, #78	; 0x4e
 80161a2:	d1b5      	bne.n	8016110 <_scanf_float+0x70>
 80161a4:	2a00      	cmp	r2, #0
 80161a6:	d146      	bne.n	8016236 <_scanf_float+0x196>
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	d145      	bne.n	801623a <_scanf_float+0x19a>
 80161ae:	6821      	ldr	r1, [r4, #0]
 80161b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80161b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80161b8:	d13f      	bne.n	801623a <_scanf_float+0x19a>
 80161ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80161be:	6021      	str	r1, [r4, #0]
 80161c0:	2201      	movs	r2, #1
 80161c2:	e02e      	b.n	8016222 <_scanf_float+0x182>
 80161c4:	2b59      	cmp	r3, #89	; 0x59
 80161c6:	d01e      	beq.n	8016206 <_scanf_float+0x166>
 80161c8:	2b61      	cmp	r3, #97	; 0x61
 80161ca:	e7de      	b.n	801618a <_scanf_float+0xea>
 80161cc:	2b6e      	cmp	r3, #110	; 0x6e
 80161ce:	d0e9      	beq.n	80161a4 <_scanf_float+0x104>
 80161d0:	d815      	bhi.n	80161fe <_scanf_float+0x15e>
 80161d2:	2b66      	cmp	r3, #102	; 0x66
 80161d4:	d043      	beq.n	801625e <_scanf_float+0x1be>
 80161d6:	2b69      	cmp	r3, #105	; 0x69
 80161d8:	d19a      	bne.n	8016110 <_scanf_float+0x70>
 80161da:	f1bb 0f00 	cmp.w	fp, #0
 80161de:	d138      	bne.n	8016252 <_scanf_float+0x1b2>
 80161e0:	f1b9 0f00 	cmp.w	r9, #0
 80161e4:	d197      	bne.n	8016116 <_scanf_float+0x76>
 80161e6:	6821      	ldr	r1, [r4, #0]
 80161e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80161ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80161f0:	d195      	bne.n	801611e <_scanf_float+0x7e>
 80161f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80161f6:	6021      	str	r1, [r4, #0]
 80161f8:	f04f 0b01 	mov.w	fp, #1
 80161fc:	e011      	b.n	8016222 <_scanf_float+0x182>
 80161fe:	2b74      	cmp	r3, #116	; 0x74
 8016200:	d034      	beq.n	801626c <_scanf_float+0x1cc>
 8016202:	2b79      	cmp	r3, #121	; 0x79
 8016204:	d184      	bne.n	8016110 <_scanf_float+0x70>
 8016206:	f1bb 0f07 	cmp.w	fp, #7
 801620a:	d181      	bne.n	8016110 <_scanf_float+0x70>
 801620c:	f04f 0b08 	mov.w	fp, #8
 8016210:	e007      	b.n	8016222 <_scanf_float+0x182>
 8016212:	eb12 0f0b 	cmn.w	r2, fp
 8016216:	f47f af7b 	bne.w	8016110 <_scanf_float+0x70>
 801621a:	6821      	ldr	r1, [r4, #0]
 801621c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016220:	6021      	str	r1, [r4, #0]
 8016222:	702b      	strb	r3, [r5, #0]
 8016224:	3501      	adds	r5, #1
 8016226:	e79a      	b.n	801615e <_scanf_float+0xbe>
 8016228:	6821      	ldr	r1, [r4, #0]
 801622a:	0608      	lsls	r0, r1, #24
 801622c:	f57f af70 	bpl.w	8016110 <_scanf_float+0x70>
 8016230:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016234:	e7f4      	b.n	8016220 <_scanf_float+0x180>
 8016236:	2a02      	cmp	r2, #2
 8016238:	d047      	beq.n	80162ca <_scanf_float+0x22a>
 801623a:	f1bb 0f01 	cmp.w	fp, #1
 801623e:	d003      	beq.n	8016248 <_scanf_float+0x1a8>
 8016240:	f1bb 0f04 	cmp.w	fp, #4
 8016244:	f47f af64 	bne.w	8016110 <_scanf_float+0x70>
 8016248:	f10b 0b01 	add.w	fp, fp, #1
 801624c:	fa5f fb8b 	uxtb.w	fp, fp
 8016250:	e7e7      	b.n	8016222 <_scanf_float+0x182>
 8016252:	f1bb 0f03 	cmp.w	fp, #3
 8016256:	d0f7      	beq.n	8016248 <_scanf_float+0x1a8>
 8016258:	f1bb 0f05 	cmp.w	fp, #5
 801625c:	e7f2      	b.n	8016244 <_scanf_float+0x1a4>
 801625e:	f1bb 0f02 	cmp.w	fp, #2
 8016262:	f47f af55 	bne.w	8016110 <_scanf_float+0x70>
 8016266:	f04f 0b03 	mov.w	fp, #3
 801626a:	e7da      	b.n	8016222 <_scanf_float+0x182>
 801626c:	f1bb 0f06 	cmp.w	fp, #6
 8016270:	f47f af4e 	bne.w	8016110 <_scanf_float+0x70>
 8016274:	f04f 0b07 	mov.w	fp, #7
 8016278:	e7d3      	b.n	8016222 <_scanf_float+0x182>
 801627a:	6821      	ldr	r1, [r4, #0]
 801627c:	0588      	lsls	r0, r1, #22
 801627e:	f57f af47 	bpl.w	8016110 <_scanf_float+0x70>
 8016282:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016286:	6021      	str	r1, [r4, #0]
 8016288:	f8cd 9008 	str.w	r9, [sp, #8]
 801628c:	e7c9      	b.n	8016222 <_scanf_float+0x182>
 801628e:	6821      	ldr	r1, [r4, #0]
 8016290:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016294:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016298:	d006      	beq.n	80162a8 <_scanf_float+0x208>
 801629a:	0548      	lsls	r0, r1, #21
 801629c:	f57f af38 	bpl.w	8016110 <_scanf_float+0x70>
 80162a0:	f1b9 0f00 	cmp.w	r9, #0
 80162a4:	f43f af3b 	beq.w	801611e <_scanf_float+0x7e>
 80162a8:	0588      	lsls	r0, r1, #22
 80162aa:	bf58      	it	pl
 80162ac:	9802      	ldrpl	r0, [sp, #8]
 80162ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80162b2:	bf58      	it	pl
 80162b4:	eba9 0000 	subpl.w	r0, r9, r0
 80162b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80162bc:	bf58      	it	pl
 80162be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80162c2:	6021      	str	r1, [r4, #0]
 80162c4:	f04f 0900 	mov.w	r9, #0
 80162c8:	e7ab      	b.n	8016222 <_scanf_float+0x182>
 80162ca:	2203      	movs	r2, #3
 80162cc:	e7a9      	b.n	8016222 <_scanf_float+0x182>
 80162ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80162d2:	9205      	str	r2, [sp, #20]
 80162d4:	4631      	mov	r1, r6
 80162d6:	4638      	mov	r0, r7
 80162d8:	4798      	blx	r3
 80162da:	9a05      	ldr	r2, [sp, #20]
 80162dc:	2800      	cmp	r0, #0
 80162de:	f43f af04 	beq.w	80160ea <_scanf_float+0x4a>
 80162e2:	e715      	b.n	8016110 <_scanf_float+0x70>
 80162e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80162e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80162ec:	4632      	mov	r2, r6
 80162ee:	4638      	mov	r0, r7
 80162f0:	4798      	blx	r3
 80162f2:	6923      	ldr	r3, [r4, #16]
 80162f4:	3b01      	subs	r3, #1
 80162f6:	6123      	str	r3, [r4, #16]
 80162f8:	e715      	b.n	8016126 <_scanf_float+0x86>
 80162fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80162fe:	2b06      	cmp	r3, #6
 8016300:	d80a      	bhi.n	8016318 <_scanf_float+0x278>
 8016302:	f1bb 0f02 	cmp.w	fp, #2
 8016306:	d968      	bls.n	80163da <_scanf_float+0x33a>
 8016308:	f1ab 0b03 	sub.w	fp, fp, #3
 801630c:	fa5f fb8b 	uxtb.w	fp, fp
 8016310:	eba5 0b0b 	sub.w	fp, r5, fp
 8016314:	455d      	cmp	r5, fp
 8016316:	d14b      	bne.n	80163b0 <_scanf_float+0x310>
 8016318:	6823      	ldr	r3, [r4, #0]
 801631a:	05da      	lsls	r2, r3, #23
 801631c:	d51f      	bpl.n	801635e <_scanf_float+0x2be>
 801631e:	055b      	lsls	r3, r3, #21
 8016320:	d468      	bmi.n	80163f4 <_scanf_float+0x354>
 8016322:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016326:	6923      	ldr	r3, [r4, #16]
 8016328:	2965      	cmp	r1, #101	; 0x65
 801632a:	f103 33ff 	add.w	r3, r3, #4294967295
 801632e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016332:	6123      	str	r3, [r4, #16]
 8016334:	d00d      	beq.n	8016352 <_scanf_float+0x2b2>
 8016336:	2945      	cmp	r1, #69	; 0x45
 8016338:	d00b      	beq.n	8016352 <_scanf_float+0x2b2>
 801633a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801633e:	4632      	mov	r2, r6
 8016340:	4638      	mov	r0, r7
 8016342:	4798      	blx	r3
 8016344:	6923      	ldr	r3, [r4, #16]
 8016346:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801634a:	3b01      	subs	r3, #1
 801634c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016350:	6123      	str	r3, [r4, #16]
 8016352:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016356:	4632      	mov	r2, r6
 8016358:	4638      	mov	r0, r7
 801635a:	4798      	blx	r3
 801635c:	465d      	mov	r5, fp
 801635e:	6826      	ldr	r6, [r4, #0]
 8016360:	f016 0610 	ands.w	r6, r6, #16
 8016364:	d17a      	bne.n	801645c <_scanf_float+0x3bc>
 8016366:	702e      	strb	r6, [r5, #0]
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016372:	d142      	bne.n	80163fa <_scanf_float+0x35a>
 8016374:	9b02      	ldr	r3, [sp, #8]
 8016376:	eba9 0303 	sub.w	r3, r9, r3
 801637a:	425a      	negs	r2, r3
 801637c:	2b00      	cmp	r3, #0
 801637e:	d149      	bne.n	8016414 <_scanf_float+0x374>
 8016380:	2200      	movs	r2, #0
 8016382:	4641      	mov	r1, r8
 8016384:	4638      	mov	r0, r7
 8016386:	f000 ff0b 	bl	80171a0 <_strtod_r>
 801638a:	6825      	ldr	r5, [r4, #0]
 801638c:	f8da 3000 	ldr.w	r3, [sl]
 8016390:	f015 0f02 	tst.w	r5, #2
 8016394:	f103 0204 	add.w	r2, r3, #4
 8016398:	ec59 8b10 	vmov	r8, r9, d0
 801639c:	f8ca 2000 	str.w	r2, [sl]
 80163a0:	d043      	beq.n	801642a <_scanf_float+0x38a>
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	e9c3 8900 	strd	r8, r9, [r3]
 80163a8:	68e3      	ldr	r3, [r4, #12]
 80163aa:	3301      	adds	r3, #1
 80163ac:	60e3      	str	r3, [r4, #12]
 80163ae:	e6be      	b.n	801612e <_scanf_float+0x8e>
 80163b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80163b8:	4632      	mov	r2, r6
 80163ba:	4638      	mov	r0, r7
 80163bc:	4798      	blx	r3
 80163be:	6923      	ldr	r3, [r4, #16]
 80163c0:	3b01      	subs	r3, #1
 80163c2:	6123      	str	r3, [r4, #16]
 80163c4:	e7a6      	b.n	8016314 <_scanf_float+0x274>
 80163c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80163ce:	4632      	mov	r2, r6
 80163d0:	4638      	mov	r0, r7
 80163d2:	4798      	blx	r3
 80163d4:	6923      	ldr	r3, [r4, #16]
 80163d6:	3b01      	subs	r3, #1
 80163d8:	6123      	str	r3, [r4, #16]
 80163da:	4545      	cmp	r5, r8
 80163dc:	d8f3      	bhi.n	80163c6 <_scanf_float+0x326>
 80163de:	e6a5      	b.n	801612c <_scanf_float+0x8c>
 80163e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80163e8:	4632      	mov	r2, r6
 80163ea:	4638      	mov	r0, r7
 80163ec:	4798      	blx	r3
 80163ee:	6923      	ldr	r3, [r4, #16]
 80163f0:	3b01      	subs	r3, #1
 80163f2:	6123      	str	r3, [r4, #16]
 80163f4:	4545      	cmp	r5, r8
 80163f6:	d8f3      	bhi.n	80163e0 <_scanf_float+0x340>
 80163f8:	e698      	b.n	801612c <_scanf_float+0x8c>
 80163fa:	9b03      	ldr	r3, [sp, #12]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d0bf      	beq.n	8016380 <_scanf_float+0x2e0>
 8016400:	9904      	ldr	r1, [sp, #16]
 8016402:	230a      	movs	r3, #10
 8016404:	4632      	mov	r2, r6
 8016406:	3101      	adds	r1, #1
 8016408:	4638      	mov	r0, r7
 801640a:	f000 ff55 	bl	80172b8 <_strtol_r>
 801640e:	9b03      	ldr	r3, [sp, #12]
 8016410:	9d04      	ldr	r5, [sp, #16]
 8016412:	1ac2      	subs	r2, r0, r3
 8016414:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016418:	429d      	cmp	r5, r3
 801641a:	bf28      	it	cs
 801641c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016420:	490f      	ldr	r1, [pc, #60]	; (8016460 <_scanf_float+0x3c0>)
 8016422:	4628      	mov	r0, r5
 8016424:	f000 f858 	bl	80164d8 <siprintf>
 8016428:	e7aa      	b.n	8016380 <_scanf_float+0x2e0>
 801642a:	f015 0504 	ands.w	r5, r5, #4
 801642e:	d1b8      	bne.n	80163a2 <_scanf_float+0x302>
 8016430:	681f      	ldr	r7, [r3, #0]
 8016432:	ee10 2a10 	vmov	r2, s0
 8016436:	464b      	mov	r3, r9
 8016438:	ee10 0a10 	vmov	r0, s0
 801643c:	4649      	mov	r1, r9
 801643e:	f7ea fb8d 	bl	8000b5c <__aeabi_dcmpun>
 8016442:	b128      	cbz	r0, 8016450 <_scanf_float+0x3b0>
 8016444:	4628      	mov	r0, r5
 8016446:	f000 f80d 	bl	8016464 <nanf>
 801644a:	ed87 0a00 	vstr	s0, [r7]
 801644e:	e7ab      	b.n	80163a8 <_scanf_float+0x308>
 8016450:	4640      	mov	r0, r8
 8016452:	4649      	mov	r1, r9
 8016454:	f7ea fbe0 	bl	8000c18 <__aeabi_d2f>
 8016458:	6038      	str	r0, [r7, #0]
 801645a:	e7a5      	b.n	80163a8 <_scanf_float+0x308>
 801645c:	2600      	movs	r6, #0
 801645e:	e666      	b.n	801612e <_scanf_float+0x8e>
 8016460:	0801a292 	.word	0x0801a292

08016464 <nanf>:
 8016464:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801646c <nanf+0x8>
 8016468:	4770      	bx	lr
 801646a:	bf00      	nop
 801646c:	7fc00000 	.word	0x7fc00000

08016470 <sniprintf>:
 8016470:	b40c      	push	{r2, r3}
 8016472:	b530      	push	{r4, r5, lr}
 8016474:	4b17      	ldr	r3, [pc, #92]	; (80164d4 <sniprintf+0x64>)
 8016476:	1e0c      	subs	r4, r1, #0
 8016478:	b09d      	sub	sp, #116	; 0x74
 801647a:	681d      	ldr	r5, [r3, #0]
 801647c:	da08      	bge.n	8016490 <sniprintf+0x20>
 801647e:	238b      	movs	r3, #139	; 0x8b
 8016480:	602b      	str	r3, [r5, #0]
 8016482:	f04f 30ff 	mov.w	r0, #4294967295
 8016486:	b01d      	add	sp, #116	; 0x74
 8016488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801648c:	b002      	add	sp, #8
 801648e:	4770      	bx	lr
 8016490:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016494:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016498:	bf14      	ite	ne
 801649a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801649e:	4623      	moveq	r3, r4
 80164a0:	9304      	str	r3, [sp, #16]
 80164a2:	9307      	str	r3, [sp, #28]
 80164a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164a8:	9002      	str	r0, [sp, #8]
 80164aa:	9006      	str	r0, [sp, #24]
 80164ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80164b2:	ab21      	add	r3, sp, #132	; 0x84
 80164b4:	a902      	add	r1, sp, #8
 80164b6:	4628      	mov	r0, r5
 80164b8:	9301      	str	r3, [sp, #4]
 80164ba:	f002 fdf1 	bl	80190a0 <_svfiprintf_r>
 80164be:	1c43      	adds	r3, r0, #1
 80164c0:	bfbc      	itt	lt
 80164c2:	238b      	movlt	r3, #139	; 0x8b
 80164c4:	602b      	strlt	r3, [r5, #0]
 80164c6:	2c00      	cmp	r4, #0
 80164c8:	d0dd      	beq.n	8016486 <sniprintf+0x16>
 80164ca:	9b02      	ldr	r3, [sp, #8]
 80164cc:	2200      	movs	r2, #0
 80164ce:	701a      	strb	r2, [r3, #0]
 80164d0:	e7d9      	b.n	8016486 <sniprintf+0x16>
 80164d2:	bf00      	nop
 80164d4:	2000000c 	.word	0x2000000c

080164d8 <siprintf>:
 80164d8:	b40e      	push	{r1, r2, r3}
 80164da:	b500      	push	{lr}
 80164dc:	b09c      	sub	sp, #112	; 0x70
 80164de:	ab1d      	add	r3, sp, #116	; 0x74
 80164e0:	9002      	str	r0, [sp, #8]
 80164e2:	9006      	str	r0, [sp, #24]
 80164e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80164e8:	4809      	ldr	r0, [pc, #36]	; (8016510 <siprintf+0x38>)
 80164ea:	9107      	str	r1, [sp, #28]
 80164ec:	9104      	str	r1, [sp, #16]
 80164ee:	4909      	ldr	r1, [pc, #36]	; (8016514 <siprintf+0x3c>)
 80164f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80164f4:	9105      	str	r1, [sp, #20]
 80164f6:	6800      	ldr	r0, [r0, #0]
 80164f8:	9301      	str	r3, [sp, #4]
 80164fa:	a902      	add	r1, sp, #8
 80164fc:	f002 fdd0 	bl	80190a0 <_svfiprintf_r>
 8016500:	9b02      	ldr	r3, [sp, #8]
 8016502:	2200      	movs	r2, #0
 8016504:	701a      	strb	r2, [r3, #0]
 8016506:	b01c      	add	sp, #112	; 0x70
 8016508:	f85d eb04 	ldr.w	lr, [sp], #4
 801650c:	b003      	add	sp, #12
 801650e:	4770      	bx	lr
 8016510:	2000000c 	.word	0x2000000c
 8016514:	ffff0208 	.word	0xffff0208

08016518 <siscanf>:
 8016518:	b40e      	push	{r1, r2, r3}
 801651a:	b530      	push	{r4, r5, lr}
 801651c:	b09c      	sub	sp, #112	; 0x70
 801651e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016520:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016524:	f854 5b04 	ldr.w	r5, [r4], #4
 8016528:	f8ad 2014 	strh.w	r2, [sp, #20]
 801652c:	9002      	str	r0, [sp, #8]
 801652e:	9006      	str	r0, [sp, #24]
 8016530:	f7e9 fe66 	bl	8000200 <strlen>
 8016534:	4b0b      	ldr	r3, [pc, #44]	; (8016564 <siscanf+0x4c>)
 8016536:	9003      	str	r0, [sp, #12]
 8016538:	9007      	str	r0, [sp, #28]
 801653a:	930b      	str	r3, [sp, #44]	; 0x2c
 801653c:	480a      	ldr	r0, [pc, #40]	; (8016568 <siscanf+0x50>)
 801653e:	9401      	str	r4, [sp, #4]
 8016540:	2300      	movs	r3, #0
 8016542:	930f      	str	r3, [sp, #60]	; 0x3c
 8016544:	9314      	str	r3, [sp, #80]	; 0x50
 8016546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801654a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801654e:	462a      	mov	r2, r5
 8016550:	4623      	mov	r3, r4
 8016552:	a902      	add	r1, sp, #8
 8016554:	6800      	ldr	r0, [r0, #0]
 8016556:	f002 fef5 	bl	8019344 <__ssvfiscanf_r>
 801655a:	b01c      	add	sp, #112	; 0x70
 801655c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016560:	b003      	add	sp, #12
 8016562:	4770      	bx	lr
 8016564:	0801656d 	.word	0x0801656d
 8016568:	2000000c 	.word	0x2000000c

0801656c <__seofread>:
 801656c:	2000      	movs	r0, #0
 801656e:	4770      	bx	lr

08016570 <strcpy>:
 8016570:	4603      	mov	r3, r0
 8016572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016576:	f803 2b01 	strb.w	r2, [r3], #1
 801657a:	2a00      	cmp	r2, #0
 801657c:	d1f9      	bne.n	8016572 <strcpy+0x2>
 801657e:	4770      	bx	lr

08016580 <sulp>:
 8016580:	b570      	push	{r4, r5, r6, lr}
 8016582:	4604      	mov	r4, r0
 8016584:	460d      	mov	r5, r1
 8016586:	ec45 4b10 	vmov	d0, r4, r5
 801658a:	4616      	mov	r6, r2
 801658c:	f002 fb44 	bl	8018c18 <__ulp>
 8016590:	ec51 0b10 	vmov	r0, r1, d0
 8016594:	b17e      	cbz	r6, 80165b6 <sulp+0x36>
 8016596:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801659a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801659e:	2b00      	cmp	r3, #0
 80165a0:	dd09      	ble.n	80165b6 <sulp+0x36>
 80165a2:	051b      	lsls	r3, r3, #20
 80165a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80165a8:	2400      	movs	r4, #0
 80165aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80165ae:	4622      	mov	r2, r4
 80165b0:	462b      	mov	r3, r5
 80165b2:	f7ea f839 	bl	8000628 <__aeabi_dmul>
 80165b6:	bd70      	pop	{r4, r5, r6, pc}

080165b8 <_strtod_l>:
 80165b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165bc:	461f      	mov	r7, r3
 80165be:	b0a1      	sub	sp, #132	; 0x84
 80165c0:	2300      	movs	r3, #0
 80165c2:	4681      	mov	r9, r0
 80165c4:	4638      	mov	r0, r7
 80165c6:	460e      	mov	r6, r1
 80165c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80165ca:	931c      	str	r3, [sp, #112]	; 0x70
 80165cc:	f002 f824 	bl	8018618 <__localeconv_l>
 80165d0:	4680      	mov	r8, r0
 80165d2:	6800      	ldr	r0, [r0, #0]
 80165d4:	f7e9 fe14 	bl	8000200 <strlen>
 80165d8:	f04f 0a00 	mov.w	sl, #0
 80165dc:	4604      	mov	r4, r0
 80165de:	f04f 0b00 	mov.w	fp, #0
 80165e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80165e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80165e6:	781a      	ldrb	r2, [r3, #0]
 80165e8:	2a0d      	cmp	r2, #13
 80165ea:	d832      	bhi.n	8016652 <_strtod_l+0x9a>
 80165ec:	2a09      	cmp	r2, #9
 80165ee:	d236      	bcs.n	801665e <_strtod_l+0xa6>
 80165f0:	2a00      	cmp	r2, #0
 80165f2:	d03e      	beq.n	8016672 <_strtod_l+0xba>
 80165f4:	2300      	movs	r3, #0
 80165f6:	930d      	str	r3, [sp, #52]	; 0x34
 80165f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80165fa:	782b      	ldrb	r3, [r5, #0]
 80165fc:	2b30      	cmp	r3, #48	; 0x30
 80165fe:	f040 80ac 	bne.w	801675a <_strtod_l+0x1a2>
 8016602:	786b      	ldrb	r3, [r5, #1]
 8016604:	2b58      	cmp	r3, #88	; 0x58
 8016606:	d001      	beq.n	801660c <_strtod_l+0x54>
 8016608:	2b78      	cmp	r3, #120	; 0x78
 801660a:	d167      	bne.n	80166dc <_strtod_l+0x124>
 801660c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801660e:	9301      	str	r3, [sp, #4]
 8016610:	ab1c      	add	r3, sp, #112	; 0x70
 8016612:	9300      	str	r3, [sp, #0]
 8016614:	9702      	str	r7, [sp, #8]
 8016616:	ab1d      	add	r3, sp, #116	; 0x74
 8016618:	4a88      	ldr	r2, [pc, #544]	; (801683c <_strtod_l+0x284>)
 801661a:	a91b      	add	r1, sp, #108	; 0x6c
 801661c:	4648      	mov	r0, r9
 801661e:	f001 fd12 	bl	8018046 <__gethex>
 8016622:	f010 0407 	ands.w	r4, r0, #7
 8016626:	4606      	mov	r6, r0
 8016628:	d005      	beq.n	8016636 <_strtod_l+0x7e>
 801662a:	2c06      	cmp	r4, #6
 801662c:	d12b      	bne.n	8016686 <_strtod_l+0xce>
 801662e:	3501      	adds	r5, #1
 8016630:	2300      	movs	r3, #0
 8016632:	951b      	str	r5, [sp, #108]	; 0x6c
 8016634:	930d      	str	r3, [sp, #52]	; 0x34
 8016636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016638:	2b00      	cmp	r3, #0
 801663a:	f040 859a 	bne.w	8017172 <_strtod_l+0xbba>
 801663e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016640:	b1e3      	cbz	r3, 801667c <_strtod_l+0xc4>
 8016642:	4652      	mov	r2, sl
 8016644:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016648:	ec43 2b10 	vmov	d0, r2, r3
 801664c:	b021      	add	sp, #132	; 0x84
 801664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016652:	2a2b      	cmp	r2, #43	; 0x2b
 8016654:	d015      	beq.n	8016682 <_strtod_l+0xca>
 8016656:	2a2d      	cmp	r2, #45	; 0x2d
 8016658:	d004      	beq.n	8016664 <_strtod_l+0xac>
 801665a:	2a20      	cmp	r2, #32
 801665c:	d1ca      	bne.n	80165f4 <_strtod_l+0x3c>
 801665e:	3301      	adds	r3, #1
 8016660:	931b      	str	r3, [sp, #108]	; 0x6c
 8016662:	e7bf      	b.n	80165e4 <_strtod_l+0x2c>
 8016664:	2201      	movs	r2, #1
 8016666:	920d      	str	r2, [sp, #52]	; 0x34
 8016668:	1c5a      	adds	r2, r3, #1
 801666a:	921b      	str	r2, [sp, #108]	; 0x6c
 801666c:	785b      	ldrb	r3, [r3, #1]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1c2      	bne.n	80165f8 <_strtod_l+0x40>
 8016672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016674:	961b      	str	r6, [sp, #108]	; 0x6c
 8016676:	2b00      	cmp	r3, #0
 8016678:	f040 8579 	bne.w	801716e <_strtod_l+0xbb6>
 801667c:	4652      	mov	r2, sl
 801667e:	465b      	mov	r3, fp
 8016680:	e7e2      	b.n	8016648 <_strtod_l+0x90>
 8016682:	2200      	movs	r2, #0
 8016684:	e7ef      	b.n	8016666 <_strtod_l+0xae>
 8016686:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016688:	b13a      	cbz	r2, 801669a <_strtod_l+0xe2>
 801668a:	2135      	movs	r1, #53	; 0x35
 801668c:	a81e      	add	r0, sp, #120	; 0x78
 801668e:	f002 fbbb 	bl	8018e08 <__copybits>
 8016692:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016694:	4648      	mov	r0, r9
 8016696:	f002 f828 	bl	80186ea <_Bfree>
 801669a:	3c01      	subs	r4, #1
 801669c:	2c04      	cmp	r4, #4
 801669e:	d806      	bhi.n	80166ae <_strtod_l+0xf6>
 80166a0:	e8df f004 	tbb	[pc, r4]
 80166a4:	1714030a 	.word	0x1714030a
 80166a8:	0a          	.byte	0x0a
 80166a9:	00          	.byte	0x00
 80166aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80166ae:	0730      	lsls	r0, r6, #28
 80166b0:	d5c1      	bpl.n	8016636 <_strtod_l+0x7e>
 80166b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80166b6:	e7be      	b.n	8016636 <_strtod_l+0x7e>
 80166b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80166bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80166be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80166c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80166c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80166ca:	e7f0      	b.n	80166ae <_strtod_l+0xf6>
 80166cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016840 <_strtod_l+0x288>
 80166d0:	e7ed      	b.n	80166ae <_strtod_l+0xf6>
 80166d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80166d6:	f04f 3aff 	mov.w	sl, #4294967295
 80166da:	e7e8      	b.n	80166ae <_strtod_l+0xf6>
 80166dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166de:	1c5a      	adds	r2, r3, #1
 80166e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80166e2:	785b      	ldrb	r3, [r3, #1]
 80166e4:	2b30      	cmp	r3, #48	; 0x30
 80166e6:	d0f9      	beq.n	80166dc <_strtod_l+0x124>
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d0a4      	beq.n	8016636 <_strtod_l+0x7e>
 80166ec:	2301      	movs	r3, #1
 80166ee:	2500      	movs	r5, #0
 80166f0:	9306      	str	r3, [sp, #24]
 80166f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166f4:	9308      	str	r3, [sp, #32]
 80166f6:	9507      	str	r5, [sp, #28]
 80166f8:	9505      	str	r5, [sp, #20]
 80166fa:	220a      	movs	r2, #10
 80166fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80166fe:	7807      	ldrb	r7, [r0, #0]
 8016700:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016704:	b2d9      	uxtb	r1, r3
 8016706:	2909      	cmp	r1, #9
 8016708:	d929      	bls.n	801675e <_strtod_l+0x1a6>
 801670a:	4622      	mov	r2, r4
 801670c:	f8d8 1000 	ldr.w	r1, [r8]
 8016710:	f003 f902 	bl	8019918 <strncmp>
 8016714:	2800      	cmp	r0, #0
 8016716:	d031      	beq.n	801677c <_strtod_l+0x1c4>
 8016718:	2000      	movs	r0, #0
 801671a:	9c05      	ldr	r4, [sp, #20]
 801671c:	9004      	str	r0, [sp, #16]
 801671e:	463b      	mov	r3, r7
 8016720:	4602      	mov	r2, r0
 8016722:	2b65      	cmp	r3, #101	; 0x65
 8016724:	d001      	beq.n	801672a <_strtod_l+0x172>
 8016726:	2b45      	cmp	r3, #69	; 0x45
 8016728:	d114      	bne.n	8016754 <_strtod_l+0x19c>
 801672a:	b924      	cbnz	r4, 8016736 <_strtod_l+0x17e>
 801672c:	b910      	cbnz	r0, 8016734 <_strtod_l+0x17c>
 801672e:	9b06      	ldr	r3, [sp, #24]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d09e      	beq.n	8016672 <_strtod_l+0xba>
 8016734:	2400      	movs	r4, #0
 8016736:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016738:	1c73      	adds	r3, r6, #1
 801673a:	931b      	str	r3, [sp, #108]	; 0x6c
 801673c:	7873      	ldrb	r3, [r6, #1]
 801673e:	2b2b      	cmp	r3, #43	; 0x2b
 8016740:	d078      	beq.n	8016834 <_strtod_l+0x27c>
 8016742:	2b2d      	cmp	r3, #45	; 0x2d
 8016744:	d070      	beq.n	8016828 <_strtod_l+0x270>
 8016746:	f04f 0c00 	mov.w	ip, #0
 801674a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801674e:	2f09      	cmp	r7, #9
 8016750:	d97c      	bls.n	801684c <_strtod_l+0x294>
 8016752:	961b      	str	r6, [sp, #108]	; 0x6c
 8016754:	f04f 0e00 	mov.w	lr, #0
 8016758:	e09a      	b.n	8016890 <_strtod_l+0x2d8>
 801675a:	2300      	movs	r3, #0
 801675c:	e7c7      	b.n	80166ee <_strtod_l+0x136>
 801675e:	9905      	ldr	r1, [sp, #20]
 8016760:	2908      	cmp	r1, #8
 8016762:	bfdd      	ittte	le
 8016764:	9907      	ldrle	r1, [sp, #28]
 8016766:	fb02 3301 	mlale	r3, r2, r1, r3
 801676a:	9307      	strle	r3, [sp, #28]
 801676c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016770:	9b05      	ldr	r3, [sp, #20]
 8016772:	3001      	adds	r0, #1
 8016774:	3301      	adds	r3, #1
 8016776:	9305      	str	r3, [sp, #20]
 8016778:	901b      	str	r0, [sp, #108]	; 0x6c
 801677a:	e7bf      	b.n	80166fc <_strtod_l+0x144>
 801677c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801677e:	191a      	adds	r2, r3, r4
 8016780:	921b      	str	r2, [sp, #108]	; 0x6c
 8016782:	9a05      	ldr	r2, [sp, #20]
 8016784:	5d1b      	ldrb	r3, [r3, r4]
 8016786:	2a00      	cmp	r2, #0
 8016788:	d037      	beq.n	80167fa <_strtod_l+0x242>
 801678a:	9c05      	ldr	r4, [sp, #20]
 801678c:	4602      	mov	r2, r0
 801678e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016792:	2909      	cmp	r1, #9
 8016794:	d913      	bls.n	80167be <_strtod_l+0x206>
 8016796:	2101      	movs	r1, #1
 8016798:	9104      	str	r1, [sp, #16]
 801679a:	e7c2      	b.n	8016722 <_strtod_l+0x16a>
 801679c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801679e:	1c5a      	adds	r2, r3, #1
 80167a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80167a2:	785b      	ldrb	r3, [r3, #1]
 80167a4:	3001      	adds	r0, #1
 80167a6:	2b30      	cmp	r3, #48	; 0x30
 80167a8:	d0f8      	beq.n	801679c <_strtod_l+0x1e4>
 80167aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80167ae:	2a08      	cmp	r2, #8
 80167b0:	f200 84e4 	bhi.w	801717c <_strtod_l+0xbc4>
 80167b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80167b6:	9208      	str	r2, [sp, #32]
 80167b8:	4602      	mov	r2, r0
 80167ba:	2000      	movs	r0, #0
 80167bc:	4604      	mov	r4, r0
 80167be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80167c2:	f100 0101 	add.w	r1, r0, #1
 80167c6:	d012      	beq.n	80167ee <_strtod_l+0x236>
 80167c8:	440a      	add	r2, r1
 80167ca:	eb00 0c04 	add.w	ip, r0, r4
 80167ce:	4621      	mov	r1, r4
 80167d0:	270a      	movs	r7, #10
 80167d2:	458c      	cmp	ip, r1
 80167d4:	d113      	bne.n	80167fe <_strtod_l+0x246>
 80167d6:	1821      	adds	r1, r4, r0
 80167d8:	2908      	cmp	r1, #8
 80167da:	f104 0401 	add.w	r4, r4, #1
 80167de:	4404      	add	r4, r0
 80167e0:	dc19      	bgt.n	8016816 <_strtod_l+0x25e>
 80167e2:	9b07      	ldr	r3, [sp, #28]
 80167e4:	210a      	movs	r1, #10
 80167e6:	fb01 e303 	mla	r3, r1, r3, lr
 80167ea:	9307      	str	r3, [sp, #28]
 80167ec:	2100      	movs	r1, #0
 80167ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167f0:	1c58      	adds	r0, r3, #1
 80167f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80167f4:	785b      	ldrb	r3, [r3, #1]
 80167f6:	4608      	mov	r0, r1
 80167f8:	e7c9      	b.n	801678e <_strtod_l+0x1d6>
 80167fa:	9805      	ldr	r0, [sp, #20]
 80167fc:	e7d3      	b.n	80167a6 <_strtod_l+0x1ee>
 80167fe:	2908      	cmp	r1, #8
 8016800:	f101 0101 	add.w	r1, r1, #1
 8016804:	dc03      	bgt.n	801680e <_strtod_l+0x256>
 8016806:	9b07      	ldr	r3, [sp, #28]
 8016808:	437b      	muls	r3, r7
 801680a:	9307      	str	r3, [sp, #28]
 801680c:	e7e1      	b.n	80167d2 <_strtod_l+0x21a>
 801680e:	2910      	cmp	r1, #16
 8016810:	bfd8      	it	le
 8016812:	437d      	mulle	r5, r7
 8016814:	e7dd      	b.n	80167d2 <_strtod_l+0x21a>
 8016816:	2c10      	cmp	r4, #16
 8016818:	bfdc      	itt	le
 801681a:	210a      	movle	r1, #10
 801681c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016820:	e7e4      	b.n	80167ec <_strtod_l+0x234>
 8016822:	2301      	movs	r3, #1
 8016824:	9304      	str	r3, [sp, #16]
 8016826:	e781      	b.n	801672c <_strtod_l+0x174>
 8016828:	f04f 0c01 	mov.w	ip, #1
 801682c:	1cb3      	adds	r3, r6, #2
 801682e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016830:	78b3      	ldrb	r3, [r6, #2]
 8016832:	e78a      	b.n	801674a <_strtod_l+0x192>
 8016834:	f04f 0c00 	mov.w	ip, #0
 8016838:	e7f8      	b.n	801682c <_strtod_l+0x274>
 801683a:	bf00      	nop
 801683c:	0801a298 	.word	0x0801a298
 8016840:	7ff00000 	.word	0x7ff00000
 8016844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016846:	1c5f      	adds	r7, r3, #1
 8016848:	971b      	str	r7, [sp, #108]	; 0x6c
 801684a:	785b      	ldrb	r3, [r3, #1]
 801684c:	2b30      	cmp	r3, #48	; 0x30
 801684e:	d0f9      	beq.n	8016844 <_strtod_l+0x28c>
 8016850:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016854:	2f08      	cmp	r7, #8
 8016856:	f63f af7d 	bhi.w	8016754 <_strtod_l+0x19c>
 801685a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801685e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016860:	930a      	str	r3, [sp, #40]	; 0x28
 8016862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016864:	1c5f      	adds	r7, r3, #1
 8016866:	971b      	str	r7, [sp, #108]	; 0x6c
 8016868:	785b      	ldrb	r3, [r3, #1]
 801686a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801686e:	f1b8 0f09 	cmp.w	r8, #9
 8016872:	d937      	bls.n	80168e4 <_strtod_l+0x32c>
 8016874:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016876:	1a7f      	subs	r7, r7, r1
 8016878:	2f08      	cmp	r7, #8
 801687a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801687e:	dc37      	bgt.n	80168f0 <_strtod_l+0x338>
 8016880:	45be      	cmp	lr, r7
 8016882:	bfa8      	it	ge
 8016884:	46be      	movge	lr, r7
 8016886:	f1bc 0f00 	cmp.w	ip, #0
 801688a:	d001      	beq.n	8016890 <_strtod_l+0x2d8>
 801688c:	f1ce 0e00 	rsb	lr, lr, #0
 8016890:	2c00      	cmp	r4, #0
 8016892:	d151      	bne.n	8016938 <_strtod_l+0x380>
 8016894:	2800      	cmp	r0, #0
 8016896:	f47f aece 	bne.w	8016636 <_strtod_l+0x7e>
 801689a:	9a06      	ldr	r2, [sp, #24]
 801689c:	2a00      	cmp	r2, #0
 801689e:	f47f aeca 	bne.w	8016636 <_strtod_l+0x7e>
 80168a2:	9a04      	ldr	r2, [sp, #16]
 80168a4:	2a00      	cmp	r2, #0
 80168a6:	f47f aee4 	bne.w	8016672 <_strtod_l+0xba>
 80168aa:	2b4e      	cmp	r3, #78	; 0x4e
 80168ac:	d027      	beq.n	80168fe <_strtod_l+0x346>
 80168ae:	dc21      	bgt.n	80168f4 <_strtod_l+0x33c>
 80168b0:	2b49      	cmp	r3, #73	; 0x49
 80168b2:	f47f aede 	bne.w	8016672 <_strtod_l+0xba>
 80168b6:	49a0      	ldr	r1, [pc, #640]	; (8016b38 <_strtod_l+0x580>)
 80168b8:	a81b      	add	r0, sp, #108	; 0x6c
 80168ba:	f001 fdf7 	bl	80184ac <__match>
 80168be:	2800      	cmp	r0, #0
 80168c0:	f43f aed7 	beq.w	8016672 <_strtod_l+0xba>
 80168c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168c6:	499d      	ldr	r1, [pc, #628]	; (8016b3c <_strtod_l+0x584>)
 80168c8:	3b01      	subs	r3, #1
 80168ca:	a81b      	add	r0, sp, #108	; 0x6c
 80168cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80168ce:	f001 fded 	bl	80184ac <__match>
 80168d2:	b910      	cbnz	r0, 80168da <_strtod_l+0x322>
 80168d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168d6:	3301      	adds	r3, #1
 80168d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80168da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016b50 <_strtod_l+0x598>
 80168de:	f04f 0a00 	mov.w	sl, #0
 80168e2:	e6a8      	b.n	8016636 <_strtod_l+0x7e>
 80168e4:	210a      	movs	r1, #10
 80168e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80168ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80168ee:	e7b8      	b.n	8016862 <_strtod_l+0x2aa>
 80168f0:	46be      	mov	lr, r7
 80168f2:	e7c8      	b.n	8016886 <_strtod_l+0x2ce>
 80168f4:	2b69      	cmp	r3, #105	; 0x69
 80168f6:	d0de      	beq.n	80168b6 <_strtod_l+0x2fe>
 80168f8:	2b6e      	cmp	r3, #110	; 0x6e
 80168fa:	f47f aeba 	bne.w	8016672 <_strtod_l+0xba>
 80168fe:	4990      	ldr	r1, [pc, #576]	; (8016b40 <_strtod_l+0x588>)
 8016900:	a81b      	add	r0, sp, #108	; 0x6c
 8016902:	f001 fdd3 	bl	80184ac <__match>
 8016906:	2800      	cmp	r0, #0
 8016908:	f43f aeb3 	beq.w	8016672 <_strtod_l+0xba>
 801690c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	2b28      	cmp	r3, #40	; 0x28
 8016912:	d10e      	bne.n	8016932 <_strtod_l+0x37a>
 8016914:	aa1e      	add	r2, sp, #120	; 0x78
 8016916:	498b      	ldr	r1, [pc, #556]	; (8016b44 <_strtod_l+0x58c>)
 8016918:	a81b      	add	r0, sp, #108	; 0x6c
 801691a:	f001 fddb 	bl	80184d4 <__hexnan>
 801691e:	2805      	cmp	r0, #5
 8016920:	d107      	bne.n	8016932 <_strtod_l+0x37a>
 8016922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016924:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016928:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801692c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016930:	e681      	b.n	8016636 <_strtod_l+0x7e>
 8016932:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016b58 <_strtod_l+0x5a0>
 8016936:	e7d2      	b.n	80168de <_strtod_l+0x326>
 8016938:	ebae 0302 	sub.w	r3, lr, r2
 801693c:	9306      	str	r3, [sp, #24]
 801693e:	9b05      	ldr	r3, [sp, #20]
 8016940:	9807      	ldr	r0, [sp, #28]
 8016942:	2b00      	cmp	r3, #0
 8016944:	bf08      	it	eq
 8016946:	4623      	moveq	r3, r4
 8016948:	2c10      	cmp	r4, #16
 801694a:	9305      	str	r3, [sp, #20]
 801694c:	46a0      	mov	r8, r4
 801694e:	bfa8      	it	ge
 8016950:	f04f 0810 	movge.w	r8, #16
 8016954:	f7e9 fdee 	bl	8000534 <__aeabi_ui2d>
 8016958:	2c09      	cmp	r4, #9
 801695a:	4682      	mov	sl, r0
 801695c:	468b      	mov	fp, r1
 801695e:	dc13      	bgt.n	8016988 <_strtod_l+0x3d0>
 8016960:	9b06      	ldr	r3, [sp, #24]
 8016962:	2b00      	cmp	r3, #0
 8016964:	f43f ae67 	beq.w	8016636 <_strtod_l+0x7e>
 8016968:	9b06      	ldr	r3, [sp, #24]
 801696a:	dd7a      	ble.n	8016a62 <_strtod_l+0x4aa>
 801696c:	2b16      	cmp	r3, #22
 801696e:	dc61      	bgt.n	8016a34 <_strtod_l+0x47c>
 8016970:	4a75      	ldr	r2, [pc, #468]	; (8016b48 <_strtod_l+0x590>)
 8016972:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016976:	e9de 0100 	ldrd	r0, r1, [lr]
 801697a:	4652      	mov	r2, sl
 801697c:	465b      	mov	r3, fp
 801697e:	f7e9 fe53 	bl	8000628 <__aeabi_dmul>
 8016982:	4682      	mov	sl, r0
 8016984:	468b      	mov	fp, r1
 8016986:	e656      	b.n	8016636 <_strtod_l+0x7e>
 8016988:	4b6f      	ldr	r3, [pc, #444]	; (8016b48 <_strtod_l+0x590>)
 801698a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801698e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016992:	f7e9 fe49 	bl	8000628 <__aeabi_dmul>
 8016996:	4606      	mov	r6, r0
 8016998:	4628      	mov	r0, r5
 801699a:	460f      	mov	r7, r1
 801699c:	f7e9 fdca 	bl	8000534 <__aeabi_ui2d>
 80169a0:	4602      	mov	r2, r0
 80169a2:	460b      	mov	r3, r1
 80169a4:	4630      	mov	r0, r6
 80169a6:	4639      	mov	r1, r7
 80169a8:	f7e9 fc88 	bl	80002bc <__adddf3>
 80169ac:	2c0f      	cmp	r4, #15
 80169ae:	4682      	mov	sl, r0
 80169b0:	468b      	mov	fp, r1
 80169b2:	ddd5      	ble.n	8016960 <_strtod_l+0x3a8>
 80169b4:	9b06      	ldr	r3, [sp, #24]
 80169b6:	eba4 0808 	sub.w	r8, r4, r8
 80169ba:	4498      	add	r8, r3
 80169bc:	f1b8 0f00 	cmp.w	r8, #0
 80169c0:	f340 8096 	ble.w	8016af0 <_strtod_l+0x538>
 80169c4:	f018 030f 	ands.w	r3, r8, #15
 80169c8:	d00a      	beq.n	80169e0 <_strtod_l+0x428>
 80169ca:	495f      	ldr	r1, [pc, #380]	; (8016b48 <_strtod_l+0x590>)
 80169cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80169d0:	4652      	mov	r2, sl
 80169d2:	465b      	mov	r3, fp
 80169d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169d8:	f7e9 fe26 	bl	8000628 <__aeabi_dmul>
 80169dc:	4682      	mov	sl, r0
 80169de:	468b      	mov	fp, r1
 80169e0:	f038 080f 	bics.w	r8, r8, #15
 80169e4:	d073      	beq.n	8016ace <_strtod_l+0x516>
 80169e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80169ea:	dd47      	ble.n	8016a7c <_strtod_l+0x4c4>
 80169ec:	2400      	movs	r4, #0
 80169ee:	46a0      	mov	r8, r4
 80169f0:	9407      	str	r4, [sp, #28]
 80169f2:	9405      	str	r4, [sp, #20]
 80169f4:	2322      	movs	r3, #34	; 0x22
 80169f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016b50 <_strtod_l+0x598>
 80169fa:	f8c9 3000 	str.w	r3, [r9]
 80169fe:	f04f 0a00 	mov.w	sl, #0
 8016a02:	9b07      	ldr	r3, [sp, #28]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	f43f ae16 	beq.w	8016636 <_strtod_l+0x7e>
 8016a0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a0c:	4648      	mov	r0, r9
 8016a0e:	f001 fe6c 	bl	80186ea <_Bfree>
 8016a12:	9905      	ldr	r1, [sp, #20]
 8016a14:	4648      	mov	r0, r9
 8016a16:	f001 fe68 	bl	80186ea <_Bfree>
 8016a1a:	4641      	mov	r1, r8
 8016a1c:	4648      	mov	r0, r9
 8016a1e:	f001 fe64 	bl	80186ea <_Bfree>
 8016a22:	9907      	ldr	r1, [sp, #28]
 8016a24:	4648      	mov	r0, r9
 8016a26:	f001 fe60 	bl	80186ea <_Bfree>
 8016a2a:	4621      	mov	r1, r4
 8016a2c:	4648      	mov	r0, r9
 8016a2e:	f001 fe5c 	bl	80186ea <_Bfree>
 8016a32:	e600      	b.n	8016636 <_strtod_l+0x7e>
 8016a34:	9a06      	ldr	r2, [sp, #24]
 8016a36:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	dbba      	blt.n	80169b4 <_strtod_l+0x3fc>
 8016a3e:	4d42      	ldr	r5, [pc, #264]	; (8016b48 <_strtod_l+0x590>)
 8016a40:	f1c4 040f 	rsb	r4, r4, #15
 8016a44:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016a48:	4652      	mov	r2, sl
 8016a4a:	465b      	mov	r3, fp
 8016a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a50:	f7e9 fdea 	bl	8000628 <__aeabi_dmul>
 8016a54:	9b06      	ldr	r3, [sp, #24]
 8016a56:	1b1c      	subs	r4, r3, r4
 8016a58:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016a5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a60:	e78d      	b.n	801697e <_strtod_l+0x3c6>
 8016a62:	f113 0f16 	cmn.w	r3, #22
 8016a66:	dba5      	blt.n	80169b4 <_strtod_l+0x3fc>
 8016a68:	4a37      	ldr	r2, [pc, #220]	; (8016b48 <_strtod_l+0x590>)
 8016a6a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016a6e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016a72:	4650      	mov	r0, sl
 8016a74:	4659      	mov	r1, fp
 8016a76:	f7e9 ff01 	bl	800087c <__aeabi_ddiv>
 8016a7a:	e782      	b.n	8016982 <_strtod_l+0x3ca>
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	4e33      	ldr	r6, [pc, #204]	; (8016b4c <_strtod_l+0x594>)
 8016a80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016a84:	4650      	mov	r0, sl
 8016a86:	4659      	mov	r1, fp
 8016a88:	461d      	mov	r5, r3
 8016a8a:	f1b8 0f01 	cmp.w	r8, #1
 8016a8e:	dc21      	bgt.n	8016ad4 <_strtod_l+0x51c>
 8016a90:	b10b      	cbz	r3, 8016a96 <_strtod_l+0x4de>
 8016a92:	4682      	mov	sl, r0
 8016a94:	468b      	mov	fp, r1
 8016a96:	4b2d      	ldr	r3, [pc, #180]	; (8016b4c <_strtod_l+0x594>)
 8016a98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016a9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016aa0:	4652      	mov	r2, sl
 8016aa2:	465b      	mov	r3, fp
 8016aa4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016aa8:	f7e9 fdbe 	bl	8000628 <__aeabi_dmul>
 8016aac:	4b28      	ldr	r3, [pc, #160]	; (8016b50 <_strtod_l+0x598>)
 8016aae:	460a      	mov	r2, r1
 8016ab0:	400b      	ands	r3, r1
 8016ab2:	4928      	ldr	r1, [pc, #160]	; (8016b54 <_strtod_l+0x59c>)
 8016ab4:	428b      	cmp	r3, r1
 8016ab6:	4682      	mov	sl, r0
 8016ab8:	d898      	bhi.n	80169ec <_strtod_l+0x434>
 8016aba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016abe:	428b      	cmp	r3, r1
 8016ac0:	bf86      	itte	hi
 8016ac2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016b5c <_strtod_l+0x5a4>
 8016ac6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016aca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016ace:	2300      	movs	r3, #0
 8016ad0:	9304      	str	r3, [sp, #16]
 8016ad2:	e077      	b.n	8016bc4 <_strtod_l+0x60c>
 8016ad4:	f018 0f01 	tst.w	r8, #1
 8016ad8:	d006      	beq.n	8016ae8 <_strtod_l+0x530>
 8016ada:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae2:	f7e9 fda1 	bl	8000628 <__aeabi_dmul>
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	3501      	adds	r5, #1
 8016aea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016aee:	e7cc      	b.n	8016a8a <_strtod_l+0x4d2>
 8016af0:	d0ed      	beq.n	8016ace <_strtod_l+0x516>
 8016af2:	f1c8 0800 	rsb	r8, r8, #0
 8016af6:	f018 020f 	ands.w	r2, r8, #15
 8016afa:	d00a      	beq.n	8016b12 <_strtod_l+0x55a>
 8016afc:	4b12      	ldr	r3, [pc, #72]	; (8016b48 <_strtod_l+0x590>)
 8016afe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b02:	4650      	mov	r0, sl
 8016b04:	4659      	mov	r1, fp
 8016b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b0a:	f7e9 feb7 	bl	800087c <__aeabi_ddiv>
 8016b0e:	4682      	mov	sl, r0
 8016b10:	468b      	mov	fp, r1
 8016b12:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016b16:	d0da      	beq.n	8016ace <_strtod_l+0x516>
 8016b18:	f1b8 0f1f 	cmp.w	r8, #31
 8016b1c:	dd20      	ble.n	8016b60 <_strtod_l+0x5a8>
 8016b1e:	2400      	movs	r4, #0
 8016b20:	46a0      	mov	r8, r4
 8016b22:	9407      	str	r4, [sp, #28]
 8016b24:	9405      	str	r4, [sp, #20]
 8016b26:	2322      	movs	r3, #34	; 0x22
 8016b28:	f04f 0a00 	mov.w	sl, #0
 8016b2c:	f04f 0b00 	mov.w	fp, #0
 8016b30:	f8c9 3000 	str.w	r3, [r9]
 8016b34:	e765      	b.n	8016a02 <_strtod_l+0x44a>
 8016b36:	bf00      	nop
 8016b38:	0801a265 	.word	0x0801a265
 8016b3c:	0801a2eb 	.word	0x0801a2eb
 8016b40:	0801a26d 	.word	0x0801a26d
 8016b44:	0801a2ac 	.word	0x0801a2ac
 8016b48:	0801a328 	.word	0x0801a328
 8016b4c:	0801a300 	.word	0x0801a300
 8016b50:	7ff00000 	.word	0x7ff00000
 8016b54:	7ca00000 	.word	0x7ca00000
 8016b58:	fff80000 	.word	0xfff80000
 8016b5c:	7fefffff 	.word	0x7fefffff
 8016b60:	f018 0310 	ands.w	r3, r8, #16
 8016b64:	bf18      	it	ne
 8016b66:	236a      	movne	r3, #106	; 0x6a
 8016b68:	4da0      	ldr	r5, [pc, #640]	; (8016dec <_strtod_l+0x834>)
 8016b6a:	9304      	str	r3, [sp, #16]
 8016b6c:	4650      	mov	r0, sl
 8016b6e:	4659      	mov	r1, fp
 8016b70:	2300      	movs	r3, #0
 8016b72:	f1b8 0f00 	cmp.w	r8, #0
 8016b76:	f300 810a 	bgt.w	8016d8e <_strtod_l+0x7d6>
 8016b7a:	b10b      	cbz	r3, 8016b80 <_strtod_l+0x5c8>
 8016b7c:	4682      	mov	sl, r0
 8016b7e:	468b      	mov	fp, r1
 8016b80:	9b04      	ldr	r3, [sp, #16]
 8016b82:	b1bb      	cbz	r3, 8016bb4 <_strtod_l+0x5fc>
 8016b84:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016b88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	4659      	mov	r1, fp
 8016b90:	dd10      	ble.n	8016bb4 <_strtod_l+0x5fc>
 8016b92:	2b1f      	cmp	r3, #31
 8016b94:	f340 8107 	ble.w	8016da6 <_strtod_l+0x7ee>
 8016b98:	2b34      	cmp	r3, #52	; 0x34
 8016b9a:	bfde      	ittt	le
 8016b9c:	3b20      	suble	r3, #32
 8016b9e:	f04f 32ff 	movle.w	r2, #4294967295
 8016ba2:	fa02 f303 	lslle.w	r3, r2, r3
 8016ba6:	f04f 0a00 	mov.w	sl, #0
 8016baa:	bfcc      	ite	gt
 8016bac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016bb0:	ea03 0b01 	andle.w	fp, r3, r1
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	4650      	mov	r0, sl
 8016bba:	4659      	mov	r1, fp
 8016bbc:	f7e9 ff9c 	bl	8000af8 <__aeabi_dcmpeq>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d1ac      	bne.n	8016b1e <_strtod_l+0x566>
 8016bc4:	9b07      	ldr	r3, [sp, #28]
 8016bc6:	9300      	str	r3, [sp, #0]
 8016bc8:	9a05      	ldr	r2, [sp, #20]
 8016bca:	9908      	ldr	r1, [sp, #32]
 8016bcc:	4623      	mov	r3, r4
 8016bce:	4648      	mov	r0, r9
 8016bd0:	f001 fddd 	bl	801878e <__s2b>
 8016bd4:	9007      	str	r0, [sp, #28]
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	f43f af08 	beq.w	80169ec <_strtod_l+0x434>
 8016bdc:	9a06      	ldr	r2, [sp, #24]
 8016bde:	9b06      	ldr	r3, [sp, #24]
 8016be0:	2a00      	cmp	r2, #0
 8016be2:	f1c3 0300 	rsb	r3, r3, #0
 8016be6:	bfa8      	it	ge
 8016be8:	2300      	movge	r3, #0
 8016bea:	930e      	str	r3, [sp, #56]	; 0x38
 8016bec:	2400      	movs	r4, #0
 8016bee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016bf2:	9316      	str	r3, [sp, #88]	; 0x58
 8016bf4:	46a0      	mov	r8, r4
 8016bf6:	9b07      	ldr	r3, [sp, #28]
 8016bf8:	4648      	mov	r0, r9
 8016bfa:	6859      	ldr	r1, [r3, #4]
 8016bfc:	f001 fd41 	bl	8018682 <_Balloc>
 8016c00:	9005      	str	r0, [sp, #20]
 8016c02:	2800      	cmp	r0, #0
 8016c04:	f43f aef6 	beq.w	80169f4 <_strtod_l+0x43c>
 8016c08:	9b07      	ldr	r3, [sp, #28]
 8016c0a:	691a      	ldr	r2, [r3, #16]
 8016c0c:	3202      	adds	r2, #2
 8016c0e:	f103 010c 	add.w	r1, r3, #12
 8016c12:	0092      	lsls	r2, r2, #2
 8016c14:	300c      	adds	r0, #12
 8016c16:	f001 fd29 	bl	801866c <memcpy>
 8016c1a:	aa1e      	add	r2, sp, #120	; 0x78
 8016c1c:	a91d      	add	r1, sp, #116	; 0x74
 8016c1e:	ec4b ab10 	vmov	d0, sl, fp
 8016c22:	4648      	mov	r0, r9
 8016c24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016c28:	f002 f86c 	bl	8018d04 <__d2b>
 8016c2c:	901c      	str	r0, [sp, #112]	; 0x70
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	f43f aee0 	beq.w	80169f4 <_strtod_l+0x43c>
 8016c34:	2101      	movs	r1, #1
 8016c36:	4648      	mov	r0, r9
 8016c38:	f001 fe35 	bl	80188a6 <__i2b>
 8016c3c:	4680      	mov	r8, r0
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	f43f aed8 	beq.w	80169f4 <_strtod_l+0x43c>
 8016c44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016c46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016c48:	2e00      	cmp	r6, #0
 8016c4a:	bfab      	itete	ge
 8016c4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016c4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016c50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016c52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016c54:	bfac      	ite	ge
 8016c56:	18f7      	addge	r7, r6, r3
 8016c58:	1b9d      	sublt	r5, r3, r6
 8016c5a:	9b04      	ldr	r3, [sp, #16]
 8016c5c:	1af6      	subs	r6, r6, r3
 8016c5e:	4416      	add	r6, r2
 8016c60:	4b63      	ldr	r3, [pc, #396]	; (8016df0 <_strtod_l+0x838>)
 8016c62:	3e01      	subs	r6, #1
 8016c64:	429e      	cmp	r6, r3
 8016c66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016c6a:	f280 80af 	bge.w	8016dcc <_strtod_l+0x814>
 8016c6e:	1b9b      	subs	r3, r3, r6
 8016c70:	2b1f      	cmp	r3, #31
 8016c72:	eba2 0203 	sub.w	r2, r2, r3
 8016c76:	f04f 0101 	mov.w	r1, #1
 8016c7a:	f300 809b 	bgt.w	8016db4 <_strtod_l+0x7fc>
 8016c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8016c82:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c84:	2300      	movs	r3, #0
 8016c86:	930a      	str	r3, [sp, #40]	; 0x28
 8016c88:	18be      	adds	r6, r7, r2
 8016c8a:	9b04      	ldr	r3, [sp, #16]
 8016c8c:	42b7      	cmp	r7, r6
 8016c8e:	4415      	add	r5, r2
 8016c90:	441d      	add	r5, r3
 8016c92:	463b      	mov	r3, r7
 8016c94:	bfa8      	it	ge
 8016c96:	4633      	movge	r3, r6
 8016c98:	42ab      	cmp	r3, r5
 8016c9a:	bfa8      	it	ge
 8016c9c:	462b      	movge	r3, r5
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	bfc2      	ittt	gt
 8016ca2:	1af6      	subgt	r6, r6, r3
 8016ca4:	1aed      	subgt	r5, r5, r3
 8016ca6:	1aff      	subgt	r7, r7, r3
 8016ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016caa:	b1bb      	cbz	r3, 8016cdc <_strtod_l+0x724>
 8016cac:	4641      	mov	r1, r8
 8016cae:	461a      	mov	r2, r3
 8016cb0:	4648      	mov	r0, r9
 8016cb2:	f001 fe97 	bl	80189e4 <__pow5mult>
 8016cb6:	4680      	mov	r8, r0
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	f43f ae9b 	beq.w	80169f4 <_strtod_l+0x43c>
 8016cbe:	4601      	mov	r1, r0
 8016cc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016cc2:	4648      	mov	r0, r9
 8016cc4:	f001 fdf8 	bl	80188b8 <__multiply>
 8016cc8:	900c      	str	r0, [sp, #48]	; 0x30
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	f43f ae92 	beq.w	80169f4 <_strtod_l+0x43c>
 8016cd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016cd2:	4648      	mov	r0, r9
 8016cd4:	f001 fd09 	bl	80186ea <_Bfree>
 8016cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cda:	931c      	str	r3, [sp, #112]	; 0x70
 8016cdc:	2e00      	cmp	r6, #0
 8016cde:	dc7a      	bgt.n	8016dd6 <_strtod_l+0x81e>
 8016ce0:	9b06      	ldr	r3, [sp, #24]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	dd08      	ble.n	8016cf8 <_strtod_l+0x740>
 8016ce6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016ce8:	9905      	ldr	r1, [sp, #20]
 8016cea:	4648      	mov	r0, r9
 8016cec:	f001 fe7a 	bl	80189e4 <__pow5mult>
 8016cf0:	9005      	str	r0, [sp, #20]
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	f43f ae7e 	beq.w	80169f4 <_strtod_l+0x43c>
 8016cf8:	2d00      	cmp	r5, #0
 8016cfa:	dd08      	ble.n	8016d0e <_strtod_l+0x756>
 8016cfc:	462a      	mov	r2, r5
 8016cfe:	9905      	ldr	r1, [sp, #20]
 8016d00:	4648      	mov	r0, r9
 8016d02:	f001 febd 	bl	8018a80 <__lshift>
 8016d06:	9005      	str	r0, [sp, #20]
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	f43f ae73 	beq.w	80169f4 <_strtod_l+0x43c>
 8016d0e:	2f00      	cmp	r7, #0
 8016d10:	dd08      	ble.n	8016d24 <_strtod_l+0x76c>
 8016d12:	4641      	mov	r1, r8
 8016d14:	463a      	mov	r2, r7
 8016d16:	4648      	mov	r0, r9
 8016d18:	f001 feb2 	bl	8018a80 <__lshift>
 8016d1c:	4680      	mov	r8, r0
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f43f ae68 	beq.w	80169f4 <_strtod_l+0x43c>
 8016d24:	9a05      	ldr	r2, [sp, #20]
 8016d26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d28:	4648      	mov	r0, r9
 8016d2a:	f001 ff17 	bl	8018b5c <__mdiff>
 8016d2e:	4604      	mov	r4, r0
 8016d30:	2800      	cmp	r0, #0
 8016d32:	f43f ae5f 	beq.w	80169f4 <_strtod_l+0x43c>
 8016d36:	68c3      	ldr	r3, [r0, #12]
 8016d38:	930c      	str	r3, [sp, #48]	; 0x30
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	60c3      	str	r3, [r0, #12]
 8016d3e:	4641      	mov	r1, r8
 8016d40:	f001 fef2 	bl	8018b28 <__mcmp>
 8016d44:	2800      	cmp	r0, #0
 8016d46:	da55      	bge.n	8016df4 <_strtod_l+0x83c>
 8016d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d4a:	b9e3      	cbnz	r3, 8016d86 <_strtod_l+0x7ce>
 8016d4c:	f1ba 0f00 	cmp.w	sl, #0
 8016d50:	d119      	bne.n	8016d86 <_strtod_l+0x7ce>
 8016d52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d56:	b9b3      	cbnz	r3, 8016d86 <_strtod_l+0x7ce>
 8016d58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016d5c:	0d1b      	lsrs	r3, r3, #20
 8016d5e:	051b      	lsls	r3, r3, #20
 8016d60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016d64:	d90f      	bls.n	8016d86 <_strtod_l+0x7ce>
 8016d66:	6963      	ldr	r3, [r4, #20]
 8016d68:	b913      	cbnz	r3, 8016d70 <_strtod_l+0x7b8>
 8016d6a:	6923      	ldr	r3, [r4, #16]
 8016d6c:	2b01      	cmp	r3, #1
 8016d6e:	dd0a      	ble.n	8016d86 <_strtod_l+0x7ce>
 8016d70:	4621      	mov	r1, r4
 8016d72:	2201      	movs	r2, #1
 8016d74:	4648      	mov	r0, r9
 8016d76:	f001 fe83 	bl	8018a80 <__lshift>
 8016d7a:	4641      	mov	r1, r8
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	f001 fed3 	bl	8018b28 <__mcmp>
 8016d82:	2800      	cmp	r0, #0
 8016d84:	dc67      	bgt.n	8016e56 <_strtod_l+0x89e>
 8016d86:	9b04      	ldr	r3, [sp, #16]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d171      	bne.n	8016e70 <_strtod_l+0x8b8>
 8016d8c:	e63d      	b.n	8016a0a <_strtod_l+0x452>
 8016d8e:	f018 0f01 	tst.w	r8, #1
 8016d92:	d004      	beq.n	8016d9e <_strtod_l+0x7e6>
 8016d94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d98:	f7e9 fc46 	bl	8000628 <__aeabi_dmul>
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016da2:	3508      	adds	r5, #8
 8016da4:	e6e5      	b.n	8016b72 <_strtod_l+0x5ba>
 8016da6:	f04f 32ff 	mov.w	r2, #4294967295
 8016daa:	fa02 f303 	lsl.w	r3, r2, r3
 8016dae:	ea03 0a0a 	and.w	sl, r3, sl
 8016db2:	e6ff      	b.n	8016bb4 <_strtod_l+0x5fc>
 8016db4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016db8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016dbc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016dc0:	36e2      	adds	r6, #226	; 0xe2
 8016dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8016dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8016dc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016dca:	e75d      	b.n	8016c88 <_strtod_l+0x6d0>
 8016dcc:	2300      	movs	r3, #0
 8016dce:	930a      	str	r3, [sp, #40]	; 0x28
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dd4:	e758      	b.n	8016c88 <_strtod_l+0x6d0>
 8016dd6:	4632      	mov	r2, r6
 8016dd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016dda:	4648      	mov	r0, r9
 8016ddc:	f001 fe50 	bl	8018a80 <__lshift>
 8016de0:	901c      	str	r0, [sp, #112]	; 0x70
 8016de2:	2800      	cmp	r0, #0
 8016de4:	f47f af7c 	bne.w	8016ce0 <_strtod_l+0x728>
 8016de8:	e604      	b.n	80169f4 <_strtod_l+0x43c>
 8016dea:	bf00      	nop
 8016dec:	0801a2c0 	.word	0x0801a2c0
 8016df0:	fffffc02 	.word	0xfffffc02
 8016df4:	465d      	mov	r5, fp
 8016df6:	f040 8086 	bne.w	8016f06 <_strtod_l+0x94e>
 8016dfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e00:	b32a      	cbz	r2, 8016e4e <_strtod_l+0x896>
 8016e02:	4aaf      	ldr	r2, [pc, #700]	; (80170c0 <_strtod_l+0xb08>)
 8016e04:	4293      	cmp	r3, r2
 8016e06:	d153      	bne.n	8016eb0 <_strtod_l+0x8f8>
 8016e08:	9b04      	ldr	r3, [sp, #16]
 8016e0a:	4650      	mov	r0, sl
 8016e0c:	b1d3      	cbz	r3, 8016e44 <_strtod_l+0x88c>
 8016e0e:	4aad      	ldr	r2, [pc, #692]	; (80170c4 <_strtod_l+0xb0c>)
 8016e10:	402a      	ands	r2, r5
 8016e12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016e16:	f04f 31ff 	mov.w	r1, #4294967295
 8016e1a:	d816      	bhi.n	8016e4a <_strtod_l+0x892>
 8016e1c:	0d12      	lsrs	r2, r2, #20
 8016e1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016e22:	fa01 f303 	lsl.w	r3, r1, r3
 8016e26:	4298      	cmp	r0, r3
 8016e28:	d142      	bne.n	8016eb0 <_strtod_l+0x8f8>
 8016e2a:	4ba7      	ldr	r3, [pc, #668]	; (80170c8 <_strtod_l+0xb10>)
 8016e2c:	429d      	cmp	r5, r3
 8016e2e:	d102      	bne.n	8016e36 <_strtod_l+0x87e>
 8016e30:	3001      	adds	r0, #1
 8016e32:	f43f addf 	beq.w	80169f4 <_strtod_l+0x43c>
 8016e36:	4ba3      	ldr	r3, [pc, #652]	; (80170c4 <_strtod_l+0xb0c>)
 8016e38:	402b      	ands	r3, r5
 8016e3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016e3e:	f04f 0a00 	mov.w	sl, #0
 8016e42:	e7a0      	b.n	8016d86 <_strtod_l+0x7ce>
 8016e44:	f04f 33ff 	mov.w	r3, #4294967295
 8016e48:	e7ed      	b.n	8016e26 <_strtod_l+0x86e>
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	e7eb      	b.n	8016e26 <_strtod_l+0x86e>
 8016e4e:	bb7b      	cbnz	r3, 8016eb0 <_strtod_l+0x8f8>
 8016e50:	f1ba 0f00 	cmp.w	sl, #0
 8016e54:	d12c      	bne.n	8016eb0 <_strtod_l+0x8f8>
 8016e56:	9904      	ldr	r1, [sp, #16]
 8016e58:	4a9a      	ldr	r2, [pc, #616]	; (80170c4 <_strtod_l+0xb0c>)
 8016e5a:	465b      	mov	r3, fp
 8016e5c:	b1f1      	cbz	r1, 8016e9c <_strtod_l+0x8e4>
 8016e5e:	ea02 010b 	and.w	r1, r2, fp
 8016e62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016e66:	dc19      	bgt.n	8016e9c <_strtod_l+0x8e4>
 8016e68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016e6c:	f77f ae5b 	ble.w	8016b26 <_strtod_l+0x56e>
 8016e70:	4a96      	ldr	r2, [pc, #600]	; (80170cc <_strtod_l+0xb14>)
 8016e72:	2300      	movs	r3, #0
 8016e74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016e78:	4650      	mov	r0, sl
 8016e7a:	4659      	mov	r1, fp
 8016e7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016e80:	f7e9 fbd2 	bl	8000628 <__aeabi_dmul>
 8016e84:	4682      	mov	sl, r0
 8016e86:	468b      	mov	fp, r1
 8016e88:	2900      	cmp	r1, #0
 8016e8a:	f47f adbe 	bne.w	8016a0a <_strtod_l+0x452>
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	f47f adbb 	bne.w	8016a0a <_strtod_l+0x452>
 8016e94:	2322      	movs	r3, #34	; 0x22
 8016e96:	f8c9 3000 	str.w	r3, [r9]
 8016e9a:	e5b6      	b.n	8016a0a <_strtod_l+0x452>
 8016e9c:	4013      	ands	r3, r2
 8016e9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016ea2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016ea6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016eaa:	f04f 3aff 	mov.w	sl, #4294967295
 8016eae:	e76a      	b.n	8016d86 <_strtod_l+0x7ce>
 8016eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016eb2:	b193      	cbz	r3, 8016eda <_strtod_l+0x922>
 8016eb4:	422b      	tst	r3, r5
 8016eb6:	f43f af66 	beq.w	8016d86 <_strtod_l+0x7ce>
 8016eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ebc:	9a04      	ldr	r2, [sp, #16]
 8016ebe:	4650      	mov	r0, sl
 8016ec0:	4659      	mov	r1, fp
 8016ec2:	b173      	cbz	r3, 8016ee2 <_strtod_l+0x92a>
 8016ec4:	f7ff fb5c 	bl	8016580 <sulp>
 8016ec8:	4602      	mov	r2, r0
 8016eca:	460b      	mov	r3, r1
 8016ecc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ed0:	f7e9 f9f4 	bl	80002bc <__adddf3>
 8016ed4:	4682      	mov	sl, r0
 8016ed6:	468b      	mov	fp, r1
 8016ed8:	e755      	b.n	8016d86 <_strtod_l+0x7ce>
 8016eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016edc:	ea13 0f0a 	tst.w	r3, sl
 8016ee0:	e7e9      	b.n	8016eb6 <_strtod_l+0x8fe>
 8016ee2:	f7ff fb4d 	bl	8016580 <sulp>
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	460b      	mov	r3, r1
 8016eea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016eee:	f7e9 f9e3 	bl	80002b8 <__aeabi_dsub>
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	4682      	mov	sl, r0
 8016ef8:	468b      	mov	fp, r1
 8016efa:	f7e9 fdfd 	bl	8000af8 <__aeabi_dcmpeq>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	f47f ae11 	bne.w	8016b26 <_strtod_l+0x56e>
 8016f04:	e73f      	b.n	8016d86 <_strtod_l+0x7ce>
 8016f06:	4641      	mov	r1, r8
 8016f08:	4620      	mov	r0, r4
 8016f0a:	f001 ff4a 	bl	8018da2 <__ratio>
 8016f0e:	ec57 6b10 	vmov	r6, r7, d0
 8016f12:	2200      	movs	r2, #0
 8016f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f18:	ee10 0a10 	vmov	r0, s0
 8016f1c:	4639      	mov	r1, r7
 8016f1e:	f7e9 fdff 	bl	8000b20 <__aeabi_dcmple>
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d077      	beq.n	8017016 <_strtod_l+0xa5e>
 8016f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d04a      	beq.n	8016fc2 <_strtod_l+0xa0a>
 8016f2c:	4b68      	ldr	r3, [pc, #416]	; (80170d0 <_strtod_l+0xb18>)
 8016f2e:	2200      	movs	r2, #0
 8016f30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f34:	4f66      	ldr	r7, [pc, #408]	; (80170d0 <_strtod_l+0xb18>)
 8016f36:	2600      	movs	r6, #0
 8016f38:	4b62      	ldr	r3, [pc, #392]	; (80170c4 <_strtod_l+0xb0c>)
 8016f3a:	402b      	ands	r3, r5
 8016f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f40:	4b64      	ldr	r3, [pc, #400]	; (80170d4 <_strtod_l+0xb1c>)
 8016f42:	429a      	cmp	r2, r3
 8016f44:	f040 80ce 	bne.w	80170e4 <_strtod_l+0xb2c>
 8016f48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016f54:	ec4b ab10 	vmov	d0, sl, fp
 8016f58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016f5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016f60:	f001 fe5a 	bl	8018c18 <__ulp>
 8016f64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f68:	ec53 2b10 	vmov	r2, r3, d0
 8016f6c:	f7e9 fb5c 	bl	8000628 <__aeabi_dmul>
 8016f70:	4652      	mov	r2, sl
 8016f72:	465b      	mov	r3, fp
 8016f74:	f7e9 f9a2 	bl	80002bc <__adddf3>
 8016f78:	460b      	mov	r3, r1
 8016f7a:	4952      	ldr	r1, [pc, #328]	; (80170c4 <_strtod_l+0xb0c>)
 8016f7c:	4a56      	ldr	r2, [pc, #344]	; (80170d8 <_strtod_l+0xb20>)
 8016f7e:	4019      	ands	r1, r3
 8016f80:	4291      	cmp	r1, r2
 8016f82:	4682      	mov	sl, r0
 8016f84:	d95b      	bls.n	801703e <_strtod_l+0xa86>
 8016f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016f8c:	4293      	cmp	r3, r2
 8016f8e:	d103      	bne.n	8016f98 <_strtod_l+0x9e0>
 8016f90:	9b08      	ldr	r3, [sp, #32]
 8016f92:	3301      	adds	r3, #1
 8016f94:	f43f ad2e 	beq.w	80169f4 <_strtod_l+0x43c>
 8016f98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80170c8 <_strtod_l+0xb10>
 8016f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8016fa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fa2:	4648      	mov	r0, r9
 8016fa4:	f001 fba1 	bl	80186ea <_Bfree>
 8016fa8:	9905      	ldr	r1, [sp, #20]
 8016faa:	4648      	mov	r0, r9
 8016fac:	f001 fb9d 	bl	80186ea <_Bfree>
 8016fb0:	4641      	mov	r1, r8
 8016fb2:	4648      	mov	r0, r9
 8016fb4:	f001 fb99 	bl	80186ea <_Bfree>
 8016fb8:	4621      	mov	r1, r4
 8016fba:	4648      	mov	r0, r9
 8016fbc:	f001 fb95 	bl	80186ea <_Bfree>
 8016fc0:	e619      	b.n	8016bf6 <_strtod_l+0x63e>
 8016fc2:	f1ba 0f00 	cmp.w	sl, #0
 8016fc6:	d11a      	bne.n	8016ffe <_strtod_l+0xa46>
 8016fc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016fcc:	b9eb      	cbnz	r3, 801700a <_strtod_l+0xa52>
 8016fce:	2200      	movs	r2, #0
 8016fd0:	4b3f      	ldr	r3, [pc, #252]	; (80170d0 <_strtod_l+0xb18>)
 8016fd2:	4630      	mov	r0, r6
 8016fd4:	4639      	mov	r1, r7
 8016fd6:	f7e9 fd99 	bl	8000b0c <__aeabi_dcmplt>
 8016fda:	b9c8      	cbnz	r0, 8017010 <_strtod_l+0xa58>
 8016fdc:	4630      	mov	r0, r6
 8016fde:	4639      	mov	r1, r7
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	4b3e      	ldr	r3, [pc, #248]	; (80170dc <_strtod_l+0xb24>)
 8016fe4:	f7e9 fb20 	bl	8000628 <__aeabi_dmul>
 8016fe8:	4606      	mov	r6, r0
 8016fea:	460f      	mov	r7, r1
 8016fec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016ff0:	9618      	str	r6, [sp, #96]	; 0x60
 8016ff2:	9319      	str	r3, [sp, #100]	; 0x64
 8016ff4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016ff8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016ffc:	e79c      	b.n	8016f38 <_strtod_l+0x980>
 8016ffe:	f1ba 0f01 	cmp.w	sl, #1
 8017002:	d102      	bne.n	801700a <_strtod_l+0xa52>
 8017004:	2d00      	cmp	r5, #0
 8017006:	f43f ad8e 	beq.w	8016b26 <_strtod_l+0x56e>
 801700a:	2200      	movs	r2, #0
 801700c:	4b34      	ldr	r3, [pc, #208]	; (80170e0 <_strtod_l+0xb28>)
 801700e:	e78f      	b.n	8016f30 <_strtod_l+0x978>
 8017010:	2600      	movs	r6, #0
 8017012:	4f32      	ldr	r7, [pc, #200]	; (80170dc <_strtod_l+0xb24>)
 8017014:	e7ea      	b.n	8016fec <_strtod_l+0xa34>
 8017016:	4b31      	ldr	r3, [pc, #196]	; (80170dc <_strtod_l+0xb24>)
 8017018:	4630      	mov	r0, r6
 801701a:	4639      	mov	r1, r7
 801701c:	2200      	movs	r2, #0
 801701e:	f7e9 fb03 	bl	8000628 <__aeabi_dmul>
 8017022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017024:	4606      	mov	r6, r0
 8017026:	460f      	mov	r7, r1
 8017028:	b933      	cbnz	r3, 8017038 <_strtod_l+0xa80>
 801702a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801702e:	9010      	str	r0, [sp, #64]	; 0x40
 8017030:	9311      	str	r3, [sp, #68]	; 0x44
 8017032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017036:	e7df      	b.n	8016ff8 <_strtod_l+0xa40>
 8017038:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801703c:	e7f9      	b.n	8017032 <_strtod_l+0xa7a>
 801703e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017042:	9b04      	ldr	r3, [sp, #16]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d1ab      	bne.n	8016fa0 <_strtod_l+0x9e8>
 8017048:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801704c:	0d1b      	lsrs	r3, r3, #20
 801704e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017050:	051b      	lsls	r3, r3, #20
 8017052:	429a      	cmp	r2, r3
 8017054:	465d      	mov	r5, fp
 8017056:	d1a3      	bne.n	8016fa0 <_strtod_l+0x9e8>
 8017058:	4639      	mov	r1, r7
 801705a:	4630      	mov	r0, r6
 801705c:	f7e9 fd94 	bl	8000b88 <__aeabi_d2iz>
 8017060:	f7e9 fa78 	bl	8000554 <__aeabi_i2d>
 8017064:	460b      	mov	r3, r1
 8017066:	4602      	mov	r2, r0
 8017068:	4639      	mov	r1, r7
 801706a:	4630      	mov	r0, r6
 801706c:	f7e9 f924 	bl	80002b8 <__aeabi_dsub>
 8017070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017072:	4606      	mov	r6, r0
 8017074:	460f      	mov	r7, r1
 8017076:	b933      	cbnz	r3, 8017086 <_strtod_l+0xace>
 8017078:	f1ba 0f00 	cmp.w	sl, #0
 801707c:	d103      	bne.n	8017086 <_strtod_l+0xace>
 801707e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017082:	2d00      	cmp	r5, #0
 8017084:	d06d      	beq.n	8017162 <_strtod_l+0xbaa>
 8017086:	a30a      	add	r3, pc, #40	; (adr r3, 80170b0 <_strtod_l+0xaf8>)
 8017088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801708c:	4630      	mov	r0, r6
 801708e:	4639      	mov	r1, r7
 8017090:	f7e9 fd3c 	bl	8000b0c <__aeabi_dcmplt>
 8017094:	2800      	cmp	r0, #0
 8017096:	f47f acb8 	bne.w	8016a0a <_strtod_l+0x452>
 801709a:	a307      	add	r3, pc, #28	; (adr r3, 80170b8 <_strtod_l+0xb00>)
 801709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a0:	4630      	mov	r0, r6
 80170a2:	4639      	mov	r1, r7
 80170a4:	f7e9 fd50 	bl	8000b48 <__aeabi_dcmpgt>
 80170a8:	2800      	cmp	r0, #0
 80170aa:	f43f af79 	beq.w	8016fa0 <_strtod_l+0x9e8>
 80170ae:	e4ac      	b.n	8016a0a <_strtod_l+0x452>
 80170b0:	94a03595 	.word	0x94a03595
 80170b4:	3fdfffff 	.word	0x3fdfffff
 80170b8:	35afe535 	.word	0x35afe535
 80170bc:	3fe00000 	.word	0x3fe00000
 80170c0:	000fffff 	.word	0x000fffff
 80170c4:	7ff00000 	.word	0x7ff00000
 80170c8:	7fefffff 	.word	0x7fefffff
 80170cc:	39500000 	.word	0x39500000
 80170d0:	3ff00000 	.word	0x3ff00000
 80170d4:	7fe00000 	.word	0x7fe00000
 80170d8:	7c9fffff 	.word	0x7c9fffff
 80170dc:	3fe00000 	.word	0x3fe00000
 80170e0:	bff00000 	.word	0xbff00000
 80170e4:	9b04      	ldr	r3, [sp, #16]
 80170e6:	b333      	cbz	r3, 8017136 <_strtod_l+0xb7e>
 80170e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80170ee:	d822      	bhi.n	8017136 <_strtod_l+0xb7e>
 80170f0:	a327      	add	r3, pc, #156	; (adr r3, 8017190 <_strtod_l+0xbd8>)
 80170f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f6:	4630      	mov	r0, r6
 80170f8:	4639      	mov	r1, r7
 80170fa:	f7e9 fd11 	bl	8000b20 <__aeabi_dcmple>
 80170fe:	b1a0      	cbz	r0, 801712a <_strtod_l+0xb72>
 8017100:	4639      	mov	r1, r7
 8017102:	4630      	mov	r0, r6
 8017104:	f7e9 fd68 	bl	8000bd8 <__aeabi_d2uiz>
 8017108:	2800      	cmp	r0, #0
 801710a:	bf08      	it	eq
 801710c:	2001      	moveq	r0, #1
 801710e:	f7e9 fa11 	bl	8000534 <__aeabi_ui2d>
 8017112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017114:	4606      	mov	r6, r0
 8017116:	460f      	mov	r7, r1
 8017118:	bb03      	cbnz	r3, 801715c <_strtod_l+0xba4>
 801711a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801711e:	9012      	str	r0, [sp, #72]	; 0x48
 8017120:	9313      	str	r3, [sp, #76]	; 0x4c
 8017122:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017126:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801712a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801712c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801712e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017132:	1a9b      	subs	r3, r3, r2
 8017134:	930b      	str	r3, [sp, #44]	; 0x2c
 8017136:	ed9d 0b08 	vldr	d0, [sp, #32]
 801713a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801713e:	f001 fd6b 	bl	8018c18 <__ulp>
 8017142:	4650      	mov	r0, sl
 8017144:	ec53 2b10 	vmov	r2, r3, d0
 8017148:	4659      	mov	r1, fp
 801714a:	f7e9 fa6d 	bl	8000628 <__aeabi_dmul>
 801714e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017152:	f7e9 f8b3 	bl	80002bc <__adddf3>
 8017156:	4682      	mov	sl, r0
 8017158:	468b      	mov	fp, r1
 801715a:	e772      	b.n	8017042 <_strtod_l+0xa8a>
 801715c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017160:	e7df      	b.n	8017122 <_strtod_l+0xb6a>
 8017162:	a30d      	add	r3, pc, #52	; (adr r3, 8017198 <_strtod_l+0xbe0>)
 8017164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017168:	f7e9 fcd0 	bl	8000b0c <__aeabi_dcmplt>
 801716c:	e79c      	b.n	80170a8 <_strtod_l+0xaf0>
 801716e:	2300      	movs	r3, #0
 8017170:	930d      	str	r3, [sp, #52]	; 0x34
 8017172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017176:	6013      	str	r3, [r2, #0]
 8017178:	f7ff ba61 	b.w	801663e <_strtod_l+0x86>
 801717c:	2b65      	cmp	r3, #101	; 0x65
 801717e:	f04f 0200 	mov.w	r2, #0
 8017182:	f43f ab4e 	beq.w	8016822 <_strtod_l+0x26a>
 8017186:	2101      	movs	r1, #1
 8017188:	4614      	mov	r4, r2
 801718a:	9104      	str	r1, [sp, #16]
 801718c:	f7ff bacb 	b.w	8016726 <_strtod_l+0x16e>
 8017190:	ffc00000 	.word	0xffc00000
 8017194:	41dfffff 	.word	0x41dfffff
 8017198:	94a03595 	.word	0x94a03595
 801719c:	3fcfffff 	.word	0x3fcfffff

080171a0 <_strtod_r>:
 80171a0:	4b05      	ldr	r3, [pc, #20]	; (80171b8 <_strtod_r+0x18>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	b410      	push	{r4}
 80171a6:	6a1b      	ldr	r3, [r3, #32]
 80171a8:	4c04      	ldr	r4, [pc, #16]	; (80171bc <_strtod_r+0x1c>)
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	bf08      	it	eq
 80171ae:	4623      	moveq	r3, r4
 80171b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171b4:	f7ff ba00 	b.w	80165b8 <_strtod_l>
 80171b8:	2000000c 	.word	0x2000000c
 80171bc:	20000070 	.word	0x20000070

080171c0 <_strtol_l.isra.0>:
 80171c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171c4:	4680      	mov	r8, r0
 80171c6:	4689      	mov	r9, r1
 80171c8:	4692      	mov	sl, r2
 80171ca:	461e      	mov	r6, r3
 80171cc:	460f      	mov	r7, r1
 80171ce:	463d      	mov	r5, r7
 80171d0:	9808      	ldr	r0, [sp, #32]
 80171d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171d6:	f001 fa0d 	bl	80185f4 <__locale_ctype_ptr_l>
 80171da:	4420      	add	r0, r4
 80171dc:	7843      	ldrb	r3, [r0, #1]
 80171de:	f013 0308 	ands.w	r3, r3, #8
 80171e2:	d132      	bne.n	801724a <_strtol_l.isra.0+0x8a>
 80171e4:	2c2d      	cmp	r4, #45	; 0x2d
 80171e6:	d132      	bne.n	801724e <_strtol_l.isra.0+0x8e>
 80171e8:	787c      	ldrb	r4, [r7, #1]
 80171ea:	1cbd      	adds	r5, r7, #2
 80171ec:	2201      	movs	r2, #1
 80171ee:	2e00      	cmp	r6, #0
 80171f0:	d05d      	beq.n	80172ae <_strtol_l.isra.0+0xee>
 80171f2:	2e10      	cmp	r6, #16
 80171f4:	d109      	bne.n	801720a <_strtol_l.isra.0+0x4a>
 80171f6:	2c30      	cmp	r4, #48	; 0x30
 80171f8:	d107      	bne.n	801720a <_strtol_l.isra.0+0x4a>
 80171fa:	782b      	ldrb	r3, [r5, #0]
 80171fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017200:	2b58      	cmp	r3, #88	; 0x58
 8017202:	d14f      	bne.n	80172a4 <_strtol_l.isra.0+0xe4>
 8017204:	786c      	ldrb	r4, [r5, #1]
 8017206:	2610      	movs	r6, #16
 8017208:	3502      	adds	r5, #2
 801720a:	2a00      	cmp	r2, #0
 801720c:	bf14      	ite	ne
 801720e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017212:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017216:	2700      	movs	r7, #0
 8017218:	fbb1 fcf6 	udiv	ip, r1, r6
 801721c:	4638      	mov	r0, r7
 801721e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017222:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017226:	2b09      	cmp	r3, #9
 8017228:	d817      	bhi.n	801725a <_strtol_l.isra.0+0x9a>
 801722a:	461c      	mov	r4, r3
 801722c:	42a6      	cmp	r6, r4
 801722e:	dd23      	ble.n	8017278 <_strtol_l.isra.0+0xb8>
 8017230:	1c7b      	adds	r3, r7, #1
 8017232:	d007      	beq.n	8017244 <_strtol_l.isra.0+0x84>
 8017234:	4584      	cmp	ip, r0
 8017236:	d31c      	bcc.n	8017272 <_strtol_l.isra.0+0xb2>
 8017238:	d101      	bne.n	801723e <_strtol_l.isra.0+0x7e>
 801723a:	45a6      	cmp	lr, r4
 801723c:	db19      	blt.n	8017272 <_strtol_l.isra.0+0xb2>
 801723e:	fb00 4006 	mla	r0, r0, r6, r4
 8017242:	2701      	movs	r7, #1
 8017244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017248:	e7eb      	b.n	8017222 <_strtol_l.isra.0+0x62>
 801724a:	462f      	mov	r7, r5
 801724c:	e7bf      	b.n	80171ce <_strtol_l.isra.0+0xe>
 801724e:	2c2b      	cmp	r4, #43	; 0x2b
 8017250:	bf04      	itt	eq
 8017252:	1cbd      	addeq	r5, r7, #2
 8017254:	787c      	ldrbeq	r4, [r7, #1]
 8017256:	461a      	mov	r2, r3
 8017258:	e7c9      	b.n	80171ee <_strtol_l.isra.0+0x2e>
 801725a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801725e:	2b19      	cmp	r3, #25
 8017260:	d801      	bhi.n	8017266 <_strtol_l.isra.0+0xa6>
 8017262:	3c37      	subs	r4, #55	; 0x37
 8017264:	e7e2      	b.n	801722c <_strtol_l.isra.0+0x6c>
 8017266:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801726a:	2b19      	cmp	r3, #25
 801726c:	d804      	bhi.n	8017278 <_strtol_l.isra.0+0xb8>
 801726e:	3c57      	subs	r4, #87	; 0x57
 8017270:	e7dc      	b.n	801722c <_strtol_l.isra.0+0x6c>
 8017272:	f04f 37ff 	mov.w	r7, #4294967295
 8017276:	e7e5      	b.n	8017244 <_strtol_l.isra.0+0x84>
 8017278:	1c7b      	adds	r3, r7, #1
 801727a:	d108      	bne.n	801728e <_strtol_l.isra.0+0xce>
 801727c:	2322      	movs	r3, #34	; 0x22
 801727e:	f8c8 3000 	str.w	r3, [r8]
 8017282:	4608      	mov	r0, r1
 8017284:	f1ba 0f00 	cmp.w	sl, #0
 8017288:	d107      	bne.n	801729a <_strtol_l.isra.0+0xda>
 801728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801728e:	b102      	cbz	r2, 8017292 <_strtol_l.isra.0+0xd2>
 8017290:	4240      	negs	r0, r0
 8017292:	f1ba 0f00 	cmp.w	sl, #0
 8017296:	d0f8      	beq.n	801728a <_strtol_l.isra.0+0xca>
 8017298:	b10f      	cbz	r7, 801729e <_strtol_l.isra.0+0xde>
 801729a:	f105 39ff 	add.w	r9, r5, #4294967295
 801729e:	f8ca 9000 	str.w	r9, [sl]
 80172a2:	e7f2      	b.n	801728a <_strtol_l.isra.0+0xca>
 80172a4:	2430      	movs	r4, #48	; 0x30
 80172a6:	2e00      	cmp	r6, #0
 80172a8:	d1af      	bne.n	801720a <_strtol_l.isra.0+0x4a>
 80172aa:	2608      	movs	r6, #8
 80172ac:	e7ad      	b.n	801720a <_strtol_l.isra.0+0x4a>
 80172ae:	2c30      	cmp	r4, #48	; 0x30
 80172b0:	d0a3      	beq.n	80171fa <_strtol_l.isra.0+0x3a>
 80172b2:	260a      	movs	r6, #10
 80172b4:	e7a9      	b.n	801720a <_strtol_l.isra.0+0x4a>
	...

080172b8 <_strtol_r>:
 80172b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172ba:	4c06      	ldr	r4, [pc, #24]	; (80172d4 <_strtol_r+0x1c>)
 80172bc:	4d06      	ldr	r5, [pc, #24]	; (80172d8 <_strtol_r+0x20>)
 80172be:	6824      	ldr	r4, [r4, #0]
 80172c0:	6a24      	ldr	r4, [r4, #32]
 80172c2:	2c00      	cmp	r4, #0
 80172c4:	bf08      	it	eq
 80172c6:	462c      	moveq	r4, r5
 80172c8:	9400      	str	r4, [sp, #0]
 80172ca:	f7ff ff79 	bl	80171c0 <_strtol_l.isra.0>
 80172ce:	b003      	add	sp, #12
 80172d0:	bd30      	pop	{r4, r5, pc}
 80172d2:	bf00      	nop
 80172d4:	2000000c 	.word	0x2000000c
 80172d8:	20000070 	.word	0x20000070

080172dc <_vsiprintf_r>:
 80172dc:	b500      	push	{lr}
 80172de:	b09b      	sub	sp, #108	; 0x6c
 80172e0:	9100      	str	r1, [sp, #0]
 80172e2:	9104      	str	r1, [sp, #16]
 80172e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80172e8:	9105      	str	r1, [sp, #20]
 80172ea:	9102      	str	r1, [sp, #8]
 80172ec:	4905      	ldr	r1, [pc, #20]	; (8017304 <_vsiprintf_r+0x28>)
 80172ee:	9103      	str	r1, [sp, #12]
 80172f0:	4669      	mov	r1, sp
 80172f2:	f001 fed5 	bl	80190a0 <_svfiprintf_r>
 80172f6:	9b00      	ldr	r3, [sp, #0]
 80172f8:	2200      	movs	r2, #0
 80172fa:	701a      	strb	r2, [r3, #0]
 80172fc:	b01b      	add	sp, #108	; 0x6c
 80172fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8017302:	bf00      	nop
 8017304:	ffff0208 	.word	0xffff0208

08017308 <vsiprintf>:
 8017308:	4613      	mov	r3, r2
 801730a:	460a      	mov	r2, r1
 801730c:	4601      	mov	r1, r0
 801730e:	4802      	ldr	r0, [pc, #8]	; (8017318 <vsiprintf+0x10>)
 8017310:	6800      	ldr	r0, [r0, #0]
 8017312:	f7ff bfe3 	b.w	80172dc <_vsiprintf_r>
 8017316:	bf00      	nop
 8017318:	2000000c 	.word	0x2000000c

0801731c <quorem>:
 801731c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017320:	6903      	ldr	r3, [r0, #16]
 8017322:	690c      	ldr	r4, [r1, #16]
 8017324:	42a3      	cmp	r3, r4
 8017326:	4680      	mov	r8, r0
 8017328:	f2c0 8082 	blt.w	8017430 <quorem+0x114>
 801732c:	3c01      	subs	r4, #1
 801732e:	f101 0714 	add.w	r7, r1, #20
 8017332:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017336:	f100 0614 	add.w	r6, r0, #20
 801733a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801733e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017342:	eb06 030c 	add.w	r3, r6, ip
 8017346:	3501      	adds	r5, #1
 8017348:	eb07 090c 	add.w	r9, r7, ip
 801734c:	9301      	str	r3, [sp, #4]
 801734e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017352:	b395      	cbz	r5, 80173ba <quorem+0x9e>
 8017354:	f04f 0a00 	mov.w	sl, #0
 8017358:	4638      	mov	r0, r7
 801735a:	46b6      	mov	lr, r6
 801735c:	46d3      	mov	fp, sl
 801735e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017362:	b293      	uxth	r3, r2
 8017364:	fb05 a303 	mla	r3, r5, r3, sl
 8017368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801736c:	b29b      	uxth	r3, r3
 801736e:	ebab 0303 	sub.w	r3, fp, r3
 8017372:	0c12      	lsrs	r2, r2, #16
 8017374:	f8de b000 	ldr.w	fp, [lr]
 8017378:	fb05 a202 	mla	r2, r5, r2, sl
 801737c:	fa13 f38b 	uxtah	r3, r3, fp
 8017380:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017384:	fa1f fb82 	uxth.w	fp, r2
 8017388:	f8de 2000 	ldr.w	r2, [lr]
 801738c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017394:	b29b      	uxth	r3, r3
 8017396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801739a:	4581      	cmp	r9, r0
 801739c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80173a0:	f84e 3b04 	str.w	r3, [lr], #4
 80173a4:	d2db      	bcs.n	801735e <quorem+0x42>
 80173a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80173aa:	b933      	cbnz	r3, 80173ba <quorem+0x9e>
 80173ac:	9b01      	ldr	r3, [sp, #4]
 80173ae:	3b04      	subs	r3, #4
 80173b0:	429e      	cmp	r6, r3
 80173b2:	461a      	mov	r2, r3
 80173b4:	d330      	bcc.n	8017418 <quorem+0xfc>
 80173b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80173ba:	4640      	mov	r0, r8
 80173bc:	f001 fbb4 	bl	8018b28 <__mcmp>
 80173c0:	2800      	cmp	r0, #0
 80173c2:	db25      	blt.n	8017410 <quorem+0xf4>
 80173c4:	3501      	adds	r5, #1
 80173c6:	4630      	mov	r0, r6
 80173c8:	f04f 0c00 	mov.w	ip, #0
 80173cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80173d0:	f8d0 e000 	ldr.w	lr, [r0]
 80173d4:	b293      	uxth	r3, r2
 80173d6:	ebac 0303 	sub.w	r3, ip, r3
 80173da:	0c12      	lsrs	r2, r2, #16
 80173dc:	fa13 f38e 	uxtah	r3, r3, lr
 80173e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80173e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173ee:	45b9      	cmp	r9, r7
 80173f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80173f4:	f840 3b04 	str.w	r3, [r0], #4
 80173f8:	d2e8      	bcs.n	80173cc <quorem+0xb0>
 80173fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80173fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017402:	b92a      	cbnz	r2, 8017410 <quorem+0xf4>
 8017404:	3b04      	subs	r3, #4
 8017406:	429e      	cmp	r6, r3
 8017408:	461a      	mov	r2, r3
 801740a:	d30b      	bcc.n	8017424 <quorem+0x108>
 801740c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017410:	4628      	mov	r0, r5
 8017412:	b003      	add	sp, #12
 8017414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017418:	6812      	ldr	r2, [r2, #0]
 801741a:	3b04      	subs	r3, #4
 801741c:	2a00      	cmp	r2, #0
 801741e:	d1ca      	bne.n	80173b6 <quorem+0x9a>
 8017420:	3c01      	subs	r4, #1
 8017422:	e7c5      	b.n	80173b0 <quorem+0x94>
 8017424:	6812      	ldr	r2, [r2, #0]
 8017426:	3b04      	subs	r3, #4
 8017428:	2a00      	cmp	r2, #0
 801742a:	d1ef      	bne.n	801740c <quorem+0xf0>
 801742c:	3c01      	subs	r4, #1
 801742e:	e7ea      	b.n	8017406 <quorem+0xea>
 8017430:	2000      	movs	r0, #0
 8017432:	e7ee      	b.n	8017412 <quorem+0xf6>
 8017434:	0000      	movs	r0, r0
	...

08017438 <_dtoa_r>:
 8017438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801743c:	ec57 6b10 	vmov	r6, r7, d0
 8017440:	b097      	sub	sp, #92	; 0x5c
 8017442:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017444:	9106      	str	r1, [sp, #24]
 8017446:	4604      	mov	r4, r0
 8017448:	920b      	str	r2, [sp, #44]	; 0x2c
 801744a:	9312      	str	r3, [sp, #72]	; 0x48
 801744c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017450:	e9cd 6700 	strd	r6, r7, [sp]
 8017454:	b93d      	cbnz	r5, 8017466 <_dtoa_r+0x2e>
 8017456:	2010      	movs	r0, #16
 8017458:	f001 f8ee 	bl	8018638 <malloc>
 801745c:	6260      	str	r0, [r4, #36]	; 0x24
 801745e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017462:	6005      	str	r5, [r0, #0]
 8017464:	60c5      	str	r5, [r0, #12]
 8017466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017468:	6819      	ldr	r1, [r3, #0]
 801746a:	b151      	cbz	r1, 8017482 <_dtoa_r+0x4a>
 801746c:	685a      	ldr	r2, [r3, #4]
 801746e:	604a      	str	r2, [r1, #4]
 8017470:	2301      	movs	r3, #1
 8017472:	4093      	lsls	r3, r2
 8017474:	608b      	str	r3, [r1, #8]
 8017476:	4620      	mov	r0, r4
 8017478:	f001 f937 	bl	80186ea <_Bfree>
 801747c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801747e:	2200      	movs	r2, #0
 8017480:	601a      	str	r2, [r3, #0]
 8017482:	1e3b      	subs	r3, r7, #0
 8017484:	bfbb      	ittet	lt
 8017486:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801748a:	9301      	strlt	r3, [sp, #4]
 801748c:	2300      	movge	r3, #0
 801748e:	2201      	movlt	r2, #1
 8017490:	bfac      	ite	ge
 8017492:	f8c8 3000 	strge.w	r3, [r8]
 8017496:	f8c8 2000 	strlt.w	r2, [r8]
 801749a:	4baf      	ldr	r3, [pc, #700]	; (8017758 <_dtoa_r+0x320>)
 801749c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80174a0:	ea33 0308 	bics.w	r3, r3, r8
 80174a4:	d114      	bne.n	80174d0 <_dtoa_r+0x98>
 80174a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80174ac:	6013      	str	r3, [r2, #0]
 80174ae:	9b00      	ldr	r3, [sp, #0]
 80174b0:	b923      	cbnz	r3, 80174bc <_dtoa_r+0x84>
 80174b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80174b6:	2800      	cmp	r0, #0
 80174b8:	f000 8542 	beq.w	8017f40 <_dtoa_r+0xb08>
 80174bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801776c <_dtoa_r+0x334>
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	f000 8544 	beq.w	8017f50 <_dtoa_r+0xb18>
 80174c8:	f10b 0303 	add.w	r3, fp, #3
 80174cc:	f000 bd3e 	b.w	8017f4c <_dtoa_r+0xb14>
 80174d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80174d4:	2200      	movs	r2, #0
 80174d6:	2300      	movs	r3, #0
 80174d8:	4630      	mov	r0, r6
 80174da:	4639      	mov	r1, r7
 80174dc:	f7e9 fb0c 	bl	8000af8 <__aeabi_dcmpeq>
 80174e0:	4681      	mov	r9, r0
 80174e2:	b168      	cbz	r0, 8017500 <_dtoa_r+0xc8>
 80174e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174e6:	2301      	movs	r3, #1
 80174e8:	6013      	str	r3, [r2, #0]
 80174ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	f000 8524 	beq.w	8017f3a <_dtoa_r+0xb02>
 80174f2:	4b9a      	ldr	r3, [pc, #616]	; (801775c <_dtoa_r+0x324>)
 80174f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80174fa:	6013      	str	r3, [r2, #0]
 80174fc:	f000 bd28 	b.w	8017f50 <_dtoa_r+0xb18>
 8017500:	aa14      	add	r2, sp, #80	; 0x50
 8017502:	a915      	add	r1, sp, #84	; 0x54
 8017504:	ec47 6b10 	vmov	d0, r6, r7
 8017508:	4620      	mov	r0, r4
 801750a:	f001 fbfb 	bl	8018d04 <__d2b>
 801750e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017512:	9004      	str	r0, [sp, #16]
 8017514:	2d00      	cmp	r5, #0
 8017516:	d07c      	beq.n	8017612 <_dtoa_r+0x1da>
 8017518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801751c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017520:	46b2      	mov	sl, r6
 8017522:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801752a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801752e:	2200      	movs	r2, #0
 8017530:	4b8b      	ldr	r3, [pc, #556]	; (8017760 <_dtoa_r+0x328>)
 8017532:	4650      	mov	r0, sl
 8017534:	4659      	mov	r1, fp
 8017536:	f7e8 febf 	bl	80002b8 <__aeabi_dsub>
 801753a:	a381      	add	r3, pc, #516	; (adr r3, 8017740 <_dtoa_r+0x308>)
 801753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017540:	f7e9 f872 	bl	8000628 <__aeabi_dmul>
 8017544:	a380      	add	r3, pc, #512	; (adr r3, 8017748 <_dtoa_r+0x310>)
 8017546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754a:	f7e8 feb7 	bl	80002bc <__adddf3>
 801754e:	4606      	mov	r6, r0
 8017550:	4628      	mov	r0, r5
 8017552:	460f      	mov	r7, r1
 8017554:	f7e8 fffe 	bl	8000554 <__aeabi_i2d>
 8017558:	a37d      	add	r3, pc, #500	; (adr r3, 8017750 <_dtoa_r+0x318>)
 801755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801755e:	f7e9 f863 	bl	8000628 <__aeabi_dmul>
 8017562:	4602      	mov	r2, r0
 8017564:	460b      	mov	r3, r1
 8017566:	4630      	mov	r0, r6
 8017568:	4639      	mov	r1, r7
 801756a:	f7e8 fea7 	bl	80002bc <__adddf3>
 801756e:	4606      	mov	r6, r0
 8017570:	460f      	mov	r7, r1
 8017572:	f7e9 fb09 	bl	8000b88 <__aeabi_d2iz>
 8017576:	2200      	movs	r2, #0
 8017578:	4682      	mov	sl, r0
 801757a:	2300      	movs	r3, #0
 801757c:	4630      	mov	r0, r6
 801757e:	4639      	mov	r1, r7
 8017580:	f7e9 fac4 	bl	8000b0c <__aeabi_dcmplt>
 8017584:	b148      	cbz	r0, 801759a <_dtoa_r+0x162>
 8017586:	4650      	mov	r0, sl
 8017588:	f7e8 ffe4 	bl	8000554 <__aeabi_i2d>
 801758c:	4632      	mov	r2, r6
 801758e:	463b      	mov	r3, r7
 8017590:	f7e9 fab2 	bl	8000af8 <__aeabi_dcmpeq>
 8017594:	b908      	cbnz	r0, 801759a <_dtoa_r+0x162>
 8017596:	f10a 3aff 	add.w	sl, sl, #4294967295
 801759a:	f1ba 0f16 	cmp.w	sl, #22
 801759e:	d859      	bhi.n	8017654 <_dtoa_r+0x21c>
 80175a0:	4970      	ldr	r1, [pc, #448]	; (8017764 <_dtoa_r+0x32c>)
 80175a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80175a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175ae:	f7e9 facb 	bl	8000b48 <__aeabi_dcmpgt>
 80175b2:	2800      	cmp	r0, #0
 80175b4:	d050      	beq.n	8017658 <_dtoa_r+0x220>
 80175b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175ba:	2300      	movs	r3, #0
 80175bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80175be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80175c0:	1b5d      	subs	r5, r3, r5
 80175c2:	f1b5 0801 	subs.w	r8, r5, #1
 80175c6:	bf49      	itett	mi
 80175c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80175cc:	2300      	movpl	r3, #0
 80175ce:	9305      	strmi	r3, [sp, #20]
 80175d0:	f04f 0800 	movmi.w	r8, #0
 80175d4:	bf58      	it	pl
 80175d6:	9305      	strpl	r3, [sp, #20]
 80175d8:	f1ba 0f00 	cmp.w	sl, #0
 80175dc:	db3e      	blt.n	801765c <_dtoa_r+0x224>
 80175de:	2300      	movs	r3, #0
 80175e0:	44d0      	add	r8, sl
 80175e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80175e6:	9307      	str	r3, [sp, #28]
 80175e8:	9b06      	ldr	r3, [sp, #24]
 80175ea:	2b09      	cmp	r3, #9
 80175ec:	f200 8090 	bhi.w	8017710 <_dtoa_r+0x2d8>
 80175f0:	2b05      	cmp	r3, #5
 80175f2:	bfc4      	itt	gt
 80175f4:	3b04      	subgt	r3, #4
 80175f6:	9306      	strgt	r3, [sp, #24]
 80175f8:	9b06      	ldr	r3, [sp, #24]
 80175fa:	f1a3 0302 	sub.w	r3, r3, #2
 80175fe:	bfcc      	ite	gt
 8017600:	2500      	movgt	r5, #0
 8017602:	2501      	movle	r5, #1
 8017604:	2b03      	cmp	r3, #3
 8017606:	f200 808f 	bhi.w	8017728 <_dtoa_r+0x2f0>
 801760a:	e8df f003 	tbb	[pc, r3]
 801760e:	7f7d      	.short	0x7f7d
 8017610:	7131      	.short	0x7131
 8017612:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017616:	441d      	add	r5, r3
 8017618:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801761c:	2820      	cmp	r0, #32
 801761e:	dd13      	ble.n	8017648 <_dtoa_r+0x210>
 8017620:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017624:	9b00      	ldr	r3, [sp, #0]
 8017626:	fa08 f800 	lsl.w	r8, r8, r0
 801762a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801762e:	fa23 f000 	lsr.w	r0, r3, r0
 8017632:	ea48 0000 	orr.w	r0, r8, r0
 8017636:	f7e8 ff7d 	bl	8000534 <__aeabi_ui2d>
 801763a:	2301      	movs	r3, #1
 801763c:	4682      	mov	sl, r0
 801763e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017642:	3d01      	subs	r5, #1
 8017644:	9313      	str	r3, [sp, #76]	; 0x4c
 8017646:	e772      	b.n	801752e <_dtoa_r+0xf6>
 8017648:	9b00      	ldr	r3, [sp, #0]
 801764a:	f1c0 0020 	rsb	r0, r0, #32
 801764e:	fa03 f000 	lsl.w	r0, r3, r0
 8017652:	e7f0      	b.n	8017636 <_dtoa_r+0x1fe>
 8017654:	2301      	movs	r3, #1
 8017656:	e7b1      	b.n	80175bc <_dtoa_r+0x184>
 8017658:	900f      	str	r0, [sp, #60]	; 0x3c
 801765a:	e7b0      	b.n	80175be <_dtoa_r+0x186>
 801765c:	9b05      	ldr	r3, [sp, #20]
 801765e:	eba3 030a 	sub.w	r3, r3, sl
 8017662:	9305      	str	r3, [sp, #20]
 8017664:	f1ca 0300 	rsb	r3, sl, #0
 8017668:	9307      	str	r3, [sp, #28]
 801766a:	2300      	movs	r3, #0
 801766c:	930e      	str	r3, [sp, #56]	; 0x38
 801766e:	e7bb      	b.n	80175e8 <_dtoa_r+0x1b0>
 8017670:	2301      	movs	r3, #1
 8017672:	930a      	str	r3, [sp, #40]	; 0x28
 8017674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017676:	2b00      	cmp	r3, #0
 8017678:	dd59      	ble.n	801772e <_dtoa_r+0x2f6>
 801767a:	9302      	str	r3, [sp, #8]
 801767c:	4699      	mov	r9, r3
 801767e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017680:	2200      	movs	r2, #0
 8017682:	6072      	str	r2, [r6, #4]
 8017684:	2204      	movs	r2, #4
 8017686:	f102 0014 	add.w	r0, r2, #20
 801768a:	4298      	cmp	r0, r3
 801768c:	6871      	ldr	r1, [r6, #4]
 801768e:	d953      	bls.n	8017738 <_dtoa_r+0x300>
 8017690:	4620      	mov	r0, r4
 8017692:	f000 fff6 	bl	8018682 <_Balloc>
 8017696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017698:	6030      	str	r0, [r6, #0]
 801769a:	f1b9 0f0e 	cmp.w	r9, #14
 801769e:	f8d3 b000 	ldr.w	fp, [r3]
 80176a2:	f200 80e6 	bhi.w	8017872 <_dtoa_r+0x43a>
 80176a6:	2d00      	cmp	r5, #0
 80176a8:	f000 80e3 	beq.w	8017872 <_dtoa_r+0x43a>
 80176ac:	ed9d 7b00 	vldr	d7, [sp]
 80176b0:	f1ba 0f00 	cmp.w	sl, #0
 80176b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80176b8:	dd74      	ble.n	80177a4 <_dtoa_r+0x36c>
 80176ba:	4a2a      	ldr	r2, [pc, #168]	; (8017764 <_dtoa_r+0x32c>)
 80176bc:	f00a 030f 	and.w	r3, sl, #15
 80176c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80176c4:	ed93 7b00 	vldr	d7, [r3]
 80176c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80176cc:	06f0      	lsls	r0, r6, #27
 80176ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80176d2:	d565      	bpl.n	80177a0 <_dtoa_r+0x368>
 80176d4:	4b24      	ldr	r3, [pc, #144]	; (8017768 <_dtoa_r+0x330>)
 80176d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80176da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80176de:	f7e9 f8cd 	bl	800087c <__aeabi_ddiv>
 80176e2:	e9cd 0100 	strd	r0, r1, [sp]
 80176e6:	f006 060f 	and.w	r6, r6, #15
 80176ea:	2503      	movs	r5, #3
 80176ec:	4f1e      	ldr	r7, [pc, #120]	; (8017768 <_dtoa_r+0x330>)
 80176ee:	e04c      	b.n	801778a <_dtoa_r+0x352>
 80176f0:	2301      	movs	r3, #1
 80176f2:	930a      	str	r3, [sp, #40]	; 0x28
 80176f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176f6:	4453      	add	r3, sl
 80176f8:	f103 0901 	add.w	r9, r3, #1
 80176fc:	9302      	str	r3, [sp, #8]
 80176fe:	464b      	mov	r3, r9
 8017700:	2b01      	cmp	r3, #1
 8017702:	bfb8      	it	lt
 8017704:	2301      	movlt	r3, #1
 8017706:	e7ba      	b.n	801767e <_dtoa_r+0x246>
 8017708:	2300      	movs	r3, #0
 801770a:	e7b2      	b.n	8017672 <_dtoa_r+0x23a>
 801770c:	2300      	movs	r3, #0
 801770e:	e7f0      	b.n	80176f2 <_dtoa_r+0x2ba>
 8017710:	2501      	movs	r5, #1
 8017712:	2300      	movs	r3, #0
 8017714:	9306      	str	r3, [sp, #24]
 8017716:	950a      	str	r5, [sp, #40]	; 0x28
 8017718:	f04f 33ff 	mov.w	r3, #4294967295
 801771c:	9302      	str	r3, [sp, #8]
 801771e:	4699      	mov	r9, r3
 8017720:	2200      	movs	r2, #0
 8017722:	2312      	movs	r3, #18
 8017724:	920b      	str	r2, [sp, #44]	; 0x2c
 8017726:	e7aa      	b.n	801767e <_dtoa_r+0x246>
 8017728:	2301      	movs	r3, #1
 801772a:	930a      	str	r3, [sp, #40]	; 0x28
 801772c:	e7f4      	b.n	8017718 <_dtoa_r+0x2e0>
 801772e:	2301      	movs	r3, #1
 8017730:	9302      	str	r3, [sp, #8]
 8017732:	4699      	mov	r9, r3
 8017734:	461a      	mov	r2, r3
 8017736:	e7f5      	b.n	8017724 <_dtoa_r+0x2ec>
 8017738:	3101      	adds	r1, #1
 801773a:	6071      	str	r1, [r6, #4]
 801773c:	0052      	lsls	r2, r2, #1
 801773e:	e7a2      	b.n	8017686 <_dtoa_r+0x24e>
 8017740:	636f4361 	.word	0x636f4361
 8017744:	3fd287a7 	.word	0x3fd287a7
 8017748:	8b60c8b3 	.word	0x8b60c8b3
 801774c:	3fc68a28 	.word	0x3fc68a28
 8017750:	509f79fb 	.word	0x509f79fb
 8017754:	3fd34413 	.word	0x3fd34413
 8017758:	7ff00000 	.word	0x7ff00000
 801775c:	0801a424 	.word	0x0801a424
 8017760:	3ff80000 	.word	0x3ff80000
 8017764:	0801a328 	.word	0x0801a328
 8017768:	0801a300 	.word	0x0801a300
 801776c:	0801a2f1 	.word	0x0801a2f1
 8017770:	07f1      	lsls	r1, r6, #31
 8017772:	d508      	bpl.n	8017786 <_dtoa_r+0x34e>
 8017774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017778:	e9d7 2300 	ldrd	r2, r3, [r7]
 801777c:	f7e8 ff54 	bl	8000628 <__aeabi_dmul>
 8017780:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017784:	3501      	adds	r5, #1
 8017786:	1076      	asrs	r6, r6, #1
 8017788:	3708      	adds	r7, #8
 801778a:	2e00      	cmp	r6, #0
 801778c:	d1f0      	bne.n	8017770 <_dtoa_r+0x338>
 801778e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017796:	f7e9 f871 	bl	800087c <__aeabi_ddiv>
 801779a:	e9cd 0100 	strd	r0, r1, [sp]
 801779e:	e01a      	b.n	80177d6 <_dtoa_r+0x39e>
 80177a0:	2502      	movs	r5, #2
 80177a2:	e7a3      	b.n	80176ec <_dtoa_r+0x2b4>
 80177a4:	f000 80a0 	beq.w	80178e8 <_dtoa_r+0x4b0>
 80177a8:	f1ca 0600 	rsb	r6, sl, #0
 80177ac:	4b9f      	ldr	r3, [pc, #636]	; (8017a2c <_dtoa_r+0x5f4>)
 80177ae:	4fa0      	ldr	r7, [pc, #640]	; (8017a30 <_dtoa_r+0x5f8>)
 80177b0:	f006 020f 	and.w	r2, r6, #15
 80177b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80177b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80177c0:	f7e8 ff32 	bl	8000628 <__aeabi_dmul>
 80177c4:	e9cd 0100 	strd	r0, r1, [sp]
 80177c8:	1136      	asrs	r6, r6, #4
 80177ca:	2300      	movs	r3, #0
 80177cc:	2502      	movs	r5, #2
 80177ce:	2e00      	cmp	r6, #0
 80177d0:	d17f      	bne.n	80178d2 <_dtoa_r+0x49a>
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d1e1      	bne.n	801779a <_dtoa_r+0x362>
 80177d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177d8:	2b00      	cmp	r3, #0
 80177da:	f000 8087 	beq.w	80178ec <_dtoa_r+0x4b4>
 80177de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80177e2:	2200      	movs	r2, #0
 80177e4:	4b93      	ldr	r3, [pc, #588]	; (8017a34 <_dtoa_r+0x5fc>)
 80177e6:	4630      	mov	r0, r6
 80177e8:	4639      	mov	r1, r7
 80177ea:	f7e9 f98f 	bl	8000b0c <__aeabi_dcmplt>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	d07c      	beq.n	80178ec <_dtoa_r+0x4b4>
 80177f2:	f1b9 0f00 	cmp.w	r9, #0
 80177f6:	d079      	beq.n	80178ec <_dtoa_r+0x4b4>
 80177f8:	9b02      	ldr	r3, [sp, #8]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	dd35      	ble.n	801786a <_dtoa_r+0x432>
 80177fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017802:	9308      	str	r3, [sp, #32]
 8017804:	4639      	mov	r1, r7
 8017806:	2200      	movs	r2, #0
 8017808:	4b8b      	ldr	r3, [pc, #556]	; (8017a38 <_dtoa_r+0x600>)
 801780a:	4630      	mov	r0, r6
 801780c:	f7e8 ff0c 	bl	8000628 <__aeabi_dmul>
 8017810:	e9cd 0100 	strd	r0, r1, [sp]
 8017814:	9f02      	ldr	r7, [sp, #8]
 8017816:	3501      	adds	r5, #1
 8017818:	4628      	mov	r0, r5
 801781a:	f7e8 fe9b 	bl	8000554 <__aeabi_i2d>
 801781e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017822:	f7e8 ff01 	bl	8000628 <__aeabi_dmul>
 8017826:	2200      	movs	r2, #0
 8017828:	4b84      	ldr	r3, [pc, #528]	; (8017a3c <_dtoa_r+0x604>)
 801782a:	f7e8 fd47 	bl	80002bc <__adddf3>
 801782e:	4605      	mov	r5, r0
 8017830:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017834:	2f00      	cmp	r7, #0
 8017836:	d15d      	bne.n	80178f4 <_dtoa_r+0x4bc>
 8017838:	2200      	movs	r2, #0
 801783a:	4b81      	ldr	r3, [pc, #516]	; (8017a40 <_dtoa_r+0x608>)
 801783c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017840:	f7e8 fd3a 	bl	80002b8 <__aeabi_dsub>
 8017844:	462a      	mov	r2, r5
 8017846:	4633      	mov	r3, r6
 8017848:	e9cd 0100 	strd	r0, r1, [sp]
 801784c:	f7e9 f97c 	bl	8000b48 <__aeabi_dcmpgt>
 8017850:	2800      	cmp	r0, #0
 8017852:	f040 8288 	bne.w	8017d66 <_dtoa_r+0x92e>
 8017856:	462a      	mov	r2, r5
 8017858:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801785c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017860:	f7e9 f954 	bl	8000b0c <__aeabi_dcmplt>
 8017864:	2800      	cmp	r0, #0
 8017866:	f040 827c 	bne.w	8017d62 <_dtoa_r+0x92a>
 801786a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801786e:	e9cd 2300 	strd	r2, r3, [sp]
 8017872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017874:	2b00      	cmp	r3, #0
 8017876:	f2c0 8150 	blt.w	8017b1a <_dtoa_r+0x6e2>
 801787a:	f1ba 0f0e 	cmp.w	sl, #14
 801787e:	f300 814c 	bgt.w	8017b1a <_dtoa_r+0x6e2>
 8017882:	4b6a      	ldr	r3, [pc, #424]	; (8017a2c <_dtoa_r+0x5f4>)
 8017884:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017888:	ed93 7b00 	vldr	d7, [r3]
 801788c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801788e:	2b00      	cmp	r3, #0
 8017890:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017894:	f280 80d8 	bge.w	8017a48 <_dtoa_r+0x610>
 8017898:	f1b9 0f00 	cmp.w	r9, #0
 801789c:	f300 80d4 	bgt.w	8017a48 <_dtoa_r+0x610>
 80178a0:	f040 825e 	bne.w	8017d60 <_dtoa_r+0x928>
 80178a4:	2200      	movs	r2, #0
 80178a6:	4b66      	ldr	r3, [pc, #408]	; (8017a40 <_dtoa_r+0x608>)
 80178a8:	ec51 0b17 	vmov	r0, r1, d7
 80178ac:	f7e8 febc 	bl	8000628 <__aeabi_dmul>
 80178b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178b4:	f7e9 f93e 	bl	8000b34 <__aeabi_dcmpge>
 80178b8:	464f      	mov	r7, r9
 80178ba:	464e      	mov	r6, r9
 80178bc:	2800      	cmp	r0, #0
 80178be:	f040 8234 	bne.w	8017d2a <_dtoa_r+0x8f2>
 80178c2:	2331      	movs	r3, #49	; 0x31
 80178c4:	f10b 0501 	add.w	r5, fp, #1
 80178c8:	f88b 3000 	strb.w	r3, [fp]
 80178cc:	f10a 0a01 	add.w	sl, sl, #1
 80178d0:	e22f      	b.n	8017d32 <_dtoa_r+0x8fa>
 80178d2:	07f2      	lsls	r2, r6, #31
 80178d4:	d505      	bpl.n	80178e2 <_dtoa_r+0x4aa>
 80178d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80178da:	f7e8 fea5 	bl	8000628 <__aeabi_dmul>
 80178de:	3501      	adds	r5, #1
 80178e0:	2301      	movs	r3, #1
 80178e2:	1076      	asrs	r6, r6, #1
 80178e4:	3708      	adds	r7, #8
 80178e6:	e772      	b.n	80177ce <_dtoa_r+0x396>
 80178e8:	2502      	movs	r5, #2
 80178ea:	e774      	b.n	80177d6 <_dtoa_r+0x39e>
 80178ec:	f8cd a020 	str.w	sl, [sp, #32]
 80178f0:	464f      	mov	r7, r9
 80178f2:	e791      	b.n	8017818 <_dtoa_r+0x3e0>
 80178f4:	4b4d      	ldr	r3, [pc, #308]	; (8017a2c <_dtoa_r+0x5f4>)
 80178f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80178fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80178fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017900:	2b00      	cmp	r3, #0
 8017902:	d047      	beq.n	8017994 <_dtoa_r+0x55c>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	2000      	movs	r0, #0
 801790a:	494e      	ldr	r1, [pc, #312]	; (8017a44 <_dtoa_r+0x60c>)
 801790c:	f7e8 ffb6 	bl	800087c <__aeabi_ddiv>
 8017910:	462a      	mov	r2, r5
 8017912:	4633      	mov	r3, r6
 8017914:	f7e8 fcd0 	bl	80002b8 <__aeabi_dsub>
 8017918:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801791c:	465d      	mov	r5, fp
 801791e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017922:	f7e9 f931 	bl	8000b88 <__aeabi_d2iz>
 8017926:	4606      	mov	r6, r0
 8017928:	f7e8 fe14 	bl	8000554 <__aeabi_i2d>
 801792c:	4602      	mov	r2, r0
 801792e:	460b      	mov	r3, r1
 8017930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017934:	f7e8 fcc0 	bl	80002b8 <__aeabi_dsub>
 8017938:	3630      	adds	r6, #48	; 0x30
 801793a:	f805 6b01 	strb.w	r6, [r5], #1
 801793e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017942:	e9cd 0100 	strd	r0, r1, [sp]
 8017946:	f7e9 f8e1 	bl	8000b0c <__aeabi_dcmplt>
 801794a:	2800      	cmp	r0, #0
 801794c:	d163      	bne.n	8017a16 <_dtoa_r+0x5de>
 801794e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017952:	2000      	movs	r0, #0
 8017954:	4937      	ldr	r1, [pc, #220]	; (8017a34 <_dtoa_r+0x5fc>)
 8017956:	f7e8 fcaf 	bl	80002b8 <__aeabi_dsub>
 801795a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801795e:	f7e9 f8d5 	bl	8000b0c <__aeabi_dcmplt>
 8017962:	2800      	cmp	r0, #0
 8017964:	f040 80b7 	bne.w	8017ad6 <_dtoa_r+0x69e>
 8017968:	eba5 030b 	sub.w	r3, r5, fp
 801796c:	429f      	cmp	r7, r3
 801796e:	f77f af7c 	ble.w	801786a <_dtoa_r+0x432>
 8017972:	2200      	movs	r2, #0
 8017974:	4b30      	ldr	r3, [pc, #192]	; (8017a38 <_dtoa_r+0x600>)
 8017976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801797a:	f7e8 fe55 	bl	8000628 <__aeabi_dmul>
 801797e:	2200      	movs	r2, #0
 8017980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017984:	4b2c      	ldr	r3, [pc, #176]	; (8017a38 <_dtoa_r+0x600>)
 8017986:	e9dd 0100 	ldrd	r0, r1, [sp]
 801798a:	f7e8 fe4d 	bl	8000628 <__aeabi_dmul>
 801798e:	e9cd 0100 	strd	r0, r1, [sp]
 8017992:	e7c4      	b.n	801791e <_dtoa_r+0x4e6>
 8017994:	462a      	mov	r2, r5
 8017996:	4633      	mov	r3, r6
 8017998:	f7e8 fe46 	bl	8000628 <__aeabi_dmul>
 801799c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179a0:	eb0b 0507 	add.w	r5, fp, r7
 80179a4:	465e      	mov	r6, fp
 80179a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179aa:	f7e9 f8ed 	bl	8000b88 <__aeabi_d2iz>
 80179ae:	4607      	mov	r7, r0
 80179b0:	f7e8 fdd0 	bl	8000554 <__aeabi_i2d>
 80179b4:	3730      	adds	r7, #48	; 0x30
 80179b6:	4602      	mov	r2, r0
 80179b8:	460b      	mov	r3, r1
 80179ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179be:	f7e8 fc7b 	bl	80002b8 <__aeabi_dsub>
 80179c2:	f806 7b01 	strb.w	r7, [r6], #1
 80179c6:	42ae      	cmp	r6, r5
 80179c8:	e9cd 0100 	strd	r0, r1, [sp]
 80179cc:	f04f 0200 	mov.w	r2, #0
 80179d0:	d126      	bne.n	8017a20 <_dtoa_r+0x5e8>
 80179d2:	4b1c      	ldr	r3, [pc, #112]	; (8017a44 <_dtoa_r+0x60c>)
 80179d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80179d8:	f7e8 fc70 	bl	80002bc <__adddf3>
 80179dc:	4602      	mov	r2, r0
 80179de:	460b      	mov	r3, r1
 80179e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179e4:	f7e9 f8b0 	bl	8000b48 <__aeabi_dcmpgt>
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d174      	bne.n	8017ad6 <_dtoa_r+0x69e>
 80179ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179f0:	2000      	movs	r0, #0
 80179f2:	4914      	ldr	r1, [pc, #80]	; (8017a44 <_dtoa_r+0x60c>)
 80179f4:	f7e8 fc60 	bl	80002b8 <__aeabi_dsub>
 80179f8:	4602      	mov	r2, r0
 80179fa:	460b      	mov	r3, r1
 80179fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a00:	f7e9 f884 	bl	8000b0c <__aeabi_dcmplt>
 8017a04:	2800      	cmp	r0, #0
 8017a06:	f43f af30 	beq.w	801786a <_dtoa_r+0x432>
 8017a0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017a0e:	2b30      	cmp	r3, #48	; 0x30
 8017a10:	f105 32ff 	add.w	r2, r5, #4294967295
 8017a14:	d002      	beq.n	8017a1c <_dtoa_r+0x5e4>
 8017a16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017a1a:	e04a      	b.n	8017ab2 <_dtoa_r+0x67a>
 8017a1c:	4615      	mov	r5, r2
 8017a1e:	e7f4      	b.n	8017a0a <_dtoa_r+0x5d2>
 8017a20:	4b05      	ldr	r3, [pc, #20]	; (8017a38 <_dtoa_r+0x600>)
 8017a22:	f7e8 fe01 	bl	8000628 <__aeabi_dmul>
 8017a26:	e9cd 0100 	strd	r0, r1, [sp]
 8017a2a:	e7bc      	b.n	80179a6 <_dtoa_r+0x56e>
 8017a2c:	0801a328 	.word	0x0801a328
 8017a30:	0801a300 	.word	0x0801a300
 8017a34:	3ff00000 	.word	0x3ff00000
 8017a38:	40240000 	.word	0x40240000
 8017a3c:	401c0000 	.word	0x401c0000
 8017a40:	40140000 	.word	0x40140000
 8017a44:	3fe00000 	.word	0x3fe00000
 8017a48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a4c:	465d      	mov	r5, fp
 8017a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a52:	4630      	mov	r0, r6
 8017a54:	4639      	mov	r1, r7
 8017a56:	f7e8 ff11 	bl	800087c <__aeabi_ddiv>
 8017a5a:	f7e9 f895 	bl	8000b88 <__aeabi_d2iz>
 8017a5e:	4680      	mov	r8, r0
 8017a60:	f7e8 fd78 	bl	8000554 <__aeabi_i2d>
 8017a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a68:	f7e8 fdde 	bl	8000628 <__aeabi_dmul>
 8017a6c:	4602      	mov	r2, r0
 8017a6e:	460b      	mov	r3, r1
 8017a70:	4630      	mov	r0, r6
 8017a72:	4639      	mov	r1, r7
 8017a74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017a78:	f7e8 fc1e 	bl	80002b8 <__aeabi_dsub>
 8017a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8017a80:	eba5 060b 	sub.w	r6, r5, fp
 8017a84:	45b1      	cmp	r9, r6
 8017a86:	4602      	mov	r2, r0
 8017a88:	460b      	mov	r3, r1
 8017a8a:	d139      	bne.n	8017b00 <_dtoa_r+0x6c8>
 8017a8c:	f7e8 fc16 	bl	80002bc <__adddf3>
 8017a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a94:	4606      	mov	r6, r0
 8017a96:	460f      	mov	r7, r1
 8017a98:	f7e9 f856 	bl	8000b48 <__aeabi_dcmpgt>
 8017a9c:	b9c8      	cbnz	r0, 8017ad2 <_dtoa_r+0x69a>
 8017a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	4639      	mov	r1, r7
 8017aa6:	f7e9 f827 	bl	8000af8 <__aeabi_dcmpeq>
 8017aaa:	b110      	cbz	r0, 8017ab2 <_dtoa_r+0x67a>
 8017aac:	f018 0f01 	tst.w	r8, #1
 8017ab0:	d10f      	bne.n	8017ad2 <_dtoa_r+0x69a>
 8017ab2:	9904      	ldr	r1, [sp, #16]
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f000 fe18 	bl	80186ea <_Bfree>
 8017aba:	2300      	movs	r3, #0
 8017abc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017abe:	702b      	strb	r3, [r5, #0]
 8017ac0:	f10a 0301 	add.w	r3, sl, #1
 8017ac4:	6013      	str	r3, [r2, #0]
 8017ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f000 8241 	beq.w	8017f50 <_dtoa_r+0xb18>
 8017ace:	601d      	str	r5, [r3, #0]
 8017ad0:	e23e      	b.n	8017f50 <_dtoa_r+0xb18>
 8017ad2:	f8cd a020 	str.w	sl, [sp, #32]
 8017ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017ada:	2a39      	cmp	r2, #57	; 0x39
 8017adc:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ae0:	d108      	bne.n	8017af4 <_dtoa_r+0x6bc>
 8017ae2:	459b      	cmp	fp, r3
 8017ae4:	d10a      	bne.n	8017afc <_dtoa_r+0x6c4>
 8017ae6:	9b08      	ldr	r3, [sp, #32]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	9308      	str	r3, [sp, #32]
 8017aec:	2330      	movs	r3, #48	; 0x30
 8017aee:	f88b 3000 	strb.w	r3, [fp]
 8017af2:	465b      	mov	r3, fp
 8017af4:	781a      	ldrb	r2, [r3, #0]
 8017af6:	3201      	adds	r2, #1
 8017af8:	701a      	strb	r2, [r3, #0]
 8017afa:	e78c      	b.n	8017a16 <_dtoa_r+0x5de>
 8017afc:	461d      	mov	r5, r3
 8017afe:	e7ea      	b.n	8017ad6 <_dtoa_r+0x69e>
 8017b00:	2200      	movs	r2, #0
 8017b02:	4b9b      	ldr	r3, [pc, #620]	; (8017d70 <_dtoa_r+0x938>)
 8017b04:	f7e8 fd90 	bl	8000628 <__aeabi_dmul>
 8017b08:	2200      	movs	r2, #0
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	4606      	mov	r6, r0
 8017b0e:	460f      	mov	r7, r1
 8017b10:	f7e8 fff2 	bl	8000af8 <__aeabi_dcmpeq>
 8017b14:	2800      	cmp	r0, #0
 8017b16:	d09a      	beq.n	8017a4e <_dtoa_r+0x616>
 8017b18:	e7cb      	b.n	8017ab2 <_dtoa_r+0x67a>
 8017b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b1c:	2a00      	cmp	r2, #0
 8017b1e:	f000 808b 	beq.w	8017c38 <_dtoa_r+0x800>
 8017b22:	9a06      	ldr	r2, [sp, #24]
 8017b24:	2a01      	cmp	r2, #1
 8017b26:	dc6e      	bgt.n	8017c06 <_dtoa_r+0x7ce>
 8017b28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b2a:	2a00      	cmp	r2, #0
 8017b2c:	d067      	beq.n	8017bfe <_dtoa_r+0x7c6>
 8017b2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017b32:	9f07      	ldr	r7, [sp, #28]
 8017b34:	9d05      	ldr	r5, [sp, #20]
 8017b36:	9a05      	ldr	r2, [sp, #20]
 8017b38:	2101      	movs	r1, #1
 8017b3a:	441a      	add	r2, r3
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	9205      	str	r2, [sp, #20]
 8017b40:	4498      	add	r8, r3
 8017b42:	f000 feb0 	bl	80188a6 <__i2b>
 8017b46:	4606      	mov	r6, r0
 8017b48:	2d00      	cmp	r5, #0
 8017b4a:	dd0c      	ble.n	8017b66 <_dtoa_r+0x72e>
 8017b4c:	f1b8 0f00 	cmp.w	r8, #0
 8017b50:	dd09      	ble.n	8017b66 <_dtoa_r+0x72e>
 8017b52:	4545      	cmp	r5, r8
 8017b54:	9a05      	ldr	r2, [sp, #20]
 8017b56:	462b      	mov	r3, r5
 8017b58:	bfa8      	it	ge
 8017b5a:	4643      	movge	r3, r8
 8017b5c:	1ad2      	subs	r2, r2, r3
 8017b5e:	9205      	str	r2, [sp, #20]
 8017b60:	1aed      	subs	r5, r5, r3
 8017b62:	eba8 0803 	sub.w	r8, r8, r3
 8017b66:	9b07      	ldr	r3, [sp, #28]
 8017b68:	b1eb      	cbz	r3, 8017ba6 <_dtoa_r+0x76e>
 8017b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d067      	beq.n	8017c40 <_dtoa_r+0x808>
 8017b70:	b18f      	cbz	r7, 8017b96 <_dtoa_r+0x75e>
 8017b72:	4631      	mov	r1, r6
 8017b74:	463a      	mov	r2, r7
 8017b76:	4620      	mov	r0, r4
 8017b78:	f000 ff34 	bl	80189e4 <__pow5mult>
 8017b7c:	9a04      	ldr	r2, [sp, #16]
 8017b7e:	4601      	mov	r1, r0
 8017b80:	4606      	mov	r6, r0
 8017b82:	4620      	mov	r0, r4
 8017b84:	f000 fe98 	bl	80188b8 <__multiply>
 8017b88:	9904      	ldr	r1, [sp, #16]
 8017b8a:	9008      	str	r0, [sp, #32]
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	f000 fdac 	bl	80186ea <_Bfree>
 8017b92:	9b08      	ldr	r3, [sp, #32]
 8017b94:	9304      	str	r3, [sp, #16]
 8017b96:	9b07      	ldr	r3, [sp, #28]
 8017b98:	1bda      	subs	r2, r3, r7
 8017b9a:	d004      	beq.n	8017ba6 <_dtoa_r+0x76e>
 8017b9c:	9904      	ldr	r1, [sp, #16]
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f000 ff20 	bl	80189e4 <__pow5mult>
 8017ba4:	9004      	str	r0, [sp, #16]
 8017ba6:	2101      	movs	r1, #1
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f000 fe7c 	bl	80188a6 <__i2b>
 8017bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bb0:	4607      	mov	r7, r0
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f000 81d0 	beq.w	8017f58 <_dtoa_r+0xb20>
 8017bb8:	461a      	mov	r2, r3
 8017bba:	4601      	mov	r1, r0
 8017bbc:	4620      	mov	r0, r4
 8017bbe:	f000 ff11 	bl	80189e4 <__pow5mult>
 8017bc2:	9b06      	ldr	r3, [sp, #24]
 8017bc4:	2b01      	cmp	r3, #1
 8017bc6:	4607      	mov	r7, r0
 8017bc8:	dc40      	bgt.n	8017c4c <_dtoa_r+0x814>
 8017bca:	9b00      	ldr	r3, [sp, #0]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d139      	bne.n	8017c44 <_dtoa_r+0x80c>
 8017bd0:	9b01      	ldr	r3, [sp, #4]
 8017bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d136      	bne.n	8017c48 <_dtoa_r+0x810>
 8017bda:	9b01      	ldr	r3, [sp, #4]
 8017bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017be0:	0d1b      	lsrs	r3, r3, #20
 8017be2:	051b      	lsls	r3, r3, #20
 8017be4:	b12b      	cbz	r3, 8017bf2 <_dtoa_r+0x7ba>
 8017be6:	9b05      	ldr	r3, [sp, #20]
 8017be8:	3301      	adds	r3, #1
 8017bea:	9305      	str	r3, [sp, #20]
 8017bec:	f108 0801 	add.w	r8, r8, #1
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	9307      	str	r3, [sp, #28]
 8017bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d12a      	bne.n	8017c50 <_dtoa_r+0x818>
 8017bfa:	2001      	movs	r0, #1
 8017bfc:	e030      	b.n	8017c60 <_dtoa_r+0x828>
 8017bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017c04:	e795      	b.n	8017b32 <_dtoa_r+0x6fa>
 8017c06:	9b07      	ldr	r3, [sp, #28]
 8017c08:	f109 37ff 	add.w	r7, r9, #4294967295
 8017c0c:	42bb      	cmp	r3, r7
 8017c0e:	bfbf      	itttt	lt
 8017c10:	9b07      	ldrlt	r3, [sp, #28]
 8017c12:	9707      	strlt	r7, [sp, #28]
 8017c14:	1afa      	sublt	r2, r7, r3
 8017c16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017c18:	bfbb      	ittet	lt
 8017c1a:	189b      	addlt	r3, r3, r2
 8017c1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017c1e:	1bdf      	subge	r7, r3, r7
 8017c20:	2700      	movlt	r7, #0
 8017c22:	f1b9 0f00 	cmp.w	r9, #0
 8017c26:	bfb5      	itete	lt
 8017c28:	9b05      	ldrlt	r3, [sp, #20]
 8017c2a:	9d05      	ldrge	r5, [sp, #20]
 8017c2c:	eba3 0509 	sublt.w	r5, r3, r9
 8017c30:	464b      	movge	r3, r9
 8017c32:	bfb8      	it	lt
 8017c34:	2300      	movlt	r3, #0
 8017c36:	e77e      	b.n	8017b36 <_dtoa_r+0x6fe>
 8017c38:	9f07      	ldr	r7, [sp, #28]
 8017c3a:	9d05      	ldr	r5, [sp, #20]
 8017c3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017c3e:	e783      	b.n	8017b48 <_dtoa_r+0x710>
 8017c40:	9a07      	ldr	r2, [sp, #28]
 8017c42:	e7ab      	b.n	8017b9c <_dtoa_r+0x764>
 8017c44:	2300      	movs	r3, #0
 8017c46:	e7d4      	b.n	8017bf2 <_dtoa_r+0x7ba>
 8017c48:	9b00      	ldr	r3, [sp, #0]
 8017c4a:	e7d2      	b.n	8017bf2 <_dtoa_r+0x7ba>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	9307      	str	r3, [sp, #28]
 8017c50:	693b      	ldr	r3, [r7, #16]
 8017c52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017c56:	6918      	ldr	r0, [r3, #16]
 8017c58:	f000 fdd7 	bl	801880a <__hi0bits>
 8017c5c:	f1c0 0020 	rsb	r0, r0, #32
 8017c60:	4440      	add	r0, r8
 8017c62:	f010 001f 	ands.w	r0, r0, #31
 8017c66:	d047      	beq.n	8017cf8 <_dtoa_r+0x8c0>
 8017c68:	f1c0 0320 	rsb	r3, r0, #32
 8017c6c:	2b04      	cmp	r3, #4
 8017c6e:	dd3b      	ble.n	8017ce8 <_dtoa_r+0x8b0>
 8017c70:	9b05      	ldr	r3, [sp, #20]
 8017c72:	f1c0 001c 	rsb	r0, r0, #28
 8017c76:	4403      	add	r3, r0
 8017c78:	9305      	str	r3, [sp, #20]
 8017c7a:	4405      	add	r5, r0
 8017c7c:	4480      	add	r8, r0
 8017c7e:	9b05      	ldr	r3, [sp, #20]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	dd05      	ble.n	8017c90 <_dtoa_r+0x858>
 8017c84:	461a      	mov	r2, r3
 8017c86:	9904      	ldr	r1, [sp, #16]
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f000 fef9 	bl	8018a80 <__lshift>
 8017c8e:	9004      	str	r0, [sp, #16]
 8017c90:	f1b8 0f00 	cmp.w	r8, #0
 8017c94:	dd05      	ble.n	8017ca2 <_dtoa_r+0x86a>
 8017c96:	4639      	mov	r1, r7
 8017c98:	4642      	mov	r2, r8
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f000 fef0 	bl	8018a80 <__lshift>
 8017ca0:	4607      	mov	r7, r0
 8017ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ca4:	b353      	cbz	r3, 8017cfc <_dtoa_r+0x8c4>
 8017ca6:	4639      	mov	r1, r7
 8017ca8:	9804      	ldr	r0, [sp, #16]
 8017caa:	f000 ff3d 	bl	8018b28 <__mcmp>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	da24      	bge.n	8017cfc <_dtoa_r+0x8c4>
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	220a      	movs	r2, #10
 8017cb6:	9904      	ldr	r1, [sp, #16]
 8017cb8:	4620      	mov	r0, r4
 8017cba:	f000 fd2d 	bl	8018718 <__multadd>
 8017cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cc0:	9004      	str	r0, [sp, #16]
 8017cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	f000 814d 	beq.w	8017f66 <_dtoa_r+0xb2e>
 8017ccc:	2300      	movs	r3, #0
 8017cce:	4631      	mov	r1, r6
 8017cd0:	220a      	movs	r2, #10
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f000 fd20 	bl	8018718 <__multadd>
 8017cd8:	9b02      	ldr	r3, [sp, #8]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	4606      	mov	r6, r0
 8017cde:	dc4f      	bgt.n	8017d80 <_dtoa_r+0x948>
 8017ce0:	9b06      	ldr	r3, [sp, #24]
 8017ce2:	2b02      	cmp	r3, #2
 8017ce4:	dd4c      	ble.n	8017d80 <_dtoa_r+0x948>
 8017ce6:	e011      	b.n	8017d0c <_dtoa_r+0x8d4>
 8017ce8:	d0c9      	beq.n	8017c7e <_dtoa_r+0x846>
 8017cea:	9a05      	ldr	r2, [sp, #20]
 8017cec:	331c      	adds	r3, #28
 8017cee:	441a      	add	r2, r3
 8017cf0:	9205      	str	r2, [sp, #20]
 8017cf2:	441d      	add	r5, r3
 8017cf4:	4498      	add	r8, r3
 8017cf6:	e7c2      	b.n	8017c7e <_dtoa_r+0x846>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	e7f6      	b.n	8017cea <_dtoa_r+0x8b2>
 8017cfc:	f1b9 0f00 	cmp.w	r9, #0
 8017d00:	dc38      	bgt.n	8017d74 <_dtoa_r+0x93c>
 8017d02:	9b06      	ldr	r3, [sp, #24]
 8017d04:	2b02      	cmp	r3, #2
 8017d06:	dd35      	ble.n	8017d74 <_dtoa_r+0x93c>
 8017d08:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d0c:	9b02      	ldr	r3, [sp, #8]
 8017d0e:	b963      	cbnz	r3, 8017d2a <_dtoa_r+0x8f2>
 8017d10:	4639      	mov	r1, r7
 8017d12:	2205      	movs	r2, #5
 8017d14:	4620      	mov	r0, r4
 8017d16:	f000 fcff 	bl	8018718 <__multadd>
 8017d1a:	4601      	mov	r1, r0
 8017d1c:	4607      	mov	r7, r0
 8017d1e:	9804      	ldr	r0, [sp, #16]
 8017d20:	f000 ff02 	bl	8018b28 <__mcmp>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	f73f adcc 	bgt.w	80178c2 <_dtoa_r+0x48a>
 8017d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d2c:	465d      	mov	r5, fp
 8017d2e:	ea6f 0a03 	mvn.w	sl, r3
 8017d32:	f04f 0900 	mov.w	r9, #0
 8017d36:	4639      	mov	r1, r7
 8017d38:	4620      	mov	r0, r4
 8017d3a:	f000 fcd6 	bl	80186ea <_Bfree>
 8017d3e:	2e00      	cmp	r6, #0
 8017d40:	f43f aeb7 	beq.w	8017ab2 <_dtoa_r+0x67a>
 8017d44:	f1b9 0f00 	cmp.w	r9, #0
 8017d48:	d005      	beq.n	8017d56 <_dtoa_r+0x91e>
 8017d4a:	45b1      	cmp	r9, r6
 8017d4c:	d003      	beq.n	8017d56 <_dtoa_r+0x91e>
 8017d4e:	4649      	mov	r1, r9
 8017d50:	4620      	mov	r0, r4
 8017d52:	f000 fcca 	bl	80186ea <_Bfree>
 8017d56:	4631      	mov	r1, r6
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f000 fcc6 	bl	80186ea <_Bfree>
 8017d5e:	e6a8      	b.n	8017ab2 <_dtoa_r+0x67a>
 8017d60:	2700      	movs	r7, #0
 8017d62:	463e      	mov	r6, r7
 8017d64:	e7e1      	b.n	8017d2a <_dtoa_r+0x8f2>
 8017d66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017d6a:	463e      	mov	r6, r7
 8017d6c:	e5a9      	b.n	80178c2 <_dtoa_r+0x48a>
 8017d6e:	bf00      	nop
 8017d70:	40240000 	.word	0x40240000
 8017d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d76:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f000 80fa 	beq.w	8017f74 <_dtoa_r+0xb3c>
 8017d80:	2d00      	cmp	r5, #0
 8017d82:	dd05      	ble.n	8017d90 <_dtoa_r+0x958>
 8017d84:	4631      	mov	r1, r6
 8017d86:	462a      	mov	r2, r5
 8017d88:	4620      	mov	r0, r4
 8017d8a:	f000 fe79 	bl	8018a80 <__lshift>
 8017d8e:	4606      	mov	r6, r0
 8017d90:	9b07      	ldr	r3, [sp, #28]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d04c      	beq.n	8017e30 <_dtoa_r+0x9f8>
 8017d96:	6871      	ldr	r1, [r6, #4]
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f000 fc72 	bl	8018682 <_Balloc>
 8017d9e:	6932      	ldr	r2, [r6, #16]
 8017da0:	3202      	adds	r2, #2
 8017da2:	4605      	mov	r5, r0
 8017da4:	0092      	lsls	r2, r2, #2
 8017da6:	f106 010c 	add.w	r1, r6, #12
 8017daa:	300c      	adds	r0, #12
 8017dac:	f000 fc5e 	bl	801866c <memcpy>
 8017db0:	2201      	movs	r2, #1
 8017db2:	4629      	mov	r1, r5
 8017db4:	4620      	mov	r0, r4
 8017db6:	f000 fe63 	bl	8018a80 <__lshift>
 8017dba:	9b00      	ldr	r3, [sp, #0]
 8017dbc:	f8cd b014 	str.w	fp, [sp, #20]
 8017dc0:	f003 0301 	and.w	r3, r3, #1
 8017dc4:	46b1      	mov	r9, r6
 8017dc6:	9307      	str	r3, [sp, #28]
 8017dc8:	4606      	mov	r6, r0
 8017dca:	4639      	mov	r1, r7
 8017dcc:	9804      	ldr	r0, [sp, #16]
 8017dce:	f7ff faa5 	bl	801731c <quorem>
 8017dd2:	4649      	mov	r1, r9
 8017dd4:	4605      	mov	r5, r0
 8017dd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017dda:	9804      	ldr	r0, [sp, #16]
 8017ddc:	f000 fea4 	bl	8018b28 <__mcmp>
 8017de0:	4632      	mov	r2, r6
 8017de2:	9000      	str	r0, [sp, #0]
 8017de4:	4639      	mov	r1, r7
 8017de6:	4620      	mov	r0, r4
 8017de8:	f000 feb8 	bl	8018b5c <__mdiff>
 8017dec:	68c3      	ldr	r3, [r0, #12]
 8017dee:	4602      	mov	r2, r0
 8017df0:	bb03      	cbnz	r3, 8017e34 <_dtoa_r+0x9fc>
 8017df2:	4601      	mov	r1, r0
 8017df4:	9008      	str	r0, [sp, #32]
 8017df6:	9804      	ldr	r0, [sp, #16]
 8017df8:	f000 fe96 	bl	8018b28 <__mcmp>
 8017dfc:	9a08      	ldr	r2, [sp, #32]
 8017dfe:	4603      	mov	r3, r0
 8017e00:	4611      	mov	r1, r2
 8017e02:	4620      	mov	r0, r4
 8017e04:	9308      	str	r3, [sp, #32]
 8017e06:	f000 fc70 	bl	80186ea <_Bfree>
 8017e0a:	9b08      	ldr	r3, [sp, #32]
 8017e0c:	b9a3      	cbnz	r3, 8017e38 <_dtoa_r+0xa00>
 8017e0e:	9a06      	ldr	r2, [sp, #24]
 8017e10:	b992      	cbnz	r2, 8017e38 <_dtoa_r+0xa00>
 8017e12:	9a07      	ldr	r2, [sp, #28]
 8017e14:	b982      	cbnz	r2, 8017e38 <_dtoa_r+0xa00>
 8017e16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e1a:	d029      	beq.n	8017e70 <_dtoa_r+0xa38>
 8017e1c:	9b00      	ldr	r3, [sp, #0]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	dd01      	ble.n	8017e26 <_dtoa_r+0x9ee>
 8017e22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017e26:	9b05      	ldr	r3, [sp, #20]
 8017e28:	1c5d      	adds	r5, r3, #1
 8017e2a:	f883 8000 	strb.w	r8, [r3]
 8017e2e:	e782      	b.n	8017d36 <_dtoa_r+0x8fe>
 8017e30:	4630      	mov	r0, r6
 8017e32:	e7c2      	b.n	8017dba <_dtoa_r+0x982>
 8017e34:	2301      	movs	r3, #1
 8017e36:	e7e3      	b.n	8017e00 <_dtoa_r+0x9c8>
 8017e38:	9a00      	ldr	r2, [sp, #0]
 8017e3a:	2a00      	cmp	r2, #0
 8017e3c:	db04      	blt.n	8017e48 <_dtoa_r+0xa10>
 8017e3e:	d125      	bne.n	8017e8c <_dtoa_r+0xa54>
 8017e40:	9a06      	ldr	r2, [sp, #24]
 8017e42:	bb1a      	cbnz	r2, 8017e8c <_dtoa_r+0xa54>
 8017e44:	9a07      	ldr	r2, [sp, #28]
 8017e46:	bb0a      	cbnz	r2, 8017e8c <_dtoa_r+0xa54>
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	ddec      	ble.n	8017e26 <_dtoa_r+0x9ee>
 8017e4c:	2201      	movs	r2, #1
 8017e4e:	9904      	ldr	r1, [sp, #16]
 8017e50:	4620      	mov	r0, r4
 8017e52:	f000 fe15 	bl	8018a80 <__lshift>
 8017e56:	4639      	mov	r1, r7
 8017e58:	9004      	str	r0, [sp, #16]
 8017e5a:	f000 fe65 	bl	8018b28 <__mcmp>
 8017e5e:	2800      	cmp	r0, #0
 8017e60:	dc03      	bgt.n	8017e6a <_dtoa_r+0xa32>
 8017e62:	d1e0      	bne.n	8017e26 <_dtoa_r+0x9ee>
 8017e64:	f018 0f01 	tst.w	r8, #1
 8017e68:	d0dd      	beq.n	8017e26 <_dtoa_r+0x9ee>
 8017e6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e6e:	d1d8      	bne.n	8017e22 <_dtoa_r+0x9ea>
 8017e70:	9b05      	ldr	r3, [sp, #20]
 8017e72:	9a05      	ldr	r2, [sp, #20]
 8017e74:	1c5d      	adds	r5, r3, #1
 8017e76:	2339      	movs	r3, #57	; 0x39
 8017e78:	7013      	strb	r3, [r2, #0]
 8017e7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e7e:	2b39      	cmp	r3, #57	; 0x39
 8017e80:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e84:	d04f      	beq.n	8017f26 <_dtoa_r+0xaee>
 8017e86:	3301      	adds	r3, #1
 8017e88:	7013      	strb	r3, [r2, #0]
 8017e8a:	e754      	b.n	8017d36 <_dtoa_r+0x8fe>
 8017e8c:	9a05      	ldr	r2, [sp, #20]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	f102 0501 	add.w	r5, r2, #1
 8017e94:	dd06      	ble.n	8017ea4 <_dtoa_r+0xa6c>
 8017e96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e9a:	d0e9      	beq.n	8017e70 <_dtoa_r+0xa38>
 8017e9c:	f108 0801 	add.w	r8, r8, #1
 8017ea0:	9b05      	ldr	r3, [sp, #20]
 8017ea2:	e7c2      	b.n	8017e2a <_dtoa_r+0x9f2>
 8017ea4:	9a02      	ldr	r2, [sp, #8]
 8017ea6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017eaa:	eba5 030b 	sub.w	r3, r5, fp
 8017eae:	4293      	cmp	r3, r2
 8017eb0:	d021      	beq.n	8017ef6 <_dtoa_r+0xabe>
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	220a      	movs	r2, #10
 8017eb6:	9904      	ldr	r1, [sp, #16]
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f000 fc2d 	bl	8018718 <__multadd>
 8017ebe:	45b1      	cmp	r9, r6
 8017ec0:	9004      	str	r0, [sp, #16]
 8017ec2:	f04f 0300 	mov.w	r3, #0
 8017ec6:	f04f 020a 	mov.w	r2, #10
 8017eca:	4649      	mov	r1, r9
 8017ecc:	4620      	mov	r0, r4
 8017ece:	d105      	bne.n	8017edc <_dtoa_r+0xaa4>
 8017ed0:	f000 fc22 	bl	8018718 <__multadd>
 8017ed4:	4681      	mov	r9, r0
 8017ed6:	4606      	mov	r6, r0
 8017ed8:	9505      	str	r5, [sp, #20]
 8017eda:	e776      	b.n	8017dca <_dtoa_r+0x992>
 8017edc:	f000 fc1c 	bl	8018718 <__multadd>
 8017ee0:	4631      	mov	r1, r6
 8017ee2:	4681      	mov	r9, r0
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	220a      	movs	r2, #10
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f000 fc15 	bl	8018718 <__multadd>
 8017eee:	4606      	mov	r6, r0
 8017ef0:	e7f2      	b.n	8017ed8 <_dtoa_r+0xaa0>
 8017ef2:	f04f 0900 	mov.w	r9, #0
 8017ef6:	2201      	movs	r2, #1
 8017ef8:	9904      	ldr	r1, [sp, #16]
 8017efa:	4620      	mov	r0, r4
 8017efc:	f000 fdc0 	bl	8018a80 <__lshift>
 8017f00:	4639      	mov	r1, r7
 8017f02:	9004      	str	r0, [sp, #16]
 8017f04:	f000 fe10 	bl	8018b28 <__mcmp>
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	dcb6      	bgt.n	8017e7a <_dtoa_r+0xa42>
 8017f0c:	d102      	bne.n	8017f14 <_dtoa_r+0xadc>
 8017f0e:	f018 0f01 	tst.w	r8, #1
 8017f12:	d1b2      	bne.n	8017e7a <_dtoa_r+0xa42>
 8017f14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f18:	2b30      	cmp	r3, #48	; 0x30
 8017f1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f1e:	f47f af0a 	bne.w	8017d36 <_dtoa_r+0x8fe>
 8017f22:	4615      	mov	r5, r2
 8017f24:	e7f6      	b.n	8017f14 <_dtoa_r+0xadc>
 8017f26:	4593      	cmp	fp, r2
 8017f28:	d105      	bne.n	8017f36 <_dtoa_r+0xafe>
 8017f2a:	2331      	movs	r3, #49	; 0x31
 8017f2c:	f10a 0a01 	add.w	sl, sl, #1
 8017f30:	f88b 3000 	strb.w	r3, [fp]
 8017f34:	e6ff      	b.n	8017d36 <_dtoa_r+0x8fe>
 8017f36:	4615      	mov	r5, r2
 8017f38:	e79f      	b.n	8017e7a <_dtoa_r+0xa42>
 8017f3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017fa0 <_dtoa_r+0xb68>
 8017f3e:	e007      	b.n	8017f50 <_dtoa_r+0xb18>
 8017f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017fa4 <_dtoa_r+0xb6c>
 8017f46:	b11b      	cbz	r3, 8017f50 <_dtoa_r+0xb18>
 8017f48:	f10b 0308 	add.w	r3, fp, #8
 8017f4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f4e:	6013      	str	r3, [r2, #0]
 8017f50:	4658      	mov	r0, fp
 8017f52:	b017      	add	sp, #92	; 0x5c
 8017f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f58:	9b06      	ldr	r3, [sp, #24]
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	f77f ae35 	ble.w	8017bca <_dtoa_r+0x792>
 8017f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f62:	9307      	str	r3, [sp, #28]
 8017f64:	e649      	b.n	8017bfa <_dtoa_r+0x7c2>
 8017f66:	9b02      	ldr	r3, [sp, #8]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	dc03      	bgt.n	8017f74 <_dtoa_r+0xb3c>
 8017f6c:	9b06      	ldr	r3, [sp, #24]
 8017f6e:	2b02      	cmp	r3, #2
 8017f70:	f73f aecc 	bgt.w	8017d0c <_dtoa_r+0x8d4>
 8017f74:	465d      	mov	r5, fp
 8017f76:	4639      	mov	r1, r7
 8017f78:	9804      	ldr	r0, [sp, #16]
 8017f7a:	f7ff f9cf 	bl	801731c <quorem>
 8017f7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017f82:	f805 8b01 	strb.w	r8, [r5], #1
 8017f86:	9a02      	ldr	r2, [sp, #8]
 8017f88:	eba5 030b 	sub.w	r3, r5, fp
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	ddb0      	ble.n	8017ef2 <_dtoa_r+0xaba>
 8017f90:	2300      	movs	r3, #0
 8017f92:	220a      	movs	r2, #10
 8017f94:	9904      	ldr	r1, [sp, #16]
 8017f96:	4620      	mov	r0, r4
 8017f98:	f000 fbbe 	bl	8018718 <__multadd>
 8017f9c:	9004      	str	r0, [sp, #16]
 8017f9e:	e7ea      	b.n	8017f76 <_dtoa_r+0xb3e>
 8017fa0:	0801a423 	.word	0x0801a423
 8017fa4:	0801a2e8 	.word	0x0801a2e8

08017fa8 <rshift>:
 8017fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017faa:	6906      	ldr	r6, [r0, #16]
 8017fac:	114b      	asrs	r3, r1, #5
 8017fae:	429e      	cmp	r6, r3
 8017fb0:	f100 0414 	add.w	r4, r0, #20
 8017fb4:	dd30      	ble.n	8018018 <rshift+0x70>
 8017fb6:	f011 011f 	ands.w	r1, r1, #31
 8017fba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017fbe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017fc2:	d108      	bne.n	8017fd6 <rshift+0x2e>
 8017fc4:	4621      	mov	r1, r4
 8017fc6:	42b2      	cmp	r2, r6
 8017fc8:	460b      	mov	r3, r1
 8017fca:	d211      	bcs.n	8017ff0 <rshift+0x48>
 8017fcc:	f852 3b04 	ldr.w	r3, [r2], #4
 8017fd0:	f841 3b04 	str.w	r3, [r1], #4
 8017fd4:	e7f7      	b.n	8017fc6 <rshift+0x1e>
 8017fd6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017fda:	f1c1 0c20 	rsb	ip, r1, #32
 8017fde:	40cd      	lsrs	r5, r1
 8017fe0:	3204      	adds	r2, #4
 8017fe2:	4623      	mov	r3, r4
 8017fe4:	42b2      	cmp	r2, r6
 8017fe6:	4617      	mov	r7, r2
 8017fe8:	d30c      	bcc.n	8018004 <rshift+0x5c>
 8017fea:	601d      	str	r5, [r3, #0]
 8017fec:	b105      	cbz	r5, 8017ff0 <rshift+0x48>
 8017fee:	3304      	adds	r3, #4
 8017ff0:	1b1a      	subs	r2, r3, r4
 8017ff2:	42a3      	cmp	r3, r4
 8017ff4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ff8:	bf08      	it	eq
 8017ffa:	2300      	moveq	r3, #0
 8017ffc:	6102      	str	r2, [r0, #16]
 8017ffe:	bf08      	it	eq
 8018000:	6143      	streq	r3, [r0, #20]
 8018002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018004:	683f      	ldr	r7, [r7, #0]
 8018006:	fa07 f70c 	lsl.w	r7, r7, ip
 801800a:	433d      	orrs	r5, r7
 801800c:	f843 5b04 	str.w	r5, [r3], #4
 8018010:	f852 5b04 	ldr.w	r5, [r2], #4
 8018014:	40cd      	lsrs	r5, r1
 8018016:	e7e5      	b.n	8017fe4 <rshift+0x3c>
 8018018:	4623      	mov	r3, r4
 801801a:	e7e9      	b.n	8017ff0 <rshift+0x48>

0801801c <__hexdig_fun>:
 801801c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018020:	2b09      	cmp	r3, #9
 8018022:	d802      	bhi.n	801802a <__hexdig_fun+0xe>
 8018024:	3820      	subs	r0, #32
 8018026:	b2c0      	uxtb	r0, r0
 8018028:	4770      	bx	lr
 801802a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801802e:	2b05      	cmp	r3, #5
 8018030:	d801      	bhi.n	8018036 <__hexdig_fun+0x1a>
 8018032:	3847      	subs	r0, #71	; 0x47
 8018034:	e7f7      	b.n	8018026 <__hexdig_fun+0xa>
 8018036:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801803a:	2b05      	cmp	r3, #5
 801803c:	d801      	bhi.n	8018042 <__hexdig_fun+0x26>
 801803e:	3827      	subs	r0, #39	; 0x27
 8018040:	e7f1      	b.n	8018026 <__hexdig_fun+0xa>
 8018042:	2000      	movs	r0, #0
 8018044:	4770      	bx	lr

08018046 <__gethex>:
 8018046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801804a:	b08b      	sub	sp, #44	; 0x2c
 801804c:	468a      	mov	sl, r1
 801804e:	9002      	str	r0, [sp, #8]
 8018050:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018052:	9306      	str	r3, [sp, #24]
 8018054:	4690      	mov	r8, r2
 8018056:	f000 fadf 	bl	8018618 <__localeconv_l>
 801805a:	6803      	ldr	r3, [r0, #0]
 801805c:	9303      	str	r3, [sp, #12]
 801805e:	4618      	mov	r0, r3
 8018060:	f7e8 f8ce 	bl	8000200 <strlen>
 8018064:	9b03      	ldr	r3, [sp, #12]
 8018066:	9001      	str	r0, [sp, #4]
 8018068:	4403      	add	r3, r0
 801806a:	f04f 0b00 	mov.w	fp, #0
 801806e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018072:	9307      	str	r3, [sp, #28]
 8018074:	f8da 3000 	ldr.w	r3, [sl]
 8018078:	3302      	adds	r3, #2
 801807a:	461f      	mov	r7, r3
 801807c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018080:	2830      	cmp	r0, #48	; 0x30
 8018082:	d06c      	beq.n	801815e <__gethex+0x118>
 8018084:	f7ff ffca 	bl	801801c <__hexdig_fun>
 8018088:	4604      	mov	r4, r0
 801808a:	2800      	cmp	r0, #0
 801808c:	d16a      	bne.n	8018164 <__gethex+0x11e>
 801808e:	9a01      	ldr	r2, [sp, #4]
 8018090:	9903      	ldr	r1, [sp, #12]
 8018092:	4638      	mov	r0, r7
 8018094:	f001 fc40 	bl	8019918 <strncmp>
 8018098:	2800      	cmp	r0, #0
 801809a:	d166      	bne.n	801816a <__gethex+0x124>
 801809c:	9b01      	ldr	r3, [sp, #4]
 801809e:	5cf8      	ldrb	r0, [r7, r3]
 80180a0:	18fe      	adds	r6, r7, r3
 80180a2:	f7ff ffbb 	bl	801801c <__hexdig_fun>
 80180a6:	2800      	cmp	r0, #0
 80180a8:	d062      	beq.n	8018170 <__gethex+0x12a>
 80180aa:	4633      	mov	r3, r6
 80180ac:	7818      	ldrb	r0, [r3, #0]
 80180ae:	2830      	cmp	r0, #48	; 0x30
 80180b0:	461f      	mov	r7, r3
 80180b2:	f103 0301 	add.w	r3, r3, #1
 80180b6:	d0f9      	beq.n	80180ac <__gethex+0x66>
 80180b8:	f7ff ffb0 	bl	801801c <__hexdig_fun>
 80180bc:	fab0 f580 	clz	r5, r0
 80180c0:	096d      	lsrs	r5, r5, #5
 80180c2:	4634      	mov	r4, r6
 80180c4:	f04f 0b01 	mov.w	fp, #1
 80180c8:	463a      	mov	r2, r7
 80180ca:	4616      	mov	r6, r2
 80180cc:	3201      	adds	r2, #1
 80180ce:	7830      	ldrb	r0, [r6, #0]
 80180d0:	f7ff ffa4 	bl	801801c <__hexdig_fun>
 80180d4:	2800      	cmp	r0, #0
 80180d6:	d1f8      	bne.n	80180ca <__gethex+0x84>
 80180d8:	9a01      	ldr	r2, [sp, #4]
 80180da:	9903      	ldr	r1, [sp, #12]
 80180dc:	4630      	mov	r0, r6
 80180de:	f001 fc1b 	bl	8019918 <strncmp>
 80180e2:	b950      	cbnz	r0, 80180fa <__gethex+0xb4>
 80180e4:	b954      	cbnz	r4, 80180fc <__gethex+0xb6>
 80180e6:	9b01      	ldr	r3, [sp, #4]
 80180e8:	18f4      	adds	r4, r6, r3
 80180ea:	4622      	mov	r2, r4
 80180ec:	4616      	mov	r6, r2
 80180ee:	3201      	adds	r2, #1
 80180f0:	7830      	ldrb	r0, [r6, #0]
 80180f2:	f7ff ff93 	bl	801801c <__hexdig_fun>
 80180f6:	2800      	cmp	r0, #0
 80180f8:	d1f8      	bne.n	80180ec <__gethex+0xa6>
 80180fa:	b10c      	cbz	r4, 8018100 <__gethex+0xba>
 80180fc:	1ba4      	subs	r4, r4, r6
 80180fe:	00a4      	lsls	r4, r4, #2
 8018100:	7833      	ldrb	r3, [r6, #0]
 8018102:	2b50      	cmp	r3, #80	; 0x50
 8018104:	d001      	beq.n	801810a <__gethex+0xc4>
 8018106:	2b70      	cmp	r3, #112	; 0x70
 8018108:	d140      	bne.n	801818c <__gethex+0x146>
 801810a:	7873      	ldrb	r3, [r6, #1]
 801810c:	2b2b      	cmp	r3, #43	; 0x2b
 801810e:	d031      	beq.n	8018174 <__gethex+0x12e>
 8018110:	2b2d      	cmp	r3, #45	; 0x2d
 8018112:	d033      	beq.n	801817c <__gethex+0x136>
 8018114:	1c71      	adds	r1, r6, #1
 8018116:	f04f 0900 	mov.w	r9, #0
 801811a:	7808      	ldrb	r0, [r1, #0]
 801811c:	f7ff ff7e 	bl	801801c <__hexdig_fun>
 8018120:	1e43      	subs	r3, r0, #1
 8018122:	b2db      	uxtb	r3, r3
 8018124:	2b18      	cmp	r3, #24
 8018126:	d831      	bhi.n	801818c <__gethex+0x146>
 8018128:	f1a0 0210 	sub.w	r2, r0, #16
 801812c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018130:	f7ff ff74 	bl	801801c <__hexdig_fun>
 8018134:	1e43      	subs	r3, r0, #1
 8018136:	b2db      	uxtb	r3, r3
 8018138:	2b18      	cmp	r3, #24
 801813a:	d922      	bls.n	8018182 <__gethex+0x13c>
 801813c:	f1b9 0f00 	cmp.w	r9, #0
 8018140:	d000      	beq.n	8018144 <__gethex+0xfe>
 8018142:	4252      	negs	r2, r2
 8018144:	4414      	add	r4, r2
 8018146:	f8ca 1000 	str.w	r1, [sl]
 801814a:	b30d      	cbz	r5, 8018190 <__gethex+0x14a>
 801814c:	f1bb 0f00 	cmp.w	fp, #0
 8018150:	bf0c      	ite	eq
 8018152:	2706      	moveq	r7, #6
 8018154:	2700      	movne	r7, #0
 8018156:	4638      	mov	r0, r7
 8018158:	b00b      	add	sp, #44	; 0x2c
 801815a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815e:	f10b 0b01 	add.w	fp, fp, #1
 8018162:	e78a      	b.n	801807a <__gethex+0x34>
 8018164:	2500      	movs	r5, #0
 8018166:	462c      	mov	r4, r5
 8018168:	e7ae      	b.n	80180c8 <__gethex+0x82>
 801816a:	463e      	mov	r6, r7
 801816c:	2501      	movs	r5, #1
 801816e:	e7c7      	b.n	8018100 <__gethex+0xba>
 8018170:	4604      	mov	r4, r0
 8018172:	e7fb      	b.n	801816c <__gethex+0x126>
 8018174:	f04f 0900 	mov.w	r9, #0
 8018178:	1cb1      	adds	r1, r6, #2
 801817a:	e7ce      	b.n	801811a <__gethex+0xd4>
 801817c:	f04f 0901 	mov.w	r9, #1
 8018180:	e7fa      	b.n	8018178 <__gethex+0x132>
 8018182:	230a      	movs	r3, #10
 8018184:	fb03 0202 	mla	r2, r3, r2, r0
 8018188:	3a10      	subs	r2, #16
 801818a:	e7cf      	b.n	801812c <__gethex+0xe6>
 801818c:	4631      	mov	r1, r6
 801818e:	e7da      	b.n	8018146 <__gethex+0x100>
 8018190:	1bf3      	subs	r3, r6, r7
 8018192:	3b01      	subs	r3, #1
 8018194:	4629      	mov	r1, r5
 8018196:	2b07      	cmp	r3, #7
 8018198:	dc49      	bgt.n	801822e <__gethex+0x1e8>
 801819a:	9802      	ldr	r0, [sp, #8]
 801819c:	f000 fa71 	bl	8018682 <_Balloc>
 80181a0:	9b01      	ldr	r3, [sp, #4]
 80181a2:	f100 0914 	add.w	r9, r0, #20
 80181a6:	f04f 0b00 	mov.w	fp, #0
 80181aa:	f1c3 0301 	rsb	r3, r3, #1
 80181ae:	4605      	mov	r5, r0
 80181b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80181b4:	46da      	mov	sl, fp
 80181b6:	9308      	str	r3, [sp, #32]
 80181b8:	42b7      	cmp	r7, r6
 80181ba:	d33b      	bcc.n	8018234 <__gethex+0x1ee>
 80181bc:	9804      	ldr	r0, [sp, #16]
 80181be:	f840 ab04 	str.w	sl, [r0], #4
 80181c2:	eba0 0009 	sub.w	r0, r0, r9
 80181c6:	1080      	asrs	r0, r0, #2
 80181c8:	6128      	str	r0, [r5, #16]
 80181ca:	0147      	lsls	r7, r0, #5
 80181cc:	4650      	mov	r0, sl
 80181ce:	f000 fb1c 	bl	801880a <__hi0bits>
 80181d2:	f8d8 6000 	ldr.w	r6, [r8]
 80181d6:	1a3f      	subs	r7, r7, r0
 80181d8:	42b7      	cmp	r7, r6
 80181da:	dd64      	ble.n	80182a6 <__gethex+0x260>
 80181dc:	1bbf      	subs	r7, r7, r6
 80181de:	4639      	mov	r1, r7
 80181e0:	4628      	mov	r0, r5
 80181e2:	f000 fe2b 	bl	8018e3c <__any_on>
 80181e6:	4682      	mov	sl, r0
 80181e8:	b178      	cbz	r0, 801820a <__gethex+0x1c4>
 80181ea:	1e7b      	subs	r3, r7, #1
 80181ec:	1159      	asrs	r1, r3, #5
 80181ee:	f003 021f 	and.w	r2, r3, #31
 80181f2:	f04f 0a01 	mov.w	sl, #1
 80181f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80181fa:	fa0a f202 	lsl.w	r2, sl, r2
 80181fe:	420a      	tst	r2, r1
 8018200:	d003      	beq.n	801820a <__gethex+0x1c4>
 8018202:	4553      	cmp	r3, sl
 8018204:	dc46      	bgt.n	8018294 <__gethex+0x24e>
 8018206:	f04f 0a02 	mov.w	sl, #2
 801820a:	4639      	mov	r1, r7
 801820c:	4628      	mov	r0, r5
 801820e:	f7ff fecb 	bl	8017fa8 <rshift>
 8018212:	443c      	add	r4, r7
 8018214:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018218:	42a3      	cmp	r3, r4
 801821a:	da52      	bge.n	80182c2 <__gethex+0x27c>
 801821c:	4629      	mov	r1, r5
 801821e:	9802      	ldr	r0, [sp, #8]
 8018220:	f000 fa63 	bl	80186ea <_Bfree>
 8018224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018226:	2300      	movs	r3, #0
 8018228:	6013      	str	r3, [r2, #0]
 801822a:	27a3      	movs	r7, #163	; 0xa3
 801822c:	e793      	b.n	8018156 <__gethex+0x110>
 801822e:	3101      	adds	r1, #1
 8018230:	105b      	asrs	r3, r3, #1
 8018232:	e7b0      	b.n	8018196 <__gethex+0x150>
 8018234:	1e73      	subs	r3, r6, #1
 8018236:	9305      	str	r3, [sp, #20]
 8018238:	9a07      	ldr	r2, [sp, #28]
 801823a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801823e:	4293      	cmp	r3, r2
 8018240:	d018      	beq.n	8018274 <__gethex+0x22e>
 8018242:	f1bb 0f20 	cmp.w	fp, #32
 8018246:	d107      	bne.n	8018258 <__gethex+0x212>
 8018248:	9b04      	ldr	r3, [sp, #16]
 801824a:	f8c3 a000 	str.w	sl, [r3]
 801824e:	3304      	adds	r3, #4
 8018250:	f04f 0a00 	mov.w	sl, #0
 8018254:	9304      	str	r3, [sp, #16]
 8018256:	46d3      	mov	fp, sl
 8018258:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801825c:	f7ff fede 	bl	801801c <__hexdig_fun>
 8018260:	f000 000f 	and.w	r0, r0, #15
 8018264:	fa00 f00b 	lsl.w	r0, r0, fp
 8018268:	ea4a 0a00 	orr.w	sl, sl, r0
 801826c:	f10b 0b04 	add.w	fp, fp, #4
 8018270:	9b05      	ldr	r3, [sp, #20]
 8018272:	e00d      	b.n	8018290 <__gethex+0x24a>
 8018274:	9b05      	ldr	r3, [sp, #20]
 8018276:	9a08      	ldr	r2, [sp, #32]
 8018278:	4413      	add	r3, r2
 801827a:	42bb      	cmp	r3, r7
 801827c:	d3e1      	bcc.n	8018242 <__gethex+0x1fc>
 801827e:	4618      	mov	r0, r3
 8018280:	9a01      	ldr	r2, [sp, #4]
 8018282:	9903      	ldr	r1, [sp, #12]
 8018284:	9309      	str	r3, [sp, #36]	; 0x24
 8018286:	f001 fb47 	bl	8019918 <strncmp>
 801828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801828c:	2800      	cmp	r0, #0
 801828e:	d1d8      	bne.n	8018242 <__gethex+0x1fc>
 8018290:	461e      	mov	r6, r3
 8018292:	e791      	b.n	80181b8 <__gethex+0x172>
 8018294:	1eb9      	subs	r1, r7, #2
 8018296:	4628      	mov	r0, r5
 8018298:	f000 fdd0 	bl	8018e3c <__any_on>
 801829c:	2800      	cmp	r0, #0
 801829e:	d0b2      	beq.n	8018206 <__gethex+0x1c0>
 80182a0:	f04f 0a03 	mov.w	sl, #3
 80182a4:	e7b1      	b.n	801820a <__gethex+0x1c4>
 80182a6:	da09      	bge.n	80182bc <__gethex+0x276>
 80182a8:	1bf7      	subs	r7, r6, r7
 80182aa:	4629      	mov	r1, r5
 80182ac:	463a      	mov	r2, r7
 80182ae:	9802      	ldr	r0, [sp, #8]
 80182b0:	f000 fbe6 	bl	8018a80 <__lshift>
 80182b4:	1be4      	subs	r4, r4, r7
 80182b6:	4605      	mov	r5, r0
 80182b8:	f100 0914 	add.w	r9, r0, #20
 80182bc:	f04f 0a00 	mov.w	sl, #0
 80182c0:	e7a8      	b.n	8018214 <__gethex+0x1ce>
 80182c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80182c6:	42a0      	cmp	r0, r4
 80182c8:	dd6a      	ble.n	80183a0 <__gethex+0x35a>
 80182ca:	1b04      	subs	r4, r0, r4
 80182cc:	42a6      	cmp	r6, r4
 80182ce:	dc2e      	bgt.n	801832e <__gethex+0x2e8>
 80182d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80182d4:	2b02      	cmp	r3, #2
 80182d6:	d022      	beq.n	801831e <__gethex+0x2d8>
 80182d8:	2b03      	cmp	r3, #3
 80182da:	d024      	beq.n	8018326 <__gethex+0x2e0>
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d115      	bne.n	801830c <__gethex+0x2c6>
 80182e0:	42a6      	cmp	r6, r4
 80182e2:	d113      	bne.n	801830c <__gethex+0x2c6>
 80182e4:	2e01      	cmp	r6, #1
 80182e6:	dc0b      	bgt.n	8018300 <__gethex+0x2ba>
 80182e8:	9a06      	ldr	r2, [sp, #24]
 80182ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80182ee:	6013      	str	r3, [r2, #0]
 80182f0:	2301      	movs	r3, #1
 80182f2:	612b      	str	r3, [r5, #16]
 80182f4:	f8c9 3000 	str.w	r3, [r9]
 80182f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80182fa:	2762      	movs	r7, #98	; 0x62
 80182fc:	601d      	str	r5, [r3, #0]
 80182fe:	e72a      	b.n	8018156 <__gethex+0x110>
 8018300:	1e71      	subs	r1, r6, #1
 8018302:	4628      	mov	r0, r5
 8018304:	f000 fd9a 	bl	8018e3c <__any_on>
 8018308:	2800      	cmp	r0, #0
 801830a:	d1ed      	bne.n	80182e8 <__gethex+0x2a2>
 801830c:	4629      	mov	r1, r5
 801830e:	9802      	ldr	r0, [sp, #8]
 8018310:	f000 f9eb 	bl	80186ea <_Bfree>
 8018314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018316:	2300      	movs	r3, #0
 8018318:	6013      	str	r3, [r2, #0]
 801831a:	2750      	movs	r7, #80	; 0x50
 801831c:	e71b      	b.n	8018156 <__gethex+0x110>
 801831e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018320:	2b00      	cmp	r3, #0
 8018322:	d0e1      	beq.n	80182e8 <__gethex+0x2a2>
 8018324:	e7f2      	b.n	801830c <__gethex+0x2c6>
 8018326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018328:	2b00      	cmp	r3, #0
 801832a:	d1dd      	bne.n	80182e8 <__gethex+0x2a2>
 801832c:	e7ee      	b.n	801830c <__gethex+0x2c6>
 801832e:	1e67      	subs	r7, r4, #1
 8018330:	f1ba 0f00 	cmp.w	sl, #0
 8018334:	d131      	bne.n	801839a <__gethex+0x354>
 8018336:	b127      	cbz	r7, 8018342 <__gethex+0x2fc>
 8018338:	4639      	mov	r1, r7
 801833a:	4628      	mov	r0, r5
 801833c:	f000 fd7e 	bl	8018e3c <__any_on>
 8018340:	4682      	mov	sl, r0
 8018342:	117a      	asrs	r2, r7, #5
 8018344:	2301      	movs	r3, #1
 8018346:	f007 071f 	and.w	r7, r7, #31
 801834a:	fa03 f707 	lsl.w	r7, r3, r7
 801834e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018352:	4621      	mov	r1, r4
 8018354:	421f      	tst	r7, r3
 8018356:	4628      	mov	r0, r5
 8018358:	bf18      	it	ne
 801835a:	f04a 0a02 	orrne.w	sl, sl, #2
 801835e:	1b36      	subs	r6, r6, r4
 8018360:	f7ff fe22 	bl	8017fa8 <rshift>
 8018364:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018368:	2702      	movs	r7, #2
 801836a:	f1ba 0f00 	cmp.w	sl, #0
 801836e:	d048      	beq.n	8018402 <__gethex+0x3bc>
 8018370:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018374:	2b02      	cmp	r3, #2
 8018376:	d015      	beq.n	80183a4 <__gethex+0x35e>
 8018378:	2b03      	cmp	r3, #3
 801837a:	d017      	beq.n	80183ac <__gethex+0x366>
 801837c:	2b01      	cmp	r3, #1
 801837e:	d109      	bne.n	8018394 <__gethex+0x34e>
 8018380:	f01a 0f02 	tst.w	sl, #2
 8018384:	d006      	beq.n	8018394 <__gethex+0x34e>
 8018386:	f8d9 3000 	ldr.w	r3, [r9]
 801838a:	ea4a 0a03 	orr.w	sl, sl, r3
 801838e:	f01a 0f01 	tst.w	sl, #1
 8018392:	d10e      	bne.n	80183b2 <__gethex+0x36c>
 8018394:	f047 0710 	orr.w	r7, r7, #16
 8018398:	e033      	b.n	8018402 <__gethex+0x3bc>
 801839a:	f04f 0a01 	mov.w	sl, #1
 801839e:	e7d0      	b.n	8018342 <__gethex+0x2fc>
 80183a0:	2701      	movs	r7, #1
 80183a2:	e7e2      	b.n	801836a <__gethex+0x324>
 80183a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183a6:	f1c3 0301 	rsb	r3, r3, #1
 80183aa:	9315      	str	r3, [sp, #84]	; 0x54
 80183ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d0f0      	beq.n	8018394 <__gethex+0x34e>
 80183b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80183b6:	f105 0314 	add.w	r3, r5, #20
 80183ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80183be:	eb03 010a 	add.w	r1, r3, sl
 80183c2:	f04f 0c00 	mov.w	ip, #0
 80183c6:	4618      	mov	r0, r3
 80183c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80183cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80183d0:	d01c      	beq.n	801840c <__gethex+0x3c6>
 80183d2:	3201      	adds	r2, #1
 80183d4:	6002      	str	r2, [r0, #0]
 80183d6:	2f02      	cmp	r7, #2
 80183d8:	f105 0314 	add.w	r3, r5, #20
 80183dc:	d138      	bne.n	8018450 <__gethex+0x40a>
 80183de:	f8d8 2000 	ldr.w	r2, [r8]
 80183e2:	3a01      	subs	r2, #1
 80183e4:	42b2      	cmp	r2, r6
 80183e6:	d10a      	bne.n	80183fe <__gethex+0x3b8>
 80183e8:	1171      	asrs	r1, r6, #5
 80183ea:	2201      	movs	r2, #1
 80183ec:	f006 061f 	and.w	r6, r6, #31
 80183f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183f4:	fa02 f606 	lsl.w	r6, r2, r6
 80183f8:	421e      	tst	r6, r3
 80183fa:	bf18      	it	ne
 80183fc:	4617      	movne	r7, r2
 80183fe:	f047 0720 	orr.w	r7, r7, #32
 8018402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018404:	601d      	str	r5, [r3, #0]
 8018406:	9b06      	ldr	r3, [sp, #24]
 8018408:	601c      	str	r4, [r3, #0]
 801840a:	e6a4      	b.n	8018156 <__gethex+0x110>
 801840c:	4299      	cmp	r1, r3
 801840e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018412:	d8d8      	bhi.n	80183c6 <__gethex+0x380>
 8018414:	68ab      	ldr	r3, [r5, #8]
 8018416:	4599      	cmp	r9, r3
 8018418:	db12      	blt.n	8018440 <__gethex+0x3fa>
 801841a:	6869      	ldr	r1, [r5, #4]
 801841c:	9802      	ldr	r0, [sp, #8]
 801841e:	3101      	adds	r1, #1
 8018420:	f000 f92f 	bl	8018682 <_Balloc>
 8018424:	692a      	ldr	r2, [r5, #16]
 8018426:	3202      	adds	r2, #2
 8018428:	f105 010c 	add.w	r1, r5, #12
 801842c:	4683      	mov	fp, r0
 801842e:	0092      	lsls	r2, r2, #2
 8018430:	300c      	adds	r0, #12
 8018432:	f000 f91b 	bl	801866c <memcpy>
 8018436:	4629      	mov	r1, r5
 8018438:	9802      	ldr	r0, [sp, #8]
 801843a:	f000 f956 	bl	80186ea <_Bfree>
 801843e:	465d      	mov	r5, fp
 8018440:	692b      	ldr	r3, [r5, #16]
 8018442:	1c5a      	adds	r2, r3, #1
 8018444:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018448:	612a      	str	r2, [r5, #16]
 801844a:	2201      	movs	r2, #1
 801844c:	615a      	str	r2, [r3, #20]
 801844e:	e7c2      	b.n	80183d6 <__gethex+0x390>
 8018450:	692a      	ldr	r2, [r5, #16]
 8018452:	454a      	cmp	r2, r9
 8018454:	dd0b      	ble.n	801846e <__gethex+0x428>
 8018456:	2101      	movs	r1, #1
 8018458:	4628      	mov	r0, r5
 801845a:	f7ff fda5 	bl	8017fa8 <rshift>
 801845e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018462:	3401      	adds	r4, #1
 8018464:	42a3      	cmp	r3, r4
 8018466:	f6ff aed9 	blt.w	801821c <__gethex+0x1d6>
 801846a:	2701      	movs	r7, #1
 801846c:	e7c7      	b.n	80183fe <__gethex+0x3b8>
 801846e:	f016 061f 	ands.w	r6, r6, #31
 8018472:	d0fa      	beq.n	801846a <__gethex+0x424>
 8018474:	449a      	add	sl, r3
 8018476:	f1c6 0620 	rsb	r6, r6, #32
 801847a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801847e:	f000 f9c4 	bl	801880a <__hi0bits>
 8018482:	42b0      	cmp	r0, r6
 8018484:	dbe7      	blt.n	8018456 <__gethex+0x410>
 8018486:	e7f0      	b.n	801846a <__gethex+0x424>

08018488 <L_shift>:
 8018488:	f1c2 0208 	rsb	r2, r2, #8
 801848c:	0092      	lsls	r2, r2, #2
 801848e:	b570      	push	{r4, r5, r6, lr}
 8018490:	f1c2 0620 	rsb	r6, r2, #32
 8018494:	6843      	ldr	r3, [r0, #4]
 8018496:	6804      	ldr	r4, [r0, #0]
 8018498:	fa03 f506 	lsl.w	r5, r3, r6
 801849c:	432c      	orrs	r4, r5
 801849e:	40d3      	lsrs	r3, r2
 80184a0:	6004      	str	r4, [r0, #0]
 80184a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80184a6:	4288      	cmp	r0, r1
 80184a8:	d3f4      	bcc.n	8018494 <L_shift+0xc>
 80184aa:	bd70      	pop	{r4, r5, r6, pc}

080184ac <__match>:
 80184ac:	b530      	push	{r4, r5, lr}
 80184ae:	6803      	ldr	r3, [r0, #0]
 80184b0:	3301      	adds	r3, #1
 80184b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184b6:	b914      	cbnz	r4, 80184be <__match+0x12>
 80184b8:	6003      	str	r3, [r0, #0]
 80184ba:	2001      	movs	r0, #1
 80184bc:	bd30      	pop	{r4, r5, pc}
 80184be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80184c6:	2d19      	cmp	r5, #25
 80184c8:	bf98      	it	ls
 80184ca:	3220      	addls	r2, #32
 80184cc:	42a2      	cmp	r2, r4
 80184ce:	d0f0      	beq.n	80184b2 <__match+0x6>
 80184d0:	2000      	movs	r0, #0
 80184d2:	e7f3      	b.n	80184bc <__match+0x10>

080184d4 <__hexnan>:
 80184d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d8:	680b      	ldr	r3, [r1, #0]
 80184da:	6801      	ldr	r1, [r0, #0]
 80184dc:	115f      	asrs	r7, r3, #5
 80184de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80184e2:	f013 031f 	ands.w	r3, r3, #31
 80184e6:	b087      	sub	sp, #28
 80184e8:	bf18      	it	ne
 80184ea:	3704      	addne	r7, #4
 80184ec:	2500      	movs	r5, #0
 80184ee:	1f3e      	subs	r6, r7, #4
 80184f0:	4682      	mov	sl, r0
 80184f2:	4690      	mov	r8, r2
 80184f4:	9301      	str	r3, [sp, #4]
 80184f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80184fa:	46b1      	mov	r9, r6
 80184fc:	4634      	mov	r4, r6
 80184fe:	9502      	str	r5, [sp, #8]
 8018500:	46ab      	mov	fp, r5
 8018502:	784a      	ldrb	r2, [r1, #1]
 8018504:	1c4b      	adds	r3, r1, #1
 8018506:	9303      	str	r3, [sp, #12]
 8018508:	b342      	cbz	r2, 801855c <__hexnan+0x88>
 801850a:	4610      	mov	r0, r2
 801850c:	9105      	str	r1, [sp, #20]
 801850e:	9204      	str	r2, [sp, #16]
 8018510:	f7ff fd84 	bl	801801c <__hexdig_fun>
 8018514:	2800      	cmp	r0, #0
 8018516:	d143      	bne.n	80185a0 <__hexnan+0xcc>
 8018518:	9a04      	ldr	r2, [sp, #16]
 801851a:	9905      	ldr	r1, [sp, #20]
 801851c:	2a20      	cmp	r2, #32
 801851e:	d818      	bhi.n	8018552 <__hexnan+0x7e>
 8018520:	9b02      	ldr	r3, [sp, #8]
 8018522:	459b      	cmp	fp, r3
 8018524:	dd13      	ble.n	801854e <__hexnan+0x7a>
 8018526:	454c      	cmp	r4, r9
 8018528:	d206      	bcs.n	8018538 <__hexnan+0x64>
 801852a:	2d07      	cmp	r5, #7
 801852c:	dc04      	bgt.n	8018538 <__hexnan+0x64>
 801852e:	462a      	mov	r2, r5
 8018530:	4649      	mov	r1, r9
 8018532:	4620      	mov	r0, r4
 8018534:	f7ff ffa8 	bl	8018488 <L_shift>
 8018538:	4544      	cmp	r4, r8
 801853a:	d944      	bls.n	80185c6 <__hexnan+0xf2>
 801853c:	2300      	movs	r3, #0
 801853e:	f1a4 0904 	sub.w	r9, r4, #4
 8018542:	f844 3c04 	str.w	r3, [r4, #-4]
 8018546:	f8cd b008 	str.w	fp, [sp, #8]
 801854a:	464c      	mov	r4, r9
 801854c:	461d      	mov	r5, r3
 801854e:	9903      	ldr	r1, [sp, #12]
 8018550:	e7d7      	b.n	8018502 <__hexnan+0x2e>
 8018552:	2a29      	cmp	r2, #41	; 0x29
 8018554:	d14a      	bne.n	80185ec <__hexnan+0x118>
 8018556:	3102      	adds	r1, #2
 8018558:	f8ca 1000 	str.w	r1, [sl]
 801855c:	f1bb 0f00 	cmp.w	fp, #0
 8018560:	d044      	beq.n	80185ec <__hexnan+0x118>
 8018562:	454c      	cmp	r4, r9
 8018564:	d206      	bcs.n	8018574 <__hexnan+0xa0>
 8018566:	2d07      	cmp	r5, #7
 8018568:	dc04      	bgt.n	8018574 <__hexnan+0xa0>
 801856a:	462a      	mov	r2, r5
 801856c:	4649      	mov	r1, r9
 801856e:	4620      	mov	r0, r4
 8018570:	f7ff ff8a 	bl	8018488 <L_shift>
 8018574:	4544      	cmp	r4, r8
 8018576:	d928      	bls.n	80185ca <__hexnan+0xf6>
 8018578:	4643      	mov	r3, r8
 801857a:	f854 2b04 	ldr.w	r2, [r4], #4
 801857e:	f843 2b04 	str.w	r2, [r3], #4
 8018582:	42a6      	cmp	r6, r4
 8018584:	d2f9      	bcs.n	801857a <__hexnan+0xa6>
 8018586:	2200      	movs	r2, #0
 8018588:	f843 2b04 	str.w	r2, [r3], #4
 801858c:	429e      	cmp	r6, r3
 801858e:	d2fb      	bcs.n	8018588 <__hexnan+0xb4>
 8018590:	6833      	ldr	r3, [r6, #0]
 8018592:	b91b      	cbnz	r3, 801859c <__hexnan+0xc8>
 8018594:	4546      	cmp	r6, r8
 8018596:	d127      	bne.n	80185e8 <__hexnan+0x114>
 8018598:	2301      	movs	r3, #1
 801859a:	6033      	str	r3, [r6, #0]
 801859c:	2005      	movs	r0, #5
 801859e:	e026      	b.n	80185ee <__hexnan+0x11a>
 80185a0:	3501      	adds	r5, #1
 80185a2:	2d08      	cmp	r5, #8
 80185a4:	f10b 0b01 	add.w	fp, fp, #1
 80185a8:	dd06      	ble.n	80185b8 <__hexnan+0xe4>
 80185aa:	4544      	cmp	r4, r8
 80185ac:	d9cf      	bls.n	801854e <__hexnan+0x7a>
 80185ae:	2300      	movs	r3, #0
 80185b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80185b4:	2501      	movs	r5, #1
 80185b6:	3c04      	subs	r4, #4
 80185b8:	6822      	ldr	r2, [r4, #0]
 80185ba:	f000 000f 	and.w	r0, r0, #15
 80185be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80185c2:	6020      	str	r0, [r4, #0]
 80185c4:	e7c3      	b.n	801854e <__hexnan+0x7a>
 80185c6:	2508      	movs	r5, #8
 80185c8:	e7c1      	b.n	801854e <__hexnan+0x7a>
 80185ca:	9b01      	ldr	r3, [sp, #4]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d0df      	beq.n	8018590 <__hexnan+0xbc>
 80185d0:	f04f 32ff 	mov.w	r2, #4294967295
 80185d4:	f1c3 0320 	rsb	r3, r3, #32
 80185d8:	fa22 f303 	lsr.w	r3, r2, r3
 80185dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80185e0:	401a      	ands	r2, r3
 80185e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80185e6:	e7d3      	b.n	8018590 <__hexnan+0xbc>
 80185e8:	3e04      	subs	r6, #4
 80185ea:	e7d1      	b.n	8018590 <__hexnan+0xbc>
 80185ec:	2004      	movs	r0, #4
 80185ee:	b007      	add	sp, #28
 80185f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185f4 <__locale_ctype_ptr_l>:
 80185f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80185f8:	4770      	bx	lr
	...

080185fc <__locale_ctype_ptr>:
 80185fc:	4b04      	ldr	r3, [pc, #16]	; (8018610 <__locale_ctype_ptr+0x14>)
 80185fe:	4a05      	ldr	r2, [pc, #20]	; (8018614 <__locale_ctype_ptr+0x18>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	6a1b      	ldr	r3, [r3, #32]
 8018604:	2b00      	cmp	r3, #0
 8018606:	bf08      	it	eq
 8018608:	4613      	moveq	r3, r2
 801860a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801860e:	4770      	bx	lr
 8018610:	2000000c 	.word	0x2000000c
 8018614:	20000070 	.word	0x20000070

08018618 <__localeconv_l>:
 8018618:	30f0      	adds	r0, #240	; 0xf0
 801861a:	4770      	bx	lr

0801861c <_localeconv_r>:
 801861c:	4b04      	ldr	r3, [pc, #16]	; (8018630 <_localeconv_r+0x14>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	6a18      	ldr	r0, [r3, #32]
 8018622:	4b04      	ldr	r3, [pc, #16]	; (8018634 <_localeconv_r+0x18>)
 8018624:	2800      	cmp	r0, #0
 8018626:	bf08      	it	eq
 8018628:	4618      	moveq	r0, r3
 801862a:	30f0      	adds	r0, #240	; 0xf0
 801862c:	4770      	bx	lr
 801862e:	bf00      	nop
 8018630:	2000000c 	.word	0x2000000c
 8018634:	20000070 	.word	0x20000070

08018638 <malloc>:
 8018638:	4b02      	ldr	r3, [pc, #8]	; (8018644 <malloc+0xc>)
 801863a:	4601      	mov	r1, r0
 801863c:	6818      	ldr	r0, [r3, #0]
 801863e:	f000 bc7b 	b.w	8018f38 <_malloc_r>
 8018642:	bf00      	nop
 8018644:	2000000c 	.word	0x2000000c

08018648 <__ascii_mbtowc>:
 8018648:	b082      	sub	sp, #8
 801864a:	b901      	cbnz	r1, 801864e <__ascii_mbtowc+0x6>
 801864c:	a901      	add	r1, sp, #4
 801864e:	b142      	cbz	r2, 8018662 <__ascii_mbtowc+0x1a>
 8018650:	b14b      	cbz	r3, 8018666 <__ascii_mbtowc+0x1e>
 8018652:	7813      	ldrb	r3, [r2, #0]
 8018654:	600b      	str	r3, [r1, #0]
 8018656:	7812      	ldrb	r2, [r2, #0]
 8018658:	1c10      	adds	r0, r2, #0
 801865a:	bf18      	it	ne
 801865c:	2001      	movne	r0, #1
 801865e:	b002      	add	sp, #8
 8018660:	4770      	bx	lr
 8018662:	4610      	mov	r0, r2
 8018664:	e7fb      	b.n	801865e <__ascii_mbtowc+0x16>
 8018666:	f06f 0001 	mvn.w	r0, #1
 801866a:	e7f8      	b.n	801865e <__ascii_mbtowc+0x16>

0801866c <memcpy>:
 801866c:	b510      	push	{r4, lr}
 801866e:	1e43      	subs	r3, r0, #1
 8018670:	440a      	add	r2, r1
 8018672:	4291      	cmp	r1, r2
 8018674:	d100      	bne.n	8018678 <memcpy+0xc>
 8018676:	bd10      	pop	{r4, pc}
 8018678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801867c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018680:	e7f7      	b.n	8018672 <memcpy+0x6>

08018682 <_Balloc>:
 8018682:	b570      	push	{r4, r5, r6, lr}
 8018684:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018686:	4604      	mov	r4, r0
 8018688:	460e      	mov	r6, r1
 801868a:	b93d      	cbnz	r5, 801869c <_Balloc+0x1a>
 801868c:	2010      	movs	r0, #16
 801868e:	f7ff ffd3 	bl	8018638 <malloc>
 8018692:	6260      	str	r0, [r4, #36]	; 0x24
 8018694:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018698:	6005      	str	r5, [r0, #0]
 801869a:	60c5      	str	r5, [r0, #12]
 801869c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801869e:	68eb      	ldr	r3, [r5, #12]
 80186a0:	b183      	cbz	r3, 80186c4 <_Balloc+0x42>
 80186a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186a4:	68db      	ldr	r3, [r3, #12]
 80186a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80186aa:	b9b8      	cbnz	r0, 80186dc <_Balloc+0x5a>
 80186ac:	2101      	movs	r1, #1
 80186ae:	fa01 f506 	lsl.w	r5, r1, r6
 80186b2:	1d6a      	adds	r2, r5, #5
 80186b4:	0092      	lsls	r2, r2, #2
 80186b6:	4620      	mov	r0, r4
 80186b8:	f000 fbe1 	bl	8018e7e <_calloc_r>
 80186bc:	b160      	cbz	r0, 80186d8 <_Balloc+0x56>
 80186be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80186c2:	e00e      	b.n	80186e2 <_Balloc+0x60>
 80186c4:	2221      	movs	r2, #33	; 0x21
 80186c6:	2104      	movs	r1, #4
 80186c8:	4620      	mov	r0, r4
 80186ca:	f000 fbd8 	bl	8018e7e <_calloc_r>
 80186ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186d0:	60e8      	str	r0, [r5, #12]
 80186d2:	68db      	ldr	r3, [r3, #12]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d1e4      	bne.n	80186a2 <_Balloc+0x20>
 80186d8:	2000      	movs	r0, #0
 80186da:	bd70      	pop	{r4, r5, r6, pc}
 80186dc:	6802      	ldr	r2, [r0, #0]
 80186de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80186e2:	2300      	movs	r3, #0
 80186e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80186e8:	e7f7      	b.n	80186da <_Balloc+0x58>

080186ea <_Bfree>:
 80186ea:	b570      	push	{r4, r5, r6, lr}
 80186ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80186ee:	4606      	mov	r6, r0
 80186f0:	460d      	mov	r5, r1
 80186f2:	b93c      	cbnz	r4, 8018704 <_Bfree+0x1a>
 80186f4:	2010      	movs	r0, #16
 80186f6:	f7ff ff9f 	bl	8018638 <malloc>
 80186fa:	6270      	str	r0, [r6, #36]	; 0x24
 80186fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018700:	6004      	str	r4, [r0, #0]
 8018702:	60c4      	str	r4, [r0, #12]
 8018704:	b13d      	cbz	r5, 8018716 <_Bfree+0x2c>
 8018706:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018708:	686a      	ldr	r2, [r5, #4]
 801870a:	68db      	ldr	r3, [r3, #12]
 801870c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018710:	6029      	str	r1, [r5, #0]
 8018712:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018716:	bd70      	pop	{r4, r5, r6, pc}

08018718 <__multadd>:
 8018718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801871c:	690d      	ldr	r5, [r1, #16]
 801871e:	461f      	mov	r7, r3
 8018720:	4606      	mov	r6, r0
 8018722:	460c      	mov	r4, r1
 8018724:	f101 0c14 	add.w	ip, r1, #20
 8018728:	2300      	movs	r3, #0
 801872a:	f8dc 0000 	ldr.w	r0, [ip]
 801872e:	b281      	uxth	r1, r0
 8018730:	fb02 7101 	mla	r1, r2, r1, r7
 8018734:	0c0f      	lsrs	r7, r1, #16
 8018736:	0c00      	lsrs	r0, r0, #16
 8018738:	fb02 7000 	mla	r0, r2, r0, r7
 801873c:	b289      	uxth	r1, r1
 801873e:	3301      	adds	r3, #1
 8018740:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018744:	429d      	cmp	r5, r3
 8018746:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801874a:	f84c 1b04 	str.w	r1, [ip], #4
 801874e:	dcec      	bgt.n	801872a <__multadd+0x12>
 8018750:	b1d7      	cbz	r7, 8018788 <__multadd+0x70>
 8018752:	68a3      	ldr	r3, [r4, #8]
 8018754:	42ab      	cmp	r3, r5
 8018756:	dc12      	bgt.n	801877e <__multadd+0x66>
 8018758:	6861      	ldr	r1, [r4, #4]
 801875a:	4630      	mov	r0, r6
 801875c:	3101      	adds	r1, #1
 801875e:	f7ff ff90 	bl	8018682 <_Balloc>
 8018762:	6922      	ldr	r2, [r4, #16]
 8018764:	3202      	adds	r2, #2
 8018766:	f104 010c 	add.w	r1, r4, #12
 801876a:	4680      	mov	r8, r0
 801876c:	0092      	lsls	r2, r2, #2
 801876e:	300c      	adds	r0, #12
 8018770:	f7ff ff7c 	bl	801866c <memcpy>
 8018774:	4621      	mov	r1, r4
 8018776:	4630      	mov	r0, r6
 8018778:	f7ff ffb7 	bl	80186ea <_Bfree>
 801877c:	4644      	mov	r4, r8
 801877e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018782:	3501      	adds	r5, #1
 8018784:	615f      	str	r7, [r3, #20]
 8018786:	6125      	str	r5, [r4, #16]
 8018788:	4620      	mov	r0, r4
 801878a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801878e <__s2b>:
 801878e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018792:	460c      	mov	r4, r1
 8018794:	4615      	mov	r5, r2
 8018796:	461f      	mov	r7, r3
 8018798:	2209      	movs	r2, #9
 801879a:	3308      	adds	r3, #8
 801879c:	4606      	mov	r6, r0
 801879e:	fb93 f3f2 	sdiv	r3, r3, r2
 80187a2:	2100      	movs	r1, #0
 80187a4:	2201      	movs	r2, #1
 80187a6:	429a      	cmp	r2, r3
 80187a8:	db20      	blt.n	80187ec <__s2b+0x5e>
 80187aa:	4630      	mov	r0, r6
 80187ac:	f7ff ff69 	bl	8018682 <_Balloc>
 80187b0:	9b08      	ldr	r3, [sp, #32]
 80187b2:	6143      	str	r3, [r0, #20]
 80187b4:	2d09      	cmp	r5, #9
 80187b6:	f04f 0301 	mov.w	r3, #1
 80187ba:	6103      	str	r3, [r0, #16]
 80187bc:	dd19      	ble.n	80187f2 <__s2b+0x64>
 80187be:	f104 0809 	add.w	r8, r4, #9
 80187c2:	46c1      	mov	r9, r8
 80187c4:	442c      	add	r4, r5
 80187c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80187ca:	4601      	mov	r1, r0
 80187cc:	3b30      	subs	r3, #48	; 0x30
 80187ce:	220a      	movs	r2, #10
 80187d0:	4630      	mov	r0, r6
 80187d2:	f7ff ffa1 	bl	8018718 <__multadd>
 80187d6:	45a1      	cmp	r9, r4
 80187d8:	d1f5      	bne.n	80187c6 <__s2b+0x38>
 80187da:	eb08 0405 	add.w	r4, r8, r5
 80187de:	3c08      	subs	r4, #8
 80187e0:	1b2d      	subs	r5, r5, r4
 80187e2:	1963      	adds	r3, r4, r5
 80187e4:	42bb      	cmp	r3, r7
 80187e6:	db07      	blt.n	80187f8 <__s2b+0x6a>
 80187e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187ec:	0052      	lsls	r2, r2, #1
 80187ee:	3101      	adds	r1, #1
 80187f0:	e7d9      	b.n	80187a6 <__s2b+0x18>
 80187f2:	340a      	adds	r4, #10
 80187f4:	2509      	movs	r5, #9
 80187f6:	e7f3      	b.n	80187e0 <__s2b+0x52>
 80187f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80187fc:	4601      	mov	r1, r0
 80187fe:	3b30      	subs	r3, #48	; 0x30
 8018800:	220a      	movs	r2, #10
 8018802:	4630      	mov	r0, r6
 8018804:	f7ff ff88 	bl	8018718 <__multadd>
 8018808:	e7eb      	b.n	80187e2 <__s2b+0x54>

0801880a <__hi0bits>:
 801880a:	0c02      	lsrs	r2, r0, #16
 801880c:	0412      	lsls	r2, r2, #16
 801880e:	4603      	mov	r3, r0
 8018810:	b9b2      	cbnz	r2, 8018840 <__hi0bits+0x36>
 8018812:	0403      	lsls	r3, r0, #16
 8018814:	2010      	movs	r0, #16
 8018816:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801881a:	bf04      	itt	eq
 801881c:	021b      	lsleq	r3, r3, #8
 801881e:	3008      	addeq	r0, #8
 8018820:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018824:	bf04      	itt	eq
 8018826:	011b      	lsleq	r3, r3, #4
 8018828:	3004      	addeq	r0, #4
 801882a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801882e:	bf04      	itt	eq
 8018830:	009b      	lsleq	r3, r3, #2
 8018832:	3002      	addeq	r0, #2
 8018834:	2b00      	cmp	r3, #0
 8018836:	db06      	blt.n	8018846 <__hi0bits+0x3c>
 8018838:	005b      	lsls	r3, r3, #1
 801883a:	d503      	bpl.n	8018844 <__hi0bits+0x3a>
 801883c:	3001      	adds	r0, #1
 801883e:	4770      	bx	lr
 8018840:	2000      	movs	r0, #0
 8018842:	e7e8      	b.n	8018816 <__hi0bits+0xc>
 8018844:	2020      	movs	r0, #32
 8018846:	4770      	bx	lr

08018848 <__lo0bits>:
 8018848:	6803      	ldr	r3, [r0, #0]
 801884a:	f013 0207 	ands.w	r2, r3, #7
 801884e:	4601      	mov	r1, r0
 8018850:	d00b      	beq.n	801886a <__lo0bits+0x22>
 8018852:	07da      	lsls	r2, r3, #31
 8018854:	d423      	bmi.n	801889e <__lo0bits+0x56>
 8018856:	0798      	lsls	r0, r3, #30
 8018858:	bf49      	itett	mi
 801885a:	085b      	lsrmi	r3, r3, #1
 801885c:	089b      	lsrpl	r3, r3, #2
 801885e:	2001      	movmi	r0, #1
 8018860:	600b      	strmi	r3, [r1, #0]
 8018862:	bf5c      	itt	pl
 8018864:	600b      	strpl	r3, [r1, #0]
 8018866:	2002      	movpl	r0, #2
 8018868:	4770      	bx	lr
 801886a:	b298      	uxth	r0, r3
 801886c:	b9a8      	cbnz	r0, 801889a <__lo0bits+0x52>
 801886e:	0c1b      	lsrs	r3, r3, #16
 8018870:	2010      	movs	r0, #16
 8018872:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018876:	bf04      	itt	eq
 8018878:	0a1b      	lsreq	r3, r3, #8
 801887a:	3008      	addeq	r0, #8
 801887c:	071a      	lsls	r2, r3, #28
 801887e:	bf04      	itt	eq
 8018880:	091b      	lsreq	r3, r3, #4
 8018882:	3004      	addeq	r0, #4
 8018884:	079a      	lsls	r2, r3, #30
 8018886:	bf04      	itt	eq
 8018888:	089b      	lsreq	r3, r3, #2
 801888a:	3002      	addeq	r0, #2
 801888c:	07da      	lsls	r2, r3, #31
 801888e:	d402      	bmi.n	8018896 <__lo0bits+0x4e>
 8018890:	085b      	lsrs	r3, r3, #1
 8018892:	d006      	beq.n	80188a2 <__lo0bits+0x5a>
 8018894:	3001      	adds	r0, #1
 8018896:	600b      	str	r3, [r1, #0]
 8018898:	4770      	bx	lr
 801889a:	4610      	mov	r0, r2
 801889c:	e7e9      	b.n	8018872 <__lo0bits+0x2a>
 801889e:	2000      	movs	r0, #0
 80188a0:	4770      	bx	lr
 80188a2:	2020      	movs	r0, #32
 80188a4:	4770      	bx	lr

080188a6 <__i2b>:
 80188a6:	b510      	push	{r4, lr}
 80188a8:	460c      	mov	r4, r1
 80188aa:	2101      	movs	r1, #1
 80188ac:	f7ff fee9 	bl	8018682 <_Balloc>
 80188b0:	2201      	movs	r2, #1
 80188b2:	6144      	str	r4, [r0, #20]
 80188b4:	6102      	str	r2, [r0, #16]
 80188b6:	bd10      	pop	{r4, pc}

080188b8 <__multiply>:
 80188b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188bc:	4614      	mov	r4, r2
 80188be:	690a      	ldr	r2, [r1, #16]
 80188c0:	6923      	ldr	r3, [r4, #16]
 80188c2:	429a      	cmp	r2, r3
 80188c4:	bfb8      	it	lt
 80188c6:	460b      	movlt	r3, r1
 80188c8:	4688      	mov	r8, r1
 80188ca:	bfbc      	itt	lt
 80188cc:	46a0      	movlt	r8, r4
 80188ce:	461c      	movlt	r4, r3
 80188d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80188d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80188d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80188e0:	eb07 0609 	add.w	r6, r7, r9
 80188e4:	42b3      	cmp	r3, r6
 80188e6:	bfb8      	it	lt
 80188e8:	3101      	addlt	r1, #1
 80188ea:	f7ff feca 	bl	8018682 <_Balloc>
 80188ee:	f100 0514 	add.w	r5, r0, #20
 80188f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80188f6:	462b      	mov	r3, r5
 80188f8:	2200      	movs	r2, #0
 80188fa:	4573      	cmp	r3, lr
 80188fc:	d316      	bcc.n	801892c <__multiply+0x74>
 80188fe:	f104 0214 	add.w	r2, r4, #20
 8018902:	f108 0114 	add.w	r1, r8, #20
 8018906:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801890a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801890e:	9300      	str	r3, [sp, #0]
 8018910:	9b00      	ldr	r3, [sp, #0]
 8018912:	9201      	str	r2, [sp, #4]
 8018914:	4293      	cmp	r3, r2
 8018916:	d80c      	bhi.n	8018932 <__multiply+0x7a>
 8018918:	2e00      	cmp	r6, #0
 801891a:	dd03      	ble.n	8018924 <__multiply+0x6c>
 801891c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018920:	2b00      	cmp	r3, #0
 8018922:	d05d      	beq.n	80189e0 <__multiply+0x128>
 8018924:	6106      	str	r6, [r0, #16]
 8018926:	b003      	add	sp, #12
 8018928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801892c:	f843 2b04 	str.w	r2, [r3], #4
 8018930:	e7e3      	b.n	80188fa <__multiply+0x42>
 8018932:	f8b2 b000 	ldrh.w	fp, [r2]
 8018936:	f1bb 0f00 	cmp.w	fp, #0
 801893a:	d023      	beq.n	8018984 <__multiply+0xcc>
 801893c:	4689      	mov	r9, r1
 801893e:	46ac      	mov	ip, r5
 8018940:	f04f 0800 	mov.w	r8, #0
 8018944:	f859 4b04 	ldr.w	r4, [r9], #4
 8018948:	f8dc a000 	ldr.w	sl, [ip]
 801894c:	b2a3      	uxth	r3, r4
 801894e:	fa1f fa8a 	uxth.w	sl, sl
 8018952:	fb0b a303 	mla	r3, fp, r3, sl
 8018956:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801895a:	f8dc 4000 	ldr.w	r4, [ip]
 801895e:	4443      	add	r3, r8
 8018960:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018964:	fb0b 840a 	mla	r4, fp, sl, r8
 8018968:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801896c:	46e2      	mov	sl, ip
 801896e:	b29b      	uxth	r3, r3
 8018970:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018974:	454f      	cmp	r7, r9
 8018976:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801897a:	f84a 3b04 	str.w	r3, [sl], #4
 801897e:	d82b      	bhi.n	80189d8 <__multiply+0x120>
 8018980:	f8cc 8004 	str.w	r8, [ip, #4]
 8018984:	9b01      	ldr	r3, [sp, #4]
 8018986:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801898a:	3204      	adds	r2, #4
 801898c:	f1ba 0f00 	cmp.w	sl, #0
 8018990:	d020      	beq.n	80189d4 <__multiply+0x11c>
 8018992:	682b      	ldr	r3, [r5, #0]
 8018994:	4689      	mov	r9, r1
 8018996:	46a8      	mov	r8, r5
 8018998:	f04f 0b00 	mov.w	fp, #0
 801899c:	f8b9 c000 	ldrh.w	ip, [r9]
 80189a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80189a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80189a8:	445c      	add	r4, fp
 80189aa:	46c4      	mov	ip, r8
 80189ac:	b29b      	uxth	r3, r3
 80189ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80189b2:	f84c 3b04 	str.w	r3, [ip], #4
 80189b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80189ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80189be:	0c1b      	lsrs	r3, r3, #16
 80189c0:	fb0a b303 	mla	r3, sl, r3, fp
 80189c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80189c8:	454f      	cmp	r7, r9
 80189ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80189ce:	d805      	bhi.n	80189dc <__multiply+0x124>
 80189d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80189d4:	3504      	adds	r5, #4
 80189d6:	e79b      	b.n	8018910 <__multiply+0x58>
 80189d8:	46d4      	mov	ip, sl
 80189da:	e7b3      	b.n	8018944 <__multiply+0x8c>
 80189dc:	46e0      	mov	r8, ip
 80189de:	e7dd      	b.n	801899c <__multiply+0xe4>
 80189e0:	3e01      	subs	r6, #1
 80189e2:	e799      	b.n	8018918 <__multiply+0x60>

080189e4 <__pow5mult>:
 80189e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189e8:	4615      	mov	r5, r2
 80189ea:	f012 0203 	ands.w	r2, r2, #3
 80189ee:	4606      	mov	r6, r0
 80189f0:	460f      	mov	r7, r1
 80189f2:	d007      	beq.n	8018a04 <__pow5mult+0x20>
 80189f4:	3a01      	subs	r2, #1
 80189f6:	4c21      	ldr	r4, [pc, #132]	; (8018a7c <__pow5mult+0x98>)
 80189f8:	2300      	movs	r3, #0
 80189fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189fe:	f7ff fe8b 	bl	8018718 <__multadd>
 8018a02:	4607      	mov	r7, r0
 8018a04:	10ad      	asrs	r5, r5, #2
 8018a06:	d035      	beq.n	8018a74 <__pow5mult+0x90>
 8018a08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018a0a:	b93c      	cbnz	r4, 8018a1c <__pow5mult+0x38>
 8018a0c:	2010      	movs	r0, #16
 8018a0e:	f7ff fe13 	bl	8018638 <malloc>
 8018a12:	6270      	str	r0, [r6, #36]	; 0x24
 8018a14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a18:	6004      	str	r4, [r0, #0]
 8018a1a:	60c4      	str	r4, [r0, #12]
 8018a1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018a20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a24:	b94c      	cbnz	r4, 8018a3a <__pow5mult+0x56>
 8018a26:	f240 2171 	movw	r1, #625	; 0x271
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	f7ff ff3b 	bl	80188a6 <__i2b>
 8018a30:	2300      	movs	r3, #0
 8018a32:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a36:	4604      	mov	r4, r0
 8018a38:	6003      	str	r3, [r0, #0]
 8018a3a:	f04f 0800 	mov.w	r8, #0
 8018a3e:	07eb      	lsls	r3, r5, #31
 8018a40:	d50a      	bpl.n	8018a58 <__pow5mult+0x74>
 8018a42:	4639      	mov	r1, r7
 8018a44:	4622      	mov	r2, r4
 8018a46:	4630      	mov	r0, r6
 8018a48:	f7ff ff36 	bl	80188b8 <__multiply>
 8018a4c:	4639      	mov	r1, r7
 8018a4e:	4681      	mov	r9, r0
 8018a50:	4630      	mov	r0, r6
 8018a52:	f7ff fe4a 	bl	80186ea <_Bfree>
 8018a56:	464f      	mov	r7, r9
 8018a58:	106d      	asrs	r5, r5, #1
 8018a5a:	d00b      	beq.n	8018a74 <__pow5mult+0x90>
 8018a5c:	6820      	ldr	r0, [r4, #0]
 8018a5e:	b938      	cbnz	r0, 8018a70 <__pow5mult+0x8c>
 8018a60:	4622      	mov	r2, r4
 8018a62:	4621      	mov	r1, r4
 8018a64:	4630      	mov	r0, r6
 8018a66:	f7ff ff27 	bl	80188b8 <__multiply>
 8018a6a:	6020      	str	r0, [r4, #0]
 8018a6c:	f8c0 8000 	str.w	r8, [r0]
 8018a70:	4604      	mov	r4, r0
 8018a72:	e7e4      	b.n	8018a3e <__pow5mult+0x5a>
 8018a74:	4638      	mov	r0, r7
 8018a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a7a:	bf00      	nop
 8018a7c:	0801a3f0 	.word	0x0801a3f0

08018a80 <__lshift>:
 8018a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a84:	460c      	mov	r4, r1
 8018a86:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a8a:	6923      	ldr	r3, [r4, #16]
 8018a8c:	6849      	ldr	r1, [r1, #4]
 8018a8e:	eb0a 0903 	add.w	r9, sl, r3
 8018a92:	68a3      	ldr	r3, [r4, #8]
 8018a94:	4607      	mov	r7, r0
 8018a96:	4616      	mov	r6, r2
 8018a98:	f109 0501 	add.w	r5, r9, #1
 8018a9c:	42ab      	cmp	r3, r5
 8018a9e:	db32      	blt.n	8018b06 <__lshift+0x86>
 8018aa0:	4638      	mov	r0, r7
 8018aa2:	f7ff fdee 	bl	8018682 <_Balloc>
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	4680      	mov	r8, r0
 8018aaa:	f100 0114 	add.w	r1, r0, #20
 8018aae:	461a      	mov	r2, r3
 8018ab0:	4553      	cmp	r3, sl
 8018ab2:	db2b      	blt.n	8018b0c <__lshift+0x8c>
 8018ab4:	6920      	ldr	r0, [r4, #16]
 8018ab6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018aba:	f104 0314 	add.w	r3, r4, #20
 8018abe:	f016 021f 	ands.w	r2, r6, #31
 8018ac2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ac6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018aca:	d025      	beq.n	8018b18 <__lshift+0x98>
 8018acc:	f1c2 0e20 	rsb	lr, r2, #32
 8018ad0:	2000      	movs	r0, #0
 8018ad2:	681e      	ldr	r6, [r3, #0]
 8018ad4:	468a      	mov	sl, r1
 8018ad6:	4096      	lsls	r6, r2
 8018ad8:	4330      	orrs	r0, r6
 8018ada:	f84a 0b04 	str.w	r0, [sl], #4
 8018ade:	f853 0b04 	ldr.w	r0, [r3], #4
 8018ae2:	459c      	cmp	ip, r3
 8018ae4:	fa20 f00e 	lsr.w	r0, r0, lr
 8018ae8:	d814      	bhi.n	8018b14 <__lshift+0x94>
 8018aea:	6048      	str	r0, [r1, #4]
 8018aec:	b108      	cbz	r0, 8018af2 <__lshift+0x72>
 8018aee:	f109 0502 	add.w	r5, r9, #2
 8018af2:	3d01      	subs	r5, #1
 8018af4:	4638      	mov	r0, r7
 8018af6:	f8c8 5010 	str.w	r5, [r8, #16]
 8018afa:	4621      	mov	r1, r4
 8018afc:	f7ff fdf5 	bl	80186ea <_Bfree>
 8018b00:	4640      	mov	r0, r8
 8018b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b06:	3101      	adds	r1, #1
 8018b08:	005b      	lsls	r3, r3, #1
 8018b0a:	e7c7      	b.n	8018a9c <__lshift+0x1c>
 8018b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018b10:	3301      	adds	r3, #1
 8018b12:	e7cd      	b.n	8018ab0 <__lshift+0x30>
 8018b14:	4651      	mov	r1, sl
 8018b16:	e7dc      	b.n	8018ad2 <__lshift+0x52>
 8018b18:	3904      	subs	r1, #4
 8018b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b22:	459c      	cmp	ip, r3
 8018b24:	d8f9      	bhi.n	8018b1a <__lshift+0x9a>
 8018b26:	e7e4      	b.n	8018af2 <__lshift+0x72>

08018b28 <__mcmp>:
 8018b28:	6903      	ldr	r3, [r0, #16]
 8018b2a:	690a      	ldr	r2, [r1, #16]
 8018b2c:	1a9b      	subs	r3, r3, r2
 8018b2e:	b530      	push	{r4, r5, lr}
 8018b30:	d10c      	bne.n	8018b4c <__mcmp+0x24>
 8018b32:	0092      	lsls	r2, r2, #2
 8018b34:	3014      	adds	r0, #20
 8018b36:	3114      	adds	r1, #20
 8018b38:	1884      	adds	r4, r0, r2
 8018b3a:	4411      	add	r1, r2
 8018b3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018b40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018b44:	4295      	cmp	r5, r2
 8018b46:	d003      	beq.n	8018b50 <__mcmp+0x28>
 8018b48:	d305      	bcc.n	8018b56 <__mcmp+0x2e>
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	bd30      	pop	{r4, r5, pc}
 8018b50:	42a0      	cmp	r0, r4
 8018b52:	d3f3      	bcc.n	8018b3c <__mcmp+0x14>
 8018b54:	e7fa      	b.n	8018b4c <__mcmp+0x24>
 8018b56:	f04f 33ff 	mov.w	r3, #4294967295
 8018b5a:	e7f7      	b.n	8018b4c <__mcmp+0x24>

08018b5c <__mdiff>:
 8018b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b60:	460d      	mov	r5, r1
 8018b62:	4607      	mov	r7, r0
 8018b64:	4611      	mov	r1, r2
 8018b66:	4628      	mov	r0, r5
 8018b68:	4614      	mov	r4, r2
 8018b6a:	f7ff ffdd 	bl	8018b28 <__mcmp>
 8018b6e:	1e06      	subs	r6, r0, #0
 8018b70:	d108      	bne.n	8018b84 <__mdiff+0x28>
 8018b72:	4631      	mov	r1, r6
 8018b74:	4638      	mov	r0, r7
 8018b76:	f7ff fd84 	bl	8018682 <_Balloc>
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b84:	bfa4      	itt	ge
 8018b86:	4623      	movge	r3, r4
 8018b88:	462c      	movge	r4, r5
 8018b8a:	4638      	mov	r0, r7
 8018b8c:	6861      	ldr	r1, [r4, #4]
 8018b8e:	bfa6      	itte	ge
 8018b90:	461d      	movge	r5, r3
 8018b92:	2600      	movge	r6, #0
 8018b94:	2601      	movlt	r6, #1
 8018b96:	f7ff fd74 	bl	8018682 <_Balloc>
 8018b9a:	692b      	ldr	r3, [r5, #16]
 8018b9c:	60c6      	str	r6, [r0, #12]
 8018b9e:	6926      	ldr	r6, [r4, #16]
 8018ba0:	f105 0914 	add.w	r9, r5, #20
 8018ba4:	f104 0214 	add.w	r2, r4, #20
 8018ba8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018bac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018bb0:	f100 0514 	add.w	r5, r0, #20
 8018bb4:	f04f 0e00 	mov.w	lr, #0
 8018bb8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018bbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8018bc0:	fa1e f18a 	uxtah	r1, lr, sl
 8018bc4:	b2a3      	uxth	r3, r4
 8018bc6:	1ac9      	subs	r1, r1, r3
 8018bc8:	0c23      	lsrs	r3, r4, #16
 8018bca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018bce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018bd2:	b289      	uxth	r1, r1
 8018bd4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018bd8:	45c8      	cmp	r8, r9
 8018bda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018bde:	4694      	mov	ip, r2
 8018be0:	f845 3b04 	str.w	r3, [r5], #4
 8018be4:	d8e8      	bhi.n	8018bb8 <__mdiff+0x5c>
 8018be6:	45bc      	cmp	ip, r7
 8018be8:	d304      	bcc.n	8018bf4 <__mdiff+0x98>
 8018bea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018bee:	b183      	cbz	r3, 8018c12 <__mdiff+0xb6>
 8018bf0:	6106      	str	r6, [r0, #16]
 8018bf2:	e7c5      	b.n	8018b80 <__mdiff+0x24>
 8018bf4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018bf8:	fa1e f381 	uxtah	r3, lr, r1
 8018bfc:	141a      	asrs	r2, r3, #16
 8018bfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c02:	b29b      	uxth	r3, r3
 8018c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018c0c:	f845 3b04 	str.w	r3, [r5], #4
 8018c10:	e7e9      	b.n	8018be6 <__mdiff+0x8a>
 8018c12:	3e01      	subs	r6, #1
 8018c14:	e7e9      	b.n	8018bea <__mdiff+0x8e>
	...

08018c18 <__ulp>:
 8018c18:	4b12      	ldr	r3, [pc, #72]	; (8018c64 <__ulp+0x4c>)
 8018c1a:	ee10 2a90 	vmov	r2, s1
 8018c1e:	401a      	ands	r2, r3
 8018c20:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	dd04      	ble.n	8018c32 <__ulp+0x1a>
 8018c28:	2000      	movs	r0, #0
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	ec41 0b10 	vmov	d0, r0, r1
 8018c30:	4770      	bx	lr
 8018c32:	425b      	negs	r3, r3
 8018c34:	151b      	asrs	r3, r3, #20
 8018c36:	2b13      	cmp	r3, #19
 8018c38:	f04f 0000 	mov.w	r0, #0
 8018c3c:	f04f 0100 	mov.w	r1, #0
 8018c40:	dc04      	bgt.n	8018c4c <__ulp+0x34>
 8018c42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018c46:	fa42 f103 	asr.w	r1, r2, r3
 8018c4a:	e7ef      	b.n	8018c2c <__ulp+0x14>
 8018c4c:	3b14      	subs	r3, #20
 8018c4e:	2b1e      	cmp	r3, #30
 8018c50:	f04f 0201 	mov.w	r2, #1
 8018c54:	bfda      	itte	le
 8018c56:	f1c3 031f 	rsble	r3, r3, #31
 8018c5a:	fa02 f303 	lslle.w	r3, r2, r3
 8018c5e:	4613      	movgt	r3, r2
 8018c60:	4618      	mov	r0, r3
 8018c62:	e7e3      	b.n	8018c2c <__ulp+0x14>
 8018c64:	7ff00000 	.word	0x7ff00000

08018c68 <__b2d>:
 8018c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6a:	6905      	ldr	r5, [r0, #16]
 8018c6c:	f100 0714 	add.w	r7, r0, #20
 8018c70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018c74:	1f2e      	subs	r6, r5, #4
 8018c76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018c7a:	4620      	mov	r0, r4
 8018c7c:	f7ff fdc5 	bl	801880a <__hi0bits>
 8018c80:	f1c0 0320 	rsb	r3, r0, #32
 8018c84:	280a      	cmp	r0, #10
 8018c86:	600b      	str	r3, [r1, #0]
 8018c88:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018d00 <__b2d+0x98>
 8018c8c:	dc14      	bgt.n	8018cb8 <__b2d+0x50>
 8018c8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018c92:	fa24 f10e 	lsr.w	r1, r4, lr
 8018c96:	42b7      	cmp	r7, r6
 8018c98:	ea41 030c 	orr.w	r3, r1, ip
 8018c9c:	bf34      	ite	cc
 8018c9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ca2:	2100      	movcs	r1, #0
 8018ca4:	3015      	adds	r0, #21
 8018ca6:	fa04 f000 	lsl.w	r0, r4, r0
 8018caa:	fa21 f10e 	lsr.w	r1, r1, lr
 8018cae:	ea40 0201 	orr.w	r2, r0, r1
 8018cb2:	ec43 2b10 	vmov	d0, r2, r3
 8018cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cb8:	42b7      	cmp	r7, r6
 8018cba:	bf3a      	itte	cc
 8018cbc:	f1a5 0608 	subcc.w	r6, r5, #8
 8018cc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018cc4:	2100      	movcs	r1, #0
 8018cc6:	380b      	subs	r0, #11
 8018cc8:	d015      	beq.n	8018cf6 <__b2d+0x8e>
 8018cca:	4084      	lsls	r4, r0
 8018ccc:	f1c0 0520 	rsb	r5, r0, #32
 8018cd0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018cd4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018cd8:	42be      	cmp	r6, r7
 8018cda:	fa21 fc05 	lsr.w	ip, r1, r5
 8018cde:	ea44 030c 	orr.w	r3, r4, ip
 8018ce2:	bf8c      	ite	hi
 8018ce4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018ce8:	2400      	movls	r4, #0
 8018cea:	fa01 f000 	lsl.w	r0, r1, r0
 8018cee:	40ec      	lsrs	r4, r5
 8018cf0:	ea40 0204 	orr.w	r2, r0, r4
 8018cf4:	e7dd      	b.n	8018cb2 <__b2d+0x4a>
 8018cf6:	ea44 030c 	orr.w	r3, r4, ip
 8018cfa:	460a      	mov	r2, r1
 8018cfc:	e7d9      	b.n	8018cb2 <__b2d+0x4a>
 8018cfe:	bf00      	nop
 8018d00:	3ff00000 	.word	0x3ff00000

08018d04 <__d2b>:
 8018d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d08:	460e      	mov	r6, r1
 8018d0a:	2101      	movs	r1, #1
 8018d0c:	ec59 8b10 	vmov	r8, r9, d0
 8018d10:	4615      	mov	r5, r2
 8018d12:	f7ff fcb6 	bl	8018682 <_Balloc>
 8018d16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018d1a:	4607      	mov	r7, r0
 8018d1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018d20:	bb34      	cbnz	r4, 8018d70 <__d2b+0x6c>
 8018d22:	9301      	str	r3, [sp, #4]
 8018d24:	f1b8 0300 	subs.w	r3, r8, #0
 8018d28:	d027      	beq.n	8018d7a <__d2b+0x76>
 8018d2a:	a802      	add	r0, sp, #8
 8018d2c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018d30:	f7ff fd8a 	bl	8018848 <__lo0bits>
 8018d34:	9900      	ldr	r1, [sp, #0]
 8018d36:	b1f0      	cbz	r0, 8018d76 <__d2b+0x72>
 8018d38:	9a01      	ldr	r2, [sp, #4]
 8018d3a:	f1c0 0320 	rsb	r3, r0, #32
 8018d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8018d42:	430b      	orrs	r3, r1
 8018d44:	40c2      	lsrs	r2, r0
 8018d46:	617b      	str	r3, [r7, #20]
 8018d48:	9201      	str	r2, [sp, #4]
 8018d4a:	9b01      	ldr	r3, [sp, #4]
 8018d4c:	61bb      	str	r3, [r7, #24]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	bf14      	ite	ne
 8018d52:	2102      	movne	r1, #2
 8018d54:	2101      	moveq	r1, #1
 8018d56:	6139      	str	r1, [r7, #16]
 8018d58:	b1c4      	cbz	r4, 8018d8c <__d2b+0x88>
 8018d5a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018d5e:	4404      	add	r4, r0
 8018d60:	6034      	str	r4, [r6, #0]
 8018d62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018d66:	6028      	str	r0, [r5, #0]
 8018d68:	4638      	mov	r0, r7
 8018d6a:	b003      	add	sp, #12
 8018d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018d74:	e7d5      	b.n	8018d22 <__d2b+0x1e>
 8018d76:	6179      	str	r1, [r7, #20]
 8018d78:	e7e7      	b.n	8018d4a <__d2b+0x46>
 8018d7a:	a801      	add	r0, sp, #4
 8018d7c:	f7ff fd64 	bl	8018848 <__lo0bits>
 8018d80:	9b01      	ldr	r3, [sp, #4]
 8018d82:	617b      	str	r3, [r7, #20]
 8018d84:	2101      	movs	r1, #1
 8018d86:	6139      	str	r1, [r7, #16]
 8018d88:	3020      	adds	r0, #32
 8018d8a:	e7e5      	b.n	8018d58 <__d2b+0x54>
 8018d8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018d94:	6030      	str	r0, [r6, #0]
 8018d96:	6918      	ldr	r0, [r3, #16]
 8018d98:	f7ff fd37 	bl	801880a <__hi0bits>
 8018d9c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018da0:	e7e1      	b.n	8018d66 <__d2b+0x62>

08018da2 <__ratio>:
 8018da2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da6:	4688      	mov	r8, r1
 8018da8:	4669      	mov	r1, sp
 8018daa:	4681      	mov	r9, r0
 8018dac:	f7ff ff5c 	bl	8018c68 <__b2d>
 8018db0:	a901      	add	r1, sp, #4
 8018db2:	4640      	mov	r0, r8
 8018db4:	ec57 6b10 	vmov	r6, r7, d0
 8018db8:	f7ff ff56 	bl	8018c68 <__b2d>
 8018dbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018dc0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018dc4:	eba3 0c02 	sub.w	ip, r3, r2
 8018dc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018dcc:	1a9b      	subs	r3, r3, r2
 8018dce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018dd2:	ec5b ab10 	vmov	sl, fp, d0
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	bfce      	itee	gt
 8018dda:	463a      	movgt	r2, r7
 8018ddc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018de0:	465a      	movle	r2, fp
 8018de2:	4659      	mov	r1, fp
 8018de4:	463d      	mov	r5, r7
 8018de6:	bfd4      	ite	le
 8018de8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018dec:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018df0:	4630      	mov	r0, r6
 8018df2:	ee10 2a10 	vmov	r2, s0
 8018df6:	460b      	mov	r3, r1
 8018df8:	4629      	mov	r1, r5
 8018dfa:	f7e7 fd3f 	bl	800087c <__aeabi_ddiv>
 8018dfe:	ec41 0b10 	vmov	d0, r0, r1
 8018e02:	b003      	add	sp, #12
 8018e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e08 <__copybits>:
 8018e08:	3901      	subs	r1, #1
 8018e0a:	b510      	push	{r4, lr}
 8018e0c:	1149      	asrs	r1, r1, #5
 8018e0e:	6914      	ldr	r4, [r2, #16]
 8018e10:	3101      	adds	r1, #1
 8018e12:	f102 0314 	add.w	r3, r2, #20
 8018e16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018e1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018e1e:	42a3      	cmp	r3, r4
 8018e20:	4602      	mov	r2, r0
 8018e22:	d303      	bcc.n	8018e2c <__copybits+0x24>
 8018e24:	2300      	movs	r3, #0
 8018e26:	428a      	cmp	r2, r1
 8018e28:	d305      	bcc.n	8018e36 <__copybits+0x2e>
 8018e2a:	bd10      	pop	{r4, pc}
 8018e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e30:	f840 2b04 	str.w	r2, [r0], #4
 8018e34:	e7f3      	b.n	8018e1e <__copybits+0x16>
 8018e36:	f842 3b04 	str.w	r3, [r2], #4
 8018e3a:	e7f4      	b.n	8018e26 <__copybits+0x1e>

08018e3c <__any_on>:
 8018e3c:	f100 0214 	add.w	r2, r0, #20
 8018e40:	6900      	ldr	r0, [r0, #16]
 8018e42:	114b      	asrs	r3, r1, #5
 8018e44:	4298      	cmp	r0, r3
 8018e46:	b510      	push	{r4, lr}
 8018e48:	db11      	blt.n	8018e6e <__any_on+0x32>
 8018e4a:	dd0a      	ble.n	8018e62 <__any_on+0x26>
 8018e4c:	f011 011f 	ands.w	r1, r1, #31
 8018e50:	d007      	beq.n	8018e62 <__any_on+0x26>
 8018e52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018e56:	fa24 f001 	lsr.w	r0, r4, r1
 8018e5a:	fa00 f101 	lsl.w	r1, r0, r1
 8018e5e:	428c      	cmp	r4, r1
 8018e60:	d10b      	bne.n	8018e7a <__any_on+0x3e>
 8018e62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018e66:	4293      	cmp	r3, r2
 8018e68:	d803      	bhi.n	8018e72 <__any_on+0x36>
 8018e6a:	2000      	movs	r0, #0
 8018e6c:	bd10      	pop	{r4, pc}
 8018e6e:	4603      	mov	r3, r0
 8018e70:	e7f7      	b.n	8018e62 <__any_on+0x26>
 8018e72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e76:	2900      	cmp	r1, #0
 8018e78:	d0f5      	beq.n	8018e66 <__any_on+0x2a>
 8018e7a:	2001      	movs	r0, #1
 8018e7c:	e7f6      	b.n	8018e6c <__any_on+0x30>

08018e7e <_calloc_r>:
 8018e7e:	b538      	push	{r3, r4, r5, lr}
 8018e80:	fb02 f401 	mul.w	r4, r2, r1
 8018e84:	4621      	mov	r1, r4
 8018e86:	f000 f857 	bl	8018f38 <_malloc_r>
 8018e8a:	4605      	mov	r5, r0
 8018e8c:	b118      	cbz	r0, 8018e96 <_calloc_r+0x18>
 8018e8e:	4622      	mov	r2, r4
 8018e90:	2100      	movs	r1, #0
 8018e92:	f7fc fca1 	bl	80157d8 <memset>
 8018e96:	4628      	mov	r0, r5
 8018e98:	bd38      	pop	{r3, r4, r5, pc}
	...

08018e9c <_free_r>:
 8018e9c:	b538      	push	{r3, r4, r5, lr}
 8018e9e:	4605      	mov	r5, r0
 8018ea0:	2900      	cmp	r1, #0
 8018ea2:	d045      	beq.n	8018f30 <_free_r+0x94>
 8018ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ea8:	1f0c      	subs	r4, r1, #4
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	bfb8      	it	lt
 8018eae:	18e4      	addlt	r4, r4, r3
 8018eb0:	f000 fe30 	bl	8019b14 <__malloc_lock>
 8018eb4:	4a1f      	ldr	r2, [pc, #124]	; (8018f34 <_free_r+0x98>)
 8018eb6:	6813      	ldr	r3, [r2, #0]
 8018eb8:	4610      	mov	r0, r2
 8018eba:	b933      	cbnz	r3, 8018eca <_free_r+0x2e>
 8018ebc:	6063      	str	r3, [r4, #4]
 8018ebe:	6014      	str	r4, [r2, #0]
 8018ec0:	4628      	mov	r0, r5
 8018ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ec6:	f000 be26 	b.w	8019b16 <__malloc_unlock>
 8018eca:	42a3      	cmp	r3, r4
 8018ecc:	d90c      	bls.n	8018ee8 <_free_r+0x4c>
 8018ece:	6821      	ldr	r1, [r4, #0]
 8018ed0:	1862      	adds	r2, r4, r1
 8018ed2:	4293      	cmp	r3, r2
 8018ed4:	bf04      	itt	eq
 8018ed6:	681a      	ldreq	r2, [r3, #0]
 8018ed8:	685b      	ldreq	r3, [r3, #4]
 8018eda:	6063      	str	r3, [r4, #4]
 8018edc:	bf04      	itt	eq
 8018ede:	1852      	addeq	r2, r2, r1
 8018ee0:	6022      	streq	r2, [r4, #0]
 8018ee2:	6004      	str	r4, [r0, #0]
 8018ee4:	e7ec      	b.n	8018ec0 <_free_r+0x24>
 8018ee6:	4613      	mov	r3, r2
 8018ee8:	685a      	ldr	r2, [r3, #4]
 8018eea:	b10a      	cbz	r2, 8018ef0 <_free_r+0x54>
 8018eec:	42a2      	cmp	r2, r4
 8018eee:	d9fa      	bls.n	8018ee6 <_free_r+0x4a>
 8018ef0:	6819      	ldr	r1, [r3, #0]
 8018ef2:	1858      	adds	r0, r3, r1
 8018ef4:	42a0      	cmp	r0, r4
 8018ef6:	d10b      	bne.n	8018f10 <_free_r+0x74>
 8018ef8:	6820      	ldr	r0, [r4, #0]
 8018efa:	4401      	add	r1, r0
 8018efc:	1858      	adds	r0, r3, r1
 8018efe:	4282      	cmp	r2, r0
 8018f00:	6019      	str	r1, [r3, #0]
 8018f02:	d1dd      	bne.n	8018ec0 <_free_r+0x24>
 8018f04:	6810      	ldr	r0, [r2, #0]
 8018f06:	6852      	ldr	r2, [r2, #4]
 8018f08:	605a      	str	r2, [r3, #4]
 8018f0a:	4401      	add	r1, r0
 8018f0c:	6019      	str	r1, [r3, #0]
 8018f0e:	e7d7      	b.n	8018ec0 <_free_r+0x24>
 8018f10:	d902      	bls.n	8018f18 <_free_r+0x7c>
 8018f12:	230c      	movs	r3, #12
 8018f14:	602b      	str	r3, [r5, #0]
 8018f16:	e7d3      	b.n	8018ec0 <_free_r+0x24>
 8018f18:	6820      	ldr	r0, [r4, #0]
 8018f1a:	1821      	adds	r1, r4, r0
 8018f1c:	428a      	cmp	r2, r1
 8018f1e:	bf04      	itt	eq
 8018f20:	6811      	ldreq	r1, [r2, #0]
 8018f22:	6852      	ldreq	r2, [r2, #4]
 8018f24:	6062      	str	r2, [r4, #4]
 8018f26:	bf04      	itt	eq
 8018f28:	1809      	addeq	r1, r1, r0
 8018f2a:	6021      	streq	r1, [r4, #0]
 8018f2c:	605c      	str	r4, [r3, #4]
 8018f2e:	e7c7      	b.n	8018ec0 <_free_r+0x24>
 8018f30:	bd38      	pop	{r3, r4, r5, pc}
 8018f32:	bf00      	nop
 8018f34:	20042300 	.word	0x20042300

08018f38 <_malloc_r>:
 8018f38:	b570      	push	{r4, r5, r6, lr}
 8018f3a:	1ccd      	adds	r5, r1, #3
 8018f3c:	f025 0503 	bic.w	r5, r5, #3
 8018f40:	3508      	adds	r5, #8
 8018f42:	2d0c      	cmp	r5, #12
 8018f44:	bf38      	it	cc
 8018f46:	250c      	movcc	r5, #12
 8018f48:	2d00      	cmp	r5, #0
 8018f4a:	4606      	mov	r6, r0
 8018f4c:	db01      	blt.n	8018f52 <_malloc_r+0x1a>
 8018f4e:	42a9      	cmp	r1, r5
 8018f50:	d903      	bls.n	8018f5a <_malloc_r+0x22>
 8018f52:	230c      	movs	r3, #12
 8018f54:	6033      	str	r3, [r6, #0]
 8018f56:	2000      	movs	r0, #0
 8018f58:	bd70      	pop	{r4, r5, r6, pc}
 8018f5a:	f000 fddb 	bl	8019b14 <__malloc_lock>
 8018f5e:	4a21      	ldr	r2, [pc, #132]	; (8018fe4 <_malloc_r+0xac>)
 8018f60:	6814      	ldr	r4, [r2, #0]
 8018f62:	4621      	mov	r1, r4
 8018f64:	b991      	cbnz	r1, 8018f8c <_malloc_r+0x54>
 8018f66:	4c20      	ldr	r4, [pc, #128]	; (8018fe8 <_malloc_r+0xb0>)
 8018f68:	6823      	ldr	r3, [r4, #0]
 8018f6a:	b91b      	cbnz	r3, 8018f74 <_malloc_r+0x3c>
 8018f6c:	4630      	mov	r0, r6
 8018f6e:	f000 fc91 	bl	8019894 <_sbrk_r>
 8018f72:	6020      	str	r0, [r4, #0]
 8018f74:	4629      	mov	r1, r5
 8018f76:	4630      	mov	r0, r6
 8018f78:	f000 fc8c 	bl	8019894 <_sbrk_r>
 8018f7c:	1c43      	adds	r3, r0, #1
 8018f7e:	d124      	bne.n	8018fca <_malloc_r+0x92>
 8018f80:	230c      	movs	r3, #12
 8018f82:	6033      	str	r3, [r6, #0]
 8018f84:	4630      	mov	r0, r6
 8018f86:	f000 fdc6 	bl	8019b16 <__malloc_unlock>
 8018f8a:	e7e4      	b.n	8018f56 <_malloc_r+0x1e>
 8018f8c:	680b      	ldr	r3, [r1, #0]
 8018f8e:	1b5b      	subs	r3, r3, r5
 8018f90:	d418      	bmi.n	8018fc4 <_malloc_r+0x8c>
 8018f92:	2b0b      	cmp	r3, #11
 8018f94:	d90f      	bls.n	8018fb6 <_malloc_r+0x7e>
 8018f96:	600b      	str	r3, [r1, #0]
 8018f98:	50cd      	str	r5, [r1, r3]
 8018f9a:	18cc      	adds	r4, r1, r3
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	f000 fdba 	bl	8019b16 <__malloc_unlock>
 8018fa2:	f104 000b 	add.w	r0, r4, #11
 8018fa6:	1d23      	adds	r3, r4, #4
 8018fa8:	f020 0007 	bic.w	r0, r0, #7
 8018fac:	1ac3      	subs	r3, r0, r3
 8018fae:	d0d3      	beq.n	8018f58 <_malloc_r+0x20>
 8018fb0:	425a      	negs	r2, r3
 8018fb2:	50e2      	str	r2, [r4, r3]
 8018fb4:	e7d0      	b.n	8018f58 <_malloc_r+0x20>
 8018fb6:	428c      	cmp	r4, r1
 8018fb8:	684b      	ldr	r3, [r1, #4]
 8018fba:	bf16      	itet	ne
 8018fbc:	6063      	strne	r3, [r4, #4]
 8018fbe:	6013      	streq	r3, [r2, #0]
 8018fc0:	460c      	movne	r4, r1
 8018fc2:	e7eb      	b.n	8018f9c <_malloc_r+0x64>
 8018fc4:	460c      	mov	r4, r1
 8018fc6:	6849      	ldr	r1, [r1, #4]
 8018fc8:	e7cc      	b.n	8018f64 <_malloc_r+0x2c>
 8018fca:	1cc4      	adds	r4, r0, #3
 8018fcc:	f024 0403 	bic.w	r4, r4, #3
 8018fd0:	42a0      	cmp	r0, r4
 8018fd2:	d005      	beq.n	8018fe0 <_malloc_r+0xa8>
 8018fd4:	1a21      	subs	r1, r4, r0
 8018fd6:	4630      	mov	r0, r6
 8018fd8:	f000 fc5c 	bl	8019894 <_sbrk_r>
 8018fdc:	3001      	adds	r0, #1
 8018fde:	d0cf      	beq.n	8018f80 <_malloc_r+0x48>
 8018fe0:	6025      	str	r5, [r4, #0]
 8018fe2:	e7db      	b.n	8018f9c <_malloc_r+0x64>
 8018fe4:	20042300 	.word	0x20042300
 8018fe8:	20042304 	.word	0x20042304

08018fec <__ssputs_r>:
 8018fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ff0:	688e      	ldr	r6, [r1, #8]
 8018ff2:	429e      	cmp	r6, r3
 8018ff4:	4682      	mov	sl, r0
 8018ff6:	460c      	mov	r4, r1
 8018ff8:	4690      	mov	r8, r2
 8018ffa:	4699      	mov	r9, r3
 8018ffc:	d837      	bhi.n	801906e <__ssputs_r+0x82>
 8018ffe:	898a      	ldrh	r2, [r1, #12]
 8019000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019004:	d031      	beq.n	801906a <__ssputs_r+0x7e>
 8019006:	6825      	ldr	r5, [r4, #0]
 8019008:	6909      	ldr	r1, [r1, #16]
 801900a:	1a6f      	subs	r7, r5, r1
 801900c:	6965      	ldr	r5, [r4, #20]
 801900e:	2302      	movs	r3, #2
 8019010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019014:	fb95 f5f3 	sdiv	r5, r5, r3
 8019018:	f109 0301 	add.w	r3, r9, #1
 801901c:	443b      	add	r3, r7
 801901e:	429d      	cmp	r5, r3
 8019020:	bf38      	it	cc
 8019022:	461d      	movcc	r5, r3
 8019024:	0553      	lsls	r3, r2, #21
 8019026:	d530      	bpl.n	801908a <__ssputs_r+0x9e>
 8019028:	4629      	mov	r1, r5
 801902a:	f7ff ff85 	bl	8018f38 <_malloc_r>
 801902e:	4606      	mov	r6, r0
 8019030:	b950      	cbnz	r0, 8019048 <__ssputs_r+0x5c>
 8019032:	230c      	movs	r3, #12
 8019034:	f8ca 3000 	str.w	r3, [sl]
 8019038:	89a3      	ldrh	r3, [r4, #12]
 801903a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801903e:	81a3      	strh	r3, [r4, #12]
 8019040:	f04f 30ff 	mov.w	r0, #4294967295
 8019044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019048:	463a      	mov	r2, r7
 801904a:	6921      	ldr	r1, [r4, #16]
 801904c:	f7ff fb0e 	bl	801866c <memcpy>
 8019050:	89a3      	ldrh	r3, [r4, #12]
 8019052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801905a:	81a3      	strh	r3, [r4, #12]
 801905c:	6126      	str	r6, [r4, #16]
 801905e:	6165      	str	r5, [r4, #20]
 8019060:	443e      	add	r6, r7
 8019062:	1bed      	subs	r5, r5, r7
 8019064:	6026      	str	r6, [r4, #0]
 8019066:	60a5      	str	r5, [r4, #8]
 8019068:	464e      	mov	r6, r9
 801906a:	454e      	cmp	r6, r9
 801906c:	d900      	bls.n	8019070 <__ssputs_r+0x84>
 801906e:	464e      	mov	r6, r9
 8019070:	4632      	mov	r2, r6
 8019072:	4641      	mov	r1, r8
 8019074:	6820      	ldr	r0, [r4, #0]
 8019076:	f000 fd34 	bl	8019ae2 <memmove>
 801907a:	68a3      	ldr	r3, [r4, #8]
 801907c:	1b9b      	subs	r3, r3, r6
 801907e:	60a3      	str	r3, [r4, #8]
 8019080:	6823      	ldr	r3, [r4, #0]
 8019082:	441e      	add	r6, r3
 8019084:	6026      	str	r6, [r4, #0]
 8019086:	2000      	movs	r0, #0
 8019088:	e7dc      	b.n	8019044 <__ssputs_r+0x58>
 801908a:	462a      	mov	r2, r5
 801908c:	f000 fd44 	bl	8019b18 <_realloc_r>
 8019090:	4606      	mov	r6, r0
 8019092:	2800      	cmp	r0, #0
 8019094:	d1e2      	bne.n	801905c <__ssputs_r+0x70>
 8019096:	6921      	ldr	r1, [r4, #16]
 8019098:	4650      	mov	r0, sl
 801909a:	f7ff feff 	bl	8018e9c <_free_r>
 801909e:	e7c8      	b.n	8019032 <__ssputs_r+0x46>

080190a0 <_svfiprintf_r>:
 80190a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a4:	461d      	mov	r5, r3
 80190a6:	898b      	ldrh	r3, [r1, #12]
 80190a8:	061f      	lsls	r7, r3, #24
 80190aa:	b09d      	sub	sp, #116	; 0x74
 80190ac:	4680      	mov	r8, r0
 80190ae:	460c      	mov	r4, r1
 80190b0:	4616      	mov	r6, r2
 80190b2:	d50f      	bpl.n	80190d4 <_svfiprintf_r+0x34>
 80190b4:	690b      	ldr	r3, [r1, #16]
 80190b6:	b96b      	cbnz	r3, 80190d4 <_svfiprintf_r+0x34>
 80190b8:	2140      	movs	r1, #64	; 0x40
 80190ba:	f7ff ff3d 	bl	8018f38 <_malloc_r>
 80190be:	6020      	str	r0, [r4, #0]
 80190c0:	6120      	str	r0, [r4, #16]
 80190c2:	b928      	cbnz	r0, 80190d0 <_svfiprintf_r+0x30>
 80190c4:	230c      	movs	r3, #12
 80190c6:	f8c8 3000 	str.w	r3, [r8]
 80190ca:	f04f 30ff 	mov.w	r0, #4294967295
 80190ce:	e0c8      	b.n	8019262 <_svfiprintf_r+0x1c2>
 80190d0:	2340      	movs	r3, #64	; 0x40
 80190d2:	6163      	str	r3, [r4, #20]
 80190d4:	2300      	movs	r3, #0
 80190d6:	9309      	str	r3, [sp, #36]	; 0x24
 80190d8:	2320      	movs	r3, #32
 80190da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190de:	2330      	movs	r3, #48	; 0x30
 80190e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190e4:	9503      	str	r5, [sp, #12]
 80190e6:	f04f 0b01 	mov.w	fp, #1
 80190ea:	4637      	mov	r7, r6
 80190ec:	463d      	mov	r5, r7
 80190ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80190f2:	b10b      	cbz	r3, 80190f8 <_svfiprintf_r+0x58>
 80190f4:	2b25      	cmp	r3, #37	; 0x25
 80190f6:	d13e      	bne.n	8019176 <_svfiprintf_r+0xd6>
 80190f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80190fc:	d00b      	beq.n	8019116 <_svfiprintf_r+0x76>
 80190fe:	4653      	mov	r3, sl
 8019100:	4632      	mov	r2, r6
 8019102:	4621      	mov	r1, r4
 8019104:	4640      	mov	r0, r8
 8019106:	f7ff ff71 	bl	8018fec <__ssputs_r>
 801910a:	3001      	adds	r0, #1
 801910c:	f000 80a4 	beq.w	8019258 <_svfiprintf_r+0x1b8>
 8019110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019112:	4453      	add	r3, sl
 8019114:	9309      	str	r3, [sp, #36]	; 0x24
 8019116:	783b      	ldrb	r3, [r7, #0]
 8019118:	2b00      	cmp	r3, #0
 801911a:	f000 809d 	beq.w	8019258 <_svfiprintf_r+0x1b8>
 801911e:	2300      	movs	r3, #0
 8019120:	f04f 32ff 	mov.w	r2, #4294967295
 8019124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019128:	9304      	str	r3, [sp, #16]
 801912a:	9307      	str	r3, [sp, #28]
 801912c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019130:	931a      	str	r3, [sp, #104]	; 0x68
 8019132:	462f      	mov	r7, r5
 8019134:	2205      	movs	r2, #5
 8019136:	f817 1b01 	ldrb.w	r1, [r7], #1
 801913a:	4850      	ldr	r0, [pc, #320]	; (801927c <_svfiprintf_r+0x1dc>)
 801913c:	f7e7 f868 	bl	8000210 <memchr>
 8019140:	9b04      	ldr	r3, [sp, #16]
 8019142:	b9d0      	cbnz	r0, 801917a <_svfiprintf_r+0xda>
 8019144:	06d9      	lsls	r1, r3, #27
 8019146:	bf44      	itt	mi
 8019148:	2220      	movmi	r2, #32
 801914a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801914e:	071a      	lsls	r2, r3, #28
 8019150:	bf44      	itt	mi
 8019152:	222b      	movmi	r2, #43	; 0x2b
 8019154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019158:	782a      	ldrb	r2, [r5, #0]
 801915a:	2a2a      	cmp	r2, #42	; 0x2a
 801915c:	d015      	beq.n	801918a <_svfiprintf_r+0xea>
 801915e:	9a07      	ldr	r2, [sp, #28]
 8019160:	462f      	mov	r7, r5
 8019162:	2000      	movs	r0, #0
 8019164:	250a      	movs	r5, #10
 8019166:	4639      	mov	r1, r7
 8019168:	f811 3b01 	ldrb.w	r3, [r1], #1
 801916c:	3b30      	subs	r3, #48	; 0x30
 801916e:	2b09      	cmp	r3, #9
 8019170:	d94d      	bls.n	801920e <_svfiprintf_r+0x16e>
 8019172:	b1b8      	cbz	r0, 80191a4 <_svfiprintf_r+0x104>
 8019174:	e00f      	b.n	8019196 <_svfiprintf_r+0xf6>
 8019176:	462f      	mov	r7, r5
 8019178:	e7b8      	b.n	80190ec <_svfiprintf_r+0x4c>
 801917a:	4a40      	ldr	r2, [pc, #256]	; (801927c <_svfiprintf_r+0x1dc>)
 801917c:	1a80      	subs	r0, r0, r2
 801917e:	fa0b f000 	lsl.w	r0, fp, r0
 8019182:	4318      	orrs	r0, r3
 8019184:	9004      	str	r0, [sp, #16]
 8019186:	463d      	mov	r5, r7
 8019188:	e7d3      	b.n	8019132 <_svfiprintf_r+0x92>
 801918a:	9a03      	ldr	r2, [sp, #12]
 801918c:	1d11      	adds	r1, r2, #4
 801918e:	6812      	ldr	r2, [r2, #0]
 8019190:	9103      	str	r1, [sp, #12]
 8019192:	2a00      	cmp	r2, #0
 8019194:	db01      	blt.n	801919a <_svfiprintf_r+0xfa>
 8019196:	9207      	str	r2, [sp, #28]
 8019198:	e004      	b.n	80191a4 <_svfiprintf_r+0x104>
 801919a:	4252      	negs	r2, r2
 801919c:	f043 0302 	orr.w	r3, r3, #2
 80191a0:	9207      	str	r2, [sp, #28]
 80191a2:	9304      	str	r3, [sp, #16]
 80191a4:	783b      	ldrb	r3, [r7, #0]
 80191a6:	2b2e      	cmp	r3, #46	; 0x2e
 80191a8:	d10c      	bne.n	80191c4 <_svfiprintf_r+0x124>
 80191aa:	787b      	ldrb	r3, [r7, #1]
 80191ac:	2b2a      	cmp	r3, #42	; 0x2a
 80191ae:	d133      	bne.n	8019218 <_svfiprintf_r+0x178>
 80191b0:	9b03      	ldr	r3, [sp, #12]
 80191b2:	1d1a      	adds	r2, r3, #4
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	9203      	str	r2, [sp, #12]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	bfb8      	it	lt
 80191bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80191c0:	3702      	adds	r7, #2
 80191c2:	9305      	str	r3, [sp, #20]
 80191c4:	4d2e      	ldr	r5, [pc, #184]	; (8019280 <_svfiprintf_r+0x1e0>)
 80191c6:	7839      	ldrb	r1, [r7, #0]
 80191c8:	2203      	movs	r2, #3
 80191ca:	4628      	mov	r0, r5
 80191cc:	f7e7 f820 	bl	8000210 <memchr>
 80191d0:	b138      	cbz	r0, 80191e2 <_svfiprintf_r+0x142>
 80191d2:	2340      	movs	r3, #64	; 0x40
 80191d4:	1b40      	subs	r0, r0, r5
 80191d6:	fa03 f000 	lsl.w	r0, r3, r0
 80191da:	9b04      	ldr	r3, [sp, #16]
 80191dc:	4303      	orrs	r3, r0
 80191de:	3701      	adds	r7, #1
 80191e0:	9304      	str	r3, [sp, #16]
 80191e2:	7839      	ldrb	r1, [r7, #0]
 80191e4:	4827      	ldr	r0, [pc, #156]	; (8019284 <_svfiprintf_r+0x1e4>)
 80191e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191ea:	2206      	movs	r2, #6
 80191ec:	1c7e      	adds	r6, r7, #1
 80191ee:	f7e7 f80f 	bl	8000210 <memchr>
 80191f2:	2800      	cmp	r0, #0
 80191f4:	d038      	beq.n	8019268 <_svfiprintf_r+0x1c8>
 80191f6:	4b24      	ldr	r3, [pc, #144]	; (8019288 <_svfiprintf_r+0x1e8>)
 80191f8:	bb13      	cbnz	r3, 8019240 <_svfiprintf_r+0x1a0>
 80191fa:	9b03      	ldr	r3, [sp, #12]
 80191fc:	3307      	adds	r3, #7
 80191fe:	f023 0307 	bic.w	r3, r3, #7
 8019202:	3308      	adds	r3, #8
 8019204:	9303      	str	r3, [sp, #12]
 8019206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019208:	444b      	add	r3, r9
 801920a:	9309      	str	r3, [sp, #36]	; 0x24
 801920c:	e76d      	b.n	80190ea <_svfiprintf_r+0x4a>
 801920e:	fb05 3202 	mla	r2, r5, r2, r3
 8019212:	2001      	movs	r0, #1
 8019214:	460f      	mov	r7, r1
 8019216:	e7a6      	b.n	8019166 <_svfiprintf_r+0xc6>
 8019218:	2300      	movs	r3, #0
 801921a:	3701      	adds	r7, #1
 801921c:	9305      	str	r3, [sp, #20]
 801921e:	4619      	mov	r1, r3
 8019220:	250a      	movs	r5, #10
 8019222:	4638      	mov	r0, r7
 8019224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019228:	3a30      	subs	r2, #48	; 0x30
 801922a:	2a09      	cmp	r2, #9
 801922c:	d903      	bls.n	8019236 <_svfiprintf_r+0x196>
 801922e:	2b00      	cmp	r3, #0
 8019230:	d0c8      	beq.n	80191c4 <_svfiprintf_r+0x124>
 8019232:	9105      	str	r1, [sp, #20]
 8019234:	e7c6      	b.n	80191c4 <_svfiprintf_r+0x124>
 8019236:	fb05 2101 	mla	r1, r5, r1, r2
 801923a:	2301      	movs	r3, #1
 801923c:	4607      	mov	r7, r0
 801923e:	e7f0      	b.n	8019222 <_svfiprintf_r+0x182>
 8019240:	ab03      	add	r3, sp, #12
 8019242:	9300      	str	r3, [sp, #0]
 8019244:	4622      	mov	r2, r4
 8019246:	4b11      	ldr	r3, [pc, #68]	; (801928c <_svfiprintf_r+0x1ec>)
 8019248:	a904      	add	r1, sp, #16
 801924a:	4640      	mov	r0, r8
 801924c:	f7fc fb60 	bl	8015910 <_printf_float>
 8019250:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019254:	4681      	mov	r9, r0
 8019256:	d1d6      	bne.n	8019206 <_svfiprintf_r+0x166>
 8019258:	89a3      	ldrh	r3, [r4, #12]
 801925a:	065b      	lsls	r3, r3, #25
 801925c:	f53f af35 	bmi.w	80190ca <_svfiprintf_r+0x2a>
 8019260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019262:	b01d      	add	sp, #116	; 0x74
 8019264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019268:	ab03      	add	r3, sp, #12
 801926a:	9300      	str	r3, [sp, #0]
 801926c:	4622      	mov	r2, r4
 801926e:	4b07      	ldr	r3, [pc, #28]	; (801928c <_svfiprintf_r+0x1ec>)
 8019270:	a904      	add	r1, sp, #16
 8019272:	4640      	mov	r0, r8
 8019274:	f7fc fe02 	bl	8015e7c <_printf_i>
 8019278:	e7ea      	b.n	8019250 <_svfiprintf_r+0x1b0>
 801927a:	bf00      	nop
 801927c:	0801a3fc 	.word	0x0801a3fc
 8019280:	0801a402 	.word	0x0801a402
 8019284:	0801a406 	.word	0x0801a406
 8019288:	08015911 	.word	0x08015911
 801928c:	08018fed 	.word	0x08018fed

08019290 <_sungetc_r>:
 8019290:	b538      	push	{r3, r4, r5, lr}
 8019292:	1c4b      	adds	r3, r1, #1
 8019294:	4614      	mov	r4, r2
 8019296:	d103      	bne.n	80192a0 <_sungetc_r+0x10>
 8019298:	f04f 35ff 	mov.w	r5, #4294967295
 801929c:	4628      	mov	r0, r5
 801929e:	bd38      	pop	{r3, r4, r5, pc}
 80192a0:	8993      	ldrh	r3, [r2, #12]
 80192a2:	f023 0320 	bic.w	r3, r3, #32
 80192a6:	8193      	strh	r3, [r2, #12]
 80192a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80192aa:	6852      	ldr	r2, [r2, #4]
 80192ac:	b2cd      	uxtb	r5, r1
 80192ae:	b18b      	cbz	r3, 80192d4 <_sungetc_r+0x44>
 80192b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80192b2:	4293      	cmp	r3, r2
 80192b4:	dd08      	ble.n	80192c8 <_sungetc_r+0x38>
 80192b6:	6823      	ldr	r3, [r4, #0]
 80192b8:	1e5a      	subs	r2, r3, #1
 80192ba:	6022      	str	r2, [r4, #0]
 80192bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80192c0:	6863      	ldr	r3, [r4, #4]
 80192c2:	3301      	adds	r3, #1
 80192c4:	6063      	str	r3, [r4, #4]
 80192c6:	e7e9      	b.n	801929c <_sungetc_r+0xc>
 80192c8:	4621      	mov	r1, r4
 80192ca:	f000 fbc3 	bl	8019a54 <__submore>
 80192ce:	2800      	cmp	r0, #0
 80192d0:	d0f1      	beq.n	80192b6 <_sungetc_r+0x26>
 80192d2:	e7e1      	b.n	8019298 <_sungetc_r+0x8>
 80192d4:	6921      	ldr	r1, [r4, #16]
 80192d6:	6823      	ldr	r3, [r4, #0]
 80192d8:	b151      	cbz	r1, 80192f0 <_sungetc_r+0x60>
 80192da:	4299      	cmp	r1, r3
 80192dc:	d208      	bcs.n	80192f0 <_sungetc_r+0x60>
 80192de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80192e2:	42a9      	cmp	r1, r5
 80192e4:	d104      	bne.n	80192f0 <_sungetc_r+0x60>
 80192e6:	3b01      	subs	r3, #1
 80192e8:	3201      	adds	r2, #1
 80192ea:	6023      	str	r3, [r4, #0]
 80192ec:	6062      	str	r2, [r4, #4]
 80192ee:	e7d5      	b.n	801929c <_sungetc_r+0xc>
 80192f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80192f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192f8:	6363      	str	r3, [r4, #52]	; 0x34
 80192fa:	2303      	movs	r3, #3
 80192fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80192fe:	4623      	mov	r3, r4
 8019300:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019304:	6023      	str	r3, [r4, #0]
 8019306:	2301      	movs	r3, #1
 8019308:	e7dc      	b.n	80192c4 <_sungetc_r+0x34>

0801930a <__ssrefill_r>:
 801930a:	b510      	push	{r4, lr}
 801930c:	460c      	mov	r4, r1
 801930e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019310:	b169      	cbz	r1, 801932e <__ssrefill_r+0x24>
 8019312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019316:	4299      	cmp	r1, r3
 8019318:	d001      	beq.n	801931e <__ssrefill_r+0x14>
 801931a:	f7ff fdbf 	bl	8018e9c <_free_r>
 801931e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019320:	6063      	str	r3, [r4, #4]
 8019322:	2000      	movs	r0, #0
 8019324:	6360      	str	r0, [r4, #52]	; 0x34
 8019326:	b113      	cbz	r3, 801932e <__ssrefill_r+0x24>
 8019328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801932a:	6023      	str	r3, [r4, #0]
 801932c:	bd10      	pop	{r4, pc}
 801932e:	6923      	ldr	r3, [r4, #16]
 8019330:	6023      	str	r3, [r4, #0]
 8019332:	2300      	movs	r3, #0
 8019334:	6063      	str	r3, [r4, #4]
 8019336:	89a3      	ldrh	r3, [r4, #12]
 8019338:	f043 0320 	orr.w	r3, r3, #32
 801933c:	81a3      	strh	r3, [r4, #12]
 801933e:	f04f 30ff 	mov.w	r0, #4294967295
 8019342:	e7f3      	b.n	801932c <__ssrefill_r+0x22>

08019344 <__ssvfiscanf_r>:
 8019344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019348:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801934c:	460c      	mov	r4, r1
 801934e:	2100      	movs	r1, #0
 8019350:	9144      	str	r1, [sp, #272]	; 0x110
 8019352:	9145      	str	r1, [sp, #276]	; 0x114
 8019354:	499f      	ldr	r1, [pc, #636]	; (80195d4 <__ssvfiscanf_r+0x290>)
 8019356:	91a0      	str	r1, [sp, #640]	; 0x280
 8019358:	f10d 0804 	add.w	r8, sp, #4
 801935c:	499e      	ldr	r1, [pc, #632]	; (80195d8 <__ssvfiscanf_r+0x294>)
 801935e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80195dc <__ssvfiscanf_r+0x298>
 8019362:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019366:	4606      	mov	r6, r0
 8019368:	4692      	mov	sl, r2
 801936a:	91a1      	str	r1, [sp, #644]	; 0x284
 801936c:	9300      	str	r3, [sp, #0]
 801936e:	270a      	movs	r7, #10
 8019370:	f89a 3000 	ldrb.w	r3, [sl]
 8019374:	2b00      	cmp	r3, #0
 8019376:	f000 812a 	beq.w	80195ce <__ssvfiscanf_r+0x28a>
 801937a:	4655      	mov	r5, sl
 801937c:	f7ff f93e 	bl	80185fc <__locale_ctype_ptr>
 8019380:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019384:	4458      	add	r0, fp
 8019386:	7843      	ldrb	r3, [r0, #1]
 8019388:	f013 0308 	ands.w	r3, r3, #8
 801938c:	d01c      	beq.n	80193c8 <__ssvfiscanf_r+0x84>
 801938e:	6863      	ldr	r3, [r4, #4]
 8019390:	2b00      	cmp	r3, #0
 8019392:	dd12      	ble.n	80193ba <__ssvfiscanf_r+0x76>
 8019394:	f7ff f932 	bl	80185fc <__locale_ctype_ptr>
 8019398:	6823      	ldr	r3, [r4, #0]
 801939a:	781a      	ldrb	r2, [r3, #0]
 801939c:	4410      	add	r0, r2
 801939e:	7842      	ldrb	r2, [r0, #1]
 80193a0:	0712      	lsls	r2, r2, #28
 80193a2:	d401      	bmi.n	80193a8 <__ssvfiscanf_r+0x64>
 80193a4:	46aa      	mov	sl, r5
 80193a6:	e7e3      	b.n	8019370 <__ssvfiscanf_r+0x2c>
 80193a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80193aa:	3201      	adds	r2, #1
 80193ac:	9245      	str	r2, [sp, #276]	; 0x114
 80193ae:	6862      	ldr	r2, [r4, #4]
 80193b0:	3301      	adds	r3, #1
 80193b2:	3a01      	subs	r2, #1
 80193b4:	6062      	str	r2, [r4, #4]
 80193b6:	6023      	str	r3, [r4, #0]
 80193b8:	e7e9      	b.n	801938e <__ssvfiscanf_r+0x4a>
 80193ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80193bc:	4621      	mov	r1, r4
 80193be:	4630      	mov	r0, r6
 80193c0:	4798      	blx	r3
 80193c2:	2800      	cmp	r0, #0
 80193c4:	d0e6      	beq.n	8019394 <__ssvfiscanf_r+0x50>
 80193c6:	e7ed      	b.n	80193a4 <__ssvfiscanf_r+0x60>
 80193c8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80193cc:	f040 8082 	bne.w	80194d4 <__ssvfiscanf_r+0x190>
 80193d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80193d2:	9341      	str	r3, [sp, #260]	; 0x104
 80193d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80193d8:	2b2a      	cmp	r3, #42	; 0x2a
 80193da:	d103      	bne.n	80193e4 <__ssvfiscanf_r+0xa0>
 80193dc:	2310      	movs	r3, #16
 80193de:	9341      	str	r3, [sp, #260]	; 0x104
 80193e0:	f10a 0502 	add.w	r5, sl, #2
 80193e4:	46aa      	mov	sl, r5
 80193e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80193ea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80193ee:	2a09      	cmp	r2, #9
 80193f0:	d922      	bls.n	8019438 <__ssvfiscanf_r+0xf4>
 80193f2:	2203      	movs	r2, #3
 80193f4:	4879      	ldr	r0, [pc, #484]	; (80195dc <__ssvfiscanf_r+0x298>)
 80193f6:	f7e6 ff0b 	bl	8000210 <memchr>
 80193fa:	b138      	cbz	r0, 801940c <__ssvfiscanf_r+0xc8>
 80193fc:	eba0 0309 	sub.w	r3, r0, r9
 8019400:	2001      	movs	r0, #1
 8019402:	4098      	lsls	r0, r3
 8019404:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019406:	4318      	orrs	r0, r3
 8019408:	9041      	str	r0, [sp, #260]	; 0x104
 801940a:	46aa      	mov	sl, r5
 801940c:	f89a 3000 	ldrb.w	r3, [sl]
 8019410:	2b67      	cmp	r3, #103	; 0x67
 8019412:	f10a 0501 	add.w	r5, sl, #1
 8019416:	d82b      	bhi.n	8019470 <__ssvfiscanf_r+0x12c>
 8019418:	2b65      	cmp	r3, #101	; 0x65
 801941a:	f080 809f 	bcs.w	801955c <__ssvfiscanf_r+0x218>
 801941e:	2b47      	cmp	r3, #71	; 0x47
 8019420:	d810      	bhi.n	8019444 <__ssvfiscanf_r+0x100>
 8019422:	2b45      	cmp	r3, #69	; 0x45
 8019424:	f080 809a 	bcs.w	801955c <__ssvfiscanf_r+0x218>
 8019428:	2b00      	cmp	r3, #0
 801942a:	d06c      	beq.n	8019506 <__ssvfiscanf_r+0x1c2>
 801942c:	2b25      	cmp	r3, #37	; 0x25
 801942e:	d051      	beq.n	80194d4 <__ssvfiscanf_r+0x190>
 8019430:	2303      	movs	r3, #3
 8019432:	9347      	str	r3, [sp, #284]	; 0x11c
 8019434:	9742      	str	r7, [sp, #264]	; 0x108
 8019436:	e027      	b.n	8019488 <__ssvfiscanf_r+0x144>
 8019438:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801943a:	fb07 1303 	mla	r3, r7, r3, r1
 801943e:	3b30      	subs	r3, #48	; 0x30
 8019440:	9343      	str	r3, [sp, #268]	; 0x10c
 8019442:	e7cf      	b.n	80193e4 <__ssvfiscanf_r+0xa0>
 8019444:	2b5b      	cmp	r3, #91	; 0x5b
 8019446:	d06a      	beq.n	801951e <__ssvfiscanf_r+0x1da>
 8019448:	d80c      	bhi.n	8019464 <__ssvfiscanf_r+0x120>
 801944a:	2b58      	cmp	r3, #88	; 0x58
 801944c:	d1f0      	bne.n	8019430 <__ssvfiscanf_r+0xec>
 801944e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019454:	9241      	str	r2, [sp, #260]	; 0x104
 8019456:	2210      	movs	r2, #16
 8019458:	9242      	str	r2, [sp, #264]	; 0x108
 801945a:	2b6e      	cmp	r3, #110	; 0x6e
 801945c:	bf8c      	ite	hi
 801945e:	2304      	movhi	r3, #4
 8019460:	2303      	movls	r3, #3
 8019462:	e010      	b.n	8019486 <__ssvfiscanf_r+0x142>
 8019464:	2b63      	cmp	r3, #99	; 0x63
 8019466:	d065      	beq.n	8019534 <__ssvfiscanf_r+0x1f0>
 8019468:	2b64      	cmp	r3, #100	; 0x64
 801946a:	d1e1      	bne.n	8019430 <__ssvfiscanf_r+0xec>
 801946c:	9742      	str	r7, [sp, #264]	; 0x108
 801946e:	e7f4      	b.n	801945a <__ssvfiscanf_r+0x116>
 8019470:	2b70      	cmp	r3, #112	; 0x70
 8019472:	d04b      	beq.n	801950c <__ssvfiscanf_r+0x1c8>
 8019474:	d826      	bhi.n	80194c4 <__ssvfiscanf_r+0x180>
 8019476:	2b6e      	cmp	r3, #110	; 0x6e
 8019478:	d062      	beq.n	8019540 <__ssvfiscanf_r+0x1fc>
 801947a:	d84c      	bhi.n	8019516 <__ssvfiscanf_r+0x1d2>
 801947c:	2b69      	cmp	r3, #105	; 0x69
 801947e:	d1d7      	bne.n	8019430 <__ssvfiscanf_r+0xec>
 8019480:	2300      	movs	r3, #0
 8019482:	9342      	str	r3, [sp, #264]	; 0x108
 8019484:	2303      	movs	r3, #3
 8019486:	9347      	str	r3, [sp, #284]	; 0x11c
 8019488:	6863      	ldr	r3, [r4, #4]
 801948a:	2b00      	cmp	r3, #0
 801948c:	dd68      	ble.n	8019560 <__ssvfiscanf_r+0x21c>
 801948e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019490:	0659      	lsls	r1, r3, #25
 8019492:	d407      	bmi.n	80194a4 <__ssvfiscanf_r+0x160>
 8019494:	f7ff f8b2 	bl	80185fc <__locale_ctype_ptr>
 8019498:	6823      	ldr	r3, [r4, #0]
 801949a:	781a      	ldrb	r2, [r3, #0]
 801949c:	4410      	add	r0, r2
 801949e:	7842      	ldrb	r2, [r0, #1]
 80194a0:	0712      	lsls	r2, r2, #28
 80194a2:	d464      	bmi.n	801956e <__ssvfiscanf_r+0x22a>
 80194a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80194a6:	2b02      	cmp	r3, #2
 80194a8:	dc73      	bgt.n	8019592 <__ssvfiscanf_r+0x24e>
 80194aa:	466b      	mov	r3, sp
 80194ac:	4622      	mov	r2, r4
 80194ae:	a941      	add	r1, sp, #260	; 0x104
 80194b0:	4630      	mov	r0, r6
 80194b2:	f000 f897 	bl	80195e4 <_scanf_chars>
 80194b6:	2801      	cmp	r0, #1
 80194b8:	f000 8089 	beq.w	80195ce <__ssvfiscanf_r+0x28a>
 80194bc:	2802      	cmp	r0, #2
 80194be:	f47f af71 	bne.w	80193a4 <__ssvfiscanf_r+0x60>
 80194c2:	e01d      	b.n	8019500 <__ssvfiscanf_r+0x1bc>
 80194c4:	2b75      	cmp	r3, #117	; 0x75
 80194c6:	d0d1      	beq.n	801946c <__ssvfiscanf_r+0x128>
 80194c8:	2b78      	cmp	r3, #120	; 0x78
 80194ca:	d0c0      	beq.n	801944e <__ssvfiscanf_r+0x10a>
 80194cc:	2b73      	cmp	r3, #115	; 0x73
 80194ce:	d1af      	bne.n	8019430 <__ssvfiscanf_r+0xec>
 80194d0:	2302      	movs	r3, #2
 80194d2:	e7d8      	b.n	8019486 <__ssvfiscanf_r+0x142>
 80194d4:	6863      	ldr	r3, [r4, #4]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	dd0c      	ble.n	80194f4 <__ssvfiscanf_r+0x1b0>
 80194da:	6823      	ldr	r3, [r4, #0]
 80194dc:	781a      	ldrb	r2, [r3, #0]
 80194de:	455a      	cmp	r2, fp
 80194e0:	d175      	bne.n	80195ce <__ssvfiscanf_r+0x28a>
 80194e2:	3301      	adds	r3, #1
 80194e4:	6862      	ldr	r2, [r4, #4]
 80194e6:	6023      	str	r3, [r4, #0]
 80194e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80194ea:	3a01      	subs	r2, #1
 80194ec:	3301      	adds	r3, #1
 80194ee:	6062      	str	r2, [r4, #4]
 80194f0:	9345      	str	r3, [sp, #276]	; 0x114
 80194f2:	e757      	b.n	80193a4 <__ssvfiscanf_r+0x60>
 80194f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80194f6:	4621      	mov	r1, r4
 80194f8:	4630      	mov	r0, r6
 80194fa:	4798      	blx	r3
 80194fc:	2800      	cmp	r0, #0
 80194fe:	d0ec      	beq.n	80194da <__ssvfiscanf_r+0x196>
 8019500:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019502:	2800      	cmp	r0, #0
 8019504:	d159      	bne.n	80195ba <__ssvfiscanf_r+0x276>
 8019506:	f04f 30ff 	mov.w	r0, #4294967295
 801950a:	e05c      	b.n	80195c6 <__ssvfiscanf_r+0x282>
 801950c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801950e:	f042 0220 	orr.w	r2, r2, #32
 8019512:	9241      	str	r2, [sp, #260]	; 0x104
 8019514:	e79b      	b.n	801944e <__ssvfiscanf_r+0x10a>
 8019516:	2308      	movs	r3, #8
 8019518:	9342      	str	r3, [sp, #264]	; 0x108
 801951a:	2304      	movs	r3, #4
 801951c:	e7b3      	b.n	8019486 <__ssvfiscanf_r+0x142>
 801951e:	4629      	mov	r1, r5
 8019520:	4640      	mov	r0, r8
 8019522:	f000 f9c7 	bl	80198b4 <__sccl>
 8019526:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801952c:	9341      	str	r3, [sp, #260]	; 0x104
 801952e:	4605      	mov	r5, r0
 8019530:	2301      	movs	r3, #1
 8019532:	e7a8      	b.n	8019486 <__ssvfiscanf_r+0x142>
 8019534:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801953a:	9341      	str	r3, [sp, #260]	; 0x104
 801953c:	2300      	movs	r3, #0
 801953e:	e7a2      	b.n	8019486 <__ssvfiscanf_r+0x142>
 8019540:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019542:	06c3      	lsls	r3, r0, #27
 8019544:	f53f af2e 	bmi.w	80193a4 <__ssvfiscanf_r+0x60>
 8019548:	9b00      	ldr	r3, [sp, #0]
 801954a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801954c:	1d19      	adds	r1, r3, #4
 801954e:	9100      	str	r1, [sp, #0]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	07c0      	lsls	r0, r0, #31
 8019554:	bf4c      	ite	mi
 8019556:	801a      	strhmi	r2, [r3, #0]
 8019558:	601a      	strpl	r2, [r3, #0]
 801955a:	e723      	b.n	80193a4 <__ssvfiscanf_r+0x60>
 801955c:	2305      	movs	r3, #5
 801955e:	e792      	b.n	8019486 <__ssvfiscanf_r+0x142>
 8019560:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019562:	4621      	mov	r1, r4
 8019564:	4630      	mov	r0, r6
 8019566:	4798      	blx	r3
 8019568:	2800      	cmp	r0, #0
 801956a:	d090      	beq.n	801948e <__ssvfiscanf_r+0x14a>
 801956c:	e7c8      	b.n	8019500 <__ssvfiscanf_r+0x1bc>
 801956e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019570:	3201      	adds	r2, #1
 8019572:	9245      	str	r2, [sp, #276]	; 0x114
 8019574:	6862      	ldr	r2, [r4, #4]
 8019576:	3a01      	subs	r2, #1
 8019578:	2a00      	cmp	r2, #0
 801957a:	6062      	str	r2, [r4, #4]
 801957c:	dd02      	ble.n	8019584 <__ssvfiscanf_r+0x240>
 801957e:	3301      	adds	r3, #1
 8019580:	6023      	str	r3, [r4, #0]
 8019582:	e787      	b.n	8019494 <__ssvfiscanf_r+0x150>
 8019584:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019586:	4621      	mov	r1, r4
 8019588:	4630      	mov	r0, r6
 801958a:	4798      	blx	r3
 801958c:	2800      	cmp	r0, #0
 801958e:	d081      	beq.n	8019494 <__ssvfiscanf_r+0x150>
 8019590:	e7b6      	b.n	8019500 <__ssvfiscanf_r+0x1bc>
 8019592:	2b04      	cmp	r3, #4
 8019594:	dc06      	bgt.n	80195a4 <__ssvfiscanf_r+0x260>
 8019596:	466b      	mov	r3, sp
 8019598:	4622      	mov	r2, r4
 801959a:	a941      	add	r1, sp, #260	; 0x104
 801959c:	4630      	mov	r0, r6
 801959e:	f000 f885 	bl	80196ac <_scanf_i>
 80195a2:	e788      	b.n	80194b6 <__ssvfiscanf_r+0x172>
 80195a4:	4b0e      	ldr	r3, [pc, #56]	; (80195e0 <__ssvfiscanf_r+0x29c>)
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f43f aefc 	beq.w	80193a4 <__ssvfiscanf_r+0x60>
 80195ac:	466b      	mov	r3, sp
 80195ae:	4622      	mov	r2, r4
 80195b0:	a941      	add	r1, sp, #260	; 0x104
 80195b2:	4630      	mov	r0, r6
 80195b4:	f7fc fd74 	bl	80160a0 <_scanf_float>
 80195b8:	e77d      	b.n	80194b6 <__ssvfiscanf_r+0x172>
 80195ba:	89a3      	ldrh	r3, [r4, #12]
 80195bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80195c0:	bf18      	it	ne
 80195c2:	f04f 30ff 	movne.w	r0, #4294967295
 80195c6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80195ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80195d0:	e7f9      	b.n	80195c6 <__ssvfiscanf_r+0x282>
 80195d2:	bf00      	nop
 80195d4:	08019291 	.word	0x08019291
 80195d8:	0801930b 	.word	0x0801930b
 80195dc:	0801a402 	.word	0x0801a402
 80195e0:	080160a1 	.word	0x080160a1

080195e4 <_scanf_chars>:
 80195e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195e8:	4615      	mov	r5, r2
 80195ea:	688a      	ldr	r2, [r1, #8]
 80195ec:	4680      	mov	r8, r0
 80195ee:	460c      	mov	r4, r1
 80195f0:	b932      	cbnz	r2, 8019600 <_scanf_chars+0x1c>
 80195f2:	698a      	ldr	r2, [r1, #24]
 80195f4:	2a00      	cmp	r2, #0
 80195f6:	bf14      	ite	ne
 80195f8:	f04f 32ff 	movne.w	r2, #4294967295
 80195fc:	2201      	moveq	r2, #1
 80195fe:	608a      	str	r2, [r1, #8]
 8019600:	6822      	ldr	r2, [r4, #0]
 8019602:	06d1      	lsls	r1, r2, #27
 8019604:	bf5f      	itttt	pl
 8019606:	681a      	ldrpl	r2, [r3, #0]
 8019608:	1d11      	addpl	r1, r2, #4
 801960a:	6019      	strpl	r1, [r3, #0]
 801960c:	6817      	ldrpl	r7, [r2, #0]
 801960e:	2600      	movs	r6, #0
 8019610:	69a3      	ldr	r3, [r4, #24]
 8019612:	b1db      	cbz	r3, 801964c <_scanf_chars+0x68>
 8019614:	2b01      	cmp	r3, #1
 8019616:	d107      	bne.n	8019628 <_scanf_chars+0x44>
 8019618:	682b      	ldr	r3, [r5, #0]
 801961a:	6962      	ldr	r2, [r4, #20]
 801961c:	781b      	ldrb	r3, [r3, #0]
 801961e:	5cd3      	ldrb	r3, [r2, r3]
 8019620:	b9a3      	cbnz	r3, 801964c <_scanf_chars+0x68>
 8019622:	2e00      	cmp	r6, #0
 8019624:	d132      	bne.n	801968c <_scanf_chars+0xa8>
 8019626:	e006      	b.n	8019636 <_scanf_chars+0x52>
 8019628:	2b02      	cmp	r3, #2
 801962a:	d007      	beq.n	801963c <_scanf_chars+0x58>
 801962c:	2e00      	cmp	r6, #0
 801962e:	d12d      	bne.n	801968c <_scanf_chars+0xa8>
 8019630:	69a3      	ldr	r3, [r4, #24]
 8019632:	2b01      	cmp	r3, #1
 8019634:	d12a      	bne.n	801968c <_scanf_chars+0xa8>
 8019636:	2001      	movs	r0, #1
 8019638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801963c:	f7fe ffde 	bl	80185fc <__locale_ctype_ptr>
 8019640:	682b      	ldr	r3, [r5, #0]
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	4418      	add	r0, r3
 8019646:	7843      	ldrb	r3, [r0, #1]
 8019648:	071b      	lsls	r3, r3, #28
 801964a:	d4ef      	bmi.n	801962c <_scanf_chars+0x48>
 801964c:	6823      	ldr	r3, [r4, #0]
 801964e:	06da      	lsls	r2, r3, #27
 8019650:	bf5e      	ittt	pl
 8019652:	682b      	ldrpl	r3, [r5, #0]
 8019654:	781b      	ldrbpl	r3, [r3, #0]
 8019656:	703b      	strbpl	r3, [r7, #0]
 8019658:	682a      	ldr	r2, [r5, #0]
 801965a:	686b      	ldr	r3, [r5, #4]
 801965c:	f102 0201 	add.w	r2, r2, #1
 8019660:	602a      	str	r2, [r5, #0]
 8019662:	68a2      	ldr	r2, [r4, #8]
 8019664:	f103 33ff 	add.w	r3, r3, #4294967295
 8019668:	f102 32ff 	add.w	r2, r2, #4294967295
 801966c:	606b      	str	r3, [r5, #4]
 801966e:	f106 0601 	add.w	r6, r6, #1
 8019672:	bf58      	it	pl
 8019674:	3701      	addpl	r7, #1
 8019676:	60a2      	str	r2, [r4, #8]
 8019678:	b142      	cbz	r2, 801968c <_scanf_chars+0xa8>
 801967a:	2b00      	cmp	r3, #0
 801967c:	dcc8      	bgt.n	8019610 <_scanf_chars+0x2c>
 801967e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019682:	4629      	mov	r1, r5
 8019684:	4640      	mov	r0, r8
 8019686:	4798      	blx	r3
 8019688:	2800      	cmp	r0, #0
 801968a:	d0c1      	beq.n	8019610 <_scanf_chars+0x2c>
 801968c:	6823      	ldr	r3, [r4, #0]
 801968e:	f013 0310 	ands.w	r3, r3, #16
 8019692:	d105      	bne.n	80196a0 <_scanf_chars+0xbc>
 8019694:	68e2      	ldr	r2, [r4, #12]
 8019696:	3201      	adds	r2, #1
 8019698:	60e2      	str	r2, [r4, #12]
 801969a:	69a2      	ldr	r2, [r4, #24]
 801969c:	b102      	cbz	r2, 80196a0 <_scanf_chars+0xbc>
 801969e:	703b      	strb	r3, [r7, #0]
 80196a0:	6923      	ldr	r3, [r4, #16]
 80196a2:	441e      	add	r6, r3
 80196a4:	6126      	str	r6, [r4, #16]
 80196a6:	2000      	movs	r0, #0
 80196a8:	e7c6      	b.n	8019638 <_scanf_chars+0x54>
	...

080196ac <_scanf_i>:
 80196ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b0:	469a      	mov	sl, r3
 80196b2:	4b74      	ldr	r3, [pc, #464]	; (8019884 <_scanf_i+0x1d8>)
 80196b4:	460c      	mov	r4, r1
 80196b6:	4683      	mov	fp, r0
 80196b8:	4616      	mov	r6, r2
 80196ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80196be:	b087      	sub	sp, #28
 80196c0:	ab03      	add	r3, sp, #12
 80196c2:	68a7      	ldr	r7, [r4, #8]
 80196c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80196c8:	4b6f      	ldr	r3, [pc, #444]	; (8019888 <_scanf_i+0x1dc>)
 80196ca:	69a1      	ldr	r1, [r4, #24]
 80196cc:	4a6f      	ldr	r2, [pc, #444]	; (801988c <_scanf_i+0x1e0>)
 80196ce:	2903      	cmp	r1, #3
 80196d0:	bf08      	it	eq
 80196d2:	461a      	moveq	r2, r3
 80196d4:	1e7b      	subs	r3, r7, #1
 80196d6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80196da:	bf84      	itt	hi
 80196dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80196e0:	60a3      	strhi	r3, [r4, #8]
 80196e2:	6823      	ldr	r3, [r4, #0]
 80196e4:	9200      	str	r2, [sp, #0]
 80196e6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80196ea:	bf88      	it	hi
 80196ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80196f0:	f104 091c 	add.w	r9, r4, #28
 80196f4:	6023      	str	r3, [r4, #0]
 80196f6:	bf8c      	ite	hi
 80196f8:	197f      	addhi	r7, r7, r5
 80196fa:	2700      	movls	r7, #0
 80196fc:	464b      	mov	r3, r9
 80196fe:	f04f 0800 	mov.w	r8, #0
 8019702:	9301      	str	r3, [sp, #4]
 8019704:	6831      	ldr	r1, [r6, #0]
 8019706:	ab03      	add	r3, sp, #12
 8019708:	2202      	movs	r2, #2
 801970a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801970e:	7809      	ldrb	r1, [r1, #0]
 8019710:	f7e6 fd7e 	bl	8000210 <memchr>
 8019714:	9b01      	ldr	r3, [sp, #4]
 8019716:	b330      	cbz	r0, 8019766 <_scanf_i+0xba>
 8019718:	f1b8 0f01 	cmp.w	r8, #1
 801971c:	d15a      	bne.n	80197d4 <_scanf_i+0x128>
 801971e:	6862      	ldr	r2, [r4, #4]
 8019720:	b92a      	cbnz	r2, 801972e <_scanf_i+0x82>
 8019722:	6822      	ldr	r2, [r4, #0]
 8019724:	2108      	movs	r1, #8
 8019726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801972a:	6061      	str	r1, [r4, #4]
 801972c:	6022      	str	r2, [r4, #0]
 801972e:	6822      	ldr	r2, [r4, #0]
 8019730:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019734:	6022      	str	r2, [r4, #0]
 8019736:	68a2      	ldr	r2, [r4, #8]
 8019738:	1e51      	subs	r1, r2, #1
 801973a:	60a1      	str	r1, [r4, #8]
 801973c:	b19a      	cbz	r2, 8019766 <_scanf_i+0xba>
 801973e:	6832      	ldr	r2, [r6, #0]
 8019740:	1c51      	adds	r1, r2, #1
 8019742:	6031      	str	r1, [r6, #0]
 8019744:	7812      	ldrb	r2, [r2, #0]
 8019746:	701a      	strb	r2, [r3, #0]
 8019748:	1c5d      	adds	r5, r3, #1
 801974a:	6873      	ldr	r3, [r6, #4]
 801974c:	3b01      	subs	r3, #1
 801974e:	2b00      	cmp	r3, #0
 8019750:	6073      	str	r3, [r6, #4]
 8019752:	dc07      	bgt.n	8019764 <_scanf_i+0xb8>
 8019754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019758:	4631      	mov	r1, r6
 801975a:	4658      	mov	r0, fp
 801975c:	4798      	blx	r3
 801975e:	2800      	cmp	r0, #0
 8019760:	f040 8086 	bne.w	8019870 <_scanf_i+0x1c4>
 8019764:	462b      	mov	r3, r5
 8019766:	f108 0801 	add.w	r8, r8, #1
 801976a:	f1b8 0f03 	cmp.w	r8, #3
 801976e:	d1c8      	bne.n	8019702 <_scanf_i+0x56>
 8019770:	6862      	ldr	r2, [r4, #4]
 8019772:	b90a      	cbnz	r2, 8019778 <_scanf_i+0xcc>
 8019774:	220a      	movs	r2, #10
 8019776:	6062      	str	r2, [r4, #4]
 8019778:	6862      	ldr	r2, [r4, #4]
 801977a:	4945      	ldr	r1, [pc, #276]	; (8019890 <_scanf_i+0x1e4>)
 801977c:	6960      	ldr	r0, [r4, #20]
 801977e:	9301      	str	r3, [sp, #4]
 8019780:	1a89      	subs	r1, r1, r2
 8019782:	f000 f897 	bl	80198b4 <__sccl>
 8019786:	9b01      	ldr	r3, [sp, #4]
 8019788:	f04f 0800 	mov.w	r8, #0
 801978c:	461d      	mov	r5, r3
 801978e:	68a3      	ldr	r3, [r4, #8]
 8019790:	6822      	ldr	r2, [r4, #0]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d03a      	beq.n	801980c <_scanf_i+0x160>
 8019796:	6831      	ldr	r1, [r6, #0]
 8019798:	6960      	ldr	r0, [r4, #20]
 801979a:	f891 c000 	ldrb.w	ip, [r1]
 801979e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80197a2:	2800      	cmp	r0, #0
 80197a4:	d032      	beq.n	801980c <_scanf_i+0x160>
 80197a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80197aa:	d121      	bne.n	80197f0 <_scanf_i+0x144>
 80197ac:	0510      	lsls	r0, r2, #20
 80197ae:	d51f      	bpl.n	80197f0 <_scanf_i+0x144>
 80197b0:	f108 0801 	add.w	r8, r8, #1
 80197b4:	b117      	cbz	r7, 80197bc <_scanf_i+0x110>
 80197b6:	3301      	adds	r3, #1
 80197b8:	3f01      	subs	r7, #1
 80197ba:	60a3      	str	r3, [r4, #8]
 80197bc:	6873      	ldr	r3, [r6, #4]
 80197be:	3b01      	subs	r3, #1
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	6073      	str	r3, [r6, #4]
 80197c4:	dd1b      	ble.n	80197fe <_scanf_i+0x152>
 80197c6:	6833      	ldr	r3, [r6, #0]
 80197c8:	3301      	adds	r3, #1
 80197ca:	6033      	str	r3, [r6, #0]
 80197cc:	68a3      	ldr	r3, [r4, #8]
 80197ce:	3b01      	subs	r3, #1
 80197d0:	60a3      	str	r3, [r4, #8]
 80197d2:	e7dc      	b.n	801978e <_scanf_i+0xe2>
 80197d4:	f1b8 0f02 	cmp.w	r8, #2
 80197d8:	d1ad      	bne.n	8019736 <_scanf_i+0x8a>
 80197da:	6822      	ldr	r2, [r4, #0]
 80197dc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80197e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80197e4:	d1bf      	bne.n	8019766 <_scanf_i+0xba>
 80197e6:	2110      	movs	r1, #16
 80197e8:	6061      	str	r1, [r4, #4]
 80197ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80197ee:	e7a1      	b.n	8019734 <_scanf_i+0x88>
 80197f0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80197f4:	6022      	str	r2, [r4, #0]
 80197f6:	780b      	ldrb	r3, [r1, #0]
 80197f8:	702b      	strb	r3, [r5, #0]
 80197fa:	3501      	adds	r5, #1
 80197fc:	e7de      	b.n	80197bc <_scanf_i+0x110>
 80197fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019802:	4631      	mov	r1, r6
 8019804:	4658      	mov	r0, fp
 8019806:	4798      	blx	r3
 8019808:	2800      	cmp	r0, #0
 801980a:	d0df      	beq.n	80197cc <_scanf_i+0x120>
 801980c:	6823      	ldr	r3, [r4, #0]
 801980e:	05d9      	lsls	r1, r3, #23
 8019810:	d50c      	bpl.n	801982c <_scanf_i+0x180>
 8019812:	454d      	cmp	r5, r9
 8019814:	d908      	bls.n	8019828 <_scanf_i+0x17c>
 8019816:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801981a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801981e:	4632      	mov	r2, r6
 8019820:	4658      	mov	r0, fp
 8019822:	4798      	blx	r3
 8019824:	1e6f      	subs	r7, r5, #1
 8019826:	463d      	mov	r5, r7
 8019828:	454d      	cmp	r5, r9
 801982a:	d029      	beq.n	8019880 <_scanf_i+0x1d4>
 801982c:	6822      	ldr	r2, [r4, #0]
 801982e:	f012 0210 	ands.w	r2, r2, #16
 8019832:	d113      	bne.n	801985c <_scanf_i+0x1b0>
 8019834:	702a      	strb	r2, [r5, #0]
 8019836:	6863      	ldr	r3, [r4, #4]
 8019838:	9e00      	ldr	r6, [sp, #0]
 801983a:	4649      	mov	r1, r9
 801983c:	4658      	mov	r0, fp
 801983e:	47b0      	blx	r6
 8019840:	f8da 3000 	ldr.w	r3, [sl]
 8019844:	6821      	ldr	r1, [r4, #0]
 8019846:	1d1a      	adds	r2, r3, #4
 8019848:	f8ca 2000 	str.w	r2, [sl]
 801984c:	f011 0f20 	tst.w	r1, #32
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	d010      	beq.n	8019876 <_scanf_i+0x1ca>
 8019854:	6018      	str	r0, [r3, #0]
 8019856:	68e3      	ldr	r3, [r4, #12]
 8019858:	3301      	adds	r3, #1
 801985a:	60e3      	str	r3, [r4, #12]
 801985c:	eba5 0509 	sub.w	r5, r5, r9
 8019860:	44a8      	add	r8, r5
 8019862:	6925      	ldr	r5, [r4, #16]
 8019864:	4445      	add	r5, r8
 8019866:	6125      	str	r5, [r4, #16]
 8019868:	2000      	movs	r0, #0
 801986a:	b007      	add	sp, #28
 801986c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019870:	f04f 0800 	mov.w	r8, #0
 8019874:	e7ca      	b.n	801980c <_scanf_i+0x160>
 8019876:	07ca      	lsls	r2, r1, #31
 8019878:	bf4c      	ite	mi
 801987a:	8018      	strhmi	r0, [r3, #0]
 801987c:	6018      	strpl	r0, [r3, #0]
 801987e:	e7ea      	b.n	8019856 <_scanf_i+0x1aa>
 8019880:	2001      	movs	r0, #1
 8019882:	e7f2      	b.n	801986a <_scanf_i+0x1be>
 8019884:	08019fc4 	.word	0x08019fc4
 8019888:	080172b9 	.word	0x080172b9
 801988c:	08019a31 	.word	0x08019a31
 8019890:	0801a41d 	.word	0x0801a41d

08019894 <_sbrk_r>:
 8019894:	b538      	push	{r3, r4, r5, lr}
 8019896:	4c06      	ldr	r4, [pc, #24]	; (80198b0 <_sbrk_r+0x1c>)
 8019898:	2300      	movs	r3, #0
 801989a:	4605      	mov	r5, r0
 801989c:	4608      	mov	r0, r1
 801989e:	6023      	str	r3, [r4, #0]
 80198a0:	f7ed ffee 	bl	8007880 <_sbrk>
 80198a4:	1c43      	adds	r3, r0, #1
 80198a6:	d102      	bne.n	80198ae <_sbrk_r+0x1a>
 80198a8:	6823      	ldr	r3, [r4, #0]
 80198aa:	b103      	cbz	r3, 80198ae <_sbrk_r+0x1a>
 80198ac:	602b      	str	r3, [r5, #0]
 80198ae:	bd38      	pop	{r3, r4, r5, pc}
 80198b0:	20046c9c 	.word	0x20046c9c

080198b4 <__sccl>:
 80198b4:	b570      	push	{r4, r5, r6, lr}
 80198b6:	780b      	ldrb	r3, [r1, #0]
 80198b8:	2b5e      	cmp	r3, #94	; 0x5e
 80198ba:	bf13      	iteet	ne
 80198bc:	1c4a      	addne	r2, r1, #1
 80198be:	1c8a      	addeq	r2, r1, #2
 80198c0:	784b      	ldrbeq	r3, [r1, #1]
 80198c2:	2100      	movne	r1, #0
 80198c4:	bf08      	it	eq
 80198c6:	2101      	moveq	r1, #1
 80198c8:	1e44      	subs	r4, r0, #1
 80198ca:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80198ce:	f804 1f01 	strb.w	r1, [r4, #1]!
 80198d2:	42ac      	cmp	r4, r5
 80198d4:	d1fb      	bne.n	80198ce <__sccl+0x1a>
 80198d6:	b913      	cbnz	r3, 80198de <__sccl+0x2a>
 80198d8:	3a01      	subs	r2, #1
 80198da:	4610      	mov	r0, r2
 80198dc:	bd70      	pop	{r4, r5, r6, pc}
 80198de:	f081 0401 	eor.w	r4, r1, #1
 80198e2:	54c4      	strb	r4, [r0, r3]
 80198e4:	1c51      	adds	r1, r2, #1
 80198e6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80198ea:	2d2d      	cmp	r5, #45	; 0x2d
 80198ec:	f101 36ff 	add.w	r6, r1, #4294967295
 80198f0:	460a      	mov	r2, r1
 80198f2:	d006      	beq.n	8019902 <__sccl+0x4e>
 80198f4:	2d5d      	cmp	r5, #93	; 0x5d
 80198f6:	d0f0      	beq.n	80198da <__sccl+0x26>
 80198f8:	b90d      	cbnz	r5, 80198fe <__sccl+0x4a>
 80198fa:	4632      	mov	r2, r6
 80198fc:	e7ed      	b.n	80198da <__sccl+0x26>
 80198fe:	462b      	mov	r3, r5
 8019900:	e7ef      	b.n	80198e2 <__sccl+0x2e>
 8019902:	780e      	ldrb	r6, [r1, #0]
 8019904:	2e5d      	cmp	r6, #93	; 0x5d
 8019906:	d0fa      	beq.n	80198fe <__sccl+0x4a>
 8019908:	42b3      	cmp	r3, r6
 801990a:	dcf8      	bgt.n	80198fe <__sccl+0x4a>
 801990c:	3301      	adds	r3, #1
 801990e:	429e      	cmp	r6, r3
 8019910:	54c4      	strb	r4, [r0, r3]
 8019912:	dcfb      	bgt.n	801990c <__sccl+0x58>
 8019914:	3102      	adds	r1, #2
 8019916:	e7e6      	b.n	80198e6 <__sccl+0x32>

08019918 <strncmp>:
 8019918:	b510      	push	{r4, lr}
 801991a:	b16a      	cbz	r2, 8019938 <strncmp+0x20>
 801991c:	3901      	subs	r1, #1
 801991e:	1884      	adds	r4, r0, r2
 8019920:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019924:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019928:	4293      	cmp	r3, r2
 801992a:	d103      	bne.n	8019934 <strncmp+0x1c>
 801992c:	42a0      	cmp	r0, r4
 801992e:	d001      	beq.n	8019934 <strncmp+0x1c>
 8019930:	2b00      	cmp	r3, #0
 8019932:	d1f5      	bne.n	8019920 <strncmp+0x8>
 8019934:	1a98      	subs	r0, r3, r2
 8019936:	bd10      	pop	{r4, pc}
 8019938:	4610      	mov	r0, r2
 801993a:	e7fc      	b.n	8019936 <strncmp+0x1e>

0801993c <_strtoul_l.isra.0>:
 801993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019940:	4680      	mov	r8, r0
 8019942:	4689      	mov	r9, r1
 8019944:	4692      	mov	sl, r2
 8019946:	461e      	mov	r6, r3
 8019948:	460f      	mov	r7, r1
 801994a:	463d      	mov	r5, r7
 801994c:	9808      	ldr	r0, [sp, #32]
 801994e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019952:	f7fe fe4f 	bl	80185f4 <__locale_ctype_ptr_l>
 8019956:	4420      	add	r0, r4
 8019958:	7843      	ldrb	r3, [r0, #1]
 801995a:	f013 0308 	ands.w	r3, r3, #8
 801995e:	d130      	bne.n	80199c2 <_strtoul_l.isra.0+0x86>
 8019960:	2c2d      	cmp	r4, #45	; 0x2d
 8019962:	d130      	bne.n	80199c6 <_strtoul_l.isra.0+0x8a>
 8019964:	787c      	ldrb	r4, [r7, #1]
 8019966:	1cbd      	adds	r5, r7, #2
 8019968:	2101      	movs	r1, #1
 801996a:	2e00      	cmp	r6, #0
 801996c:	d05c      	beq.n	8019a28 <_strtoul_l.isra.0+0xec>
 801996e:	2e10      	cmp	r6, #16
 8019970:	d109      	bne.n	8019986 <_strtoul_l.isra.0+0x4a>
 8019972:	2c30      	cmp	r4, #48	; 0x30
 8019974:	d107      	bne.n	8019986 <_strtoul_l.isra.0+0x4a>
 8019976:	782b      	ldrb	r3, [r5, #0]
 8019978:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801997c:	2b58      	cmp	r3, #88	; 0x58
 801997e:	d14e      	bne.n	8019a1e <_strtoul_l.isra.0+0xe2>
 8019980:	786c      	ldrb	r4, [r5, #1]
 8019982:	2610      	movs	r6, #16
 8019984:	3502      	adds	r5, #2
 8019986:	f04f 32ff 	mov.w	r2, #4294967295
 801998a:	2300      	movs	r3, #0
 801998c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019990:	fb06 fc02 	mul.w	ip, r6, r2
 8019994:	ea6f 0c0c 	mvn.w	ip, ip
 8019998:	4618      	mov	r0, r3
 801999a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801999e:	2f09      	cmp	r7, #9
 80199a0:	d817      	bhi.n	80199d2 <_strtoul_l.isra.0+0x96>
 80199a2:	463c      	mov	r4, r7
 80199a4:	42a6      	cmp	r6, r4
 80199a6:	dd23      	ble.n	80199f0 <_strtoul_l.isra.0+0xb4>
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	db1e      	blt.n	80199ea <_strtoul_l.isra.0+0xae>
 80199ac:	4282      	cmp	r2, r0
 80199ae:	d31c      	bcc.n	80199ea <_strtoul_l.isra.0+0xae>
 80199b0:	d101      	bne.n	80199b6 <_strtoul_l.isra.0+0x7a>
 80199b2:	45a4      	cmp	ip, r4
 80199b4:	db19      	blt.n	80199ea <_strtoul_l.isra.0+0xae>
 80199b6:	fb00 4006 	mla	r0, r0, r6, r4
 80199ba:	2301      	movs	r3, #1
 80199bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199c0:	e7eb      	b.n	801999a <_strtoul_l.isra.0+0x5e>
 80199c2:	462f      	mov	r7, r5
 80199c4:	e7c1      	b.n	801994a <_strtoul_l.isra.0+0xe>
 80199c6:	2c2b      	cmp	r4, #43	; 0x2b
 80199c8:	bf04      	itt	eq
 80199ca:	1cbd      	addeq	r5, r7, #2
 80199cc:	787c      	ldrbeq	r4, [r7, #1]
 80199ce:	4619      	mov	r1, r3
 80199d0:	e7cb      	b.n	801996a <_strtoul_l.isra.0+0x2e>
 80199d2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80199d6:	2f19      	cmp	r7, #25
 80199d8:	d801      	bhi.n	80199de <_strtoul_l.isra.0+0xa2>
 80199da:	3c37      	subs	r4, #55	; 0x37
 80199dc:	e7e2      	b.n	80199a4 <_strtoul_l.isra.0+0x68>
 80199de:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80199e2:	2f19      	cmp	r7, #25
 80199e4:	d804      	bhi.n	80199f0 <_strtoul_l.isra.0+0xb4>
 80199e6:	3c57      	subs	r4, #87	; 0x57
 80199e8:	e7dc      	b.n	80199a4 <_strtoul_l.isra.0+0x68>
 80199ea:	f04f 33ff 	mov.w	r3, #4294967295
 80199ee:	e7e5      	b.n	80199bc <_strtoul_l.isra.0+0x80>
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	da09      	bge.n	8019a08 <_strtoul_l.isra.0+0xcc>
 80199f4:	2322      	movs	r3, #34	; 0x22
 80199f6:	f8c8 3000 	str.w	r3, [r8]
 80199fa:	f04f 30ff 	mov.w	r0, #4294967295
 80199fe:	f1ba 0f00 	cmp.w	sl, #0
 8019a02:	d107      	bne.n	8019a14 <_strtoul_l.isra.0+0xd8>
 8019a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a08:	b101      	cbz	r1, 8019a0c <_strtoul_l.isra.0+0xd0>
 8019a0a:	4240      	negs	r0, r0
 8019a0c:	f1ba 0f00 	cmp.w	sl, #0
 8019a10:	d0f8      	beq.n	8019a04 <_strtoul_l.isra.0+0xc8>
 8019a12:	b10b      	cbz	r3, 8019a18 <_strtoul_l.isra.0+0xdc>
 8019a14:	f105 39ff 	add.w	r9, r5, #4294967295
 8019a18:	f8ca 9000 	str.w	r9, [sl]
 8019a1c:	e7f2      	b.n	8019a04 <_strtoul_l.isra.0+0xc8>
 8019a1e:	2430      	movs	r4, #48	; 0x30
 8019a20:	2e00      	cmp	r6, #0
 8019a22:	d1b0      	bne.n	8019986 <_strtoul_l.isra.0+0x4a>
 8019a24:	2608      	movs	r6, #8
 8019a26:	e7ae      	b.n	8019986 <_strtoul_l.isra.0+0x4a>
 8019a28:	2c30      	cmp	r4, #48	; 0x30
 8019a2a:	d0a4      	beq.n	8019976 <_strtoul_l.isra.0+0x3a>
 8019a2c:	260a      	movs	r6, #10
 8019a2e:	e7aa      	b.n	8019986 <_strtoul_l.isra.0+0x4a>

08019a30 <_strtoul_r>:
 8019a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a32:	4c06      	ldr	r4, [pc, #24]	; (8019a4c <_strtoul_r+0x1c>)
 8019a34:	4d06      	ldr	r5, [pc, #24]	; (8019a50 <_strtoul_r+0x20>)
 8019a36:	6824      	ldr	r4, [r4, #0]
 8019a38:	6a24      	ldr	r4, [r4, #32]
 8019a3a:	2c00      	cmp	r4, #0
 8019a3c:	bf08      	it	eq
 8019a3e:	462c      	moveq	r4, r5
 8019a40:	9400      	str	r4, [sp, #0]
 8019a42:	f7ff ff7b 	bl	801993c <_strtoul_l.isra.0>
 8019a46:	b003      	add	sp, #12
 8019a48:	bd30      	pop	{r4, r5, pc}
 8019a4a:	bf00      	nop
 8019a4c:	2000000c 	.word	0x2000000c
 8019a50:	20000070 	.word	0x20000070

08019a54 <__submore>:
 8019a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a58:	460c      	mov	r4, r1
 8019a5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a60:	4299      	cmp	r1, r3
 8019a62:	d11d      	bne.n	8019aa0 <__submore+0x4c>
 8019a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019a68:	f7ff fa66 	bl	8018f38 <_malloc_r>
 8019a6c:	b918      	cbnz	r0, 8019a76 <__submore+0x22>
 8019a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8019a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019a7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019a80:	6360      	str	r0, [r4, #52]	; 0x34
 8019a82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019a86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019a8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019a8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019a92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019a96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019a9a:	6020      	str	r0, [r4, #0]
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	e7e8      	b.n	8019a72 <__submore+0x1e>
 8019aa0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019aa2:	0077      	lsls	r7, r6, #1
 8019aa4:	463a      	mov	r2, r7
 8019aa6:	f000 f837 	bl	8019b18 <_realloc_r>
 8019aaa:	4605      	mov	r5, r0
 8019aac:	2800      	cmp	r0, #0
 8019aae:	d0de      	beq.n	8019a6e <__submore+0x1a>
 8019ab0:	eb00 0806 	add.w	r8, r0, r6
 8019ab4:	4601      	mov	r1, r0
 8019ab6:	4632      	mov	r2, r6
 8019ab8:	4640      	mov	r0, r8
 8019aba:	f7fe fdd7 	bl	801866c <memcpy>
 8019abe:	f8c4 8000 	str.w	r8, [r4]
 8019ac2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019ac6:	e7e9      	b.n	8019a9c <__submore+0x48>

08019ac8 <__ascii_wctomb>:
 8019ac8:	b149      	cbz	r1, 8019ade <__ascii_wctomb+0x16>
 8019aca:	2aff      	cmp	r2, #255	; 0xff
 8019acc:	bf85      	ittet	hi
 8019ace:	238a      	movhi	r3, #138	; 0x8a
 8019ad0:	6003      	strhi	r3, [r0, #0]
 8019ad2:	700a      	strbls	r2, [r1, #0]
 8019ad4:	f04f 30ff 	movhi.w	r0, #4294967295
 8019ad8:	bf98      	it	ls
 8019ada:	2001      	movls	r0, #1
 8019adc:	4770      	bx	lr
 8019ade:	4608      	mov	r0, r1
 8019ae0:	4770      	bx	lr

08019ae2 <memmove>:
 8019ae2:	4288      	cmp	r0, r1
 8019ae4:	b510      	push	{r4, lr}
 8019ae6:	eb01 0302 	add.w	r3, r1, r2
 8019aea:	d807      	bhi.n	8019afc <memmove+0x1a>
 8019aec:	1e42      	subs	r2, r0, #1
 8019aee:	4299      	cmp	r1, r3
 8019af0:	d00a      	beq.n	8019b08 <memmove+0x26>
 8019af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019af6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019afa:	e7f8      	b.n	8019aee <memmove+0xc>
 8019afc:	4283      	cmp	r3, r0
 8019afe:	d9f5      	bls.n	8019aec <memmove+0xa>
 8019b00:	1881      	adds	r1, r0, r2
 8019b02:	1ad2      	subs	r2, r2, r3
 8019b04:	42d3      	cmn	r3, r2
 8019b06:	d100      	bne.n	8019b0a <memmove+0x28>
 8019b08:	bd10      	pop	{r4, pc}
 8019b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019b12:	e7f7      	b.n	8019b04 <memmove+0x22>

08019b14 <__malloc_lock>:
 8019b14:	4770      	bx	lr

08019b16 <__malloc_unlock>:
 8019b16:	4770      	bx	lr

08019b18 <_realloc_r>:
 8019b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b1a:	4607      	mov	r7, r0
 8019b1c:	4614      	mov	r4, r2
 8019b1e:	460e      	mov	r6, r1
 8019b20:	b921      	cbnz	r1, 8019b2c <_realloc_r+0x14>
 8019b22:	4611      	mov	r1, r2
 8019b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019b28:	f7ff ba06 	b.w	8018f38 <_malloc_r>
 8019b2c:	b922      	cbnz	r2, 8019b38 <_realloc_r+0x20>
 8019b2e:	f7ff f9b5 	bl	8018e9c <_free_r>
 8019b32:	4625      	mov	r5, r4
 8019b34:	4628      	mov	r0, r5
 8019b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b38:	f000 f814 	bl	8019b64 <_malloc_usable_size_r>
 8019b3c:	42a0      	cmp	r0, r4
 8019b3e:	d20f      	bcs.n	8019b60 <_realloc_r+0x48>
 8019b40:	4621      	mov	r1, r4
 8019b42:	4638      	mov	r0, r7
 8019b44:	f7ff f9f8 	bl	8018f38 <_malloc_r>
 8019b48:	4605      	mov	r5, r0
 8019b4a:	2800      	cmp	r0, #0
 8019b4c:	d0f2      	beq.n	8019b34 <_realloc_r+0x1c>
 8019b4e:	4631      	mov	r1, r6
 8019b50:	4622      	mov	r2, r4
 8019b52:	f7fe fd8b 	bl	801866c <memcpy>
 8019b56:	4631      	mov	r1, r6
 8019b58:	4638      	mov	r0, r7
 8019b5a:	f7ff f99f 	bl	8018e9c <_free_r>
 8019b5e:	e7e9      	b.n	8019b34 <_realloc_r+0x1c>
 8019b60:	4635      	mov	r5, r6
 8019b62:	e7e7      	b.n	8019b34 <_realloc_r+0x1c>

08019b64 <_malloc_usable_size_r>:
 8019b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b68:	1f18      	subs	r0, r3, #4
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	bfbc      	itt	lt
 8019b6e:	580b      	ldrlt	r3, [r1, r0]
 8019b70:	18c0      	addlt	r0, r0, r3
 8019b72:	4770      	bx	lr

08019b74 <_init>:
 8019b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b76:	bf00      	nop
 8019b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b7a:	bc08      	pop	{r3}
 8019b7c:	469e      	mov	lr, r3
 8019b7e:	4770      	bx	lr

08019b80 <_fini>:
 8019b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b82:	bf00      	nop
 8019b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b86:	bc08      	pop	{r3}
 8019b88:	469e      	mov	lr, r3
 8019b8a:	4770      	bx	lr
