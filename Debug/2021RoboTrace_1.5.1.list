
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b44  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08016d08  08016d08  00026d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801784c  0801784c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801784c  0801784c  0002784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017854  08017854  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017854  08017854  00027854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801785c  0801785c  0002785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017860  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4d4  200001dc  08017a3c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c6b0  08017a3c  0003c6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e57  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007058  00000000  00000000  00063063  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002060  00000000  00000000  0006a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001db0  00000000  00000000  0006c120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003633d  00000000  00000000  0006ded0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023c86  00000000  00000000  000a420d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ddf4  00000000  00000000  000c7e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d5c87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009de4  00000000  00000000  001d5d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016cec 	.word	0x08016cec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08016cec 	.word	0x08016cec

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 f84e 	bl	8007078 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000a23c 	.word	0x2000a23c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 f836 	bl	8007078 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000a23c 	.word	0x2000a23c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f005 febf 	bl	8006da4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f004 fc26 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f004 fc20 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f004 fc1a 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f004 fc14 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f004 fc0e 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 fc08 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f004 fc02 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f004 fbfc 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f004 fbf6 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f004 fbf0 	bl	8005878 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 fbe4 	bl	8005878 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 fbde 	bl	8005878 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f012 fd2d 	bl	8013b88 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001198:	213c      	movs	r1, #60	; 0x3c
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <_ZN7Encoder4initEv+0x30>)
 800119c:	f009 fe04 	bl	800ada8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011a0:	213c      	movs	r1, #60	; 0x3c
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <_ZN7Encoder4initEv+0x34>)
 80011a4:	f009 fe00 	bl	800ada8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_ZN7Encoder4initEv+0x38>)
 80011aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_ZN7Encoder4initEv+0x3c>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000a490 	.word	0x2000a490
 80011c4:	2000a174 	.word	0x2000a174
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40010400 	.word	0x40010400

080011d0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	monitor_cnt_l = cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <_ZN7Encoder9updateCntEv+0x120>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80012f4 <_ZN7Encoder9updateCntEv+0x124>
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80012f8 <_ZN7Encoder9updateCntEv+0x128>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edc3 7a00 	vstr	s15, [r3]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <_ZN7Encoder9updateCntEv+0x12c>)
 8001200:	6013      	str	r3, [r2, #0]
	monitor_cnt_r = cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <_ZN7Encoder9updateCntEv+0x130>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80012f4 <_ZN7Encoder9updateCntEv+0x124>
 8001212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001216:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012f8 <_ZN7Encoder9updateCntEv+0x128>
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edc3 7a01 	vstr	s15, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a36      	ldr	r2, [pc, #216]	; (8001304 <_ZN7Encoder9updateCntEv+0x134>)
 800122a:	6013      	str	r3, [r2, #0]

	total_cnt_l_ += cnt_l_;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 2a90 	vmov	r2, s15
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60da      	str	r2, [r3, #12]
	total_cnt_r_ += cnt_r_;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001268:	ee17 2a90 	vmov	r2, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]

	distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f97f 	bl	8000578 <__aeabi_f2d>
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	edd3 7a01 	vldr	s15, [r3, #4]
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	ee17 0a90 	vmov	r0, s15
 8001292:	f7ff f971 	bl	8000578 <__aeabi_f2d>
 8001296:	a314      	add	r3, pc, #80	; (adr r3, 80012e8 <_ZN7Encoder9updateCntEv+0x118>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9c4 	bl	8000628 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b0:	f7ff fae4 	bl	800087c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7fe fffe 	bl	80002bc <__adddf3>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f7ff fca6 	bl	8000c18 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
	monitor_distance = distance_;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_ZN7Encoder9updateCntEv+0x138>)
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdb0      	pop	{r4, r5, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	1ab1d998 	.word	0x1ab1d998
 80012ec:	3f7830b5 	.word	0x3f7830b5
 80012f0:	40010000 	.word	0x40010000
 80012f4:	47000000 	.word	0x47000000
 80012f8:	3f8fb562 	.word	0x3f8fb562
 80012fc:	200001fc 	.word	0x200001fc
 8001300:	40010400 	.word	0x40010400
 8001304:	20000200 	.word	0x20000200
 8001308:	200001f8 	.word	0x200001f8

0800130c <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	return distance_;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	ee07 3a90 	vmov	s15, r3
}
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <_ZN7Encoder8clearCntEv+0x34>)
 800138a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <_ZN7Encoder8clearCntEv+0x38>)
 8001392:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40010400 	.word	0x40010400

080013ac <_ZN7Encoder13clearTotalCntEv>:
{
	return long((total_cnt_l_ + total_cnt_r_) / 2);
}

void Encoder::clearTotalCnt()
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f98f 	bl	8001700 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80013e2:	f000 f9a3 	bl	800172c <fopen_folder_and_file>

	return ret;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <user_fclose+0x1c>)
 80013fc:	f00e ff05 	bl	801020a <f_close>

	return ret;
 8001400:	79fb      	ldrb	r3, [r7, #7]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20009080 	.word	0x20009080

08001410 <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b087      	sub	sp, #28
 8001414:	af02      	add	r7, sp, #8
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	4613      	mov	r3, r2
 800141e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001424:	2300      	movs	r3, #0
 8001426:	81fb      	strh	r3, [r7, #14]
 8001428:	e030      	b.n	800148c <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800142a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f89e 	bl	8000578 <__aeabi_f2d>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	e9cd 3400 	strd	r3, r4, [sp]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <sd_write+0x94>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	4817      	ldr	r0, [pc, #92]	; (80014a8 <sd_write+0x98>)
 800144a:	f011 fc0d 	bl	8012c68 <sniprintf>

		if(state == ADD_WRITE){
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <sd_write+0x9c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <sd_write+0x9c>)
 800145c:	f00e ff49 	bl	80102f2 <f_lseek>
 8001460:	e003      	b.n	800146a <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001462:	2100      	movs	r1, #0
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <sd_write+0x9c>)
 8001466:	f00e ff44 	bl	80102f2 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <sd_write+0x98>)
 800146c:	f7fe fec8 	bl	8000200 <strlen>
 8001470:	4602      	mov	r2, r0
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <sd_write+0xa0>)
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <sd_write+0x98>)
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <sd_write+0x9c>)
 8001478:	f00e fcb5 	bl	800fde6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 800147c:	f000 f970 	bl	8001760 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	b29b      	uxth	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	81fb      	strh	r3, [r7, #14]
 800148c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbc8      	blt.n	800142a <sd_write+0x1a>
	}
	return ret;
 8001498:	7b7b      	ldrb	r3, [r7, #13]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08016d08 	.word	0x08016d08
 80014a8:	20008ff0 	.word	0x20008ff0
 80014ac:	20009080 	.word	0x20009080
 80014b0:	20009070 	.word	0x20009070

080014b4 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f918 	bl	8001700 <create_path>

	if(state == OVER_WRITE){
 80014d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d108      	bne.n	80014ea <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80014d8:	4822      	ldr	r0, [pc, #136]	; (8001564 <sd_write_array_float+0xb0>)
 80014da:	f00e fec0 	bl	801025e <f_chdir>
		f_unlink(filepath);	//	一回消す
 80014de:	4822      	ldr	r0, [pc, #136]	; (8001568 <sd_write_array_float+0xb4>)
 80014e0:	f00f f92b 	bl	801073a <f_unlink>
		f_chdir("..");
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <sd_write_array_float+0xb8>)
 80014e6:	f00e feba 	bl	801025e <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80014ea:	f000 f91f 	bl	800172c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	82fb      	strh	r3, [r7, #22]
 80014f2:	e028      	b.n	8001546 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f839 	bl	8000578 <__aeabi_f2d>
 8001506:	4603      	mov	r3, r0
 8001508:	460c      	mov	r4, r1
 800150a:	e9cd 3400 	strd	r3, r4, [sp]
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <sd_write_array_float+0xbc>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	4818      	ldr	r0, [pc, #96]	; (8001574 <sd_write_array_float+0xc0>)
 8001514:	f011 fba8 	bl	8012c68 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <sd_write_array_float+0xc4>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4619      	mov	r1, r3
 800151e:	4816      	ldr	r0, [pc, #88]	; (8001578 <sd_write_array_float+0xc4>)
 8001520:	f00e fee7 	bl	80102f2 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <sd_write_array_float+0xc0>)
 8001526:	f7fe fe6b 	bl	8000200 <strlen>
 800152a:	4602      	mov	r2, r0
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <sd_write_array_float+0xc8>)
 800152e:	4911      	ldr	r1, [pc, #68]	; (8001574 <sd_write_array_float+0xc0>)
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <sd_write_array_float+0xc4>)
 8001532:	f00e fc58 	bl	800fde6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001536:	f000 f913 	bl	8001760 <bufclear>
	for(short i = 0 ; i < size; i++){
 800153a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	82fb      	strh	r3, [r7, #22]
 8001546:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbd0      	blt.n	80014f4 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <sd_write_array_float+0xc4>)
 8001554:	f00e fe59 	bl	801020a <f_close>

	return ret;
 8001558:	7d7b      	ldrb	r3, [r7, #21]
}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	20008ef0 	.word	0x20008ef0
 8001568:	20007dac 	.word	0x20007dac
 800156c:	08016d18 	.word	0x08016d18
 8001570:	08016d08 	.word	0x08016d08
 8001574:	20008ff0 	.word	0x20008ff0
 8001578:	20009080 	.word	0x20009080
 800157c:	20009070 	.word	0x20009070

08001580 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f8b2 	bl	8001700 <create_path>

	if(state == OVER_WRITE){
 800159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d108      	bne.n	80015b6 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80015a4:	481e      	ldr	r0, [pc, #120]	; (8001620 <sd_write_array_int+0xa0>)
 80015a6:	f00e fe5a 	bl	801025e <f_chdir>
		f_unlink(filepath);	//一回消す
 80015aa:	481e      	ldr	r0, [pc, #120]	; (8001624 <sd_write_array_int+0xa4>)
 80015ac:	f00f f8c5 	bl	801073a <f_unlink>
		f_chdir("..");
 80015b0:	481d      	ldr	r0, [pc, #116]	; (8001628 <sd_write_array_int+0xa8>)
 80015b2:	f00e fe54 	bl	801025e <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80015b6:	f000 f8b9 	bl	800172c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015ba:	2300      	movs	r3, #0
 80015bc:	82fb      	strh	r3, [r7, #22]
 80015be:	e021      	b.n	8001604 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 80015c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <sd_write_array_int+0xac>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4817      	ldr	r0, [pc, #92]	; (8001630 <sd_write_array_int+0xb0>)
 80015d2:	f011 fb49 	bl	8012c68 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_int+0xb4>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4619      	mov	r1, r3
 80015dc:	4815      	ldr	r0, [pc, #84]	; (8001634 <sd_write_array_int+0xb4>)
 80015de:	f00e fe88 	bl	80102f2 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015e2:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_int+0xb0>)
 80015e4:	f7fe fe0c 	bl	8000200 <strlen>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_int+0xb8>)
 80015ec:	4910      	ldr	r1, [pc, #64]	; (8001630 <sd_write_array_int+0xb0>)
 80015ee:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_int+0xb4>)
 80015f0:	f00e fbf9 	bl	800fde6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015f4:	f000 f8b4 	bl	8001760 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	b29b      	uxth	r3, r3
 8001602:	82fb      	strh	r3, [r7, #22]
 8001604:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbd7      	blt.n	80015c0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <sd_write_array_int+0xb4>)
 8001612:	f00e fdfa 	bl	801020a <f_close>

	return ret;
 8001616:	7d7b      	ldrb	r3, [r7, #21]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20008ef0 	.word	0x20008ef0
 8001624:	20007dac 	.word	0x20007dac
 8001628:	08016d18 	.word	0x08016d18
 800162c:	08016d1c 	.word	0x08016d1c
 8001630:	20008ff0 	.word	0x20008ff0
 8001634:	20009080 	.word	0x20009080
 8001638:	20009070 	.word	0x20009070

0800163c <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f852 	bl	8001700 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f866 	bl	800172c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_int+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_int+0x84>)
 8001672:	f011 fb4d 	bl	8012d10 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_int+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_int+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_int+0x84>)
 800169c:	f00f fa28 	bl	8010af0 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f85b 	bl	8001760 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_int+0x88>)
 80016ac:	f00e fdad 	bl	801020a <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08016d20 	.word	0x08016d20
 80016c0:	20008ff0 	.word	0x20008ff0
 80016c4:	20009080 	.word	0x20009080

080016c8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80016d2:	2201      	movs	r2, #1
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <sd_mount+0x30>)
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <sd_mount+0x34>)
 80016d8:	f00e f814 	bl	800f704 <f_mount>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <sd_mount+0x20>
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	e001      	b.n	80016ec <sd_mount+0x24>
	else ret = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	71fb      	strb	r3, [r7, #7]

	return ret;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08016d24 	.word	0x08016d24
 80016fc:	20007eac 	.word	0x20007eac

08001700 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <create_path+0x24>)
 800170e:	f011 fb6e 	bl	8012dee <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <create_path+0x28>)
 8001716:	f011 fb6a 	bl	8012dee <strcpy>

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20008ef0 	.word	0x20008ef0
 8001728:	20007dac 	.word	0x20007dac

0800172c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <fopen_folder_and_file+0x24>)
 8001732:	f00f f8c3 	bl	80108bc <f_mkdir>

	f_chdir(dirpath);
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <fopen_folder_and_file+0x24>)
 8001738:	f00e fd91 	bl	801025e <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800173c:	2213      	movs	r2, #19
 800173e:	4905      	ldr	r1, [pc, #20]	; (8001754 <fopen_folder_and_file+0x28>)
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <fopen_folder_and_file+0x2c>)
 8001742:	f00e f825 	bl	800f790 <f_open>

	f_chdir("..");
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <fopen_folder_and_file+0x30>)
 8001748:	f00e fd89 	bl	801025e <f_chdir>


}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20008ef0 	.word	0x20008ef0
 8001754:	20007dac 	.word	0x20007dac
 8001758:	20009080 	.word	0x20009080
 800175c:	08016d18 	.word	0x08016d18

08001760 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e007      	b.n	800177c <bufclear+0x1c>
		buffer[i] = '\0';
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <bufclear+0x30>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3301      	adds	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b7f      	cmp	r3, #127	; 0x7f
 8001780:	ddf4      	ble.n	800176c <bufclear+0xc>
	}
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20008ff0 	.word	0x20008ff0

08001794 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <read_byte+0x54>)
 80017b0:	f005 faf8 	bl	8006da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017b4:	f107 010f 	add.w	r1, r7, #15
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	2201      	movs	r2, #1
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <read_byte+0x58>)
 80017be:	f008 fcb9 	bl	800a134 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80017c2:	f107 010e 	add.w	r1, r7, #14
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	2201      	movs	r2, #1
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <read_byte+0x58>)
 80017cc:	f008 fde6 	bl	800a39c <HAL_SPI_Receive>
	CS_SET;
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <read_byte+0x54>)
 80017d8:	f005 fae4 	bl	8006da4 <HAL_GPIO_WritePin>

	return val;
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020400 	.word	0x40020400
 80017ec:	2000a11c 	.word	0x2000a11c

080017f0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001806:	b2db      	uxtb	r3, r3
 8001808:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <write_byte+0x54>)
 8001812:	f005 fac7 	bl	8006da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001816:	f107 010f 	add.w	r1, r7, #15
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	2201      	movs	r2, #1
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <write_byte+0x58>)
 8001820:	f008 fc88 	bl	800a134 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001824:	1db9      	adds	r1, r7, #6
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	2201      	movs	r2, #1
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <write_byte+0x58>)
 800182c:	f008 fc82 	bl	800a134 <HAL_SPI_Transmit>
	CS_SET;
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001836:	4803      	ldr	r0, [pc, #12]	; (8001844 <write_byte+0x54>)
 8001838:	f005 fab4 	bl	8006da4 <HAL_GPIO_WritePin>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40020400 	.word	0x40020400
 8001848:	2000a11c 	.word	0x2000a11c

0800184c <IMU_init>:

uint16_t IMU_init() {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ff9c 	bl	8001794 <read_byte>
 800185c:	4603      	mov	r3, r0
 800185e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	2be0      	cmp	r3, #224	; 0xe0
 8001864:	d119      	bne.n	800189a <IMU_init+0x4e>
		ret = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800186a:	2101      	movs	r1, #1
 800186c:	2006      	movs	r0, #6
 800186e:	f7ff ffbf 	bl	80017f0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001872:	2110      	movs	r1, #16
 8001874:	2003      	movs	r0, #3
 8001876:	f7ff ffbb 	bl	80017f0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800187a:	2120      	movs	r1, #32
 800187c:	207f      	movs	r0, #127	; 0x7f
 800187e:	f7ff ffb7 	bl	80017f0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001882:	2106      	movs	r1, #6
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ffb3 	bl	80017f0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800188a:	2106      	movs	r1, #6
 800188c:	2014      	movs	r0, #20
 800188e:	f7ff ffaf 	bl	80017f0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001892:	2100      	movs	r1, #0
 8001894:	207f      	movs	r0, #127	; 0x7f
 8001896:	f7ff ffab 	bl	80017f0 <write_byte>
	}
	return ret;
 800189a:	88fb      	ldrh	r3, [r7, #6]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <read_gyro_data>:

void read_gyro_data() {
 80018a4:	b598      	push	{r3, r4, r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018a8:	2033      	movs	r0, #51	; 0x33
 80018aa:	f7ff ff73 	bl	8001794 <read_byte>
 80018ae:	4603      	mov	r3, r0
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21c      	sxth	r4, r3
 80018b4:	2034      	movs	r0, #52	; 0x34
 80018b6:	f7ff ff6d 	bl	8001794 <read_byte>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4323      	orrs	r3, r4
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <read_gyro_data+0x64>)
 80018c4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80018c6:	2035      	movs	r0, #53	; 0x35
 80018c8:	f7ff ff64 	bl	8001794 <read_byte>
 80018cc:	4603      	mov	r3, r0
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21c      	sxth	r4, r3
 80018d2:	2036      	movs	r0, #54	; 0x36
 80018d4:	f7ff ff5e 	bl	8001794 <read_byte>
 80018d8:	4603      	mov	r3, r0
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4323      	orrs	r3, r4
 80018de:	b21a      	sxth	r2, r3
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <read_gyro_data+0x68>)
 80018e2:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80018e4:	2037      	movs	r0, #55	; 0x37
 80018e6:	f7ff ff55 	bl	8001794 <read_byte>
 80018ea:	4603      	mov	r3, r0
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21c      	sxth	r4, r3
 80018f0:	2038      	movs	r0, #56	; 0x38
 80018f2:	f7ff ff4f 	bl	8001794 <read_byte>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4323      	orrs	r3, r4
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <read_gyro_data+0x6c>)
 8001900:	801a      	strh	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	bd98      	pop	{r3, r4, r7, pc}
 8001906:	bf00      	nop
 8001908:	2000a0b8 	.word	0x2000a0b8
 800190c:	2000a0b6 	.word	0x2000a0b6
 8001910:	2000a0b0 	.word	0x2000a0b0

08001914 <read_accel_data>:

void read_accel_data() {
 8001914:	b598      	push	{r3, r4, r7, lr}
 8001916:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001918:	202d      	movs	r0, #45	; 0x2d
 800191a:	f7ff ff3b 	bl	8001794 <read_byte>
 800191e:	4603      	mov	r3, r0
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21c      	sxth	r4, r3
 8001924:	202e      	movs	r0, #46	; 0x2e
 8001926:	f7ff ff35 	bl	8001794 <read_byte>
 800192a:	4603      	mov	r3, r0
 800192c:	b21b      	sxth	r3, r3
 800192e:	4323      	orrs	r3, r4
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <read_accel_data+0x64>)
 8001934:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001936:	202f      	movs	r0, #47	; 0x2f
 8001938:	f7ff ff2c 	bl	8001794 <read_byte>
 800193c:	4603      	mov	r3, r0
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21c      	sxth	r4, r3
 8001942:	2030      	movs	r0, #48	; 0x30
 8001944:	f7ff ff26 	bl	8001794 <read_byte>
 8001948:	4603      	mov	r3, r0
 800194a:	b21b      	sxth	r3, r3
 800194c:	4323      	orrs	r3, r4
 800194e:	b21a      	sxth	r2, r3
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <read_accel_data+0x68>)
 8001952:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001954:	2031      	movs	r0, #49	; 0x31
 8001956:	f7ff ff1d 	bl	8001794 <read_byte>
 800195a:	4603      	mov	r3, r0
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21c      	sxth	r4, r3
 8001960:	2032      	movs	r0, #50	; 0x32
 8001962:	f7ff ff17 	bl	8001794 <read_byte>
 8001966:	4603      	mov	r3, r0
 8001968:	b21b      	sxth	r3, r3
 800196a:	4323      	orrs	r3, r4
 800196c:	b21a      	sxth	r2, r3
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <read_accel_data+0x6c>)
 8001970:	801a      	strh	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	bd98      	pop	{r3, r4, r7, pc}
 8001976:	bf00      	nop
 8001978:	2000a0b4 	.word	0x2000a0b4
 800197c:	2000a0ba 	.word	0x2000a0ba
 8001980:	2000a0b2 	.word	0x2000a0b2

08001984 <_ZN3IMUC1Ev>:
#include "ICM_20648.h"
#include "stm32f4xx_hal.h"
#include "stdio.h"
#include <vector>

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
{

}
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019dc:	f7ff ff36 	bl	800184c <IMU_init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <_ZN3IMU4initEv+0x24>)
 80019ea:	f011 f8a7 	bl	8012b3c <iprintf>

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08016d28 	.word	0x08016d28

080019fc <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a04:	f7ff ff4e 	bl	80018a4 <read_gyro_data>
	read_accel_data();
 8001a08:	f7ff ff84 	bl	8001914 <read_accel_data>

	xa_ = xa;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <_ZN3IMU12updateValuesEv+0x90>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edc3 7a00 	vstr	s15, [r3]
	ya_ = ya;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <_ZN3IMU12updateValuesEv+0x94>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	edc3 7a01 	vstr	s15, [r3, #4]
	za_ = za;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <_ZN3IMU12updateValuesEv+0x98>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edc3 7a02 	vstr	s15, [r3, #8]
	xg_ = xg;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_ZN3IMU12updateValuesEv+0x9c>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edc3 7a03 	vstr	s15, [r3, #12]
	yg_ = yg;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <_ZN3IMU12updateValuesEv+0xa0>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edc3 7a04 	vstr	s15, [r3, #16]
	zg_ = zg;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000a0b4 	.word	0x2000a0b4
 8001a90:	2000a0ba 	.word	0x2000a0ba
 8001a94:	2000a0b2 	.word	0x2000a0b2
 8001a98:	2000a0b8 	.word	0x2000a0b8
 8001a9c:	2000a0b6 	.word	0x2000a0b6
 8001aa0:	2000a0b0 	.word	0x2000a0b0

08001aa4 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	return zg_ - offset_;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15

}
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	1dfa      	adds	r2, r7, #7
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <INA260_read+0x50>)
 8001aea:	f005 fac5 	bl	8007078 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2302      	movs	r3, #2
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <INA260_read+0x50>)
 8001afe:	f005 fbb9 	bl	8007274 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001b02:	7b3b      	ldrb	r3, [r7, #12]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	81fb      	strh	r3, [r7, #14]
	return val;
 8001b12:	89fb      	ldrh	r3, [r7, #14]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000a2d0 	.word	0x2000a2d0

08001b20 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	4603      	mov	r3, r0
 8001b34:	71bb      	strb	r3, [r7, #6]
 8001b36:	460b      	mov	r3, r1
 8001b38:	717b      	strb	r3, [r7, #5]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	733b      	strb	r3, [r7, #12]
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	737b      	strb	r3, [r7, #13]
 8001b46:	797b      	ldrb	r3, [r7, #5]
 8001b48:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	2364      	movs	r3, #100	; 0x64
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2303      	movs	r3, #3
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <INA260_write+0x48>)
 8001b5a:	f005 fa8d 	bl	8007078 <HAL_I2C_Master_Transmit>
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000a2d0 	.word	0x2000a2d0

08001b6c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	460b      	mov	r3, r1
 8001b78:	71bb      	strb	r3, [r7, #6]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001b7e:	797b      	ldrb	r3, [r7, #5]
 8001b80:	79ba      	ldrb	r2, [r7, #6]
 8001b82:	79f9      	ldrb	r1, [r7, #7]
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff ffcb 	bl	8001b20 <INA260_write>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	21df      	movs	r1, #223	; 0xdf
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff ffe2 	bl	8001b6c <setConfig>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
{

}
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd8:	482a      	ldr	r0, [pc, #168]	; (8001c84 <_ZN8JoyStick8getValueEv+0xbc>)
 8001bda:	f005 f8cb 	bl	8006d74 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <_ZN8JoyStick8getValueEv+0x2e>
 8001bee:	89fb      	ldrh	r3, [r7, #14]
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4823      	ldr	r0, [pc, #140]	; (8001c88 <_ZN8JoyStick8getValueEv+0xc0>)
 8001bfa:	f005 f8bb 	bl	8006d74 <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <_ZN8JoyStick8getValueEv+0x4e>
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1a:	481a      	ldr	r0, [pc, #104]	; (8001c84 <_ZN8JoyStick8getValueEv+0xbc>)
 8001c1c:	f005 f8aa 	bl	8006d74 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <_ZN8JoyStick8getValueEv+0x70>
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <_ZN8JoyStick8getValueEv+0xc4>)
 8001c3c:	f005 f89a 	bl	8006d74 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <_ZN8JoyStick8getValueEv+0x90>
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <_ZN8JoyStick8getValueEv+0xbc>)
 8001c5c:	f005 f88a 	bl	8006d74 <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <_ZN8JoyStick8getValueEv+0xb0>
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001c78:	89fb      	ldrh	r3, [r7, #14]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40020400 	.word	0x40020400

08001c90 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b52      	cmp	r3, #82	; 0x52
 8001ca0:	d112      	bne.n	8001cc8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca8:	4856      	ldr	r0, [pc, #344]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001caa:	f005 f87b 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cb4:	4853      	ldr	r0, [pc, #332]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cb6:	f005 f875 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc0:	4850      	ldr	r0, [pc, #320]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cc2:	f005 f86f 	bl	8006da4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001cc6:	e098      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b47      	cmp	r3, #71	; 0x47
 8001ccc:	d112      	bne.n	8001cf4 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd4:	484b      	ldr	r0, [pc, #300]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cd6:	f005 f865 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce0:	4848      	ldr	r0, [pc, #288]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001ce2:	f005 f85f 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cec:	4845      	ldr	r0, [pc, #276]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cee:	f005 f859 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001cf2:	e082      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	2b42      	cmp	r3, #66	; 0x42
 8001cf8:	d112      	bne.n	8001d20 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d00:	4840      	ldr	r0, [pc, #256]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d02:	f005 f84f 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0c:	483d      	ldr	r0, [pc, #244]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d0e:	f005 f849 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	483a      	ldr	r0, [pc, #232]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d1a:	f005 f843 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001d1e:	e06c      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b43      	cmp	r3, #67	; 0x43
 8001d24:	d112      	bne.n	8001d4c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4835      	ldr	r0, [pc, #212]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d2e:	f005 f839 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d38:	4832      	ldr	r0, [pc, #200]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d3a:	f005 f833 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d44:	482f      	ldr	r0, [pc, #188]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d46:	f005 f82d 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001d4a:	e056      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b4d      	cmp	r3, #77	; 0x4d
 8001d50:	d112      	bne.n	8001d78 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d58:	482a      	ldr	r0, [pc, #168]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d5a:	f005 f823 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d64:	4827      	ldr	r0, [pc, #156]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d66:	f005 f81d 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d70:	4824      	ldr	r0, [pc, #144]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d72:	f005 f817 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001d76:	e040      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b59      	cmp	r3, #89	; 0x59
 8001d7c:	d112      	bne.n	8001da4 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	481f      	ldr	r0, [pc, #124]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d86:	f005 f80d 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d90:	481c      	ldr	r0, [pc, #112]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d92:	f005 f807 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9c:	4819      	ldr	r0, [pc, #100]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d9e:	f005 f801 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001da2:	e02a      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b57      	cmp	r3, #87	; 0x57
 8001da8:	d112      	bne.n	8001dd0 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db0:	4814      	ldr	r0, [pc, #80]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001db2:	f004 fff7 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dbc:	4811      	ldr	r0, [pc, #68]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dbe:	f004 fff1 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dca:	f004 ffeb 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001dce:	e014      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b7e      	cmp	r3, #126	; 0x7e
 8001dd4:	d111      	bne.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dde:	f004 ffe1 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dea:	f004 ffdb 	bl	8006da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001df6:	f004 ffd5 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40020000 	.word	0x40020000

08001e08 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	4613      	mov	r3, r2
 8001e16:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e26:	4813      	ldr	r0, [pc, #76]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e28:	f004 ffbc 	bl	8006da4 <HAL_GPIO_WritePin>
 8001e2c:	e009      	b.n	8001e42 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e3e:	f004 ffb1 	bl	8006da4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001e42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e52:	f004 ffa7 	bl	8006da4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001e56:	e009      	b.n	8001e6c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001e58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e68:	f004 ff9c 	bl	8006da4 <HAL_GPIO_WritePin>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40020000 	.word	0x40020000

08001e78 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b092      	sub	sp, #72	; 0x48
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe92 	bl	8001bb0 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	331c      	adds	r3, #28
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d008      	beq.n	8001eb4 <_ZN10LineSensorC1Ev+0x3c>
 8001ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8001eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eae:	3302      	adds	r3, #2
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	e7f2      	b.n	8001e9a <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	3338      	adds	r3, #56	; 0x38
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d009      	beq.n	8001ee2 <_ZN10LineSensorC1Ev+0x6a>
 8001ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed0:	623b      	str	r3, [r7, #32]
		s = 0;
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8001eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001edc:	3304      	adds	r3, #4
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	e7f1      	b.n	8001ec6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3338      	adds	r3, #56	; 0x38
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d009      	beq.n	8001f10 <_ZN10LineSensorC1Ev+0x98>
 8001efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efe:	617b      	str	r3, [r7, #20]
		m = 0;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8001f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0e:	e7f1      	b.n	8001ef4 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3338      	adds	r3, #56	; 0x38
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d009      	beq.n	8001f3e <_ZN10LineSensorC1Ev+0xc6>
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	60bb      	str	r3, [r7, #8]
		s = 1;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f34:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	3304      	adds	r3, #4
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3c:	e7f1      	b.n	8001f22 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3748      	adds	r7, #72	; 0x48
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	220e      	movs	r2, #14
 8001f54:	4619      	mov	r1, r3
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001f58:	f003 fcf4 	bl	8005944 <HAL_ADC_Start_DMA>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000a1f4 	.word	0x2000a1f4

08001f68 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b0d      	cmp	r3, #13
 8001f78:	dc2f      	bgt.n	8001fda <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3392      	adds	r3, #146	; 0x92
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	33a0      	adds	r3, #160	; 0xa0
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a5b      	subs	r3, r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e7cc      	b.n	8001f74 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fe4:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d902      	bls.n	8001ff4 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]


}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000204 	.word	0x20000204

08002004 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002004:	b490      	push	{r4, r7}
 8002006:	b08e      	sub	sp, #56	; 0x38
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002016:	2b0d      	cmp	r3, #13
 8002018:	f200 8087 	bhi.w	800212a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002022:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002026:	2b09      	cmp	r3, #9
 8002028:	d81c      	bhi.n	8002064 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800202a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800202e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002032:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4423      	add	r3, r4
 8002042:	3306      	adds	r3, #6
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4403      	add	r3, r0
 8002048:	3304      	adds	r3, #4
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	008b      	lsls	r3, r1, #2
 800204e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002052:	440b      	add	r3, r1
 8002054:	3b30      	subs	r3, #48	; 0x30
 8002056:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002058:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800205c:	3301      	adds	r3, #1
 800205e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002062:	e7de      	b.n	8002022 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800206a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800206e:	2b09      	cmp	r3, #9
 8002070:	d84d      	bhi.n	800210e <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002072:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002076:	3301      	adds	r3, #1
 8002078:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800207c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002080:	2b09      	cmp	r3, #9
 8002082:	d83e      	bhi.n	8002102 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002084:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800208e:	4413      	add	r3, r2
 8002090:	3b30      	subs	r3, #48	; 0x30
 8002092:	ed93 7a00 	vldr	s14, [r3]
 8002096:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020a0:	4413      	add	r3, r2
 80020a2:	3b30      	subs	r3, #48	; 0x30
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d521      	bpl.n	80020f6 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80020b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020bc:	4413      	add	r3, r2
 80020be:	3b30      	subs	r3, #48	; 0x30
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80020c4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80020c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020d2:	440a      	add	r2, r1
 80020d4:	3a30      	subs	r2, #48	; 0x30
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020de:	440b      	add	r3, r1
 80020e0:	3b30      	subs	r3, #48	; 0x30
 80020e2:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80020e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020ee:	4413      	add	r3, r2
 80020f0:	3b30      	subs	r3, #48	; 0x30
 80020f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f4:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80020f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020fa:	3301      	adds	r3, #1
 80020fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002100:	e7bc      	b.n	800207c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002102:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002106:	3301      	adds	r3, #1
 8002108:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800210c:	e7ad      	b.n	800206a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 800210e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	33b0      	adds	r3, #176	; 0xb0
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800211e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002122:	3301      	adds	r3, #1
 8002124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002128:	e773      	b.n	8002012 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800212a:	bf00      	nop
 800212c:	3738      	adds	r7, #56	; 0x38
 800212e:	46bd      	mov	sp, r7
 8002130:	bc90      	pop	{r4, r7}
 8002132:	4770      	bx	lr

08002134 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b0a9      	sub	sp, #164	; 0xa4
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800213c:	2064      	movs	r0, #100	; 0x64
 800213e:	f003 fb9b 	bl	8005878 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002142:	2300      	movs	r3, #0
 8002144:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002148:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800214c:	2b0d      	cmp	r3, #13
 800214e:	d823      	bhi.n	8002198 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8002150:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002154:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	32b0      	adds	r2, #176	; 0xb0
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	440a      	add	r2, r1
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002168:	440b      	add	r3, r1
 800216a:	3b60      	subs	r3, #96	; 0x60
 800216c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800216e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002172:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	32b0      	adds	r2, #176	; 0xb0
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	440a      	add	r2, r1
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002186:	440b      	add	r3, r1
 8002188:	3b98      	subs	r3, #152	; 0x98
 800218a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800218c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002190:	3301      	adds	r3, #1
 8002192:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002196:	e7d7      	b.n	8002148 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd12 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d079      	beq.n	80022a8 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80021ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021be:	2b0d      	cmp	r3, #13
 80021c0:	d850      	bhi.n	8002264 <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 80021c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80021cc:	4413      	add	r3, r2
 80021ce:	3b60      	subs	r3, #96	; 0x60
 80021d0:	ed93 7a00 	vldr	s14, [r3]
 80021d4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	33b0      	adds	r3, #176	; 0xb0
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d50f      	bpl.n	800220e <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 80021ee:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80021f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	32b0      	adds	r2, #176	; 0xb0
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	440a      	add	r2, r1
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002206:	440b      	add	r3, r1
 8002208:	3b60      	subs	r3, #96	; 0x60
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e024      	b.n	8002258 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 800220e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002218:	4413      	add	r3, r2
 800221a:	3b98      	subs	r3, #152	; 0x98
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	33b0      	adds	r3, #176	; 0xb0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	dd0e      	ble.n	8002258 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 800223a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800223e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	32b0      	adds	r2, #176	; 0xb0
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	440a      	add	r2, r1
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002252:	440b      	add	r3, r1
 8002254:	3b98      	subs	r3, #152	; 0x98
 8002256:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002258:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800225c:	3301      	adds	r3, #1
 800225e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002262:	e7aa      	b.n	80021ba <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fdd2 	bl	8002e14 <_ZN12RotarySwitch8getValueEv>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002286:	2201      	movs	r2, #1
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fdbb 	bl	8001e08 <_ZN3LED2LREaa>
 8002292:	e781      	b.n	8002198 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800229a:	2200      	movs	r2, #0
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fdb1 	bl	8001e08 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80022a6:	e777      	b.n	8002198 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 80022a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	3338      	adds	r3, #56	; 0x38
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d016      	beq.n	80022fc <_ZN10LineSensor11calibrationEv+0x1c8>
 80022ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 80022d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f94b 	bl	8000578 <__aeabi_f2d>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	4842      	ldr	r0, [pc, #264]	; (80023f4 <_ZN10LineSensor11calibrationEv+0x2c0>)
 80022ec:	f010 fc26 	bl	8012b3c <iprintf>
	for(const auto &m : max_values){
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	3304      	adds	r3, #4
 80022f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022fa:	e7e2      	b.n	80022c2 <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 80022fc:	200a      	movs	r0, #10
 80022fe:	f010 fc35 	bl	8012b6c <putchar>
	for(const auto &m : min_values){
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800230a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800230e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002316:	3338      	adds	r3, #56	; 0x38
 8002318:	67fb      	str	r3, [r7, #124]	; 0x7c
 800231a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800231e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002320:	429a      	cmp	r2, r3
 8002322:	d014      	beq.n	800234e <_ZN10LineSensor11calibrationEv+0x21a>
 8002324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002328:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800232a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f922 	bl	8000578 <__aeabi_f2d>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	482d      	ldr	r0, [pc, #180]	; (80023f4 <_ZN10LineSensor11calibrationEv+0x2c0>)
 800233e:	f010 fbfd 	bl	8012b3c <iprintf>
	for(const auto &m : min_values){
 8002342:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002346:	3304      	adds	r3, #4
 8002348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800234c:	e7e5      	b.n	800231a <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 800234e:	200a      	movs	r0, #10
 8002350:	f010 fc0c 	bl	8012b6c <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002354:	2300      	movs	r3, #0
 8002356:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800235a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800235e:	2b0d      	cmp	r3, #13
 8002360:	d826      	bhi.n	80023b0 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002362:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800236c:	4413      	add	r3, r2
 800236e:	3b60      	subs	r3, #96	; 0x60
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800237e:	4413      	add	r3, r2
 8002380:	3b98      	subs	r3, #152	; 0x98
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800238a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800238e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80023f8 <_ZN10LineSensor11calibrationEv+0x2c4>
 8002392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	3392      	adds	r3, #146	; 0x92
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80023a8:	3301      	adds	r3, #1
 80023aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80023ae:	e7d4      	b.n	800235a <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80023b6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80023ba:	2b0d      	cmp	r3, #13
 80023bc:	d815      	bhi.n	80023ea <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 80023be:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80023c2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023cc:	440a      	add	r2, r1
 80023ce:	3a98      	subs	r2, #152	; 0x98
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	33a0      	adds	r3, #160	; 0xa0
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3304      	adds	r3, #4
 80023dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023de:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80023e8:	e7e5      	b.n	80023b6 <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 80023ea:	bf00      	nop
 80023ec:	37a4      	adds	r7, #164	; 0xa4
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08016d48 	.word	0x08016d48
 80023f8:	447a0000 	.word	0x447a0000

080023fc <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	3338      	adds	r3, #56	; 0x38
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	429a      	cmp	r2, r3
 8002420:	d012      	beq.n	8002448 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002468 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	db02      	blt.n	8002440 <_ZN10LineSensor13emergencyStopEv+0x44>
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	3301      	adds	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	3304      	adds	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e7e8      	b.n	800241a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002448:	7ffb      	ldrb	r3, [r7, #31]
 800244a:	2b0d      	cmp	r3, #13
 800244c:	d902      	bls.n	8002454 <_ZN10LineSensor13emergencyStopEv+0x58>
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
 8002452:	e001      	b.n	8002458 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002458:	7dfb      	ldrb	r3, [r7, #23]

}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	44160000 	.word	0x44160000

0800246c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80024f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80024fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002514:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002528:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002534:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002540:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800254c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002558:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002564:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256c:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	ee07 3a90 	vmov	s15, r3

}
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	0000      	movs	r0, r0
	...

08002588 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff95 	bl	80024c0 <_ZN9LineTrace9calcErrorEv>
 8002596:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	edd3 7a04 	vldr	s15, [r3, #16]
 80025a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <_ZN9LineTrace3pidEv+0x130>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80025bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c4:	ee17 0a90 	vmov	r0, s15
 80025c8:	f7fd ffd6 	bl	8000578 <__aeabi_f2d>
 80025cc:	a338      	add	r3, pc, #224	; (adr r3, 80026b0 <_ZN9LineTrace3pidEv+0x128>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe f953 	bl	800087c <__aeabi_ddiv>
 80025d6:	4603      	mov	r3, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	4618      	mov	r0, r3
 80025dc:	4621      	mov	r1, r4
 80025de:	f7fe fb1b 	bl	8000c18 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 80025e6:	4b35      	ldr	r3, [pc, #212]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffc4 	bl	8000578 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80025fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	ee17 0a90 	vmov	r0, s15
 8002606:	f7fd ffb7 	bl	8000578 <__aeabi_f2d>
 800260a:	a329      	add	r3, pc, #164	; (adr r3, 80026b0 <_ZN9LineTrace3pidEv+0x128>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fe f80a 	bl	8000628 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4620      	mov	r0, r4
 800261a:	4629      	mov	r1, r5
 800261c:	f7fd fe4e 	bl	80002bc <__adddf3>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	4618      	mov	r0, r3
 8002626:	4621      	mov	r1, r4
 8002628:	f7fe faf6 	bl	8000c18 <__aeabi_d2f>
 800262c:	4602      	mov	r2, r0
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 8002630:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	ed93 7a08 	vldr	s14, [r3, #32]
 8002638:	edd7 6a06 	vldr	s13, [r7, #24]
 800263c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002640:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002652:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	ed93 7a08 	vldr	s14, [r3, #32]
 800265c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002660:	edd7 7a05 	vldr	s15, [r7, #20]
 8002664:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002676:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	6938      	ldr	r0, [r7, #16]
 8002680:	f7fd ff7a 	bl	8000578 <__aeabi_f2d>
 8002684:	4605      	mov	r5, r0
 8002686:	460e      	mov	r6, r1
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fd ff75 	bl	8000578 <__aeabi_f2d>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ec43 2b11 	vmov	d1, r2, r3
 8002696:	ec46 5b10 	vmov	d0, r5, r6
 800269a:	4620      	mov	r0, r4
 800269c:	f000 f9e8 	bl	8002a70 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80026a0:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_ZN9LineTrace3pidEv+0x130>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	6013      	str	r3, [r2, #0]

}
 80026a6:	bf00      	nop
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026b4:	3f50624d 	.word	0x3f50624d
 80026b8:	20000208 	.word	0x20000208
 80026bc:	2000020c 	.word	0x2000020c

080026c0 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80026cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80026d0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff21 	bl	8002588 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fe56 	bl	80023fc <_ZN10LineSensor13emergencyStopEv>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d011      	beq.n	800277a <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002798 <_ZN9LineTrace4flipEv+0x68>
 800275e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002798 <_ZN9LineTrace4flipEv+0x68>
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f984 	bl	8002a70 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	330c      	adds	r3, #12
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fb48 	bl	8001e08 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002778:	e007      	b.n	800278a <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	330c      	adds	r3, #12
 800277e:	f04f 32ff 	mov.w	r2, #4294967295
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb3f 	bl	8001e08 <_ZN3LED2LREaa>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
	...

080027a0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	771a      	strb	r2, [r3, #28]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	0000      	movs	r0, r0
 80027bc:	0000      	movs	r0, r0
	...

080027c0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	ed9f 1b05 	vldr	d1, [pc, #20]	; 80027e8 <_ZN9LineTrace4stopEv+0x28>
 80027d6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80027e8 <_ZN9LineTrace4stopEv+0x28>
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f948 	bl	8002a70 <_ZN5Motor8setRatioEdd>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
	...

080027f0 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_(0){}
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80027fe:	3330      	adds	r3, #48	; 0x30
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 800282c:	f7fe ff4c 	bl	80016c8 <sd_mount>
 8002830:	4603      	mov	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002840:	4816      	ldr	r0, [pc, #88]	; (800289c <_ZN6Logger10sdCardInitEv+0x7c>)
 8002842:	f010 fa03 	bl	8012c4c <puts>
	  ret = true;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
 800284a:	e004      	b.n	8002856 <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 800284c:	4814      	ldr	r0, [pc, #80]	; (80028a0 <_ZN6Logger10sdCardInitEv+0x80>)
 800284e:	f010 f9fd 	bl	8012c4c <puts>
	  ret = false;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 800285a:	f107 0210 	add.w	r2, r7, #16
 800285e:	2301      	movs	r3, #1
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	2201      	movs	r2, #1
 8002866:	490f      	ldr	r1, [pc, #60]	; (80028a4 <_ZN6Logger10sdCardInitEv+0x84>)
 8002868:	480f      	ldr	r0, [pc, #60]	; (80028a8 <_ZN6Logger10sdCardInitEv+0x88>)
 800286a:	f7fe fe89 	bl	8001580 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2201      	movs	r2, #1
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <_ZN6Logger10sdCardInitEv+0x84>)
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <_ZN6Logger10sdCardInitEv+0x88>)
 8002878:	f7fe fee0 	bl	800163c <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 800287c:	f107 020c 	add.w	r2, r7, #12
 8002880:	2301      	movs	r3, #1
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	2201      	movs	r2, #1
 8002888:	4908      	ldr	r1, [pc, #32]	; (80028ac <_ZN6Logger10sdCardInitEv+0x8c>)
 800288a:	4807      	ldr	r0, [pc, #28]	; (80028a8 <_ZN6Logger10sdCardInitEv+0x88>)
 800288c:	f7fe fe78 	bl	8001580 <sd_write_array_int>

	return ret;
 8002890:	7dfb      	ldrb	r3, [r7, #23]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	08016d88 	.word	0x08016d88
 80028a0:	08016d98 	.word	0x08016d98
 80028a4:	08016da8 	.word	0x08016da8
 80028a8:	08016db4 	.word	0x08016db4
 80028ac:	08016dbc 	.word	0x08016dbc

080028b0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028c2:	3330      	adds	r3, #48	; 0x30
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_] = data;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	601a      	str	r2, [r3, #0]

		log_index_++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028e4:	3332      	adds	r3, #50	; 0x32
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	801a      	strh	r2, [r3, #0]

		if(log_index_ >= LOG_DATA_SIZE) log_index_ = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f241 3287 	movw	r2, #4999	; 0x1387
 8002904:	4293      	cmp	r3, r2
 8002906:	d905      	bls.n	8002914 <_ZN6Logger8storeLogEf+0x64>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800290e:	3332      	adds	r3, #50	; 0x32
 8002910:	2200      	movs	r2, #0
 8002912:	801a      	strh	r2, [r3, #0]
	}
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_ZN6Logger8saveLogsEPKcS1_>:
{

}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]

	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE, store_data_float_, OVER_WRITE); //write
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	2300      	movs	r3, #0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	f7fe fdba 	bl	80014b4 <sd_write_array_float>

}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZN6Logger5startEv>:

	log_index_ = 0;
}

void Logger::start()
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002956:	3330      	adds	r3, #48	; 0x30
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002976:	3330      	adds	r3, #48	; 0x30
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	805a      	strh	r2, [r3, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <_ZN5Motor4initEv>:

void Motor::init()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80029b4:	2108      	movs	r1, #8
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <_ZN5Motor4initEv+0x20>)
 80029b8:	f008 f926 	bl	800ac08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80029bc:	210c      	movs	r1, #12
 80029be:	4803      	ldr	r0, [pc, #12]	; (80029cc <_ZN5Motor4initEv+0x20>)
 80029c0:	f008 f922 	bl	800ac08 <HAL_TIM_PWM_Start>

}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000a1b4 	.word	0x2000a1b4

080029d0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da0d      	bge.n	80029fe <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029e8:	481f      	ldr	r0, [pc, #124]	; (8002a68 <_ZN5Motor9motorCtrlEv+0x98>)
 80029ea:	f004 f9db 	bl	8006da4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	425b      	negs	r3, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	81fb      	strh	r3, [r7, #14]
 80029fc:	e00a      	b.n	8002a14 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80029fe:	2201      	movs	r2, #1
 8002a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a04:	4818      	ldr	r0, [pc, #96]	; (8002a68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a06:	f004 f9cd 	bl	8006da4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da0d      	bge.n	8002a3a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a24:	4810      	ldr	r0, [pc, #64]	; (8002a68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a26:	f004 f9bd 	bl	8006da4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	425b      	negs	r3, r3
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	81bb      	strh	r3, [r7, #12]
 8002a38:	e00a      	b.n	8002a50 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a40:	4809      	ldr	r0, [pc, #36]	; (8002a68 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a42:	f004 f9af 	bl	8006da4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002a50:	89fa      	ldrh	r2, [r7, #14]
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002a58:	89ba      	ldrh	r2, [r7, #12]
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	2000a1b4 	.word	0x2000a1b4

08002a70 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6178      	str	r0, [r7, #20]
 8002a78:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a7c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a8a:	f7fe f85d 	bl	8000b48 <__aeabi_dcmpgt>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <_ZN5Motor8setRatioEdd+0x30>
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	4c2b      	ldr	r4, [pc, #172]	; (8002b48 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a9a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002a9e:	e00e      	b.n	8002abe <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <_ZN5Motor8setRatioEdd+0xdc>)
 8002aa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aaa:	f7fe f82f 	bl	8000b0c <__aeabi_dcmplt>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <_ZN5Motor8setRatioEdd+0x4e>
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	4c24      	ldr	r4, [pc, #144]	; (8002b4c <_ZN5Motor8setRatioEdd+0xdc>)
 8002aba:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <_ZN5Motor8setRatioEdd+0xd8>)
 8002ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac8:	f7fe f83e 	bl	8000b48 <__aeabi_dcmpgt>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <_ZN5Motor8setRatioEdd+0x6e>
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	4c1c      	ldr	r4, [pc, #112]	; (8002b48 <_ZN5Motor8setRatioEdd+0xd8>)
 8002ad8:	e9c7 3400 	strd	r3, r4, [r7]
 8002adc:	e00e      	b.n	8002afc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ae8:	f7fe f810 	bl	8000b0c <__aeabi_dcmplt>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <_ZN5Motor8setRatioEdd+0x8c>
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	4c15      	ldr	r4, [pc, #84]	; (8002b4c <_ZN5Motor8setRatioEdd+0xdc>)
 8002af8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <_ZN5Motor8setRatioEdd+0xe0>)
 8002b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b06:	f7fd fd8f 	bl	8000628 <__aeabi_dmul>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	4621      	mov	r1, r4
 8002b12:	f7fe f839 	bl	8000b88 <__aeabi_d2iz>
 8002b16:	4603      	mov	r3, r0
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <_ZN5Motor8setRatioEdd+0xe0>)
 8002b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b28:	f7fd fd7e 	bl	8000628 <__aeabi_dmul>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	4618      	mov	r0, r3
 8002b32:	4621      	mov	r1, r4
 8002b34:	f7fe f828 	bl	8000b88 <__aeabi_d2iz>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b21a      	sxth	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	805a      	strh	r2, [r3, #2]

}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd90      	pop	{r4, r7, pc}
 8002b48:	3ff00000 	.word	0x3ff00000
 8002b4c:	bff00000 	.word	0xbff00000
 8002b50:	409c2000 	.word	0x409c2000

08002b54 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
{
	encoder_ = encoder;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	0000      	movs	r0, r0
 8002b9c:	0000      	movs	r0, r0
	...

08002ba0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
	float current_velocity = velocity_ctrl_->getCurrentVelocity();
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fc4a 	bl	8003448 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8002bb4:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_omega = velocity_ctrl_->getCurrentOmega();
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fc52 	bl	8003466 <_ZN12VelocityCtrl15getCurrentOmegaEv>
 8002bc2:	ed87 0a04 	vstr	s0, [r7, #16]

	float delta_theta = current_omega * DELTA_T;
 8002bc6:	6938      	ldr	r0, [r7, #16]
 8002bc8:	f7fd fcd6 	bl	8000578 <__aeabi_f2d>
 8002bcc:	a353      	add	r3, pc, #332	; (adr r3, 8002d1c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd fd29 	bl	8000628 <__aeabi_dmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460c      	mov	r4, r1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4621      	mov	r1, r4
 8002bde:	f7fe f81b 	bl	8000c18 <__aeabi_d2f>
 8002be2:	4603      	mov	r3, r0
 8002be4:	60fb      	str	r3, [r7, #12]

	x_ = x_ + current_velocity * DELTA_T * cos(theta_ + delta_theta / 2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcc4 	bl	8000578 <__aeabi_f2d>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	6978      	ldr	r0, [r7, #20]
 8002bf6:	f7fd fcbf 	bl	8000578 <__aeabi_f2d>
 8002bfa:	a348      	add	r3, pc, #288	; (adr r3, 8002d1c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fd12 	bl	8000628 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4690      	mov	r8, r2
 8002c0a:	4699      	mov	r9, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c12:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c16:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c22:	ee17 0a90 	vmov	r0, s15
 8002c26:	f7fd fca7 	bl	8000578 <__aeabi_f2d>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	ec43 2b10 	vmov	d0, r2, r3
 8002c32:	f00e f8bd 	bl	8010db0 <cos>
 8002c36:	ec53 2b10 	vmov	r2, r3, d0
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	f7fd fcf3 	bl	8000628 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4620      	mov	r0, r4
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f7fd fb37 	bl	80002bc <__adddf3>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	4618      	mov	r0, r3
 8002c54:	4621      	mov	r1, r4
 8002c56:	f7fd ffdf 	bl	8000c18 <__aeabi_d2f>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
	y_ = y_ + current_velocity * DELTA_T * sin(theta_ + delta_theta / 2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc87 	bl	8000578 <__aeabi_f2d>
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7fd fc82 	bl	8000578 <__aeabi_f2d>
 8002c74:	a329      	add	r3, pc, #164	; (adr r3, 8002d1c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f7fd fcd5 	bl	8000628 <__aeabi_dmul>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4690      	mov	r8, r2
 8002c84:	4699      	mov	r9, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c8c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c90:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c94:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9c:	ee17 0a90 	vmov	r0, s15
 8002ca0:	f7fd fc6a 	bl	8000578 <__aeabi_f2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	ec43 2b10 	vmov	d0, r2, r3
 8002cac:	f00e f8c4 	bl	8010e38 <sin>
 8002cb0:	ec53 2b10 	vmov	r2, r3, d0
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	f7fd fcb6 	bl	8000628 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd fafa 	bl	80002bc <__adddf3>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	460c      	mov	r4, r1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	4621      	mov	r1, r4
 8002cd0:	f7fd ffa2 	bl	8000c18 <__aeabi_d2f>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
	theta_ = theta_ + delta_theta;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	edc3 7a05 	vstr	s15, [r3, #20]


	monitor_x = x_;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <_ZN8Odometry12calcPotitionEv+0x170>)
 8002cf4:	6013      	str	r3, [r2, #0]
	monitor_y = y_;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <_ZN8Odometry12calcPotitionEv+0x174>)
 8002cfc:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <_ZN8Odometry12calcPotitionEv+0x178>)
 8002d04:	6013      	str	r3, [r2, #0]

	//encoder_->getDistance();

}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d10:	20000210 	.word	0x20000210
 8002d14:	20000214 	.word	0x20000214
 8002d18:	20000218 	.word	0x20000218
 8002d1c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d20:	3f50624d 	.word	0x3f50624d

08002d24 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff37 	bl	8002ba0 <_ZN8Odometry12calcPotitionEv>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8002d42:	2088      	movs	r0, #136	; 0x88
 8002d44:	f7fe ff25 	bl	8001b92 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8002d48:	2080      	movs	r0, #128	; 0x80
 8002d4a:	f7fe ff22 	bl	8001b92 <INA260_init>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8002d60:	2188      	movs	r1, #136	; 0x88
 8002d62:	2002      	movs	r0, #2
 8002d64:	f7fe feb2 	bl	8001acc <INA260_read>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbf2 	bl	8000554 <__aeabi_i2d>
 8002d70:	a30c      	add	r3, pc, #48	; (adr r3, 8002da4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fc57 	bl	8000628 <__aeabi_dmul>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4621      	mov	r1, r4
 8002d82:	f7fd ff49 	bl	8000c18 <__aeabi_d2f>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	f3af 8000 	nop.w
 8002da0:	2000021c 	.word	0x2000021c
 8002da4:	47ae147b 	.word	0x47ae147b
 8002da8:	3f547ae1 	.word	0x3f547ae1
 8002dac:	00000000 	.word	0x00000000

08002db0 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbd9 	bl	8000578 <__aeabi_f2d>
 8002dc6:	a311      	add	r3, pc, #68	; (adr r3, 8002e0c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fe9e 	bl	8000b0c <__aeabi_dcmplt>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	e002      	b.n	8002dea <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000220 	.word	0x20000220
 8002e0c:	9999999a 	.word	0x9999999a
 8002e10:	401d9999 	.word	0x401d9999

08002e14 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8002e20:	2102      	movs	r1, #2
 8002e22:	4822      	ldr	r0, [pc, #136]	; (8002eac <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e24:	f003 ffa6 	bl	8006d74 <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <_ZN12RotarySwitch8getValueEv+0x2c>
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8002e40:	2108      	movs	r1, #8
 8002e42:	481a      	ldr	r0, [pc, #104]	; (8002eac <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e44:	f003 ff96 	bl	8006d74 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <_ZN12RotarySwitch8getValueEv+0x4c>
 8002e58:	89fb      	ldrh	r3, [r7, #14]
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8002e60:	2110      	movs	r1, #16
 8002e62:	4812      	ldr	r0, [pc, #72]	; (8002eac <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e64:	f003 ff86 	bl	8006d74 <HAL_GPIO_ReadPin>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <_ZN12RotarySwitch8getValueEv+0x6c>
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	480a      	ldr	r0, [pc, #40]	; (8002eac <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e84:	f003 ff76 	bl	8006d74 <HAL_GPIO_ReadPin>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <_ZN12RotarySwitch8getValueEv+0x8c>
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	f043 0308 	orr.w	r3, r3, #8
 8002e9e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8002ea0:	89fb      	ldrh	r3, [r7, #14]

}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020c00 	.word	0x40020c00

08002eb0 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
{

}
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d111      	bne.n	8002efe <_ZN10SideSensor12updateStatusEt+0x36>
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e010      	b.n	8002f20 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d10d      	bne.n	8002f20 <_ZN10SideSensor12updateStatusEt+0x58>
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d111      	bne.n	8002f4c <_ZN10SideSensor12updateStatusEt+0x84>
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8002f4a:	e011      	b.n	8002f70 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f52:	d10d      	bne.n	8002f70 <_ZN10SideSensor12updateStatusEt+0xa8>
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	f083 0302 	eor.w	r3, r3, #2
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	20000222 	.word	0x20000222
 8002f80:	20000223 	.word	0x20000223

08002f84 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	0000      	movs	r0, r0
 800300c:	0000      	movs	r0, r0
	...

08003010 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f107 020c 	add.w	r2, r7, #12
 8003020:	f107 0110 	add.w	r1, r7, #16
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe f971 	bl	800130c <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800302a:	ed97 7a04 	vldr	s14, [r7, #16]
 800302e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003032:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003036:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800303a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800303e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7fd fa98 	bl	8000578 <__aeabi_f2d>
 8003048:	a30b      	add	r3, pc, #44	; (adr r3, 8003078 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd faeb 	bl	8000628 <__aeabi_dmul>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
 8003056:	4618      	mov	r0, r3
 8003058:	4621      	mov	r1, r4
 800305a:	f7fd fddd 	bl	8000c18 <__aeabi_d2f>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	ee07 3a90 	vmov	s15, r3
}
 800306c:	eeb0 0a67 	vmov.f32	s0, s15
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	1ab1d998 	.word	0x1ab1d998
 800307c:	3f7830b5 	.word	0x3f7830b5

08003080 <_ZN12VelocityCtrl9calcOmegaEv>:

float VelocityCtrl::calcOmega()
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	float omega = imu_->getOmega();
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fd09 	bl	8001aa4 <_ZN3IMU8getOmegaEv>
 8003092:	ed87 0a03 	vstr	s0, [r7, #12]
	current_omega_ = -(omega / 16.4) * PI / 180;
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7fd fa6e 	bl	8000578 <__aeabi_f2d>
 800309c:	a317      	add	r3, pc, #92	; (adr r3, 80030fc <_ZN12VelocityCtrl9calcOmegaEv+0x7c>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd fbeb 	bl	800087c <__aeabi_ddiv>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4614      	mov	r4, r2
 80030ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80030b0:	a314      	add	r3, pc, #80	; (adr r3, 8003104 <_ZN12VelocityCtrl9calcOmegaEv+0x84>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	4620      	mov	r0, r4
 80030b8:	4629      	mov	r1, r5
 80030ba:	f7fd fab5 	bl	8000628 <__aeabi_dmul>
 80030be:	4603      	mov	r3, r0
 80030c0:	460c      	mov	r4, r1
 80030c2:	4618      	mov	r0, r3
 80030c4:	4621      	mov	r1, r4
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <_ZN12VelocityCtrl9calcOmegaEv+0x78>)
 80030cc:	f7fd fbd6 	bl	800087c <__aeabi_ddiv>
 80030d0:	4603      	mov	r3, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	4618      	mov	r0, r3
 80030d6:	4621      	mov	r1, r4
 80030d8:	f7fd fd9e 	bl	8000c18 <__aeabi_d2f>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60da      	str	r2, [r3, #12]
	//printf("omegao: %f\n", current_omega_);

	return current_omega_;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	ee07 3a90 	vmov	s15, r3
}
 80030ea:	eeb0 0a67 	vmov.f32	s0, s15
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bdb0      	pop	{r4, r5, r7, pc}
 80030f4:	f3af 8000 	nop.w
 80030f8:	40668000 	.word	0x40668000
 80030fc:	66666666 	.word	0x66666666
 8003100:	40306666 	.word	0x40306666
 8003104:	54411744 	.word	0x54411744
 8003108:	400921fb 	.word	0x400921fb
 800310c:	00000000 	.word	0x00000000

08003110 <_ZN12VelocityCtrl3pidEv>:


void VelocityCtrl::pid()
{
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003112:	b08d      	sub	sp, #52	; 0x34
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	edd3 7a02 	vldr	s15, [r3, #8]
 8003124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003128:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- current_omega_;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	edd3 7a03 	vldr	s15, [r3, #12]
 8003138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	edd3 7a04 	vldr	s15, [r3, #16]
 8003146:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	ed93 7a05 	vldr	s14, [r3, #20]
 8003158:	4b73      	ldr	r3, [pc, #460]	; (8003328 <_ZN12VelocityCtrl3pidEv+0x218>)
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003162:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	ee17 0a90 	vmov	r0, s15
 800316e:	f7fd fa03 	bl	8000578 <__aeabi_f2d>
 8003172:	a36b      	add	r3, pc, #428	; (adr r3, 8003320 <_ZN12VelocityCtrl3pidEv+0x210>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd fa56 	bl	8000628 <__aeabi_dmul>
 800317c:	4603      	mov	r3, r0
 800317e:	460c      	mov	r4, r1
 8003180:	4618      	mov	r0, r3
 8003182:	4621      	mov	r1, r4
 8003184:	f7fd fd48 	bl	8000c18 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
 800318a:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 800318c:	4b67      	ldr	r3, [pc, #412]	; (800332c <_ZN12VelocityCtrl3pidEv+0x21c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f9f1 	bl	8000578 <__aeabi_f2d>
 8003196:	4604      	mov	r4, r0
 8003198:	460d      	mov	r5, r1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	ed93 7a06 	vldr	s14, [r3, #24]
 80031a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	ee17 0a90 	vmov	r0, s15
 80031ac:	f7fd f9e4 	bl	8000578 <__aeabi_f2d>
 80031b0:	a35b      	add	r3, pc, #364	; (adr r3, 8003320 <_ZN12VelocityCtrl3pidEv+0x210>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fd fa37 	bl	8000628 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fd f87b 	bl	80002bc <__adddf3>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	4618      	mov	r0, r3
 80031cc:	4621      	mov	r1, r4
 80031ce:	f7fd fd23 	bl	8000c18 <__aeabi_d2f>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b55      	ldr	r3, [pc, #340]	; (800332c <_ZN12VelocityCtrl3pidEv+0x21c>)
 80031d6:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 7a07 	vldr	s15, [r3, #28]
 80031de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	ed93 7a08 	vldr	s14, [r3, #32]
 80031f0:	4b4f      	ldr	r3, [pc, #316]	; (8003330 <_ZN12VelocityCtrl3pidEv+0x220>)
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80031fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	ee17 0a90 	vmov	r0, s15
 8003206:	f7fd f9b7 	bl	8000578 <__aeabi_f2d>
 800320a:	a345      	add	r3, pc, #276	; (adr r3, 8003320 <_ZN12VelocityCtrl3pidEv+0x210>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd fa0a 	bl	8000628 <__aeabi_dmul>
 8003214:	4603      	mov	r3, r0
 8003216:	460c      	mov	r4, r1
 8003218:	4618      	mov	r0, r3
 800321a:	4621      	mov	r1, r4
 800321c:	f7fd fcfc 	bl	8000c18 <__aeabi_d2f>
 8003220:	4603      	mov	r3, r0
 8003222:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <_ZN12VelocityCtrl3pidEv+0x224>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f9a5 	bl	8000578 <__aeabi_f2d>
 800322e:	4604      	mov	r4, r0
 8003230:	460d      	mov	r5, r1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003238:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800323c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003240:	ee17 0a90 	vmov	r0, s15
 8003244:	f7fd f998 	bl	8000578 <__aeabi_f2d>
 8003248:	a335      	add	r3, pc, #212	; (adr r3, 8003320 <_ZN12VelocityCtrl3pidEv+0x210>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fd f9eb 	bl	8000628 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4620      	mov	r0, r4
 8003258:	4629      	mov	r1, r5
 800325a:	f7fd f82f 	bl	80002bc <__adddf3>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	4618      	mov	r0, r3
 8003264:	4621      	mov	r1, r4
 8003266:	f7fd fcd7 	bl	8000c18 <__aeabi_d2f>
 800326a:	4602      	mov	r2, r0
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <_ZN12VelocityCtrl3pidEv+0x224>)
 800326e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003270:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003274:	edd7 7a08 	vldr	s15, [r7, #32]
 8003278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <_ZN12VelocityCtrl3pidEv+0x21c>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003286:	edc7 7a05 	vstr	s15, [r7, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800328e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003292:	edd7 7a06 	vldr	s15, [r7, #24]
 8003296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <_ZN12VelocityCtrl3pidEv+0x224>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80032a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <_ZN12VelocityCtrl3pidEv+0x224>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	eef1 7a67 	vneg.f32	s15, s15
 80032c2:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80032ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80032ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	ee17 0a90 	vmov	r0, s15
 80032da:	f7fd f94d 	bl	8000578 <__aeabi_f2d>
 80032de:	4605      	mov	r5, r0
 80032e0:	460e      	mov	r6, r1
 80032e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ee:	ee17 0a90 	vmov	r0, s15
 80032f2:	f7fd f941 	bl	8000578 <__aeabi_f2d>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	ec43 2b11 	vmov	d1, r2, r3
 80032fe:	ec46 5b10 	vmov	d0, r5, r6
 8003302:	4620      	mov	r0, r4
 8003304:	f7ff fbb4 	bl	8002a70 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <_ZN12VelocityCtrl3pidEv+0x218>)
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	3734      	adds	r7, #52	; 0x34
 8003318:	46bd      	mov	sp, r7
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331c:	f3af 8000 	nop.w
 8003320:	d2f1a9fc 	.word	0xd2f1a9fc
 8003324:	3f50624d 	.word	0x3f50624d
 8003328:	20000224 	.word	0x20000224
 800332c:	2000022c 	.word	0x2000022c
 8003330:	20000228 	.word	0x20000228
 8003334:	20000230 	.word	0x20000230

08003338 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	ed87 0a02 	vstr	s0, [r7, #8]
 8003344:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	605a      	str	r2, [r3, #4]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	ed87 0a02 	vstr	s0, [r7, #8]
 800336c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003370:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	611a      	str	r2, [r3, #16]
	v_kd_ = kd;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	615a      	str	r2, [r3, #20]
	v_ki_ = ki;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	ed87 0a02 	vstr	s0, [r7, #8]
 800339e:	edc7 0a01 	vstr	s1, [r7, #4]
 80033a2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	61da      	str	r2, [r3, #28]
	o_kd_ = kd;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]
	o_ki_ = ki;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fe1f 	bl	8003010 <_ZN12VelocityCtrl12calcVelocityEv>
	calcOmega();
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fe54 	bl	8003080 <_ZN12VelocityCtrl9calcOmegaEv>

	if(excution_flag_ == true){
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <_ZN12VelocityCtrl4flipEv+0x24>
		pid();
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff fe94 	bl	8003110 <_ZN12VelocityCtrl3pidEv>
	}


}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	0000      	movs	r0, r0
	...

08003410 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003440 <_ZN12VelocityCtrl4stopEv+0x30>
 8003428:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003440 <_ZN12VelocityCtrl4stopEv+0x30>
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fb1f 	bl	8002a70 <_ZN5Motor8setRatioEdd>

}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	f3af 8000 	nop.w
	...

08003448 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	ee07 3a90 	vmov	s15, r3
}
 8003458:	eeb0 0a67 	vmov.f32	s0, s15
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_ZN12VelocityCtrl15getCurrentOmegaEv>:

float VelocityCtrl::getCurrentOmega()
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	return current_omega_;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	ee07 3a90 	vmov	s15, r3
}
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800348c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003490:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800349c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80034a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80034ac:	e000      	b.n	80034b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80034ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80034b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f9      	beq.n	80034ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80034ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80034c4:	687b      	ldr	r3, [r7, #4]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e009      	b.n	80034f8 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	60ba      	str	r2, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ffc9 	bl	8003484 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3301      	adds	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	dbf1      	blt.n	80034e4 <_write+0x12>
  }
  return len;
 8003500:	687b      	ldr	r3, [r7, #4]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	4618      	mov	r0, r3
 8003518:	f001 feae 	bl	8005278 <cppExit>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003536:	f001 fe5b 	bl	80051f0 <cppFlip1ms>

		tim6_timer++;
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003542:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d902      	bls.n	8003554 <HAL_TIM_PeriodElapsedCallback+0x30>
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10e      	bne.n	800357c <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 800355e:	f001 fe71 	bl	8005244 <cppFlip100ns>

		tim7_timer++;
 8003562:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800356a:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d902      	bls.n	800357c <HAL_TIM_PeriodElapsedCallback+0x58>
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10e      	bne.n	80035a4 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003586:	f001 fe67 	bl	8005258 <cppFlip10ms>

		tim13_timer++;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003592:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d902      	bls.n	80035a4 <HAL_TIM_PeriodElapsedCallback+0x80>
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
	}

}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40001000 	.word	0x40001000
 80035b0:	2000a324 	.word	0x2000a324
 80035b4:	0001869f 	.word	0x0001869f
 80035b8:	40001400 	.word	0x40001400
 80035bc:	2000a368 	.word	0x2000a368
 80035c0:	40001c00 	.word	0x40001c00
 80035c4:	2000a36c 	.word	0x2000a36c

080035c8 <init>:

void init()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80035cc:	2201      	movs	r2, #1
 80035ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <init+0x2c>)
 80035d4:	f003 fbe6 	bl	8006da4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80035d8:	4807      	ldr	r0, [pc, #28]	; (80035f8 <init+0x30>)
 80035da:	f007 fac6 	bl	800ab6a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80035de:	4807      	ldr	r0, [pc, #28]	; (80035fc <init+0x34>)
 80035e0:	f007 fac3 	bl	800ab6a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80035e4:	4806      	ldr	r0, [pc, #24]	; (8003600 <init+0x38>)
 80035e6:	f007 fac0 	bl	800ab6a <HAL_TIM_Base_Start_IT>

	cppInit();
 80035ea:	f001 fd8b 	bl	8005104 <cppInit>

}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	2000a450 	.word	0x2000a450
 80035fc:	2000a5f4 	.word	0x2000a5f4
 8003600:	2000a370 	.word	0x2000a370

08003604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003608:	f002 f8c4 	bl	8005794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800360c:	f000 f82a 	bl	8003664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003610:	f000 fdbc 	bl	800418c <MX_GPIO_Init>
  MX_DMA_Init();
 8003614:	f000 fd8a 	bl	800412c <MX_DMA_Init>
  MX_I2C2_Init();
 8003618:	f000 f9e8 	bl	80039ec <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800361c:	f000 fa14 	bl	8003a48 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003620:	f000 fa32 	bl	8003a88 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003624:	f000 fa66 	bl	8003af4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003628:	f000 fb70 	bl	8003d0c <MX_TIM4_Init>
  MX_TIM8_Init();
 800362c:	f000 fc3c 	bl	8003ea8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003630:	f000 fd52 	bl	80040d8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003634:	f009 fa6c 	bl	800cb10 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003638:	f000 fbcc 	bl	8003dd4 <MX_TIM6_Init>
  MX_I2C1_Init();
 800363c:	f000 f9a8 	bl	8003990 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003640:	f000 fb00 	bl	8003c44 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003644:	f000 fc88 	bl	8003f58 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003648:	f000 fcd4 	bl	8003ff4 <MX_TIM11_Init>
  MX_ADC2_Init();
 800364c:	f000 f898 	bl	8003780 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003650:	f000 fbf6 	bl	8003e40 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003654:	f000 fd1c 	bl	8004090 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003658:	f7ff ffb6 	bl	80035c8 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 800365c:	f001 fe1c 	bl	8005298 <cppLoop>
 8003660:	e7fc      	b.n	800365c <main+0x58>
	...

08003664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b0a4      	sub	sp, #144	; 0x90
 8003668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800366a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800366e:	2234      	movs	r2, #52	; 0x34
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f00e fc1c 	bl	8011eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	223c      	movs	r2, #60	; 0x3c
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f00e fc0d 	bl	8011eb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <SystemClock_Config+0x114>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a36      	ldr	r2, [pc, #216]	; (8003778 <SystemClock_Config+0x114>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <SystemClock_Config+0x114>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <SystemClock_Config+0x118>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a30      	ldr	r2, [pc, #192]	; (800377c <SystemClock_Config+0x118>)
 80036bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <SystemClock_Config+0x118>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036ce:	2301      	movs	r3, #1
 80036d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d8:	2302      	movs	r3, #2
 80036da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036e2:	2308      	movs	r3, #8
 80036e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80036e6:	23b4      	movs	r3, #180	; 0xb4
 80036e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ec:	2302      	movs	r3, #2
 80036ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80036f2:	2308      	movs	r3, #8
 80036f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003702:	4618      	mov	r0, r3
 8003704:	f004 ff88 	bl	8008618 <HAL_RCC_OscConfig>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800370e:	f000 fe93 	bl	8004438 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003712:	f004 fb03 	bl	8007d1c <HAL_PWREx_EnableOverDrive>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800371c:	f000 fe8c 	bl	8004438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003720:	230f      	movs	r3, #15
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003724:	2302      	movs	r3, #2
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003728:	2300      	movs	r3, #0
 800372a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800372c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003730:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003736:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003738:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800373c:	2105      	movs	r1, #5
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fb3c 	bl	8007dbc <HAL_RCC_ClockConfig>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800374a:	f000 fe75 	bl	8004438 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800374e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003752:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003754:	2300      	movs	r3, #0
 8003756:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003758:	2300      	movs	r3, #0
 800375a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	4618      	mov	r0, r3
 8003762:	f004 fd1b 	bl	800819c <HAL_RCCEx_PeriphCLKConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800376c:	f000 fe64 	bl	8004438 <Error_Handler>
  }
}
 8003770:	bf00      	nop
 8003772:	3790      	adds	r7, #144	; 0x90
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000

08003780 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003786:	463b      	mov	r3, r7
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003792:	4b7c      	ldr	r3, [pc, #496]	; (8003984 <MX_ADC2_Init+0x204>)
 8003794:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <MX_ADC2_Init+0x208>)
 8003796:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003798:	4b7a      	ldr	r3, [pc, #488]	; (8003984 <MX_ADC2_Init+0x204>)
 800379a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800379e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80037a0:	4b78      	ldr	r3, [pc, #480]	; (8003984 <MX_ADC2_Init+0x204>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80037a6:	4b77      	ldr	r3, [pc, #476]	; (8003984 <MX_ADC2_Init+0x204>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80037ac:	4b75      	ldr	r3, [pc, #468]	; (8003984 <MX_ADC2_Init+0x204>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80037b2:	4b74      	ldr	r3, [pc, #464]	; (8003984 <MX_ADC2_Init+0x204>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037ba:	4b72      	ldr	r3, [pc, #456]	; (8003984 <MX_ADC2_Init+0x204>)
 80037bc:	2200      	movs	r2, #0
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037c0:	4b70      	ldr	r3, [pc, #448]	; (8003984 <MX_ADC2_Init+0x204>)
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <MX_ADC2_Init+0x20c>)
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037c6:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <MX_ADC2_Init+0x204>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80037cc:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <MX_ADC2_Init+0x204>)
 80037ce:	220e      	movs	r2, #14
 80037d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80037d2:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <MX_ADC2_Init+0x204>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037da:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <MX_ADC2_Init+0x204>)
 80037dc:	2201      	movs	r2, #1
 80037de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037e0:	4868      	ldr	r0, [pc, #416]	; (8003984 <MX_ADC2_Init+0x204>)
 80037e2:	f002 f86b 	bl	80058bc <HAL_ADC_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80037ec:	f000 fe24 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80037f0:	230a      	movs	r3, #10
 80037f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80037f8:	2306      	movs	r3, #6
 80037fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037fc:	463b      	mov	r3, r7
 80037fe:	4619      	mov	r1, r3
 8003800:	4860      	ldr	r0, [pc, #384]	; (8003984 <MX_ADC2_Init+0x204>)
 8003802:	f002 f9af 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800380c:	f000 fe14 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003810:	230b      	movs	r3, #11
 8003812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003814:	2302      	movs	r3, #2
 8003816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003818:	463b      	mov	r3, r7
 800381a:	4619      	mov	r1, r3
 800381c:	4859      	ldr	r0, [pc, #356]	; (8003984 <MX_ADC2_Init+0x204>)
 800381e:	f002 f9a1 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003828:	f000 fe06 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800382c:	230c      	movs	r3, #12
 800382e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003830:	2303      	movs	r3, #3
 8003832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003834:	463b      	mov	r3, r7
 8003836:	4619      	mov	r1, r3
 8003838:	4852      	ldr	r0, [pc, #328]	; (8003984 <MX_ADC2_Init+0x204>)
 800383a:	f002 f993 	bl	8005b64 <HAL_ADC_ConfigChannel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003844:	f000 fdf8 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003848:	230d      	movs	r3, #13
 800384a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800384c:	2304      	movs	r3, #4
 800384e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003850:	463b      	mov	r3, r7
 8003852:	4619      	mov	r1, r3
 8003854:	484b      	ldr	r0, [pc, #300]	; (8003984 <MX_ADC2_Init+0x204>)
 8003856:	f002 f985 	bl	8005b64 <HAL_ADC_ConfigChannel>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003860:	f000 fdea 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003864:	2300      	movs	r3, #0
 8003866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003868:	2305      	movs	r3, #5
 800386a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800386c:	463b      	mov	r3, r7
 800386e:	4619      	mov	r1, r3
 8003870:	4844      	ldr	r0, [pc, #272]	; (8003984 <MX_ADC2_Init+0x204>)
 8003872:	f002 f977 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800387c:	f000 fddc 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003880:	2301      	movs	r3, #1
 8003882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003884:	2306      	movs	r3, #6
 8003886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003888:	463b      	mov	r3, r7
 800388a:	4619      	mov	r1, r3
 800388c:	483d      	ldr	r0, [pc, #244]	; (8003984 <MX_ADC2_Init+0x204>)
 800388e:	f002 f969 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003898:	f000 fdce 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800389c:	2302      	movs	r3, #2
 800389e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80038a0:	2307      	movs	r3, #7
 80038a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038a4:	463b      	mov	r3, r7
 80038a6:	4619      	mov	r1, r3
 80038a8:	4836      	ldr	r0, [pc, #216]	; (8003984 <MX_ADC2_Init+0x204>)
 80038aa:	f002 f95b 	bl	8005b64 <HAL_ADC_ConfigChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80038b4:	f000 fdc0 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80038b8:	2303      	movs	r3, #3
 80038ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80038bc:	2308      	movs	r3, #8
 80038be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038c0:	463b      	mov	r3, r7
 80038c2:	4619      	mov	r1, r3
 80038c4:	482f      	ldr	r0, [pc, #188]	; (8003984 <MX_ADC2_Init+0x204>)
 80038c6:	f002 f94d 	bl	8005b64 <HAL_ADC_ConfigChannel>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80038d0:	f000 fdb2 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80038d4:	2304      	movs	r3, #4
 80038d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80038d8:	2309      	movs	r3, #9
 80038da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038dc:	463b      	mov	r3, r7
 80038de:	4619      	mov	r1, r3
 80038e0:	4828      	ldr	r0, [pc, #160]	; (8003984 <MX_ADC2_Init+0x204>)
 80038e2:	f002 f93f 	bl	8005b64 <HAL_ADC_ConfigChannel>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80038ec:	f000 fda4 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80038f0:	2305      	movs	r3, #5
 80038f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80038f4:	230a      	movs	r3, #10
 80038f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038f8:	463b      	mov	r3, r7
 80038fa:	4619      	mov	r1, r3
 80038fc:	4821      	ldr	r0, [pc, #132]	; (8003984 <MX_ADC2_Init+0x204>)
 80038fe:	f002 f931 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003908:	f000 fd96 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800390c:	2306      	movs	r3, #6
 800390e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003910:	230b      	movs	r3, #11
 8003912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003914:	463b      	mov	r3, r7
 8003916:	4619      	mov	r1, r3
 8003918:	481a      	ldr	r0, [pc, #104]	; (8003984 <MX_ADC2_Init+0x204>)
 800391a:	f002 f923 	bl	8005b64 <HAL_ADC_ConfigChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003924:	f000 fd88 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003928:	2307      	movs	r3, #7
 800392a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800392c:	230c      	movs	r3, #12
 800392e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003930:	463b      	mov	r3, r7
 8003932:	4619      	mov	r1, r3
 8003934:	4813      	ldr	r0, [pc, #76]	; (8003984 <MX_ADC2_Init+0x204>)
 8003936:	f002 f915 	bl	8005b64 <HAL_ADC_ConfigChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003940:	f000 fd7a 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003944:	2308      	movs	r3, #8
 8003946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003948:	230d      	movs	r3, #13
 800394a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800394c:	463b      	mov	r3, r7
 800394e:	4619      	mov	r1, r3
 8003950:	480c      	ldr	r0, [pc, #48]	; (8003984 <MX_ADC2_Init+0x204>)
 8003952:	f002 f907 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 800395c:	f000 fd6c 	bl	8004438 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003960:	2309      	movs	r3, #9
 8003962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003964:	230e      	movs	r3, #14
 8003966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003968:	463b      	mov	r3, r7
 800396a:	4619      	mov	r1, r3
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <MX_ADC2_Init+0x204>)
 800396e:	f002 f8f9 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003978:	f000 fd5e 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000a1f4 	.word	0x2000a1f4
 8003988:	40012100 	.word	0x40012100
 800398c:	0f000001 	.word	0x0f000001

08003990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <MX_I2C1_Init+0x50>)
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <MX_I2C1_Init+0x54>)
 8003998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_I2C1_Init+0x50>)
 800399c:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <MX_I2C1_Init+0x58>)
 800399e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039cc:	4804      	ldr	r0, [pc, #16]	; (80039e0 <MX_I2C1_Init+0x50>)
 80039ce:	f003 fa1b 	bl	8006e08 <HAL_I2C_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039d8:	f000 fd2e 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	2000a23c 	.word	0x2000a23c
 80039e4:	40005400 	.word	0x40005400
 80039e8:	000186a0 	.word	0x000186a0

080039ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <MX_I2C2_Init+0x50>)
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <MX_I2C2_Init+0x54>)
 80039f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <MX_I2C2_Init+0x50>)
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <MX_I2C2_Init+0x58>)
 80039fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <MX_I2C2_Init+0x50>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a28:	4804      	ldr	r0, [pc, #16]	; (8003a3c <MX_I2C2_Init+0x50>)
 8003a2a:	f003 f9ed 	bl	8006e08 <HAL_I2C_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a34:	f000 fd00 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000a2d0 	.word	0x2000a2d0
 8003a40:	40005800 	.word	0x40005800
 8003a44:	000186a0 	.word	0x000186a0

08003a48 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <MX_SDIO_SD_Init+0x3c>)
 8003a50:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <MX_SDIO_SD_Init+0x38>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	2000a4d0 	.word	0x2000a4d0
 8003a84:	40012c00 	.word	0x40012c00

08003a88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <MX_SPI2_Init+0x64>)
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <MX_SPI2_Init+0x68>)
 8003a90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <MX_SPI2_Init+0x64>)
 8003a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <MX_SPI2_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <MX_SPI2_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <MX_SPI2_Init+0x64>)
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <MX_SPI2_Init+0x64>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <MX_SPI2_Init+0x64>)
 8003ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <MX_SPI2_Init+0x64>)
 8003abc:	2228      	movs	r2, #40	; 0x28
 8003abe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <MX_SPI2_Init+0x64>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <MX_SPI2_Init+0x64>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <MX_SPI2_Init+0x64>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <MX_SPI2_Init+0x64>)
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ad8:	4804      	ldr	r0, [pc, #16]	; (8003aec <MX_SPI2_Init+0x64>)
 8003ada:	f006 fac7 	bl	800a06c <HAL_SPI_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ae4:	f000 fca8 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	2000a11c 	.word	0x2000a11c
 8003af0:	40003800 	.word	0x40003800

08003af4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b09a      	sub	sp, #104	; 0x68
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003afa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00e f9d4 	bl	8011eb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b12:	f107 0320 	add.w	r3, r7, #32
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	611a      	str	r2, [r3, #16]
 8003b22:	615a      	str	r2, [r3, #20]
 8003b24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b26:	463b      	mov	r3, r7
 8003b28:	2220      	movs	r2, #32
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00e f9bf 	bl	8011eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b32:	4b42      	ldr	r3, [pc, #264]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b34:	4a42      	ldr	r2, [pc, #264]	; (8003c40 <MX_TIM1_Init+0x14c>)
 8003b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003b38:	4b40      	ldr	r3, [pc, #256]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3e:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b52:	4b3a      	ldr	r3, [pc, #232]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b58:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b5e:	4837      	ldr	r0, [pc, #220]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b60:	f007 f827 	bl	800abb2 <HAL_TIM_PWM_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003b6a:	f000 fc65 	bl	8004438 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b72:	2300      	movs	r3, #0
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b76:	2301      	movs	r3, #1
 8003b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b82:	2300      	movs	r3, #0
 8003b84:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b86:	2301      	movs	r3, #1
 8003b88:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b96:	4619      	mov	r1, r3
 8003b98:	4828      	ldr	r0, [pc, #160]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003b9a:	f007 f873 	bl	800ac84 <HAL_TIM_Encoder_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003ba4:	f000 fc48 	bl	8004438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4821      	ldr	r0, [pc, #132]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003bb8:	f007 fd9a 	bl	800b6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003bc2:	f000 fc39 	bl	8004438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc6:	2360      	movs	r3, #96	; 0x60
 8003bc8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003be2:	f107 0320 	add.w	r3, r7, #32
 8003be6:	2208      	movs	r2, #8
 8003be8:	4619      	mov	r1, r3
 8003bea:	4814      	ldr	r0, [pc, #80]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003bec:	f007 fa1c 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003bf6:	f000 fc1f 	bl	8004438 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c18:	463b      	mov	r3, r7
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4807      	ldr	r0, [pc, #28]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003c1e:	f007 fde3 	bl	800b7e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003c28:	f000 fc06 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c2c:	4803      	ldr	r0, [pc, #12]	; (8003c3c <MX_TIM1_Init+0x148>)
 8003c2e:	f000 ffeb 	bl	8004c08 <HAL_TIM_MspPostInit>

}
 8003c32:	bf00      	nop
 8003c34:	3768      	adds	r7, #104	; 0x68
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000a490 	.word	0x2000a490
 8003c40:	40010000 	.word	0x40010000

08003c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c4a:	f107 0320 	add.w	r3, r7, #32
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	611a      	str	r2, [r3, #16]
 8003c62:	615a      	str	r2, [r3, #20]
 8003c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <MX_TIM3_Init+0xc4>)
 8003c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c78:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c8c:	481d      	ldr	r0, [pc, #116]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003c8e:	f006 ff90 	bl	800abb2 <HAL_TIM_PWM_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003c98:	f000 fbce 	bl	8004438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ca4:	f107 0320 	add.w	r3, r7, #32
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4816      	ldr	r0, [pc, #88]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003cac:	f007 fd20 	bl	800b6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003cb6:	f000 fbbf 	bl	8004438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cba:	2360      	movs	r3, #96	; 0x60
 8003cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4619      	mov	r1, r3
 8003cd0:	480c      	ldr	r0, [pc, #48]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003cd2:	f007 f9a9 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003cdc:	f000 fbac 	bl	8004438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4807      	ldr	r0, [pc, #28]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003ce8:	f007 f99e 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003cf2:	f000 fba1 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cf6:	4803      	ldr	r0, [pc, #12]	; (8003d04 <MX_TIM3_Init+0xc0>)
 8003cf8:	f000 ff86 	bl	8004c08 <HAL_TIM_MspPostInit>

}
 8003cfc:	bf00      	nop
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000a328 	.word	0x2000a328
 8003d08:	40000400 	.word	0x40000400

08003d0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d12:	f107 0320 	add.w	r3, r7, #32
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	611a      	str	r2, [r3, #16]
 8003d2a:	615a      	str	r2, [r3, #20]
 8003d2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <MX_TIM4_Init+0xc4>)
 8003d32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d42:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d54:	481d      	ldr	r0, [pc, #116]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d56:	f006 ff2c 	bl	800abb2 <HAL_TIM_PWM_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003d60:	f000 fb6a 	bl	8004438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d6c:	f107 0320 	add.w	r3, r7, #32
 8003d70:	4619      	mov	r1, r3
 8003d72:	4816      	ldr	r0, [pc, #88]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d74:	f007 fcbc 	bl	800b6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003d7e:	f000 fb5b 	bl	8004438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d82:	2360      	movs	r3, #96	; 0x60
 8003d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	2208      	movs	r2, #8
 8003d96:	4619      	mov	r1, r3
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003d9a:	f007 f945 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003da4:	f000 fb48 	bl	8004438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	220c      	movs	r2, #12
 8003dac:	4619      	mov	r1, r3
 8003dae:	4807      	ldr	r0, [pc, #28]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003db0:	f007 f93a 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003dba:	f000 fb3d 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003dbe:	4803      	ldr	r0, [pc, #12]	; (8003dcc <MX_TIM4_Init+0xc0>)
 8003dc0:	f000 ff22 	bl	8004c08 <HAL_TIM_MspPostInit>

}
 8003dc4:	bf00      	nop
 8003dc6:	3728      	adds	r7, #40	; 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000a1b4 	.word	0x2000a1b4
 8003dd0:	40000800 	.word	0x40000800

08003dd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dda:	463b      	mov	r3, r7
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <MX_TIM6_Init+0x68>)
 8003de6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003dea:	2259      	movs	r2, #89	; 0x59
 8003dec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003e02:	480d      	ldr	r0, [pc, #52]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003e04:	f006 fe86 	bl	800ab14 <HAL_TIM_Base_Init>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003e0e:	f000 fb13 	bl	8004438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <MX_TIM6_Init+0x64>)
 8003e20:	f007 fc66 	bl	800b6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003e2a:	f000 fb05 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000a450 	.word	0x2000a450
 8003e3c:	40001000 	.word	0x40001000

08003e40 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e46:	463b      	mov	r3, r7
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <MX_TIM7_Init+0x64>)
 8003e52:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e56:	22b3      	movs	r2, #179	; 0xb3
 8003e58:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8003e60:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e62:	2231      	movs	r2, #49	; 0x31
 8003e64:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003e6c:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e6e:	f006 fe51 	bl	800ab14 <HAL_TIM_Base_Init>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003e78:	f000 fade 	bl	8004438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	4619      	mov	r1, r3
 8003e88:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <MX_TIM7_Init+0x60>)
 8003e8a:	f007 fc31 	bl	800b6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8003e94:	f000 fad0 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	2000a5f4 	.word	0x2000a5f4
 8003ea4:	40001400 	.word	0x40001400

08003ea8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f00d fffa 	bl	8011eb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003ec4:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003ec6:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <MX_TIM8_Init+0xac>)
 8003ec8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003ed6:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003edc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eea:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	4619      	mov	r1, r3
 8003f1a:	480d      	ldr	r0, [pc, #52]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003f1c:	f006 feb2 	bl	800ac84 <HAL_TIM_Encoder_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003f26:	f000 fa87 	bl	8004438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4806      	ldr	r0, [pc, #24]	; (8003f50 <MX_TIM8_Init+0xa8>)
 8003f38:	f007 fbda 	bl	800b6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003f42:	f000 fa79 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f46:	bf00      	nop
 8003f48:	3730      	adds	r7, #48	; 0x30
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2000a174 	.word	0x2000a174
 8003f54:	40010400 	.word	0x40010400

08003f58 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
 8003f6c:	615a      	str	r2, [r3, #20]
 8003f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003f70:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <MX_TIM10_Init+0x98>)
 8003f74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003f96:	4815      	ldr	r0, [pc, #84]	; (8003fec <MX_TIM10_Init+0x94>)
 8003f98:	f006 fdbc 	bl	800ab14 <HAL_TIM_Base_Init>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003fa2:	f000 fa49 	bl	8004438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003fa6:	4811      	ldr	r0, [pc, #68]	; (8003fec <MX_TIM10_Init+0x94>)
 8003fa8:	f006 fe03 	bl	800abb2 <HAL_TIM_PWM_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003fb2:	f000 fa41 	bl	8004438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fb6:	2360      	movs	r3, #96	; 0x60
 8003fb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4807      	ldr	r0, [pc, #28]	; (8003fec <MX_TIM10_Init+0x94>)
 8003fce:	f007 f82b 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003fd8:	f000 fa2e 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003fdc:	4803      	ldr	r0, [pc, #12]	; (8003fec <MX_TIM10_Init+0x94>)
 8003fde:	f000 fe13 	bl	8004c08 <HAL_TIM_MspPostInit>

}
 8003fe2:	bf00      	nop
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000a290 	.word	0x2000a290
 8003ff0:	40014400 	.word	0x40014400

08003ff4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
 8004008:	615a      	str	r2, [r3, #20]
 800400a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <MX_TIM11_Init+0x94>)
 800400e:	4a1f      	ldr	r2, [pc, #124]	; (800408c <MX_TIM11_Init+0x98>)
 8004010:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <MX_TIM11_Init+0x94>)
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <MX_TIM11_Init+0x94>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <MX_TIM11_Init+0x94>)
 8004020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004024:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <MX_TIM11_Init+0x94>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <MX_TIM11_Init+0x94>)
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004032:	4815      	ldr	r0, [pc, #84]	; (8004088 <MX_TIM11_Init+0x94>)
 8004034:	f006 fd6e 	bl	800ab14 <HAL_TIM_Base_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800403e:	f000 f9fb 	bl	8004438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004042:	4811      	ldr	r0, [pc, #68]	; (8004088 <MX_TIM11_Init+0x94>)
 8004044:	f006 fdb5 	bl	800abb2 <HAL_TIM_PWM_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800404e:	f000 f9f3 	bl	8004438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004052:	2360      	movs	r3, #96	; 0x60
 8004054:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	2200      	movs	r2, #0
 8004066:	4619      	mov	r1, r3
 8004068:	4807      	ldr	r0, [pc, #28]	; (8004088 <MX_TIM11_Init+0x94>)
 800406a:	f006 ffdd 	bl	800b028 <HAL_TIM_PWM_ConfigChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004074:	f000 f9e0 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004078:	4803      	ldr	r0, [pc, #12]	; (8004088 <MX_TIM11_Init+0x94>)
 800407a:	f000 fdc5 	bl	8004c08 <HAL_TIM_MspPostInit>

}
 800407e:	bf00      	nop
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	2000a3b0 	.word	0x2000a3b0
 800408c:	40014800 	.word	0x40014800

08004090 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <MX_TIM13_Init+0x40>)
 8004096:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <MX_TIM13_Init+0x44>)
 8004098:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <MX_TIM13_Init+0x40>)
 800409c:	2259      	movs	r2, #89	; 0x59
 800409e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <MX_TIM13_Init+0x40>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <MX_TIM13_Init+0x40>)
 80040a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80040ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <MX_TIM13_Init+0x40>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <MX_TIM13_Init+0x40>)
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80040ba:	4805      	ldr	r0, [pc, #20]	; (80040d0 <MX_TIM13_Init+0x40>)
 80040bc:	f006 fd2a 	bl	800ab14 <HAL_TIM_Base_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80040c6:	f000 f9b7 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000a370 	.word	0x2000a370
 80040d4:	40001c00 	.word	0x40001c00

080040d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <MX_USART2_UART_Init+0x50>)
 80040e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040e2:	4b10      	ldr	r3, [pc, #64]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 80040e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 80040fe:	220c      	movs	r2, #12
 8004100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800410e:	4805      	ldr	r0, [pc, #20]	; (8004124 <MX_USART2_UART_Init+0x4c>)
 8004110:	f007 fbd0 	bl	800b8b4 <HAL_UART_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800411a:	f000 f98d 	bl	8004438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000a554 	.word	0x2000a554
 8004128:	40004400 	.word	0x40004400

0800412c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <MX_DMA_Init+0x5c>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <MX_DMA_Init+0x5c>)
 800413c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004140:	6313      	str	r3, [r2, #48]	; 0x30
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <MX_DMA_Init+0x5c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	203a      	movs	r0, #58	; 0x3a
 8004154:	f002 f891 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004158:	203a      	movs	r0, #58	; 0x3a
 800415a:	f002 f8aa 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	203b      	movs	r0, #59	; 0x3b
 8004164:	f002 f889 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004168:	203b      	movs	r0, #59	; 0x3b
 800416a:	f002 f8a2 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	2100      	movs	r1, #0
 8004172:	2045      	movs	r0, #69	; 0x45
 8004174:	f002 f881 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004178:	2045      	movs	r0, #69	; 0x45
 800417a:	f002 f89a 	bl	80062b2 <HAL_NVIC_EnableIRQ>

}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	; 0x30
 8004190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	4a9b      	ldr	r2, [pc, #620]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6313      	str	r3, [r2, #48]	; 0x30
 80041b2:	4b99      	ldr	r3, [pc, #612]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	4b95      	ldr	r3, [pc, #596]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a94      	ldr	r2, [pc, #592]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b92      	ldr	r3, [pc, #584]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	4b8e      	ldr	r3, [pc, #568]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	4a8d      	ldr	r2, [pc, #564]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ea:	4b8b      	ldr	r3, [pc, #556]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b87      	ldr	r3, [pc, #540]	; (8004418 <MX_GPIO_Init+0x28c>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	4a86      	ldr	r2, [pc, #536]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6313      	str	r3, [r2, #48]	; 0x30
 8004206:	4b84      	ldr	r3, [pc, #528]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	4b80      	ldr	r3, [pc, #512]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a7f      	ldr	r2, [pc, #508]	; (8004418 <MX_GPIO_Init+0x28c>)
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b7d      	ldr	r3, [pc, #500]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	4b79      	ldr	r3, [pc, #484]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a78      	ldr	r2, [pc, #480]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b76      	ldr	r3, [pc, #472]	; (8004418 <MX_GPIO_Init+0x28c>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800424a:	2200      	movs	r2, #0
 800424c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004250:	4872      	ldr	r0, [pc, #456]	; (800441c <MX_GPIO_Init+0x290>)
 8004252:	f002 fda7 	bl	8006da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004256:	2200      	movs	r2, #0
 8004258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800425c:	4870      	ldr	r0, [pc, #448]	; (8004420 <MX_GPIO_Init+0x294>)
 800425e:	f002 fda1 	bl	8006da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004262:	2200      	movs	r2, #0
 8004264:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004268:	486e      	ldr	r0, [pc, #440]	; (8004424 <MX_GPIO_Init+0x298>)
 800426a:	f002 fd9b 	bl	8006da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004274:	486c      	ldr	r0, [pc, #432]	; (8004428 <MX_GPIO_Init+0x29c>)
 8004276:	f002 fd95 	bl	8006da4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800427a:	2304      	movs	r3, #4
 800427c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800427e:	4b6b      	ldr	r3, [pc, #428]	; (800442c <MX_GPIO_Init+0x2a0>)
 8004280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004286:	f107 031c 	add.w	r3, r7, #28
 800428a:	4619      	mov	r1, r3
 800428c:	4863      	ldr	r0, [pc, #396]	; (800441c <MX_GPIO_Init+0x290>)
 800428e:	f002 fbc7 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004292:	230f      	movs	r3, #15
 8004294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004296:	2303      	movs	r3, #3
 8004298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800429e:	f107 031c 	add.w	r3, r7, #28
 80042a2:	4619      	mov	r1, r3
 80042a4:	4862      	ldr	r0, [pc, #392]	; (8004430 <MX_GPIO_Init+0x2a4>)
 80042a6:	f002 fbbb 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042aa:	23e1      	movs	r3, #225	; 0xe1
 80042ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ae:	2303      	movs	r3, #3
 80042b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b6:	f107 031c 	add.w	r3, r7, #28
 80042ba:	4619      	mov	r1, r3
 80042bc:	485a      	ldr	r0, [pc, #360]	; (8004428 <MX_GPIO_Init+0x29c>)
 80042be:	f002 fbaf 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042c2:	2303      	movs	r3, #3
 80042c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042c6:	2303      	movs	r3, #3
 80042c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	4619      	mov	r1, r3
 80042d4:	4852      	ldr	r0, [pc, #328]	; (8004420 <MX_GPIO_Init+0x294>)
 80042d6:	f002 fba3 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042da:	2304      	movs	r3, #4
 80042dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042de:	2300      	movs	r3, #0
 80042e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042e2:	2301      	movs	r3, #1
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e6:	f107 031c 	add.w	r3, r7, #28
 80042ea:	4619      	mov	r1, r3
 80042ec:	484c      	ldr	r0, [pc, #304]	; (8004420 <MX_GPIO_Init+0x294>)
 80042ee:	f002 fb97 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80042f2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80042f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042fc:	2301      	movs	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4845      	ldr	r0, [pc, #276]	; (800441c <MX_GPIO_Init+0x290>)
 8004308:	f002 fb8a 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800430c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004312:	2301      	movs	r3, #1
 8004314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	4619      	mov	r1, r3
 8004324:	483d      	ldr	r0, [pc, #244]	; (800441c <MX_GPIO_Init+0x290>)
 8004326:	f002 fb7b 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800432a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800432e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004330:	2301      	movs	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004338:	2300      	movs	r3, #0
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433c:	f107 031c 	add.w	r3, r7, #28
 8004340:	4619      	mov	r1, r3
 8004342:	4837      	ldr	r0, [pc, #220]	; (8004420 <MX_GPIO_Init+0x294>)
 8004344:	f002 fb6c 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800434c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800434e:	4b39      	ldr	r3, [pc, #228]	; (8004434 <MX_GPIO_Init+0x2a8>)
 8004350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004356:	f107 031c 	add.w	r3, r7, #28
 800435a:	4619      	mov	r1, r3
 800435c:	4831      	ldr	r0, [pc, #196]	; (8004424 <MX_GPIO_Init+0x298>)
 800435e:	f002 fb5f 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004368:	2301      	movs	r3, #1
 800436a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004374:	f107 031c 	add.w	r3, r7, #28
 8004378:	4619      	mov	r1, r3
 800437a:	482a      	ldr	r0, [pc, #168]	; (8004424 <MX_GPIO_Init+0x298>)
 800437c:	f002 fb50 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004386:	2301      	movs	r3, #1
 8004388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800438a:	2301      	movs	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438e:	2300      	movs	r3, #0
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004392:	f107 031c 	add.w	r3, r7, #28
 8004396:	4619      	mov	r1, r3
 8004398:	4822      	ldr	r0, [pc, #136]	; (8004424 <MX_GPIO_Init+0x298>)
 800439a:	f002 fb41 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800439e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80043a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a4:	2301      	movs	r3, #1
 80043a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	4619      	mov	r1, r3
 80043b6:	481c      	ldr	r0, [pc, #112]	; (8004428 <MX_GPIO_Init+0x29c>)
 80043b8:	f002 fb32 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c2:	2300      	movs	r3, #0
 80043c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	f107 031c 	add.w	r3, r7, #28
 80043ce:	4619      	mov	r1, r3
 80043d0:	4815      	ldr	r0, [pc, #84]	; (8004428 <MX_GPIO_Init+0x29c>)
 80043d2:	f002 fb25 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80043d6:	239b      	movs	r3, #155	; 0x9b
 80043d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043da:	2300      	movs	r3, #0
 80043dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043de:	2301      	movs	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043e2:	f107 031c 	add.w	r3, r7, #28
 80043e6:	4619      	mov	r1, r3
 80043e8:	480e      	ldr	r0, [pc, #56]	; (8004424 <MX_GPIO_Init+0x298>)
 80043ea:	f002 fb19 	bl	8006a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	2008      	movs	r0, #8
 80043f4:	f001 ff41 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80043f8:	2008      	movs	r0, #8
 80043fa:	f001 ff5a 	bl	80062b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043fe:	2200      	movs	r2, #0
 8004400:	2100      	movs	r1, #0
 8004402:	2017      	movs	r0, #23
 8004404:	f001 ff39 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004408:	2017      	movs	r0, #23
 800440a:	f001 ff52 	bl	80062b2 <HAL_NVIC_EnableIRQ>

}
 800440e:	bf00      	nop
 8004410:	3730      	adds	r7, #48	; 0x30
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	40021000 	.word	0x40021000
 8004420:	40020400 	.word	0x40020400
 8004424:	40020c00 	.word	0x40020c00
 8004428:	40020000 	.word	0x40020000
 800442c:	10310000 	.word	0x10310000
 8004430:	40020800 	.word	0x40020800
 8004434:	10110000 	.word	0x10110000

08004438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800443c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800443e:	e7fe      	b.n	800443e <Error_Handler+0x6>

08004440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_MspInit+0x4c>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <HAL_MspInit+0x4c>)
 8004450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004454:	6453      	str	r3, [r2, #68]	; 0x44
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_MspInit+0x4c>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_MspInit+0x4c>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a08      	ldr	r2, [pc, #32]	; (800448c <HAL_MspInit+0x4c>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_MspInit+0x4c>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800

08004490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 031c 	add.w	r3, r7, #28
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <HAL_ADC_MspInit+0x148>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	f040 808e 	bne.w	80045d0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	4b48      	ldr	r3, [pc, #288]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	4a47      	ldr	r2, [pc, #284]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c2:	6453      	str	r3, [r2, #68]	; 0x44
 80044c4:	4b45      	ldr	r3, [pc, #276]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a40      	ldr	r2, [pc, #256]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044da:	f043 0304 	orr.w	r3, r3, #4
 80044de:	6313      	str	r3, [r2, #48]	; 0x30
 80044e0:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a39      	ldr	r2, [pc, #228]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6313      	str	r3, [r2, #48]	; 0x30
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4b33      	ldr	r3, [pc, #204]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4a32      	ldr	r2, [pc, #200]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	6313      	str	r3, [r2, #48]	; 0x30
 8004518:	4b30      	ldr	r3, [pc, #192]	; (80045dc <HAL_ADC_MspInit+0x14c>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004524:	230f      	movs	r3, #15
 8004526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004528:	2303      	movs	r3, #3
 800452a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004530:	f107 031c 	add.w	r3, r7, #28
 8004534:	4619      	mov	r1, r3
 8004536:	482a      	ldr	r0, [pc, #168]	; (80045e0 <HAL_ADC_MspInit+0x150>)
 8004538:	f002 fa72 	bl	8006a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800453c:	23ff      	movs	r3, #255	; 0xff
 800453e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004540:	2303      	movs	r3, #3
 8004542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	4825      	ldr	r0, [pc, #148]	; (80045e4 <HAL_ADC_MspInit+0x154>)
 8004550:	f002 fa66 	bl	8006a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004554:	2303      	movs	r3, #3
 8004556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004558:	2303      	movs	r3, #3
 800455a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	4619      	mov	r1, r3
 8004566:	4820      	ldr	r0, [pc, #128]	; (80045e8 <HAL_ADC_MspInit+0x158>)
 8004568:	f002 fa5a 	bl	8006a20 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 800456e:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <HAL_ADC_MspInit+0x160>)
 8004570:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004572:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 8004574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004578:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 800457c:	2200      	movs	r2, #0
 800457e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 8004582:	2200      	movs	r2, #0
 8004584:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 8004588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800458c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800458e:	4b17      	ldr	r3, [pc, #92]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 8004590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004594:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 8004598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800459c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 80045a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 80045a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045ac:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80045b4:	480d      	ldr	r0, [pc, #52]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 80045b6:	f001 fe97 	bl	80062e8 <HAL_DMA_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80045c0:	f7ff ff3a 	bl	8004438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <HAL_ADC_MspInit+0x15c>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80045d0:	bf00      	nop
 80045d2:	3730      	adds	r7, #48	; 0x30
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40012100 	.word	0x40012100
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40020800 	.word	0x40020800
 80045e4:	40020000 	.word	0x40020000
 80045e8:	40020400 	.word	0x40020400
 80045ec:	2000a594 	.word	0x2000a594
 80045f0:	40026440 	.word	0x40026440

080045f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	; 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 031c 	add.w	r3, r7, #28
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a32      	ldr	r2, [pc, #200]	; (80046dc <HAL_I2C_MspInit+0xe8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d12c      	bne.n	8004670 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a30      	ldr	r2, [pc, #192]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004636:	2312      	movs	r3, #18
 8004638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800463a:	2301      	movs	r3, #1
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463e:	2303      	movs	r3, #3
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004642:	2304      	movs	r3, #4
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004646:	f107 031c 	add.w	r3, r7, #28
 800464a:	4619      	mov	r1, r3
 800464c:	4825      	ldr	r0, [pc, #148]	; (80046e4 <HAL_I2C_MspInit+0xf0>)
 800464e:	f002 f9e7 	bl	8006a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 800465c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800466e:	e031      	b.n	80046d4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_I2C_MspInit+0xf4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d12c      	bne.n	80046d4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	6313      	str	r3, [r2, #48]	; 0x30
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004696:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800469a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800469c:	2312      	movs	r3, #18
 800469e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046a0:	2301      	movs	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80046a8:	2304      	movs	r3, #4
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ac:	f107 031c 	add.w	r3, r7, #28
 80046b0:	4619      	mov	r1, r3
 80046b2:	480c      	ldr	r0, [pc, #48]	; (80046e4 <HAL_I2C_MspInit+0xf0>)
 80046b4:	f002 f9b4 	bl	8006a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 80046c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046c6:	6413      	str	r3, [r2, #64]	; 0x40
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_I2C_MspInit+0xec>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
}
 80046d4:	bf00      	nop
 80046d6:	3730      	adds	r7, #48	; 0x30
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40005400 	.word	0x40005400
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40020400 	.word	0x40020400
 80046e8:	40005800 	.word	0x40005800

080046ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_SD_MspInit+0x1c4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	f040 80cb 	bne.w	80048a6 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	4b67      	ldr	r3, [pc, #412]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	4a66      	ldr	r2, [pc, #408]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 800471a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800471e:	6453      	str	r3, [r2, #68]	; 0x44
 8004720:	4b64      	ldr	r3, [pc, #400]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	4b60      	ldr	r3, [pc, #384]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	4a5f      	ldr	r2, [pc, #380]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	6313      	str	r3, [r2, #48]	; 0x30
 800473c:	4b5d      	ldr	r3, [pc, #372]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4a58      	ldr	r2, [pc, #352]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 8004752:	f043 0308 	orr.w	r3, r3, #8
 8004756:	6313      	str	r3, [r2, #48]	; 0x30
 8004758:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <HAL_SD_MspInit+0x1c8>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004764:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004768:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004772:	2303      	movs	r3, #3
 8004774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004776:	230c      	movs	r3, #12
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	4619      	mov	r1, r3
 8004780:	484d      	ldr	r0, [pc, #308]	; (80048b8 <HAL_SD_MspInit+0x1cc>)
 8004782:	f002 f94d 	bl	8006a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004786:	2304      	movs	r3, #4
 8004788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004792:	2303      	movs	r3, #3
 8004794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004796:	230c      	movs	r3, #12
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800479a:	f107 0314 	add.w	r3, r7, #20
 800479e:	4619      	mov	r1, r3
 80047a0:	4846      	ldr	r0, [pc, #280]	; (80048bc <HAL_SD_MspInit+0x1d0>)
 80047a2:	f002 f93d 	bl	8006a20 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80047a6:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047a8:	4a46      	ldr	r2, [pc, #280]	; (80048c4 <HAL_SD_MspInit+0x1d8>)
 80047aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80047ac:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047b4:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047bc:	2200      	movs	r2, #0
 80047be:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047c0:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047c8:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80047d0:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80047d8:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047da:	2220      	movs	r2, #32
 80047dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80047de:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047e4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047e6:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047e8:	2204      	movs	r2, #4
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047ec:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047ee:	2203      	movs	r2, #3
 80047f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 80047fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004802:	482f      	ldr	r0, [pc, #188]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 8004804:	f001 fd70 	bl	80062e8 <HAL_DMA_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800480e:	f7ff fe13 	bl	8004438 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
 8004818:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <HAL_SD_MspInit+0x1d4>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800481e:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004820:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <HAL_SD_MspInit+0x1e0>)
 8004822:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800482a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800482c:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 800482e:	2240      	movs	r2, #64	; 0x40
 8004830:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004832:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004838:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 800483a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800483e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004840:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004846:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004848:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 800484a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800484e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004852:	2220      	movs	r2, #32
 8004854:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800485c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800485e:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004860:	2204      	movs	r2, #4
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004866:	2203      	movs	r2, #3
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 800486c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004874:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800487a:	4813      	ldr	r0, [pc, #76]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 800487c:	f001 fd34 	bl	80062e8 <HAL_DMA_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004886:	f7ff fdd7 	bl	8004438 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <HAL_SD_MspInit+0x1dc>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	2031      	movs	r0, #49	; 0x31
 800489c:	f001 fced 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80048a0:	2031      	movs	r0, #49	; 0x31
 80048a2:	f001 fd06 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80048a6:	bf00      	nop
 80048a8:	3728      	adds	r7, #40	; 0x28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020800 	.word	0x40020800
 80048bc:	40020c00 	.word	0x40020c00
 80048c0:	2000a0bc 	.word	0x2000a0bc
 80048c4:	40026458 	.word	0x40026458
 80048c8:	2000a3f0 	.word	0x2000a3f0
 80048cc:	400264a0 	.word	0x400264a0

080048d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_SPI_MspInit+0x84>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d12c      	bne.n	800494c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_SPI_MspInit+0x88>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_SPI_MspInit+0x88>)
 80048fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004900:	6413      	str	r3, [r2, #64]	; 0x40
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_SPI_MspInit+0x88>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_SPI_MspInit+0x88>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <HAL_SPI_MspInit+0x88>)
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	6313      	str	r3, [r2, #48]	; 0x30
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <HAL_SPI_MspInit+0x88>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800492a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800492e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800493c:	2305      	movs	r3, #5
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4619      	mov	r1, r3
 8004946:	4805      	ldr	r0, [pc, #20]	; (800495c <HAL_SPI_MspInit+0x8c>)
 8004948:	f002 f86a 	bl	8006a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800494c:	bf00      	nop
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40003800 	.word	0x40003800
 8004958:	40023800 	.word	0x40023800
 800495c:	40020400 	.word	0x40020400

08004960 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08c      	sub	sp, #48	; 0x30
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	f107 031c 	add.w	r3, r7, #28
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <HAL_TIM_PWM_MspInit+0xd4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d12d      	bne.n	80049de <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	4b2c      	ldr	r3, [pc, #176]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a2b      	ldr	r2, [pc, #172]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 80049a8:	f043 0310 	orr.w	r3, r3, #16
 80049ac:	6313      	str	r3, [r2, #48]	; 0x30
 80049ae:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80049ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80049be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c0:	2302      	movs	r3, #2
 80049c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c8:	2300      	movs	r3, #0
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049cc:	2301      	movs	r3, #1
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049d0:	f107 031c 	add.w	r3, r7, #28
 80049d4:	4619      	mov	r1, r3
 80049d6:	4819      	ldr	r0, [pc, #100]	; (8004a3c <HAL_TIM_PWM_MspInit+0xdc>)
 80049d8:	f002 f822 	bl	8006a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049dc:	e026      	b.n	8004a2c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_TIM_PWM_MspInit+0xe0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10e      	bne.n	8004a06 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 80049f2:	f043 0302 	orr.w	r3, r3, #2
 80049f6:	6413      	str	r3, [r2, #64]	; 0x40
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
}
 8004a04:	e012      	b.n	8004a2c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <HAL_TIM_PWM_MspInit+0xe4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10d      	bne.n	8004a2c <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_TIM_PWM_MspInit+0xd8>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	bf00      	nop
 8004a2e:	3730      	adds	r7, #48	; 0x30
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800

08004a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3e      	ldr	r2, [pc, #248]	; (8004b50 <HAL_TIM_Base_MspInit+0x108>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d116      	bne.n	8004a88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	4b3d      	ldr	r3, [pc, #244]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a3c      	ldr	r2, [pc, #240]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004a64:	f043 0310 	orr.w	r3, r3, #16
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b3a      	ldr	r3, [pc, #232]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2101      	movs	r1, #1
 8004a7a:	2036      	movs	r0, #54	; 0x36
 8004a7c:	f001 fbfd 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a80:	2036      	movs	r0, #54	; 0x36
 8004a82:	f001 fc16 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004a86:	e05e      	b.n	8004b46 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a32      	ldr	r2, [pc, #200]	; (8004b58 <HAL_TIM_Base_MspInit+0x110>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d116      	bne.n	8004ac0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a2e      	ldr	r2, [pc, #184]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004a9c:	f043 0320 	orr.w	r3, r3, #32
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	2037      	movs	r0, #55	; 0x37
 8004ab4:	f001 fbe1 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004ab8:	2037      	movs	r0, #55	; 0x37
 8004aba:	f001 fbfa 	bl	80062b2 <HAL_NVIC_EnableIRQ>
}
 8004abe:	e042      	b.n	8004b46 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <HAL_TIM_Base_MspInit+0x114>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8004ada:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]
}
 8004ae6:	e02e      	b.n	8004b46 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_TIM_Base_MspInit+0x118>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10e      	bne.n	8004b10 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b00:	6453      	str	r3, [r2, #68]	; 0x44
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
}
 8004b0e:	e01a      	b.n	8004b46 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <HAL_TIM_Base_MspInit+0x11c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d115      	bne.n	8004b46 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_TIM_Base_MspInit+0x10c>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	202c      	movs	r0, #44	; 0x2c
 8004b3c:	f001 fb9d 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004b40:	202c      	movs	r0, #44	; 0x2c
 8004b42:	f001 fbb6 	bl	80062b2 <HAL_NVIC_EnableIRQ>
}
 8004b46:	bf00      	nop
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40001000 	.word	0x40001000
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40001400 	.word	0x40001400
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	40001c00 	.word	0x40001c00

08004b68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <HAL_TIM_Encoder_MspInit+0x94>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d133      	bne.n	8004bf2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <HAL_TIM_Encoder_MspInit+0x98>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <HAL_TIM_Encoder_MspInit+0x98>)
 8004bb0:	f043 0304 	orr.w	r3, r3, #4
 8004bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_TIM_Encoder_MspInit+0x98>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bc2:	23c0      	movs	r3, #192	; 0xc0
 8004bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4809      	ldr	r0, [pc, #36]	; (8004c04 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004bde:	f001 ff1f 	bl	8006a20 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	202c      	movs	r0, #44	; 0x2c
 8004be8:	f001 fb47 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004bec:	202c      	movs	r0, #44	; 0x2c
 8004bee:	f001 fb60 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004bf2:	bf00      	nop
 8004bf4:	3728      	adds	r7, #40	; 0x28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40020800 	.word	0x40020800

08004c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	; 0x30
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c10:	f107 031c 	add.w	r3, r7, #28
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5c      	ldr	r2, [pc, #368]	; (8004d98 <HAL_TIM_MspPostInit+0x190>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d11f      	bne.n	8004c6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4a5a      	ldr	r2, [pc, #360]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004c34:	f043 0310 	orr.w	r3, r3, #16
 8004c38:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3a:	4b58      	ldr	r3, [pc, #352]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c5c:	f107 031c 	add.w	r3, r7, #28
 8004c60:	4619      	mov	r1, r3
 8004c62:	484f      	ldr	r0, [pc, #316]	; (8004da0 <HAL_TIM_MspPostInit+0x198>)
 8004c64:	f001 fedc 	bl	8006a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004c68:	e091      	b.n	8004d8e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4d      	ldr	r2, [pc, #308]	; (8004da4 <HAL_TIM_MspPostInit+0x19c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d11e      	bne.n	8004cb2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	4a47      	ldr	r2, [pc, #284]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004c7e:	f043 0302 	orr.w	r3, r3, #2
 8004c82:	6313      	str	r3, [r2, #48]	; 0x30
 8004c84:	4b45      	ldr	r3, [pc, #276]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c90:	2330      	movs	r3, #48	; 0x30
 8004c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	2302      	movs	r3, #2
 8004c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	4619      	mov	r1, r3
 8004caa:	483f      	ldr	r0, [pc, #252]	; (8004da8 <HAL_TIM_MspPostInit+0x1a0>)
 8004cac:	f001 feb8 	bl	8006a20 <HAL_GPIO_Init>
}
 8004cb0:	e06d      	b.n	8004d8e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <HAL_TIM_MspPostInit+0x1a4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d11f      	bne.n	8004cfc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004cc6:	f043 0308 	orr.w	r3, r3, #8
 8004cca:	6313      	str	r3, [r2, #48]	; 0x30
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004cd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cea:	2302      	movs	r3, #2
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	482e      	ldr	r0, [pc, #184]	; (8004db0 <HAL_TIM_MspPostInit+0x1a8>)
 8004cf6:	f001 fe93 	bl	8006a20 <HAL_GPIO_Init>
}
 8004cfa:	e048      	b.n	8004d8e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <HAL_TIM_MspPostInit+0x1ac>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d11f      	bne.n	8004d46 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004d34:	2303      	movs	r3, #3
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	481a      	ldr	r0, [pc, #104]	; (8004da8 <HAL_TIM_MspPostInit+0x1a0>)
 8004d40:	f001 fe6e 	bl	8006a20 <HAL_GPIO_Init>
}
 8004d44:	e023      	b.n	8004d8e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <HAL_TIM_MspPostInit+0x1b0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d11e      	bne.n	8004d8e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_TIM_MspPostInit+0x194>)
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d72:	2302      	movs	r3, #2
 8004d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d82:	f107 031c 	add.w	r3, r7, #28
 8004d86:	4619      	mov	r1, r3
 8004d88:	4807      	ldr	r0, [pc, #28]	; (8004da8 <HAL_TIM_MspPostInit+0x1a0>)
 8004d8a:	f001 fe49 	bl	8006a20 <HAL_GPIO_Init>
}
 8004d8e:	bf00      	nop
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40020400 	.word	0x40020400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40020c00 	.word	0x40020c00
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800

08004dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_UART_MspInit+0x84>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d12b      	bne.n	8004e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_UART_MspInit+0x88>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <HAL_UART_MspInit+0x88>)
 8004de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_UART_MspInit+0x88>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <HAL_UART_MspInit+0x88>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <HAL_UART_MspInit+0x88>)
 8004e04:	f043 0308 	orr.w	r3, r3, #8
 8004e08:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <HAL_UART_MspInit+0x88>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004e16:	2360      	movs	r3, #96	; 0x60
 8004e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e22:	2303      	movs	r3, #3
 8004e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e26:	2307      	movs	r3, #7
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4805      	ldr	r0, [pc, #20]	; (8004e48 <HAL_UART_MspInit+0x8c>)
 8004e32:	f001 fdf5 	bl	8006a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e36:	bf00      	nop
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40004400 	.word	0x40004400
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40020c00 	.word	0x40020c00

08004e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e50:	e7fe      	b.n	8004e50 <NMI_Handler+0x4>

08004e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e56:	e7fe      	b.n	8004e56 <HardFault_Handler+0x4>

08004e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e5c:	e7fe      	b.n	8004e5c <MemManage_Handler+0x4>

08004e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e62:	e7fe      	b.n	8004e62 <BusFault_Handler+0x4>

08004e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e68:	e7fe      	b.n	8004e68 <UsageFault_Handler+0x4>

08004e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e98:	f000 fcce 	bl	8005838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004ea4:	2004      	movs	r0, #4
 8004ea6:	f001 ff97 	bl	8006dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}

08004eae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004eb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004eb6:	f001 ff8f 	bl	8006dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004ec4:	4803      	ldr	r0, [pc, #12]	; (8004ed4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004ec6:	f005 ffa6 	bl	800ae16 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004eca:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004ecc:	f005 ffa3 	bl	800ae16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	2000a174 	.word	0x2000a174
 8004ed8:	2000a370 	.word	0x2000a370

08004edc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004ee0:	4802      	ldr	r0, [pc, #8]	; (8004eec <SDIO_IRQHandler+0x10>)
 8004ee2:	f004 f83f 	bl	8008f64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000a4d0 	.word	0x2000a4d0

08004ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ef4:	4802      	ldr	r0, [pc, #8]	; (8004f00 <TIM6_DAC_IRQHandler+0x10>)
 8004ef6:	f005 ff8e 	bl	800ae16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000a450 	.word	0x2000a450

08004f04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004f08:	4802      	ldr	r0, [pc, #8]	; (8004f14 <TIM7_IRQHandler+0x10>)
 8004f0a:	f005 ff84 	bl	800ae16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	2000a5f4 	.word	0x2000a5f4

08004f18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004f1c:	4802      	ldr	r0, [pc, #8]	; (8004f28 <DMA2_Stream2_IRQHandler+0x10>)
 8004f1e:	f001 fb0b 	bl	8006538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2000a594 	.word	0x2000a594

08004f2c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004f30:	4802      	ldr	r0, [pc, #8]	; (8004f3c <DMA2_Stream3_IRQHandler+0x10>)
 8004f32:	f001 fb01 	bl	8006538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	2000a0bc 	.word	0x2000a0bc

08004f40 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004f44:	4802      	ldr	r0, [pc, #8]	; (8004f50 <DMA2_Stream6_IRQHandler+0x10>)
 8004f46:	f001 faf7 	bl	8006538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2000a3f0 	.word	0x2000a3f0

08004f54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e00a      	b.n	8004f7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f66:	f3af 8000 	nop.w
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	60ba      	str	r2, [r7, #8]
 8004f72:	b2ca      	uxtb	r2, r1
 8004f74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	dbf0      	blt.n	8004f66 <_read+0x12>
	}

return len;
 8004f84:	687b      	ldr	r3, [r7, #4]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
	return -1;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <_isatty>:

int _isatty(int file)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8004fce:	2301      	movs	r3, #1
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005000:	4a14      	ldr	r2, [pc, #80]	; (8005054 <_sbrk+0x5c>)
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <_sbrk+0x60>)
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800500c:	4b13      	ldr	r3, [pc, #76]	; (800505c <_sbrk+0x64>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <_sbrk+0x64>)
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <_sbrk+0x68>)
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <_sbrk+0x64>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	429a      	cmp	r2, r3
 8005026:	d207      	bcs.n	8005038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005028:	f00c ff18 	bl	8011e5c <__errno>
 800502c:	4602      	mov	r2, r0
 800502e:	230c      	movs	r3, #12
 8005030:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
 8005036:	e009      	b.n	800504c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <_sbrk+0x64>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <_sbrk+0x64>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	4a05      	ldr	r2, [pc, #20]	; (800505c <_sbrk+0x64>)
 8005048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800504a:	68fb      	ldr	r3, [r7, #12]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20050000 	.word	0x20050000
 8005058:	00000400 	.word	0x00000400
 800505c:	20000234 	.word	0x20000234
 8005060:	2000c6b0 	.word	0x2000c6b0

08005064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <SystemInit+0x28>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	4a07      	ldr	r2, [pc, #28]	; (800508c <SystemInit+0x28>)
 8005070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <SystemInit+0x28>)
 800507a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800507e:	609a      	str	r2, [r3, #8]
#endif
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <batteryLowMode>:
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
Odometry odometry(&encoder, &imu, &velocity_ctrl);

void batteryLowMode()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
	lcd_clear();
 8005094:	f7fc f804 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005098:	2100      	movs	r1, #0
 800509a:	2000      	movs	r0, #0
 800509c:	f7fc f810 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80050a0:	4814      	ldr	r0, [pc, #80]	; (80050f4 <batteryLowMode+0x64>)
 80050a2:	f7fc f837 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80050a6:	2101      	movs	r1, #1
 80050a8:	2000      	movs	r0, #0
 80050aa:	f7fc f809 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80050ae:	4812      	ldr	r0, [pc, #72]	; (80050f8 <batteryLowMode+0x68>)
 80050b0:	f7fc f830 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80050b4:	2152      	movs	r1, #82	; 0x52
 80050b6:	4811      	ldr	r0, [pc, #68]	; (80050fc <batteryLowMode+0x6c>)
 80050b8:	f7fc fdea 	bl	8001c90 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80050bc:	2064      	movs	r0, #100	; 0x64
 80050be:	f000 fbdb 	bl	8005878 <HAL_Delay>
		led.fullColor('Y');
 80050c2:	2159      	movs	r1, #89	; 0x59
 80050c4:	480d      	ldr	r0, [pc, #52]	; (80050fc <batteryLowMode+0x6c>)
 80050c6:	f7fc fde3 	bl	8001c90 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80050ca:	2064      	movs	r0, #100	; 0x64
 80050cc:	f000 fbd4 	bl	8005878 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80050d0:	480b      	ldr	r0, [pc, #44]	; (8005100 <batteryLowMode+0x70>)
 80050d2:	f7fc fd79 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b02      	cmp	r3, #2
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0e6      	beq.n	80050b4 <batteryLowMode+0x24>
			HAL_Delay(500);
 80050e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050ea:	f000 fbc5 	bl	8005878 <HAL_Delay>
			break;
 80050ee:	bf00      	nop
		}
	}
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	08016dc8 	.word	0x08016dc8
 80050f8:	08016dd0 	.word	0x08016dd0
 80050fc:	20000540 	.word	0x20000540
 8005100:	20000534 	.word	0x20000534

08005104 <cppInit>:

void cppInit(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
	lcd_init();
 8005108:	f7fb ff86 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800510c:	482c      	ldr	r0, [pc, #176]	; (80051c0 <cppInit+0xbc>)
 800510e:	f7fd fe14 	bl	8002d3a <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005112:	2064      	movs	r0, #100	; 0x64
 8005114:	f000 fbb0 	bl	8005878 <HAL_Delay>
	power_sensor.updateValues();
 8005118:	4829      	ldr	r0, [pc, #164]	; (80051c0 <cppInit+0xbc>)
 800511a:	f7fd fe1d 	bl	8002d58 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode();
 800511e:	4828      	ldr	r0, [pc, #160]	; (80051c0 <cppInit+0xbc>)
 8005120:	f7fd fe46 	bl	8002db0 <_ZN11PowerSensor12butteryCheckEv>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <cppInit+0x2a>
 800512a:	f7ff ffb1 	bl	8005090 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){
 800512e:	4825      	ldr	r0, [pc, #148]	; (80051c4 <cppInit+0xc0>)
 8005130:	f7fd fb76 	bl	8002820 <_ZN6Logger10sdCardInitEv>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <cppInit+0x46>
		led.fullColor('G');
 800513a:	2147      	movs	r1, #71	; 0x47
 800513c:	4822      	ldr	r0, [pc, #136]	; (80051c8 <cppInit+0xc4>)
 800513e:	f7fc fda7 	bl	8001c90 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005142:	2064      	movs	r0, #100	; 0x64
 8005144:	f000 fb98 	bl	8005878 <HAL_Delay>
 8005148:	e006      	b.n	8005158 <cppInit+0x54>
	}
	else{
		led.fullColor('R');
 800514a:	2152      	movs	r1, #82	; 0x52
 800514c:	481e      	ldr	r0, [pc, #120]	; (80051c8 <cppInit+0xc4>)
 800514e:	f7fc fd9f 	bl	8001c90 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005152:	2064      	movs	r0, #100	; 0x64
 8005154:	f000 fb90 	bl	8005878 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005158:	481c      	ldr	r0, [pc, #112]	; (80051cc <cppInit+0xc8>)
 800515a:	f7fc fef5 	bl	8001f48 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800515e:	481c      	ldr	r0, [pc, #112]	; (80051d0 <cppInit+0xcc>)
 8005160:	f7fd fc24 	bl	80029ac <_ZN5Motor4initEv>
	encoder.init();
 8005164:	481b      	ldr	r0, [pc, #108]	; (80051d4 <cppInit+0xd0>)
 8005166:	f7fc f813 	bl	8001190 <_ZN7Encoder4initEv>
	imu.init();
 800516a:	481b      	ldr	r0, [pc, #108]	; (80051d8 <cppInit+0xd4>)
 800516c:	f7fc fc32 	bl	80019d4 <_ZN3IMU4initEv>

	line_sensor.calibration();
 8005170:	4816      	ldr	r0, [pc, #88]	; (80051cc <cppInit+0xc8>)
 8005172:	f7fc ffdf 	bl	8002134 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800517a:	f000 fb7d 	bl	8005878 <HAL_Delay>
	//imu.calibration();
	//printf("imu offset %f", imu.getOffsetVal());

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000001, 0);
 800517e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80051dc <cppInit+0xd8>
 8005182:	eddf 0a17 	vldr	s1, [pc, #92]	; 80051e0 <cppInit+0xdc>
 8005186:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80051e4 <cppInit+0xe0>
 800518a:	4817      	ldr	r0, [pc, #92]	; (80051e8 <cppInit+0xe4>)
 800518c:	f7fd fa98 	bl	80026c0 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8005190:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80051dc <cppInit+0xd8>
 8005194:	eddf 0a11 	vldr	s1, [pc, #68]	; 80051dc <cppInit+0xd8>
 8005198:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80051dc <cppInit+0xd8>
 800519c:	4813      	ldr	r0, [pc, #76]	; (80051ec <cppInit+0xe8>)
 800519e:	f7fe f8df 	bl	8003360 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 80051a2:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 80051dc <cppInit+0xd8>
 80051a6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80051dc <cppInit+0xd8>
 80051aa:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80051dc <cppInit+0xd8>
 80051ae:	480f      	ldr	r0, [pc, #60]	; (80051ec <cppInit+0xe8>)
 80051b0:	f7fe f8ef 	bl	8003392 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 80051b4:	4807      	ldr	r0, [pc, #28]	; (80051d4 <cppInit+0xd0>)
 80051b6:	f7fc f8cc 	bl	8001352 <_ZN7Encoder13clearDistanceEv>

}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000544 	.word	0x20000544
 80051c4:	20000570 	.word	0x20000570
 80051c8:	20000540 	.word	0x20000540
 80051cc:	20000238 	.word	0x20000238
 80051d0:	2000053c 	.word	0x2000053c
 80051d4:	20007aa4 	.word	0x20007aa4
 80051d8:	20000550 	.word	0x20000550
 80051dc:	00000000 	.word	0x00000000
 80051e0:	358637bd 	.word	0x358637bd
 80051e4:	3a03126f 	.word	0x3a03126f
 80051e8:	20007af0 	.word	0x20007af0
 80051ec:	20007ab8 	.word	0x20007ab8

080051f0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80051f4:	480c      	ldr	r0, [pc, #48]	; (8005228 <cppFlip1ms+0x38>)
 80051f6:	f7fc ff05 	bl	8002004 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80051fa:	480c      	ldr	r0, [pc, #48]	; (800522c <cppFlip1ms+0x3c>)
 80051fc:	f7fc fbfe 	bl	80019fc <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005200:	480b      	ldr	r0, [pc, #44]	; (8005230 <cppFlip1ms+0x40>)
 8005202:	f7fb ffe5 	bl	80011d0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005206:	480b      	ldr	r0, [pc, #44]	; (8005234 <cppFlip1ms+0x44>)
 8005208:	f7fd fa92 	bl	8002730 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800520c:	480a      	ldr	r0, [pc, #40]	; (8005238 <cppFlip1ms+0x48>)
 800520e:	f7fe f8d9 	bl	80033c4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005212:	480a      	ldr	r0, [pc, #40]	; (800523c <cppFlip1ms+0x4c>)
 8005214:	f7fd fd86 	bl	8002d24 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005218:	4809      	ldr	r0, [pc, #36]	; (8005240 <cppFlip1ms+0x50>)
 800521a:	f7fd fbd9 	bl	80029d0 <_ZN5Motor9motorCtrlEv>

	encoder.clearCnt();
 800521e:	4804      	ldr	r0, [pc, #16]	; (8005230 <cppFlip1ms+0x40>)
 8005220:	f7fc f8a6 	bl	8001370 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000238 	.word	0x20000238
 800522c:	20000550 	.word	0x20000550
 8005230:	20007aa4 	.word	0x20007aa4
 8005234:	20007af0 	.word	0x20007af0
 8005238:	20007ab8 	.word	0x20007ab8
 800523c:	20007b4c 	.word	0x20007b4c
 8005240:	2000053c 	.word	0x2000053c

08005244 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005248:	4802      	ldr	r0, [pc, #8]	; (8005254 <cppFlip100ns+0x10>)
 800524a:	f7fc fe8d 	bl	8001f68 <_ZN10LineSensor17storeSensorValuesEv>
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000238 	.word	0x20000238

08005258 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <cppFlip10ms+0x18>)
 800525e:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005262:	eeb0 0a67 	vmov.f32	s0, s15
 8005266:	4803      	ldr	r0, [pc, #12]	; (8005274 <cppFlip10ms+0x1c>)
 8005268:	f7fd fb22 	bl	80028b0 <_ZN6Logger8storeLogEf>
}
 800526c:	bf00      	nop
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000238 	.word	0x20000238
 8005274:	20000570 	.word	0x20000570

08005278 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	4619      	mov	r1, r3
 8005286:	4803      	ldr	r0, [pc, #12]	; (8005294 <cppExit+0x1c>)
 8005288:	f7fd fe1e 	bl	8002ec8 <_ZN10SideSensor12updateStatusEt>
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000530 	.word	0x20000530

08005298 <cppLoop>:

void cppLoop(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	switch(rotary_switch.getValue()){
 800529e:	48a8      	ldr	r0, [pc, #672]	; (8005540 <cppLoop+0x2a8>)
 80052a0:	f7fd fdb8 	bl	8002e14 <_ZN12RotarySwitch8getValueEv>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	f200 81d2 	bhi.w	8005650 <cppLoop+0x3b8>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <cppLoop+0x1c>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052f5 	.word	0x080052f5
 80052b8:	08005317 	.word	0x08005317
 80052bc:	0800539f 	.word	0x0800539f
 80052c0:	080053fb 	.word	0x080053fb
 80052c4:	080054b3 	.word	0x080054b3
 80052c8:	08005591 	.word	0x08005591
 80052cc:	08005651 	.word	0x08005651
 80052d0:	08005651 	.word	0x08005651
 80052d4:	08005651 	.word	0x08005651
 80052d8:	08005651 	.word	0x08005651
 80052dc:	08005651 	.word	0x08005651
 80052e0:	08005651 	.word	0x08005651
 80052e4:	08005651 	.word	0x08005651
 80052e8:	08005651 	.word	0x08005651
 80052ec:	08005651 	.word	0x08005651
 80052f0:	08005651 	.word	0x08005651

	case 0:
		lcd_clear();
 80052f4:	f7fb fed4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80052f8:	2100      	movs	r1, #0
 80052fa:	2000      	movs	r0, #0
 80052fc:	f7fb fee0 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005300:	4890      	ldr	r0, [pc, #576]	; (8005544 <cppLoop+0x2ac>)
 8005302:	f7fb ff07 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005306:	2101      	movs	r1, #1
 8005308:	2000      	movs	r0, #0
 800530a:	f7fb fed9 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 800530e:	488e      	ldr	r0, [pc, #568]	; (8005548 <cppLoop+0x2b0>)
 8005310:	f7fb ff00 	bl	8001114 <lcd_printf>
		break;
 8005314:	e1a7      	b.n	8005666 <cppLoop+0x3ce>

	case 1:
		lcd_clear();
 8005316:	f7fb fec3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800531a:	2100      	movs	r1, #0
 800531c:	2000      	movs	r0, #0
 800531e:	f7fb fecf 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005322:	488a      	ldr	r0, [pc, #552]	; (800554c <cppLoop+0x2b4>)
 8005324:	f7fb fef6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005328:	2101      	movs	r1, #1
 800532a:	2000      	movs	r0, #0
 800532c:	f7fb fec8 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005330:	4887      	ldr	r0, [pc, #540]	; (8005550 <cppLoop+0x2b8>)
 8005332:	f7fb feef 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005336:	4887      	ldr	r0, [pc, #540]	; (8005554 <cppLoop+0x2bc>)
 8005338:	f7fc fc46 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 800533c:	4603      	mov	r3, r0
 800533e:	2b02      	cmp	r3, #2
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8183 	beq.w	8005654 <cppLoop+0x3bc>
			HAL_Delay(500);
 800534e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005352:	f000 fa91 	bl	8005878 <HAL_Delay>

			logger.start();
 8005356:	4880      	ldr	r0, [pc, #512]	; (8005558 <cppLoop+0x2c0>)
 8005358:	f7fd faf6 	bl	8002948 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800535c:	487f      	ldr	r0, [pc, #508]	; (800555c <cppLoop+0x2c4>)
 800535e:	f7fe f847 	bl	80033f0 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005362:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8005560 <cppLoop+0x2c8>
 8005366:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8005560 <cppLoop+0x2c8>
 800536a:	487c      	ldr	r0, [pc, #496]	; (800555c <cppLoop+0x2c4>)
 800536c:	f7fd ffe4 	bl	8003338 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005370:	f04f 32ff 	mov.w	r2, #4294967295
 8005374:	2101      	movs	r1, #1
 8005376:	487b      	ldr	r0, [pc, #492]	; (8005564 <cppLoop+0x2cc>)
 8005378:	f7fc fd46 	bl	8001e08 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800537c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005380:	f000 fa7a 	bl	8005878 <HAL_Delay>

			velocity_ctrl.stop();
 8005384:	4875      	ldr	r0, [pc, #468]	; (800555c <cppLoop+0x2c4>)
 8005386:	f7fe f843 	bl	8003410 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	2100      	movs	r1, #0
 8005390:	4874      	ldr	r0, [pc, #464]	; (8005564 <cppLoop+0x2cc>)
 8005392:	f7fc fd39 	bl	8001e08 <_ZN3LED2LREaa>

			logger.stop();
 8005396:	4870      	ldr	r0, [pc, #448]	; (8005558 <cppLoop+0x2c0>)
 8005398:	f7fd fae6 	bl	8002968 <_ZN6Logger4stopEv>
		}

		break;
 800539c:	e15a      	b.n	8005654 <cppLoop+0x3bc>

	case 2:
		lcd_clear();
 800539e:	f7fb fe7f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80053a2:	2100      	movs	r1, #0
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fb fe8b 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 80053aa:	486f      	ldr	r0, [pc, #444]	; (8005568 <cppLoop+0x2d0>)
 80053ac:	f7fb feb2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80053b0:	2101      	movs	r1, #1
 80053b2:	2000      	movs	r0, #0
 80053b4:	f7fb fe84 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 80053b8:	486c      	ldr	r0, [pc, #432]	; (800556c <cppLoop+0x2d4>)
 80053ba:	f7fb feab 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80053be:	4865      	ldr	r0, [pc, #404]	; (8005554 <cppLoop+0x2bc>)
 80053c0:	f7fc fc02 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8141 	beq.w	8005658 <cppLoop+0x3c0>
			led.LR(1, -1);
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295
 80053da:	2101      	movs	r1, #1
 80053dc:	4861      	ldr	r0, [pc, #388]	; (8005564 <cppLoop+0x2cc>)
 80053de:	f7fc fd13 	bl	8001e08 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor6.csv");
 80053e2:	4a63      	ldr	r2, [pc, #396]	; (8005570 <cppLoop+0x2d8>)
 80053e4:	4963      	ldr	r1, [pc, #396]	; (8005574 <cppLoop+0x2dc>)
 80053e6:	485c      	ldr	r0, [pc, #368]	; (8005558 <cppLoop+0x2c0>)
 80053e8:	f7fd fa9a 	bl	8002920 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295
 80053f0:	2100      	movs	r1, #0
 80053f2:	485c      	ldr	r0, [pc, #368]	; (8005564 <cppLoop+0x2cc>)
 80053f4:	f7fc fd08 	bl	8001e08 <_ZN3LED2LREaa>
		}
		break;
 80053f8:	e12e      	b.n	8005658 <cppLoop+0x3c0>

	case 3:
		led.fullColor('C');
 80053fa:	2143      	movs	r1, #67	; 0x43
 80053fc:	4859      	ldr	r0, [pc, #356]	; (8005564 <cppLoop+0x2cc>)
 80053fe:	f7fc fc47 	bl	8001c90 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005402:	f7fb fe4d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005406:	2100      	movs	r1, #0
 8005408:	2000      	movs	r0, #0
 800540a:	f7fb fe59 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 800540e:	485a      	ldr	r0, [pc, #360]	; (8005578 <cppLoop+0x2e0>)
 8005410:	f7fb fe80 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005414:	2101      	movs	r1, #1
 8005416:	2000      	movs	r0, #0
 8005418:	f7fb fe52 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800541c:	4857      	ldr	r0, [pc, #348]	; (800557c <cppLoop+0x2e4>)
 800541e:	f7fb fe79 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005422:	484c      	ldr	r0, [pc, #304]	; (8005554 <cppLoop+0x2bc>)
 8005424:	f7fc fbd0 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 8005428:	4603      	mov	r3, r0
 800542a:	2b02      	cmp	r3, #2
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8111 	beq.w	800565c <cppLoop+0x3c4>
			led.LR(-1, 1);
 800543a:	2201      	movs	r2, #1
 800543c:	f04f 31ff 	mov.w	r1, #4294967295
 8005440:	4848      	ldr	r0, [pc, #288]	; (8005564 <cppLoop+0x2cc>)
 8005442:	f7fc fce1 	bl	8001e08 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800544a:	f000 fa15 	bl	8005878 <HAL_Delay>

			logger.start();
 800544e:	4842      	ldr	r0, [pc, #264]	; (8005558 <cppLoop+0x2c0>)
 8005450:	f7fd fa7a 	bl	8002948 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005454:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8005580 <cppLoop+0x2e8>
 8005458:	484a      	ldr	r0, [pc, #296]	; (8005584 <cppLoop+0x2ec>)
 800545a:	f7fd f94a 	bl	80026f2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800545e:	4849      	ldr	r0, [pc, #292]	; (8005584 <cppLoop+0x2ec>)
 8005460:	f7fd f99e 	bl	80027a0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005464:	f241 3088 	movw	r0, #5000	; 0x1388
 8005468:	f000 fa06 	bl	8005878 <HAL_Delay>

			logger.stop();
 800546c:	483a      	ldr	r0, [pc, #232]	; (8005558 <cppLoop+0x2c0>)
 800546e:	f7fd fa7b 	bl	8002968 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005472:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8005580 <cppLoop+0x2e8>
 8005476:	4843      	ldr	r0, [pc, #268]	; (8005584 <cppLoop+0x2ec>)
 8005478:	f7fd f93b 	bl	80026f2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 800547c:	4841      	ldr	r0, [pc, #260]	; (8005584 <cppLoop+0x2ec>)
 800547e:	f7fd f99f 	bl	80027c0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	2101      	movs	r1, #1
 8005488:	4836      	ldr	r0, [pc, #216]	; (8005564 <cppLoop+0x2cc>)
 800548a:	f7fc fcbd 	bl	8001e08 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 800548e:	4a3e      	ldr	r2, [pc, #248]	; (8005588 <cppLoop+0x2f0>)
 8005490:	4938      	ldr	r1, [pc, #224]	; (8005574 <cppLoop+0x2dc>)
 8005492:	4831      	ldr	r0, [pc, #196]	; (8005558 <cppLoop+0x2c0>)
 8005494:	f7fd fa44 	bl	8002920 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	2100      	movs	r1, #0
 800549e:	4831      	ldr	r0, [pc, #196]	; (8005564 <cppLoop+0x2cc>)
 80054a0:	f7fc fcb2 	bl	8001e08 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 80054a4:	2200      	movs	r2, #0
 80054a6:	f04f 31ff 	mov.w	r1, #4294967295
 80054aa:	482e      	ldr	r0, [pc, #184]	; (8005564 <cppLoop+0x2cc>)
 80054ac:	f7fc fcac 	bl	8001e08 <_ZN3LED2LREaa>
		}

		break;
 80054b0:	e0d4      	b.n	800565c <cppLoop+0x3c4>

	case 4:
		led.fullColor('M');
 80054b2:	214d      	movs	r1, #77	; 0x4d
 80054b4:	482b      	ldr	r0, [pc, #172]	; (8005564 <cppLoop+0x2cc>)
 80054b6:	f7fc fbeb 	bl	8001c90 <_ZN3LED9fullColorEc>

		lcd_clear();
 80054ba:	f7fb fdf1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80054be:	2100      	movs	r1, #0
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7fb fdfd 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80054c6:	4831      	ldr	r0, [pc, #196]	; (800558c <cppLoop+0x2f4>)
 80054c8:	f7fb fe24 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80054cc:	2101      	movs	r1, #1
 80054ce:	2000      	movs	r0, #0
 80054d0:	f7fb fdf6 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80054d4:	4829      	ldr	r0, [pc, #164]	; (800557c <cppLoop+0x2e4>)
 80054d6:	f7fb fe1d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80054da:	481e      	ldr	r0, [pc, #120]	; (8005554 <cppLoop+0x2bc>)
 80054dc:	f7fc fb74 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80b7 	beq.w	8005660 <cppLoop+0x3c8>
			led.LR(-1, 1);
 80054f2:	2201      	movs	r2, #1
 80054f4:	f04f 31ff 	mov.w	r1, #4294967295
 80054f8:	481a      	ldr	r0, [pc, #104]	; (8005564 <cppLoop+0x2cc>)
 80054fa:	f7fc fc85 	bl	8001e08 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80054fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005502:	f000 f9b9 	bl	8005878 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005506:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8005580 <cppLoop+0x2e8>
 800550a:	481e      	ldr	r0, [pc, #120]	; (8005584 <cppLoop+0x2ec>)
 800550c:	f7fd f900 	bl	8002710 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005510:	4812      	ldr	r0, [pc, #72]	; (800555c <cppLoop+0x2c4>)
 8005512:	f7fd ff6d 	bl	80033f0 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005516:	481b      	ldr	r0, [pc, #108]	; (8005584 <cppLoop+0x2ec>)
 8005518:	f7fd f942 	bl	80027a0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 800551c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005520:	f000 f9aa 	bl	8005878 <HAL_Delay>

			line_trace.stop();
 8005524:	4817      	ldr	r0, [pc, #92]	; (8005584 <cppLoop+0x2ec>)
 8005526:	f7fd f94b 	bl	80027c0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 800552a:	480c      	ldr	r0, [pc, #48]	; (800555c <cppLoop+0x2c4>)
 800552c:	f7fd ff70 	bl	8003410 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005530:	2200      	movs	r2, #0
 8005532:	f04f 31ff 	mov.w	r1, #4294967295
 8005536:	480b      	ldr	r0, [pc, #44]	; (8005564 <cppLoop+0x2cc>)
 8005538:	f7fc fc66 	bl	8001e08 <_ZN3LED2LREaa>
		}
		break;
 800553c:	e090      	b.n	8005660 <cppLoop+0x3c8>
 800553e:	bf00      	nop
 8005540:	20000538 	.word	0x20000538
 8005544:	08016dd4 	.word	0x08016dd4
 8005548:	08016dd8 	.word	0x08016dd8
 800554c:	08016de0 	.word	0x08016de0
 8005550:	08016dec 	.word	0x08016dec
 8005554:	20000534 	.word	0x20000534
 8005558:	20000570 	.word	0x20000570
 800555c:	20007ab8 	.word	0x20007ab8
 8005560:	00000000 	.word	0x00000000
 8005564:	20000540 	.word	0x20000540
 8005568:	08016df4 	.word	0x08016df4
 800556c:	08016df8 	.word	0x08016df8
 8005570:	08016e00 	.word	0x08016e00
 8005574:	08016e0c 	.word	0x08016e0c
 8005578:	08016e1c 	.word	0x08016e1c
 800557c:	08016e24 	.word	0x08016e24
 8005580:	3dcccccd 	.word	0x3dcccccd
 8005584:	20007af0 	.word	0x20007af0
 8005588:	08016e2c 	.word	0x08016e2c
 800558c:	08016e38 	.word	0x08016e38

	case 5:
		led.fullColor('Y');
 8005590:	2159      	movs	r1, #89	; 0x59
 8005592:	4838      	ldr	r0, [pc, #224]	; (8005674 <cppLoop+0x3dc>)
 8005594:	f7fc fb7c 	bl	8001c90 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005598:	f7fb fd82 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800559c:	2100      	movs	r1, #0
 800559e:	2000      	movs	r0, #0
 80055a0:	f7fb fd8e 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80055a4:	4834      	ldr	r0, [pc, #208]	; (8005678 <cppLoop+0x3e0>)
 80055a6:	f7fb fdb5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80055aa:	2101      	movs	r1, #1
 80055ac:	2000      	movs	r0, #0
 80055ae:	f7fb fd87 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80055b2:	4832      	ldr	r0, [pc, #200]	; (800567c <cppLoop+0x3e4>)
 80055b4:	f7fb fdae 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80055b8:	4831      	ldr	r0, [pc, #196]	; (8005680 <cppLoop+0x3e8>)
 80055ba:	f7fc fb05 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d04a      	beq.n	8005664 <cppLoop+0x3cc>
			led.LR(-1, 1);
 80055ce:	2201      	movs	r2, #1
 80055d0:	f04f 31ff 	mov.w	r1, #4294967295
 80055d4:	4827      	ldr	r0, [pc, #156]	; (8005674 <cppLoop+0x3dc>)
 80055d6:	f7fc fc17 	bl	8001e08 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80055da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055de:	f000 f94b 	bl	8005878 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80055e2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8005684 <cppLoop+0x3ec>
 80055e6:	4828      	ldr	r0, [pc, #160]	; (8005688 <cppLoop+0x3f0>)
 80055e8:	f7fd f883 	bl	80026f2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80055ec:	4826      	ldr	r0, [pc, #152]	; (8005688 <cppLoop+0x3f0>)
 80055ee:	f7fd f8d7 	bl	80027a0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80055f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055f6:	f000 f93f 	bl	8005878 <HAL_Delay>

			led.fullColor('R');
 80055fa:	2152      	movs	r1, #82	; 0x52
 80055fc:	481d      	ldr	r0, [pc, #116]	; (8005674 <cppLoop+0x3dc>)
 80055fe:	f7fc fb47 	bl	8001c90 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005602:	4822      	ldr	r0, [pc, #136]	; (800568c <cppLoop+0x3f4>)
 8005604:	f7fb fed2 	bl	80013ac <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005608:	4820      	ldr	r0, [pc, #128]	; (800568c <cppLoop+0x3f4>)
 800560a:	f7fb fea2 	bl	8001352 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800560e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005612:	f000 f931 	bl	8005878 <HAL_Delay>

			line_trace.stop();
 8005616:	481c      	ldr	r0, [pc, #112]	; (8005688 <cppLoop+0x3f0>)
 8005618:	f7fd f8d2 	bl	80027c0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800561c:	491c      	ldr	r1, [pc, #112]	; (8005690 <cppLoop+0x3f8>)
 800561e:	481d      	ldr	r0, [pc, #116]	; (8005694 <cppLoop+0x3fc>)
 8005620:	f7fb fed4 	bl	80013cc <user_fopen>
			float d = encoder.getDistance();
 8005624:	4819      	ldr	r0, [pc, #100]	; (800568c <cppLoop+0x3f4>)
 8005626:	f7fb fe85 	bl	8001334 <_ZN7Encoder11getDistanceEv>
 800562a:	eef0 7a40 	vmov.f32	s15, s0
 800562e:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	2201      	movs	r2, #1
 8005636:	4619      	mov	r1, r3
 8005638:	2001      	movs	r0, #1
 800563a:	f7fb fee9 	bl	8001410 <sd_write>
			user_fclose();
 800563e:	f7fb fed7 	bl	80013f0 <user_fclose>

			led.LR(-1, 0);
 8005642:	2200      	movs	r2, #0
 8005644:	f04f 31ff 	mov.w	r1, #4294967295
 8005648:	480a      	ldr	r0, [pc, #40]	; (8005674 <cppLoop+0x3dc>)
 800564a:	f7fc fbdd 	bl	8001e08 <_ZN3LED2LREaa>
		}

		break;
 800564e:	e009      	b.n	8005664 <cppLoop+0x3cc>
	case 15:

		break;

	default:
		break;
 8005650:	bf00      	nop
 8005652:	e008      	b.n	8005666 <cppLoop+0x3ce>
		break;
 8005654:	bf00      	nop
 8005656:	e006      	b.n	8005666 <cppLoop+0x3ce>
		break;
 8005658:	bf00      	nop
 800565a:	e004      	b.n	8005666 <cppLoop+0x3ce>
		break;
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <cppLoop+0x3ce>
		break;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <cppLoop+0x3ce>
		break;
 8005664:	bf00      	nop

	}

	HAL_Delay(10);
 8005666:	200a      	movs	r0, #10
 8005668:	f000 f906 	bl	8005878 <HAL_Delay>

}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000540 	.word	0x20000540
 8005678:	08016e44 	.word	0x08016e44
 800567c:	08016e4c 	.word	0x08016e4c
 8005680:	20000534 	.word	0x20000534
 8005684:	00000000 	.word	0x00000000
 8005688:	20007af0 	.word	0x20007af0
 800568c:	20007aa4 	.word	0x20007aa4
 8005690:	08016e58 	.word	0x08016e58
 8005694:	08016e60 	.word	0x08016e60

08005698 <_Z41__static_initialization_and_destruction_0ii>:
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12b      	bne.n	8005700 <_Z41__static_initialization_and_destruction_0ii+0x68>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d126      	bne.n	8005700 <_Z41__static_initialization_and_destruction_0ii+0x68>
LineSensor line_sensor;
 80056b2:	4815      	ldr	r0, [pc, #84]	; (8005708 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80056b4:	f7fc fbe0 	bl	8001e78 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80056b8:	4814      	ldr	r0, [pc, #80]	; (800570c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80056ba:	f7fd fbf9 	bl	8002eb0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80056be:	4814      	ldr	r0, [pc, #80]	; (8005710 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80056c0:	f7fc fa76 	bl	8001bb0 <_ZN8JoyStickC1Ev>
Motor motor;
 80056c4:	4813      	ldr	r0, [pc, #76]	; (8005714 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80056c6:	f7fd f95f 	bl	8002988 <_ZN5MotorC1Ev>
IMU imu;
 80056ca:	4813      	ldr	r0, [pc, #76]	; (8005718 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80056cc:	f7fc f95a 	bl	8001984 <_ZN3IMUC1Ev>
Logger logger;
 80056d0:	4812      	ldr	r0, [pc, #72]	; (800571c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80056d2:	f7fd f88d 	bl	80027f0 <_ZN6LoggerC1Ev>
Encoder encoder;
 80056d6:	4812      	ldr	r0, [pc, #72]	; (8005720 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80056d8:	f7fb fd3c 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80056e2:	4810      	ldr	r0, [pc, #64]	; (8005724 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80056e4:	f7fd fc4e 	bl	8002f84 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80056e8:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80056ea:	4a07      	ldr	r2, [pc, #28]	; (8005708 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80056ec:	4909      	ldr	r1, [pc, #36]	; (8005714 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80056ee:	480e      	ldr	r0, [pc, #56]	; (8005728 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80056f0:	f7fc febc 	bl	800246c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80056f6:	4a08      	ldr	r2, [pc, #32]	; (8005718 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80056f8:	4909      	ldr	r1, [pc, #36]	; (8005720 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80056fa:	480c      	ldr	r0, [pc, #48]	; (800572c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80056fc:	f7fd fa2a 	bl	8002b54 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000238 	.word	0x20000238
 800570c:	20000530 	.word	0x20000530
 8005710:	20000534 	.word	0x20000534
 8005714:	2000053c 	.word	0x2000053c
 8005718:	20000550 	.word	0x20000550
 800571c:	20000570 	.word	0x20000570
 8005720:	20007aa4 	.word	0x20007aa4
 8005724:	20007ab8 	.word	0x20007ab8
 8005728:	20007af0 	.word	0x20007af0
 800572c:	20007b4c 	.word	0x20007b4c

08005730 <_GLOBAL__sub_I_line_sensor>:
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
 8005734:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005738:	2001      	movs	r0, #1
 800573a:	f7ff ffad 	bl	8005698 <_Z41__static_initialization_and_destruction_0ii>
 800573e:	bd80      	pop	{r7, pc}

08005740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005778 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005746:	e003      	b.n	8005750 <LoopCopyDataInit>

08005748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800574a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800574c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800574e:	3104      	adds	r1, #4

08005750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005750:	480b      	ldr	r0, [pc, #44]	; (8005780 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005758:	d3f6      	bcc.n	8005748 <CopyDataInit>
  ldr  r2, =_sbss
 800575a:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800575c:	e002      	b.n	8005764 <LoopFillZerobss>

0800575e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800575e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005760:	f842 3b04 	str.w	r3, [r2], #4

08005764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005768:	d3f9      	bcc.n	800575e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800576a:	f7ff fc7b 	bl	8005064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800576e:	f00c fb7b 	bl	8011e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005772:	f7fd ff47 	bl	8003604 <main>
  bx  lr    
 8005776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005778:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800577c:	08017860 	.word	0x08017860
  ldr  r0, =_sdata
 8005780:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005784:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005788:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800578c:	2000c6b0 	.word	0x2000c6b0

08005790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005790:	e7fe      	b.n	8005790 <ADC_IRQHandler>
	...

08005794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <HAL_Init+0x40>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <HAL_Init+0x40>)
 800579e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <HAL_Init+0x40>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <HAL_Init+0x40>)
 80057aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <HAL_Init+0x40>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <HAL_Init+0x40>)
 80057b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057bc:	2003      	movs	r0, #3
 80057be:	f000 fd51 	bl	8006264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057c2:	2000      	movs	r0, #0
 80057c4:	f000 f808 	bl	80057d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057c8:	f7fe fe3a 	bl	8004440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023c00 	.word	0x40023c00

080057d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_InitTick+0x54>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <HAL_InitTick+0x58>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fd69 	bl	80062ce <HAL_SYSTICK_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e00e      	b.n	8005824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b0f      	cmp	r3, #15
 800580a:	d80a      	bhi.n	8005822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800580c:	2200      	movs	r2, #0
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	f000 fd31 	bl	800627a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005818:	4a06      	ldr	r2, [pc, #24]	; (8005834 <HAL_InitTick+0x5c>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e000      	b.n	8005824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20000000 	.word	0x20000000
 8005830:	20000008 	.word	0x20000008
 8005834:	20000004 	.word	0x20000004

08005838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_IncTick+0x20>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_IncTick+0x24>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4413      	add	r3, r2
 8005848:	4a04      	ldr	r2, [pc, #16]	; (800585c <HAL_IncTick+0x24>)
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000008 	.word	0x20000008
 800585c:	2000a634 	.word	0x2000a634

08005860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return uwTick;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <HAL_GetTick+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2000a634 	.word	0x2000a634

08005878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005880:	f7ff ffee 	bl	8005860 <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d005      	beq.n	800589e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_Delay+0x40>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800589e:	bf00      	nop
 80058a0:	f7ff ffde 	bl	8005860 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d8f7      	bhi.n	80058a0 <HAL_Delay+0x28>
  {
  }
}
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000008 	.word	0x20000008

080058bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e033      	b.n	800593a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fe fdd8 	bl	8004490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d118      	bne.n	800592c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005902:	f023 0302 	bic.w	r3, r3, #2
 8005906:	f043 0202 	orr.w	r2, r3, #2
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fa5a 	bl	8005dc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
 800592a:	e001      	b.n	8005930 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_ADC_Start_DMA+0x1e>
 800595e:	2302      	movs	r3, #2
 8005960:	e0cc      	b.n	8005afc <HAL_ADC_Start_DMA+0x1b8>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d018      	beq.n	80059aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005988:	4b5e      	ldr	r3, [pc, #376]	; (8005b04 <HAL_ADC_Start_DMA+0x1c0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a5e      	ldr	r2, [pc, #376]	; (8005b08 <HAL_ADC_Start_DMA+0x1c4>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	0c9a      	lsrs	r2, r3, #18
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800599c:	e002      	b.n	80059a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f9      	bne.n	800599e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f040 80a0 	bne.w	8005afa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f8:	d106      	bne.n	8005a08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fe:	f023 0206 	bic.w	r2, r3, #6
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
 8005a06:	e002      	b.n	8005a0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a16:	4b3d      	ldr	r3, [pc, #244]	; (8005b0c <HAL_ADC_Start_DMA+0x1c8>)
 8005a18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <HAL_ADC_Start_DMA+0x1cc>)
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	4a3b      	ldr	r2, [pc, #236]	; (8005b14 <HAL_ADC_Start_DMA+0x1d0>)
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	4a3a      	ldr	r2, [pc, #232]	; (8005b18 <HAL_ADC_Start_DMA+0x1d4>)
 8005a30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005a4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	334c      	adds	r3, #76	; 0x4c
 8005a66:	4619      	mov	r1, r3
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f000 fcea 	bl	8006444 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d12a      	bne.n	8005ad2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <HAL_ADC_Start_DMA+0x1d8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d015      	beq.n	8005ab2 <HAL_ADC_Start_DMA+0x16e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <HAL_ADC_Start_DMA+0x1dc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d105      	bne.n	8005a9c <HAL_ADC_Start_DMA+0x158>
 8005a90:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <HAL_ADC_Start_DMA+0x1c8>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <HAL_ADC_Start_DMA+0x1e0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d129      	bne.n	8005afa <HAL_ADC_Start_DMA+0x1b6>
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_ADC_Start_DMA+0x1c8>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	2b0f      	cmp	r3, #15
 8005ab0:	d823      	bhi.n	8005afa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d11c      	bne.n	8005afa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	e013      	b.n	8005afa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <HAL_ADC_Start_DMA+0x1d8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10e      	bne.n	8005afa <HAL_ADC_Start_DMA+0x1b6>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005af8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000000 	.word	0x20000000
 8005b08:	431bde83 	.word	0x431bde83
 8005b0c:	40012300 	.word	0x40012300
 8005b10:	08005fc1 	.word	0x08005fc1
 8005b14:	0800607b 	.word	0x0800607b
 8005b18:	08006097 	.word	0x08006097
 8005b1c:	40012000 	.word	0x40012000
 8005b20:	40012100 	.word	0x40012100
 8005b24:	40012200 	.word	0x40012200

08005b28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x1c>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e113      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x244>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b09      	cmp	r3, #9
 8005b8e:	d925      	bls.n	8005bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68d9      	ldr	r1, [r3, #12]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3b1e      	subs	r3, #30
 8005ba6:	2207      	movs	r2, #7
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43da      	mvns	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68d9      	ldr	r1, [r3, #12]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	4603      	mov	r3, r0
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4403      	add	r3, r0
 8005bce:	3b1e      	subs	r3, #30
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	60da      	str	r2, [r3, #12]
 8005bda:	e022      	b.n	8005c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6919      	ldr	r1, [r3, #16]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43da      	mvns	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6919      	ldr	r1, [r3, #16]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4618      	mov	r0, r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4403      	add	r3, r0
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d824      	bhi.n	8005c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	3b05      	subs	r3, #5
 8005c3c:	221f      	movs	r2, #31
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43da      	mvns	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	400a      	ands	r2, r1
 8005c4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4618      	mov	r0, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	3b05      	subs	r3, #5
 8005c66:	fa00 f203 	lsl.w	r2, r0, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	635a      	str	r2, [r3, #52]	; 0x34
 8005c72:	e04c      	b.n	8005d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d824      	bhi.n	8005cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3b23      	subs	r3, #35	; 0x23
 8005c8e:	221f      	movs	r2, #31
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43da      	mvns	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	4618      	mov	r0, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3b23      	subs	r3, #35	; 0x23
 8005cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc4:	e023      	b.n	8005d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3b41      	subs	r3, #65	; 0x41
 8005cd8:	221f      	movs	r2, #31
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	400a      	ands	r2, r1
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	3b41      	subs	r3, #65	; 0x41
 8005d02:	fa00 f203 	lsl.w	r2, r0, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d0e:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <HAL_ADC_ConfigChannel+0x250>)
 8005d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a28      	ldr	r2, [pc, #160]	; (8005db8 <HAL_ADC_ConfigChannel+0x254>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d10f      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x1d8>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b12      	cmp	r3, #18
 8005d22:	d10b      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <HAL_ADC_ConfigChannel+0x254>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d12b      	bne.n	8005d9e <HAL_ADC_ConfigChannel+0x23a>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <HAL_ADC_ConfigChannel+0x258>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <HAL_ADC_ConfigChannel+0x1f4>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b11      	cmp	r3, #17
 8005d56:	d122      	bne.n	8005d9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <HAL_ADC_ConfigChannel+0x258>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d111      	bne.n	8005d9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_ADC_ConfigChannel+0x25c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a11      	ldr	r2, [pc, #68]	; (8005dc4 <HAL_ADC_ConfigChannel+0x260>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	0c9a      	lsrs	r2, r3, #18
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d90:	e002      	b.n	8005d98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f9      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40012300 	.word	0x40012300
 8005db8:	40012000 	.word	0x40012000
 8005dbc:	10000012 	.word	0x10000012
 8005dc0:	20000000 	.word	0x20000000
 8005dc4:	431bde83 	.word	0x431bde83

08005dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dd0:	4b79      	ldr	r3, [pc, #484]	; (8005fb8 <ADC_Init+0x1f0>)
 8005dd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6859      	ldr	r1, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6859      	ldr	r1, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6899      	ldr	r1, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	4a58      	ldr	r2, [pc, #352]	; (8005fbc <ADC_Init+0x1f4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6899      	ldr	r1, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6899      	ldr	r1, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	e00f      	b.n	8005ec6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ec4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0202 	bic.w	r2, r2, #2
 8005ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6899      	ldr	r1, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	7e1b      	ldrb	r3, [r3, #24]
 8005ee0:	005a      	lsls	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	035a      	lsls	r2, r3, #13
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	e007      	b.n	8005f3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	051a      	lsls	r2, r3, #20
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6899      	ldr	r1, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f7e:	025a      	lsls	r2, r3, #9
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	029a      	lsls	r2, r3, #10
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40012300 	.word	0x40012300
 8005fbc:	0f000001 	.word	0x0f000001

08005fc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d13c      	bne.n	8006054 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d12b      	bne.n	800604c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d127      	bne.n	800604c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006014:	2b00      	cmp	r3, #0
 8006016:	d119      	bne.n	800604c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0220 	bic.w	r2, r2, #32
 8006026:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fd6b 	bl	8005b28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006052:	e00e      	b.n	8006072 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fd75 	bl	8005b50 <HAL_ADC_ErrorCallback>
}
 8006066:	e004      	b.n	8006072 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff fd57 	bl	8005b3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f043 0204 	orr.w	r2, r3, #4
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fd4a 	bl	8005b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <__NVIC_SetPriorityGrouping>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060e0:	4013      	ands	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060f6:	4a04      	ldr	r2, [pc, #16]	; (8006108 <__NVIC_SetPriorityGrouping+0x44>)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	60d3      	str	r3, [r2, #12]
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <__NVIC_GetPriorityGrouping>:
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <__NVIC_GetPriorityGrouping+0x18>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	f003 0307 	and.w	r3, r3, #7
}
 800611a:	4618      	mov	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	e000ed00 	.word	0xe000ed00

08006128 <__NVIC_EnableIRQ>:
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	db0b      	blt.n	8006152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	f003 021f 	and.w	r2, r3, #31
 8006140:	4907      	ldr	r1, [pc, #28]	; (8006160 <__NVIC_EnableIRQ+0x38>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2001      	movs	r0, #1
 800614a:	fa00 f202 	lsl.w	r2, r0, r2
 800614e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e100 	.word	0xe000e100

08006164 <__NVIC_SetPriority>:
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006174:	2b00      	cmp	r3, #0
 8006176:	db0a      	blt.n	800618e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	490c      	ldr	r1, [pc, #48]	; (80061b0 <__NVIC_SetPriority+0x4c>)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	440b      	add	r3, r1
 8006188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800618c:	e00a      	b.n	80061a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4908      	ldr	r1, [pc, #32]	; (80061b4 <__NVIC_SetPriority+0x50>)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	3b04      	subs	r3, #4
 800619c:	0112      	lsls	r2, r2, #4
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	440b      	add	r3, r1
 80061a2:	761a      	strb	r2, [r3, #24]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000e100 	.word	0xe000e100
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <NVIC_EncodePriority>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f1c3 0307 	rsb	r3, r3, #7
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	bf28      	it	cs
 80061d6:	2304      	movcs	r3, #4
 80061d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3304      	adds	r3, #4
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d902      	bls.n	80061e8 <NVIC_EncodePriority+0x30>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3b03      	subs	r3, #3
 80061e6:	e000      	b.n	80061ea <NVIC_EncodePriority+0x32>
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	401a      	ands	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006200:	f04f 31ff 	mov.w	r1, #4294967295
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43d9      	mvns	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006210:	4313      	orrs	r3, r2
}
 8006212:	4618      	mov	r0, r3
 8006214:	3724      	adds	r7, #36	; 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <SysTick_Config>:
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3b01      	subs	r3, #1
 800622c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006230:	d301      	bcc.n	8006236 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006232:	2301      	movs	r3, #1
 8006234:	e00f      	b.n	8006256 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006236:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <SysTick_Config+0x40>)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800623e:	210f      	movs	r1, #15
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	f7ff ff8e 	bl	8006164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <SysTick_Config+0x40>)
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800624e:	4b04      	ldr	r3, [pc, #16]	; (8006260 <SysTick_Config+0x40>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010

08006264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff29 	bl	80060c4 <__NVIC_SetPriorityGrouping>
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	4603      	mov	r3, r0
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800628c:	f7ff ff3e 	bl	800610c <__NVIC_GetPriorityGrouping>
 8006290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7ff ff8e 	bl	80061b8 <NVIC_EncodePriority>
 800629c:	4602      	mov	r2, r0
 800629e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ff5d 	bl	8006164 <__NVIC_SetPriority>
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	4603      	mov	r3, r0
 80062ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff ff31 	bl	8006128 <__NVIC_EnableIRQ>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff ffa2 	bl	8006220 <SysTick_Config>
 80062dc:	4603      	mov	r3, r0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062f4:	f7ff fab4 	bl	8005860 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e099      	b.n	8006438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006324:	e00f      	b.n	8006346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006326:	f7ff fa9b 	bl	8005860 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b05      	cmp	r3, #5
 8006332:	d908      	bls.n	8006346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2203      	movs	r2, #3
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e078      	b.n	8006438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e8      	bne.n	8006326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4b38      	ldr	r3, [pc, #224]	; (8006440 <HAL_DMA_Init+0x158>)
 8006360:	4013      	ands	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800637e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800638a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	2b04      	cmp	r3, #4
 800639e:	d107      	bne.n	80063b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	4313      	orrs	r3, r2
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0307 	bic.w	r3, r3, #7
 80063c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d117      	bne.n	800640a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa9d 	bl	800692c <DMA_CheckFifoParam>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2240      	movs	r2, #64	; 0x40
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006406:	2301      	movs	r3, #1
 8006408:	e016      	b.n	8006438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa54 	bl	80068c0 <DMA_CalcBaseAndBitshift>
 8006418:	4603      	mov	r3, r0
 800641a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006420:	223f      	movs	r2, #63	; 0x3f
 8006422:	409a      	lsls	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	f010803f 	.word	0xf010803f

08006444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_DMA_Start_IT+0x26>
 8006466:	2302      	movs	r3, #2
 8006468:	e040      	b.n	80064ec <HAL_DMA_Start_IT+0xa8>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	d12f      	bne.n	80064de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f9e6 	bl	8006864 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649c:	223f      	movs	r2, #63	; 0x3f
 800649e:	409a      	lsls	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0216 	orr.w	r2, r2, #22
 80064b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0208 	orr.w	r2, r2, #8
 80064ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e005      	b.n	80064ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
 80064e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d004      	beq.n	8006512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2280      	movs	r2, #128	; 0x80
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e00c      	b.n	800652c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2205      	movs	r2, #5
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006544:	4b92      	ldr	r3, [pc, #584]	; (8006790 <HAL_DMA_IRQHandler+0x258>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a92      	ldr	r2, [pc, #584]	; (8006794 <HAL_DMA_IRQHandler+0x25c>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	0a9b      	lsrs	r3, r3, #10
 8006550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	2208      	movs	r2, #8
 8006564:	409a      	lsls	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01a      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d013      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0204 	bic.w	r2, r2, #4
 800658a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006590:	2208      	movs	r2, #8
 8006592:	409a      	lsls	r2, r3
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659c:	f043 0201 	orr.w	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	2201      	movs	r2, #1
 80065aa:	409a      	lsls	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d012      	beq.n	80065da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c6:	2201      	movs	r2, #1
 80065c8:	409a      	lsls	r2, r3
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d2:	f043 0202 	orr.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	2204      	movs	r2, #4
 80065e0:	409a      	lsls	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d012      	beq.n	8006610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	2204      	movs	r2, #4
 80065fe:	409a      	lsls	r2, r3
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	f043 0204 	orr.w	r2, r3, #4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	2210      	movs	r2, #16
 8006616:	409a      	lsls	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d043      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d03c      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	2210      	movs	r2, #16
 8006634:	409a      	lsls	r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d018      	beq.n	800667a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d024      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
 8006666:	e01f      	b.n	80066a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
 8006678:	e016      	b.n	80066a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d107      	bne.n	8006698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0208 	bic.w	r2, r2, #8
 8006696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	2220      	movs	r2, #32
 80066ae:	409a      	lsls	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 808e 	beq.w	80067d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8086 	beq.w	80067d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ce:	2220      	movs	r2, #32
 80066d0:	409a      	lsls	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d136      	bne.n	8006750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0216 	bic.w	r2, r2, #22
 80066f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d103      	bne.n	8006712 <HAL_DMA_IRQHandler+0x1da>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0208 	bic.w	r2, r2, #8
 8006720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	223f      	movs	r2, #63	; 0x3f
 8006728:	409a      	lsls	r2, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006742:	2b00      	cmp	r3, #0
 8006744:	d07d      	beq.n	8006842 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
        }
        return;
 800674e:	e078      	b.n	8006842 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01c      	beq.n	8006798 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d108      	bne.n	800677e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	2b00      	cmp	r3, #0
 8006772:	d030      	beq.n	80067d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
 800677c:	e02b      	b.n	80067d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d027      	beq.n	80067d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	e022      	b.n	80067d6 <HAL_DMA_IRQHandler+0x29e>
 8006790:	20000000 	.word	0x20000000
 8006794:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10f      	bne.n	80067c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0210 	bic.w	r2, r2, #16
 80067b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d032      	beq.n	8006844 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d022      	beq.n	8006830 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2205      	movs	r2, #5
 80067ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3301      	adds	r3, #1
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	429a      	cmp	r2, r3
 800680c:	d307      	bcc.n	800681e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f2      	bne.n	8006802 <HAL_DMA_IRQHandler+0x2ca>
 800681c:	e000      	b.n	8006820 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800681e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
 8006840:	e000      	b.n	8006844 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006842:	bf00      	nop
    }
  }
}
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop

0800684c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006880:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d108      	bne.n	80068a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80068a2:	e007      	b.n	80068b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	3b10      	subs	r3, #16
 80068d0:	4a14      	ldr	r2, [pc, #80]	; (8006924 <DMA_CalcBaseAndBitshift+0x64>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068da:	4a13      	ldr	r2, [pc, #76]	; (8006928 <DMA_CalcBaseAndBitshift+0x68>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d909      	bls.n	8006902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	1d1a      	adds	r2, r3, #4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006900:	e007      	b.n	8006912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	aaaaaaab 	.word	0xaaaaaaab
 8006928:	08016ed8 	.word	0x08016ed8

0800692c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11f      	bne.n	8006986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d855      	bhi.n	80069f8 <DMA_CheckFifoParam+0xcc>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <DMA_CheckFifoParam+0x28>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006965 	.word	0x08006965
 8006958:	08006977 	.word	0x08006977
 800695c:	08006965 	.word	0x08006965
 8006960:	080069f9 	.word	0x080069f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d045      	beq.n	80069fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006974:	e042      	b.n	80069fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800697e:	d13f      	bne.n	8006a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006984:	e03c      	b.n	8006a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	d121      	bne.n	80069d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b03      	cmp	r3, #3
 8006994:	d836      	bhi.n	8006a04 <DMA_CheckFifoParam+0xd8>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <DMA_CheckFifoParam+0x70>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069b3 	.word	0x080069b3
 80069a4:	080069ad 	.word	0x080069ad
 80069a8:	080069c5 	.word	0x080069c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
      break;
 80069b0:	e02f      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d024      	beq.n	8006a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069c2:	e021      	b.n	8006a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069cc:	d11e      	bne.n	8006a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80069d2:	e01b      	b.n	8006a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d902      	bls.n	80069e0 <DMA_CheckFifoParam+0xb4>
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d003      	beq.n	80069e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069de:	e018      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
      break;
 80069e4:	e015      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
      break;
 80069f6:	e00b      	b.n	8006a10 <DMA_CheckFifoParam+0xe4>
      break;
 80069f8:	bf00      	nop
 80069fa:	e00a      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 80069fc:	bf00      	nop
 80069fe:	e008      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a00:	bf00      	nop
 8006a02:	e006      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a04:	bf00      	nop
 8006a06:	e004      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e002      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <DMA_CheckFifoParam+0xe6>
      break;
 8006a10:	bf00      	nop
    }
  } 
  
  return status; 
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b089      	sub	sp, #36	; 0x24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	e177      	b.n	8006d2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	f040 8166 	bne.w	8006d26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d00b      	beq.n	8006a7a <HAL_GPIO_Init+0x5a>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d007      	beq.n	8006a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a6e:	2b11      	cmp	r3, #17
 8006a70:	d003      	beq.n	8006a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b12      	cmp	r3, #18
 8006a78:	d130      	bne.n	8006adc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	2203      	movs	r2, #3
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	4013      	ands	r3, r2
 8006abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f003 0201 	and.w	r2, r3, #1
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d003      	beq.n	8006b1c <HAL_GPIO_Init+0xfc>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b12      	cmp	r3, #18
 8006b1a:	d123      	bne.n	8006b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	08da      	lsrs	r2, r3, #3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3208      	adds	r2, #8
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	220f      	movs	r2, #15
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	08da      	lsrs	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3208      	adds	r2, #8
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	2203      	movs	r2, #3
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0203 	and.w	r2, r3, #3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80c0 	beq.w	8006d26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	4b65      	ldr	r3, [pc, #404]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	4a64      	ldr	r2, [pc, #400]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bb6:	4b62      	ldr	r3, [pc, #392]	; (8006d40 <HAL_GPIO_Init+0x320>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bc2:	4a60      	ldr	r2, [pc, #384]	; (8006d44 <HAL_GPIO_Init+0x324>)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	3302      	adds	r3, #2
 8006bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	220f      	movs	r2, #15
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <HAL_GPIO_Init+0x328>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d037      	beq.n	8006c5e <HAL_GPIO_Init+0x23e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a56      	ldr	r2, [pc, #344]	; (8006d4c <HAL_GPIO_Init+0x32c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d031      	beq.n	8006c5a <HAL_GPIO_Init+0x23a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a55      	ldr	r2, [pc, #340]	; (8006d50 <HAL_GPIO_Init+0x330>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02b      	beq.n	8006c56 <HAL_GPIO_Init+0x236>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a54      	ldr	r2, [pc, #336]	; (8006d54 <HAL_GPIO_Init+0x334>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d025      	beq.n	8006c52 <HAL_GPIO_Init+0x232>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a53      	ldr	r2, [pc, #332]	; (8006d58 <HAL_GPIO_Init+0x338>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01f      	beq.n	8006c4e <HAL_GPIO_Init+0x22e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a52      	ldr	r2, [pc, #328]	; (8006d5c <HAL_GPIO_Init+0x33c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d019      	beq.n	8006c4a <HAL_GPIO_Init+0x22a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a51      	ldr	r2, [pc, #324]	; (8006d60 <HAL_GPIO_Init+0x340>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <HAL_GPIO_Init+0x226>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a50      	ldr	r2, [pc, #320]	; (8006d64 <HAL_GPIO_Init+0x344>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00d      	beq.n	8006c42 <HAL_GPIO_Init+0x222>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a4f      	ldr	r2, [pc, #316]	; (8006d68 <HAL_GPIO_Init+0x348>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <HAL_GPIO_Init+0x21e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a4e      	ldr	r2, [pc, #312]	; (8006d6c <HAL_GPIO_Init+0x34c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d101      	bne.n	8006c3a <HAL_GPIO_Init+0x21a>
 8006c36:	2309      	movs	r3, #9
 8006c38:	e012      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e010      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	e00e      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c42:	2307      	movs	r3, #7
 8006c44:	e00c      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c46:	2306      	movs	r3, #6
 8006c48:	e00a      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c4a:	2305      	movs	r3, #5
 8006c4c:	e008      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c4e:	2304      	movs	r3, #4
 8006c50:	e006      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c52:	2303      	movs	r3, #3
 8006c54:	e004      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e002      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <HAL_GPIO_Init+0x240>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	f002 0203 	and.w	r2, r2, #3
 8006c66:	0092      	lsls	r2, r2, #2
 8006c68:	4093      	lsls	r3, r2
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c70:	4934      	ldr	r1, [pc, #208]	; (8006d44 <HAL_GPIO_Init+0x324>)
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	089b      	lsrs	r3, r3, #2
 8006c76:	3302      	adds	r3, #2
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c7e:	4b3c      	ldr	r3, [pc, #240]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	43db      	mvns	r3, r3
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ca2:	4a33      	ldr	r2, [pc, #204]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ca8:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ccc:	4a28      	ldr	r2, [pc, #160]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cd2:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cf6:	4a1e      	ldr	r2, [pc, #120]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cfc:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	43db      	mvns	r3, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d20:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	f67f ae84 	bls.w	8006a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d34:	bf00      	nop
 8006d36:	3724      	adds	r7, #36	; 0x24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	40023800 	.word	0x40023800
 8006d44:	40013800 	.word	0x40013800
 8006d48:	40020000 	.word	0x40020000
 8006d4c:	40020400 	.word	0x40020400
 8006d50:	40020800 	.word	0x40020800
 8006d54:	40020c00 	.word	0x40020c00
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	40021400 	.word	0x40021400
 8006d60:	40021800 	.word	0x40021800
 8006d64:	40021c00 	.word	0x40021c00
 8006d68:	40022000 	.word	0x40022000
 8006d6c:	40022400 	.word	0x40022400
 8006d70:	40013c00 	.word	0x40013c00

08006d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	887b      	ldrh	r3, [r7, #2]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	e001      	b.n	8006d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
 8006db0:	4613      	mov	r3, r2
 8006db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006db4:	787b      	ldrb	r3, [r7, #1]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dba:	887a      	ldrh	r2, [r7, #2]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006dc0:	e003      	b.n	8006dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	041a      	lsls	r2, r3, #16
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	619a      	str	r2, [r3, #24]
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006de2:	4b08      	ldr	r3, [pc, #32]	; (8006e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dee:	4a05      	ldr	r2, [pc, #20]	; (8006e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fc fb87 	bl	800350a <HAL_GPIO_EXTI_Callback>
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40013c00 	.word	0x40013c00

08006e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e11f      	b.n	800705a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fd fbe0 	bl	80045f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2224      	movs	r2, #36	; 0x24
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f001 f96e 	bl	800814c <HAL_RCC_GetPCLK1Freq>
 8006e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	4a7b      	ldr	r2, [pc, #492]	; (8007064 <HAL_I2C_Init+0x25c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d807      	bhi.n	8006e8c <HAL_I2C_Init+0x84>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a7a      	ldr	r2, [pc, #488]	; (8007068 <HAL_I2C_Init+0x260>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	bf94      	ite	ls
 8006e84:	2301      	movls	r3, #1
 8006e86:	2300      	movhi	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e006      	b.n	8006e9a <HAL_I2C_Init+0x92>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a77      	ldr	r2, [pc, #476]	; (800706c <HAL_I2C_Init+0x264>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	bf94      	ite	ls
 8006e94:	2301      	movls	r3, #1
 8006e96:	2300      	movhi	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e0db      	b.n	800705a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4a72      	ldr	r2, [pc, #456]	; (8007070 <HAL_I2C_Init+0x268>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	0c9b      	lsrs	r3, r3, #18
 8006eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a64      	ldr	r2, [pc, #400]	; (8007064 <HAL_I2C_Init+0x25c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d802      	bhi.n	8006edc <HAL_I2C_Init+0xd4>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	e009      	b.n	8006ef0 <HAL_I2C_Init+0xe8>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	4a63      	ldr	r2, [pc, #396]	; (8007074 <HAL_I2C_Init+0x26c>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	099b      	lsrs	r3, r3, #6
 8006eee:	3301      	adds	r3, #1
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4956      	ldr	r1, [pc, #344]	; (8007064 <HAL_I2C_Init+0x25c>)
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	d80d      	bhi.n	8006f2c <HAL_I2C_Init+0x124>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	1e59      	subs	r1, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f1e:	3301      	adds	r3, #1
 8006f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	bf38      	it	cc
 8006f28:	2304      	movcc	r3, #4
 8006f2a:	e04f      	b.n	8006fcc <HAL_I2C_Init+0x1c4>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d111      	bne.n	8006f58 <HAL_I2C_Init+0x150>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1e58      	subs	r0, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6859      	ldr	r1, [r3, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	440b      	add	r3, r1
 8006f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f46:	3301      	adds	r3, #1
 8006f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bf0c      	ite	eq
 8006f50:	2301      	moveq	r3, #1
 8006f52:	2300      	movne	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e012      	b.n	8006f7e <HAL_I2C_Init+0x176>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	1e58      	subs	r0, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	0099      	lsls	r1, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f6e:	3301      	adds	r3, #1
 8006f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_I2C_Init+0x17e>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e022      	b.n	8006fcc <HAL_I2C_Init+0x1c4>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10e      	bne.n	8006fac <HAL_I2C_Init+0x1a4>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1e58      	subs	r0, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6859      	ldr	r1, [r3, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	440b      	add	r3, r1
 8006f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	e00f      	b.n	8006fcc <HAL_I2C_Init+0x1c4>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	1e58      	subs	r0, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6859      	ldr	r1, [r3, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	0099      	lsls	r1, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	6809      	ldr	r1, [r1, #0]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6911      	ldr	r1, [r2, #16]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68d2      	ldr	r2, [r2, #12]
 8007006:	4311      	orrs	r1, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	430b      	orrs	r3, r1
 800700e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	000186a0 	.word	0x000186a0
 8007068:	001e847f 	.word	0x001e847f
 800706c:	003d08ff 	.word	0x003d08ff
 8007070:	431bde83 	.word	0x431bde83
 8007074:	10624dd3 	.word	0x10624dd3

08007078 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	461a      	mov	r2, r3
 8007084:	460b      	mov	r3, r1
 8007086:	817b      	strh	r3, [r7, #10]
 8007088:	4613      	mov	r3, r2
 800708a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800708c:	f7fe fbe8 	bl	8005860 <HAL_GetTick>
 8007090:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b20      	cmp	r3, #32
 800709c:	f040 80e0 	bne.w	8007260 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	2319      	movs	r3, #25
 80070a6:	2201      	movs	r2, #1
 80070a8:	4970      	ldr	r1, [pc, #448]	; (800726c <HAL_I2C_Master_Transmit+0x1f4>)
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fc58 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
 80070b8:	e0d3      	b.n	8007262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_I2C_Master_Transmit+0x50>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e0cc      	b.n	8007262 <HAL_I2C_Master_Transmit+0x1ea>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d007      	beq.n	80070ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0201 	orr.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2221      	movs	r2, #33	; 0x21
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2210      	movs	r2, #16
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	893a      	ldrh	r2, [r7, #8]
 800711e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4a50      	ldr	r2, [pc, #320]	; (8007270 <HAL_I2C_Master_Transmit+0x1f8>)
 800712e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007130:	8979      	ldrh	r1, [r7, #10]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6a3a      	ldr	r2, [r7, #32]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fac2 	bl	80076c0 <I2C_MasterRequestWrite>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e08d      	b.n	8007262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800715c:	e066      	b.n	800722c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	6a39      	ldr	r1, [r7, #32]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fcd2 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b04      	cmp	r3, #4
 8007174:	d107      	bne.n	8007186 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e06b      	b.n	8007262 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d11b      	bne.n	8007200 <HAL_I2C_Master_Transmit+0x188>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	781a      	ldrb	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	6a39      	ldr	r1, [r7, #32]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fcc2 	bl	8007b8e <I2C_WaitOnBTFFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00d      	beq.n	800722c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	2b04      	cmp	r3, #4
 8007216:	d107      	bne.n	8007228 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007226:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e01a      	b.n	8007262 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007230:	2b00      	cmp	r3, #0
 8007232:	d194      	bne.n	800715e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007260:	2302      	movs	r3, #2
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	00100002 	.word	0x00100002
 8007270:	ffff0000 	.word	0xffff0000

08007274 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	; 0x30
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	461a      	mov	r2, r3
 8007280:	460b      	mov	r3, r1
 8007282:	817b      	strh	r3, [r7, #10]
 8007284:	4613      	mov	r3, r2
 8007286:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007288:	f7fe faea 	bl	8005860 <HAL_GetTick>
 800728c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b20      	cmp	r3, #32
 8007298:	f040 820b 	bne.w	80076b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2319      	movs	r3, #25
 80072a2:	2201      	movs	r2, #1
 80072a4:	497c      	ldr	r1, [pc, #496]	; (8007498 <HAL_I2C_Master_Receive+0x224>)
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fb5a 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80072b2:	2302      	movs	r3, #2
 80072b4:	e1fe      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_I2C_Master_Receive+0x50>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e1f7      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d007      	beq.n	80072ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2222      	movs	r2, #34	; 0x22
 80072fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2210      	movs	r2, #16
 8007306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	893a      	ldrh	r2, [r7, #8]
 800731a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4a5c      	ldr	r2, [pc, #368]	; (800749c <HAL_I2C_Master_Receive+0x228>)
 800732a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800732c:	8979      	ldrh	r1, [r7, #10]
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fa46 	bl	80077c4 <I2C_MasterRequestRead>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e1b8      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d113      	bne.n	8007372 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800734a:	2300      	movs	r3, #0
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	623b      	str	r3, [r7, #32]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	623b      	str	r3, [r7, #32]
 800735e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	e18c      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007376:	2b01      	cmp	r3, #1
 8007378:	d11b      	bne.n	80073b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e16c      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d11b      	bne.n	80073f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073da:	2300      	movs	r3, #0
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	e14c      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007400:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007418:	e138      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741e:	2b03      	cmp	r3, #3
 8007420:	f200 80f1 	bhi.w	8007606 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007428:	2b01      	cmp	r3, #1
 800742a:	d123      	bne.n	8007474 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fbed 	bl	8007c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e139      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007472:	e10b      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007478:	2b02      	cmp	r3, #2
 800747a:	d14e      	bne.n	800751a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	4906      	ldr	r1, [pc, #24]	; (80074a0 <HAL_I2C_Master_Receive+0x22c>)
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fa6a 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e10e      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
 8007496:	bf00      	nop
 8007498:	00100002 	.word	0x00100002
 800749c:	ffff0000 	.word	0xffff0000
 80074a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007518:	e0b8      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	2200      	movs	r2, #0
 8007522:	4966      	ldr	r1, [pc, #408]	; (80076bc <HAL_I2C_Master_Receive+0x448>)
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fa1b 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e0bf      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2200      	movs	r2, #0
 800757e:	494f      	ldr	r1, [pc, #316]	; (80076bc <HAL_I2C_Master_Receive+0x448>)
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f9ed 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e091      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800759e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007604:	e042      	b.n	800768c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fb00 	bl	8007c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e04c      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b04      	cmp	r3, #4
 8007658:	d118      	bne.n	800768c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f aec2 	bne.w	800741a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	e000      	b.n	80076b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80076b2:	2302      	movs	r3, #2
  }
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3728      	adds	r7, #40	; 0x28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	00010004 	.word	0x00010004

080076c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	460b      	mov	r3, r1
 80076ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d006      	beq.n	80076ea <I2C_MasterRequestWrite+0x2a>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d003      	beq.n	80076ea <I2C_MasterRequestWrite+0x2a>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076e8:	d108      	bne.n	80076fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e00b      	b.n	8007714 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	2b12      	cmp	r3, #18
 8007702:	d107      	bne.n	8007714 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f91d 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00d      	beq.n	8007748 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773a:	d103      	bne.n	8007744 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e035      	b.n	80077b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007750:	d108      	bne.n	8007764 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007752:	897b      	ldrh	r3, [r7, #10]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	461a      	mov	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007760:	611a      	str	r2, [r3, #16]
 8007762:	e01b      	b.n	800779c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007764:	897b      	ldrh	r3, [r7, #10]
 8007766:	11db      	asrs	r3, r3, #7
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 0306 	and.w	r3, r3, #6
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f063 030f 	orn	r3, r3, #15
 8007774:	b2da      	uxtb	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	490e      	ldr	r1, [pc, #56]	; (80077bc <I2C_MasterRequestWrite+0xfc>)
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f943 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e010      	b.n	80077b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007792:	897b      	ldrh	r3, [r7, #10]
 8007794:	b2da      	uxtb	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4907      	ldr	r1, [pc, #28]	; (80077c0 <I2C_MasterRequestWrite+0x100>)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f933 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	00010008 	.word	0x00010008
 80077c0:	00010002 	.word	0x00010002

080077c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	460b      	mov	r3, r1
 80077d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d006      	beq.n	80077fe <I2C_MasterRequestRead+0x3a>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d003      	beq.n	80077fe <I2C_MasterRequestRead+0x3a>
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077fc:	d108      	bne.n	8007810 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e00b      	b.n	8007828 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	2b11      	cmp	r3, #17
 8007816:	d107      	bne.n	8007828 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f893 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00d      	beq.n	800785c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d103      	bne.n	8007858 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e079      	b.n	8007950 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007864:	d108      	bne.n	8007878 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007866:	897b      	ldrh	r3, [r7, #10]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	e05f      	b.n	8007938 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007878:	897b      	ldrh	r3, [r7, #10]
 800787a:	11db      	asrs	r3, r3, #7
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0306 	and.w	r3, r3, #6
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f063 030f 	orn	r3, r3, #15
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4930      	ldr	r1, [pc, #192]	; (8007958 <I2C_MasterRequestRead+0x194>)
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 f8b9 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e054      	b.n	8007950 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078a6:	897b      	ldrh	r3, [r7, #10]
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	4929      	ldr	r1, [pc, #164]	; (800795c <I2C_MasterRequestRead+0x198>)
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f8a9 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e044      	b.n	8007950 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c6:	2300      	movs	r3, #0
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f831 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00d      	beq.n	8007920 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007912:	d103      	bne.n	800791c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e017      	b.n	8007950 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007920:	897b      	ldrh	r3, [r7, #10]
 8007922:	11db      	asrs	r3, r3, #7
 8007924:	b2db      	uxtb	r3, r3
 8007926:	f003 0306 	and.w	r3, r3, #6
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f063 030e 	orn	r3, r3, #14
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4907      	ldr	r1, [pc, #28]	; (800795c <I2C_MasterRequestRead+0x198>)
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f865 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	00010008 	.word	0x00010008
 800795c:	00010002 	.word	0x00010002

08007960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007970:	e025      	b.n	80079be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007978:	d021      	beq.n	80079be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797a:	f7fd ff71 	bl	8005860 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d302      	bcc.n	8007990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d116      	bne.n	80079be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f043 0220 	orr.w	r2, r3, #32
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e023      	b.n	8007a06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	0c1b      	lsrs	r3, r3, #16
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10d      	bne.n	80079e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	43da      	mvns	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4013      	ands	r3, r2
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	e00c      	b.n	80079fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	43da      	mvns	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4013      	ands	r3, r2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf0c      	ite	eq
 80079f6:	2301      	moveq	r3, #1
 80079f8:	2300      	movne	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d0b6      	beq.n	8007972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a1c:	e051      	b.n	8007ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2c:	d123      	bne.n	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f043 0204 	orr.w	r2, r3, #4
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e046      	b.n	8007b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d021      	beq.n	8007ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7e:	f7fd feef 	bl	8005860 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d116      	bne.n	8007ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f043 0220 	orr.w	r2, r3, #32
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e020      	b.n	8007b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d10c      	bne.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	43da      	mvns	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	e00b      	b.n	8007afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	43da      	mvns	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4013      	ands	r3, r2
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d18d      	bne.n	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b18:	e02d      	b.n	8007b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f8ce 	bl	8007cbc <I2C_IsAcknowledgeFailed>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e02d      	b.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d021      	beq.n	8007b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fd fe95 	bl	8005860 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d116      	bne.n	8007b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e007      	b.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b80:	2b80      	cmp	r3, #128	; 0x80
 8007b82:	d1ca      	bne.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b9a:	e02d      	b.n	8007bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f88d 	bl	8007cbc <I2C_IsAcknowledgeFailed>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e02d      	b.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb2:	d021      	beq.n	8007bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb4:	f7fd fe54 	bl	8005860 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d116      	bne.n	8007bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	f043 0220 	orr.w	r2, r3, #32
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e007      	b.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d1ca      	bne.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c1c:	e042      	b.n	8007ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d119      	bne.n	8007c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0210 	mvn.w	r2, #16
 8007c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e029      	b.n	8007cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c60:	f7fd fdfe 	bl	8005860 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d302      	bcc.n	8007c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d116      	bne.n	8007ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e007      	b.n	8007cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d1b5      	bne.n	8007c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d11b      	bne.n	8007d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	f043 0204 	orr.w	r2, r3, #4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007d26:	2300      	movs	r3, #0
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	4b20      	ldr	r3, [pc, #128]	; (8007dac <HAL_PWREx_EnableOverDrive+0x90>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	4a1f      	ldr	r2, [pc, #124]	; (8007dac <HAL_PWREx_EnableOverDrive+0x90>)
 8007d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d34:	6413      	str	r3, [r2, #64]	; 0x40
 8007d36:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <HAL_PWREx_EnableOverDrive+0x90>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d42:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d48:	f7fd fd8a 	bl	8005860 <HAL_GetTick>
 8007d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d4e:	e009      	b.n	8007d64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d50:	f7fd fd86 	bl	8005860 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d5e:	d901      	bls.n	8007d64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e01f      	b.n	8007da4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d64:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d70:	d1ee      	bne.n	8007d50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007d72:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d78:	f7fd fd72 	bl	8005860 <HAL_GetTick>
 8007d7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d7e:	e009      	b.n	8007d94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d80:	f7fd fd6e 	bl	8005860 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d8e:	d901      	bls.n	8007d94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e007      	b.n	8007da4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d94:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da0:	d1ee      	bne.n	8007d80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40023800 	.word	0x40023800
 8007db0:	420e0040 	.word	0x420e0040
 8007db4:	40007000 	.word	0x40007000
 8007db8:	420e0044 	.word	0x420e0044

08007dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0cc      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dd0:	4b68      	ldr	r3, [pc, #416]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d90c      	bls.n	8007df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dde:	4b65      	ldr	r3, [pc, #404]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de6:	4b63      	ldr	r3, [pc, #396]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d001      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0b8      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e10:	4b59      	ldr	r3, [pc, #356]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4a58      	ldr	r2, [pc, #352]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e28:	4b53      	ldr	r3, [pc, #332]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4a52      	ldr	r2, [pc, #328]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e34:	4b50      	ldr	r3, [pc, #320]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	494d      	ldr	r1, [pc, #308]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d044      	beq.n	8007edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d107      	bne.n	8007e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e5a:	4b47      	ldr	r3, [pc, #284]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d119      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e07f      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d003      	beq.n	8007e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d107      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e7a:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e06f      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e8a:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e067      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e9a:	4b37      	ldr	r3, [pc, #220]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f023 0203 	bic.w	r2, r3, #3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4934      	ldr	r1, [pc, #208]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007eac:	f7fd fcd8 	bl	8005860 <HAL_GetTick>
 8007eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eb2:	e00a      	b.n	8007eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb4:	f7fd fcd4 	bl	8005860 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e04f      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eca:	4b2b      	ldr	r3, [pc, #172]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 020c 	and.w	r2, r3, #12
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d1eb      	bne.n	8007eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d20c      	bcs.n	8007f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eea:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ef2:	4b20      	ldr	r3, [pc, #128]	; (8007f74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d001      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e032      	b.n	8007f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f10:	4b19      	ldr	r3, [pc, #100]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	4916      	ldr	r1, [pc, #88]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	490e      	ldr	r1, [pc, #56]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f42:	f000 f821 	bl	8007f88 <HAL_RCC_GetSysClockFreq>
 8007f46:	4601      	mov	r1, r0
 8007f48:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	091b      	lsrs	r3, r3, #4
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <HAL_RCC_ClockConfig+0x1c0>)
 8007f54:	5cd3      	ldrb	r3, [r2, r3]
 8007f56:	fa21 f303 	lsr.w	r3, r1, r3
 8007f5a:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <HAL_RCC_ClockConfig+0x1c8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd fc38 	bl	80057d8 <HAL_InitTick>

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	40023c00 	.word	0x40023c00
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	08016ec0 	.word	0x08016ec0
 8007f80:	20000000 	.word	0x20000000
 8007f84:	20000004 	.word	0x20000004

08007f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	607b      	str	r3, [r7, #4]
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	2300      	movs	r3, #0
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f9e:	4b63      	ldr	r3, [pc, #396]	; (800812c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 030c 	and.w	r3, r3, #12
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d007      	beq.n	8007fba <HAL_RCC_GetSysClockFreq+0x32>
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d008      	beq.n	8007fc0 <HAL_RCC_GetSysClockFreq+0x38>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 80b4 	bne.w	800811c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fb4:	4b5e      	ldr	r3, [pc, #376]	; (8008130 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007fb6:	60bb      	str	r3, [r7, #8]
       break;
 8007fb8:	e0b3      	b.n	8008122 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fba:	4b5d      	ldr	r3, [pc, #372]	; (8008130 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007fbc:	60bb      	str	r3, [r7, #8]
      break;
 8007fbe:	e0b0      	b.n	8008122 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fc0:	4b5a      	ldr	r3, [pc, #360]	; (800812c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fca:	4b58      	ldr	r3, [pc, #352]	; (800812c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d04a      	beq.n	800806c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fd6:	4b55      	ldr	r3, [pc, #340]	; (800812c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	099b      	lsrs	r3, r3, #6
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	ea03 0501 	and.w	r5, r3, r1
 8007fec:	ea04 0602 	and.w	r6, r4, r2
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	f04f 0400 	mov.w	r4, #0
 8007ffc:	0154      	lsls	r4, r2, #5
 8007ffe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008002:	014b      	lsls	r3, r1, #5
 8008004:	4619      	mov	r1, r3
 8008006:	4622      	mov	r2, r4
 8008008:	1b49      	subs	r1, r1, r5
 800800a:	eb62 0206 	sbc.w	r2, r2, r6
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	f04f 0400 	mov.w	r4, #0
 8008016:	0194      	lsls	r4, r2, #6
 8008018:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800801c:	018b      	lsls	r3, r1, #6
 800801e:	1a5b      	subs	r3, r3, r1
 8008020:	eb64 0402 	sbc.w	r4, r4, r2
 8008024:	f04f 0100 	mov.w	r1, #0
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	00e2      	lsls	r2, r4, #3
 800802e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008032:	00d9      	lsls	r1, r3, #3
 8008034:	460b      	mov	r3, r1
 8008036:	4614      	mov	r4, r2
 8008038:	195b      	adds	r3, r3, r5
 800803a:	eb44 0406 	adc.w	r4, r4, r6
 800803e:	f04f 0100 	mov.w	r1, #0
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	02a2      	lsls	r2, r4, #10
 8008048:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800804c:	0299      	lsls	r1, r3, #10
 800804e:	460b      	mov	r3, r1
 8008050:	4614      	mov	r4, r2
 8008052:	4618      	mov	r0, r3
 8008054:	4621      	mov	r1, r4
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f04f 0400 	mov.w	r4, #0
 800805c:	461a      	mov	r2, r3
 800805e:	4623      	mov	r3, r4
 8008060:	f7f8 fe2a 	bl	8000cb8 <__aeabi_uldivmod>
 8008064:	4603      	mov	r3, r0
 8008066:	460c      	mov	r4, r1
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e049      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800806c:	4b2f      	ldr	r3, [pc, #188]	; (800812c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	099b      	lsrs	r3, r3, #6
 8008072:	f04f 0400 	mov.w	r4, #0
 8008076:	f240 11ff 	movw	r1, #511	; 0x1ff
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	ea03 0501 	and.w	r5, r3, r1
 8008082:	ea04 0602 	and.w	r6, r4, r2
 8008086:	4629      	mov	r1, r5
 8008088:	4632      	mov	r2, r6
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	f04f 0400 	mov.w	r4, #0
 8008092:	0154      	lsls	r4, r2, #5
 8008094:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008098:	014b      	lsls	r3, r1, #5
 800809a:	4619      	mov	r1, r3
 800809c:	4622      	mov	r2, r4
 800809e:	1b49      	subs	r1, r1, r5
 80080a0:	eb62 0206 	sbc.w	r2, r2, r6
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	f04f 0400 	mov.w	r4, #0
 80080ac:	0194      	lsls	r4, r2, #6
 80080ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80080b2:	018b      	lsls	r3, r1, #6
 80080b4:	1a5b      	subs	r3, r3, r1
 80080b6:	eb64 0402 	sbc.w	r4, r4, r2
 80080ba:	f04f 0100 	mov.w	r1, #0
 80080be:	f04f 0200 	mov.w	r2, #0
 80080c2:	00e2      	lsls	r2, r4, #3
 80080c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80080c8:	00d9      	lsls	r1, r3, #3
 80080ca:	460b      	mov	r3, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	195b      	adds	r3, r3, r5
 80080d0:	eb44 0406 	adc.w	r4, r4, r6
 80080d4:	f04f 0100 	mov.w	r1, #0
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	02a2      	lsls	r2, r4, #10
 80080de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80080e2:	0299      	lsls	r1, r3, #10
 80080e4:	460b      	mov	r3, r1
 80080e6:	4614      	mov	r4, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	4621      	mov	r1, r4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f04f 0400 	mov.w	r4, #0
 80080f2:	461a      	mov	r2, r3
 80080f4:	4623      	mov	r3, r4
 80080f6:	f7f8 fddf 	bl	8000cb8 <__aeabi_uldivmod>
 80080fa:	4603      	mov	r3, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	0c1b      	lsrs	r3, r3, #16
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	3301      	adds	r3, #1
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	60bb      	str	r3, [r7, #8]
      break;
 800811a:	e002      	b.n	8008122 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800811e:	60bb      	str	r3, [r7, #8]
      break;
 8008120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008122:	68bb      	ldr	r3, [r7, #8]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800812c:	40023800 	.word	0x40023800
 8008130:	00f42400 	.word	0x00f42400

08008134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008138:	4b03      	ldr	r3, [pc, #12]	; (8008148 <HAL_RCC_GetHCLKFreq+0x14>)
 800813a:	681b      	ldr	r3, [r3, #0]
}
 800813c:	4618      	mov	r0, r3
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20000000 	.word	0x20000000

0800814c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008150:	f7ff fff0 	bl	8008134 <HAL_RCC_GetHCLKFreq>
 8008154:	4601      	mov	r1, r0
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	0a9b      	lsrs	r3, r3, #10
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	4a03      	ldr	r2, [pc, #12]	; (8008170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008162:	5cd3      	ldrb	r3, [r2, r3]
 8008164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008168:	4618      	mov	r0, r3
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40023800 	.word	0x40023800
 8008170:	08016ed0 	.word	0x08016ed0

08008174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008178:	f7ff ffdc 	bl	8008134 <HAL_RCC_GetHCLKFreq>
 800817c:	4601      	mov	r1, r0
 800817e:	4b05      	ldr	r3, [pc, #20]	; (8008194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	0b5b      	lsrs	r3, r3, #13
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	4a03      	ldr	r2, [pc, #12]	; (8008198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800818a:	5cd3      	ldrb	r3, [r2, r3]
 800818c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008190:	4618      	mov	r0, r3
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40023800 	.word	0x40023800
 8008198:	08016ed0 	.word	0x08016ed0

0800819c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80081c4:	4b66      	ldr	r3, [pc, #408]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80081c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d2:	4963      	ldr	r1, [pc, #396]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80081e6:	4b5e      	ldr	r3, [pc, #376]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80081e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	495a      	ldr	r1, [pc, #360]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10b      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800821c:	2b00      	cmp	r3, #0
 800821e:	d075      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008220:	4b50      	ldr	r3, [pc, #320]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008226:	f7fd fb1b 	bl	8005860 <HAL_GetTick>
 800822a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800822e:	f7fd fb17 	bl	8005860 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e1dc      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008240:	4b47      	ldr	r3, [pc, #284]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f0      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d009      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	019a      	lsls	r2, r3, #6
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	071b      	lsls	r3, r3, #28
 8008264:	493e      	ldr	r1, [pc, #248]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008266:	4313      	orrs	r3, r2
 8008268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01f      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008278:	4b39      	ldr	r3, [pc, #228]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800827a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827e:	0f1b      	lsrs	r3, r3, #28
 8008280:	f003 0307 	and.w	r3, r3, #7
 8008284:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	019a      	lsls	r2, r3, #6
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	061b      	lsls	r3, r3, #24
 8008292:	431a      	orrs	r2, r3
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	071b      	lsls	r3, r3, #28
 8008298:	4931      	ldr	r1, [pc, #196]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80082a0:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a6:	f023 021f 	bic.w	r2, r3, #31
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	492b      	ldr	r1, [pc, #172]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00d      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	019a      	lsls	r2, r3, #6
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	061b      	lsls	r3, r3, #24
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	071b      	lsls	r3, r3, #28
 80082d8:	4921      	ldr	r1, [pc, #132]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082e0:	4b20      	ldr	r3, [pc, #128]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082e6:	f7fd fabb 	bl	8005860 <HAL_GetTick>
 80082ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082ec:	e008      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082ee:	f7fd fab7 	bl	8005860 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e17c      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008300:	4b17      	ldr	r3, [pc, #92]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0f0      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d112      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10c      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80ce 	beq.w	80084ce <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800833a:	f040 80c8 	bne.w	80084ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008344:	f7fd fa8c 	bl	8005860 <HAL_GetTick>
 8008348:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800834a:	e00f      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800834c:	f7fd fa88 	bl	8005860 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d908      	bls.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e14d      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800835e:	bf00      	nop
 8008360:	40023800 	.word	0x40023800
 8008364:	42470068 	.word	0x42470068
 8008368:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800836c:	4ba5      	ldr	r3, [pc, #660]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008378:	d0e8      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02e      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008386:	4b9f      	ldr	r3, [pc, #636]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838c:	0c1b      	lsrs	r3, r3, #16
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	3301      	adds	r3, #1
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008398:	4b9a      	ldr	r3, [pc, #616]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	0f1b      	lsrs	r3, r3, #28
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	019a      	lsls	r2, r3, #6
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	085b      	lsrs	r3, r3, #1
 80083b0:	3b01      	subs	r3, #1
 80083b2:	041b      	lsls	r3, r3, #16
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	061b      	lsls	r3, r3, #24
 80083bc:	431a      	orrs	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	071b      	lsls	r3, r3, #28
 80083c2:	4990      	ldr	r1, [pc, #576]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80083ca:	4b8e      	ldr	r3, [pc, #568]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	3b01      	subs	r3, #1
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	4989      	ldr	r1, [pc, #548]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d02c      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80083f0:	4b84      	ldr	r3, [pc, #528]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f6:	0c1b      	lsrs	r3, r3, #16
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	3301      	adds	r3, #1
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008402:	4b80      	ldr	r3, [pc, #512]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	019a      	lsls	r2, r3, #6
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	3b01      	subs	r3, #1
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	431a      	orrs	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	061b      	lsls	r3, r3, #24
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	071b      	lsls	r3, r3, #28
 800842c:	4975      	ldr	r1, [pc, #468]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008434:	4b73      	ldr	r3, [pc, #460]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800843a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	4970      	ldr	r1, [pc, #448]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008444:	4313      	orrs	r3, r2
 8008446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d024      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800845a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800845e:	d11f      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008460:	4b68      	ldr	r3, [pc, #416]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	0e1b      	lsrs	r3, r3, #24
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800846e:	4b65      	ldr	r3, [pc, #404]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008474:	0f1b      	lsrs	r3, r3, #28
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	019a      	lsls	r2, r3, #6
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	3b01      	subs	r3, #1
 800848a:	041b      	lsls	r3, r3, #16
 800848c:	431a      	orrs	r2, r3
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	061b      	lsls	r3, r3, #24
 8008492:	431a      	orrs	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	071b      	lsls	r3, r3, #28
 8008498:	495a      	ldr	r1, [pc, #360]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084a0:	4b59      	ldr	r3, [pc, #356]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084a6:	f7fd f9db 	bl	8005860 <HAL_GetTick>
 80084aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084ac:	e008      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80084ae:	f7fd f9d7 	bl	8005860 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e09c      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084c0:	4b50      	ldr	r3, [pc, #320]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084cc:	d1ef      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8083 	beq.w	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084dc:	2300      	movs	r3, #0
 80084de:	60bb      	str	r3, [r7, #8]
 80084e0:	4b48      	ldr	r3, [pc, #288]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	4a47      	ldr	r2, [pc, #284]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ea:	6413      	str	r3, [r2, #64]	; 0x40
 80084ec:	4b45      	ldr	r3, [pc, #276]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80084f8:	4b44      	ldr	r3, [pc, #272]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a43      	ldr	r2, [pc, #268]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80084fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008502:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008504:	f7fd f9ac 	bl	8005860 <HAL_GetTick>
 8008508:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800850a:	e008      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800850c:	f7fd f9a8 	bl	8005860 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e06d      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800851e:	4b3b      	ldr	r3, [pc, #236]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f0      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800852a:	4b36      	ldr	r3, [pc, #216]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800852c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008532:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d02f      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	429a      	cmp	r2, r3
 8008546:	d028      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008548:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008550:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008552:	4b2f      	ldr	r3, [pc, #188]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008554:	2201      	movs	r2, #1
 8008556:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008558:	4b2d      	ldr	r3, [pc, #180]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800855e:	4a29      	ldr	r2, [pc, #164]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b01      	cmp	r3, #1
 800856e:	d114      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008570:	f7fd f976 	bl	8005860 <HAL_GetTick>
 8008574:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008576:	e00a      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008578:	f7fd f972 	bl	8005860 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	f241 3288 	movw	r2, #5000	; 0x1388
 8008586:	4293      	cmp	r3, r2
 8008588:	d901      	bls.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e035      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0ee      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a6:	d10d      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80085a8:	4b16      	ldr	r3, [pc, #88]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085bc:	4911      	ldr	r1, [pc, #68]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
 80085c2:	e005      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80085c4:	4b0f      	ldr	r3, [pc, #60]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	4a0e      	ldr	r2, [pc, #56]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085ce:	6093      	str	r3, [r2, #8]
 80085d0:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085dc:	4909      	ldr	r1, [pc, #36]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80085f6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40023800 	.word	0x40023800
 8008608:	42470070 	.word	0x42470070
 800860c:	40007000 	.word	0x40007000
 8008610:	42470e40 	.word	0x42470e40
 8008614:	424711e0 	.word	0x424711e0

08008618 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d075      	beq.n	800871c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008630:	4ba2      	ldr	r3, [pc, #648]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 030c 	and.w	r3, r3, #12
 8008638:	2b04      	cmp	r3, #4
 800863a:	d00c      	beq.n	8008656 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800863c:	4b9f      	ldr	r3, [pc, #636]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008644:	2b08      	cmp	r3, #8
 8008646:	d112      	bne.n	800866e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008648:	4b9c      	ldr	r3, [pc, #624]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008654:	d10b      	bne.n	800866e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008656:	4b99      	ldr	r3, [pc, #612]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d05b      	beq.n	800871a <HAL_RCC_OscConfig+0x102>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d157      	bne.n	800871a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e20b      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008676:	d106      	bne.n	8008686 <HAL_RCC_OscConfig+0x6e>
 8008678:	4b90      	ldr	r3, [pc, #576]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a8f      	ldr	r2, [pc, #572]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800867e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	e01d      	b.n	80086c2 <HAL_RCC_OscConfig+0xaa>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800868e:	d10c      	bne.n	80086aa <HAL_RCC_OscConfig+0x92>
 8008690:	4b8a      	ldr	r3, [pc, #552]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a89      	ldr	r2, [pc, #548]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b87      	ldr	r3, [pc, #540]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a86      	ldr	r2, [pc, #536]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80086a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e00b      	b.n	80086c2 <HAL_RCC_OscConfig+0xaa>
 80086aa:	4b84      	ldr	r3, [pc, #528]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a83      	ldr	r2, [pc, #524]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80086b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	4b81      	ldr	r3, [pc, #516]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a80      	ldr	r2, [pc, #512]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80086bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d013      	beq.n	80086f2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ca:	f7fd f8c9 	bl	8005860 <HAL_GetTick>
 80086ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086d2:	f7fd f8c5 	bl	8005860 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b64      	cmp	r3, #100	; 0x64
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e1d0      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e4:	4b75      	ldr	r3, [pc, #468]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCC_OscConfig+0xba>
 80086f0:	e014      	b.n	800871c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fd f8b5 	bl	8005860 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f8:	e008      	b.n	800870c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086fa:	f7fd f8b1 	bl	8005860 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b64      	cmp	r3, #100	; 0x64
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e1bc      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800870c:	4b6b      	ldr	r3, [pc, #428]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f0      	bne.n	80086fa <HAL_RCC_OscConfig+0xe2>
 8008718:	e000      	b.n	800871c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800871a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d063      	beq.n	80087f0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008728:	4b64      	ldr	r3, [pc, #400]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f003 030c 	and.w	r3, r3, #12
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008734:	4b61      	ldr	r3, [pc, #388]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800873c:	2b08      	cmp	r3, #8
 800873e:	d11c      	bne.n	800877a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008740:	4b5e      	ldr	r3, [pc, #376]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d116      	bne.n	800877a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800874c:	4b5b      	ldr	r3, [pc, #364]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_RCC_OscConfig+0x14c>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d001      	beq.n	8008764 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e190      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008764:	4b55      	ldr	r3, [pc, #340]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	4952      	ldr	r1, [pc, #328]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008774:	4313      	orrs	r3, r2
 8008776:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008778:	e03a      	b.n	80087f0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d020      	beq.n	80087c4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008782:	4b4f      	ldr	r3, [pc, #316]	; (80088c0 <HAL_RCC_OscConfig+0x2a8>)
 8008784:	2201      	movs	r2, #1
 8008786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008788:	f7fd f86a 	bl	8005860 <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008790:	f7fd f866 	bl	8005860 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e171      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a2:	4b46      	ldr	r3, [pc, #280]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f0      	beq.n	8008790 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ae:	4b43      	ldr	r3, [pc, #268]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	493f      	ldr	r1, [pc, #252]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]
 80087c2:	e015      	b.n	80087f0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087c4:	4b3e      	ldr	r3, [pc, #248]	; (80088c0 <HAL_RCC_OscConfig+0x2a8>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ca:	f7fd f849 	bl	8005860 <HAL_GetTick>
 80087ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087d0:	e008      	b.n	80087e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087d2:	f7fd f845 	bl	8005860 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e150      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087e4:	4b35      	ldr	r3, [pc, #212]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f0      	bne.n	80087d2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d030      	beq.n	800885e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d016      	beq.n	8008832 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008804:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008806:	2201      	movs	r2, #1
 8008808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880a:	f7fd f829 	bl	8005860 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008812:	f7fd f825 	bl	8005860 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e130      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <HAL_RCC_OscConfig+0x1fa>
 8008830:	e015      	b.n	800885e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008832:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <HAL_RCC_OscConfig+0x2ac>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008838:	f7fd f812 	bl	8005860 <HAL_GetTick>
 800883c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008840:	f7fd f80e 	bl	8005860 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b02      	cmp	r3, #2
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e119      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008852:	4b1a      	ldr	r3, [pc, #104]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1f0      	bne.n	8008840 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 809f 	beq.w	80089aa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008870:	4b12      	ldr	r3, [pc, #72]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10f      	bne.n	800889c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	4a0d      	ldr	r2, [pc, #52]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 8008886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800888a:	6413      	str	r3, [r2, #64]	; 0x40
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <HAL_RCC_OscConfig+0x2a4>)
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008898:	2301      	movs	r3, #1
 800889a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <HAL_RCC_OscConfig+0x2b0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d120      	bne.n	80088ea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <HAL_RCC_OscConfig+0x2b0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a06      	ldr	r2, [pc, #24]	; (80088c8 <HAL_RCC_OscConfig+0x2b0>)
 80088ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088b4:	f7fc ffd4 	bl	8005860 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ba:	e010      	b.n	80088de <HAL_RCC_OscConfig+0x2c6>
 80088bc:	40023800 	.word	0x40023800
 80088c0:	42470000 	.word	0x42470000
 80088c4:	42470e80 	.word	0x42470e80
 80088c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088cc:	f7fc ffc8 	bl	8005860 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e0d3      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088de:	4b6c      	ldr	r3, [pc, #432]	; (8008a90 <HAL_RCC_OscConfig+0x478>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f0      	beq.n	80088cc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d106      	bne.n	8008900 <HAL_RCC_OscConfig+0x2e8>
 80088f2:	4b68      	ldr	r3, [pc, #416]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 80088f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f6:	4a67      	ldr	r2, [pc, #412]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	6713      	str	r3, [r2, #112]	; 0x70
 80088fe:	e01c      	b.n	800893a <HAL_RCC_OscConfig+0x322>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b05      	cmp	r3, #5
 8008906:	d10c      	bne.n	8008922 <HAL_RCC_OscConfig+0x30a>
 8008908:	4b62      	ldr	r3, [pc, #392]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	4a61      	ldr	r2, [pc, #388]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 800890e:	f043 0304 	orr.w	r3, r3, #4
 8008912:	6713      	str	r3, [r2, #112]	; 0x70
 8008914:	4b5f      	ldr	r3, [pc, #380]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008918:	4a5e      	ldr	r2, [pc, #376]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	6713      	str	r3, [r2, #112]	; 0x70
 8008920:	e00b      	b.n	800893a <HAL_RCC_OscConfig+0x322>
 8008922:	4b5c      	ldr	r3, [pc, #368]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	4a5b      	ldr	r2, [pc, #364]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	6713      	str	r3, [r2, #112]	; 0x70
 800892e:	4b59      	ldr	r3, [pc, #356]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	4a58      	ldr	r2, [pc, #352]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008934:	f023 0304 	bic.w	r3, r3, #4
 8008938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d015      	beq.n	800896e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008942:	f7fc ff8d 	bl	8005860 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008948:	e00a      	b.n	8008960 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800894a:	f7fc ff89 	bl	8005860 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	f241 3288 	movw	r2, #5000	; 0x1388
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e092      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008960:	4b4c      	ldr	r3, [pc, #304]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0ee      	beq.n	800894a <HAL_RCC_OscConfig+0x332>
 800896c:	e014      	b.n	8008998 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896e:	f7fc ff77 	bl	8005860 <HAL_GetTick>
 8008972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008974:	e00a      	b.n	800898c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008976:	f7fc ff73 	bl	8005860 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	f241 3288 	movw	r2, #5000	; 0x1388
 8008984:	4293      	cmp	r3, r2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e07c      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800898c:	4b41      	ldr	r3, [pc, #260]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 800898e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1ee      	bne.n	8008976 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d105      	bne.n	80089aa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800899e:	4b3d      	ldr	r3, [pc, #244]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	4a3c      	ldr	r2, [pc, #240]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 80089a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d068      	beq.n	8008a84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089b2:	4b38      	ldr	r3, [pc, #224]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 030c 	and.w	r3, r3, #12
 80089ba:	2b08      	cmp	r3, #8
 80089bc:	d060      	beq.n	8008a80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d145      	bne.n	8008a52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c6:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <HAL_RCC_OscConfig+0x480>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089cc:	f7fc ff48 	bl	8005860 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d4:	f7fc ff44 	bl	8005860 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e04f      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e6:	4b2b      	ldr	r3, [pc, #172]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f0      	bne.n	80089d4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69da      	ldr	r2, [r3, #28]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	019b      	lsls	r3, r3, #6
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	085b      	lsrs	r3, r3, #1
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	061b      	lsls	r3, r3, #24
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1c:	071b      	lsls	r3, r3, #28
 8008a1e:	491d      	ldr	r1, [pc, #116]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a24:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <HAL_RCC_OscConfig+0x480>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2a:	f7fc ff19 	bl	8005860 <HAL_GetTick>
 8008a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a30:	e008      	b.n	8008a44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a32:	f7fc ff15 	bl	8005860 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e020      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a44:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0f0      	beq.n	8008a32 <HAL_RCC_OscConfig+0x41a>
 8008a50:	e018      	b.n	8008a84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a52:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <HAL_RCC_OscConfig+0x480>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a58:	f7fc ff02 	bl	8005860 <HAL_GetTick>
 8008a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a60:	f7fc fefe 	bl	8005860 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e009      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a72:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <HAL_RCC_OscConfig+0x47c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f0      	bne.n	8008a60 <HAL_RCC_OscConfig+0x448>
 8008a7e:	e001      	b.n	8008a84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	40007000 	.word	0x40007000
 8008a94:	40023800 	.word	0x40023800
 8008a98:	42470060 	.word	0x42470060

08008a9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e022      	b.n	8008af4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7fb fe13 	bl	80046ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2203      	movs	r2, #3
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f814 	bl	8008afc <HAL_SD_InitCard>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e00a      	b.n	8008af4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008afc:	b5b0      	push	{r4, r5, r7, lr}
 8008afe:	b08e      	sub	sp, #56	; 0x38
 8008b00:	af04      	add	r7, sp, #16
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008b04:	2300      	movs	r3, #0
 8008b06:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008b18:	2376      	movs	r3, #118	; 0x76
 8008b1a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681d      	ldr	r5, [r3, #0]
 8008b20:	466c      	mov	r4, sp
 8008b22:	f107 0314 	add.w	r3, r7, #20
 8008b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b2e:	f107 0308 	add.w	r3, r7, #8
 8008b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b34:	4628      	mov	r0, r5
 8008b36:	f003 fa87 	bl	800c048 <SDIO_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e031      	b.n	8008bb0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008b4c:	4b1a      	ldr	r3, [pc, #104]	; (8008bb8 <HAL_SD_InitCard+0xbc>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f003 fabf 	bl	800c0da <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008b5c:	4b16      	ldr	r3, [pc, #88]	; (8008bb8 <HAL_SD_InitCard+0xbc>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 ffc6 	bl	8009af4 <SD_PowerON>
 8008b68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e013      	b.n	8008bb0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fee5 	bl	8009958 <SD_InitCard>
 8008b8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3728      	adds	r7, #40	; 0x28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb8:	422580a0 	.word	0x422580a0

08008bbc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	; 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d107      	bne.n	8008be4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0c7      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	f040 80c0 	bne.w	8008d72 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	441a      	add	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d907      	bls.n	8008c16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e0ae      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008c34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3a:	4a50      	ldr	r2, [pc, #320]	; (8008d7c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	4a4f      	ldr	r2, [pc, #316]	; (8008d80 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8008c44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3380      	adds	r3, #128	; 0x80
 8008c58:	4619      	mov	r1, r3
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	025b      	lsls	r3, r3, #9
 8008c60:	089b      	lsrs	r3, r3, #2
 8008c62:	f7fd fbef 	bl	8006444 <HAL_DMA_Start_IT>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d017      	beq.n	8008c9c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008c7a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a40      	ldr	r2, [pc, #256]	; (8008d84 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e06b      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	; (8008d88 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d002      	beq.n	8008cb0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	025b      	lsls	r3, r3, #9
 8008cae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f003 faa1 	bl	800c200 <SDMMC_CmdBlockLength>
 8008cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00f      	beq.n	8008ce6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2e      	ldr	r2, [pc, #184]	; (8008d84 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e046      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	025b      	lsls	r3, r3, #9
 8008cf0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cf2:	2390      	movs	r3, #144	; 0x90
 8008cf4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f107 0210 	add.w	r2, r7, #16
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f003 fa4b 	bl	800c1a8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d90a      	bls.n	8008d2e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2282      	movs	r2, #130	; 0x82
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d24:	4618      	mov	r0, r3
 8008d26:	f003 faaf 	bl	800c288 <SDMMC_CmdReadMultiBlock>
 8008d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008d2c:	e009      	b.n	8008d42 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2281      	movs	r2, #129	; 0x81
 8008d32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f003 fa82 	bl	800c244 <SDMMC_CmdReadSingleBlock>
 8008d40:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d012      	beq.n	8008d6e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a0d      	ldr	r2, [pc, #52]	; (8008d84 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	431a      	orrs	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e002      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e000      	b.n	8008d74 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d72:	2302      	movs	r3, #2
  }
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3730      	adds	r7, #48	; 0x30
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	08009767 	.word	0x08009767
 8008d80:	080097d9 	.word	0x080097d9
 8008d84:	004005ff 	.word	0x004005ff
 8008d88:	4225858c 	.word	0x4225858c

08008d8c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08c      	sub	sp, #48	; 0x30
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d107      	bne.n	8008db4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e0ca      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	f040 80c3 	bne.w	8008f48 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d907      	bls.n	8008de6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0b1      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2203      	movs	r2, #3
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 021a 	orr.w	r2, r2, #26
 8008e04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	4a52      	ldr	r2, [pc, #328]	; (8008f54 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	4a51      	ldr	r2, [pc, #324]	; (8008f58 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8008e14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d002      	beq.n	8008e2c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	025b      	lsls	r3, r3, #9
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e34:	4618      	mov	r0, r3
 8008e36:	f003 f9e3 	bl	800c200 <SDMMC_CmdBlockLength>
 8008e3a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00f      	beq.n	8008e62 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a45      	ldr	r2, [pc, #276]	; (8008f5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	431a      	orrs	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e073      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d90a      	bls.n	8008e7e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	22a0      	movs	r2, #160	; 0xa0
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e74:	4618      	mov	r0, r3
 8008e76:	f003 fa4b 	bl	800c310 <SDMMC_CmdWriteMultiBlock>
 8008e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008e7c:	e009      	b.n	8008e92 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2290      	movs	r2, #144	; 0x90
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f003 fa1e 	bl	800c2cc <SDMMC_CmdWriteSingleBlock>
 8008e90:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d012      	beq.n	8008ebe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a2f      	ldr	r2, [pc, #188]	; (8008f5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e045      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ebe:	4b28      	ldr	r3, [pc, #160]	; (8008f60 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3380      	adds	r3, #128	; 0x80
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	025b      	lsls	r3, r3, #9
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	f7fd fab4 	bl	8006444 <HAL_DMA_Start_IT>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01a      	beq.n	8008f18 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 021a 	bic.w	r2, r2, #26
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a19      	ldr	r2, [pc, #100]	; (8008f5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e018      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	025b      	lsls	r3, r3, #9
 8008f22:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008f24:	2390      	movs	r3, #144	; 0x90
 8008f26:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f107 0210 	add.w	r2, r7, #16
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f003 f932 	bl	800c1a8 <SDIO_ConfigData>

      return HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e000      	b.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f48:	2302      	movs	r3, #2
  }
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3730      	adds	r7, #48	; 0x30
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	0800973d 	.word	0x0800973d
 8008f58:	080097d9 	.word	0x080097d9
 8008f5c:	004005ff 	.word	0x004005ff
 8008f60:	4225858c 	.word	0x4225858c

08008f64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d008      	beq.n	8008f92 <HAL_SD_IRQHandler+0x2e>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ffc8 	bl	8009f20 <SD_Read_IT>
 8008f90:	e155      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 808f 	beq.w	80090c0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6812      	ldr	r2, [r2, #0]
 8008fb6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008fba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008fbe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d039      	beq.n	800904e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <HAL_SD_IRQHandler+0x8a>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d011      	beq.n	8009012 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f003 f9ae 	bl	800c354 <SDMMC_CmdStopTransfer>
 8008ff8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f91f 	bl	8009250 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f240 523a 	movw	r2, #1338	; 0x53a
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <HAL_SD_IRQHandler+0xda>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f003 fe0c 	bl	800cc5c <HAL_SD_RxCpltCallback>
 8009044:	e0fb      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f003 fdfe 	bl	800cc48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800904c:	e0f7      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80f2 	beq.w	800923e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b00      	cmp	r3, #0
 8009062:	d011      	beq.n	8009088 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f003 f973 	bl	800c354 <SDMMC_CmdStopTransfer>
 800906e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f8e4 	bl	8009250 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 80d5 	bne.w	800923e <HAL_SD_IRQHandler+0x2da>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	f040 80cf 	bne.w	800923e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0208 	bic.w	r2, r2, #8
 80090ae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f003 fdc5 	bl	800cc48 <HAL_SD_TxCpltCallback>
}
 80090be:	e0be      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d008      	beq.n	80090e0 <HAL_SD_IRQHandler+0x17c>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 ff72 	bl	8009fc2 <SD_Write_IT>
 80090de:	e0ae      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80a7 	beq.w	800923e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	f043 0202 	orr.w	r2, r3, #2
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009110:	f003 0308 	and.w	r3, r3, #8
 8009114:	2b00      	cmp	r3, #0
 8009116:	d005      	beq.n	8009124 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	f043 0208 	orr.w	r2, r3, #8
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	f043 0220 	orr.w	r2, r3, #32
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009150:	f043 0210 	orr.w	r2, r3, #16
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009160:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009170:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f003 f8ec 	bl	800c354 <SDMMC_CmdStopTransfer>
 800917c:	4602      	mov	r2, r0
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	431a      	orrs	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00a      	beq.n	80091a8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f855 	bl	8009250 <HAL_SD_ErrorCallback>
}
 80091a6:	e04a      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d045      	beq.n	800923e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f003 0310 	and.w	r3, r3, #16
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <HAL_SD_IRQHandler+0x262>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d011      	beq.n	80091ea <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ca:	4a1f      	ldr	r2, [pc, #124]	; (8009248 <HAL_SD_IRQHandler+0x2e4>)
 80091cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fd f98e 	bl	80064f4 <HAL_DMA_Abort_IT>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d02f      	beq.n	800923e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fb4a 	bl	800987c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80091e8:	e029      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d104      	bne.n	80091fe <HAL_SD_IRQHandler+0x29a>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d011      	beq.n	8009222 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	4a12      	ldr	r2, [pc, #72]	; (800924c <HAL_SD_IRQHandler+0x2e8>)
 8009204:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	4618      	mov	r0, r3
 800920c:	f7fd f972 	bl	80064f4 <HAL_DMA_Abort_IT>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d013      	beq.n	800923e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fb65 	bl	80098ea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009220:	e00d      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f003 fcfc 	bl	800cc34 <HAL_SD_AbortCallback>
}
 800923c:	e7ff      	b.n	800923e <HAL_SD_IRQHandler+0x2da>
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	0800987d 	.word	0x0800987d
 800924c:	080098eb 	.word	0x080098eb

08009250 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009272:	0f9b      	lsrs	r3, r3, #30
 8009274:	b2da      	uxtb	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927e:	0e9b      	lsrs	r3, r3, #26
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009290:	0e1b      	lsrs	r3, r3, #24
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	b2da      	uxtb	r2, r3
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a2:	0c1b      	lsrs	r3, r3, #16
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c4:	0d1b      	lsrs	r3, r3, #20
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d0:	0c1b      	lsrs	r3, r3, #16
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e2:	0bdb      	lsrs	r3, r3, #15
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092f4:	0b9b      	lsrs	r3, r3, #14
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009306:	0b5b      	lsrs	r3, r3, #13
 8009308:	b2db      	uxtb	r3, r3
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009318:	0b1b      	lsrs	r3, r3, #12
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2200      	movs	r2, #0
 800932a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009330:	2b00      	cmp	r3, #0
 8009332:	d163      	bne.n	80093fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009338:	009a      	lsls	r2, r3, #2
 800933a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800933e:	4013      	ands	r3, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009344:	0f92      	lsrs	r2, r2, #30
 8009346:	431a      	orrs	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009350:	0edb      	lsrs	r3, r3, #27
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	b2da      	uxtb	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009362:	0e1b      	lsrs	r3, r3, #24
 8009364:	b2db      	uxtb	r3, r3
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	b2da      	uxtb	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009374:	0d5b      	lsrs	r3, r3, #21
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	b2da      	uxtb	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009386:	0c9b      	lsrs	r3, r3, #18
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	b2da      	uxtb	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009398:	0bdb      	lsrs	r3, r3, #15
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	7e1b      	ldrb	r3, [r3, #24]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	3302      	adds	r3, #2
 80093bc:	2201      	movs	r2, #1
 80093be:	fa02 f303 	lsl.w	r3, r2, r3
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80093c6:	fb02 f203 	mul.w	r2, r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	7a1b      	ldrb	r3, [r3, #8]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	2201      	movs	r2, #1
 80093da:	409a      	lsls	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80093e8:	0a52      	lsrs	r2, r2, #9
 80093ea:	fb02 f203 	mul.w	r2, r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093f8:	661a      	str	r2, [r3, #96]	; 0x60
 80093fa:	e031      	b.n	8009460 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009400:	2b01      	cmp	r3, #1
 8009402:	d11d      	bne.n	8009440 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009408:	041b      	lsls	r3, r3, #16
 800940a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009412:	0c1b      	lsrs	r3, r3, #16
 8009414:	431a      	orrs	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	3301      	adds	r3, #1
 8009420:	029a      	lsls	r2, r3, #10
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009434:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	661a      	str	r2, [r3, #96]	; 0x60
 800943e:	e00f      	b.n	8009460 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a58      	ldr	r2, [pc, #352]	; (80095a8 <HAL_SD_GetCardCSD+0x344>)
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e09d      	b.n	800959c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009464:	0b9b      	lsrs	r3, r3, #14
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	b2da      	uxtb	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009476:	09db      	lsrs	r3, r3, #7
 8009478:	b2db      	uxtb	r3, r3
 800947a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947e:	b2da      	uxtb	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948e:	b2da      	uxtb	r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009498:	0fdb      	lsrs	r3, r3, #31
 800949a:	b2da      	uxtb	r2, r3
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a4:	0f5b      	lsrs	r3, r3, #29
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 0303 	and.w	r3, r3, #3
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b6:	0e9b      	lsrs	r3, r3, #26
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c8:	0d9b      	lsrs	r3, r3, #22
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 030f 	and.w	r3, r3, #15
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094da:	0d5b      	lsrs	r3, r3, #21
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950a:	0bdb      	lsrs	r3, r3, #15
 800950c:	b2db      	uxtb	r3, r3
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951e:	0b9b      	lsrs	r3, r3, #14
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	b2da      	uxtb	r2, r3
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009532:	0b5b      	lsrs	r3, r3, #13
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	0b1b      	lsrs	r3, r3, #12
 8009548:	b2db      	uxtb	r3, r3
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	b2da      	uxtb	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	0a9b      	lsrs	r3, r3, #10
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	b2db      	uxtb	r3, r3
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	b2da      	uxtb	r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958a:	b2da      	uxtb	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	004005ff 	.word	0x004005ff

080095ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009604:	b5b0      	push	{r4, r5, r7, lr}
 8009606:	b08e      	sub	sp, #56	; 0x38
 8009608:	af04      	add	r7, sp, #16
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2203      	movs	r2, #3
 8009612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	2b03      	cmp	r3, #3
 800961c:	d02e      	beq.n	800967c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009624:	d106      	bne.n	8009634 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	639a      	str	r2, [r3, #56]	; 0x38
 8009632:	e029      	b.n	8009688 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800963a:	d10a      	bne.n	8009652 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fb0f 	bl	8009c60 <SD_WideBus_Enable>
 8009642:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	639a      	str	r2, [r3, #56]	; 0x38
 8009650:	e01a      	b.n	8009688 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fb4c 	bl	8009cf6 <SD_WideBus_Disable>
 800965e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	639a      	str	r2, [r3, #56]	; 0x38
 800966c:	e00c      	b.n	8009688 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	639a      	str	r2, [r3, #56]	; 0x38
 800967a:	e005      	b.n	8009688 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009680:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e024      	b.n	80096ee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681d      	ldr	r5, [r3, #0]
 80096ca:	466c      	mov	r4, sp
 80096cc:	f107 0318 	add.w	r3, r7, #24
 80096d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096d8:	f107 030c 	add.w	r3, r7, #12
 80096dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096de:	4628      	mov	r0, r5
 80096e0:	f002 fcb2 	bl	800c048 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3728      	adds	r7, #40	; 0x28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bdb0      	pop	{r4, r5, r7, pc}
 80096f6:	bf00      	nop
 80096f8:	004005ff 	.word	0x004005ff

080096fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009708:	f107 030c 	add.w	r3, r7, #12
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa7e 	bl	8009c10 <SD_SendStatus>
 8009714:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	431a      	orrs	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009732:	693b      	ldr	r3, [r7, #16]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009758:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	2b82      	cmp	r3, #130	; 0x82
 800977a:	d111      	bne.n	80097a0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f002 fde7 	bl	800c354 <SDMMC_CmdStopTransfer>
 8009786:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d008      	beq.n	80097a0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	431a      	orrs	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fd58 	bl	8009250 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0208 	bic.w	r2, r2, #8
 80097ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f003 fa47 	bl	800cc5c <HAL_SD_RxCpltCallback>
#endif
}
 80097ce:	bf00      	nop
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7fd f830 	bl	800684c <HAL_DMA_GetError>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d03e      	beq.n	8009870 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009800:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d002      	beq.n	800980e <SD_DMAError+0x36>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d12d      	bne.n	800986a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a19      	ldr	r2, [pc, #100]	; (8009878 <SD_DMAError+0xa0>)
 8009814:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009824:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff ff62 	bl	80096fc <HAL_SD_GetCardState>
 8009838:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b06      	cmp	r3, #6
 800983e:	d002      	beq.n	8009846 <SD_DMAError+0x6e>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b05      	cmp	r3, #5
 8009844:	d10a      	bne.n	800985c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4618      	mov	r0, r3
 800984c:	f002 fd82 	bl	800c354 <SDMMC_CmdStopTransfer>
 8009850:	4602      	mov	r2, r0
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	431a      	orrs	r2, r3
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2200      	movs	r2, #0
 8009868:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800986a:	6978      	ldr	r0, [r7, #20]
 800986c:	f7ff fcf0 	bl	8009250 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009870:	bf00      	nop
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	004005ff 	.word	0x004005ff

0800987c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009892:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f7ff ff31 	bl	80096fc <HAL_SD_GetCardState>
 800989a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	d002      	beq.n	80098b6 <SD_DMATxAbort+0x3a>
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b05      	cmp	r3, #5
 80098b4:	d10a      	bne.n	80098cc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f002 fd4a 	bl	800c354 <SDMMC_CmdStopTransfer>
 80098c0:	4602      	mov	r2, r0
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	431a      	orrs	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f003 f9ad 	bl	800cc34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80098da:	e002      	b.n	80098e2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7ff fcb7 	bl	8009250 <HAL_SD_ErrorCallback>
}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8009900:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff fefa 	bl	80096fc <HAL_SD_GetCardState>
 8009908:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2b06      	cmp	r3, #6
 800991c:	d002      	beq.n	8009924 <SD_DMARxAbort+0x3a>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b05      	cmp	r3, #5
 8009922:	d10a      	bne.n	800993a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4618      	mov	r0, r3
 800992a:	f002 fd13 	bl	800c354 <SDMMC_CmdStopTransfer>
 800992e:	4602      	mov	r2, r0
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	431a      	orrs	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f003 f976 	bl	800cc34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009948:	e002      	b.n	8009950 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7ff fc80 	bl	8009250 <HAL_SD_ErrorCallback>
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009958:	b5b0      	push	{r4, r5, r7, lr}
 800995a:	b094      	sub	sp, #80	; 0x50
 800995c:	af04      	add	r7, sp, #16
 800995e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009960:	2301      	movs	r3, #1
 8009962:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4618      	mov	r0, r3
 800996a:	f002 fbc5 	bl	800c0f8 <SDIO_GetPowerState>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009974:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009978:	e0b7      	b.n	8009aea <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997e:	2b03      	cmp	r3, #3
 8009980:	d02f      	beq.n	80099e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f002 fdee 	bl	800c568 <SDMMC_CmdSendCID>
 800998c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800998e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <SD_InitCard+0x40>
    {
      return errorstate;
 8009994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009996:	e0a8      	b.n	8009aea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f002 fbef 	bl	800c182 <SDIO_GetResponse>
 80099a4:	4602      	mov	r2, r0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2104      	movs	r1, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f002 fbe6 	bl	800c182 <SDIO_GetResponse>
 80099b6:	4602      	mov	r2, r0
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2108      	movs	r1, #8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 fbdd 	bl	800c182 <SDIO_GetResponse>
 80099c8:	4602      	mov	r2, r0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	210c      	movs	r1, #12
 80099d4:	4618      	mov	r0, r3
 80099d6:	f002 fbd4 	bl	800c182 <SDIO_GetResponse>
 80099da:	4602      	mov	r2, r0
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d00d      	beq.n	8009a06 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f107 020e 	add.w	r2, r7, #14
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f002 fdf4 	bl	800c5e2 <SDMMC_CmdSetRelAdd>
 80099fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <SD_InitCard+0xae>
    {
      return errorstate;
 8009a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a04:	e071      	b.n	8009aea <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d036      	beq.n	8009a7c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a0e:	89fb      	ldrh	r3, [r7, #14]
 8009a10:	461a      	mov	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1e:	041b      	lsls	r3, r3, #16
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f002 fdbe 	bl	800c5a4 <SDMMC_CmdSendCSD>
 8009a28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a32:	e05a      	b.n	8009aea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f002 fba1 	bl	800c182 <SDIO_GetResponse>
 8009a40:	4602      	mov	r2, r0
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2104      	movs	r1, #4
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 fb98 	bl	800c182 <SDIO_GetResponse>
 8009a52:	4602      	mov	r2, r0
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2108      	movs	r1, #8
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f002 fb8f 	bl	800c182 <SDIO_GetResponse>
 8009a64:	4602      	mov	r2, r0
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	210c      	movs	r1, #12
 8009a70:	4618      	mov	r0, r3
 8009a72:	f002 fb86 	bl	800c182 <SDIO_GetResponse>
 8009a76:	4602      	mov	r2, r0
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2104      	movs	r1, #4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f002 fb7d 	bl	800c182 <SDIO_GetResponse>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	0d1a      	lsrs	r2, r3, #20
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a90:	f107 0310 	add.w	r3, r7, #16
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff fbe4 	bl	8009264 <HAL_SD_GetCardCSD>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009aa6:	e020      	b.n	8009aea <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6819      	ldr	r1, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab0:	041b      	lsls	r3, r3, #16
 8009ab2:	f04f 0400 	mov.w	r4, #0
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	4623      	mov	r3, r4
 8009aba:	4608      	mov	r0, r1
 8009abc:	f002 fc6c 	bl	800c398 <SDMMC_CmdSelDesel>
 8009ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_InitCard+0x174>
  {
    return errorstate;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aca:	e00e      	b.n	8009aea <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681d      	ldr	r5, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	466c      	mov	r4, sp
 8009ad4:	f103 0210 	add.w	r2, r3, #16
 8009ad8:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ade:	3304      	adds	r3, #4
 8009ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f002 fab0 	bl	800c048 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3740      	adds	r7, #64	; 0x40
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009af4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	2300      	movs	r3, #0
 8009b06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f002 fc66 	bl	800c3de <SDMMC_CmdGoIdleState>
 8009b12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	e072      	b.n	8009c04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f002 fc79 	bl	800c41a <SDMMC_CmdOperCond>
 8009b28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00d      	beq.n	8009b4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 fc4f 	bl	800c3de <SDMMC_CmdGoIdleState>
 8009b40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d004      	beq.n	8009b52 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	e05b      	b.n	8009c04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d137      	bne.n	8009bca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4618      	mov	r0, r3
 8009b62:	f002 fc79 	bl	800c458 <SDMMC_CmdAppCommand>
 8009b66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d02d      	beq.n	8009bca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b72:	e047      	b.n	8009c04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f002 fc6c 	bl	800c458 <SDMMC_CmdAppCommand>
 8009b80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <SD_PowerON+0x98>
    {
      return errorstate;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	e03b      	b.n	8009c04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	491e      	ldr	r1, [pc, #120]	; (8009c0c <SD_PowerON+0x118>)
 8009b92:	4618      	mov	r0, r3
 8009b94:	f002 fc82 	bl	800c49c <SDMMC_CmdAppOperCommand>
 8009b98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ba4:	e02e      	b.n	8009c04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 fae8 	bl	800c182 <SDIO_GetResponse>
 8009bb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	0fdb      	lsrs	r3, r3, #31
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <SD_PowerON+0xcc>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e000      	b.n	8009bc2 <SD_PowerON+0xce>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	613b      	str	r3, [r7, #16]

    count++;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d802      	bhi.n	8009bda <SD_PowerON+0xe6>
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0cc      	beq.n	8009b74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d902      	bls.n	8009bea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009be8:	e00c      	b.n	8009c04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	645a      	str	r2, [r3, #68]	; 0x44
 8009bfa:	e002      	b.n	8009c02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	c1100000 	.word	0xc1100000

08009c10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c24:	e018      	b.n	8009c58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	041b      	lsls	r3, r3, #16
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f002 fcf6 	bl	800c624 <SDMMC_CmdSendStatus>
 8009c38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	e009      	b.n	8009c58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f002 fa99 	bl	800c182 <SDIO_GetResponse>
 8009c50:	4602      	mov	r2, r0
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2100      	movs	r1, #0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f002 fa83 	bl	800c182 <SDIO_GetResponse>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c86:	d102      	bne.n	8009c8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c8c:	e02f      	b.n	8009cee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c8e:	f107 030c 	add.w	r3, r7, #12
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f879 	bl	8009d8c <SD_FindSCR>
 8009c9a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	e023      	b.n	8009cee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01c      	beq.n	8009cea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	f002 fbcb 	bl	800c458 <SDMMC_CmdAppCommand>
 8009cc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	e00f      	b.n	8009cee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 fc04 	bl	800c4e2 <SDMMC_CmdBusWidth>
 8009cda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	e003      	b.n	8009cee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e001      	b.n	8009cee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60fb      	str	r3, [r7, #12]
 8009d02:	2300      	movs	r3, #0
 8009d04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f002 fa38 	bl	800c182 <SDIO_GetResponse>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d1c:	d102      	bne.n	8009d24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d22:	e02f      	b.n	8009d84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d24:	f107 030c 	add.w	r3, r7, #12
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f82e 	bl	8009d8c <SD_FindSCR>
 8009d30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	e023      	b.n	8009d84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d01c      	beq.n	8009d80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	041b      	lsls	r3, r3, #16
 8009d50:	4619      	mov	r1, r3
 8009d52:	4610      	mov	r0, r2
 8009d54:	f002 fb80 	bl	800c458 <SDMMC_CmdAppCommand>
 8009d58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	e00f      	b.n	8009d84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 fbb9 	bl	800c4e2 <SDMMC_CmdBusWidth>
 8009d70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	e003      	b.n	8009d84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e001      	b.n	8009d84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b08f      	sub	sp, #60	; 0x3c
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d96:	f7fb fd63 	bl	8005860 <HAL_GetTick>
 8009d9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009da0:	2300      	movs	r3, #0
 8009da2:	60bb      	str	r3, [r7, #8]
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2108      	movs	r1, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f002 fa24 	bl	800c200 <SDMMC_CmdBlockLength>
 8009db8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	e0a9      	b.n	8009f18 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dcc:	041b      	lsls	r3, r3, #16
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	f002 fb41 	bl	800c458 <SDMMC_CmdAppCommand>
 8009dd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	e09a      	b.n	8009f18 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009de2:	f04f 33ff 	mov.w	r3, #4294967295
 8009de6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009de8:	2308      	movs	r3, #8
 8009dea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009dec:	2330      	movs	r3, #48	; 0x30
 8009dee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009df0:	2302      	movs	r3, #2
 8009df2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f107 0210 	add.w	r2, r7, #16
 8009e04:	4611      	mov	r1, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 f9ce 	bl	800c1a8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f002 fb88 	bl	800c526 <SDMMC_CmdSendSCR>
 8009e16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d022      	beq.n	8009e64 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	e07a      	b.n	8009f18 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00e      	beq.n	8009e4e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	f107 0208 	add.w	r2, r7, #8
 8009e3c:	18d4      	adds	r4, r2, r3
 8009e3e:	4608      	mov	r0, r1
 8009e40:	f002 f92d 	bl	800c09e <SDIO_ReadFIFO>
 8009e44:	4603      	mov	r3, r0
 8009e46:	6023      	str	r3, [r4, #0]
      index++;
 8009e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e4e:	f7fb fd07 	bl	8005860 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5c:	d102      	bne.n	8009e64 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e62:	e059      	b.n	8009f18 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e6a:	f240 432a 	movw	r3, #1066	; 0x42a
 8009e6e:	4013      	ands	r3, r2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0d6      	beq.n	8009e22 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7a:	f003 0308 	and.w	r3, r3, #8
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2208      	movs	r2, #8
 8009e88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	e044      	b.n	8009f18 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e037      	b.n	8009f18 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009ebe:	2320      	movs	r3, #32
 8009ec0:	e02a      	b.n	8009f18 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f240 523a 	movw	r2, #1338	; 0x53a
 8009eca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	061a      	lsls	r2, r3, #24
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ed8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	0a1b      	lsrs	r3, r3, #8
 8009ede:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ee2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	0e1b      	lsrs	r3, r3, #24
 8009ee8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	601a      	str	r2, [r3, #0]
    scr++;
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	061a      	lsls	r2, r3, #24
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	0a1b      	lsrs	r3, r3, #8
 8009f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	0e1b      	lsrs	r3, r3, #24
 8009f10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	373c      	adds	r7, #60	; 0x3c
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd90      	pop	{r4, r7, pc}

08009f20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d03f      	beq.n	8009fba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e033      	b.n	8009fa8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f002 f8aa 	bl	800c09e <SDIO_ReadFIFO>
 8009f4a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	0a1b      	lsrs	r3, r3, #8
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3301      	adds	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	0e1b      	lsrs	r3, r3, #24
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b07      	cmp	r3, #7
 8009fac:	d9c8      	bls.n	8009f40 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009fba:	bf00      	nop
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b086      	sub	sp, #24
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d043      	beq.n	800a064 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	e037      	b.n	800a052 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3301      	adds	r3, #1
 8009fec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	021a      	lsls	r2, r3, #8
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3b01      	subs	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	041a      	lsls	r2, r3, #16
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	4313      	orrs	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	3b01      	subs	r3, #1
 800a022:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	061a      	lsls	r2, r3, #24
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3301      	adds	r3, #1
 800a034:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3b01      	subs	r3, #1
 800a03a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f107 0208 	add.w	r2, r7, #8
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f002 f836 	bl	800c0b8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3301      	adds	r3, #1
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b07      	cmp	r3, #7
 800a056:	d9c4      	bls.n	8009fe2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a064:	bf00      	nop
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e056      	b.n	800a12c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d106      	bne.n	800a09e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7fa fc19 	bl	80048d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	ea42 0103 	orr.w	r1, r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	0c1b      	lsrs	r3, r3, #16
 800a0fc:	f003 0104 	and.w	r1, r3, #4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69da      	ldr	r2, [r3, #28]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a11a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	4613      	mov	r3, r2
 800a142:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d101      	bne.n	800a156 <HAL_SPI_Transmit+0x22>
 800a152:	2302      	movs	r3, #2
 800a154:	e11e      	b.n	800a394 <HAL_SPI_Transmit+0x260>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a15e:	f7fb fb7f 	bl	8005860 <HAL_GetTick>
 800a162:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a164:	88fb      	ldrh	r3, [r7, #6]
 800a166:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	d002      	beq.n	800a17a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a174:	2302      	movs	r3, #2
 800a176:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a178:	e103      	b.n	800a382 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <HAL_SPI_Transmit+0x52>
 800a180:	88fb      	ldrh	r3, [r7, #6]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a18a:	e0fa      	b.n	800a382 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2203      	movs	r2, #3
 800a190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	88fa      	ldrh	r2, [r7, #6]
 800a1a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	88fa      	ldrh	r2, [r7, #6]
 800a1aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d2:	d107      	bne.n	800a1e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d007      	beq.n	800a202 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a200:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a20a:	d14b      	bne.n	800a2a4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <HAL_SPI_Transmit+0xe6>
 800a214:	8afb      	ldrh	r3, [r7, #22]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d13e      	bne.n	800a298 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	881a      	ldrh	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22a:	1c9a      	adds	r2, r3, #2
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a234:	b29b      	uxth	r3, r3
 800a236:	3b01      	subs	r3, #1
 800a238:	b29a      	uxth	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a23e:	e02b      	b.n	800a298 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d112      	bne.n	800a274 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	881a      	ldrh	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	1c9a      	adds	r2, r3, #2
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	86da      	strh	r2, [r3, #54]	; 0x36
 800a272:	e011      	b.n	800a298 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a274:	f7fb faf4 	bl	8005860 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d803      	bhi.n	800a28c <HAL_SPI_Transmit+0x158>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28a:	d102      	bne.n	800a292 <HAL_SPI_Transmit+0x15e>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a296:	e074      	b.n	800a382 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1ce      	bne.n	800a240 <HAL_SPI_Transmit+0x10c>
 800a2a2:	e04c      	b.n	800a33e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <HAL_SPI_Transmit+0x17e>
 800a2ac:	8afb      	ldrh	r3, [r7, #22]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d140      	bne.n	800a334 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	330c      	adds	r3, #12
 800a2bc:	7812      	ldrb	r2, [r2, #0]
 800a2be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a2d8:	e02c      	b.n	800a334 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d113      	bne.n	800a310 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	7812      	ldrb	r2, [r2, #0]
 800a2f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a30e:	e011      	b.n	800a334 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a310:	f7fb faa6 	bl	8005860 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d803      	bhi.n	800a328 <HAL_SPI_Transmit+0x1f4>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d102      	bne.n	800a32e <HAL_SPI_Transmit+0x1fa>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a332:	e026      	b.n	800a382 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a338:	b29b      	uxth	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1cd      	bne.n	800a2da <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f000 fba4 	bl	800aa90 <SPI_EndRxTxTransaction>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2220      	movs	r2, #32
 800a352:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	613b      	str	r3, [r7, #16]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	613b      	str	r3, [r7, #16]
 800a370:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	77fb      	strb	r3, [r7, #31]
 800a37e:	e000      	b.n	800a382 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a380:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a392:	7ffb      	ldrb	r3, [r7, #31]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3720      	adds	r7, #32
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3b8:	d112      	bne.n	800a3e0 <HAL_SPI_Receive+0x44>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10e      	bne.n	800a3e0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a3ca:	88fa      	ldrh	r2, [r7, #6]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f8e9 	bl	800a5ae <HAL_SPI_TransmitReceive>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	e0e2      	b.n	800a5a6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <HAL_SPI_Receive+0x52>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e0db      	b.n	800a5a6 <HAL_SPI_Receive+0x20a>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3f6:	f7fb fa33 	bl	8005860 <HAL_GetTick>
 800a3fa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b01      	cmp	r3, #1
 800a406:	d002      	beq.n	800a40e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a408:	2302      	movs	r3, #2
 800a40a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a40c:	e0c2      	b.n	800a594 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <HAL_SPI_Receive+0x7e>
 800a414:	88fb      	ldrh	r3, [r7, #6]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a41e:	e0b9      	b.n	800a594 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2204      	movs	r2, #4
 800a424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	88fa      	ldrh	r2, [r7, #6]
 800a438:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	88fa      	ldrh	r2, [r7, #6]
 800a43e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a466:	d107      	bne.n	800a478 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a476:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	d007      	beq.n	800a496 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d162      	bne.n	800a564 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a49e:	e02e      	b.n	800a4fe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d115      	bne.n	800a4da <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f103 020c 	add.w	r2, r3, #12
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4d8:	e011      	b.n	800a4fe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4da:	f7fb f9c1 	bl	8005860 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d803      	bhi.n	800a4f2 <HAL_SPI_Receive+0x156>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f0:	d102      	bne.n	800a4f8 <HAL_SPI_Receive+0x15c>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d102      	bne.n	800a4fe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a4fc:	e04a      	b.n	800a594 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a502:	b29b      	uxth	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1cb      	bne.n	800a4a0 <HAL_SPI_Receive+0x104>
 800a508:	e031      	b.n	800a56e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	2b01      	cmp	r3, #1
 800a516:	d113      	bne.n	800a540 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	b292      	uxth	r2, r2
 800a524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52a:	1c9a      	adds	r2, r3, #2
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a53e:	e011      	b.n	800a564 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a540:	f7fb f98e 	bl	8005860 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d803      	bhi.n	800a558 <HAL_SPI_Receive+0x1bc>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d102      	bne.n	800a55e <HAL_SPI_Receive+0x1c2>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a562:	e017      	b.n	800a594 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1cd      	bne.n	800a50a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fa27 	bl	800a9c6 <SPI_EndRxTransaction>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
 800a590:	e000      	b.n	800a594 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b08c      	sub	sp, #48	; 0x30
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_SPI_TransmitReceive+0x26>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e18a      	b.n	800a8ea <HAL_SPI_TransmitReceive+0x33c>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5dc:	f7fb f940 	bl	8005860 <HAL_GetTick>
 800a5e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a5f2:	887b      	ldrh	r3, [r7, #2]
 800a5f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a5f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d00f      	beq.n	800a61e <HAL_SPI_TransmitReceive+0x70>
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a604:	d107      	bne.n	800a616 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d103      	bne.n	800a616 <HAL_SPI_TransmitReceive+0x68>
 800a60e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a612:	2b04      	cmp	r3, #4
 800a614:	d003      	beq.n	800a61e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a616:	2302      	movs	r3, #2
 800a618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a61c:	e15b      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <HAL_SPI_TransmitReceive+0x82>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_SPI_TransmitReceive+0x82>
 800a62a:	887b      	ldrh	r3, [r7, #2]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a636:	e14e      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b04      	cmp	r3, #4
 800a642:	d003      	beq.n	800a64c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2205      	movs	r2, #5
 800a648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	887a      	ldrh	r2, [r7, #2]
 800a65c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	887a      	ldrh	r2, [r7, #2]
 800a662:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	887a      	ldrh	r2, [r7, #2]
 800a66e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	887a      	ldrh	r2, [r7, #2]
 800a674:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d007      	beq.n	800a6a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a69e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a8:	d178      	bne.n	800a79c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <HAL_SPI_TransmitReceive+0x10a>
 800a6b2:	8b7b      	ldrh	r3, [r7, #26]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d166      	bne.n	800a786 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	881a      	ldrh	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c8:	1c9a      	adds	r2, r3, #2
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6dc:	e053      	b.n	800a786 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d11b      	bne.n	800a724 <HAL_SPI_TransmitReceive+0x176>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d016      	beq.n	800a724 <HAL_SPI_TransmitReceive+0x176>
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d113      	bne.n	800a724 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a700:	881a      	ldrh	r2, [r3, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	1c9a      	adds	r2, r3, #2
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a716:	b29b      	uxth	r3, r3
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d119      	bne.n	800a766 <HAL_SPI_TransmitReceive+0x1b8>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a736:	b29b      	uxth	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d014      	beq.n	800a766 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a746:	b292      	uxth	r2, r2
 800a748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	1c9a      	adds	r2, r3, #2
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a762:	2301      	movs	r3, #1
 800a764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a766:	f7fb f87b 	bl	8005860 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a772:	429a      	cmp	r2, r3
 800a774:	d807      	bhi.n	800a786 <HAL_SPI_TransmitReceive+0x1d8>
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d003      	beq.n	800a786 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a784:	e0a7      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1a6      	bne.n	800a6de <HAL_SPI_TransmitReceive+0x130>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a794:	b29b      	uxth	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1a1      	bne.n	800a6de <HAL_SPI_TransmitReceive+0x130>
 800a79a:	e07c      	b.n	800a896 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <HAL_SPI_TransmitReceive+0x1fc>
 800a7a4:	8b7b      	ldrh	r3, [r7, #26]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d16b      	bne.n	800a882 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	330c      	adds	r3, #12
 800a7b4:	7812      	ldrb	r2, [r2, #0]
 800a7b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7d0:	e057      	b.n	800a882 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d11c      	bne.n	800a81a <HAL_SPI_TransmitReceive+0x26c>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d017      	beq.n	800a81a <HAL_SPI_TransmitReceive+0x26c>
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d114      	bne.n	800a81a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	7812      	ldrb	r2, [r2, #0]
 800a7fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	3b01      	subs	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a816:	2300      	movs	r3, #0
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b01      	cmp	r3, #1
 800a826:	d119      	bne.n	800a85c <HAL_SPI_TransmitReceive+0x2ae>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d014      	beq.n	800a85c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68da      	ldr	r2, [r3, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83c:	b2d2      	uxtb	r2, r2
 800a83e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a84e:	b29b      	uxth	r3, r3
 800a850:	3b01      	subs	r3, #1
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a858:	2301      	movs	r3, #1
 800a85a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a85c:	f7fb f800 	bl	8005860 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a868:	429a      	cmp	r2, r3
 800a86a:	d803      	bhi.n	800a874 <HAL_SPI_TransmitReceive+0x2c6>
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d102      	bne.n	800a87a <HAL_SPI_TransmitReceive+0x2cc>
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	2b00      	cmp	r3, #0
 800a878:	d103      	bne.n	800a882 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a880:	e029      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a886:	b29b      	uxth	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1a2      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x224>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a890:	b29b      	uxth	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d19d      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 f8f8 	bl	800aa90 <SPI_EndRxTxTransaction>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d006      	beq.n	800a8b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a8b2:	e010      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10b      	bne.n	800a8d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	e000      	b.n	800a8d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a8d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a8e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3730      	adds	r7, #48	; 0x30
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a902:	e04c      	b.n	800a99e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90a:	d048      	beq.n	800a99e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a90c:	f7fa ffa8 	bl	8005860 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d902      	bls.n	800a922 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d13d      	bne.n	800a99e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a93a:	d111      	bne.n	800a960 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a944:	d004      	beq.n	800a950 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a94e:	d107      	bne.n	800a960 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a95e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a968:	d10f      	bne.n	800a98a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e00f      	b.n	800a9be <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	bf0c      	ite	eq
 800a9ae:	2301      	moveq	r3, #1
 800a9b0:	2300      	movne	r3, #0
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d1a3      	bne.n	800a904 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b086      	sub	sp, #24
 800a9ca:	af02      	add	r7, sp, #8
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9da:	d111      	bne.n	800aa00 <SPI_EndRxTransaction+0x3a>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e4:	d004      	beq.n	800a9f0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ee:	d107      	bne.n	800aa00 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9fe:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa08:	d12a      	bne.n	800aa60 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa12:	d012      	beq.n	800aa3a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2180      	movs	r1, #128	; 0x80
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff ff67 	bl	800a8f2 <SPI_WaitFlagStateUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d02d      	beq.n	800aa86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2e:	f043 0220 	orr.w	r2, r3, #32
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e026      	b.n	800aa88 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2200      	movs	r2, #0
 800aa42:	2101      	movs	r1, #1
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f7ff ff54 	bl	800a8f2 <SPI_WaitFlagStateUntilTimeout>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01a      	beq.n	800aa86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa54:	f043 0220 	orr.w	r2, r3, #32
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e013      	b.n	800aa88 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2200      	movs	r2, #0
 800aa68:	2101      	movs	r1, #1
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7ff ff41 	bl	800a8f2 <SPI_WaitFlagStateUntilTimeout>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d007      	beq.n	800aa86 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7a:	f043 0220 	orr.w	r2, r3, #32
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e000      	b.n	800aa88 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa9c:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <SPI_EndRxTxTransaction+0x7c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a1b      	ldr	r2, [pc, #108]	; (800ab10 <SPI_EndRxTxTransaction+0x80>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	0d5b      	lsrs	r3, r3, #21
 800aaa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aaac:	fb02 f303 	mul.w	r3, r2, r3
 800aab0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aaba:	d112      	bne.n	800aae2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2200      	movs	r2, #0
 800aac4:	2180      	movs	r1, #128	; 0x80
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff ff13 	bl	800a8f2 <SPI_WaitFlagStateUntilTimeout>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d016      	beq.n	800ab00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad6:	f043 0220 	orr.w	r2, r3, #32
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aade:	2303      	movs	r3, #3
 800aae0:	e00f      	b.n	800ab02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00a      	beq.n	800aafe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf8:	2b80      	cmp	r3, #128	; 0x80
 800aafa:	d0f2      	beq.n	800aae2 <SPI_EndRxTxTransaction+0x52>
 800aafc:	e000      	b.n	800ab00 <SPI_EndRxTxTransaction+0x70>
        break;
 800aafe:	bf00      	nop
  }

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000000 	.word	0x20000000
 800ab10:	165e9f81 	.word	0x165e9f81

0800ab14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e01d      	b.n	800ab62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7f9 ff84 	bl	8004a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f000 fb56 	bl	800b204 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b085      	sub	sp, #20
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68da      	ldr	r2, [r3, #12]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f042 0201 	orr.w	r2, r2, #1
 800ab80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f003 0307 	and.w	r3, r3, #7
 800ab8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b06      	cmp	r3, #6
 800ab92:	d007      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f042 0201 	orr.w	r2, r2, #1
 800aba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e01d      	b.n	800ac00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7f9 fec1 	bl	8004960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2202      	movs	r2, #2
 800abe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3304      	adds	r3, #4
 800abee:	4619      	mov	r1, r3
 800abf0:	4610      	mov	r0, r2
 800abf2:	f000 fb07 	bl	800b204 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2201      	movs	r2, #1
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fd42 	bl	800b6a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <HAL_TIM_PWM_Start+0x74>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d004      	beq.n	800ac34 <HAL_TIM_PWM_Start+0x2c>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a14      	ldr	r2, [pc, #80]	; (800ac80 <HAL_TIM_PWM_Start+0x78>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d101      	bne.n	800ac38 <HAL_TIM_PWM_Start+0x30>
 800ac34:	2301      	movs	r3, #1
 800ac36:	e000      	b.n	800ac3a <HAL_TIM_PWM_Start+0x32>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d007      	beq.n	800ac4e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b06      	cmp	r3, #6
 800ac5e:	d007      	beq.n	800ac70 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	40010000 	.word	0x40010000
 800ac80:	40010400 	.word	0x40010400

0800ac84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e083      	b.n	800ada0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d106      	bne.n	800acb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7f9 ff5b 	bl	8004b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	6812      	ldr	r2, [r2, #0]
 800acc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acc8:	f023 0307 	bic.w	r3, r3, #7
 800accc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3304      	adds	r3, #4
 800acd6:	4619      	mov	r1, r3
 800acd8:	4610      	mov	r0, r2
 800acda:	f000 fa93 	bl	800b204 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	021b      	lsls	r3, r3, #8
 800ad16:	4313      	orrs	r3, r2
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ad24:	f023 030c 	bic.w	r3, r3, #12
 800ad28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	021b      	lsls	r3, r3, #8
 800ad40:	4313      	orrs	r3, r2
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	011a      	lsls	r2, r3, #4
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	031b      	lsls	r3, r3, #12
 800ad54:	4313      	orrs	r3, r2
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ad62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	011b      	lsls	r3, r3, #4
 800ad76:	4313      	orrs	r3, r2
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <HAL_TIM_Encoder_Start+0x16>
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d008      	beq.n	800adce <HAL_TIM_Encoder_Start+0x26>
 800adbc:	e00f      	b.n	800adde <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2201      	movs	r2, #1
 800adc4:	2100      	movs	r1, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fc6c 	bl	800b6a4 <TIM_CCxChannelCmd>
      break;
 800adcc:	e016      	b.n	800adfc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2201      	movs	r2, #1
 800add4:	2104      	movs	r1, #4
 800add6:	4618      	mov	r0, r3
 800add8:	f000 fc64 	bl	800b6a4 <TIM_CCxChannelCmd>
      break;
 800addc:	e00e      	b.n	800adfc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2201      	movs	r2, #1
 800ade4:	2100      	movs	r1, #0
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fc5c 	bl	800b6a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2201      	movs	r2, #1
 800adf2:	2104      	movs	r1, #4
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fc55 	bl	800b6a4 <TIM_CCxChannelCmd>
      break;
 800adfa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f042 0201 	orr.w	r2, r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	f003 0302 	and.w	r3, r3, #2
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d122      	bne.n	800ae72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d11b      	bne.n	800ae72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f06f 0202 	mvn.w	r2, #2
 800ae42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f9b5 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800ae5e:	e005      	b.n	800ae6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f9a7 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f9b8 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d122      	bne.n	800aec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f003 0304 	and.w	r3, r3, #4
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d11b      	bne.n	800aec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f06f 0204 	mvn.w	r2, #4
 800ae96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f98b 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800aeb2:	e005      	b.n	800aec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f97d 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f98e 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	d122      	bne.n	800af1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	f003 0308 	and.w	r3, r3, #8
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d11b      	bne.n	800af1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f06f 0208 	mvn.w	r2, #8
 800aeea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2204      	movs	r2, #4
 800aef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f961 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800af06:	e005      	b.n	800af14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f953 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f964 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f003 0310 	and.w	r3, r3, #16
 800af24:	2b10      	cmp	r3, #16
 800af26:	d122      	bne.n	800af6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f003 0310 	and.w	r3, r3, #16
 800af32:	2b10      	cmp	r3, #16
 800af34:	d11b      	bne.n	800af6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f06f 0210 	mvn.w	r2, #16
 800af3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2208      	movs	r2, #8
 800af44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69db      	ldr	r3, [r3, #28]
 800af4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af50:	2b00      	cmp	r3, #0
 800af52:	d003      	beq.n	800af5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f937 	bl	800b1c8 <HAL_TIM_IC_CaptureCallback>
 800af5a:	e005      	b.n	800af68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f929 	bl	800b1b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f93a 	bl	800b1dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d10e      	bne.n	800af9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	2b01      	cmp	r3, #1
 800af88:	d107      	bne.n	800af9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f06f 0201 	mvn.w	r2, #1
 800af92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7f8 fac5 	bl	8003524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa4:	2b80      	cmp	r3, #128	; 0x80
 800afa6:	d10e      	bne.n	800afc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb2:	2b80      	cmp	r3, #128	; 0x80
 800afb4:	d107      	bne.n	800afc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800afbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fc6d 	bl	800b8a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd0:	2b40      	cmp	r3, #64	; 0x40
 800afd2:	d10e      	bne.n	800aff2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d107      	bne.n	800aff2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f8ff 	bl	800b1f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b20      	cmp	r3, #32
 800affe:	d10e      	bne.n	800b01e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b20      	cmp	r3, #32
 800b00c:	d107      	bne.n	800b01e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f06f 0220 	mvn.w	r2, #32
 800b016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fc37 	bl	800b88c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b01e:	bf00      	nop
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d101      	bne.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b03e:	2302      	movs	r3, #2
 800b040:	e0b4      	b.n	800b1ac <HAL_TIM_PWM_ConfigChannel+0x184>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2202      	movs	r2, #2
 800b04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b0c      	cmp	r3, #12
 800b056:	f200 809f 	bhi.w	800b198 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b05a:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b095 	.word	0x0800b095
 800b064:	0800b199 	.word	0x0800b199
 800b068:	0800b199 	.word	0x0800b199
 800b06c:	0800b199 	.word	0x0800b199
 800b070:	0800b0d5 	.word	0x0800b0d5
 800b074:	0800b199 	.word	0x0800b199
 800b078:	0800b199 	.word	0x0800b199
 800b07c:	0800b199 	.word	0x0800b199
 800b080:	0800b117 	.word	0x0800b117
 800b084:	0800b199 	.word	0x0800b199
 800b088:	0800b199 	.word	0x0800b199
 800b08c:	0800b199 	.word	0x0800b199
 800b090:	0800b157 	.word	0x0800b157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68b9      	ldr	r1, [r7, #8]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 f952 	bl	800b344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699a      	ldr	r2, [r3, #24]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0208 	orr.w	r2, r2, #8
 800b0ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699a      	ldr	r2, [r3, #24]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 0204 	bic.w	r2, r2, #4
 800b0be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6999      	ldr	r1, [r3, #24]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	691a      	ldr	r2, [r3, #16]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	619a      	str	r2, [r3, #24]
      break;
 800b0d2:	e062      	b.n	800b19a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f9a2 	bl	800b424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699a      	ldr	r2, [r3, #24]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	699a      	ldr	r2, [r3, #24]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6999      	ldr	r1, [r3, #24]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	021a      	lsls	r2, r3, #8
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	619a      	str	r2, [r3, #24]
      break;
 800b114:	e041      	b.n	800b19a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68b9      	ldr	r1, [r7, #8]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f9f7 	bl	800b510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69da      	ldr	r2, [r3, #28]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f042 0208 	orr.w	r2, r2, #8
 800b130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	69da      	ldr	r2, [r3, #28]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 0204 	bic.w	r2, r2, #4
 800b140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	69d9      	ldr	r1, [r3, #28]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	691a      	ldr	r2, [r3, #16]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	61da      	str	r2, [r3, #28]
      break;
 800b154:	e021      	b.n	800b19a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fa4b 	bl	800b5f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69da      	ldr	r2, [r3, #28]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	69da      	ldr	r2, [r3, #28]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	69d9      	ldr	r1, [r3, #28]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	021a      	lsls	r2, r3, #8
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	430a      	orrs	r2, r1
 800b194:	61da      	str	r2, [r3, #28]
      break;
 800b196:	e000      	b.n	800b19a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b198:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a40      	ldr	r2, [pc, #256]	; (800b318 <TIM_Base_SetConfig+0x114>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d013      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b222:	d00f      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a3d      	ldr	r2, [pc, #244]	; (800b31c <TIM_Base_SetConfig+0x118>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d00b      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a3c      	ldr	r2, [pc, #240]	; (800b320 <TIM_Base_SetConfig+0x11c>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d007      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a3b      	ldr	r2, [pc, #236]	; (800b324 <TIM_Base_SetConfig+0x120>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d003      	beq.n	800b244 <TIM_Base_SetConfig+0x40>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a3a      	ldr	r2, [pc, #232]	; (800b328 <TIM_Base_SetConfig+0x124>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d108      	bne.n	800b256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a2f      	ldr	r2, [pc, #188]	; (800b318 <TIM_Base_SetConfig+0x114>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d02b      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b264:	d027      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a2c      	ldr	r2, [pc, #176]	; (800b31c <TIM_Base_SetConfig+0x118>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d023      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a2b      	ldr	r2, [pc, #172]	; (800b320 <TIM_Base_SetConfig+0x11c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d01f      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a2a      	ldr	r2, [pc, #168]	; (800b324 <TIM_Base_SetConfig+0x120>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d01b      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a29      	ldr	r2, [pc, #164]	; (800b328 <TIM_Base_SetConfig+0x124>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d017      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a28      	ldr	r2, [pc, #160]	; (800b32c <TIM_Base_SetConfig+0x128>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d013      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a27      	ldr	r2, [pc, #156]	; (800b330 <TIM_Base_SetConfig+0x12c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00f      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a26      	ldr	r2, [pc, #152]	; (800b334 <TIM_Base_SetConfig+0x130>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d00b      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a25      	ldr	r2, [pc, #148]	; (800b338 <TIM_Base_SetConfig+0x134>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d007      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a24      	ldr	r2, [pc, #144]	; (800b33c <TIM_Base_SetConfig+0x138>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d003      	beq.n	800b2b6 <TIM_Base_SetConfig+0xb2>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a23      	ldr	r2, [pc, #140]	; (800b340 <TIM_Base_SetConfig+0x13c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d108      	bne.n	800b2c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a0a      	ldr	r2, [pc, #40]	; (800b318 <TIM_Base_SetConfig+0x114>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d003      	beq.n	800b2fc <TIM_Base_SetConfig+0xf8>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <TIM_Base_SetConfig+0x124>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d103      	bne.n	800b304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	691a      	ldr	r2, [r3, #16]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	615a      	str	r2, [r3, #20]
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	40010000 	.word	0x40010000
 800b31c:	40000400 	.word	0x40000400
 800b320:	40000800 	.word	0x40000800
 800b324:	40000c00 	.word	0x40000c00
 800b328:	40010400 	.word	0x40010400
 800b32c:	40014000 	.word	0x40014000
 800b330:	40014400 	.word	0x40014400
 800b334:	40014800 	.word	0x40014800
 800b338:	40001800 	.word	0x40001800
 800b33c:	40001c00 	.word	0x40001c00
 800b340:	40002000 	.word	0x40002000

0800b344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	f023 0201 	bic.w	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 0303 	bic.w	r3, r3, #3
 800b37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f023 0302 	bic.w	r3, r3, #2
 800b38c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a20      	ldr	r2, [pc, #128]	; (800b41c <TIM_OC1_SetConfig+0xd8>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d003      	beq.n	800b3a8 <TIM_OC1_SetConfig+0x64>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <TIM_OC1_SetConfig+0xdc>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d10c      	bne.n	800b3c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f023 0308 	bic.w	r3, r3, #8
 800b3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f023 0304 	bic.w	r3, r3, #4
 800b3c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a15      	ldr	r2, [pc, #84]	; (800b41c <TIM_OC1_SetConfig+0xd8>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d003      	beq.n	800b3d2 <TIM_OC1_SetConfig+0x8e>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a14      	ldr	r2, [pc, #80]	; (800b420 <TIM_OC1_SetConfig+0xdc>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d111      	bne.n	800b3f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	621a      	str	r2, [r3, #32]
}
 800b410:	bf00      	nop
 800b412:	371c      	adds	r7, #28
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	40010000 	.word	0x40010000
 800b420:	40010400 	.word	0x40010400

0800b424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	f023 0210 	bic.w	r2, r3, #16
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0320 	bic.w	r3, r3, #32
 800b46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	4313      	orrs	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a22      	ldr	r2, [pc, #136]	; (800b508 <TIM_OC2_SetConfig+0xe4>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d003      	beq.n	800b48c <TIM_OC2_SetConfig+0x68>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a21      	ldr	r2, [pc, #132]	; (800b50c <TIM_OC2_SetConfig+0xe8>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d10d      	bne.n	800b4a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	011b      	lsls	r3, r3, #4
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a17      	ldr	r2, [pc, #92]	; (800b508 <TIM_OC2_SetConfig+0xe4>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d003      	beq.n	800b4b8 <TIM_OC2_SetConfig+0x94>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a16      	ldr	r2, [pc, #88]	; (800b50c <TIM_OC2_SetConfig+0xe8>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d113      	bne.n	800b4e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	40010000 	.word	0x40010000
 800b50c:	40010400 	.word	0x40010400

0800b510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	021b      	lsls	r3, r3, #8
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	4313      	orrs	r3, r2
 800b564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a21      	ldr	r2, [pc, #132]	; (800b5f0 <TIM_OC3_SetConfig+0xe0>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d003      	beq.n	800b576 <TIM_OC3_SetConfig+0x66>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a20      	ldr	r2, [pc, #128]	; (800b5f4 <TIM_OC3_SetConfig+0xe4>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d10d      	bne.n	800b592 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b57c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	021b      	lsls	r3, r3, #8
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	4313      	orrs	r3, r2
 800b588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a16      	ldr	r2, [pc, #88]	; (800b5f0 <TIM_OC3_SetConfig+0xe0>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <TIM_OC3_SetConfig+0x92>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a15      	ldr	r2, [pc, #84]	; (800b5f4 <TIM_OC3_SetConfig+0xe4>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d113      	bne.n	800b5ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	011b      	lsls	r3, r3, #4
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	621a      	str	r2, [r3, #32]
}
 800b5e4:	bf00      	nop
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	40010000 	.word	0x40010000
 800b5f4:	40010400 	.word	0x40010400

0800b5f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	021b      	lsls	r3, r3, #8
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4313      	orrs	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	031b      	lsls	r3, r3, #12
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a12      	ldr	r2, [pc, #72]	; (800b69c <TIM_OC4_SetConfig+0xa4>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d003      	beq.n	800b660 <TIM_OC4_SetConfig+0x68>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <TIM_OC4_SetConfig+0xa8>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d109      	bne.n	800b674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	019b      	lsls	r3, r3, #6
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	4313      	orrs	r3, r2
 800b672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	621a      	str	r2, [r3, #32]
}
 800b68e:	bf00      	nop
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	40010000 	.word	0x40010000
 800b6a0:	40010400 	.word	0x40010400

0800b6a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f003 031f 	and.w	r3, r3, #31
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a1a      	ldr	r2, [r3, #32]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	43db      	mvns	r3, r3
 800b6c6:	401a      	ands	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6a1a      	ldr	r2, [r3, #32]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f003 031f 	and.w	r3, r3, #31
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6dc:	431a      	orrs	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
	...

0800b6f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b704:	2302      	movs	r3, #2
 800b706:	e05a      	b.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2202      	movs	r2, #2
 800b714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b72e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	4313      	orrs	r3, r2
 800b738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a21      	ldr	r2, [pc, #132]	; (800b7cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d022      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b754:	d01d      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a1d      	ldr	r2, [pc, #116]	; (800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d018      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a1b      	ldr	r2, [pc, #108]	; (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d013      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a1a      	ldr	r2, [pc, #104]	; (800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00e      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a18      	ldr	r2, [pc, #96]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d009      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a17      	ldr	r2, [pc, #92]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d004      	beq.n	800b792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a15      	ldr	r2, [pc, #84]	; (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d10c      	bne.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40000400 	.word	0x40000400
 800b7d4:	40000800 	.word	0x40000800
 800b7d8:	40000c00 	.word	0x40000c00
 800b7dc:	40010400 	.word	0x40010400
 800b7e0:	40014000 	.word	0x40014000
 800b7e4:	40001800 	.word	0x40001800

0800b7e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b800:	2302      	movs	r3, #2
 800b802:	e03d      	b.n	800b880 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	4313      	orrs	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	4313      	orrs	r3, r2
 800b834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4313      	orrs	r3, r2
 800b842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e03f      	b.n	800b946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d106      	bne.n	800b8e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7f9 fa6e 	bl	8004dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2224      	movs	r2, #36	; 0x24
 800b8e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f829 	bl	800b950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	691a      	ldr	r2, [r3, #16]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b90c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	695a      	ldr	r2, [r3, #20]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b91c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68da      	ldr	r2, [r3, #12]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b92c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2220      	movs	r2, #32
 800b938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2220      	movs	r2, #32
 800b940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	b085      	sub	sp, #20
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	430a      	orrs	r2, r1
 800b96e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	4313      	orrs	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b992:	f023 030c 	bic.w	r3, r3, #12
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6812      	ldr	r2, [r2, #0]
 800b99a:	68f9      	ldr	r1, [r7, #12]
 800b99c:	430b      	orrs	r3, r1
 800b99e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9be:	f040 818b 	bne.w	800bcd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4ac1      	ldr	r2, [pc, #772]	; (800bccc <UART_SetConfig+0x37c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d005      	beq.n	800b9d8 <UART_SetConfig+0x88>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4abf      	ldr	r2, [pc, #764]	; (800bcd0 <UART_SetConfig+0x380>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	f040 80bd 	bne.w	800bb52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9d8:	f7fc fbcc 	bl	8008174 <HAL_RCC_GetPCLK2Freq>
 800b9dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	461d      	mov	r5, r3
 800b9e2:	f04f 0600 	mov.w	r6, #0
 800b9e6:	46a8      	mov	r8, r5
 800b9e8:	46b1      	mov	r9, r6
 800b9ea:	eb18 0308 	adds.w	r3, r8, r8
 800b9ee:	eb49 0409 	adc.w	r4, r9, r9
 800b9f2:	4698      	mov	r8, r3
 800b9f4:	46a1      	mov	r9, r4
 800b9f6:	eb18 0805 	adds.w	r8, r8, r5
 800b9fa:	eb49 0906 	adc.w	r9, r9, r6
 800b9fe:	f04f 0100 	mov.w	r1, #0
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ba0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ba0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ba12:	4688      	mov	r8, r1
 800ba14:	4691      	mov	r9, r2
 800ba16:	eb18 0005 	adds.w	r0, r8, r5
 800ba1a:	eb49 0106 	adc.w	r1, r9, r6
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	461d      	mov	r5, r3
 800ba24:	f04f 0600 	mov.w	r6, #0
 800ba28:	196b      	adds	r3, r5, r5
 800ba2a:	eb46 0406 	adc.w	r4, r6, r6
 800ba2e:	461a      	mov	r2, r3
 800ba30:	4623      	mov	r3, r4
 800ba32:	f7f5 f941 	bl	8000cb8 <__aeabi_uldivmod>
 800ba36:	4603      	mov	r3, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4ba5      	ldr	r3, [pc, #660]	; (800bcd4 <UART_SetConfig+0x384>)
 800ba3e:	fba3 2302 	umull	r2, r3, r3, r2
 800ba42:	095b      	lsrs	r3, r3, #5
 800ba44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	461d      	mov	r5, r3
 800ba4c:	f04f 0600 	mov.w	r6, #0
 800ba50:	46a9      	mov	r9, r5
 800ba52:	46b2      	mov	sl, r6
 800ba54:	eb19 0309 	adds.w	r3, r9, r9
 800ba58:	eb4a 040a 	adc.w	r4, sl, sl
 800ba5c:	4699      	mov	r9, r3
 800ba5e:	46a2      	mov	sl, r4
 800ba60:	eb19 0905 	adds.w	r9, r9, r5
 800ba64:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	f04f 0200 	mov.w	r2, #0
 800ba70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba7c:	4689      	mov	r9, r1
 800ba7e:	4692      	mov	sl, r2
 800ba80:	eb19 0005 	adds.w	r0, r9, r5
 800ba84:	eb4a 0106 	adc.w	r1, sl, r6
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	461d      	mov	r5, r3
 800ba8e:	f04f 0600 	mov.w	r6, #0
 800ba92:	196b      	adds	r3, r5, r5
 800ba94:	eb46 0406 	adc.w	r4, r6, r6
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4623      	mov	r3, r4
 800ba9c:	f7f5 f90c 	bl	8000cb8 <__aeabi_uldivmod>
 800baa0:	4603      	mov	r3, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	461a      	mov	r2, r3
 800baa6:	4b8b      	ldr	r3, [pc, #556]	; (800bcd4 <UART_SetConfig+0x384>)
 800baa8:	fba3 1302 	umull	r1, r3, r3, r2
 800baac:	095b      	lsrs	r3, r3, #5
 800baae:	2164      	movs	r1, #100	; 0x64
 800bab0:	fb01 f303 	mul.w	r3, r1, r3
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	3332      	adds	r3, #50	; 0x32
 800baba:	4a86      	ldr	r2, [pc, #536]	; (800bcd4 <UART_SetConfig+0x384>)
 800babc:	fba2 2303 	umull	r2, r3, r2, r3
 800bac0:	095b      	lsrs	r3, r3, #5
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bac8:	4498      	add	r8, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	461d      	mov	r5, r3
 800bace:	f04f 0600 	mov.w	r6, #0
 800bad2:	46a9      	mov	r9, r5
 800bad4:	46b2      	mov	sl, r6
 800bad6:	eb19 0309 	adds.w	r3, r9, r9
 800bada:	eb4a 040a 	adc.w	r4, sl, sl
 800bade:	4699      	mov	r9, r3
 800bae0:	46a2      	mov	sl, r4
 800bae2:	eb19 0905 	adds.w	r9, r9, r5
 800bae6:	eb4a 0a06 	adc.w	sl, sl, r6
 800baea:	f04f 0100 	mov.w	r1, #0
 800baee:	f04f 0200 	mov.w	r2, #0
 800baf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800baf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bafa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bafe:	4689      	mov	r9, r1
 800bb00:	4692      	mov	sl, r2
 800bb02:	eb19 0005 	adds.w	r0, r9, r5
 800bb06:	eb4a 0106 	adc.w	r1, sl, r6
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	461d      	mov	r5, r3
 800bb10:	f04f 0600 	mov.w	r6, #0
 800bb14:	196b      	adds	r3, r5, r5
 800bb16:	eb46 0406 	adc.w	r4, r6, r6
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	4623      	mov	r3, r4
 800bb1e:	f7f5 f8cb 	bl	8000cb8 <__aeabi_uldivmod>
 800bb22:	4603      	mov	r3, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	461a      	mov	r2, r3
 800bb28:	4b6a      	ldr	r3, [pc, #424]	; (800bcd4 <UART_SetConfig+0x384>)
 800bb2a:	fba3 1302 	umull	r1, r3, r3, r2
 800bb2e:	095b      	lsrs	r3, r3, #5
 800bb30:	2164      	movs	r1, #100	; 0x64
 800bb32:	fb01 f303 	mul.w	r3, r1, r3
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	3332      	adds	r3, #50	; 0x32
 800bb3c:	4a65      	ldr	r2, [pc, #404]	; (800bcd4 <UART_SetConfig+0x384>)
 800bb3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb42:	095b      	lsrs	r3, r3, #5
 800bb44:	f003 0207 	and.w	r2, r3, #7
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4442      	add	r2, r8
 800bb4e:	609a      	str	r2, [r3, #8]
 800bb50:	e26f      	b.n	800c032 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb52:	f7fc fafb 	bl	800814c <HAL_RCC_GetPCLK1Freq>
 800bb56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	461d      	mov	r5, r3
 800bb5c:	f04f 0600 	mov.w	r6, #0
 800bb60:	46a8      	mov	r8, r5
 800bb62:	46b1      	mov	r9, r6
 800bb64:	eb18 0308 	adds.w	r3, r8, r8
 800bb68:	eb49 0409 	adc.w	r4, r9, r9
 800bb6c:	4698      	mov	r8, r3
 800bb6e:	46a1      	mov	r9, r4
 800bb70:	eb18 0805 	adds.w	r8, r8, r5
 800bb74:	eb49 0906 	adc.w	r9, r9, r6
 800bb78:	f04f 0100 	mov.w	r1, #0
 800bb7c:	f04f 0200 	mov.w	r2, #0
 800bb80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bb84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bb88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bb8c:	4688      	mov	r8, r1
 800bb8e:	4691      	mov	r9, r2
 800bb90:	eb18 0005 	adds.w	r0, r8, r5
 800bb94:	eb49 0106 	adc.w	r1, r9, r6
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	461d      	mov	r5, r3
 800bb9e:	f04f 0600 	mov.w	r6, #0
 800bba2:	196b      	adds	r3, r5, r5
 800bba4:	eb46 0406 	adc.w	r4, r6, r6
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4623      	mov	r3, r4
 800bbac:	f7f5 f884 	bl	8000cb8 <__aeabi_uldivmod>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	4b47      	ldr	r3, [pc, #284]	; (800bcd4 <UART_SetConfig+0x384>)
 800bbb8:	fba3 2302 	umull	r2, r3, r3, r2
 800bbbc:	095b      	lsrs	r3, r3, #5
 800bbbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	461d      	mov	r5, r3
 800bbc6:	f04f 0600 	mov.w	r6, #0
 800bbca:	46a9      	mov	r9, r5
 800bbcc:	46b2      	mov	sl, r6
 800bbce:	eb19 0309 	adds.w	r3, r9, r9
 800bbd2:	eb4a 040a 	adc.w	r4, sl, sl
 800bbd6:	4699      	mov	r9, r3
 800bbd8:	46a2      	mov	sl, r4
 800bbda:	eb19 0905 	adds.w	r9, r9, r5
 800bbde:	eb4a 0a06 	adc.w	sl, sl, r6
 800bbe2:	f04f 0100 	mov.w	r1, #0
 800bbe6:	f04f 0200 	mov.w	r2, #0
 800bbea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbf6:	4689      	mov	r9, r1
 800bbf8:	4692      	mov	sl, r2
 800bbfa:	eb19 0005 	adds.w	r0, r9, r5
 800bbfe:	eb4a 0106 	adc.w	r1, sl, r6
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	461d      	mov	r5, r3
 800bc08:	f04f 0600 	mov.w	r6, #0
 800bc0c:	196b      	adds	r3, r5, r5
 800bc0e:	eb46 0406 	adc.w	r4, r6, r6
 800bc12:	461a      	mov	r2, r3
 800bc14:	4623      	mov	r3, r4
 800bc16:	f7f5 f84f 	bl	8000cb8 <__aeabi_uldivmod>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	461a      	mov	r2, r3
 800bc20:	4b2c      	ldr	r3, [pc, #176]	; (800bcd4 <UART_SetConfig+0x384>)
 800bc22:	fba3 1302 	umull	r1, r3, r3, r2
 800bc26:	095b      	lsrs	r3, r3, #5
 800bc28:	2164      	movs	r1, #100	; 0x64
 800bc2a:	fb01 f303 	mul.w	r3, r1, r3
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	3332      	adds	r3, #50	; 0x32
 800bc34:	4a27      	ldr	r2, [pc, #156]	; (800bcd4 <UART_SetConfig+0x384>)
 800bc36:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3a:	095b      	lsrs	r3, r3, #5
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc42:	4498      	add	r8, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	461d      	mov	r5, r3
 800bc48:	f04f 0600 	mov.w	r6, #0
 800bc4c:	46a9      	mov	r9, r5
 800bc4e:	46b2      	mov	sl, r6
 800bc50:	eb19 0309 	adds.w	r3, r9, r9
 800bc54:	eb4a 040a 	adc.w	r4, sl, sl
 800bc58:	4699      	mov	r9, r3
 800bc5a:	46a2      	mov	sl, r4
 800bc5c:	eb19 0905 	adds.w	r9, r9, r5
 800bc60:	eb4a 0a06 	adc.w	sl, sl, r6
 800bc64:	f04f 0100 	mov.w	r1, #0
 800bc68:	f04f 0200 	mov.w	r2, #0
 800bc6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc78:	4689      	mov	r9, r1
 800bc7a:	4692      	mov	sl, r2
 800bc7c:	eb19 0005 	adds.w	r0, r9, r5
 800bc80:	eb4a 0106 	adc.w	r1, sl, r6
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	461d      	mov	r5, r3
 800bc8a:	f04f 0600 	mov.w	r6, #0
 800bc8e:	196b      	adds	r3, r5, r5
 800bc90:	eb46 0406 	adc.w	r4, r6, r6
 800bc94:	461a      	mov	r2, r3
 800bc96:	4623      	mov	r3, r4
 800bc98:	f7f5 f80e 	bl	8000cb8 <__aeabi_uldivmod>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	461a      	mov	r2, r3
 800bca2:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <UART_SetConfig+0x384>)
 800bca4:	fba3 1302 	umull	r1, r3, r3, r2
 800bca8:	095b      	lsrs	r3, r3, #5
 800bcaa:	2164      	movs	r1, #100	; 0x64
 800bcac:	fb01 f303 	mul.w	r3, r1, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	3332      	adds	r3, #50	; 0x32
 800bcb6:	4a07      	ldr	r2, [pc, #28]	; (800bcd4 <UART_SetConfig+0x384>)
 800bcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcbc:	095b      	lsrs	r3, r3, #5
 800bcbe:	f003 0207 	and.w	r2, r3, #7
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4442      	add	r2, r8
 800bcc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bcca:	e1b2      	b.n	800c032 <UART_SetConfig+0x6e2>
 800bccc:	40011000 	.word	0x40011000
 800bcd0:	40011400 	.word	0x40011400
 800bcd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4ad7      	ldr	r2, [pc, #860]	; (800c03c <UART_SetConfig+0x6ec>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d005      	beq.n	800bcee <UART_SetConfig+0x39e>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4ad6      	ldr	r2, [pc, #856]	; (800c040 <UART_SetConfig+0x6f0>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	f040 80d1 	bne.w	800be90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcee:	f7fc fa41 	bl	8008174 <HAL_RCC_GetPCLK2Freq>
 800bcf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	469a      	mov	sl, r3
 800bcf8:	f04f 0b00 	mov.w	fp, #0
 800bcfc:	46d0      	mov	r8, sl
 800bcfe:	46d9      	mov	r9, fp
 800bd00:	eb18 0308 	adds.w	r3, r8, r8
 800bd04:	eb49 0409 	adc.w	r4, r9, r9
 800bd08:	4698      	mov	r8, r3
 800bd0a:	46a1      	mov	r9, r4
 800bd0c:	eb18 080a 	adds.w	r8, r8, sl
 800bd10:	eb49 090b 	adc.w	r9, r9, fp
 800bd14:	f04f 0100 	mov.w	r1, #0
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bd20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bd24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bd28:	4688      	mov	r8, r1
 800bd2a:	4691      	mov	r9, r2
 800bd2c:	eb1a 0508 	adds.w	r5, sl, r8
 800bd30:	eb4b 0609 	adc.w	r6, fp, r9
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	f04f 0400 	mov.w	r4, #0
 800bd46:	0094      	lsls	r4, r2, #2
 800bd48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd4c:	008b      	lsls	r3, r1, #2
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4623      	mov	r3, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	4631      	mov	r1, r6
 800bd56:	f7f4 ffaf 	bl	8000cb8 <__aeabi_uldivmod>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4bb8      	ldr	r3, [pc, #736]	; (800c044 <UART_SetConfig+0x6f4>)
 800bd62:	fba3 2302 	umull	r2, r3, r3, r2
 800bd66:	095b      	lsrs	r3, r3, #5
 800bd68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	469b      	mov	fp, r3
 800bd70:	f04f 0c00 	mov.w	ip, #0
 800bd74:	46d9      	mov	r9, fp
 800bd76:	46e2      	mov	sl, ip
 800bd78:	eb19 0309 	adds.w	r3, r9, r9
 800bd7c:	eb4a 040a 	adc.w	r4, sl, sl
 800bd80:	4699      	mov	r9, r3
 800bd82:	46a2      	mov	sl, r4
 800bd84:	eb19 090b 	adds.w	r9, r9, fp
 800bd88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd8c:	f04f 0100 	mov.w	r1, #0
 800bd90:	f04f 0200 	mov.w	r2, #0
 800bd94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bda0:	4689      	mov	r9, r1
 800bda2:	4692      	mov	sl, r2
 800bda4:	eb1b 0509 	adds.w	r5, fp, r9
 800bda8:	eb4c 060a 	adc.w	r6, ip, sl
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f04f 0400 	mov.w	r4, #0
 800bdbe:	0094      	lsls	r4, r2, #2
 800bdc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bdc4:	008b      	lsls	r3, r1, #2
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4623      	mov	r3, r4
 800bdca:	4628      	mov	r0, r5
 800bdcc:	4631      	mov	r1, r6
 800bdce:	f7f4 ff73 	bl	8000cb8 <__aeabi_uldivmod>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4b9a      	ldr	r3, [pc, #616]	; (800c044 <UART_SetConfig+0x6f4>)
 800bdda:	fba3 1302 	umull	r1, r3, r3, r2
 800bdde:	095b      	lsrs	r3, r3, #5
 800bde0:	2164      	movs	r1, #100	; 0x64
 800bde2:	fb01 f303 	mul.w	r3, r1, r3
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	3332      	adds	r3, #50	; 0x32
 800bdec:	4a95      	ldr	r2, [pc, #596]	; (800c044 <UART_SetConfig+0x6f4>)
 800bdee:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdf8:	4498      	add	r8, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	469b      	mov	fp, r3
 800bdfe:	f04f 0c00 	mov.w	ip, #0
 800be02:	46d9      	mov	r9, fp
 800be04:	46e2      	mov	sl, ip
 800be06:	eb19 0309 	adds.w	r3, r9, r9
 800be0a:	eb4a 040a 	adc.w	r4, sl, sl
 800be0e:	4699      	mov	r9, r3
 800be10:	46a2      	mov	sl, r4
 800be12:	eb19 090b 	adds.w	r9, r9, fp
 800be16:	eb4a 0a0c 	adc.w	sl, sl, ip
 800be1a:	f04f 0100 	mov.w	r1, #0
 800be1e:	f04f 0200 	mov.w	r2, #0
 800be22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be2e:	4689      	mov	r9, r1
 800be30:	4692      	mov	sl, r2
 800be32:	eb1b 0509 	adds.w	r5, fp, r9
 800be36:	eb4c 060a 	adc.w	r6, ip, sl
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	4619      	mov	r1, r3
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	f04f 0400 	mov.w	r4, #0
 800be4c:	0094      	lsls	r4, r2, #2
 800be4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be52:	008b      	lsls	r3, r1, #2
 800be54:	461a      	mov	r2, r3
 800be56:	4623      	mov	r3, r4
 800be58:	4628      	mov	r0, r5
 800be5a:	4631      	mov	r1, r6
 800be5c:	f7f4 ff2c 	bl	8000cb8 <__aeabi_uldivmod>
 800be60:	4603      	mov	r3, r0
 800be62:	460c      	mov	r4, r1
 800be64:	461a      	mov	r2, r3
 800be66:	4b77      	ldr	r3, [pc, #476]	; (800c044 <UART_SetConfig+0x6f4>)
 800be68:	fba3 1302 	umull	r1, r3, r3, r2
 800be6c:	095b      	lsrs	r3, r3, #5
 800be6e:	2164      	movs	r1, #100	; 0x64
 800be70:	fb01 f303 	mul.w	r3, r1, r3
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	3332      	adds	r3, #50	; 0x32
 800be7a:	4a72      	ldr	r2, [pc, #456]	; (800c044 <UART_SetConfig+0x6f4>)
 800be7c:	fba2 2303 	umull	r2, r3, r2, r3
 800be80:	095b      	lsrs	r3, r3, #5
 800be82:	f003 020f 	and.w	r2, r3, #15
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4442      	add	r2, r8
 800be8c:	609a      	str	r2, [r3, #8]
 800be8e:	e0d0      	b.n	800c032 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800be90:	f7fc f95c 	bl	800814c <HAL_RCC_GetPCLK1Freq>
 800be94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	469a      	mov	sl, r3
 800be9a:	f04f 0b00 	mov.w	fp, #0
 800be9e:	46d0      	mov	r8, sl
 800bea0:	46d9      	mov	r9, fp
 800bea2:	eb18 0308 	adds.w	r3, r8, r8
 800bea6:	eb49 0409 	adc.w	r4, r9, r9
 800beaa:	4698      	mov	r8, r3
 800beac:	46a1      	mov	r9, r4
 800beae:	eb18 080a 	adds.w	r8, r8, sl
 800beb2:	eb49 090b 	adc.w	r9, r9, fp
 800beb6:	f04f 0100 	mov.w	r1, #0
 800beba:	f04f 0200 	mov.w	r2, #0
 800bebe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bec2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bec6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800beca:	4688      	mov	r8, r1
 800becc:	4691      	mov	r9, r2
 800bece:	eb1a 0508 	adds.w	r5, sl, r8
 800bed2:	eb4b 0609 	adc.w	r6, fp, r9
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	4619      	mov	r1, r3
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	f04f 0400 	mov.w	r4, #0
 800bee8:	0094      	lsls	r4, r2, #2
 800beea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800beee:	008b      	lsls	r3, r1, #2
 800bef0:	461a      	mov	r2, r3
 800bef2:	4623      	mov	r3, r4
 800bef4:	4628      	mov	r0, r5
 800bef6:	4631      	mov	r1, r6
 800bef8:	f7f4 fede 	bl	8000cb8 <__aeabi_uldivmod>
 800befc:	4603      	mov	r3, r0
 800befe:	460c      	mov	r4, r1
 800bf00:	461a      	mov	r2, r3
 800bf02:	4b50      	ldr	r3, [pc, #320]	; (800c044 <UART_SetConfig+0x6f4>)
 800bf04:	fba3 2302 	umull	r2, r3, r3, r2
 800bf08:	095b      	lsrs	r3, r3, #5
 800bf0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	469b      	mov	fp, r3
 800bf12:	f04f 0c00 	mov.w	ip, #0
 800bf16:	46d9      	mov	r9, fp
 800bf18:	46e2      	mov	sl, ip
 800bf1a:	eb19 0309 	adds.w	r3, r9, r9
 800bf1e:	eb4a 040a 	adc.w	r4, sl, sl
 800bf22:	4699      	mov	r9, r3
 800bf24:	46a2      	mov	sl, r4
 800bf26:	eb19 090b 	adds.w	r9, r9, fp
 800bf2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bf2e:	f04f 0100 	mov.w	r1, #0
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf42:	4689      	mov	r9, r1
 800bf44:	4692      	mov	sl, r2
 800bf46:	eb1b 0509 	adds.w	r5, fp, r9
 800bf4a:	eb4c 060a 	adc.w	r6, ip, sl
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4619      	mov	r1, r3
 800bf54:	f04f 0200 	mov.w	r2, #0
 800bf58:	f04f 0300 	mov.w	r3, #0
 800bf5c:	f04f 0400 	mov.w	r4, #0
 800bf60:	0094      	lsls	r4, r2, #2
 800bf62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bf66:	008b      	lsls	r3, r1, #2
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	4631      	mov	r1, r6
 800bf70:	f7f4 fea2 	bl	8000cb8 <__aeabi_uldivmod>
 800bf74:	4603      	mov	r3, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4b32      	ldr	r3, [pc, #200]	; (800c044 <UART_SetConfig+0x6f4>)
 800bf7c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf80:	095b      	lsrs	r3, r3, #5
 800bf82:	2164      	movs	r1, #100	; 0x64
 800bf84:	fb01 f303 	mul.w	r3, r1, r3
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	3332      	adds	r3, #50	; 0x32
 800bf8e:	4a2d      	ldr	r2, [pc, #180]	; (800c044 <UART_SetConfig+0x6f4>)
 800bf90:	fba2 2303 	umull	r2, r3, r2, r3
 800bf94:	095b      	lsrs	r3, r3, #5
 800bf96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf9a:	4498      	add	r8, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	469b      	mov	fp, r3
 800bfa0:	f04f 0c00 	mov.w	ip, #0
 800bfa4:	46d9      	mov	r9, fp
 800bfa6:	46e2      	mov	sl, ip
 800bfa8:	eb19 0309 	adds.w	r3, r9, r9
 800bfac:	eb4a 040a 	adc.w	r4, sl, sl
 800bfb0:	4699      	mov	r9, r3
 800bfb2:	46a2      	mov	sl, r4
 800bfb4:	eb19 090b 	adds.w	r9, r9, fp
 800bfb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bfbc:	f04f 0100 	mov.w	r1, #0
 800bfc0:	f04f 0200 	mov.w	r2, #0
 800bfc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bfc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bfcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bfd0:	4689      	mov	r9, r1
 800bfd2:	4692      	mov	sl, r2
 800bfd4:	eb1b 0509 	adds.w	r5, fp, r9
 800bfd8:	eb4c 060a 	adc.w	r6, ip, sl
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	f04f 0300 	mov.w	r3, #0
 800bfea:	f04f 0400 	mov.w	r4, #0
 800bfee:	0094      	lsls	r4, r2, #2
 800bff0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bff4:	008b      	lsls	r3, r1, #2
 800bff6:	461a      	mov	r2, r3
 800bff8:	4623      	mov	r3, r4
 800bffa:	4628      	mov	r0, r5
 800bffc:	4631      	mov	r1, r6
 800bffe:	f7f4 fe5b 	bl	8000cb8 <__aeabi_uldivmod>
 800c002:	4603      	mov	r3, r0
 800c004:	460c      	mov	r4, r1
 800c006:	461a      	mov	r2, r3
 800c008:	4b0e      	ldr	r3, [pc, #56]	; (800c044 <UART_SetConfig+0x6f4>)
 800c00a:	fba3 1302 	umull	r1, r3, r3, r2
 800c00e:	095b      	lsrs	r3, r3, #5
 800c010:	2164      	movs	r1, #100	; 0x64
 800c012:	fb01 f303 	mul.w	r3, r1, r3
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	011b      	lsls	r3, r3, #4
 800c01a:	3332      	adds	r3, #50	; 0x32
 800c01c:	4a09      	ldr	r2, [pc, #36]	; (800c044 <UART_SetConfig+0x6f4>)
 800c01e:	fba2 2303 	umull	r2, r3, r2, r3
 800c022:	095b      	lsrs	r3, r3, #5
 800c024:	f003 020f 	and.w	r2, r3, #15
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4442      	add	r2, r8
 800c02e:	609a      	str	r2, [r3, #8]
}
 800c030:	e7ff      	b.n	800c032 <UART_SetConfig+0x6e2>
 800c032:	bf00      	nop
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	40011000 	.word	0x40011000
 800c040:	40011400 	.word	0x40011400
 800c044:	51eb851f 	.word	0x51eb851f

0800c048 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c048:	b084      	sub	sp, #16
 800c04a:	b480      	push	{r7}
 800c04c:	b085      	sub	sp, #20
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	f107 001c 	add.w	r0, r7, #28
 800c056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c05e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c060:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c062:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c066:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c06a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c06e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c072:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c082:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	b004      	add	sp, #16
 800c09c:	4770      	bx	lr

0800c09e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2203      	movs	r2, #3
 800c0e6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c0e8:	2002      	movs	r0, #2
 800c0ea:	f7f9 fbc5 	bl	8005878 <HAL_Delay>
  
  return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0303 	and.w	r3, r3, #3
}
 800c108:	4618      	mov	r0, r3
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c132:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c138:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c13e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4313      	orrs	r3, r2
 800c144:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c14e:	f023 030f 	bic.w	r3, r3, #15
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	431a      	orrs	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	b2db      	uxtb	r3, r3
}
 800c176:	4618      	mov	r0, r3
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c182:	b480      	push	{r7}
 800c184:	b085      	sub	sp, #20
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3314      	adds	r3, #20
 800c190:	461a      	mov	r2, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	4413      	add	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
}  
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c1d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c1da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1f2:	2300      	movs	r3, #0

}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3714      	adds	r7, #20
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c20e:	2310      	movs	r3, #16
 800c210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c212:	2340      	movs	r3, #64	; 0x40
 800c214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c21e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c220:	f107 0308 	add.w	r3, r7, #8
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff ff74 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c230:	2110      	movs	r1, #16
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fa40 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c23a:	69fb      	ldr	r3, [r7, #28]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3720      	adds	r7, #32
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c252:	2311      	movs	r3, #17
 800c254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c256:	2340      	movs	r3, #64	; 0x40
 800c258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c25a:	2300      	movs	r3, #0
 800c25c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c264:	f107 0308 	add.w	r3, r7, #8
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff ff52 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c270:	f241 3288 	movw	r2, #5000	; 0x1388
 800c274:	2111      	movs	r1, #17
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fa1e 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c27e:	69fb      	ldr	r3, [r7, #28]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c296:	2312      	movs	r3, #18
 800c298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c29a:	2340      	movs	r3, #64	; 0x40
 800c29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2a8:	f107 0308 	add.w	r3, r7, #8
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff ff30 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2b8:	2112      	movs	r1, #18
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f9fc 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c2c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c2:	69fb      	ldr	r3, [r7, #28]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3720      	adds	r7, #32
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b088      	sub	sp, #32
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2da:	2318      	movs	r3, #24
 800c2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2de:	2340      	movs	r3, #64	; 0x40
 800c2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2ec:	f107 0308 	add.w	r3, r7, #8
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff ff0e 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2fc:	2118      	movs	r1, #24
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f9da 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c306:	69fb      	ldr	r3, [r7, #28]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3720      	adds	r7, #32
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c31e:	2319      	movs	r3, #25
 800c320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c322:	2340      	movs	r3, #64	; 0x40
 800c324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c326:	2300      	movs	r3, #0
 800c328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c32e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c330:	f107 0308 	add.w	r3, r7, #8
 800c334:	4619      	mov	r1, r3
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff feec 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c340:	2119      	movs	r1, #25
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f9b8 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c34a:	69fb      	ldr	r3, [r7, #28]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3720      	adds	r7, #32
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b088      	sub	sp, #32
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c360:	230c      	movs	r3, #12
 800c362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c364:	2340      	movs	r3, #64	; 0x40
 800c366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c368:	2300      	movs	r3, #0
 800c36a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c36c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c370:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c372:	f107 0308 	add.w	r3, r7, #8
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff fecb 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c37e:	4a05      	ldr	r2, [pc, #20]	; (800c394 <SDMMC_CmdStopTransfer+0x40>)
 800c380:	210c      	movs	r1, #12
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f998 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c38a:	69fb      	ldr	r3, [r7, #28]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3720      	adds	r7, #32
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	05f5e100 	.word	0x05f5e100

0800c398 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08a      	sub	sp, #40	; 0x28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c3a8:	2307      	movs	r3, #7
 800c3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3ba:	f107 0310 	add.w	r3, r7, #16
 800c3be:	4619      	mov	r1, r3
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff fea7 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ca:	2107      	movs	r1, #7
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 f973 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c3d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3728      	adds	r7, #40	; 0x28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b088      	sub	sp, #32
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3fc:	f107 0308 	add.w	r3, r7, #8
 800c400:	4619      	mov	r1, r3
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff fe86 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f92d 	bl	800c668 <SDMMC_GetCmdError>
 800c40e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c410:	69fb      	ldr	r3, [r7, #28]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3720      	adds	r7, #32
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b088      	sub	sp, #32
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c422:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c428:	2308      	movs	r3, #8
 800c42a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c438:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c43a:	f107 0308 	add.w	r3, r7, #8
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff fe67 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb16 	bl	800ca78 <SDMMC_GetCmdResp7>
 800c44c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c44e:	69fb      	ldr	r3, [r7, #28]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3720      	adds	r7, #32
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c466:	2337      	movs	r3, #55	; 0x37
 800c468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c46a:	2340      	movs	r3, #64	; 0x40
 800c46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c46e:	2300      	movs	r3, #0
 800c470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c476:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c478:	f107 0308 	add.w	r3, r7, #8
 800c47c:	4619      	mov	r1, r3
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff fe48 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c484:	f241 3288 	movw	r2, #5000	; 0x1388
 800c488:	2137      	movs	r1, #55	; 0x37
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f914 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c492:	69fb      	ldr	r3, [r7, #28]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c4b2:	2329      	movs	r3, #41	; 0x29
 800c4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4b6:	2340      	movs	r3, #64	; 0x40
 800c4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4c4:	f107 0308 	add.w	r3, r7, #8
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff fe22 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fa23 	bl	800c91c <SDMMC_GetCmdResp3>
 800c4d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b088      	sub	sp, #32
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c4f0:	2306      	movs	r3, #6
 800c4f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4f4:	2340      	movs	r3, #64	; 0x40
 800c4f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c500:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c502:	f107 0308 	add.w	r3, r7, #8
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff fe03 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c50e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c512:	2106      	movs	r1, #6
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f8cf 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c51a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c51c:	69fb      	ldr	r3, [r7, #28]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3720      	adds	r7, #32
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b088      	sub	sp, #32
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c532:	2333      	movs	r3, #51	; 0x33
 800c534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c536:	2340      	movs	r3, #64	; 0x40
 800c538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c53a:	2300      	movs	r3, #0
 800c53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c542:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c544:	f107 0308 	add.w	r3, r7, #8
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff fde2 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c550:	f241 3288 	movw	r2, #5000	; 0x1388
 800c554:	2133      	movs	r1, #51	; 0x33
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f8ae 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c55c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c55e:	69fb      	ldr	r3, [r7, #28]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3720      	adds	r7, #32
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b088      	sub	sp, #32
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c574:	2302      	movs	r3, #2
 800c576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c578:	23c0      	movs	r3, #192	; 0xc0
 800c57a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c57c:	2300      	movs	r3, #0
 800c57e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c586:	f107 0308 	add.w	r3, r7, #8
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff fdc1 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f97c 	bl	800c890 <SDMMC_GetCmdResp2>
 800c598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c59a:	69fb      	ldr	r3, [r7, #28]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3720      	adds	r7, #32
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c5b2:	2309      	movs	r3, #9
 800c5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c5b6:	23c0      	movs	r3, #192	; 0xc0
 800c5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5c4:	f107 0308 	add.w	r3, r7, #8
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff fda2 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 f95d 	bl	800c890 <SDMMC_GetCmdResp2>
 800c5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3720      	adds	r7, #32
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b088      	sub	sp, #32
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5f4:	2340      	movs	r3, #64	; 0x40
 800c5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c602:	f107 0308 	add.w	r3, r7, #8
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff fd83 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	2103      	movs	r1, #3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f9bc 	bl	800c990 <SDMMC_GetCmdResp6>
 800c618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c61a:	69fb      	ldr	r3, [r7, #28]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3720      	adds	r7, #32
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c632:	230d      	movs	r3, #13
 800c634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c63a:	2300      	movs	r3, #0
 800c63c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c63e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c642:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c644:	f107 0308 	add.w	r3, r7, #8
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fd62 	bl	800c114 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c650:	f241 3288 	movw	r2, #5000	; 0x1388
 800c654:	210d      	movs	r1, #13
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f82e 	bl	800c6b8 <SDMMC_GetCmdResp1>
 800c65c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c65e:	69fb      	ldr	r3, [r7, #28]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c668:	b490      	push	{r4, r7}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c670:	4b0f      	ldr	r3, [pc, #60]	; (800c6b0 <SDMMC_GetCmdError+0x48>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a0f      	ldr	r2, [pc, #60]	; (800c6b4 <SDMMC_GetCmdError+0x4c>)
 800c676:	fba2 2303 	umull	r2, r3, r2, r3
 800c67a:	0a5b      	lsrs	r3, r3, #9
 800c67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c680:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c684:	4623      	mov	r3, r4
 800c686:	1e5c      	subs	r4, r3, #1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d102      	bne.n	800c692 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c68c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c690:	e009      	b.n	800c6a6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f2      	beq.n	800c684 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	22c5      	movs	r2, #197	; 0xc5
 800c6a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc90      	pop	{r4, r7}
 800c6ae:	4770      	bx	lr
 800c6b0:	20000000 	.word	0x20000000
 800c6b4:	10624dd3 	.word	0x10624dd3

0800c6b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c6b8:	b590      	push	{r4, r7, lr}
 800c6ba:	b087      	sub	sp, #28
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c6c6:	4b6f      	ldr	r3, [pc, #444]	; (800c884 <SDMMC_GetCmdResp1+0x1cc>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a6f      	ldr	r2, [pc, #444]	; (800c888 <SDMMC_GetCmdResp1+0x1d0>)
 800c6cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d0:	0a5b      	lsrs	r3, r3, #9
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c6d8:	4623      	mov	r3, r4
 800c6da:	1e5c      	subs	r4, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d102      	bne.n	800c6e6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6e4:	e0c9      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ea:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0f0      	beq.n	800c6d8 <SDMMC_GetCmdResp1+0x20>
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1eb      	bne.n	800c6d8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c704:	f003 0304 	and.w	r3, r3, #4
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d004      	beq.n	800c716 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2204      	movs	r2, #4
 800c710:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c712:	2304      	movs	r3, #4
 800c714:	e0b1      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d004      	beq.n	800c72c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2201      	movs	r2, #1
 800c726:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c728:	2301      	movs	r3, #1
 800c72a:	e0a6      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	22c5      	movs	r2, #197	; 0xc5
 800c730:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7ff fd18 	bl	800c168 <SDIO_GetCommandResponse>
 800c738:	4603      	mov	r3, r0
 800c73a:	461a      	mov	r2, r3
 800c73c:	7afb      	ldrb	r3, [r7, #11]
 800c73e:	4293      	cmp	r3, r2
 800c740:	d001      	beq.n	800c746 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c742:	2301      	movs	r3, #1
 800c744:	e099      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c746:	2100      	movs	r1, #0
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7ff fd1a 	bl	800c182 <SDIO_GetResponse>
 800c74e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	4b4e      	ldr	r3, [pc, #312]	; (800c88c <SDMMC_GetCmdResp1+0x1d4>)
 800c754:	4013      	ands	r3, r2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c75a:	2300      	movs	r3, #0
 800c75c:	e08d      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	da02      	bge.n	800c76a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c768:	e087      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c774:	2340      	movs	r3, #64	; 0x40
 800c776:	e080      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c782:	2380      	movs	r3, #128	; 0x80
 800c784:	e079      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c790:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c794:	e071      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c7a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7a4:	e069      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b4:	e061      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c7c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7c4:	e059      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7d4:	e051      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c7e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7e4:	e049      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c7f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7f4:	e041      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c804:	e039      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c814:	e031      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c820:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c824:	e029      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d002      	beq.n	800c836 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c830:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c834:	e021      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c840:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c844:	e019      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c854:	e011      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c864:	e009      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	f003 0308 	and.w	r3, r3, #8
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c870:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c874:	e001      	b.n	800c87a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd90      	pop	{r4, r7, pc}
 800c882:	bf00      	nop
 800c884:	20000000 	.word	0x20000000
 800c888:	10624dd3 	.word	0x10624dd3
 800c88c:	fdffe008 	.word	0xfdffe008

0800c890 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c890:	b490      	push	{r4, r7}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c898:	4b1e      	ldr	r3, [pc, #120]	; (800c914 <SDMMC_GetCmdResp2+0x84>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a1e      	ldr	r2, [pc, #120]	; (800c918 <SDMMC_GetCmdResp2+0x88>)
 800c89e:	fba2 2303 	umull	r2, r3, r2, r3
 800c8a2:	0a5b      	lsrs	r3, r3, #9
 800c8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c8ac:	4623      	mov	r3, r4
 800c8ae:	1e5c      	subs	r4, r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d102      	bne.n	800c8ba <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8b8:	e026      	b.n	800c908 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8be:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d0f0      	beq.n	800c8ac <SDMMC_GetCmdResp2+0x1c>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1eb      	bne.n	800c8ac <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d004      	beq.n	800c8ea <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2204      	movs	r2, #4
 800c8e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8e6:	2304      	movs	r3, #4
 800c8e8:	e00e      	b.n	800c908 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e003      	b.n	800c908 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	22c5      	movs	r2, #197	; 0xc5
 800c904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bc90      	pop	{r4, r7}
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20000000 	.word	0x20000000
 800c918:	10624dd3 	.word	0x10624dd3

0800c91c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c91c:	b490      	push	{r4, r7}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c924:	4b18      	ldr	r3, [pc, #96]	; (800c988 <SDMMC_GetCmdResp3+0x6c>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a18      	ldr	r2, [pc, #96]	; (800c98c <SDMMC_GetCmdResp3+0x70>)
 800c92a:	fba2 2303 	umull	r2, r3, r2, r3
 800c92e:	0a5b      	lsrs	r3, r3, #9
 800c930:	f241 3288 	movw	r2, #5000	; 0x1388
 800c934:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c938:	4623      	mov	r3, r4
 800c93a:	1e5c      	subs	r4, r3, #1
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d102      	bne.n	800c946 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c944:	e01b      	b.n	800c97e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f0      	beq.n	800c938 <SDMMC_GetCmdResp3+0x1c>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1eb      	bne.n	800c938 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c964:	f003 0304 	and.w	r3, r3, #4
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d004      	beq.n	800c976 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2204      	movs	r2, #4
 800c970:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c972:	2304      	movs	r3, #4
 800c974:	e003      	b.n	800c97e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	22c5      	movs	r2, #197	; 0xc5
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bc90      	pop	{r4, r7}
 800c986:	4770      	bx	lr
 800c988:	20000000 	.word	0x20000000
 800c98c:	10624dd3 	.word	0x10624dd3

0800c990 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c990:	b590      	push	{r4, r7, lr}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	460b      	mov	r3, r1
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c99e:	4b34      	ldr	r3, [pc, #208]	; (800ca70 <SDMMC_GetCmdResp6+0xe0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a34      	ldr	r2, [pc, #208]	; (800ca74 <SDMMC_GetCmdResp6+0xe4>)
 800c9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a8:	0a5b      	lsrs	r3, r3, #9
 800c9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ae:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c9b2:	4623      	mov	r3, r4
 800c9b4:	1e5c      	subs	r4, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d102      	bne.n	800c9c0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9be:	e052      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0f0      	beq.n	800c9b2 <SDMMC_GetCmdResp6+0x22>
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1eb      	bne.n	800c9b2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d004      	beq.n	800c9f0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2204      	movs	r2, #4
 800c9ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9ec:	2304      	movs	r3, #4
 800c9ee:	e03a      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d004      	beq.n	800ca06 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e02f      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f7ff fbae 	bl	800c168 <SDIO_GetCommandResponse>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	7afb      	ldrb	r3, [r7, #11]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d001      	beq.n	800ca1a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e025      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	22c5      	movs	r2, #197	; 0xc5
 800ca1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ca20:	2100      	movs	r1, #0
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f7ff fbad 	bl	800c182 <SDIO_GetResponse>
 800ca28:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d106      	bne.n	800ca42 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	0c1b      	lsrs	r3, r3, #16
 800ca38:	b29a      	uxth	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e011      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca50:	e009      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca60:	e001      	b.n	800ca66 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	371c      	adds	r7, #28
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd90      	pop	{r4, r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000000 	.word	0x20000000
 800ca74:	10624dd3 	.word	0x10624dd3

0800ca78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ca78:	b490      	push	{r4, r7}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca80:	4b21      	ldr	r3, [pc, #132]	; (800cb08 <SDMMC_GetCmdResp7+0x90>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a21      	ldr	r2, [pc, #132]	; (800cb0c <SDMMC_GetCmdResp7+0x94>)
 800ca86:	fba2 2303 	umull	r2, r3, r2, r3
 800ca8a:	0a5b      	lsrs	r3, r3, #9
 800ca8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca94:	4623      	mov	r3, r4
 800ca96:	1e5c      	subs	r4, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800caa0:	e02c      	b.n	800cafc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0f0      	beq.n	800ca94 <SDMMC_GetCmdResp7+0x1c>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1eb      	bne.n	800ca94 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac0:	f003 0304 	and.w	r3, r3, #4
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d004      	beq.n	800cad2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2204      	movs	r2, #4
 800cacc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cace:	2304      	movs	r3, #4
 800cad0:	e014      	b.n	800cafc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d004      	beq.n	800cae8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e009      	b.n	800cafc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2240      	movs	r2, #64	; 0x40
 800caf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cafa:	2300      	movs	r3, #0
  
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bc90      	pop	{r4, r7}
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	20000000 	.word	0x20000000
 800cb0c:	10624dd3 	.word	0x10624dd3

0800cb10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cb14:	4904      	ldr	r1, [pc, #16]	; (800cb28 <MX_FATFS_Init+0x18>)
 800cb16:	4805      	ldr	r0, [pc, #20]	; (800cb2c <MX_FATFS_Init+0x1c>)
 800cb18:	f004 f874 	bl	8010c04 <FATFS_LinkDriver>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4b03      	ldr	r3, [pc, #12]	; (800cb30 <MX_FATFS_Init+0x20>)
 800cb22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cb24:	bf00      	nop
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	2000a63c 	.word	0x2000a63c
 800cb2c:	08016ee0 	.word	0x08016ee0
 800cb30:	2000a638 	.word	0x2000a638

0800cb34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cb34:	b480      	push	{r7}
 800cb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cb38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cb4e:	f000 f896 	bl	800cc7e <BSP_SD_IsDetected>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d001      	beq.n	800cb5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e012      	b.n	800cb82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cb5c:	480b      	ldr	r0, [pc, #44]	; (800cb8c <BSP_SD_Init+0x48>)
 800cb5e:	f7fb ff9d 	bl	8008a9c <HAL_SD_Init>
 800cb62:	4603      	mov	r3, r0
 800cb64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d109      	bne.n	800cb80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cb6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cb70:	4806      	ldr	r0, [pc, #24]	; (800cb8c <BSP_SD_Init+0x48>)
 800cb72:	f7fc fd47 	bl	8009604 <HAL_SD_ConfigWideBusOperation>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cb80:	79fb      	ldrb	r3, [r7, #7]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	2000a4d0 	.word	0x2000a4d0

0800cb90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	4806      	ldr	r0, [pc, #24]	; (800cbc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cba8:	f7fc f808 	bl	8008bbc <HAL_SD_ReadBlocks_DMA>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d001      	beq.n	800cbb6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3718      	adds	r7, #24
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	2000a4d0 	.word	0x2000a4d0

0800cbc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	68f9      	ldr	r1, [r7, #12]
 800cbda:	4806      	ldr	r0, [pc, #24]	; (800cbf4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cbdc:	f7fc f8d6 	bl	8008d8c <HAL_SD_WriteBlocks_DMA>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	2000a4d0 	.word	0x2000a4d0

0800cbf8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cbfc:	4805      	ldr	r0, [pc, #20]	; (800cc14 <BSP_SD_GetCardState+0x1c>)
 800cbfe:	f7fc fd7d 	bl	80096fc <HAL_SD_GetCardState>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b04      	cmp	r3, #4
 800cc06:	bf14      	ite	ne
 800cc08:	2301      	movne	r3, #1
 800cc0a:	2300      	moveq	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	2000a4d0 	.word	0x2000a4d0

0800cc18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	4803      	ldr	r0, [pc, #12]	; (800cc30 <BSP_SD_GetCardInfo+0x18>)
 800cc24:	f7fc fcc2 	bl	80095ac <HAL_SD_GetCardInfo>
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	2000a4d0 	.word	0x2000a4d0

0800cc34 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cc3c:	f000 f818 	bl	800cc70 <BSP_SD_AbortCallback>
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cc50:	f000 f9a8 	bl	800cfa4 <BSP_SD_WriteCpltCallback>
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cc64:	f000 f9aa 	bl	800cfbc <BSP_SD_ReadCpltCallback>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cc70:	b480      	push	{r7}
 800cc72:	af00      	add	r7, sp, #0

}
 800cc74:	bf00      	nop
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cc84:	2301      	movs	r3, #1
 800cc86:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cc88:	f000 f80c 	bl	800cca4 <BSP_PlatformIsDetected>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cc92:	2300      	movs	r3, #0
 800cc94:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cc96:	79fb      	ldrb	r3, [r7, #7]
 800cc98:	b2db      	uxtb	r3, r3
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
	...

0800cca4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ccae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ccb2:	4806      	ldr	r0, [pc, #24]	; (800cccc <BSP_PlatformIsDetected+0x28>)
 800ccb4:	f7fa f85e 	bl	8006d74 <HAL_GPIO_ReadPin>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ccc2:	79fb      	ldrb	r3, [r7, #7]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	40020000 	.word	0x40020000

0800ccd0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ccd8:	f7f8 fdc2 	bl	8005860 <HAL_GetTick>
 800ccdc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ccde:	e006      	b.n	800ccee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cce0:	f7ff ff8a 	bl	800cbf8 <BSP_SD_GetCardState>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e009      	b.n	800cd02 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ccee:	f7f8 fdb7 	bl	8005860 <HAL_GetTick>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d8f0      	bhi.n	800cce0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	4603      	mov	r3, r0
 800cd14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd16:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <SD_CheckStatus+0x38>)
 800cd18:	2201      	movs	r2, #1
 800cd1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cd1c:	f7ff ff6c 	bl	800cbf8 <BSP_SD_GetCardState>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d107      	bne.n	800cd36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd26:	4b07      	ldr	r3, [pc, #28]	; (800cd44 <SD_CheckStatus+0x38>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	f023 0301 	bic.w	r3, r3, #1
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <SD_CheckStatus+0x38>)
 800cd34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd36:	4b03      	ldr	r3, [pc, #12]	; (800cd44 <SD_CheckStatus+0x38>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	b2db      	uxtb	r3, r3
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20000009 	.word	0x20000009

0800cd48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cd52:	f7ff fef7 	bl	800cb44 <BSP_SD_Init>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d107      	bne.n	800cd6c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff ffd4 	bl	800cd0c <SD_CheckStatus>
 800cd64:	4603      	mov	r3, r0
 800cd66:	461a      	mov	r2, r3
 800cd68:	4b04      	ldr	r3, [pc, #16]	; (800cd7c <SD_initialize+0x34>)
 800cd6a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cd6c:	4b03      	ldr	r3, [pc, #12]	; (800cd7c <SD_initialize+0x34>)
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	b2db      	uxtb	r3, r3
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000009 	.word	0x20000009

0800cd80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff ffbd 	bl	800cd0c <SD_CheckStatus>
 800cd92:	4603      	mov	r3, r0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	607a      	str	r2, [r7, #4]
 800cda6:	603b      	str	r3, [r7, #0]
 800cda8:	4603      	mov	r3, r0
 800cdaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cdb0:	f247 5030 	movw	r0, #30000	; 0x7530
 800cdb4:	f7ff ff8c 	bl	800ccd0 <SD_CheckStatusWithTimeout>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	da01      	bge.n	800cdc2 <SD_read+0x26>
  {
    return res;
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	e03b      	b.n	800ce3a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	6879      	ldr	r1, [r7, #4]
 800cdc6:	68b8      	ldr	r0, [r7, #8]
 800cdc8:	f7ff fee2 	bl	800cb90 <BSP_SD_ReadBlocks_DMA>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d132      	bne.n	800ce38 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800cdd2:	4b1c      	ldr	r3, [pc, #112]	; (800ce44 <SD_read+0xa8>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800cdd8:	f7f8 fd42 	bl	8005860 <HAL_GetTick>
 800cddc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cdde:	bf00      	nop
 800cde0:	4b18      	ldr	r3, [pc, #96]	; (800ce44 <SD_read+0xa8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d108      	bne.n	800cdfa <SD_read+0x5e>
 800cde8:	f7f8 fd3a 	bl	8005860 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	f247 522f 	movw	r2, #29999	; 0x752f
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d9f2      	bls.n	800cde0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800cdfa:	4b12      	ldr	r3, [pc, #72]	; (800ce44 <SD_read+0xa8>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d102      	bne.n	800ce08 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	75fb      	strb	r3, [r7, #23]
 800ce06:	e017      	b.n	800ce38 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ce08:	4b0e      	ldr	r3, [pc, #56]	; (800ce44 <SD_read+0xa8>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ce0e:	f7f8 fd27 	bl	8005860 <HAL_GetTick>
 800ce12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ce14:	e007      	b.n	800ce26 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce16:	f7ff feef 	bl	800cbf8 <BSP_SD_GetCardState>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <SD_read+0x8a>
          {
            res = RES_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ce24:	e008      	b.n	800ce38 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ce26:	f7f8 fd1b 	bl	8005860 <HAL_GetTick>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	f247 522f 	movw	r2, #29999	; 0x752f
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d9ee      	bls.n	800ce16 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20007b68 	.word	0x20007b68

0800ce48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ce5c:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <SD_write+0xa8>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ce62:	f247 5030 	movw	r0, #30000	; 0x7530
 800ce66:	f7ff ff33 	bl	800ccd0 <SD_CheckStatusWithTimeout>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	da01      	bge.n	800ce74 <SD_write+0x2c>
  {
    return res;
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	e038      	b.n	800cee6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	6879      	ldr	r1, [r7, #4]
 800ce78:	68b8      	ldr	r0, [r7, #8]
 800ce7a:	f7ff fea3 	bl	800cbc4 <BSP_SD_WriteBlocks_DMA>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d12f      	bne.n	800cee4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ce84:	f7f8 fcec 	bl	8005860 <HAL_GetTick>
 800ce88:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ce8a:	bf00      	nop
 800ce8c:	4b18      	ldr	r3, [pc, #96]	; (800cef0 <SD_write+0xa8>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d108      	bne.n	800cea6 <SD_write+0x5e>
 800ce94:	f7f8 fce4 	bl	8005860 <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	f247 522f 	movw	r2, #29999	; 0x752f
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d9f2      	bls.n	800ce8c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800cea6:	4b12      	ldr	r3, [pc, #72]	; (800cef0 <SD_write+0xa8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	75fb      	strb	r3, [r7, #23]
 800ceb2:	e017      	b.n	800cee4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ceb4:	4b0e      	ldr	r3, [pc, #56]	; (800cef0 <SD_write+0xa8>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ceba:	f7f8 fcd1 	bl	8005860 <HAL_GetTick>
 800cebe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cec0:	e007      	b.n	800ced2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cec2:	f7ff fe99 	bl	800cbf8 <BSP_SD_GetCardState>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <SD_write+0x8a>
          {
            res = RES_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	75fb      	strb	r3, [r7, #23]
            break;
 800ced0:	e008      	b.n	800cee4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ced2:	f7f8 fcc5 	bl	8005860 <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	f247 522f 	movw	r2, #29999	; 0x752f
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d9ee      	bls.n	800cec2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	20007b64 	.word	0x20007b64

0800cef4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08c      	sub	sp, #48	; 0x30
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	603a      	str	r2, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
 800cf00:	460b      	mov	r3, r1
 800cf02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf0a:	4b25      	ldr	r3, [pc, #148]	; (800cfa0 <SD_ioctl+0xac>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	f003 0301 	and.w	r3, r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <SD_ioctl+0x28>
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e03c      	b.n	800cf96 <SD_ioctl+0xa2>

  switch (cmd)
 800cf1c:	79bb      	ldrb	r3, [r7, #6]
 800cf1e:	2b03      	cmp	r3, #3
 800cf20:	d834      	bhi.n	800cf8c <SD_ioctl+0x98>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <SD_ioctl+0x34>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800cf39 	.word	0x0800cf39
 800cf2c:	0800cf41 	.word	0x0800cf41
 800cf30:	0800cf59 	.word	0x0800cf59
 800cf34:	0800cf73 	.word	0x0800cf73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf3e:	e028      	b.n	800cf92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf40:	f107 030c 	add.w	r3, r7, #12
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fe67 	bl	800cc18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cf4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf56:	e01c      	b.n	800cf92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf58:	f107 030c 	add.w	r3, r7, #12
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fe5b 	bl	800cc18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf70:	e00f      	b.n	800cf92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf72:	f107 030c 	add.w	r3, r7, #12
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fe4e 	bl	800cc18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	0a5a      	lsrs	r2, r3, #9
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf8a:	e002      	b.n	800cf92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cf92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3730      	adds	r7, #48	; 0x30
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20000009 	.word	0x20000009

0800cfa4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cfa8:	4b03      	ldr	r3, [pc, #12]	; (800cfb8 <BSP_SD_WriteCpltCallback+0x14>)
 800cfaa:	2201      	movs	r2, #1
 800cfac:	601a      	str	r2, [r3, #0]
}
 800cfae:	bf00      	nop
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	20007b64 	.word	0x20007b64

0800cfbc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cfc0:	4b03      	ldr	r3, [pc, #12]	; (800cfd0 <BSP_SD_ReadCpltCallback+0x14>)
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	601a      	str	r2, [r3, #0]
}
 800cfc6:	bf00      	nop
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	20007b68 	.word	0x20007b68

0800cfd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cfde:	79fb      	ldrb	r3, [r7, #7]
 800cfe0:	4a08      	ldr	r2, [pc, #32]	; (800d004 <disk_status+0x30>)
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	79fa      	ldrb	r2, [r7, #7]
 800cfec:	4905      	ldr	r1, [pc, #20]	; (800d004 <disk_status+0x30>)
 800cfee:	440a      	add	r2, r1
 800cff0:	7a12      	ldrb	r2, [r2, #8]
 800cff2:	4610      	mov	r0, r2
 800cff4:	4798      	blx	r3
 800cff6:	4603      	mov	r3, r0
 800cff8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	20007d94 	.word	0x20007d94

0800d008 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	4a0d      	ldr	r2, [pc, #52]	; (800d050 <disk_initialize+0x48>)
 800d01a:	5cd3      	ldrb	r3, [r2, r3]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d111      	bne.n	800d044 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	4a0b      	ldr	r2, [pc, #44]	; (800d050 <disk_initialize+0x48>)
 800d024:	2101      	movs	r1, #1
 800d026:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	4a09      	ldr	r2, [pc, #36]	; (800d050 <disk_initialize+0x48>)
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	79fa      	ldrb	r2, [r7, #7]
 800d036:	4906      	ldr	r1, [pc, #24]	; (800d050 <disk_initialize+0x48>)
 800d038:	440a      	add	r2, r1
 800d03a:	7a12      	ldrb	r2, [r2, #8]
 800d03c:	4610      	mov	r0, r2
 800d03e:	4798      	blx	r3
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d044:	7bfb      	ldrb	r3, [r7, #15]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20007d94 	.word	0x20007d94

0800d054 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d054:	b590      	push	{r4, r7, lr}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	607a      	str	r2, [r7, #4]
 800d05e:	603b      	str	r3, [r7, #0]
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d064:	7bfb      	ldrb	r3, [r7, #15]
 800d066:	4a0a      	ldr	r2, [pc, #40]	; (800d090 <disk_read+0x3c>)
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	689c      	ldr	r4, [r3, #8]
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4a07      	ldr	r2, [pc, #28]	; (800d090 <disk_read+0x3c>)
 800d074:	4413      	add	r3, r2
 800d076:	7a18      	ldrb	r0, [r3, #8]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	68b9      	ldr	r1, [r7, #8]
 800d07e:	47a0      	blx	r4
 800d080:	4603      	mov	r3, r0
 800d082:	75fb      	strb	r3, [r7, #23]
  return res;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
}
 800d086:	4618      	mov	r0, r3
 800d088:	371c      	adds	r7, #28
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd90      	pop	{r4, r7, pc}
 800d08e:	bf00      	nop
 800d090:	20007d94 	.word	0x20007d94

0800d094 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d094:	b590      	push	{r4, r7, lr}
 800d096:	b087      	sub	sp, #28
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <disk_write+0x3c>)
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	68dc      	ldr	r4, [r3, #12]
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	4a07      	ldr	r2, [pc, #28]	; (800d0d0 <disk_write+0x3c>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	7a18      	ldrb	r0, [r3, #8]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	68b9      	ldr	r1, [r7, #8]
 800d0be:	47a0      	blx	r4
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd90      	pop	{r4, r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20007d94 	.word	0x20007d94

0800d0d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	603a      	str	r2, [r7, #0]
 800d0de:	71fb      	strb	r3, [r7, #7]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d0e4:	79fb      	ldrb	r3, [r7, #7]
 800d0e6:	4a09      	ldr	r2, [pc, #36]	; (800d10c <disk_ioctl+0x38>)
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	79fa      	ldrb	r2, [r7, #7]
 800d0f2:	4906      	ldr	r1, [pc, #24]	; (800d10c <disk_ioctl+0x38>)
 800d0f4:	440a      	add	r2, r1
 800d0f6:	7a10      	ldrb	r0, [r2, #8]
 800d0f8:	79b9      	ldrb	r1, [r7, #6]
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	4798      	blx	r3
 800d0fe:	4603      	mov	r3, r0
 800d100:	73fb      	strb	r3, [r7, #15]
  return res;
 800d102:	7bfb      	ldrb	r3, [r7, #15]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20007d94 	.word	0x20007d94

0800d110 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3301      	adds	r3, #1
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d120:	89fb      	ldrh	r3, [r7, #14]
 800d122:	021b      	lsls	r3, r3, #8
 800d124:	b21a      	sxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	4313      	orrs	r3, r2
 800d12e:	b21b      	sxth	r3, r3
 800d130:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d132:	89fb      	ldrh	r3, [r7, #14]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3303      	adds	r3, #3
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	021b      	lsls	r3, r3, #8
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	3202      	adds	r2, #2
 800d158:	7812      	ldrb	r2, [r2, #0]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	021b      	lsls	r3, r3, #8
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	3201      	adds	r2, #1
 800d166:	7812      	ldrb	r2, [r2, #0]
 800d168:	4313      	orrs	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	7812      	ldrb	r2, [r2, #0]
 800d174:	4313      	orrs	r3, r2
 800d176:	60fb      	str	r3, [r7, #12]
	return rv;
 800d178:	68fb      	ldr	r3, [r7, #12]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3714      	adds	r7, #20
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d186:	b480      	push	{r7}
 800d188:	b083      	sub	sp, #12
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	887a      	ldrh	r2, [r7, #2]
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	701a      	strb	r2, [r3, #0]
 800d19e:	887b      	ldrh	r3, [r7, #2]
 800d1a0:	0a1b      	lsrs	r3, r3, #8
 800d1a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	607a      	str	r2, [r7, #4]
 800d1aa:	887a      	ldrh	r2, [r7, #2]
 800d1ac:	b2d2      	uxtb	r2, r2
 800d1ae:	701a      	strb	r2, [r3, #0]
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	1c5a      	adds	r2, r3, #1
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	b2d2      	uxtb	r2, r2
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	0a1b      	lsrs	r3, r3, #8
 800d1d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	607a      	str	r2, [r7, #4]
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	b2d2      	uxtb	r2, r2
 800d1e2:	701a      	strb	r2, [r3, #0]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	0a1b      	lsrs	r3, r3, #8
 800d1e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	b2d2      	uxtb	r2, r2
 800d1f4:	701a      	strb	r2, [r3, #0]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	0a1b      	lsrs	r3, r3, #8
 800d1fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	607a      	str	r2, [r7, #4]
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	b2d2      	uxtb	r2, r2
 800d206:	701a      	strb	r2, [r3, #0]
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d214:	b480      	push	{r7}
 800d216:	b087      	sub	sp, #28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00d      	beq.n	800d24a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	1c53      	adds	r3, r2, #1
 800d232:	613b      	str	r3, [r7, #16]
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	1c59      	adds	r1, r3, #1
 800d238:	6179      	str	r1, [r7, #20]
 800d23a:	7812      	ldrb	r2, [r2, #0]
 800d23c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	3b01      	subs	r3, #1
 800d242:	607b      	str	r3, [r7, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1f1      	bne.n	800d22e <mem_cpy+0x1a>
	}
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d256:	b480      	push	{r7}
 800d258:	b087      	sub	sp, #28
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	1c5a      	adds	r2, r3, #1
 800d26a:	617a      	str	r2, [r7, #20]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	b2d2      	uxtb	r2, r2
 800d270:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3b01      	subs	r3, #1
 800d276:	607b      	str	r3, [r7, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1f3      	bne.n	800d266 <mem_set+0x10>
}
 800d27e:	bf00      	nop
 800d280:	371c      	adds	r7, #28
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d28a:	b480      	push	{r7}
 800d28c:	b089      	sub	sp, #36	; 0x24
 800d28e:	af00      	add	r7, sp, #0
 800d290:	60f8      	str	r0, [r7, #12]
 800d292:	60b9      	str	r1, [r7, #8]
 800d294:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	61fb      	str	r3, [r7, #28]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	61fa      	str	r2, [r7, #28]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	1c5a      	adds	r2, r3, #1
 800d2b0:	61ba      	str	r2, [r7, #24]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	1acb      	subs	r3, r1, r3
 800d2b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	607b      	str	r3, [r7, #4]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <mem_cmp+0x40>
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0eb      	beq.n	800d2a2 <mem_cmp+0x18>

	return r;
 800d2ca:	697b      	ldr	r3, [r7, #20]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3724      	adds	r7, #36	; 0x24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d2e2:	e002      	b.n	800d2ea <chk_chr+0x12>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	607b      	str	r3, [r7, #4]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d005      	beq.n	800d2fe <chk_chr+0x26>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d1f2      	bne.n	800d2e4 <chk_chr+0xc>
	return *str;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	781b      	ldrb	r3, [r3, #0]
}
 800d302:	4618      	mov	r0, r3
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
	...

0800d310 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d31a:	2300      	movs	r3, #0
 800d31c:	60bb      	str	r3, [r7, #8]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	60fb      	str	r3, [r7, #12]
 800d322:	e029      	b.n	800d378 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d324:	4a27      	ldr	r2, [pc, #156]	; (800d3c4 <chk_lock+0xb4>)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	011b      	lsls	r3, r3, #4
 800d32a:	4413      	add	r3, r2
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01d      	beq.n	800d36e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d332:	4a24      	ldr	r2, [pc, #144]	; (800d3c4 <chk_lock+0xb4>)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	011b      	lsls	r3, r3, #4
 800d338:	4413      	add	r3, r2
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d116      	bne.n	800d372 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d344:	4a1f      	ldr	r2, [pc, #124]	; (800d3c4 <chk_lock+0xb4>)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	011b      	lsls	r3, r3, #4
 800d34a:	4413      	add	r3, r2
 800d34c:	3304      	adds	r3, #4
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d354:	429a      	cmp	r2, r3
 800d356:	d10c      	bne.n	800d372 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d358:	4a1a      	ldr	r2, [pc, #104]	; (800d3c4 <chk_lock+0xb4>)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	3308      	adds	r3, #8
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d368:	429a      	cmp	r2, r3
 800d36a:	d102      	bne.n	800d372 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d36c:	e007      	b.n	800d37e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d36e:	2301      	movs	r3, #1
 800d370:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3301      	adds	r3, #1
 800d376:	60fb      	str	r3, [r7, #12]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d9d2      	bls.n	800d324 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d109      	bne.n	800d398 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d102      	bne.n	800d390 <chk_lock+0x80>
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d101      	bne.n	800d394 <chk_lock+0x84>
 800d390:	2300      	movs	r3, #0
 800d392:	e010      	b.n	800d3b6 <chk_lock+0xa6>
 800d394:	2312      	movs	r3, #18
 800d396:	e00e      	b.n	800d3b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d108      	bne.n	800d3b0 <chk_lock+0xa0>
 800d39e:	4a09      	ldr	r2, [pc, #36]	; (800d3c4 <chk_lock+0xb4>)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	011b      	lsls	r3, r3, #4
 800d3a4:	4413      	add	r3, r2
 800d3a6:	330c      	adds	r3, #12
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3ae:	d101      	bne.n	800d3b4 <chk_lock+0xa4>
 800d3b0:	2310      	movs	r3, #16
 800d3b2:	e000      	b.n	800d3b6 <chk_lock+0xa6>
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	20007b74 	.word	0x20007b74

0800d3c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	607b      	str	r3, [r7, #4]
 800d3d2:	e002      	b.n	800d3da <enq_lock+0x12>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	607b      	str	r3, [r7, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d806      	bhi.n	800d3ee <enq_lock+0x26>
 800d3e0:	4a09      	ldr	r2, [pc, #36]	; (800d408 <enq_lock+0x40>)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	011b      	lsls	r3, r3, #4
 800d3e6:	4413      	add	r3, r2
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1f2      	bne.n	800d3d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	370c      	adds	r7, #12
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	20007b74 	.word	0x20007b74

0800d40c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
 800d41a:	e01f      	b.n	800d45c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d41c:	4a41      	ldr	r2, [pc, #260]	; (800d524 <inc_lock+0x118>)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	4413      	add	r3, r2
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d113      	bne.n	800d456 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d42e:	4a3d      	ldr	r2, [pc, #244]	; (800d524 <inc_lock+0x118>)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	011b      	lsls	r3, r3, #4
 800d434:	4413      	add	r3, r2
 800d436:	3304      	adds	r3, #4
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d43e:	429a      	cmp	r2, r3
 800d440:	d109      	bne.n	800d456 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d442:	4a38      	ldr	r2, [pc, #224]	; (800d524 <inc_lock+0x118>)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	011b      	lsls	r3, r3, #4
 800d448:	4413      	add	r3, r2
 800d44a:	3308      	adds	r3, #8
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d452:	429a      	cmp	r2, r3
 800d454:	d006      	beq.n	800d464 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3301      	adds	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d9dc      	bls.n	800d41c <inc_lock+0x10>
 800d462:	e000      	b.n	800d466 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d464:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d132      	bne.n	800d4d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d46c:	2300      	movs	r3, #0
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	e002      	b.n	800d478 <inc_lock+0x6c>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	3301      	adds	r3, #1
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d806      	bhi.n	800d48c <inc_lock+0x80>
 800d47e:	4a29      	ldr	r2, [pc, #164]	; (800d524 <inc_lock+0x118>)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	4413      	add	r3, r2
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1f2      	bne.n	800d472 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d101      	bne.n	800d496 <inc_lock+0x8a>
 800d492:	2300      	movs	r3, #0
 800d494:	e040      	b.n	800d518 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4922      	ldr	r1, [pc, #136]	; (800d524 <inc_lock+0x118>)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	011b      	lsls	r3, r3, #4
 800d4a0:	440b      	add	r3, r1
 800d4a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	689a      	ldr	r2, [r3, #8]
 800d4a8:	491e      	ldr	r1, [pc, #120]	; (800d524 <inc_lock+0x118>)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	011b      	lsls	r3, r3, #4
 800d4ae:	440b      	add	r3, r1
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	695a      	ldr	r2, [r3, #20]
 800d4b8:	491a      	ldr	r1, [pc, #104]	; (800d524 <inc_lock+0x118>)
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	011b      	lsls	r3, r3, #4
 800d4be:	440b      	add	r3, r1
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d4c4:	4a17      	ldr	r2, [pc, #92]	; (800d524 <inc_lock+0x118>)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	4413      	add	r3, r2
 800d4cc:	330c      	adds	r3, #12
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d009      	beq.n	800d4ec <inc_lock+0xe0>
 800d4d8:	4a12      	ldr	r2, [pc, #72]	; (800d524 <inc_lock+0x118>)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	011b      	lsls	r3, r3, #4
 800d4de:	4413      	add	r3, r2
 800d4e0:	330c      	adds	r3, #12
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <inc_lock+0xe0>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	e015      	b.n	800d518 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d108      	bne.n	800d504 <inc_lock+0xf8>
 800d4f2:	4a0c      	ldr	r2, [pc, #48]	; (800d524 <inc_lock+0x118>)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	011b      	lsls	r3, r3, #4
 800d4f8:	4413      	add	r3, r2
 800d4fa:	330c      	adds	r3, #12
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	3301      	adds	r3, #1
 800d500:	b29a      	uxth	r2, r3
 800d502:	e001      	b.n	800d508 <inc_lock+0xfc>
 800d504:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d508:	4906      	ldr	r1, [pc, #24]	; (800d524 <inc_lock+0x118>)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	011b      	lsls	r3, r3, #4
 800d50e:	440b      	add	r3, r1
 800d510:	330c      	adds	r3, #12
 800d512:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3301      	adds	r3, #1
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3714      	adds	r7, #20
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr
 800d524:	20007b74 	.word	0x20007b74

0800d528 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3b01      	subs	r3, #1
 800d534:	607b      	str	r3, [r7, #4]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d825      	bhi.n	800d588 <dec_lock+0x60>
		n = Files[i].ctr;
 800d53c:	4a17      	ldr	r2, [pc, #92]	; (800d59c <dec_lock+0x74>)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	4413      	add	r3, r2
 800d544:	330c      	adds	r3, #12
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d54a:	89fb      	ldrh	r3, [r7, #14]
 800d54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d550:	d101      	bne.n	800d556 <dec_lock+0x2e>
 800d552:	2300      	movs	r3, #0
 800d554:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d556:	89fb      	ldrh	r3, [r7, #14]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <dec_lock+0x3a>
 800d55c:	89fb      	ldrh	r3, [r7, #14]
 800d55e:	3b01      	subs	r3, #1
 800d560:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d562:	4a0e      	ldr	r2, [pc, #56]	; (800d59c <dec_lock+0x74>)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	011b      	lsls	r3, r3, #4
 800d568:	4413      	add	r3, r2
 800d56a:	330c      	adds	r3, #12
 800d56c:	89fa      	ldrh	r2, [r7, #14]
 800d56e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d570:	89fb      	ldrh	r3, [r7, #14]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d105      	bne.n	800d582 <dec_lock+0x5a>
 800d576:	4a09      	ldr	r2, [pc, #36]	; (800d59c <dec_lock+0x74>)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	4413      	add	r3, r2
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	737b      	strb	r3, [r7, #13]
 800d586:	e001      	b.n	800d58c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d588:	2302      	movs	r3, #2
 800d58a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d58c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20007b74 	.word	0x20007b74

0800d5a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	e010      	b.n	800d5d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d5ae:	4a0d      	ldr	r2, [pc, #52]	; (800d5e4 <clear_lock+0x44>)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	011b      	lsls	r3, r3, #4
 800d5b4:	4413      	add	r3, r2
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d105      	bne.n	800d5ca <clear_lock+0x2a>
 800d5be:	4a09      	ldr	r2, [pc, #36]	; (800d5e4 <clear_lock+0x44>)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	011b      	lsls	r3, r3, #4
 800d5c4:	4413      	add	r3, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	60fb      	str	r3, [r7, #12]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d9eb      	bls.n	800d5ae <clear_lock+0xe>
	}
}
 800d5d6:	bf00      	nop
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	20007b74 	.word	0x20007b74

0800d5e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	78db      	ldrb	r3, [r3, #3]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d034      	beq.n	800d666 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7858      	ldrb	r0, [r3, #1]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d60c:	2301      	movs	r3, #1
 800d60e:	697a      	ldr	r2, [r7, #20]
 800d610:	f7ff fd40 	bl	800d094 <disk_write>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d002      	beq.n	800d620 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	73fb      	strb	r3, [r7, #15]
 800d61e:	e022      	b.n	800d666 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	1ad2      	subs	r2, r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d632:	429a      	cmp	r2, r3
 800d634:	d217      	bcs.n	800d666 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	789b      	ldrb	r3, [r3, #2]
 800d63a:	613b      	str	r3, [r7, #16]
 800d63c:	e010      	b.n	800d660 <sync_window+0x78>
					wsect += fs->fsize;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	4413      	add	r3, r2
 800d646:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	7858      	ldrb	r0, [r3, #1]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d652:	2301      	movs	r3, #1
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	f7ff fd1d 	bl	800d094 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	613b      	str	r3, [r7, #16]
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	2b01      	cmp	r3, #1
 800d664:	d8eb      	bhi.n	800d63e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d666:	7bfb      	ldrb	r3, [r7, #15]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d01b      	beq.n	800d6c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7ff ffad 	bl	800d5e8 <sync_window>
 800d68e:	4603      	mov	r3, r0
 800d690:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d113      	bne.n	800d6c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7858      	ldrb	r0, [r3, #1]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	f7ff fcd5 	bl	800d054 <disk_read>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	683a      	ldr	r2, [r7, #0]
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff ff87 	bl	800d5e8 <sync_window>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d159      	bne.n	800d798 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b03      	cmp	r3, #3
 800d6ea:	d149      	bne.n	800d780 <sync_fs+0xb4>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	791b      	ldrb	r3, [r3, #4]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d145      	bne.n	800d780 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	899b      	ldrh	r3, [r3, #12]
 800d6fe:	461a      	mov	r2, r3
 800d700:	2100      	movs	r1, #0
 800d702:	f7ff fda8 	bl	800d256 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	333c      	adds	r3, #60	; 0x3c
 800d70a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d70e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff fd37 	bl	800d186 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	333c      	adds	r3, #60	; 0x3c
 800d71c:	4921      	ldr	r1, [pc, #132]	; (800d7a4 <sync_fs+0xd8>)
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff fd4c 	bl	800d1bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	333c      	adds	r3, #60	; 0x3c
 800d728:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d72c:	491e      	ldr	r1, [pc, #120]	; (800d7a8 <sync_fs+0xdc>)
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff fd44 	bl	800d1bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	333c      	adds	r3, #60	; 0x3c
 800d738:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	4619      	mov	r1, r3
 800d742:	4610      	mov	r0, r2
 800d744:	f7ff fd3a 	bl	800d1bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	333c      	adds	r3, #60	; 0x3c
 800d74c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	695b      	ldr	r3, [r3, #20]
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7ff fd30 	bl	800d1bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d760:	1c5a      	adds	r2, r3, #1
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7858      	ldrb	r0, [r3, #1]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d774:	2301      	movs	r3, #1
 800d776:	f7ff fc8d 	bl	800d094 <disk_write>
			fs->fsi_flag = 0;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	785b      	ldrb	r3, [r3, #1]
 800d784:	2200      	movs	r2, #0
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff fca3 	bl	800d0d4 <disk_ioctl>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <sync_fs+0xcc>
 800d794:	2301      	movs	r3, #1
 800d796:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d798:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	41615252 	.word	0x41615252
 800d7a8:	61417272 	.word	0x61417272

0800d7ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	3b02      	subs	r3, #2
 800d7ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6a1b      	ldr	r3, [r3, #32]
 800d7c0:	3b02      	subs	r3, #2
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d301      	bcc.n	800d7cc <clust2sect+0x20>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e008      	b.n	800d7de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	895b      	ldrh	r3, [r3, #10]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	fb03 f202 	mul.w	r2, r3, r2
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7dc:	4413      	add	r3, r2
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b086      	sub	sp, #24
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d904      	bls.n	800d80a <get_fat+0x20>
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	429a      	cmp	r2, r3
 800d808:	d302      	bcc.n	800d810 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d80a:	2301      	movs	r3, #1
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	e0b7      	b.n	800d980 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d810:	f04f 33ff 	mov.w	r3, #4294967295
 800d814:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d05a      	beq.n	800d8d4 <get_fat+0xea>
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d07d      	beq.n	800d91e <get_fat+0x134>
 800d822:	2b01      	cmp	r3, #1
 800d824:	f040 80a2 	bne.w	800d96c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	085b      	lsrs	r3, r3, #1
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4413      	add	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	899b      	ldrh	r3, [r3, #12]
 800d83e:	4619      	mov	r1, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	fbb3 f3f1 	udiv	r3, r3, r1
 800d846:	4413      	add	r3, r2
 800d848:	4619      	mov	r1, r3
 800d84a:	6938      	ldr	r0, [r7, #16]
 800d84c:	f7ff ff10 	bl	800d670 <move_window>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	f040 808d 	bne.w	800d972 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	1c5a      	adds	r2, r3, #1
 800d85c:	60fa      	str	r2, [r7, #12]
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	8992      	ldrh	r2, [r2, #12]
 800d862:	fbb3 f1f2 	udiv	r1, r3, r2
 800d866:	fb02 f201 	mul.w	r2, r2, r1
 800d86a:	1a9b      	subs	r3, r3, r2
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	4413      	add	r3, r2
 800d870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d874:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	899b      	ldrh	r3, [r3, #12]
 800d87e:	4619      	mov	r1, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	fbb3 f3f1 	udiv	r3, r3, r1
 800d886:	4413      	add	r3, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	6938      	ldr	r0, [r7, #16]
 800d88c:	f7ff fef0 	bl	800d670 <move_window>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d16f      	bne.n	800d976 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	899b      	ldrh	r3, [r3, #12]
 800d89a:	461a      	mov	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8a2:	fb02 f201 	mul.w	r2, r2, r1
 800d8a6:	1a9b      	subs	r3, r3, r2
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8b0:	021b      	lsls	r3, r3, #8
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <get_fat+0xe0>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	091b      	lsrs	r3, r3, #4
 800d8c8:	e002      	b.n	800d8d0 <get_fat+0xe6>
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8d0:	617b      	str	r3, [r7, #20]
			break;
 800d8d2:	e055      	b.n	800d980 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	899b      	ldrh	r3, [r3, #12]
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8e8:	4413      	add	r3, r2
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6938      	ldr	r0, [r7, #16]
 800d8ee:	f7ff febf 	bl	800d670 <move_window>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d140      	bne.n	800d97a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	005b      	lsls	r3, r3, #1
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	8992      	ldrh	r2, [r2, #12]
 800d906:	fbb3 f0f2 	udiv	r0, r3, r2
 800d90a:	fb02 f200 	mul.w	r2, r2, r0
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	440b      	add	r3, r1
 800d912:	4618      	mov	r0, r3
 800d914:	f7ff fbfc 	bl	800d110 <ld_word>
 800d918:	4603      	mov	r3, r0
 800d91a:	617b      	str	r3, [r7, #20]
			break;
 800d91c:	e030      	b.n	800d980 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	899b      	ldrh	r3, [r3, #12]
 800d926:	089b      	lsrs	r3, r3, #2
 800d928:	b29b      	uxth	r3, r3
 800d92a:	4619      	mov	r1, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d932:	4413      	add	r3, r2
 800d934:	4619      	mov	r1, r3
 800d936:	6938      	ldr	r0, [r7, #16]
 800d938:	f7ff fe9a 	bl	800d670 <move_window>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d11d      	bne.n	800d97e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	8992      	ldrh	r2, [r2, #12]
 800d950:	fbb3 f0f2 	udiv	r0, r3, r2
 800d954:	fb02 f200 	mul.w	r2, r2, r0
 800d958:	1a9b      	subs	r3, r3, r2
 800d95a:	440b      	add	r3, r1
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff fbef 	bl	800d140 <ld_dword>
 800d962:	4603      	mov	r3, r0
 800d964:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d968:	617b      	str	r3, [r7, #20]
			break;
 800d96a:	e009      	b.n	800d980 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d96c:	2301      	movs	r3, #1
 800d96e:	617b      	str	r3, [r7, #20]
 800d970:	e006      	b.n	800d980 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d972:	bf00      	nop
 800d974:	e004      	b.n	800d980 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d976:	bf00      	nop
 800d978:	e002      	b.n	800d980 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d97a:	bf00      	nop
 800d97c:	e000      	b.n	800d980 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d97e:	bf00      	nop
		}
	}

	return val;
 800d980:	697b      	ldr	r3, [r7, #20]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3718      	adds	r7, #24
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d98a:	b590      	push	{r4, r7, lr}
 800d98c:	b089      	sub	sp, #36	; 0x24
 800d98e:	af00      	add	r7, sp, #0
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d996:	2302      	movs	r3, #2
 800d998:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	f240 8106 	bls.w	800dbae <put_fat+0x224>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	f080 8100 	bcs.w	800dbae <put_fat+0x224>
		switch (fs->fs_type) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	f000 8088 	beq.w	800dac8 <put_fat+0x13e>
 800d9b8:	2b03      	cmp	r3, #3
 800d9ba:	f000 80b0 	beq.w	800db1e <put_fat+0x194>
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	f040 80f5 	bne.w	800dbae <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	61bb      	str	r3, [r7, #24]
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	085b      	lsrs	r3, r3, #1
 800d9cc:	69ba      	ldr	r2, [r7, #24]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	899b      	ldrh	r3, [r3, #12]
 800d9da:	4619      	mov	r1, r3
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9e2:	4413      	add	r3, r2
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7ff fe42 	bl	800d670 <move_window>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9f0:	7ffb      	ldrb	r3, [r7, #31]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f040 80d4 	bne.w	800dba0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	61ba      	str	r2, [r7, #24]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	8992      	ldrh	r2, [r2, #12]
 800da08:	fbb3 f0f2 	udiv	r0, r3, r2
 800da0c:	fb02 f200 	mul.w	r2, r2, r0
 800da10:	1a9b      	subs	r3, r3, r2
 800da12:	440b      	add	r3, r1
 800da14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00d      	beq.n	800da3c <put_fat+0xb2>
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	b25b      	sxtb	r3, r3
 800da26:	f003 030f 	and.w	r3, r3, #15
 800da2a:	b25a      	sxtb	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	011b      	lsls	r3, r3, #4
 800da32:	b25b      	sxtb	r3, r3
 800da34:	4313      	orrs	r3, r2
 800da36:	b25b      	sxtb	r3, r3
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	e001      	b.n	800da40 <put_fat+0xb6>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	697a      	ldr	r2, [r7, #20]
 800da42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2201      	movs	r2, #1
 800da48:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	899b      	ldrh	r3, [r3, #12]
 800da52:	4619      	mov	r1, r3
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	fbb3 f3f1 	udiv	r3, r3, r1
 800da5a:	4413      	add	r3, r2
 800da5c:	4619      	mov	r1, r3
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7ff fe06 	bl	800d670 <move_window>
 800da64:	4603      	mov	r3, r0
 800da66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da68:	7ffb      	ldrb	r3, [r7, #31]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f040 809a 	bne.w	800dba4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	899b      	ldrh	r3, [r3, #12]
 800da7a:	461a      	mov	r2, r3
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	fbb3 f0f2 	udiv	r0, r3, r2
 800da82:	fb02 f200 	mul.w	r2, r2, r0
 800da86:	1a9b      	subs	r3, r3, r2
 800da88:	440b      	add	r3, r1
 800da8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <put_fat+0x114>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	091b      	lsrs	r3, r3, #4
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	e00e      	b.n	800dabc <put_fat+0x132>
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	f023 030f 	bic.w	r3, r3, #15
 800daa8:	b25a      	sxtb	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	0a1b      	lsrs	r3, r3, #8
 800daae:	b25b      	sxtb	r3, r3
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	b25b      	sxtb	r3, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	b25b      	sxtb	r3, r3
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	697a      	ldr	r2, [r7, #20]
 800dabe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2201      	movs	r2, #1
 800dac4:	70da      	strb	r2, [r3, #3]
			break;
 800dac6:	e072      	b.n	800dbae <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	899b      	ldrh	r3, [r3, #12]
 800dad0:	085b      	lsrs	r3, r3, #1
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4619      	mov	r1, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	fbb3 f3f1 	udiv	r3, r3, r1
 800dadc:	4413      	add	r3, r2
 800dade:	4619      	mov	r1, r3
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7ff fdc5 	bl	800d670 <move_window>
 800dae6:	4603      	mov	r3, r0
 800dae8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800daea:	7ffb      	ldrb	r3, [r7, #31]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d15b      	bne.n	800dba8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	8992      	ldrh	r2, [r2, #12]
 800dafe:	fbb3 f0f2 	udiv	r0, r3, r2
 800db02:	fb02 f200 	mul.w	r2, r2, r0
 800db06:	1a9b      	subs	r3, r3, r2
 800db08:	440b      	add	r3, r1
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	b292      	uxth	r2, r2
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff fb38 	bl	800d186 <st_word>
			fs->wflag = 1;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2201      	movs	r2, #1
 800db1a:	70da      	strb	r2, [r3, #3]
			break;
 800db1c:	e047      	b.n	800dbae <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	899b      	ldrh	r3, [r3, #12]
 800db26:	089b      	lsrs	r3, r3, #2
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4619      	mov	r1, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800db32:	4413      	add	r3, r2
 800db34:	4619      	mov	r1, r3
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f7ff fd9a 	bl	800d670 <move_window>
 800db3c:	4603      	mov	r3, r0
 800db3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db40:	7ffb      	ldrb	r3, [r7, #31]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d132      	bne.n	800dbac <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	8992      	ldrh	r2, [r2, #12]
 800db5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800db5e:	fb02 f200 	mul.w	r2, r2, r0
 800db62:	1a9b      	subs	r3, r3, r2
 800db64:	440b      	add	r3, r1
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff faea 	bl	800d140 <ld_dword>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db72:	4323      	orrs	r3, r4
 800db74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	8992      	ldrh	r2, [r2, #12]
 800db84:	fbb3 f0f2 	udiv	r0, r3, r2
 800db88:	fb02 f200 	mul.w	r2, r2, r0
 800db8c:	1a9b      	subs	r3, r3, r2
 800db8e:	440b      	add	r3, r1
 800db90:	6879      	ldr	r1, [r7, #4]
 800db92:	4618      	mov	r0, r3
 800db94:	f7ff fb12 	bl	800d1bc <st_dword>
			fs->wflag = 1;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2201      	movs	r2, #1
 800db9c:	70da      	strb	r2, [r3, #3]
			break;
 800db9e:	e006      	b.n	800dbae <put_fat+0x224>
			if (res != FR_OK) break;
 800dba0:	bf00      	nop
 800dba2:	e004      	b.n	800dbae <put_fat+0x224>
			if (res != FR_OK) break;
 800dba4:	bf00      	nop
 800dba6:	e002      	b.n	800dbae <put_fat+0x224>
			if (res != FR_OK) break;
 800dba8:	bf00      	nop
 800dbaa:	e000      	b.n	800dbae <put_fat+0x224>
			if (res != FR_OK) break;
 800dbac:	bf00      	nop
		}
	}
	return res;
 800dbae:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3724      	adds	r7, #36	; 0x24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd90      	pop	{r4, r7, pc}

0800dbb8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d904      	bls.n	800dbde <remove_chain+0x26>
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	6a1b      	ldr	r3, [r3, #32]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d301      	bcc.n	800dbe2 <remove_chain+0x2a>
 800dbde:	2302      	movs	r3, #2
 800dbe0:	e04b      	b.n	800dc7a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00c      	beq.n	800dc02 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	69b8      	ldr	r0, [r7, #24]
 800dbf0:	f7ff fecb 	bl	800d98a <put_fat>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dbf8:	7ffb      	ldrb	r3, [r7, #31]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <remove_chain+0x4a>
 800dbfe:	7ffb      	ldrb	r3, [r7, #31]
 800dc00:	e03b      	b.n	800dc7a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7ff fdf0 	bl	800d7ea <get_fat>
 800dc0a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d031      	beq.n	800dc76 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d101      	bne.n	800dc1c <remove_chain+0x64>
 800dc18:	2302      	movs	r3, #2
 800dc1a:	e02e      	b.n	800dc7a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc22:	d101      	bne.n	800dc28 <remove_chain+0x70>
 800dc24:	2301      	movs	r3, #1
 800dc26:	e028      	b.n	800dc7a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dc28:	2200      	movs	r2, #0
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	69b8      	ldr	r0, [r7, #24]
 800dc2e:	f7ff feac 	bl	800d98a <put_fat>
 800dc32:	4603      	mov	r3, r0
 800dc34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dc36:	7ffb      	ldrb	r3, [r7, #31]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <remove_chain+0x88>
 800dc3c:	7ffb      	ldrb	r3, [r7, #31]
 800dc3e:	e01c      	b.n	800dc7a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	699a      	ldr	r2, [r3, #24]
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	3b02      	subs	r3, #2
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d20b      	bcs.n	800dc66 <remove_chain+0xae>
			fs->free_clst++;
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	1c5a      	adds	r2, r3, #1
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	791b      	ldrb	r3, [r3, #4]
 800dc5c:	f043 0301 	orr.w	r3, r3, #1
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d3c6      	bcc.n	800dc02 <remove_chain+0x4a>
 800dc74:	e000      	b.n	800dc78 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dc76:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3720      	adds	r7, #32
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b088      	sub	sp, #32
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10d      	bne.n	800dcb4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	695b      	ldr	r3, [r3, #20]
 800dc9c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d004      	beq.n	800dcae <create_chain+0x2c>
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	6a1b      	ldr	r3, [r3, #32]
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d31b      	bcc.n	800dce6 <create_chain+0x64>
 800dcae:	2301      	movs	r3, #1
 800dcb0:	61bb      	str	r3, [r7, #24]
 800dcb2:	e018      	b.n	800dce6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff fd97 	bl	800d7ea <get_fat>
 800dcbc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d801      	bhi.n	800dcc8 <create_chain+0x46>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e070      	b.n	800ddaa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcce:	d101      	bne.n	800dcd4 <create_chain+0x52>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	e06a      	b.n	800ddaa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d201      	bcs.n	800dce2 <create_chain+0x60>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	e063      	b.n	800ddaa <create_chain+0x128>
		scl = clst;
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	3301      	adds	r3, #1
 800dcee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	6a1b      	ldr	r3, [r3, #32]
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d307      	bcc.n	800dd0a <create_chain+0x88>
				ncl = 2;
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dcfe:	69fa      	ldr	r2, [r7, #28]
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d901      	bls.n	800dd0a <create_chain+0x88>
 800dd06:	2300      	movs	r3, #0
 800dd08:	e04f      	b.n	800ddaa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dd0a:	69f9      	ldr	r1, [r7, #28]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff fd6c 	bl	800d7ea <get_fat>
 800dd12:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00e      	beq.n	800dd38 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d003      	beq.n	800dd28 <create_chain+0xa6>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd26:	d101      	bne.n	800dd2c <create_chain+0xaa>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	e03e      	b.n	800ddaa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dd2c:	69fa      	ldr	r2, [r7, #28]
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d1da      	bne.n	800dcea <create_chain+0x68>
 800dd34:	2300      	movs	r3, #0
 800dd36:	e038      	b.n	800ddaa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dd38:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dd3a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd3e:	69f9      	ldr	r1, [r7, #28]
 800dd40:	6938      	ldr	r0, [r7, #16]
 800dd42:	f7ff fe22 	bl	800d98a <put_fat>
 800dd46:	4603      	mov	r3, r0
 800dd48:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d109      	bne.n	800dd64 <create_chain+0xe2>
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d006      	beq.n	800dd64 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dd56:	69fa      	ldr	r2, [r7, #28]
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6938      	ldr	r0, [r7, #16]
 800dd5c:	f7ff fe15 	bl	800d98a <put_fat>
 800dd60:	4603      	mov	r3, r0
 800dd62:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd64:	7dfb      	ldrb	r3, [r7, #23]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d116      	bne.n	800dd98 <create_chain+0x116>
		fs->last_clst = ncl;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	69fa      	ldr	r2, [r7, #28]
 800dd6e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	699a      	ldr	r2, [r3, #24]
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	6a1b      	ldr	r3, [r3, #32]
 800dd78:	3b02      	subs	r3, #2
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d804      	bhi.n	800dd88 <create_chain+0x106>
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	1e5a      	subs	r2, r3, #1
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	791b      	ldrb	r3, [r3, #4]
 800dd8c:	f043 0301 	orr.w	r3, r3, #1
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	711a      	strb	r2, [r3, #4]
 800dd96:	e007      	b.n	800dda8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dd98:	7dfb      	ldrb	r3, [r7, #23]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d102      	bne.n	800dda4 <create_chain+0x122>
 800dd9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dda2:	e000      	b.n	800dda6 <create_chain+0x124>
 800dda4:	2301      	movs	r3, #1
 800dda6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dda8:	69fb      	ldr	r3, [r7, #28]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3720      	adds	r7, #32
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b087      	sub	sp, #28
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	899b      	ldrh	r3, [r3, #12]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	8952      	ldrh	r2, [r2, #10]
 800ddda:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddde:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	1d1a      	adds	r2, r3, #4
 800dde4:	613a      	str	r2, [r7, #16]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <clmt_clust+0x42>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e010      	b.n	800de16 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d307      	bcc.n	800de0c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	3304      	adds	r3, #4
 800de08:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800de0a:	e7e9      	b.n	800dde0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800de0c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	4413      	add	r3, r2
}
 800de16:	4618      	mov	r0, r3
 800de18:	371c      	adds	r7, #28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b086      	sub	sp, #24
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
 800de2a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de38:	d204      	bcs.n	800de44 <dir_sdi+0x22>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	f003 031f 	and.w	r3, r3, #31
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <dir_sdi+0x26>
		return FR_INT_ERR;
 800de44:	2302      	movs	r3, #2
 800de46:	e071      	b.n	800df2c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <dir_sdi+0x46>
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d902      	bls.n	800de68 <dir_sdi+0x46>
		clst = fs->dirbase;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de66:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10c      	bne.n	800de88 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	095b      	lsrs	r3, r3, #5
 800de72:	693a      	ldr	r2, [r7, #16]
 800de74:	8912      	ldrh	r2, [r2, #8]
 800de76:	4293      	cmp	r3, r2
 800de78:	d301      	bcc.n	800de7e <dir_sdi+0x5c>
 800de7a:	2302      	movs	r3, #2
 800de7c:	e056      	b.n	800df2c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	61da      	str	r2, [r3, #28]
 800de86:	e02d      	b.n	800dee4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	895b      	ldrh	r3, [r3, #10]
 800de8c:	461a      	mov	r2, r3
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	899b      	ldrh	r3, [r3, #12]
 800de92:	fb03 f302 	mul.w	r3, r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de98:	e019      	b.n	800dece <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6979      	ldr	r1, [r7, #20]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff fca3 	bl	800d7ea <get_fat>
 800dea4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deac:	d101      	bne.n	800deb2 <dir_sdi+0x90>
 800deae:	2301      	movs	r3, #1
 800deb0:	e03c      	b.n	800df2c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d904      	bls.n	800dec2 <dir_sdi+0xa0>
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	6a1b      	ldr	r3, [r3, #32]
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d301      	bcc.n	800dec6 <dir_sdi+0xa4>
 800dec2:	2302      	movs	r3, #2
 800dec4:	e032      	b.n	800df2c <dir_sdi+0x10a>
			ofs -= csz;
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d2e1      	bcs.n	800de9a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ded6:	6979      	ldr	r1, [r7, #20]
 800ded8:	6938      	ldr	r0, [r7, #16]
 800deda:	f7ff fc67 	bl	800d7ac <clust2sect>
 800dede:	4602      	mov	r2, r0
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	69db      	ldr	r3, [r3, #28]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <dir_sdi+0xd4>
 800def2:	2302      	movs	r3, #2
 800def4:	e01a      	b.n	800df2c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	69da      	ldr	r2, [r3, #28]
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	899b      	ldrh	r3, [r3, #12]
 800defe:	4619      	mov	r1, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	fbb3 f3f1 	udiv	r3, r3, r1
 800df06:	441a      	add	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	899b      	ldrh	r3, [r3, #12]
 800df16:	461a      	mov	r2, r3
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800df1e:	fb02 f200 	mul.w	r2, r2, r0
 800df22:	1a9b      	subs	r3, r3, r2
 800df24:	18ca      	adds	r2, r1, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b086      	sub	sp, #24
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	3320      	adds	r3, #32
 800df4a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	69db      	ldr	r3, [r3, #28]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d003      	beq.n	800df5c <dir_next+0x28>
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df5a:	d301      	bcc.n	800df60 <dir_next+0x2c>
 800df5c:	2304      	movs	r3, #4
 800df5e:	e0bb      	b.n	800e0d8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	899b      	ldrh	r3, [r3, #12]
 800df64:	461a      	mov	r2, r3
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	fbb3 f1f2 	udiv	r1, r3, r2
 800df6c:	fb02 f201 	mul.w	r2, r2, r1
 800df70:	1a9b      	subs	r3, r3, r2
 800df72:	2b00      	cmp	r3, #0
 800df74:	f040 809d 	bne.w	800e0b2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	699b      	ldr	r3, [r3, #24]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d10b      	bne.n	800dfa2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	095b      	lsrs	r3, r3, #5
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	8912      	ldrh	r2, [r2, #8]
 800df92:	4293      	cmp	r3, r2
 800df94:	f0c0 808d 	bcc.w	800e0b2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	61da      	str	r2, [r3, #28]
 800df9e:	2304      	movs	r3, #4
 800dfa0:	e09a      	b.n	800e0d8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	899b      	ldrh	r3, [r3, #12]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	8952      	ldrh	r2, [r2, #10]
 800dfb2:	3a01      	subs	r2, #1
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d17b      	bne.n	800e0b2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	f7ff fc11 	bl	800d7ea <get_fat>
 800dfc8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d801      	bhi.n	800dfd4 <dir_next+0xa0>
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	e081      	b.n	800e0d8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfda:	d101      	bne.n	800dfe0 <dir_next+0xac>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e07b      	b.n	800e0d8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6a1b      	ldr	r3, [r3, #32]
 800dfe4:	697a      	ldr	r2, [r7, #20]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d359      	bcc.n	800e09e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d104      	bne.n	800dffa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	61da      	str	r2, [r3, #28]
 800dff6:	2304      	movs	r3, #4
 800dff8:	e06e      	b.n	800e0d8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f7ff fe3d 	bl	800dc82 <create_chain>
 800e008:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <dir_next+0xe0>
 800e010:	2307      	movs	r3, #7
 800e012:	e061      	b.n	800e0d8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d101      	bne.n	800e01e <dir_next+0xea>
 800e01a:	2302      	movs	r3, #2
 800e01c:	e05c      	b.n	800e0d8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e024:	d101      	bne.n	800e02a <dir_next+0xf6>
 800e026:	2301      	movs	r3, #1
 800e028:	e056      	b.n	800e0d8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f7ff fadc 	bl	800d5e8 <sync_window>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <dir_next+0x106>
 800e036:	2301      	movs	r3, #1
 800e038:	e04e      	b.n	800e0d8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	899b      	ldrh	r3, [r3, #12]
 800e044:	461a      	mov	r2, r3
 800e046:	2100      	movs	r1, #0
 800e048:	f7ff f905 	bl	800d256 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e04c:	2300      	movs	r3, #0
 800e04e:	613b      	str	r3, [r7, #16]
 800e050:	6979      	ldr	r1, [r7, #20]
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff fbaa 	bl	800d7ac <clust2sect>
 800e058:	4602      	mov	r2, r0
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	639a      	str	r2, [r3, #56]	; 0x38
 800e05e:	e012      	b.n	800e086 <dir_next+0x152>
						fs->wflag = 1;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff fabe 	bl	800d5e8 <sync_window>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <dir_next+0x142>
 800e072:	2301      	movs	r3, #1
 800e074:	e030      	b.n	800e0d8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	3301      	adds	r3, #1
 800e07a:	613b      	str	r3, [r7, #16]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e080:	1c5a      	adds	r2, r3, #1
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	639a      	str	r2, [r3, #56]	; 0x38
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	895b      	ldrh	r3, [r3, #10]
 800e08a:	461a      	mov	r2, r3
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	4293      	cmp	r3, r2
 800e090:	d3e6      	bcc.n	800e060 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	1ad2      	subs	r2, r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e0a4:	6979      	ldr	r1, [r7, #20]
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f7ff fb80 	bl	800d7ac <clust2sect>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0ca:	fb02 f200 	mul.w	r2, r2, r0
 800e0ce:	1a9b      	subs	r3, r3, r2
 800e0d0:	18ca      	adds	r2, r1, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3718      	adds	r7, #24
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff fe95 	bl	800de22 <dir_sdi>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d12b      	bne.n	800e15a <dir_alloc+0x7a>
		n = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	69db      	ldr	r3, [r3, #28]
 800e10a:	4619      	mov	r1, r3
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f7ff faaf 	bl	800d670 <move_window>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e116:	7dfb      	ldrb	r3, [r7, #23]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d11d      	bne.n	800e158 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a1b      	ldr	r3, [r3, #32]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2be5      	cmp	r3, #229	; 0xe5
 800e124:	d004      	beq.n	800e130 <dir_alloc+0x50>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a1b      	ldr	r3, [r3, #32]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d107      	bne.n	800e140 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	3301      	adds	r3, #1
 800e134:	613b      	str	r3, [r7, #16]
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d102      	bne.n	800e144 <dir_alloc+0x64>
 800e13e:	e00c      	b.n	800e15a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e140:	2300      	movs	r3, #0
 800e142:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e144:	2101      	movs	r1, #1
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7ff fef4 	bl	800df34 <dir_next>
 800e14c:	4603      	mov	r3, r0
 800e14e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0d7      	beq.n	800e106 <dir_alloc+0x26>
 800e156:	e000      	b.n	800e15a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e158:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	2b04      	cmp	r3, #4
 800e15e:	d101      	bne.n	800e164 <dir_alloc+0x84>
 800e160:	2307      	movs	r3, #7
 800e162:	75fb      	strb	r3, [r7, #23]
	return res;
 800e164:	7dfb      	ldrb	r3, [r7, #23]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3718      	adds	r7, #24
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	331a      	adds	r3, #26
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fe ffc7 	bl	800d110 <ld_word>
 800e182:	4603      	mov	r3, r0
 800e184:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d109      	bne.n	800e1a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	3314      	adds	r3, #20
 800e192:	4618      	mov	r0, r3
 800e194:	f7fe ffbc 	bl	800d110 <ld_word>
 800e198:	4603      	mov	r3, r0
 800e19a:	041b      	lsls	r3, r3, #16
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	331a      	adds	r3, #26
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	b292      	uxth	r2, r2
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fe ffdf 	bl	800d186 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b03      	cmp	r3, #3
 800e1ce:	d109      	bne.n	800e1e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	f103 0214 	add.w	r2, r3, #20
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	0c1b      	lsrs	r3, r3, #16
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	4619      	mov	r1, r3
 800e1de:	4610      	mov	r0, r2
 800e1e0:	f7fe ffd1 	bl	800d186 <st_word>
	}
}
 800e1e4:	bf00      	nop
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e1ec:	b590      	push	{r4, r7, lr}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	331a      	adds	r3, #26
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fe ff88 	bl	800d110 <ld_word>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <cmp_lfn+0x1e>
 800e206:	2300      	movs	r3, #0
 800e208:	e059      	b.n	800e2be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e212:	1e5a      	subs	r2, r3, #1
 800e214:	4613      	mov	r3, r2
 800e216:	005b      	lsls	r3, r3, #1
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e220:	2301      	movs	r3, #1
 800e222:	81fb      	strh	r3, [r7, #14]
 800e224:	2300      	movs	r3, #0
 800e226:	613b      	str	r3, [r7, #16]
 800e228:	e033      	b.n	800e292 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e22a:	4a27      	ldr	r2, [pc, #156]	; (800e2c8 <cmp_lfn+0xdc>)
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	4413      	add	r3, r2
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	4413      	add	r3, r2
 800e238:	4618      	mov	r0, r3
 800e23a:	f7fe ff69 	bl	800d110 <ld_word>
 800e23e:	4603      	mov	r3, r0
 800e240:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e242:	89fb      	ldrh	r3, [r7, #14]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d01a      	beq.n	800e27e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2bfe      	cmp	r3, #254	; 0xfe
 800e24c:	d812      	bhi.n	800e274 <cmp_lfn+0x88>
 800e24e:	89bb      	ldrh	r3, [r7, #12]
 800e250:	4618      	mov	r0, r3
 800e252:	f002 fd23 	bl	8010c9c <ff_wtoupper>
 800e256:	4603      	mov	r3, r0
 800e258:	461c      	mov	r4, r3
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	617a      	str	r2, [r7, #20]
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	4413      	add	r3, r2
 800e266:	881b      	ldrh	r3, [r3, #0]
 800e268:	4618      	mov	r0, r3
 800e26a:	f002 fd17 	bl	8010c9c <ff_wtoupper>
 800e26e:	4603      	mov	r3, r0
 800e270:	429c      	cmp	r4, r3
 800e272:	d001      	beq.n	800e278 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e274:	2300      	movs	r3, #0
 800e276:	e022      	b.n	800e2be <cmp_lfn+0xd2>
			}
			wc = uc;
 800e278:	89bb      	ldrh	r3, [r7, #12]
 800e27a:	81fb      	strh	r3, [r7, #14]
 800e27c:	e006      	b.n	800e28c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e27e:	89bb      	ldrh	r3, [r7, #12]
 800e280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e284:	4293      	cmp	r3, r2
 800e286:	d001      	beq.n	800e28c <cmp_lfn+0xa0>
 800e288:	2300      	movs	r3, #0
 800e28a:	e018      	b.n	800e2be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	3301      	adds	r3, #1
 800e290:	613b      	str	r3, [r7, #16]
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2b0c      	cmp	r3, #12
 800e296:	d9c8      	bls.n	800e22a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00b      	beq.n	800e2bc <cmp_lfn+0xd0>
 800e2a4:	89fb      	ldrh	r3, [r7, #14]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d008      	beq.n	800e2bc <cmp_lfn+0xd0>
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <cmp_lfn+0xd0>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e000      	b.n	800e2be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e2bc:	2301      	movs	r3, #1
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	371c      	adds	r7, #28
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd90      	pop	{r4, r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	08016f74 	.word	0x08016f74

0800e2cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	331a      	adds	r3, #26
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe ff18 	bl	800d110 <ld_word>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <pick_lfn+0x1e>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	e04d      	b.n	800e386 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2f2:	1e5a      	subs	r2, r3, #1
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	4413      	add	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e300:	2301      	movs	r3, #1
 800e302:	81fb      	strh	r3, [r7, #14]
 800e304:	2300      	movs	r3, #0
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	e028      	b.n	800e35c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e30a:	4a21      	ldr	r2, [pc, #132]	; (800e390 <pick_lfn+0xc4>)
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	4413      	add	r3, r2
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	4413      	add	r3, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe fef9 	bl	800d110 <ld_word>
 800e31e:	4603      	mov	r3, r0
 800e320:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e322:	89fb      	ldrh	r3, [r7, #14]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00f      	beq.n	800e348 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	2bfe      	cmp	r3, #254	; 0xfe
 800e32c:	d901      	bls.n	800e332 <pick_lfn+0x66>
 800e32e:	2300      	movs	r3, #0
 800e330:	e029      	b.n	800e386 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e332:	89bb      	ldrh	r3, [r7, #12]
 800e334:	81fb      	strh	r3, [r7, #14]
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	617a      	str	r2, [r7, #20]
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	4413      	add	r3, r2
 800e342:	89fa      	ldrh	r2, [r7, #14]
 800e344:	801a      	strh	r2, [r3, #0]
 800e346:	e006      	b.n	800e356 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e348:	89bb      	ldrh	r3, [r7, #12]
 800e34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34e:	4293      	cmp	r3, r2
 800e350:	d001      	beq.n	800e356 <pick_lfn+0x8a>
 800e352:	2300      	movs	r3, #0
 800e354:	e017      	b.n	800e386 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	3301      	adds	r3, #1
 800e35a:	613b      	str	r3, [r7, #16]
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	2b0c      	cmp	r3, #12
 800e360:	d9d3      	bls.n	800e30a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00a      	beq.n	800e384 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2bfe      	cmp	r3, #254	; 0xfe
 800e372:	d901      	bls.n	800e378 <pick_lfn+0xac>
 800e374:	2300      	movs	r3, #0
 800e376:	e006      	b.n	800e386 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	4413      	add	r3, r2
 800e380:	2200      	movs	r2, #0
 800e382:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e384:	2301      	movs	r3, #1
}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	08016f74 	.word	0x08016f74

0800e394 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b088      	sub	sp, #32
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	4611      	mov	r1, r2
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	71fb      	strb	r3, [r7, #7]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	330d      	adds	r3, #13
 800e3ae:	79ba      	ldrb	r2, [r7, #6]
 800e3b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	330b      	adds	r3, #11
 800e3b6:	220f      	movs	r2, #15
 800e3b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	330c      	adds	r3, #12
 800e3be:	2200      	movs	r2, #0
 800e3c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	331a      	adds	r3, #26
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fe fedc 	bl	800d186 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e3ce:	79fb      	ldrb	r3, [r7, #7]
 800e3d0:	1e5a      	subs	r2, r3, #1
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	005b      	lsls	r3, r3, #1
 800e3d6:	4413      	add	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	82fb      	strh	r3, [r7, #22]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3e6:	8afb      	ldrh	r3, [r7, #22]
 800e3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d007      	beq.n	800e400 <put_lfn+0x6c>
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	1c5a      	adds	r2, r3, #1
 800e3f4:	61fa      	str	r2, [r7, #28]
 800e3f6:	005b      	lsls	r3, r3, #1
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e400:	4a17      	ldr	r2, [pc, #92]	; (800e460 <put_lfn+0xcc>)
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	4413      	add	r3, r2
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	461a      	mov	r2, r3
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	4413      	add	r3, r2
 800e40e:	8afa      	ldrh	r2, [r7, #22]
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe feb7 	bl	800d186 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e418:	8afb      	ldrh	r3, [r7, #22]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d102      	bne.n	800e424 <put_lfn+0x90>
 800e41e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e422:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	3301      	adds	r3, #1
 800e428:	61bb      	str	r3, [r7, #24]
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	2b0c      	cmp	r3, #12
 800e42e:	d9da      	bls.n	800e3e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e430:	8afb      	ldrh	r3, [r7, #22]
 800e432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e436:	4293      	cmp	r3, r2
 800e438:	d006      	beq.n	800e448 <put_lfn+0xb4>
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	005b      	lsls	r3, r3, #1
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	4413      	add	r3, r2
 800e442:	881b      	ldrh	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d103      	bne.n	800e450 <put_lfn+0xbc>
 800e448:	79fb      	ldrb	r3, [r7, #7]
 800e44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e44e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	79fa      	ldrb	r2, [r7, #7]
 800e454:	701a      	strb	r2, [r3, #0]
}
 800e456:	bf00      	nop
 800e458:	3720      	adds	r7, #32
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	08016f74 	.word	0x08016f74

0800e464 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b08c      	sub	sp, #48	; 0x30
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e472:	220b      	movs	r2, #11
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7fe fecc 	bl	800d214 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d92b      	bls.n	800e4da <gen_numname+0x76>
		sr = seq;
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e486:	e022      	b.n	800e4ce <gen_numname+0x6a>
			wc = *lfn++;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	1c9a      	adds	r2, r3, #2
 800e48c:	607a      	str	r2, [r7, #4]
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e492:	2300      	movs	r3, #0
 800e494:	62bb      	str	r3, [r7, #40]	; 0x28
 800e496:	e017      	b.n	800e4c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	005a      	lsls	r2, r3, #1
 800e49c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	4413      	add	r3, r2
 800e4a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e4a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4a8:	085b      	lsrs	r3, r3, #1
 800e4aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <gen_numname+0x5e>
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e4bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e4c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	2b0f      	cmp	r3, #15
 800e4cc:	d9e4      	bls.n	800e498 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1d8      	bne.n	800e488 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e4da:	2307      	movs	r3, #7
 800e4dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	f003 030f 	and.w	r3, r3, #15
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	3330      	adds	r3, #48	; 0x30
 800e4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4f2:	2b39      	cmp	r3, #57	; 0x39
 800e4f4:	d904      	bls.n	800e500 <gen_numname+0x9c>
 800e4f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4fa:	3307      	adds	r3, #7
 800e4fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	1e5a      	subs	r2, r3, #1
 800e504:	62ba      	str	r2, [r7, #40]	; 0x28
 800e506:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e50a:	4413      	add	r3, r2
 800e50c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e510:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	091b      	lsrs	r3, r3, #4
 800e518:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1de      	bne.n	800e4de <gen_numname+0x7a>
	ns[i] = '~';
 800e520:	f107 0214 	add.w	r2, r7, #20
 800e524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e526:	4413      	add	r3, r2
 800e528:	227e      	movs	r2, #126	; 0x7e
 800e52a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e52c:	2300      	movs	r3, #0
 800e52e:	627b      	str	r3, [r7, #36]	; 0x24
 800e530:	e002      	b.n	800e538 <gen_numname+0xd4>
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	3301      	adds	r3, #1
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
 800e538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d205      	bcs.n	800e54c <gen_numname+0xe8>
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	4413      	add	r3, r2
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b20      	cmp	r3, #32
 800e54a:	d1f2      	bne.n	800e532 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	2b07      	cmp	r3, #7
 800e550:	d808      	bhi.n	800e564 <gen_numname+0x100>
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	1c5a      	adds	r2, r3, #1
 800e556:	62ba      	str	r2, [r7, #40]	; 0x28
 800e558:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e55c:	4413      	add	r3, r2
 800e55e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e562:	e000      	b.n	800e566 <gen_numname+0x102>
 800e564:	2120      	movs	r1, #32
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	1c5a      	adds	r2, r3, #1
 800e56a:	627a      	str	r2, [r7, #36]	; 0x24
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	4413      	add	r3, r2
 800e570:	460a      	mov	r2, r1
 800e572:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	2b07      	cmp	r3, #7
 800e578:	d9e8      	bls.n	800e54c <gen_numname+0xe8>
}
 800e57a:	bf00      	nop
 800e57c:	3730      	adds	r7, #48	; 0x30
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e582:	b480      	push	{r7}
 800e584:	b085      	sub	sp, #20
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e58e:	230b      	movs	r3, #11
 800e590:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	b2da      	uxtb	r2, r3
 800e596:	0852      	lsrs	r2, r2, #1
 800e598:	01db      	lsls	r3, r3, #7
 800e59a:	4313      	orrs	r3, r2
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	1c59      	adds	r1, r3, #1
 800e5a2:	6079      	str	r1, [r7, #4]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	60bb      	str	r3, [r7, #8]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1ed      	bne.n	800e592 <sum_sfn+0x10>
	return sum;
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e5ce:	2304      	movs	r3, #4
 800e5d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e5d8:	23ff      	movs	r3, #255	; 0xff
 800e5da:	757b      	strb	r3, [r7, #21]
 800e5dc:	23ff      	movs	r3, #255	; 0xff
 800e5de:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e5e0:	e081      	b.n	800e6e6 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	69db      	ldr	r3, [r3, #28]
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6938      	ldr	r0, [r7, #16]
 800e5ea:	f7ff f841 	bl	800d670 <move_window>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d17c      	bne.n	800e6f2 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a1b      	ldr	r3, [r3, #32]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e600:	7dbb      	ldrb	r3, [r7, #22]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d102      	bne.n	800e60c <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e606:	2304      	movs	r3, #4
 800e608:	75fb      	strb	r3, [r7, #23]
 800e60a:	e077      	b.n	800e6fc <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6a1b      	ldr	r3, [r3, #32]
 800e610:	330b      	adds	r3, #11
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e618:	73fb      	strb	r3, [r7, #15]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	7bfa      	ldrb	r2, [r7, #15]
 800e61e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e620:	7dbb      	ldrb	r3, [r7, #22]
 800e622:	2be5      	cmp	r3, #229	; 0xe5
 800e624:	d00e      	beq.n	800e644 <dir_read+0x80>
 800e626:	7dbb      	ldrb	r3, [r7, #22]
 800e628:	2b2e      	cmp	r3, #46	; 0x2e
 800e62a:	d00b      	beq.n	800e644 <dir_read+0x80>
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	f023 0320 	bic.w	r3, r3, #32
 800e632:	2b08      	cmp	r3, #8
 800e634:	bf0c      	ite	eq
 800e636:	2301      	moveq	r3, #1
 800e638:	2300      	movne	r3, #0
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	461a      	mov	r2, r3
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	4293      	cmp	r3, r2
 800e642:	d002      	beq.n	800e64a <dir_read+0x86>
				ord = 0xFF;
 800e644:	23ff      	movs	r3, #255	; 0xff
 800e646:	757b      	strb	r3, [r7, #21]
 800e648:	e044      	b.n	800e6d4 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	2b0f      	cmp	r3, #15
 800e64e:	d12f      	bne.n	800e6b0 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e650:	7dbb      	ldrb	r3, [r7, #22]
 800e652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00d      	beq.n	800e676 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	7b5b      	ldrb	r3, [r3, #13]
 800e660:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e662:	7dbb      	ldrb	r3, [r7, #22]
 800e664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e668:	75bb      	strb	r3, [r7, #22]
 800e66a:	7dbb      	ldrb	r3, [r7, #22]
 800e66c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	695a      	ldr	r2, [r3, #20]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e676:	7dba      	ldrb	r2, [r7, #22]
 800e678:	7d7b      	ldrb	r3, [r7, #21]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d115      	bne.n	800e6aa <dir_read+0xe6>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	330d      	adds	r3, #13
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	7d3a      	ldrb	r2, [r7, #20]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d10e      	bne.n	800e6aa <dir_read+0xe6>
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	691a      	ldr	r2, [r3, #16]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a1b      	ldr	r3, [r3, #32]
 800e694:	4619      	mov	r1, r3
 800e696:	4610      	mov	r0, r2
 800e698:	f7ff fe18 	bl	800e2cc <pick_lfn>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d003      	beq.n	800e6aa <dir_read+0xe6>
 800e6a2:	7d7b      	ldrb	r3, [r7, #21]
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	e000      	b.n	800e6ac <dir_read+0xe8>
 800e6aa:	23ff      	movs	r3, #255	; 0xff
 800e6ac:	757b      	strb	r3, [r7, #21]
 800e6ae:	e011      	b.n	800e6d4 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e6b0:	7d7b      	ldrb	r3, [r7, #21]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <dir_read+0x106>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a1b      	ldr	r3, [r3, #32]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff ff61 	bl	800e582 <sum_sfn>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	7d3b      	ldrb	r3, [r7, #20]
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d015      	beq.n	800e6f6 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e6d2:	e010      	b.n	800e6f6 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7ff fc2c 	bl	800df34 <dir_next>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <dir_read+0x136>
	while (dp->sect) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	69db      	ldr	r3, [r3, #28]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f47f af79 	bne.w	800e5e2 <dir_read+0x1e>
 800e6f0:	e004      	b.n	800e6fc <dir_read+0x138>
		if (res != FR_OK) break;
 800e6f2:	bf00      	nop
 800e6f4:	e002      	b.n	800e6fc <dir_read+0x138>
					break;
 800e6f6:	bf00      	nop
 800e6f8:	e000      	b.n	800e6fc <dir_read+0x138>
		if (res != FR_OK) break;
 800e6fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <dir_read+0x144>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	61da      	str	r2, [r3, #28]
	return res;
 800e708:	7dfb      	ldrb	r3, [r7, #23]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3718      	adds	r7, #24
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b086      	sub	sp, #24
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e720:	2100      	movs	r1, #0
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7ff fb7d 	bl	800de22 <dir_sdi>
 800e728:	4603      	mov	r3, r0
 800e72a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <dir_find+0x24>
 800e732:	7dfb      	ldrb	r3, [r7, #23]
 800e734:	e0a9      	b.n	800e88a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e736:	23ff      	movs	r3, #255	; 0xff
 800e738:	753b      	strb	r3, [r7, #20]
 800e73a:	7d3b      	ldrb	r3, [r7, #20]
 800e73c:	757b      	strb	r3, [r7, #21]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f04f 32ff 	mov.w	r2, #4294967295
 800e744:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	69db      	ldr	r3, [r3, #28]
 800e74a:	4619      	mov	r1, r3
 800e74c:	6938      	ldr	r0, [r7, #16]
 800e74e:	f7fe ff8f 	bl	800d670 <move_window>
 800e752:	4603      	mov	r3, r0
 800e754:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f040 8090 	bne.w	800e87e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6a1b      	ldr	r3, [r3, #32]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e766:	7dbb      	ldrb	r3, [r7, #22]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <dir_find+0x60>
 800e76c:	2304      	movs	r3, #4
 800e76e:	75fb      	strb	r3, [r7, #23]
 800e770:	e08a      	b.n	800e888 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6a1b      	ldr	r3, [r3, #32]
 800e776:	330b      	adds	r3, #11
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e77e:	73fb      	strb	r3, [r7, #15]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	7bfa      	ldrb	r2, [r7, #15]
 800e784:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e786:	7dbb      	ldrb	r3, [r7, #22]
 800e788:	2be5      	cmp	r3, #229	; 0xe5
 800e78a:	d007      	beq.n	800e79c <dir_find+0x8a>
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
 800e78e:	f003 0308 	and.w	r3, r3, #8
 800e792:	2b00      	cmp	r3, #0
 800e794:	d009      	beq.n	800e7aa <dir_find+0x98>
 800e796:	7bfb      	ldrb	r3, [r7, #15]
 800e798:	2b0f      	cmp	r3, #15
 800e79a:	d006      	beq.n	800e7aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e79c:	23ff      	movs	r3, #255	; 0xff
 800e79e:	757b      	strb	r3, [r7, #21]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a6:	631a      	str	r2, [r3, #48]	; 0x30
 800e7a8:	e05e      	b.n	800e868 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
 800e7ac:	2b0f      	cmp	r3, #15
 800e7ae:	d136      	bne.n	800e81e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d154      	bne.n	800e868 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e7be:	7dbb      	ldrb	r3, [r7, #22]
 800e7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00d      	beq.n	800e7e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a1b      	ldr	r3, [r3, #32]
 800e7cc:	7b5b      	ldrb	r3, [r3, #13]
 800e7ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e7d0:	7dbb      	ldrb	r3, [r7, #22]
 800e7d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7d6:	75bb      	strb	r3, [r7, #22]
 800e7d8:	7dbb      	ldrb	r3, [r7, #22]
 800e7da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	695a      	ldr	r2, [r3, #20]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e7e4:	7dba      	ldrb	r2, [r7, #22]
 800e7e6:	7d7b      	ldrb	r3, [r7, #21]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d115      	bne.n	800e818 <dir_find+0x106>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a1b      	ldr	r3, [r3, #32]
 800e7f0:	330d      	adds	r3, #13
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	7d3a      	ldrb	r2, [r7, #20]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d10e      	bne.n	800e818 <dir_find+0x106>
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	691a      	ldr	r2, [r3, #16]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a1b      	ldr	r3, [r3, #32]
 800e802:	4619      	mov	r1, r3
 800e804:	4610      	mov	r0, r2
 800e806:	f7ff fcf1 	bl	800e1ec <cmp_lfn>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d003      	beq.n	800e818 <dir_find+0x106>
 800e810:	7d7b      	ldrb	r3, [r7, #21]
 800e812:	3b01      	subs	r3, #1
 800e814:	b2db      	uxtb	r3, r3
 800e816:	e000      	b.n	800e81a <dir_find+0x108>
 800e818:	23ff      	movs	r3, #255	; 0xff
 800e81a:	757b      	strb	r3, [r7, #21]
 800e81c:	e024      	b.n	800e868 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e81e:	7d7b      	ldrb	r3, [r7, #21]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d109      	bne.n	800e838 <dir_find+0x126>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a1b      	ldr	r3, [r3, #32]
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff feaa 	bl	800e582 <sum_sfn>
 800e82e:	4603      	mov	r3, r0
 800e830:	461a      	mov	r2, r3
 800e832:	7d3b      	ldrb	r3, [r7, #20]
 800e834:	4293      	cmp	r3, r2
 800e836:	d024      	beq.n	800e882 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e83e:	f003 0301 	and.w	r3, r3, #1
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10a      	bne.n	800e85c <dir_find+0x14a>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a18      	ldr	r0, [r3, #32]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3324      	adds	r3, #36	; 0x24
 800e84e:	220b      	movs	r2, #11
 800e850:	4619      	mov	r1, r3
 800e852:	f7fe fd1a 	bl	800d28a <mem_cmp>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d014      	beq.n	800e886 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e85c:	23ff      	movs	r3, #255	; 0xff
 800e85e:	757b      	strb	r3, [r7, #21]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f04f 32ff 	mov.w	r2, #4294967295
 800e866:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e868:	2100      	movs	r1, #0
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff fb62 	bl	800df34 <dir_next>
 800e870:	4603      	mov	r3, r0
 800e872:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e874:	7dfb      	ldrb	r3, [r7, #23]
 800e876:	2b00      	cmp	r3, #0
 800e878:	f43f af65 	beq.w	800e746 <dir_find+0x34>
 800e87c:	e004      	b.n	800e888 <dir_find+0x176>
		if (res != FR_OK) break;
 800e87e:	bf00      	nop
 800e880:	e002      	b.n	800e888 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e882:	bf00      	nop
 800e884:	e000      	b.n	800e888 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e886:	bf00      	nop

	return res;
 800e888:	7dfb      	ldrb	r3, [r7, #23]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3718      	adds	r7, #24
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08c      	sub	sp, #48	; 0x30
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <dir_register+0x20>
 800e8b0:	2306      	movs	r3, #6
 800e8b2:	e0e0      	b.n	800ea76 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e8b8:	e002      	b.n	800e8c0 <dir_register+0x2c>
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	3301      	adds	r3, #1
 800e8be:	627b      	str	r3, [r7, #36]	; 0x24
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	691a      	ldr	r2, [r3, #16]
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	005b      	lsls	r3, r3, #1
 800e8c8:	4413      	add	r3, r2
 800e8ca:	881b      	ldrh	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1f4      	bne.n	800e8ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e8d6:	f107 030c 	add.w	r3, r7, #12
 800e8da:	220c      	movs	r2, #12
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7fe fc99 	bl	800d214 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e8e2:	7dfb      	ldrb	r3, [r7, #23]
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d032      	beq.n	800e952 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2240      	movs	r2, #64	; 0x40
 800e8f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8f8:	e016      	b.n	800e928 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	691a      	ldr	r2, [r3, #16]
 800e904:	f107 010c 	add.w	r1, r7, #12
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	f7ff fdab 	bl	800e464 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7ff feff 	bl	800e712 <dir_find>
 800e914:	4603      	mov	r3, r0
 800e916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d106      	bne.n	800e930 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	3301      	adds	r3, #1
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	2b63      	cmp	r3, #99	; 0x63
 800e92c:	d9e5      	bls.n	800e8fa <dir_register+0x66>
 800e92e:	e000      	b.n	800e932 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e930:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e934:	2b64      	cmp	r3, #100	; 0x64
 800e936:	d101      	bne.n	800e93c <dir_register+0xa8>
 800e938:	2307      	movs	r3, #7
 800e93a:	e09c      	b.n	800ea76 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e93c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e940:	2b04      	cmp	r3, #4
 800e942:	d002      	beq.n	800e94a <dir_register+0xb6>
 800e944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e948:	e095      	b.n	800ea76 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e94a:	7dfa      	ldrb	r2, [r7, #23]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e952:	7dfb      	ldrb	r3, [r7, #23]
 800e954:	f003 0302 	and.w	r3, r3, #2
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d007      	beq.n	800e96c <dir_register+0xd8>
 800e95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95e:	330c      	adds	r3, #12
 800e960:	4a47      	ldr	r2, [pc, #284]	; (800ea80 <dir_register+0x1ec>)
 800e962:	fba2 2303 	umull	r2, r3, r2, r3
 800e966:	089b      	lsrs	r3, r3, #2
 800e968:	3301      	adds	r3, #1
 800e96a:	e000      	b.n	800e96e <dir_register+0xda>
 800e96c:	2301      	movs	r3, #1
 800e96e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e970:	6a39      	ldr	r1, [r7, #32]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7ff fbb4 	bl	800e0e0 <dir_alloc>
 800e978:	4603      	mov	r3, r0
 800e97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e982:	2b00      	cmp	r3, #0
 800e984:	d148      	bne.n	800ea18 <dir_register+0x184>
 800e986:	6a3b      	ldr	r3, [r7, #32]
 800e988:	3b01      	subs	r3, #1
 800e98a:	623b      	str	r3, [r7, #32]
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d042      	beq.n	800ea18 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	695a      	ldr	r2, [r3, #20]
 800e996:	6a3b      	ldr	r3, [r7, #32]
 800e998:	015b      	lsls	r3, r3, #5
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7ff fa3f 	bl	800de22 <dir_sdi>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e9aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d132      	bne.n	800ea18 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3324      	adds	r3, #36	; 0x24
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7ff fde3 	bl	800e582 <sum_sfn>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	69f8      	ldr	r0, [r7, #28]
 800e9c8:	f7fe fe52 	bl	800d670 <move_window>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e9d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d11d      	bne.n	800ea16 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	6918      	ldr	r0, [r3, #16]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a19      	ldr	r1, [r3, #32]
 800e9e2:	6a3b      	ldr	r3, [r7, #32]
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	7efb      	ldrb	r3, [r7, #27]
 800e9e8:	f7ff fcd4 	bl	800e394 <put_lfn>
				fs->wflag = 1;
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff fa9d 	bl	800df34 <dir_next>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ea00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d107      	bne.n	800ea18 <dir_register+0x184>
 800ea08:	6a3b      	ldr	r3, [r7, #32]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	623b      	str	r3, [r7, #32]
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1d5      	bne.n	800e9c0 <dir_register+0x12c>
 800ea14:	e000      	b.n	800ea18 <dir_register+0x184>
				if (res != FR_OK) break;
 800ea16:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ea18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d128      	bne.n	800ea72 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	69db      	ldr	r3, [r3, #28]
 800ea24:	4619      	mov	r1, r3
 800ea26:	69f8      	ldr	r0, [r7, #28]
 800ea28:	f7fe fe22 	bl	800d670 <move_window>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ea32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d11b      	bne.n	800ea72 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a1b      	ldr	r3, [r3, #32]
 800ea3e:	2220      	movs	r2, #32
 800ea40:	2100      	movs	r1, #0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fe fc07 	bl	800d256 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a18      	ldr	r0, [r3, #32]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3324      	adds	r3, #36	; 0x24
 800ea50:	220b      	movs	r2, #11
 800ea52:	4619      	mov	r1, r3
 800ea54:	f7fe fbde 	bl	800d214 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	330c      	adds	r3, #12
 800ea64:	f002 0218 	and.w	r2, r2, #24
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3730      	adds	r7, #48	; 0x30
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	4ec4ec4f 	.word	0x4ec4ec4f

0800ea84 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	695b      	ldr	r3, [r3, #20]
 800ea96:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa0:	d007      	beq.n	800eab2 <dir_remove+0x2e>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7ff f9ba 	bl	800de22 <dir_sdi>
 800eaae:	4603      	mov	r3, r0
 800eab0:	e000      	b.n	800eab4 <dir_remove+0x30>
 800eab2:	2300      	movs	r3, #0
 800eab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d128      	bne.n	800eb0e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	69db      	ldr	r3, [r3, #28]
 800eac0:	4619      	mov	r1, r3
 800eac2:	6938      	ldr	r0, [r7, #16]
 800eac4:	f7fe fdd4 	bl	800d670 <move_window>
 800eac8:	4603      	mov	r3, r0
 800eaca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eacc:	7dfb      	ldrb	r3, [r7, #23]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d115      	bne.n	800eafe <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	22e5      	movs	r2, #229	; 0xe5
 800ead8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2201      	movs	r2, #1
 800eade:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	695b      	ldr	r3, [r3, #20]
 800eae4:	68fa      	ldr	r2, [r7, #12]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d90b      	bls.n	800eb02 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800eaea:	2100      	movs	r1, #0
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff fa21 	bl	800df34 <dir_next>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d0df      	beq.n	800eabc <dir_remove+0x38>
 800eafc:	e002      	b.n	800eb04 <dir_remove+0x80>
			if (res != FR_OK) break;
 800eafe:	bf00      	nop
 800eb00:	e000      	b.n	800eb04 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800eb02:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	2b04      	cmp	r3, #4
 800eb08:	d101      	bne.n	800eb0e <dir_remove+0x8a>
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3718      	adds	r7, #24
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08a      	sub	sp, #40	; 0x28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	613b      	str	r3, [r7, #16]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	60fb      	str	r3, [r7, #12]
 800eb30:	2300      	movs	r3, #0
 800eb32:	617b      	str	r3, [r7, #20]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	1c5a      	adds	r2, r3, #1
 800eb3c:	61ba      	str	r2, [r7, #24]
 800eb3e:	693a      	ldr	r2, [r7, #16]
 800eb40:	4413      	add	r3, r2
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eb46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb48:	2b1f      	cmp	r3, #31
 800eb4a:	d940      	bls.n	800ebce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eb4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb4e:	2b2f      	cmp	r3, #47	; 0x2f
 800eb50:	d006      	beq.n	800eb60 <create_name+0x48>
 800eb52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb54:	2b5c      	cmp	r3, #92	; 0x5c
 800eb56:	d110      	bne.n	800eb7a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb58:	e002      	b.n	800eb60 <create_name+0x48>
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	61bb      	str	r3, [r7, #24]
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	4413      	add	r3, r2
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b2f      	cmp	r3, #47	; 0x2f
 800eb6a:	d0f6      	beq.n	800eb5a <create_name+0x42>
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	4413      	add	r3, r2
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	2b5c      	cmp	r3, #92	; 0x5c
 800eb76:	d0f0      	beq.n	800eb5a <create_name+0x42>
			break;
 800eb78:	e02a      	b.n	800ebd0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	2bfe      	cmp	r3, #254	; 0xfe
 800eb7e:	d901      	bls.n	800eb84 <create_name+0x6c>
 800eb80:	2306      	movs	r3, #6
 800eb82:	e1c9      	b.n	800ef18 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800eb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f002 f848 	bl	8010c24 <ff_convert>
 800eb94:	4603      	mov	r3, r0
 800eb96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eb98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <create_name+0x8a>
 800eb9e:	2306      	movs	r3, #6
 800eba0:	e1ba      	b.n	800ef18 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eba4:	2b7f      	cmp	r3, #127	; 0x7f
 800eba6:	d809      	bhi.n	800ebbc <create_name+0xa4>
 800eba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebaa:	4619      	mov	r1, r3
 800ebac:	48a5      	ldr	r0, [pc, #660]	; (800ee44 <create_name+0x32c>)
 800ebae:	f7fe fb93 	bl	800d2d8 <chk_chr>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <create_name+0xa4>
 800ebb8:	2306      	movs	r3, #6
 800ebba:	e1ad      	b.n	800ef18 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	617a      	str	r2, [r7, #20]
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ebcc:	e7b4      	b.n	800eb38 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ebce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ebda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebdc:	2b1f      	cmp	r3, #31
 800ebde:	d801      	bhi.n	800ebe4 <create_name+0xcc>
 800ebe0:	2304      	movs	r3, #4
 800ebe2:	e000      	b.n	800ebe6 <create_name+0xce>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d109      	bne.n	800ec04 <create_name+0xec>
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	005b      	lsls	r3, r3, #1
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	2b2e      	cmp	r3, #46	; 0x2e
 800ec02:	d016      	beq.n	800ec32 <create_name+0x11a>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d14e      	bne.n	800eca8 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec10:	3b01      	subs	r3, #1
 800ec12:	005b      	lsls	r3, r3, #1
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	4413      	add	r3, r2
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec1c:	d144      	bne.n	800eca8 <create_name+0x190>
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec24:	3b02      	subs	r3, #2
 800ec26:	005b      	lsls	r3, r3, #1
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ec30:	d13a      	bne.n	800eca8 <create_name+0x190>
		lfn[di] = 0;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	4413      	add	r3, r2
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800ec3e:	2300      	movs	r3, #0
 800ec40:	623b      	str	r3, [r7, #32]
 800ec42:	e00f      	b.n	800ec64 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800ec44:	6a3a      	ldr	r2, [r7, #32]
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d201      	bcs.n	800ec50 <create_name+0x138>
 800ec4c:	212e      	movs	r1, #46	; 0x2e
 800ec4e:	e000      	b.n	800ec52 <create_name+0x13a>
 800ec50:	2120      	movs	r1, #32
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	4413      	add	r3, r2
 800ec58:	3324      	adds	r3, #36	; 0x24
 800ec5a:	460a      	mov	r2, r1
 800ec5c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	3301      	adds	r3, #1
 800ec62:	623b      	str	r3, [r7, #32]
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	2b0a      	cmp	r3, #10
 800ec68:	d9ec      	bls.n	800ec44 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800ec6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec6e:	f043 0320 	orr.w	r3, r3, #32
 800ec72:	b2d9      	uxtb	r1, r3
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	4413      	add	r3, r2
 800ec7a:	3324      	adds	r3, #36	; 0x24
 800ec7c:	460a      	mov	r2, r1
 800ec7e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	e149      	b.n	800ef18 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	005b      	lsls	r3, r3, #1
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	4413      	add	r3, r2
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ec96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec98:	2b20      	cmp	r3, #32
 800ec9a:	d002      	beq.n	800eca2 <create_name+0x18a>
 800ec9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec9e:	2b2e      	cmp	r3, #46	; 0x2e
 800eca0:	d106      	bne.n	800ecb0 <create_name+0x198>
		di--;
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	3b01      	subs	r3, #1
 800eca6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1ea      	bne.n	800ec84 <create_name+0x16c>
 800ecae:	e000      	b.n	800ecb2 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800ecb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	4413      	add	r3, r2
 800ecba:	2200      	movs	r2, #0
 800ecbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <create_name+0x1b0>
 800ecc4:	2306      	movs	r3, #6
 800ecc6:	e127      	b.n	800ef18 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3324      	adds	r3, #36	; 0x24
 800eccc:	220b      	movs	r2, #11
 800ecce:	2120      	movs	r1, #32
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fe fac0 	bl	800d256 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	61bb      	str	r3, [r7, #24]
 800ecda:	e002      	b.n	800ece2 <create_name+0x1ca>
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	3301      	adds	r3, #1
 800ece0:	61bb      	str	r3, [r7, #24]
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	4413      	add	r3, r2
 800ecea:	881b      	ldrh	r3, [r3, #0]
 800ecec:	2b20      	cmp	r3, #32
 800ecee:	d0f5      	beq.n	800ecdc <create_name+0x1c4>
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	2b2e      	cmp	r3, #46	; 0x2e
 800ecfc:	d0ee      	beq.n	800ecdc <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d009      	beq.n	800ed18 <create_name+0x200>
 800ed04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed08:	f043 0303 	orr.w	r3, r3, #3
 800ed0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ed10:	e002      	b.n	800ed18 <create_name+0x200>
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	3b01      	subs	r3, #1
 800ed16:	617b      	str	r3, [r7, #20]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d009      	beq.n	800ed32 <create_name+0x21a>
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ed24:	3b01      	subs	r3, #1
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ed30:	d1ef      	bne.n	800ed12 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800ed32:	2300      	movs	r3, #0
 800ed34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed38:	2300      	movs	r3, #0
 800ed3a:	623b      	str	r3, [r7, #32]
 800ed3c:	2308      	movs	r3, #8
 800ed3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	1c5a      	adds	r2, r3, #1
 800ed44:	61ba      	str	r2, [r7, #24]
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	881b      	ldrh	r3, [r3, #0]
 800ed4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ed50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 8096 	beq.w	800ee84 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ed58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed5a:	2b20      	cmp	r3, #32
 800ed5c:	d006      	beq.n	800ed6c <create_name+0x254>
 800ed5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed60:	2b2e      	cmp	r3, #46	; 0x2e
 800ed62:	d10a      	bne.n	800ed7a <create_name+0x262>
 800ed64:	69ba      	ldr	r2, [r7, #24]
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d006      	beq.n	800ed7a <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800ed6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed70:	f043 0303 	orr.w	r3, r3, #3
 800ed74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed78:	e083      	b.n	800ee82 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ed7a:	6a3a      	ldr	r2, [r7, #32]
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d203      	bcs.n	800ed8a <create_name+0x272>
 800ed82:	69ba      	ldr	r2, [r7, #24]
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d123      	bne.n	800edd2 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	2b0b      	cmp	r3, #11
 800ed8e:	d106      	bne.n	800ed9e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800ed90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed94:	f043 0303 	orr.w	r3, r3, #3
 800ed98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed9c:	e075      	b.n	800ee8a <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ed9e:	69ba      	ldr	r2, [r7, #24]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d005      	beq.n	800edb2 <create_name+0x29a>
 800eda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edaa:	f043 0303 	orr.w	r3, r3, #3
 800edae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800edb2:	69ba      	ldr	r2, [r7, #24]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d866      	bhi.n	800ee88 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	61bb      	str	r3, [r7, #24]
 800edbe:	2308      	movs	r3, #8
 800edc0:	623b      	str	r3, [r7, #32]
 800edc2:	230b      	movs	r3, #11
 800edc4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800edc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800edd0:	e057      	b.n	800ee82 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800edd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edd4:	2b7f      	cmp	r3, #127	; 0x7f
 800edd6:	d914      	bls.n	800ee02 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800edd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f001 ff21 	bl	8010c24 <ff_convert>
 800ede2:	4603      	mov	r3, r0
 800ede4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ede6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d004      	beq.n	800edf6 <create_name+0x2de>
 800edec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edee:	3b80      	subs	r3, #128	; 0x80
 800edf0:	4a15      	ldr	r2, [pc, #84]	; (800ee48 <create_name+0x330>)
 800edf2:	5cd3      	ldrb	r3, [r2, r3]
 800edf4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800edf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edfa:	f043 0302 	orr.w	r3, r3, #2
 800edfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ee02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d007      	beq.n	800ee18 <create_name+0x300>
 800ee08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	480f      	ldr	r0, [pc, #60]	; (800ee4c <create_name+0x334>)
 800ee0e:	f7fe fa63 	bl	800d2d8 <chk_chr>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d008      	beq.n	800ee2a <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ee18:	235f      	movs	r3, #95	; 0x5f
 800ee1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee20:	f043 0303 	orr.w	r3, r3, #3
 800ee24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee28:	e021      	b.n	800ee6e <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ee2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee2c:	2b40      	cmp	r3, #64	; 0x40
 800ee2e:	d90f      	bls.n	800ee50 <create_name+0x338>
 800ee30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee32:	2b5a      	cmp	r3, #90	; 0x5a
 800ee34:	d80c      	bhi.n	800ee50 <create_name+0x338>
					b |= 2;
 800ee36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee3a:	f043 0302 	orr.w	r3, r3, #2
 800ee3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee42:	e014      	b.n	800ee6e <create_name+0x356>
 800ee44:	08016e6c 	.word	0x08016e6c
 800ee48:	08016ef4 	.word	0x08016ef4
 800ee4c:	08016e78 	.word	0x08016e78
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee52:	2b60      	cmp	r3, #96	; 0x60
 800ee54:	d90b      	bls.n	800ee6e <create_name+0x356>
 800ee56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee58:	2b7a      	cmp	r3, #122	; 0x7a
 800ee5a:	d808      	bhi.n	800ee6e <create_name+0x356>
						b |= 1; w -= 0x20;
 800ee5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee60:	f043 0301 	orr.w	r3, r3, #1
 800ee64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee6a:	3b20      	subs	r3, #32
 800ee6c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ee6e:	6a3b      	ldr	r3, [r7, #32]
 800ee70:	1c5a      	adds	r2, r3, #1
 800ee72:	623a      	str	r2, [r7, #32]
 800ee74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee76:	b2d1      	uxtb	r1, r2
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	460a      	mov	r2, r1
 800ee7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ee82:	e75d      	b.n	800ed40 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800ee84:	bf00      	nop
 800ee86:	e000      	b.n	800ee8a <create_name+0x372>
			if (si > di) break;			/* No extension */
 800ee88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee90:	2be5      	cmp	r3, #229	; 0xe5
 800ee92:	d103      	bne.n	800ee9c <create_name+0x384>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2205      	movs	r2, #5
 800ee98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	2b08      	cmp	r3, #8
 800eea0:	d104      	bne.n	800eeac <create_name+0x394>
 800eea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eeac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eeb0:	f003 030c 	and.w	r3, r3, #12
 800eeb4:	2b0c      	cmp	r3, #12
 800eeb6:	d005      	beq.n	800eec4 <create_name+0x3ac>
 800eeb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eebc:	f003 0303 	and.w	r3, r3, #3
 800eec0:	2b03      	cmp	r3, #3
 800eec2:	d105      	bne.n	800eed0 <create_name+0x3b8>
 800eec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eec8:	f043 0302 	orr.w	r3, r3, #2
 800eecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800eed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eed4:	f003 0302 	and.w	r3, r3, #2
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d117      	bne.n	800ef0c <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eedc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eee0:	f003 0303 	and.w	r3, r3, #3
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d105      	bne.n	800eef4 <create_name+0x3dc>
 800eee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeec:	f043 0310 	orr.w	r3, r3, #16
 800eef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eef4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eef8:	f003 030c 	and.w	r3, r3, #12
 800eefc:	2b04      	cmp	r3, #4
 800eefe:	d105      	bne.n	800ef0c <create_name+0x3f4>
 800ef00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef04:	f043 0308 	orr.w	r3, r3, #8
 800ef08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ef16:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3728      	adds	r7, #40	; 0x28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	2b2f      	cmp	r3, #47	; 0x2f
 800ef3a:	d00b      	beq.n	800ef54 <follow_path+0x34>
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	2b5c      	cmp	r3, #92	; 0x5c
 800ef42:	d007      	beq.n	800ef54 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	69da      	ldr	r2, [r3, #28]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	609a      	str	r2, [r3, #8]
 800ef4c:	e00d      	b.n	800ef6a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	3301      	adds	r3, #1
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b2f      	cmp	r3, #47	; 0x2f
 800ef5a:	d0f8      	beq.n	800ef4e <follow_path+0x2e>
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	2b5c      	cmp	r3, #92	; 0x5c
 800ef62:	d0f4      	beq.n	800ef4e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	2200      	movs	r2, #0
 800ef68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b1f      	cmp	r3, #31
 800ef70:	d80a      	bhi.n	800ef88 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2280      	movs	r2, #128	; 0x80
 800ef76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7fe ff50 	bl	800de22 <dir_sdi>
 800ef82:	4603      	mov	r3, r0
 800ef84:	75fb      	strb	r3, [r7, #23]
 800ef86:	e05b      	b.n	800f040 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef88:	463b      	mov	r3, r7
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7ff fdc3 	bl	800eb18 <create_name>
 800ef92:	4603      	mov	r3, r0
 800ef94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d14c      	bne.n	800f036 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff fbb8 	bl	800e712 <dir_find>
 800efa2:	4603      	mov	r3, r0
 800efa4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800efac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800efae:	7dfb      	ldrb	r3, [r7, #23]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d01b      	beq.n	800efec <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800efb4:	7dfb      	ldrb	r3, [r7, #23]
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d13f      	bne.n	800f03a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800efba:	7afb      	ldrb	r3, [r7, #11]
 800efbc:	f003 0320 	and.w	r3, r3, #32
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00b      	beq.n	800efdc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800efc4:	7afb      	ldrb	r3, [r7, #11]
 800efc6:	f003 0304 	and.w	r3, r3, #4
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d031      	beq.n	800f032 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2280      	movs	r2, #128	; 0x80
 800efd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800efda:	e02e      	b.n	800f03a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800efdc:	7afb      	ldrb	r3, [r7, #11]
 800efde:	f003 0304 	and.w	r3, r3, #4
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d129      	bne.n	800f03a <follow_path+0x11a>
 800efe6:	2305      	movs	r3, #5
 800efe8:	75fb      	strb	r3, [r7, #23]
				break;
 800efea:	e026      	b.n	800f03a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	f003 0304 	and.w	r3, r3, #4
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d123      	bne.n	800f03e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	799b      	ldrb	r3, [r3, #6]
 800effa:	f003 0310 	and.w	r3, r3, #16
 800effe:	2b00      	cmp	r3, #0
 800f000:	d102      	bne.n	800f008 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f002:	2305      	movs	r3, #5
 800f004:	75fb      	strb	r3, [r7, #23]
 800f006:	e01b      	b.n	800f040 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	695b      	ldr	r3, [r3, #20]
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	8992      	ldrh	r2, [r2, #12]
 800f016:	fbb3 f0f2 	udiv	r0, r3, r2
 800f01a:	fb02 f200 	mul.w	r2, r2, r0
 800f01e:	1a9b      	subs	r3, r3, r2
 800f020:	440b      	add	r3, r1
 800f022:	4619      	mov	r1, r3
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7ff f8a2 	bl	800e16e <ld_clust>
 800f02a:	4602      	mov	r2, r0
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	609a      	str	r2, [r3, #8]
 800f030:	e7aa      	b.n	800ef88 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f032:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f034:	e7a8      	b.n	800ef88 <follow_path+0x68>
			if (res != FR_OK) break;
 800f036:	bf00      	nop
 800f038:	e002      	b.n	800f040 <follow_path+0x120>
				break;
 800f03a:	bf00      	nop
 800f03c:	e000      	b.n	800f040 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f03e:	bf00      	nop
			}
		}
	}

	return res;
 800f040:	7dfb      	ldrb	r3, [r7, #23]
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f04a:	b480      	push	{r7}
 800f04c:	b087      	sub	sp, #28
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f052:	f04f 33ff 	mov.w	r3, #4294967295
 800f056:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d031      	beq.n	800f0c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	617b      	str	r3, [r7, #20]
 800f066:	e002      	b.n	800f06e <get_ldnumber+0x24>
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	3301      	adds	r3, #1
 800f06c:	617b      	str	r3, [r7, #20]
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b1f      	cmp	r3, #31
 800f074:	d903      	bls.n	800f07e <get_ldnumber+0x34>
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	2b3a      	cmp	r3, #58	; 0x3a
 800f07c:	d1f4      	bne.n	800f068 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b3a      	cmp	r3, #58	; 0x3a
 800f084:	d11c      	bne.n	800f0c0 <get_ldnumber+0x76>
			tp = *path;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	1c5a      	adds	r2, r3, #1
 800f090:	60fa      	str	r2, [r7, #12]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	3b30      	subs	r3, #48	; 0x30
 800f096:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b09      	cmp	r3, #9
 800f09c:	d80e      	bhi.n	800f0bc <get_ldnumber+0x72>
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d10a      	bne.n	800f0bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d107      	bne.n	800f0bc <get_ldnumber+0x72>
					vol = (int)i;
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	e002      	b.n	800f0c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f0c4:	693b      	ldr	r3, [r7, #16]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	70da      	strb	r2, [r3, #3]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ea:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7fe fabe 	bl	800d670 <move_window>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <check_fs+0x2a>
 800f0fa:	2304      	movs	r3, #4
 800f0fc:	e038      	b.n	800f170 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	333c      	adds	r3, #60	; 0x3c
 800f102:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f106:	4618      	mov	r0, r3
 800f108:	f7fe f802 	bl	800d110 <ld_word>
 800f10c:	4603      	mov	r3, r0
 800f10e:	461a      	mov	r2, r3
 800f110:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f114:	429a      	cmp	r2, r3
 800f116:	d001      	beq.n	800f11c <check_fs+0x48>
 800f118:	2303      	movs	r3, #3
 800f11a:	e029      	b.n	800f170 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f122:	2be9      	cmp	r3, #233	; 0xe9
 800f124:	d009      	beq.n	800f13a <check_fs+0x66>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f12c:	2beb      	cmp	r3, #235	; 0xeb
 800f12e:	d11e      	bne.n	800f16e <check_fs+0x9a>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f136:	2b90      	cmp	r3, #144	; 0x90
 800f138:	d119      	bne.n	800f16e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	333c      	adds	r3, #60	; 0x3c
 800f13e:	3336      	adds	r3, #54	; 0x36
 800f140:	4618      	mov	r0, r3
 800f142:	f7fd fffd 	bl	800d140 <ld_dword>
 800f146:	4603      	mov	r3, r0
 800f148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f14c:	4a0a      	ldr	r2, [pc, #40]	; (800f178 <check_fs+0xa4>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d101      	bne.n	800f156 <check_fs+0x82>
 800f152:	2300      	movs	r3, #0
 800f154:	e00c      	b.n	800f170 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	333c      	adds	r3, #60	; 0x3c
 800f15a:	3352      	adds	r3, #82	; 0x52
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fd ffef 	bl	800d140 <ld_dword>
 800f162:	4602      	mov	r2, r0
 800f164:	4b05      	ldr	r3, [pc, #20]	; (800f17c <check_fs+0xa8>)
 800f166:	429a      	cmp	r2, r3
 800f168:	d101      	bne.n	800f16e <check_fs+0x9a>
 800f16a:	2300      	movs	r3, #0
 800f16c:	e000      	b.n	800f170 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f16e:	2302      	movs	r3, #2
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	00544146 	.word	0x00544146
 800f17c:	33544146 	.word	0x33544146

0800f180 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b096      	sub	sp, #88	; 0x58
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	4613      	mov	r3, r2
 800f18c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff ff58 	bl	800f04a <get_ldnumber>
 800f19a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	da01      	bge.n	800f1a6 <find_volume+0x26>
 800f1a2:	230b      	movs	r3, #11
 800f1a4:	e26b      	b.n	800f67e <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f1a6:	4ab0      	ldr	r2, [pc, #704]	; (800f468 <find_volume+0x2e8>)
 800f1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <find_volume+0x3a>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	e261      	b.n	800f67e <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f1c0:	79fb      	ldrb	r3, [r7, #7]
 800f1c2:	f023 0301 	bic.w	r3, r3, #1
 800f1c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d01a      	beq.n	800f206 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	785b      	ldrb	r3, [r3, #1]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fd fefd 	bl	800cfd4 <disk_status>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10c      	bne.n	800f206 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d007      	beq.n	800f202 <find_volume+0x82>
 800f1f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1f6:	f003 0304 	and.w	r3, r3, #4
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f1fe:	230a      	movs	r3, #10
 800f200:	e23d      	b.n	800f67e <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800f202:	2300      	movs	r3, #0
 800f204:	e23b      	b.n	800f67e <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f208:	2200      	movs	r2, #0
 800f20a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	785b      	ldrb	r3, [r3, #1]
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fd fef5 	bl	800d008 <disk_initialize>
 800f21e:	4603      	mov	r3, r0
 800f220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f230:	2303      	movs	r3, #3
 800f232:	e224      	b.n	800f67e <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f234:	79fb      	ldrb	r3, [r7, #7]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d007      	beq.n	800f24a <find_volume+0xca>
 800f23a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f23e:	f003 0304 	and.w	r3, r3, #4
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f246:	230a      	movs	r3, #10
 800f248:	e219      	b.n	800f67e <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24c:	7858      	ldrb	r0, [r3, #1]
 800f24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f250:	330c      	adds	r3, #12
 800f252:	461a      	mov	r2, r3
 800f254:	2102      	movs	r1, #2
 800f256:	f7fd ff3d 	bl	800d0d4 <disk_ioctl>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d001      	beq.n	800f264 <find_volume+0xe4>
 800f260:	2301      	movs	r3, #1
 800f262:	e20c      	b.n	800f67e <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f266:	899b      	ldrh	r3, [r3, #12]
 800f268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f26c:	d80d      	bhi.n	800f28a <find_volume+0x10a>
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	899b      	ldrh	r3, [r3, #12]
 800f272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f276:	d308      	bcc.n	800f28a <find_volume+0x10a>
 800f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27a:	899b      	ldrh	r3, [r3, #12]
 800f27c:	461a      	mov	r2, r3
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	899b      	ldrh	r3, [r3, #12]
 800f282:	3b01      	subs	r3, #1
 800f284:	4013      	ands	r3, r2
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <find_volume+0x10e>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e1f7      	b.n	800f67e <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f296:	f7ff ff1d 	bl	800f0d4 <check_fs>
 800f29a:	4603      	mov	r3, r0
 800f29c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f2a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d14b      	bne.n	800f340 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	643b      	str	r3, [r7, #64]	; 0x40
 800f2ac:	e01f      	b.n	800f2ee <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b6:	011b      	lsls	r3, r3, #4
 800f2b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f2bc:	4413      	add	r3, r2
 800f2be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d006      	beq.n	800f2d8 <find_volume+0x158>
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	3308      	adds	r3, #8
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fd ff36 	bl	800d140 <ld_dword>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	e000      	b.n	800f2da <find_volume+0x15a>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f2e2:	440b      	add	r3, r1
 800f2e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800f2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d9dc      	bls.n	800f2ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d002      	beq.n	800f304 <find_volume+0x184>
 800f2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f300:	3b01      	subs	r3, #1
 800f302:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f30c:	4413      	add	r3, r2
 800f30e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f312:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f316:	2b00      	cmp	r3, #0
 800f318:	d005      	beq.n	800f326 <find_volume+0x1a6>
 800f31a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f31c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f31e:	f7ff fed9 	bl	800f0d4 <check_fs>
 800f322:	4603      	mov	r3, r0
 800f324:	e000      	b.n	800f328 <find_volume+0x1a8>
 800f326:	2303      	movs	r3, #3
 800f328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f330:	2b01      	cmp	r3, #1
 800f332:	d905      	bls.n	800f340 <find_volume+0x1c0>
 800f334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f336:	3301      	adds	r3, #1
 800f338:	643b      	str	r3, [r7, #64]	; 0x40
 800f33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f33c:	2b03      	cmp	r3, #3
 800f33e:	d9e1      	bls.n	800f304 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f344:	2b04      	cmp	r3, #4
 800f346:	d101      	bne.n	800f34c <find_volume+0x1cc>
 800f348:	2301      	movs	r3, #1
 800f34a:	e198      	b.n	800f67e <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f350:	2b01      	cmp	r3, #1
 800f352:	d901      	bls.n	800f358 <find_volume+0x1d8>
 800f354:	230d      	movs	r3, #13
 800f356:	e192      	b.n	800f67e <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35a:	333c      	adds	r3, #60	; 0x3c
 800f35c:	330b      	adds	r3, #11
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fd fed6 	bl	800d110 <ld_word>
 800f364:	4603      	mov	r3, r0
 800f366:	461a      	mov	r2, r3
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	899b      	ldrh	r3, [r3, #12]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d001      	beq.n	800f374 <find_volume+0x1f4>
 800f370:	230d      	movs	r3, #13
 800f372:	e184      	b.n	800f67e <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f376:	333c      	adds	r3, #60	; 0x3c
 800f378:	3316      	adds	r3, #22
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fd fec8 	bl	800d110 <ld_word>
 800f380:	4603      	mov	r3, r0
 800f382:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f386:	2b00      	cmp	r3, #0
 800f388:	d106      	bne.n	800f398 <find_volume+0x218>
 800f38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38c:	333c      	adds	r3, #60	; 0x3c
 800f38e:	3324      	adds	r3, #36	; 0x24
 800f390:	4618      	mov	r0, r3
 800f392:	f7fd fed5 	bl	800d140 <ld_dword>
 800f396:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f39c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	789b      	ldrb	r3, [r3, #2]
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d005      	beq.n	800f3bc <find_volume+0x23c>
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b2:	789b      	ldrb	r3, [r3, #2]
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d001      	beq.n	800f3bc <find_volume+0x23c>
 800f3b8:	230d      	movs	r3, #13
 800f3ba:	e160      	b.n	800f67e <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	789b      	ldrb	r3, [r3, #2]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3c4:	fb02 f303 	mul.w	r3, r2, r3
 800f3c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d8:	895b      	ldrh	r3, [r3, #10]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d008      	beq.n	800f3f0 <find_volume+0x270>
 800f3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e0:	895b      	ldrh	r3, [r3, #10]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	895b      	ldrh	r3, [r3, #10]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <find_volume+0x274>
 800f3f0:	230d      	movs	r3, #13
 800f3f2:	e144      	b.n	800f67e <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f6:	333c      	adds	r3, #60	; 0x3c
 800f3f8:	3311      	adds	r3, #17
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fd fe88 	bl	800d110 <ld_word>
 800f400:	4603      	mov	r3, r0
 800f402:	461a      	mov	r2, r3
 800f404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f406:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40a:	891b      	ldrh	r3, [r3, #8]
 800f40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f40e:	8992      	ldrh	r2, [r2, #12]
 800f410:	0952      	lsrs	r2, r2, #5
 800f412:	b292      	uxth	r2, r2
 800f414:	fbb3 f1f2 	udiv	r1, r3, r2
 800f418:	fb02 f201 	mul.w	r2, r2, r1
 800f41c:	1a9b      	subs	r3, r3, r2
 800f41e:	b29b      	uxth	r3, r3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d001      	beq.n	800f428 <find_volume+0x2a8>
 800f424:	230d      	movs	r3, #13
 800f426:	e12a      	b.n	800f67e <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	333c      	adds	r3, #60	; 0x3c
 800f42c:	3313      	adds	r3, #19
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fd fe6e 	bl	800d110 <ld_word>
 800f434:	4603      	mov	r3, r0
 800f436:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d106      	bne.n	800f44c <find_volume+0x2cc>
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	333c      	adds	r3, #60	; 0x3c
 800f442:	3320      	adds	r3, #32
 800f444:	4618      	mov	r0, r3
 800f446:	f7fd fe7b 	bl	800d140 <ld_dword>
 800f44a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	333c      	adds	r3, #60	; 0x3c
 800f450:	330e      	adds	r3, #14
 800f452:	4618      	mov	r0, r3
 800f454:	f7fd fe5c 	bl	800d110 <ld_word>
 800f458:	4603      	mov	r3, r0
 800f45a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f45c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d104      	bne.n	800f46c <find_volume+0x2ec>
 800f462:	230d      	movs	r3, #13
 800f464:	e10b      	b.n	800f67e <find_volume+0x4fe>
 800f466:	bf00      	nop
 800f468:	20007b6c 	.word	0x20007b6c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f46c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f470:	4413      	add	r3, r2
 800f472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f474:	8911      	ldrh	r1, [r2, #8]
 800f476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f478:	8992      	ldrh	r2, [r2, #12]
 800f47a:	0952      	lsrs	r2, r2, #5
 800f47c:	b292      	uxth	r2, r2
 800f47e:	fbb1 f2f2 	udiv	r2, r1, r2
 800f482:	b292      	uxth	r2, r2
 800f484:	4413      	add	r3, r2
 800f486:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d201      	bcs.n	800f494 <find_volume+0x314>
 800f490:	230d      	movs	r3, #13
 800f492:	e0f4      	b.n	800f67e <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f49c:	8952      	ldrh	r2, [r2, #10]
 800f49e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <find_volume+0x32e>
 800f4aa:	230d      	movs	r3, #13
 800f4ac:	e0e7      	b.n	800f67e <find_volume+0x4fe>
		fmt = FS_FAT32;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d802      	bhi.n	800f4c4 <find_volume+0x344>
 800f4be:	2302      	movs	r3, #2
 800f4c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d802      	bhi.n	800f4d4 <find_volume+0x354>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	1c9a      	adds	r2, r3, #2
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4e0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f4e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e6:	441a      	add	r2, r3
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f4ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f0:	441a      	add	r2, r3
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f4:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f4f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4fa:	2b03      	cmp	r3, #3
 800f4fc:	d11e      	bne.n	800f53c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f500:	333c      	adds	r3, #60	; 0x3c
 800f502:	332a      	adds	r3, #42	; 0x2a
 800f504:	4618      	mov	r0, r3
 800f506:	f7fd fe03 	bl	800d110 <ld_word>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <find_volume+0x394>
 800f510:	230d      	movs	r3, #13
 800f512:	e0b4      	b.n	800f67e <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	891b      	ldrh	r3, [r3, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <find_volume+0x3a0>
 800f51c:	230d      	movs	r3, #13
 800f51e:	e0ae      	b.n	800f67e <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	333c      	adds	r3, #60	; 0x3c
 800f524:	332c      	adds	r3, #44	; 0x2c
 800f526:	4618      	mov	r0, r3
 800f528:	f7fd fe0a 	bl	800d140 <ld_dword>
 800f52c:	4602      	mov	r2, r0
 800f52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f530:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	647b      	str	r3, [r7, #68]	; 0x44
 800f53a:	e01f      	b.n	800f57c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53e:	891b      	ldrh	r3, [r3, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d101      	bne.n	800f548 <find_volume+0x3c8>
 800f544:	230d      	movs	r3, #13
 800f546:	e09a      	b.n	800f67e <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f54e:	441a      	add	r2, r3
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d103      	bne.n	800f564 <find_volume+0x3e4>
 800f55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55e:	6a1b      	ldr	r3, [r3, #32]
 800f560:	005b      	lsls	r3, r3, #1
 800f562:	e00a      	b.n	800f57a <find_volume+0x3fa>
 800f564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f566:	6a1a      	ldr	r2, [r3, #32]
 800f568:	4613      	mov	r3, r2
 800f56a:	005b      	lsls	r3, r3, #1
 800f56c:	4413      	add	r3, r2
 800f56e:	085a      	lsrs	r2, r3, #1
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	6a1b      	ldr	r3, [r3, #32]
 800f574:	f003 0301 	and.w	r3, r3, #1
 800f578:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f57a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	899b      	ldrh	r3, [r3, #12]
 800f584:	4619      	mov	r1, r3
 800f586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f588:	440b      	add	r3, r1
 800f58a:	3b01      	subs	r3, #1
 800f58c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f58e:	8989      	ldrh	r1, [r1, #12]
 800f590:	fbb3 f3f1 	udiv	r3, r3, r1
 800f594:	429a      	cmp	r2, r3
 800f596:	d201      	bcs.n	800f59c <find_volume+0x41c>
 800f598:	230d      	movs	r3, #13
 800f59a:	e070      	b.n	800f67e <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59e:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a2:	619a      	str	r2, [r3, #24]
 800f5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a6:	699a      	ldr	r2, [r3, #24]
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ae:	2280      	movs	r2, #128	; 0x80
 800f5b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f5b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5b6:	2b03      	cmp	r3, #3
 800f5b8:	d149      	bne.n	800f64e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5bc:	333c      	adds	r3, #60	; 0x3c
 800f5be:	3330      	adds	r3, #48	; 0x30
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd fda5 	bl	800d110 <ld_word>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d140      	bne.n	800f64e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5d4:	f7fe f84c 	bl	800d670 <move_window>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d137      	bne.n	800f64e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	333c      	adds	r3, #60	; 0x3c
 800f5e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fd fd8f 	bl	800d110 <ld_word>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d127      	bne.n	800f64e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f600:	333c      	adds	r3, #60	; 0x3c
 800f602:	4618      	mov	r0, r3
 800f604:	f7fd fd9c 	bl	800d140 <ld_dword>
 800f608:	4602      	mov	r2, r0
 800f60a:	4b1f      	ldr	r3, [pc, #124]	; (800f688 <find_volume+0x508>)
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d11e      	bne.n	800f64e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f612:	333c      	adds	r3, #60	; 0x3c
 800f614:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fd fd91 	bl	800d140 <ld_dword>
 800f61e:	4602      	mov	r2, r0
 800f620:	4b1a      	ldr	r3, [pc, #104]	; (800f68c <find_volume+0x50c>)
 800f622:	429a      	cmp	r2, r3
 800f624:	d113      	bne.n	800f64e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	333c      	adds	r3, #60	; 0x3c
 800f62a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fd fd86 	bl	800d140 <ld_dword>
 800f634:	4602      	mov	r2, r0
 800f636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f638:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	333c      	adds	r3, #60	; 0x3c
 800f63e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f642:	4618      	mov	r0, r3
 800f644:	f7fd fd7c 	bl	800d140 <ld_dword>
 800f648:	4602      	mov	r2, r0
 800f64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f654:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f656:	4b0e      	ldr	r3, [pc, #56]	; (800f690 <find_volume+0x510>)
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	3301      	adds	r3, #1
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	4b0c      	ldr	r3, [pc, #48]	; (800f690 <find_volume+0x510>)
 800f660:	801a      	strh	r2, [r3, #0]
 800f662:	4b0b      	ldr	r3, [pc, #44]	; (800f690 <find_volume+0x510>)
 800f664:	881a      	ldrh	r2, [r3, #0]
 800f666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f668:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	4a09      	ldr	r2, [pc, #36]	; (800f694 <find_volume+0x514>)
 800f66e:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	2200      	movs	r2, #0
 800f674:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f676:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f678:	f7fd ff92 	bl	800d5a0 <clear_lock>
#endif
	return FR_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3758      	adds	r7, #88	; 0x58
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	41615252 	.word	0x41615252
 800f68c:	61417272 	.word	0x61417272
 800f690:	20007b70 	.word	0x20007b70
 800f694:	20007b94 	.word	0x20007b94

0800f698 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f6a2:	2309      	movs	r3, #9
 800f6a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d01c      	beq.n	800f6e6 <validate+0x4e>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d018      	beq.n	800f6e6 <validate+0x4e>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d013      	beq.n	800f6e6 <validate+0x4e>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	889a      	ldrh	r2, [r3, #4]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	88db      	ldrh	r3, [r3, #6]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d10c      	bne.n	800f6e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	785b      	ldrb	r3, [r3, #1]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fd fc7e 	bl	800cfd4 <disk_status>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	f003 0301 	and.w	r3, r3, #1
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <validate+0x4e>
			res = FR_OK;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f6e6:	7bfb      	ldrb	r3, [r7, #15]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d102      	bne.n	800f6f2 <validate+0x5a>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	e000      	b.n	800f6f4 <validate+0x5c>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	6013      	str	r3, [r2, #0]
	return res;
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
	...

0800f704 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b088      	sub	sp, #32
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	4613      	mov	r3, r2
 800f710:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f716:	f107 0310 	add.w	r3, r7, #16
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7ff fc95 	bl	800f04a <get_ldnumber>
 800f720:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	2b00      	cmp	r3, #0
 800f726:	da01      	bge.n	800f72c <f_mount+0x28>
 800f728:	230b      	movs	r3, #11
 800f72a:	e02b      	b.n	800f784 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f72c:	4a17      	ldr	r2, [pc, #92]	; (800f78c <f_mount+0x88>)
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f734:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d005      	beq.n	800f748 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f73c:	69b8      	ldr	r0, [r7, #24]
 800f73e:	f7fd ff2f 	bl	800d5a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	2200      	movs	r2, #0
 800f746:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d002      	beq.n	800f754 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2200      	movs	r2, #0
 800f752:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	490d      	ldr	r1, [pc, #52]	; (800f78c <f_mount+0x88>)
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d002      	beq.n	800f76a <f_mount+0x66>
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d001      	beq.n	800f76e <f_mount+0x6a>
 800f76a:	2300      	movs	r3, #0
 800f76c:	e00a      	b.n	800f784 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f76e:	f107 010c 	add.w	r1, r7, #12
 800f772:	f107 0308 	add.w	r3, r7, #8
 800f776:	2200      	movs	r2, #0
 800f778:	4618      	mov	r0, r3
 800f77a:	f7ff fd01 	bl	800f180 <find_volume>
 800f77e:	4603      	mov	r3, r0
 800f780:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f782:	7dfb      	ldrb	r3, [r7, #23]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3720      	adds	r7, #32
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	20007b6c 	.word	0x20007b6c

0800f790 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b09a      	sub	sp, #104	; 0x68
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	4613      	mov	r3, r2
 800f79c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d101      	bne.n	800f7a8 <f_open+0x18>
 800f7a4:	2309      	movs	r3, #9
 800f7a6:	e1bb      	b.n	800fb20 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f7b0:	79fa      	ldrb	r2, [r7, #7]
 800f7b2:	f107 0114 	add.w	r1, r7, #20
 800f7b6:	f107 0308 	add.w	r3, r7, #8
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7ff fce0 	bl	800f180 <find_volume>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f7c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f040 819f 	bne.w	800fb0e <f_open+0x37e>
		dj.obj.fs = fs;
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	f107 0318 	add.w	r3, r7, #24
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7ff fb9f 	bl	800ef20 <follow_path>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f7e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d11a      	bne.n	800f826 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f7f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f7f4:	b25b      	sxtb	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	da03      	bge.n	800f802 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f7fa:	2306      	movs	r3, #6
 800f7fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f800:	e011      	b.n	800f826 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	f023 0301 	bic.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	bf14      	ite	ne
 800f80c:	2301      	movne	r3, #1
 800f80e:	2300      	moveq	r3, #0
 800f810:	b2db      	uxtb	r3, r3
 800f812:	461a      	mov	r2, r3
 800f814:	f107 0318 	add.w	r3, r7, #24
 800f818:	4611      	mov	r1, r2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fd fd78 	bl	800d310 <chk_lock>
 800f820:	4603      	mov	r3, r0
 800f822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	f003 031c 	and.w	r3, r3, #28
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d07f      	beq.n	800f930 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f830:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f834:	2b00      	cmp	r3, #0
 800f836:	d017      	beq.n	800f868 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f83c:	2b04      	cmp	r3, #4
 800f83e:	d10e      	bne.n	800f85e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f840:	f7fd fdc2 	bl	800d3c8 <enq_lock>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d006      	beq.n	800f858 <f_open+0xc8>
 800f84a:	f107 0318 	add.w	r3, r7, #24
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff f820 	bl	800e894 <dir_register>
 800f854:	4603      	mov	r3, r0
 800f856:	e000      	b.n	800f85a <f_open+0xca>
 800f858:	2312      	movs	r3, #18
 800f85a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	f043 0308 	orr.w	r3, r3, #8
 800f864:	71fb      	strb	r3, [r7, #7]
 800f866:	e010      	b.n	800f88a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f868:	7fbb      	ldrb	r3, [r7, #30]
 800f86a:	f003 0311 	and.w	r3, r3, #17
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d003      	beq.n	800f87a <f_open+0xea>
					res = FR_DENIED;
 800f872:	2307      	movs	r3, #7
 800f874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f878:	e007      	b.n	800f88a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	f003 0304 	and.w	r3, r3, #4
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <f_open+0xfa>
 800f884:	2308      	movs	r3, #8
 800f886:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f88a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d168      	bne.n	800f964 <f_open+0x1d4>
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	f003 0308 	and.w	r3, r3, #8
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d063      	beq.n	800f964 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f89c:	f7fd f94a 	bl	800cb34 <get_fattime>
 800f8a0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	330e      	adds	r3, #14
 800f8a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fd fc87 	bl	800d1bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	3316      	adds	r3, #22
 800f8b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fd fc81 	bl	800d1bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8bc:	330b      	adds	r3, #11
 800f8be:	2220      	movs	r2, #32
 800f8c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8c6:	4611      	mov	r1, r2
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe fc50 	bl	800e16e <ld_clust>
 800f8ce:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fe fc68 	bl	800e1ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	331c      	adds	r3, #28
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fd fc6a 	bl	800d1bc <st_dword>
					fs->wflag = 1;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f8ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d037      	beq.n	800f964 <f_open+0x1d4>
						dw = fs->winsect;
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f8fa:	f107 0318 	add.w	r3, r7, #24
 800f8fe:	2200      	movs	r2, #0
 800f900:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f902:	4618      	mov	r0, r3
 800f904:	f7fe f958 	bl	800dbb8 <remove_chain>
 800f908:	4603      	mov	r3, r0
 800f90a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f90e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f912:	2b00      	cmp	r3, #0
 800f914:	d126      	bne.n	800f964 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fd fea8 	bl	800d670 <move_window>
 800f920:	4603      	mov	r3, r0
 800f922:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f92a:	3a01      	subs	r2, #1
 800f92c:	615a      	str	r2, [r3, #20]
 800f92e:	e019      	b.n	800f964 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f930:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f934:	2b00      	cmp	r3, #0
 800f936:	d115      	bne.n	800f964 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f938:	7fbb      	ldrb	r3, [r7, #30]
 800f93a:	f003 0310 	and.w	r3, r3, #16
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <f_open+0x1ba>
					res = FR_NO_FILE;
 800f942:	2304      	movs	r3, #4
 800f944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f948:	e00c      	b.n	800f964 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f94a:	79fb      	ldrb	r3, [r7, #7]
 800f94c:	f003 0302 	and.w	r3, r3, #2
 800f950:	2b00      	cmp	r3, #0
 800f952:	d007      	beq.n	800f964 <f_open+0x1d4>
 800f954:	7fbb      	ldrb	r3, [r7, #30]
 800f956:	f003 0301 	and.w	r3, r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d002      	beq.n	800f964 <f_open+0x1d4>
						res = FR_DENIED;
 800f95e:	2307      	movs	r3, #7
 800f960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f964:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d128      	bne.n	800f9be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	f003 0308 	and.w	r3, r3, #8
 800f972:	2b00      	cmp	r3, #0
 800f974:	d003      	beq.n	800f97e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f97c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f98c:	79fb      	ldrb	r3, [r7, #7]
 800f98e:	f023 0301 	bic.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	bf14      	ite	ne
 800f996:	2301      	movne	r3, #1
 800f998:	2300      	moveq	r3, #0
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	461a      	mov	r2, r3
 800f99e:	f107 0318 	add.w	r3, r7, #24
 800f9a2:	4611      	mov	r1, r2
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fd fd31 	bl	800d40c <inc_lock>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d102      	bne.n	800f9be <f_open+0x22e>
 800f9b8:	2302      	movs	r3, #2
 800f9ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f9be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f040 80a3 	bne.w	800fb0e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe fbcd 	bl	800e16e <ld_clust>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9dc:	331c      	adds	r3, #28
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fd fbae 	bl	800d140 <ld_dword>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	88da      	ldrh	r2, [r3, #6]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	79fa      	ldrb	r2, [r7, #7]
 800fa02:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2200      	movs	r2, #0
 800fa08:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	3330      	adds	r3, #48	; 0x30
 800fa1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa1e:	2100      	movs	r1, #0
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fd fc18 	bl	800d256 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fa26:	79fb      	ldrb	r3, [r7, #7]
 800fa28:	f003 0320 	and.w	r3, r3, #32
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d06e      	beq.n	800fb0e <f_open+0x37e>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d06a      	beq.n	800fb0e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	68da      	ldr	r2, [r3, #12]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	895b      	ldrh	r3, [r3, #10]
 800fa44:	461a      	mov	r2, r3
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	899b      	ldrh	r3, [r3, #12]
 800fa4a:	fb03 f302 	mul.w	r3, r3, r2
 800fa4e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa5c:	e016      	b.n	800fa8c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fd fec1 	bl	800d7ea <get_fat>
 800fa68:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fa6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d802      	bhi.n	800fa76 <f_open+0x2e6>
 800fa70:	2302      	movs	r3, #2
 800fa72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7c:	d102      	bne.n	800fa84 <f_open+0x2f4>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa88:	1ad3      	subs	r3, r2, r3
 800fa8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d103      	bne.n	800fa9c <f_open+0x30c>
 800fa94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d8e0      	bhi.n	800fa5e <f_open+0x2ce>
				}
				fp->clust = clst;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800faa0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800faa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d131      	bne.n	800fb0e <f_open+0x37e>
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	899b      	ldrh	r3, [r3, #12]
 800faae:	461a      	mov	r2, r3
 800fab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fab2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fab6:	fb02 f201 	mul.w	r2, r2, r1
 800faba:	1a9b      	subs	r3, r3, r2
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d026      	beq.n	800fb0e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fd fe71 	bl	800d7ac <clust2sect>
 800faca:	64f8      	str	r0, [r7, #76]	; 0x4c
 800facc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800face:	2b00      	cmp	r3, #0
 800fad0:	d103      	bne.n	800fada <f_open+0x34a>
						res = FR_INT_ERR;
 800fad2:	2302      	movs	r3, #2
 800fad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fad8:	e019      	b.n	800fb0e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	899b      	ldrh	r3, [r3, #12]
 800fade:	461a      	mov	r2, r3
 800fae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fae2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fae8:	441a      	add	r2, r3
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	7858      	ldrb	r0, [r3, #1]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6a1a      	ldr	r2, [r3, #32]
 800fafc:	2301      	movs	r3, #1
 800fafe:	f7fd faa9 	bl	800d054 <disk_read>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d002      	beq.n	800fb0e <f_open+0x37e>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fb0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <f_open+0x38c>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3768      	adds	r7, #104	; 0x68
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08e      	sub	sp, #56	; 0x38
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f107 0214 	add.w	r2, r7, #20
 800fb46:	4611      	mov	r1, r2
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7ff fda5 	bl	800f698 <validate>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fb54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d107      	bne.n	800fb6c <f_read+0x44>
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	7d5b      	ldrb	r3, [r3, #21]
 800fb60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <f_read+0x4a>
 800fb6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb70:	e135      	b.n	800fdde <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	7d1b      	ldrb	r3, [r3, #20]
 800fb76:	f003 0301 	and.w	r3, r3, #1
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d101      	bne.n	800fb82 <f_read+0x5a>
 800fb7e:	2307      	movs	r3, #7
 800fb80:	e12d      	b.n	800fdde <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	68da      	ldr	r2, [r3, #12]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	699b      	ldr	r3, [r3, #24]
 800fb8a:	1ad3      	subs	r3, r2, r3
 800fb8c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	f240 811e 	bls.w	800fdd4 <f_read+0x2ac>
 800fb98:	6a3b      	ldr	r3, [r7, #32]
 800fb9a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fb9c:	e11a      	b.n	800fdd4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	699b      	ldr	r3, [r3, #24]
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	8992      	ldrh	r2, [r2, #12]
 800fba6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbaa:	fb02 f201 	mul.w	r2, r2, r1
 800fbae:	1a9b      	subs	r3, r3, r2
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f040 80d5 	bne.w	800fd60 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	699b      	ldr	r3, [r3, #24]
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	8992      	ldrh	r2, [r2, #12]
 800fbbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	8952      	ldrh	r2, [r2, #10]
 800fbc6:	3a01      	subs	r2, #1
 800fbc8:	4013      	ands	r3, r2
 800fbca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d12f      	bne.n	800fc32 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d103      	bne.n	800fbe2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	633b      	str	r3, [r7, #48]	; 0x30
 800fbe0:	e013      	b.n	800fc0a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d007      	beq.n	800fbfa <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f7fe f8de 	bl	800ddb2 <clmt_clust>
 800fbf6:	6338      	str	r0, [r7, #48]	; 0x30
 800fbf8:	e007      	b.n	800fc0a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	4619      	mov	r1, r3
 800fc02:	4610      	mov	r0, r2
 800fc04:	f7fd fdf1 	bl	800d7ea <get_fat>
 800fc08:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d804      	bhi.n	800fc1a <f_read+0xf2>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2202      	movs	r2, #2
 800fc14:	755a      	strb	r2, [r3, #21]
 800fc16:	2302      	movs	r3, #2
 800fc18:	e0e1      	b.n	800fdde <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc20:	d104      	bne.n	800fc2c <f_read+0x104>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2201      	movs	r2, #1
 800fc26:	755a      	strb	r2, [r3, #21]
 800fc28:	2301      	movs	r3, #1
 800fc2a:	e0d8      	b.n	800fdde <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc30:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	f7fd fdb6 	bl	800d7ac <clust2sect>
 800fc40:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d104      	bne.n	800fc52 <f_read+0x12a>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2202      	movs	r2, #2
 800fc4c:	755a      	strb	r2, [r3, #21]
 800fc4e:	2302      	movs	r3, #2
 800fc50:	e0c5      	b.n	800fdde <f_read+0x2b6>
			sect += csect;
 800fc52:	69ba      	ldr	r2, [r7, #24]
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	4413      	add	r3, r2
 800fc58:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	899b      	ldrh	r3, [r3, #12]
 800fc5e:	461a      	mov	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc66:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d041      	beq.n	800fcf2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc6e:	69fa      	ldr	r2, [r7, #28]
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	4413      	add	r3, r2
 800fc74:	697a      	ldr	r2, [r7, #20]
 800fc76:	8952      	ldrh	r2, [r2, #10]
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d905      	bls.n	800fc88 <f_read+0x160>
					cc = fs->csize - csect;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	895b      	ldrh	r3, [r3, #10]
 800fc80:	461a      	mov	r2, r3
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	7858      	ldrb	r0, [r3, #1]
 800fc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc92:	f7fd f9df 	bl	800d054 <disk_read>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d004      	beq.n	800fca6 <f_read+0x17e>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	755a      	strb	r2, [r3, #21]
 800fca2:	2301      	movs	r3, #1
 800fca4:	e09b      	b.n	800fdde <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	7d1b      	ldrb	r3, [r3, #20]
 800fcaa:	b25b      	sxtb	r3, r3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	da18      	bge.n	800fce2 <f_read+0x1ba>
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6a1a      	ldr	r2, [r3, #32]
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d911      	bls.n	800fce2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	6a1a      	ldr	r2, [r3, #32]
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	8992      	ldrh	r2, [r2, #12]
 800fcca:	fb02 f303 	mul.w	r3, r2, r3
 800fcce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcd0:	18d0      	adds	r0, r2, r3
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	899b      	ldrh	r3, [r3, #12]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	f7fd fa99 	bl	800d214 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	899b      	ldrh	r3, [r3, #12]
 800fce6:	461a      	mov	r2, r3
 800fce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcea:	fb02 f303 	mul.w	r3, r2, r3
 800fcee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fcf0:	e05c      	b.n	800fdac <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	69ba      	ldr	r2, [r7, #24]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d02e      	beq.n	800fd5a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	7d1b      	ldrb	r3, [r3, #20]
 800fd00:	b25b      	sxtb	r3, r3
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	da18      	bge.n	800fd38 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	7858      	ldrb	r0, [r3, #1]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6a1a      	ldr	r2, [r3, #32]
 800fd14:	2301      	movs	r3, #1
 800fd16:	f7fd f9bd 	bl	800d094 <disk_write>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d004      	beq.n	800fd2a <f_read+0x202>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2201      	movs	r2, #1
 800fd24:	755a      	strb	r2, [r3, #21]
 800fd26:	2301      	movs	r3, #1
 800fd28:	e059      	b.n	800fdde <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	7d1b      	ldrb	r3, [r3, #20]
 800fd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd32:	b2da      	uxtb	r2, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	7858      	ldrb	r0, [r3, #1]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd42:	2301      	movs	r3, #1
 800fd44:	69ba      	ldr	r2, [r7, #24]
 800fd46:	f7fd f985 	bl	800d054 <disk_read>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d004      	beq.n	800fd5a <f_read+0x232>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2201      	movs	r2, #1
 800fd54:	755a      	strb	r2, [r3, #21]
 800fd56:	2301      	movs	r3, #1
 800fd58:	e041      	b.n	800fdde <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	69ba      	ldr	r2, [r7, #24]
 800fd5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	4618      	mov	r0, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	699b      	ldr	r3, [r3, #24]
 800fd6a:	697a      	ldr	r2, [r7, #20]
 800fd6c:	8992      	ldrh	r2, [r2, #12]
 800fd6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd72:	fb02 f201 	mul.w	r2, r2, r1
 800fd76:	1a9b      	subs	r3, r3, r2
 800fd78:	1ac3      	subs	r3, r0, r3
 800fd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d901      	bls.n	800fd88 <f_read+0x260>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	699b      	ldr	r3, [r3, #24]
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	8992      	ldrh	r2, [r2, #12]
 800fd96:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd9a:	fb02 f200 	mul.w	r2, r2, r0
 800fd9e:	1a9b      	subs	r3, r3, r2
 800fda0:	440b      	add	r3, r1
 800fda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda4:	4619      	mov	r1, r3
 800fda6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fda8:	f7fd fa34 	bl	800d214 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fdac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	4413      	add	r3, r2
 800fdb2:	627b      	str	r3, [r7, #36]	; 0x24
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	699a      	ldr	r2, [r3, #24]
 800fdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdba:	441a      	add	r2, r3
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	619a      	str	r2, [r3, #24]
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	441a      	add	r2, r3
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f47f aee1 	bne.w	800fb9e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3738      	adds	r7, #56	; 0x38
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b08c      	sub	sp, #48	; 0x30
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	60f8      	str	r0, [r7, #12]
 800fdee:	60b9      	str	r1, [r7, #8]
 800fdf0:	607a      	str	r2, [r7, #4]
 800fdf2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f107 0210 	add.w	r2, r7, #16
 800fe04:	4611      	mov	r1, r2
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7ff fc46 	bl	800f698 <validate>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fe12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d107      	bne.n	800fe2a <f_write+0x44>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	7d5b      	ldrb	r3, [r3, #21]
 800fe1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fe22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d002      	beq.n	800fe30 <f_write+0x4a>
 800fe2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe2e:	e16a      	b.n	8010106 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	7d1b      	ldrb	r3, [r3, #20]
 800fe34:	f003 0302 	and.w	r3, r3, #2
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <f_write+0x5a>
 800fe3c:	2307      	movs	r3, #7
 800fe3e:	e162      	b.n	8010106 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	699a      	ldr	r2, [r3, #24]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	441a      	add	r2, r3
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	699b      	ldr	r3, [r3, #24]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	f080 814c 	bcs.w	80100ea <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	699b      	ldr	r3, [r3, #24]
 800fe56:	43db      	mvns	r3, r3
 800fe58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fe5a:	e146      	b.n	80100ea <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	8992      	ldrh	r2, [r2, #12]
 800fe64:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe68:	fb02 f201 	mul.w	r2, r2, r1
 800fe6c:	1a9b      	subs	r3, r3, r2
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f040 80f1 	bne.w	8010056 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	699b      	ldr	r3, [r3, #24]
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	8992      	ldrh	r2, [r2, #12]
 800fe7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe80:	693a      	ldr	r2, [r7, #16]
 800fe82:	8952      	ldrh	r2, [r2, #10]
 800fe84:	3a01      	subs	r2, #1
 800fe86:	4013      	ands	r3, r2
 800fe88:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d143      	bne.n	800ff18 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d10c      	bne.n	800feb2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fe9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d11a      	bne.n	800feda <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2100      	movs	r1, #0
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7fd feea 	bl	800dc82 <create_chain>
 800feae:	62b8      	str	r0, [r7, #40]	; 0x28
 800feb0:	e013      	b.n	800feda <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d007      	beq.n	800feca <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	4619      	mov	r1, r3
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7fd ff76 	bl	800ddb2 <clmt_clust>
 800fec6:	62b8      	str	r0, [r7, #40]	; 0x28
 800fec8:	e007      	b.n	800feda <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	69db      	ldr	r3, [r3, #28]
 800fed0:	4619      	mov	r1, r3
 800fed2:	4610      	mov	r0, r2
 800fed4:	f7fd fed5 	bl	800dc82 <create_chain>
 800fed8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f000 8109 	beq.w	80100f4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d104      	bne.n	800fef2 <f_write+0x10c>
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2202      	movs	r2, #2
 800feec:	755a      	strb	r2, [r3, #21]
 800feee:	2302      	movs	r3, #2
 800fef0:	e109      	b.n	8010106 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef8:	d104      	bne.n	800ff04 <f_write+0x11e>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2201      	movs	r2, #1
 800fefe:	755a      	strb	r2, [r3, #21]
 800ff00:	2301      	movs	r3, #1
 800ff02:	e100      	b.n	8010106 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff08:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <f_write+0x132>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff16:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	7d1b      	ldrb	r3, [r3, #20]
 800ff1c:	b25b      	sxtb	r3, r3
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	da18      	bge.n	800ff54 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	7858      	ldrb	r0, [r3, #1]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6a1a      	ldr	r2, [r3, #32]
 800ff30:	2301      	movs	r3, #1
 800ff32:	f7fd f8af 	bl	800d094 <disk_write>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d004      	beq.n	800ff46 <f_write+0x160>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	755a      	strb	r2, [r3, #21]
 800ff42:	2301      	movs	r3, #1
 800ff44:	e0df      	b.n	8010106 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	7d1b      	ldrb	r3, [r3, #20]
 800ff4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ff54:	693a      	ldr	r2, [r7, #16]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	69db      	ldr	r3, [r3, #28]
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	f7fd fc25 	bl	800d7ac <clust2sect>
 800ff62:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d104      	bne.n	800ff74 <f_write+0x18e>
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2202      	movs	r2, #2
 800ff6e:	755a      	strb	r2, [r3, #21]
 800ff70:	2302      	movs	r3, #2
 800ff72:	e0c8      	b.n	8010106 <f_write+0x320>
			sect += csect;
 800ff74:	697a      	ldr	r2, [r7, #20]
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	4413      	add	r3, r2
 800ff7a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	899b      	ldrh	r3, [r3, #12]
 800ff80:	461a      	mov	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff88:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ff8a:	6a3b      	ldr	r3, [r7, #32]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d043      	beq.n	8010018 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff90:	69ba      	ldr	r2, [r7, #24]
 800ff92:	6a3b      	ldr	r3, [r7, #32]
 800ff94:	4413      	add	r3, r2
 800ff96:	693a      	ldr	r2, [r7, #16]
 800ff98:	8952      	ldrh	r2, [r2, #10]
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d905      	bls.n	800ffaa <f_write+0x1c4>
					cc = fs->csize - csect;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	895b      	ldrh	r3, [r3, #10]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	1ad3      	subs	r3, r2, r3
 800ffa8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	7858      	ldrb	r0, [r3, #1]
 800ffae:	6a3b      	ldr	r3, [r7, #32]
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	69f9      	ldr	r1, [r7, #28]
 800ffb4:	f7fd f86e 	bl	800d094 <disk_write>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d004      	beq.n	800ffc8 <f_write+0x1e2>
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	755a      	strb	r2, [r3, #21]
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e09e      	b.n	8010106 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6a1a      	ldr	r2, [r3, #32]
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	1ad3      	subs	r3, r2, r3
 800ffd0:	6a3a      	ldr	r2, [r7, #32]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d918      	bls.n	8010008 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	6a1a      	ldr	r2, [r3, #32]
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	693a      	ldr	r2, [r7, #16]
 800ffe6:	8992      	ldrh	r2, [r2, #12]
 800ffe8:	fb02 f303 	mul.w	r3, r2, r3
 800ffec:	69fa      	ldr	r2, [r7, #28]
 800ffee:	18d1      	adds	r1, r2, r3
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	899b      	ldrh	r3, [r3, #12]
 800fff4:	461a      	mov	r2, r3
 800fff6:	f7fd f90d 	bl	800d214 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	7d1b      	ldrb	r3, [r3, #20]
 800fffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010002:	b2da      	uxtb	r2, r3
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	899b      	ldrh	r3, [r3, #12]
 801000c:	461a      	mov	r2, r3
 801000e:	6a3b      	ldr	r3, [r7, #32]
 8010010:	fb02 f303 	mul.w	r3, r2, r3
 8010014:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010016:	e04b      	b.n	80100b0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	429a      	cmp	r2, r3
 8010020:	d016      	beq.n	8010050 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	699a      	ldr	r2, [r3, #24]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801002a:	429a      	cmp	r2, r3
 801002c:	d210      	bcs.n	8010050 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	7858      	ldrb	r0, [r3, #1]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010038:	2301      	movs	r3, #1
 801003a:	697a      	ldr	r2, [r7, #20]
 801003c:	f7fd f80a 	bl	800d054 <disk_read>
 8010040:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010042:	2b00      	cmp	r3, #0
 8010044:	d004      	beq.n	8010050 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2201      	movs	r2, #1
 801004a:	755a      	strb	r2, [r3, #21]
 801004c:	2301      	movs	r3, #1
 801004e:	e05a      	b.n	8010106 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	4618      	mov	r0, r3
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	693a      	ldr	r2, [r7, #16]
 8010062:	8992      	ldrh	r2, [r2, #12]
 8010064:	fbb3 f1f2 	udiv	r1, r3, r2
 8010068:	fb02 f201 	mul.w	r2, r2, r1
 801006c:	1a9b      	subs	r3, r3, r2
 801006e:	1ac3      	subs	r3, r0, r3
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	429a      	cmp	r2, r3
 8010078:	d901      	bls.n	801007e <f_write+0x298>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	699b      	ldr	r3, [r3, #24]
 8010088:	693a      	ldr	r2, [r7, #16]
 801008a:	8992      	ldrh	r2, [r2, #12]
 801008c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010090:	fb02 f200 	mul.w	r2, r2, r0
 8010094:	1a9b      	subs	r3, r3, r2
 8010096:	440b      	add	r3, r1
 8010098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801009a:	69f9      	ldr	r1, [r7, #28]
 801009c:	4618      	mov	r0, r3
 801009e:	f7fd f8b9 	bl	800d214 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	7d1b      	ldrb	r3, [r3, #20]
 80100a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80100aa:	b2da      	uxtb	r2, r3
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80100b0:	69fa      	ldr	r2, [r7, #28]
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	4413      	add	r3, r2
 80100b6:	61fb      	str	r3, [r7, #28]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	699a      	ldr	r2, [r3, #24]
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	441a      	add	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	619a      	str	r2, [r3, #24]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	699b      	ldr	r3, [r3, #24]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	bf38      	it	cc
 80100d0:	461a      	movcc	r2, r3
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	60da      	str	r2, [r3, #12]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	441a      	add	r2, r3
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f47f aeb5 	bne.w	800fe5c <f_write+0x76>
 80100f2:	e000      	b.n	80100f6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80100f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100fe:	b2da      	uxtb	r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3730      	adds	r7, #48	; 0x30
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b086      	sub	sp, #24
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f107 0208 	add.w	r2, r7, #8
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f7ff faba 	bl	800f698 <validate>
 8010124:	4603      	mov	r3, r0
 8010126:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010128:	7dfb      	ldrb	r3, [r7, #23]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d168      	bne.n	8010200 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	7d1b      	ldrb	r3, [r3, #20]
 8010132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010136:	2b00      	cmp	r3, #0
 8010138:	d062      	beq.n	8010200 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	7d1b      	ldrb	r3, [r3, #20]
 801013e:	b25b      	sxtb	r3, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	da15      	bge.n	8010170 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	7858      	ldrb	r0, [r3, #1]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a1a      	ldr	r2, [r3, #32]
 8010152:	2301      	movs	r3, #1
 8010154:	f7fc ff9e 	bl	800d094 <disk_write>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <f_sync+0x54>
 801015e:	2301      	movs	r3, #1
 8010160:	e04f      	b.n	8010202 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	7d1b      	ldrb	r3, [r3, #20]
 8010166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801016a:	b2da      	uxtb	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010170:	f7fc fce0 	bl	800cb34 <get_fattime>
 8010174:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010176:	68ba      	ldr	r2, [r7, #8]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017c:	4619      	mov	r1, r3
 801017e:	4610      	mov	r0, r2
 8010180:	f7fd fa76 	bl	800d670 <move_window>
 8010184:	4603      	mov	r3, r0
 8010186:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010188:	7dfb      	ldrb	r3, [r7, #23]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d138      	bne.n	8010200 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010192:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	330b      	adds	r3, #11
 8010198:	781a      	ldrb	r2, [r3, #0]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	330b      	adds	r3, #11
 801019e:	f042 0220 	orr.w	r2, r2, #32
 80101a2:	b2d2      	uxtb	r2, r2
 80101a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	461a      	mov	r2, r3
 80101b0:	68f9      	ldr	r1, [r7, #12]
 80101b2:	f7fd fffb 	bl	800e1ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f103 021c 	add.w	r2, r3, #28
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	4619      	mov	r1, r3
 80101c2:	4610      	mov	r0, r2
 80101c4:	f7fc fffa 	bl	800d1bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	3316      	adds	r3, #22
 80101cc:	6939      	ldr	r1, [r7, #16]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fc fff4 	bl	800d1bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3312      	adds	r3, #18
 80101d8:	2100      	movs	r1, #0
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fc ffd3 	bl	800d186 <st_word>
					fs->wflag = 1;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	2201      	movs	r2, #1
 80101e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7fd fa6f 	bl	800d6cc <sync_fs>
 80101ee:	4603      	mov	r3, r0
 80101f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7d1b      	ldrb	r3, [r3, #20]
 80101f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101fa:	b2da      	uxtb	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010200:	7dfb      	ldrb	r3, [r7, #23]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff ff7b 	bl	801010e <f_sync>
 8010218:	4603      	mov	r3, r0
 801021a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801021c:	7bfb      	ldrb	r3, [r7, #15]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d118      	bne.n	8010254 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f107 0208 	add.w	r2, r7, #8
 8010228:	4611      	mov	r1, r2
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff fa34 	bl	800f698 <validate>
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010234:	7bfb      	ldrb	r3, [r7, #15]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10c      	bne.n	8010254 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	4618      	mov	r0, r3
 8010240:	f7fd f972 	bl	800d528 <dec_lock>
 8010244:	4603      	mov	r3, r0
 8010246:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010248:	7bfb      	ldrb	r3, [r7, #15]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d102      	bne.n	8010254 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010254:	7bfb      	ldrb	r3, [r7, #15]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801025e:	b590      	push	{r4, r7, lr}
 8010260:	b093      	sub	sp, #76	; 0x4c
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010266:	f107 010c 	add.w	r1, r7, #12
 801026a:	1d3b      	adds	r3, r7, #4
 801026c:	2200      	movs	r2, #0
 801026e:	4618      	mov	r0, r3
 8010270:	f7fe ff86 	bl	800f180 <find_volume>
 8010274:	4603      	mov	r3, r0
 8010276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801027a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801027e:	2b00      	cmp	r3, #0
 8010280:	d131      	bne.n	80102e6 <f_chdir+0x88>
		dj.obj.fs = fs;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	f107 0310 	add.w	r3, r7, #16
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fe fe46 	bl	800ef20 <follow_path>
 8010294:	4603      	mov	r3, r0
 8010296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 801029a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d11a      	bne.n	80102d8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80102a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102a6:	b25b      	sxtb	r3, r3
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	da03      	bge.n	80102b4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	69ba      	ldr	r2, [r7, #24]
 80102b0:	61da      	str	r2, [r3, #28]
 80102b2:	e011      	b.n	80102d8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80102b4:	7dbb      	ldrb	r3, [r7, #22]
 80102b6:	f003 0310 	and.w	r3, r3, #16
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d009      	beq.n	80102d2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c2:	68fc      	ldr	r4, [r7, #12]
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fd ff51 	bl	800e16e <ld_clust>
 80102cc:	4603      	mov	r3, r0
 80102ce:	61e3      	str	r3, [r4, #28]
 80102d0:	e002      	b.n	80102d8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80102d2:	2305      	movs	r3, #5
 80102d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80102d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102dc:	2b04      	cmp	r3, #4
 80102de:	d102      	bne.n	80102e6 <f_chdir+0x88>
 80102e0:	2305      	movs	r3, #5
 80102e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80102e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	374c      	adds	r7, #76	; 0x4c
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd90      	pop	{r4, r7, pc}

080102f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b090      	sub	sp, #64	; 0x40
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f107 0208 	add.w	r2, r7, #8
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff f9c7 	bl	800f698 <validate>
 801030a:	4603      	mov	r3, r0
 801030c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010310:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010314:	2b00      	cmp	r3, #0
 8010316:	d103      	bne.n	8010320 <f_lseek+0x2e>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	7d5b      	ldrb	r3, [r3, #21]
 801031c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010320:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <f_lseek+0x3c>
 8010328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801032c:	e201      	b.n	8010732 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 80d9 	beq.w	80104ea <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033e:	d15a      	bne.n	80103f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010344:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	1d1a      	adds	r2, r3, #4
 801034a:	627a      	str	r2, [r7, #36]	; 0x24
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	617b      	str	r3, [r7, #20]
 8010350:	2302      	movs	r3, #2
 8010352:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035c:	2b00      	cmp	r3, #0
 801035e:	d03a      	beq.n	80103d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010362:	613b      	str	r3, [r7, #16]
 8010364:	2300      	movs	r3, #0
 8010366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036a:	3302      	adds	r3, #2
 801036c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801036e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010370:	60fb      	str	r3, [r7, #12]
 8010372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010374:	3301      	adds	r3, #1
 8010376:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801037c:	4618      	mov	r0, r3
 801037e:	f7fd fa34 	bl	800d7ea <get_fat>
 8010382:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010386:	2b01      	cmp	r3, #1
 8010388:	d804      	bhi.n	8010394 <f_lseek+0xa2>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2202      	movs	r2, #2
 801038e:	755a      	strb	r2, [r3, #21]
 8010390:	2302      	movs	r3, #2
 8010392:	e1ce      	b.n	8010732 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039a:	d104      	bne.n	80103a6 <f_lseek+0xb4>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2201      	movs	r2, #1
 80103a0:	755a      	strb	r2, [r3, #21]
 80103a2:	2301      	movs	r3, #1
 80103a4:	e1c5      	b.n	8010732 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	3301      	adds	r3, #1
 80103aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d0de      	beq.n	801036e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80103b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d809      	bhi.n	80103cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80103b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ba:	1d1a      	adds	r2, r3, #4
 80103bc:	627a      	str	r2, [r7, #36]	; 0x24
 80103be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103c0:	601a      	str	r2, [r3, #0]
 80103c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c4:	1d1a      	adds	r2, r3, #4
 80103c6:	627a      	str	r2, [r7, #36]	; 0x24
 80103c8:	693a      	ldr	r2, [r7, #16]
 80103ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	6a1b      	ldr	r3, [r3, #32]
 80103d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d3c4      	bcc.n	8010360 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80103de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d803      	bhi.n	80103ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80103e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e8:	2200      	movs	r2, #0
 80103ea:	601a      	str	r2, [r3, #0]
 80103ec:	e19f      	b.n	801072e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80103ee:	2311      	movs	r3, #17
 80103f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80103f4:	e19b      	b.n	801072e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d902      	bls.n	8010406 <f_lseek+0x114>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	f000 818d 	beq.w	801072e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	3b01      	subs	r3, #1
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7fd fcc9 	bl	800ddb2 <clmt_clust>
 8010420:	4602      	mov	r2, r0
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	69db      	ldr	r3, [r3, #28]
 801042c:	4619      	mov	r1, r3
 801042e:	4610      	mov	r0, r2
 8010430:	f7fd f9bc 	bl	800d7ac <clust2sect>
 8010434:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d104      	bne.n	8010446 <f_lseek+0x154>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2202      	movs	r2, #2
 8010440:	755a      	strb	r2, [r3, #21]
 8010442:	2302      	movs	r3, #2
 8010444:	e175      	b.n	8010732 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	3b01      	subs	r3, #1
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	8992      	ldrh	r2, [r2, #12]
 801044e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	8952      	ldrh	r2, [r2, #10]
 8010456:	3a01      	subs	r2, #1
 8010458:	4013      	ands	r3, r2
 801045a:	69ba      	ldr	r2, [r7, #24]
 801045c:	4413      	add	r3, r2
 801045e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	8992      	ldrh	r2, [r2, #12]
 8010468:	fbb3 f1f2 	udiv	r1, r3, r2
 801046c:	fb02 f201 	mul.w	r2, r2, r1
 8010470:	1a9b      	subs	r3, r3, r2
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 815b 	beq.w	801072e <f_lseek+0x43c>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a1b      	ldr	r3, [r3, #32]
 801047c:	69ba      	ldr	r2, [r7, #24]
 801047e:	429a      	cmp	r2, r3
 8010480:	f000 8155 	beq.w	801072e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	7d1b      	ldrb	r3, [r3, #20]
 8010488:	b25b      	sxtb	r3, r3
 801048a:	2b00      	cmp	r3, #0
 801048c:	da18      	bge.n	80104c0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	7858      	ldrb	r0, [r3, #1]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6a1a      	ldr	r2, [r3, #32]
 801049c:	2301      	movs	r3, #1
 801049e:	f7fc fdf9 	bl	800d094 <disk_write>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d004      	beq.n	80104b2 <f_lseek+0x1c0>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2201      	movs	r2, #1
 80104ac:	755a      	strb	r2, [r3, #21]
 80104ae:	2301      	movs	r3, #1
 80104b0:	e13f      	b.n	8010732 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	7d1b      	ldrb	r3, [r3, #20]
 80104b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104ba:	b2da      	uxtb	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	7858      	ldrb	r0, [r3, #1]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104ca:	2301      	movs	r3, #1
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	f7fc fdc1 	bl	800d054 <disk_read>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d004      	beq.n	80104e2 <f_lseek+0x1f0>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2201      	movs	r2, #1
 80104dc:	755a      	strb	r2, [r3, #21]
 80104de:	2301      	movs	r3, #1
 80104e0:	e127      	b.n	8010732 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	69ba      	ldr	r2, [r7, #24]
 80104e6:	621a      	str	r2, [r3, #32]
 80104e8:	e121      	b.n	801072e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d908      	bls.n	8010506 <f_lseek+0x214>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7d1b      	ldrb	r3, [r3, #20]
 80104f8:	f003 0302 	and.w	r3, r3, #2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d102      	bne.n	8010506 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	699b      	ldr	r3, [r3, #24]
 801050a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801050c:	2300      	movs	r3, #0
 801050e:	637b      	str	r3, [r7, #52]	; 0x34
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010514:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	f000 80b5 	beq.w	8010688 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	895b      	ldrh	r3, [r3, #10]
 8010522:	461a      	mov	r2, r3
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	899b      	ldrh	r3, [r3, #12]
 8010528:	fb03 f302 	mul.w	r3, r3, r2
 801052c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801052e:	6a3b      	ldr	r3, [r7, #32]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d01b      	beq.n	801056c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	1e5a      	subs	r2, r3, #1
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	fbb2 f2f3 	udiv	r2, r2, r3
 801053e:	6a3b      	ldr	r3, [r7, #32]
 8010540:	1e59      	subs	r1, r3, #1
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010548:	429a      	cmp	r2, r3
 801054a:	d30f      	bcc.n	801056c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801054c:	6a3b      	ldr	r3, [r7, #32]
 801054e:	1e5a      	subs	r2, r3, #1
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	425b      	negs	r3, r3
 8010554:	401a      	ands	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	699b      	ldr	r3, [r3, #24]
 801055e:	683a      	ldr	r2, [r7, #0]
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	63bb      	str	r3, [r7, #56]	; 0x38
 801056a:	e022      	b.n	80105b2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010574:	2b00      	cmp	r3, #0
 8010576:	d119      	bne.n	80105ac <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2100      	movs	r1, #0
 801057c:	4618      	mov	r0, r3
 801057e:	f7fd fb80 	bl	800dc82 <create_chain>
 8010582:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	2b01      	cmp	r3, #1
 8010588:	d104      	bne.n	8010594 <f_lseek+0x2a2>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2202      	movs	r2, #2
 801058e:	755a      	strb	r2, [r3, #21]
 8010590:	2302      	movs	r3, #2
 8010592:	e0ce      	b.n	8010732 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059a:	d104      	bne.n	80105a6 <f_lseek+0x2b4>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	755a      	strb	r2, [r3, #21]
 80105a2:	2301      	movs	r3, #1
 80105a4:	e0c5      	b.n	8010732 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105aa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105b0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80105b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d067      	beq.n	8010688 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80105b8:	e03a      	b.n	8010630 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	1ad3      	subs	r3, r2, r3
 80105c0:	603b      	str	r3, [r7, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	699a      	ldr	r2, [r3, #24]
 80105c6:	69fb      	ldr	r3, [r7, #28]
 80105c8:	441a      	add	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	7d1b      	ldrb	r3, [r3, #20]
 80105d2:	f003 0302 	and.w	r3, r3, #2
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00b      	beq.n	80105f2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fd fb4f 	bl	800dc82 <create_chain>
 80105e4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d108      	bne.n	80105fe <f_lseek+0x30c>
							ofs = 0; break;
 80105ec:	2300      	movs	r3, #0
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	e022      	b.n	8010638 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fd f8f7 	bl	800d7ea <get_fat>
 80105fc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010604:	d104      	bne.n	8010610 <f_lseek+0x31e>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2201      	movs	r2, #1
 801060a:	755a      	strb	r2, [r3, #21]
 801060c:	2301      	movs	r3, #1
 801060e:	e090      	b.n	8010732 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010612:	2b01      	cmp	r3, #1
 8010614:	d904      	bls.n	8010620 <f_lseek+0x32e>
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801061c:	429a      	cmp	r2, r3
 801061e:	d304      	bcc.n	801062a <f_lseek+0x338>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2202      	movs	r2, #2
 8010624:	755a      	strb	r2, [r3, #21]
 8010626:	2302      	movs	r3, #2
 8010628:	e083      	b.n	8010732 <f_lseek+0x440>
					fp->clust = clst;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801062e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010630:	683a      	ldr	r2, [r7, #0]
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	429a      	cmp	r2, r3
 8010636:	d8c0      	bhi.n	80105ba <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	699a      	ldr	r2, [r3, #24]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	441a      	add	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	899b      	ldrh	r3, [r3, #12]
 8010648:	461a      	mov	r2, r3
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010650:	fb02 f201 	mul.w	r2, r2, r1
 8010654:	1a9b      	subs	r3, r3, r2
 8010656:	2b00      	cmp	r3, #0
 8010658:	d016      	beq.n	8010688 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801065e:	4618      	mov	r0, r3
 8010660:	f7fd f8a4 	bl	800d7ac <clust2sect>
 8010664:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010668:	2b00      	cmp	r3, #0
 801066a:	d104      	bne.n	8010676 <f_lseek+0x384>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2202      	movs	r2, #2
 8010670:	755a      	strb	r2, [r3, #21]
 8010672:	2302      	movs	r3, #2
 8010674:	e05d      	b.n	8010732 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	461a      	mov	r2, r3
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010684:	4413      	add	r3, r2
 8010686:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	699a      	ldr	r2, [r3, #24]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	429a      	cmp	r2, r3
 8010692:	d90a      	bls.n	80106aa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	699a      	ldr	r2, [r3, #24]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	7d1b      	ldrb	r3, [r3, #20]
 80106a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	699b      	ldr	r3, [r3, #24]
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	8992      	ldrh	r2, [r2, #12]
 80106b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80106b6:	fb02 f201 	mul.w	r2, r2, r1
 80106ba:	1a9b      	subs	r3, r3, r2
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d036      	beq.n	801072e <f_lseek+0x43c>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6a1b      	ldr	r3, [r3, #32]
 80106c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d031      	beq.n	801072e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	7d1b      	ldrb	r3, [r3, #20]
 80106ce:	b25b      	sxtb	r3, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	da18      	bge.n	8010706 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	7858      	ldrb	r0, [r3, #1]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6a1a      	ldr	r2, [r3, #32]
 80106e2:	2301      	movs	r3, #1
 80106e4:	f7fc fcd6 	bl	800d094 <disk_write>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d004      	beq.n	80106f8 <f_lseek+0x406>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2201      	movs	r2, #1
 80106f2:	755a      	strb	r2, [r3, #21]
 80106f4:	2301      	movs	r3, #1
 80106f6:	e01c      	b.n	8010732 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	7d1b      	ldrb	r3, [r3, #20]
 80106fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010700:	b2da      	uxtb	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	7858      	ldrb	r0, [r3, #1]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010710:	2301      	movs	r3, #1
 8010712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010714:	f7fc fc9e 	bl	800d054 <disk_read>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <f_lseek+0x436>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2201      	movs	r2, #1
 8010722:	755a      	strb	r2, [r3, #21]
 8010724:	2301      	movs	r3, #1
 8010726:	e004      	b.n	8010732 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801072c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801072e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010732:	4618      	mov	r0, r3
 8010734:	3740      	adds	r7, #64	; 0x40
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b0a0      	sub	sp, #128	; 0x80
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010746:	f107 010c 	add.w	r1, r7, #12
 801074a:	1d3b      	adds	r3, r7, #4
 801074c:	2202      	movs	r2, #2
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fd16 	bl	800f180 <find_volume>
 8010754:	4603      	mov	r3, r0
 8010756:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 801075e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010762:	2b00      	cmp	r3, #0
 8010764:	f040 80a4 	bne.w	80108b0 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801076e:	4611      	mov	r1, r2
 8010770:	4618      	mov	r0, r3
 8010772:	f7fe fbd5 	bl	800ef20 <follow_path>
 8010776:	4603      	mov	r3, r0
 8010778:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801077c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010780:	2b00      	cmp	r3, #0
 8010782:	d108      	bne.n	8010796 <f_unlink+0x5c>
 8010784:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010788:	f003 0320 	and.w	r3, r3, #32
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010790:	2306      	movs	r3, #6
 8010792:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010796:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801079a:	2b00      	cmp	r3, #0
 801079c:	d108      	bne.n	80107b0 <f_unlink+0x76>
 801079e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80107a2:	2102      	movs	r1, #2
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fc fdb3 	bl	800d310 <chk_lock>
 80107aa:	4603      	mov	r3, r0
 80107ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80107b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d17b      	bne.n	80108b0 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80107b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80107bc:	b25b      	sxtb	r3, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	da03      	bge.n	80107ca <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80107c2:	2306      	movs	r3, #6
 80107c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80107c8:	e008      	b.n	80107dc <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80107ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80107ce:	f003 0301 	and.w	r3, r3, #1
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d002      	beq.n	80107dc <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80107d6:	2307      	movs	r3, #7
 80107d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80107dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d13d      	bne.n	8010860 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80107e8:	4611      	mov	r1, r2
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fd fcbf 	bl	800e16e <ld_clust>
 80107f0:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80107f2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80107f6:	f003 0310 	and.w	r3, r3, #16
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d030      	beq.n	8010860 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010804:	429a      	cmp	r2, r3
 8010806:	d103      	bne.n	8010810 <f_unlink+0xd6>
						res = FR_DENIED;
 8010808:	2307      	movs	r3, #7
 801080a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801080e:	e027      	b.n	8010860 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010816:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010818:	f107 0310 	add.w	r3, r7, #16
 801081c:	2100      	movs	r1, #0
 801081e:	4618      	mov	r0, r3
 8010820:	f7fd faff 	bl	800de22 <dir_sdi>
 8010824:	4603      	mov	r3, r0
 8010826:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 801082a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801082e:	2b00      	cmp	r3, #0
 8010830:	d116      	bne.n	8010860 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010832:	f107 0310 	add.w	r3, r7, #16
 8010836:	2100      	movs	r1, #0
 8010838:	4618      	mov	r0, r3
 801083a:	f7fd fec3 	bl	800e5c4 <dir_read>
 801083e:	4603      	mov	r3, r0
 8010840:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010844:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010848:	2b00      	cmp	r3, #0
 801084a:	d102      	bne.n	8010852 <f_unlink+0x118>
 801084c:	2307      	movs	r3, #7
 801084e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010856:	2b04      	cmp	r3, #4
 8010858:	d102      	bne.n	8010860 <f_unlink+0x126>
 801085a:	2300      	movs	r3, #0
 801085c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8010860:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010864:	2b00      	cmp	r3, #0
 8010866:	d123      	bne.n	80108b0 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010868:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe f909 	bl	800ea84 <dir_remove>
 8010872:	4603      	mov	r3, r0
 8010874:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801087c:	2b00      	cmp	r3, #0
 801087e:	d10c      	bne.n	801089a <f_unlink+0x160>
 8010880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010882:	2b00      	cmp	r3, #0
 8010884:	d009      	beq.n	801089a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010886:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801088a:	2200      	movs	r2, #0
 801088c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801088e:	4618      	mov	r0, r3
 8010890:	f7fd f992 	bl	800dbb8 <remove_chain>
 8010894:	4603      	mov	r3, r0
 8010896:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801089a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d106      	bne.n	80108b0 <f_unlink+0x176>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fc ff11 	bl	800d6cc <sync_fs>
 80108aa:	4603      	mov	r3, r0
 80108ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80108b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3780      	adds	r7, #128	; 0x80
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b098      	sub	sp, #96	; 0x60
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80108c4:	f107 010c 	add.w	r1, r7, #12
 80108c8:	1d3b      	adds	r3, r7, #4
 80108ca:	2202      	movs	r2, #2
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fe fc57 	bl	800f180 <find_volume>
 80108d2:	4603      	mov	r3, r0
 80108d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80108dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f040 80ff 	bne.w	8010ae4 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	f107 0310 	add.w	r3, r7, #16
 80108ec:	4611      	mov	r1, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fe fb16 	bl	800ef20 <follow_path>
 80108f4:	4603      	mov	r3, r0
 80108f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80108fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d102      	bne.n	8010908 <f_mkdir+0x4c>
 8010902:	2308      	movs	r3, #8
 8010904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8010908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801090c:	2b04      	cmp	r3, #4
 801090e:	d108      	bne.n	8010922 <f_mkdir+0x66>
 8010910:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010914:	f003 0320 	and.w	r3, r3, #32
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801091c:	2306      	movs	r3, #6
 801091e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010926:	2b04      	cmp	r3, #4
 8010928:	f040 80dc 	bne.w	8010ae4 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801092c:	f107 0310 	add.w	r3, r7, #16
 8010930:	2100      	movs	r1, #0
 8010932:	4618      	mov	r0, r3
 8010934:	f7fd f9a5 	bl	800dc82 <create_chain>
 8010938:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	895b      	ldrh	r3, [r3, #10]
 801093e:	461a      	mov	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	899b      	ldrh	r3, [r3, #12]
 8010944:	fb03 f302 	mul.w	r3, r3, r2
 8010948:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010952:	2b00      	cmp	r3, #0
 8010954:	d102      	bne.n	801095c <f_mkdir+0xa0>
 8010956:	2307      	movs	r3, #7
 8010958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 801095c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801095e:	2b01      	cmp	r3, #1
 8010960:	d102      	bne.n	8010968 <f_mkdir+0xac>
 8010962:	2302      	movs	r3, #2
 8010964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801096a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801096e:	d102      	bne.n	8010976 <f_mkdir+0xba>
 8010970:	2301      	movs	r3, #1
 8010972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801097a:	2b00      	cmp	r3, #0
 801097c:	d106      	bne.n	801098c <f_mkdir+0xd0>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	4618      	mov	r0, r3
 8010982:	f7fc fe31 	bl	800d5e8 <sync_window>
 8010986:	4603      	mov	r3, r0
 8010988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 801098c:	f7fc f8d2 	bl	800cb34 <get_fattime>
 8010990:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010996:	2b00      	cmp	r3, #0
 8010998:	d16c      	bne.n	8010a74 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fc ff04 	bl	800d7ac <clust2sect>
 80109a4:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	333c      	adds	r3, #60	; 0x3c
 80109aa:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	899b      	ldrh	r3, [r3, #12]
 80109b0:	461a      	mov	r2, r3
 80109b2:	2100      	movs	r1, #0
 80109b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80109b6:	f7fc fc4e 	bl	800d256 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80109ba:	220b      	movs	r2, #11
 80109bc:	2120      	movs	r1, #32
 80109be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80109c0:	f7fc fc49 	bl	800d256 <mem_set>
					dir[DIR_Name] = '.';
 80109c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109c6:	222e      	movs	r2, #46	; 0x2e
 80109c8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80109ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109cc:	330b      	adds	r3, #11
 80109ce:	2210      	movs	r2, #16
 80109d0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80109d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109d4:	3316      	adds	r3, #22
 80109d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fc fbef 	bl	800d1bc <st_dword>
					st_clust(fs, dir, dcl);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7fd fbe1 	bl	800e1ac <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80109ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ec:	3320      	adds	r3, #32
 80109ee:	2220      	movs	r2, #32
 80109f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fc fc0e 	bl	800d214 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80109f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109fa:	3321      	adds	r3, #33	; 0x21
 80109fc:	222e      	movs	r2, #46	; 0x2e
 80109fe:	701a      	strb	r2, [r3, #0]
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	2b03      	cmp	r3, #3
 8010a0a:	d106      	bne.n	8010a1a <f_mkdir+0x15e>
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d101      	bne.n	8010a1a <f_mkdir+0x15e>
 8010a16:	2300      	movs	r3, #0
 8010a18:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8010a1a:	68f8      	ldr	r0, [r7, #12]
 8010a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a1e:	3320      	adds	r3, #32
 8010a20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a22:	4619      	mov	r1, r3
 8010a24:	f7fd fbc2 	bl	800e1ac <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	895b      	ldrh	r3, [r3, #10]
 8010a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a2e:	e01c      	b.n	8010a6a <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8010a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a32:	1c5a      	adds	r2, r3, #1
 8010a34:	657a      	str	r2, [r7, #84]	; 0x54
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fc fdd0 	bl	800d5e8 <sync_window>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8010a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10d      	bne.n	8010a72 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	899b      	ldrh	r3, [r3, #12]
 8010a5a:	461a      	mov	r2, r3
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a60:	f7fc fbf9 	bl	800d256 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a66:	3b01      	subs	r3, #1
 8010a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d1df      	bne.n	8010a30 <f_mkdir+0x174>
 8010a70:	e000      	b.n	8010a74 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8010a72:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d107      	bne.n	8010a8c <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010a7c:	f107 0310 	add.w	r3, r7, #16
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fd ff07 	bl	800e894 <dir_register>
 8010a86:	4603      	mov	r3, r0
 8010a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8010a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d120      	bne.n	8010ad6 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a96:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a9a:	3316      	adds	r3, #22
 8010a9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fc fb8c 	bl	800d1bc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010aa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fd fb7e 	bl	800e1ac <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ab2:	330b      	adds	r3, #11
 8010ab4:	2210      	movs	r2, #16
 8010ab6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2201      	movs	r2, #1
 8010abc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10e      	bne.n	8010ae4 <f_mkdir+0x228>
					res = sync_fs(fs);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fc fdff 	bl	800d6cc <sync_fs>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010ad4:	e006      	b.n	8010ae4 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010ad6:	f107 0310 	add.w	r3, r7, #16
 8010ada:	2200      	movs	r2, #0
 8010adc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fd f86a 	bl	800dbb8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3760      	adds	r7, #96	; 0x60
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b088      	sub	sp, #32
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010afc:	2300      	movs	r3, #0
 8010afe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b04:	e01b      	b.n	8010b3e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010b06:	f107 0310 	add.w	r3, r7, #16
 8010b0a:	f107 0114 	add.w	r1, r7, #20
 8010b0e:	2201      	movs	r2, #1
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f7ff f809 	bl	800fb28 <f_read>
		if (rc != 1) break;
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d116      	bne.n	8010b4a <f_gets+0x5a>
		c = s[0];
 8010b1c:	7d3b      	ldrb	r3, [r7, #20]
 8010b1e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010b20:	7dfb      	ldrb	r3, [r7, #23]
 8010b22:	2b0d      	cmp	r3, #13
 8010b24:	d100      	bne.n	8010b28 <f_gets+0x38>
 8010b26:	e00a      	b.n	8010b3e <f_gets+0x4e>
		*p++ = c;
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	1c5a      	adds	r2, r3, #1
 8010b2c:	61ba      	str	r2, [r7, #24]
 8010b2e:	7dfa      	ldrb	r2, [r7, #23]
 8010b30:	701a      	strb	r2, [r3, #0]
		n++;
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	3301      	adds	r3, #1
 8010b36:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010b38:	7dfb      	ldrb	r3, [r7, #23]
 8010b3a:	2b0a      	cmp	r3, #10
 8010b3c:	d007      	beq.n	8010b4e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	69fa      	ldr	r2, [r7, #28]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	dbde      	blt.n	8010b06 <f_gets+0x16>
 8010b48:	e002      	b.n	8010b50 <f_gets+0x60>
		if (rc != 1) break;
 8010b4a:	bf00      	nop
 8010b4c:	e000      	b.n	8010b50 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010b4e:	bf00      	nop
	}
	*p = 0;
 8010b50:	69bb      	ldr	r3, [r7, #24]
 8010b52:	2200      	movs	r2, #0
 8010b54:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <f_gets+0x70>
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	e000      	b.n	8010b62 <f_gets+0x72>
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3720      	adds	r7, #32
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
	...

08010b6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b087      	sub	sp, #28
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	4613      	mov	r3, r2
 8010b78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010b82:	4b1f      	ldr	r3, [pc, #124]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010b84:	7a5b      	ldrb	r3, [r3, #9]
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d131      	bne.n	8010bf0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b8c:	4b1c      	ldr	r3, [pc, #112]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010b8e:	7a5b      	ldrb	r3, [r3, #9]
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b1a      	ldr	r3, [pc, #104]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010b96:	2100      	movs	r1, #0
 8010b98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b9a:	4b19      	ldr	r3, [pc, #100]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010b9c:	7a5b      	ldrb	r3, [r3, #9]
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	4a17      	ldr	r2, [pc, #92]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010baa:	4b15      	ldr	r3, [pc, #84]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010bac:	7a5b      	ldrb	r3, [r3, #9]
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	4b13      	ldr	r3, [pc, #76]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010bb4:	4413      	add	r3, r2
 8010bb6:	79fa      	ldrb	r2, [r7, #7]
 8010bb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010bba:	4b11      	ldr	r3, [pc, #68]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010bbc:	7a5b      	ldrb	r3, [r3, #9]
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	1c5a      	adds	r2, r3, #1
 8010bc2:	b2d1      	uxtb	r1, r2
 8010bc4:	4a0e      	ldr	r2, [pc, #56]	; (8010c00 <FATFS_LinkDriverEx+0x94>)
 8010bc6:	7251      	strb	r1, [r2, #9]
 8010bc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010bca:	7dbb      	ldrb	r3, [r7, #22]
 8010bcc:	3330      	adds	r3, #48	; 0x30
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	223a      	movs	r2, #58	; 0x3a
 8010bda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	3302      	adds	r3, #2
 8010be0:	222f      	movs	r2, #47	; 0x2f
 8010be2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	3303      	adds	r3, #3
 8010be8:	2200      	movs	r2, #0
 8010bea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010bec:	2300      	movs	r3, #0
 8010bee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	371c      	adds	r7, #28
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop
 8010c00:	20007d94 	.word	0x20007d94

08010c04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010c0e:	2200      	movs	r2, #0
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff ffaa 	bl	8010b6c <FATFS_LinkDriverEx>
 8010c18:	4603      	mov	r3, r0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
	...

08010c24 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b085      	sub	sp, #20
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	6039      	str	r1, [r7, #0]
 8010c2e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010c30:	88fb      	ldrh	r3, [r7, #6]
 8010c32:	2b7f      	cmp	r3, #127	; 0x7f
 8010c34:	d802      	bhi.n	8010c3c <ff_convert+0x18>
		c = chr;
 8010c36:	88fb      	ldrh	r3, [r7, #6]
 8010c38:	81fb      	strh	r3, [r7, #14]
 8010c3a:	e025      	b.n	8010c88 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00b      	beq.n	8010c5a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010c42:	88fb      	ldrh	r3, [r7, #6]
 8010c44:	2bff      	cmp	r3, #255	; 0xff
 8010c46:	d805      	bhi.n	8010c54 <ff_convert+0x30>
 8010c48:	88fb      	ldrh	r3, [r7, #6]
 8010c4a:	3b80      	subs	r3, #128	; 0x80
 8010c4c:	4a12      	ldr	r2, [pc, #72]	; (8010c98 <ff_convert+0x74>)
 8010c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c52:	e000      	b.n	8010c56 <ff_convert+0x32>
 8010c54:	2300      	movs	r3, #0
 8010c56:	81fb      	strh	r3, [r7, #14]
 8010c58:	e016      	b.n	8010c88 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	81fb      	strh	r3, [r7, #14]
 8010c5e:	e009      	b.n	8010c74 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010c60:	89fb      	ldrh	r3, [r7, #14]
 8010c62:	4a0d      	ldr	r2, [pc, #52]	; (8010c98 <ff_convert+0x74>)
 8010c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c68:	88fa      	ldrh	r2, [r7, #6]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d006      	beq.n	8010c7c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010c6e:	89fb      	ldrh	r3, [r7, #14]
 8010c70:	3301      	adds	r3, #1
 8010c72:	81fb      	strh	r3, [r7, #14]
 8010c74:	89fb      	ldrh	r3, [r7, #14]
 8010c76:	2b7f      	cmp	r3, #127	; 0x7f
 8010c78:	d9f2      	bls.n	8010c60 <ff_convert+0x3c>
 8010c7a:	e000      	b.n	8010c7e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010c7c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010c7e:	89fb      	ldrh	r3, [r7, #14]
 8010c80:	3380      	adds	r3, #128	; 0x80
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010c88:	89fb      	ldrh	r3, [r7, #14]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3714      	adds	r7, #20
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	08016f84 	.word	0x08016f84

08010c9c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b087      	sub	sp, #28
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010ca6:	88fb      	ldrh	r3, [r7, #6]
 8010ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cac:	d201      	bcs.n	8010cb2 <ff_wtoupper+0x16>
 8010cae:	4b3e      	ldr	r3, [pc, #248]	; (8010da8 <ff_wtoupper+0x10c>)
 8010cb0:	e000      	b.n	8010cb4 <ff_wtoupper+0x18>
 8010cb2:	4b3e      	ldr	r3, [pc, #248]	; (8010dac <ff_wtoupper+0x110>)
 8010cb4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	1c9a      	adds	r2, r3, #2
 8010cba:	617a      	str	r2, [r7, #20]
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010cc0:	8a7b      	ldrh	r3, [r7, #18]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d068      	beq.n	8010d98 <ff_wtoupper+0xfc>
 8010cc6:	88fa      	ldrh	r2, [r7, #6]
 8010cc8:	8a7b      	ldrh	r3, [r7, #18]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d364      	bcc.n	8010d98 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	1c9a      	adds	r2, r3, #2
 8010cd2:	617a      	str	r2, [r7, #20]
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	823b      	strh	r3, [r7, #16]
 8010cd8:	8a3b      	ldrh	r3, [r7, #16]
 8010cda:	0a1b      	lsrs	r3, r3, #8
 8010cdc:	81fb      	strh	r3, [r7, #14]
 8010cde:	8a3b      	ldrh	r3, [r7, #16]
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010ce4:	88fa      	ldrh	r2, [r7, #6]
 8010ce6:	8a79      	ldrh	r1, [r7, #18]
 8010ce8:	8a3b      	ldrh	r3, [r7, #16]
 8010cea:	440b      	add	r3, r1
 8010cec:	429a      	cmp	r2, r3
 8010cee:	da49      	bge.n	8010d84 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010cf0:	89fb      	ldrh	r3, [r7, #14]
 8010cf2:	2b08      	cmp	r3, #8
 8010cf4:	d84f      	bhi.n	8010d96 <ff_wtoupper+0xfa>
 8010cf6:	a201      	add	r2, pc, #4	; (adr r2, 8010cfc <ff_wtoupper+0x60>)
 8010cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfc:	08010d21 	.word	0x08010d21
 8010d00:	08010d33 	.word	0x08010d33
 8010d04:	08010d49 	.word	0x08010d49
 8010d08:	08010d51 	.word	0x08010d51
 8010d0c:	08010d59 	.word	0x08010d59
 8010d10:	08010d61 	.word	0x08010d61
 8010d14:	08010d69 	.word	0x08010d69
 8010d18:	08010d71 	.word	0x08010d71
 8010d1c:	08010d79 	.word	0x08010d79
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010d20:	88fa      	ldrh	r2, [r7, #6]
 8010d22:	8a7b      	ldrh	r3, [r7, #18]
 8010d24:	1ad3      	subs	r3, r2, r3
 8010d26:	005b      	lsls	r3, r3, #1
 8010d28:	697a      	ldr	r2, [r7, #20]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	881b      	ldrh	r3, [r3, #0]
 8010d2e:	80fb      	strh	r3, [r7, #6]
 8010d30:	e027      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010d32:	88fa      	ldrh	r2, [r7, #6]
 8010d34:	8a7b      	ldrh	r3, [r7, #18]
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	f003 0301 	and.w	r3, r3, #1
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	88fa      	ldrh	r2, [r7, #6]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	80fb      	strh	r3, [r7, #6]
 8010d46:	e01c      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010d48:	88fb      	ldrh	r3, [r7, #6]
 8010d4a:	3b10      	subs	r3, #16
 8010d4c:	80fb      	strh	r3, [r7, #6]
 8010d4e:	e018      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010d50:	88fb      	ldrh	r3, [r7, #6]
 8010d52:	3b20      	subs	r3, #32
 8010d54:	80fb      	strh	r3, [r7, #6]
 8010d56:	e014      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010d58:	88fb      	ldrh	r3, [r7, #6]
 8010d5a:	3b30      	subs	r3, #48	; 0x30
 8010d5c:	80fb      	strh	r3, [r7, #6]
 8010d5e:	e010      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010d60:	88fb      	ldrh	r3, [r7, #6]
 8010d62:	3b1a      	subs	r3, #26
 8010d64:	80fb      	strh	r3, [r7, #6]
 8010d66:	e00c      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010d68:	88fb      	ldrh	r3, [r7, #6]
 8010d6a:	3308      	adds	r3, #8
 8010d6c:	80fb      	strh	r3, [r7, #6]
 8010d6e:	e008      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010d70:	88fb      	ldrh	r3, [r7, #6]
 8010d72:	3b50      	subs	r3, #80	; 0x50
 8010d74:	80fb      	strh	r3, [r7, #6]
 8010d76:	e004      	b.n	8010d82 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010d78:	88fb      	ldrh	r3, [r7, #6]
 8010d7a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010d7e:	80fb      	strh	r3, [r7, #6]
 8010d80:	bf00      	nop
			}
			break;
 8010d82:	e008      	b.n	8010d96 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010d84:	89fb      	ldrh	r3, [r7, #14]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d195      	bne.n	8010cb6 <ff_wtoupper+0x1a>
 8010d8a:	8a3b      	ldrh	r3, [r7, #16]
 8010d8c:	005b      	lsls	r3, r3, #1
 8010d8e:	697a      	ldr	r2, [r7, #20]
 8010d90:	4413      	add	r3, r2
 8010d92:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010d94:	e78f      	b.n	8010cb6 <ff_wtoupper+0x1a>
			break;
 8010d96:	bf00      	nop
	}

	return chr;
 8010d98:	88fb      	ldrh	r3, [r7, #6]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	371c      	adds	r7, #28
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	08017084 	.word	0x08017084
 8010dac:	08017278 	.word	0x08017278

08010db0 <cos>:
 8010db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010db2:	ec51 0b10 	vmov	r0, r1, d0
 8010db6:	4a1e      	ldr	r2, [pc, #120]	; (8010e30 <cos+0x80>)
 8010db8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	dc06      	bgt.n	8010dce <cos+0x1e>
 8010dc0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8010e28 <cos+0x78>
 8010dc4:	f000 fa74 	bl	80112b0 <__kernel_cos>
 8010dc8:	ec51 0b10 	vmov	r0, r1, d0
 8010dcc:	e007      	b.n	8010dde <cos+0x2e>
 8010dce:	4a19      	ldr	r2, [pc, #100]	; (8010e34 <cos+0x84>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	dd09      	ble.n	8010de8 <cos+0x38>
 8010dd4:	ee10 2a10 	vmov	r2, s0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	f7ef fa6d 	bl	80002b8 <__aeabi_dsub>
 8010dde:	ec41 0b10 	vmov	d0, r0, r1
 8010de2:	b005      	add	sp, #20
 8010de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010de8:	4668      	mov	r0, sp
 8010dea:	f000 f86d 	bl	8010ec8 <__ieee754_rem_pio2>
 8010dee:	f000 0003 	and.w	r0, r0, #3
 8010df2:	2801      	cmp	r0, #1
 8010df4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010df8:	ed9d 0b00 	vldr	d0, [sp]
 8010dfc:	d007      	beq.n	8010e0e <cos+0x5e>
 8010dfe:	2802      	cmp	r0, #2
 8010e00:	d00e      	beq.n	8010e20 <cos+0x70>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d0de      	beq.n	8010dc4 <cos+0x14>
 8010e06:	2001      	movs	r0, #1
 8010e08:	f000 fe5a 	bl	8011ac0 <__kernel_sin>
 8010e0c:	e7dc      	b.n	8010dc8 <cos+0x18>
 8010e0e:	f000 fe57 	bl	8011ac0 <__kernel_sin>
 8010e12:	ec53 2b10 	vmov	r2, r3, d0
 8010e16:	ee10 0a10 	vmov	r0, s0
 8010e1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010e1e:	e7de      	b.n	8010dde <cos+0x2e>
 8010e20:	f000 fa46 	bl	80112b0 <__kernel_cos>
 8010e24:	e7f5      	b.n	8010e12 <cos+0x62>
 8010e26:	bf00      	nop
	...
 8010e30:	3fe921fb 	.word	0x3fe921fb
 8010e34:	7fefffff 	.word	0x7fefffff

08010e38 <sin>:
 8010e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e3a:	ec51 0b10 	vmov	r0, r1, d0
 8010e3e:	4a20      	ldr	r2, [pc, #128]	; (8010ec0 <sin+0x88>)
 8010e40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e44:	4293      	cmp	r3, r2
 8010e46:	dc07      	bgt.n	8010e58 <sin+0x20>
 8010e48:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010eb8 <sin+0x80>
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	f000 fe37 	bl	8011ac0 <__kernel_sin>
 8010e52:	ec51 0b10 	vmov	r0, r1, d0
 8010e56:	e007      	b.n	8010e68 <sin+0x30>
 8010e58:	4a1a      	ldr	r2, [pc, #104]	; (8010ec4 <sin+0x8c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	dd09      	ble.n	8010e72 <sin+0x3a>
 8010e5e:	ee10 2a10 	vmov	r2, s0
 8010e62:	460b      	mov	r3, r1
 8010e64:	f7ef fa28 	bl	80002b8 <__aeabi_dsub>
 8010e68:	ec41 0b10 	vmov	d0, r0, r1
 8010e6c:	b005      	add	sp, #20
 8010e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e72:	4668      	mov	r0, sp
 8010e74:	f000 f828 	bl	8010ec8 <__ieee754_rem_pio2>
 8010e78:	f000 0003 	and.w	r0, r0, #3
 8010e7c:	2801      	cmp	r0, #1
 8010e7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e82:	ed9d 0b00 	vldr	d0, [sp]
 8010e86:	d004      	beq.n	8010e92 <sin+0x5a>
 8010e88:	2802      	cmp	r0, #2
 8010e8a:	d005      	beq.n	8010e98 <sin+0x60>
 8010e8c:	b970      	cbnz	r0, 8010eac <sin+0x74>
 8010e8e:	2001      	movs	r0, #1
 8010e90:	e7dd      	b.n	8010e4e <sin+0x16>
 8010e92:	f000 fa0d 	bl	80112b0 <__kernel_cos>
 8010e96:	e7dc      	b.n	8010e52 <sin+0x1a>
 8010e98:	2001      	movs	r0, #1
 8010e9a:	f000 fe11 	bl	8011ac0 <__kernel_sin>
 8010e9e:	ec53 2b10 	vmov	r2, r3, d0
 8010ea2:	ee10 0a10 	vmov	r0, s0
 8010ea6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010eaa:	e7dd      	b.n	8010e68 <sin+0x30>
 8010eac:	f000 fa00 	bl	80112b0 <__kernel_cos>
 8010eb0:	e7f5      	b.n	8010e9e <sin+0x66>
 8010eb2:	bf00      	nop
 8010eb4:	f3af 8000 	nop.w
	...
 8010ec0:	3fe921fb 	.word	0x3fe921fb
 8010ec4:	7fefffff 	.word	0x7fefffff

08010ec8 <__ieee754_rem_pio2>:
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	ec57 6b10 	vmov	r6, r7, d0
 8010ed0:	4bc3      	ldr	r3, [pc, #780]	; (80111e0 <__ieee754_rem_pio2+0x318>)
 8010ed2:	b08d      	sub	sp, #52	; 0x34
 8010ed4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010ed8:	4598      	cmp	r8, r3
 8010eda:	4604      	mov	r4, r0
 8010edc:	9704      	str	r7, [sp, #16]
 8010ede:	dc07      	bgt.n	8010ef0 <__ieee754_rem_pio2+0x28>
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	ed84 0b00 	vstr	d0, [r4]
 8010ee8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010eec:	2500      	movs	r5, #0
 8010eee:	e027      	b.n	8010f40 <__ieee754_rem_pio2+0x78>
 8010ef0:	4bbc      	ldr	r3, [pc, #752]	; (80111e4 <__ieee754_rem_pio2+0x31c>)
 8010ef2:	4598      	cmp	r8, r3
 8010ef4:	dc75      	bgt.n	8010fe2 <__ieee754_rem_pio2+0x11a>
 8010ef6:	9b04      	ldr	r3, [sp, #16]
 8010ef8:	4dbb      	ldr	r5, [pc, #748]	; (80111e8 <__ieee754_rem_pio2+0x320>)
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	ee10 0a10 	vmov	r0, s0
 8010f00:	a3a9      	add	r3, pc, #676	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x2e0>)
 8010f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f06:	4639      	mov	r1, r7
 8010f08:	dd36      	ble.n	8010f78 <__ieee754_rem_pio2+0xb0>
 8010f0a:	f7ef f9d5 	bl	80002b8 <__aeabi_dsub>
 8010f0e:	45a8      	cmp	r8, r5
 8010f10:	4606      	mov	r6, r0
 8010f12:	460f      	mov	r7, r1
 8010f14:	d018      	beq.n	8010f48 <__ieee754_rem_pio2+0x80>
 8010f16:	a3a6      	add	r3, pc, #664	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x2e8>)
 8010f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1c:	f7ef f9cc 	bl	80002b8 <__aeabi_dsub>
 8010f20:	4602      	mov	r2, r0
 8010f22:	460b      	mov	r3, r1
 8010f24:	e9c4 2300 	strd	r2, r3, [r4]
 8010f28:	4630      	mov	r0, r6
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	f7ef f9c4 	bl	80002b8 <__aeabi_dsub>
 8010f30:	a39f      	add	r3, pc, #636	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x2e8>)
 8010f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f36:	f7ef f9bf 	bl	80002b8 <__aeabi_dsub>
 8010f3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f3e:	2501      	movs	r5, #1
 8010f40:	4628      	mov	r0, r5
 8010f42:	b00d      	add	sp, #52	; 0x34
 8010f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f48:	a39b      	add	r3, pc, #620	; (adr r3, 80111b8 <__ieee754_rem_pio2+0x2f0>)
 8010f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4e:	f7ef f9b3 	bl	80002b8 <__aeabi_dsub>
 8010f52:	a39b      	add	r3, pc, #620	; (adr r3, 80111c0 <__ieee754_rem_pio2+0x2f8>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	4606      	mov	r6, r0
 8010f5a:	460f      	mov	r7, r1
 8010f5c:	f7ef f9ac 	bl	80002b8 <__aeabi_dsub>
 8010f60:	4602      	mov	r2, r0
 8010f62:	460b      	mov	r3, r1
 8010f64:	e9c4 2300 	strd	r2, r3, [r4]
 8010f68:	4630      	mov	r0, r6
 8010f6a:	4639      	mov	r1, r7
 8010f6c:	f7ef f9a4 	bl	80002b8 <__aeabi_dsub>
 8010f70:	a393      	add	r3, pc, #588	; (adr r3, 80111c0 <__ieee754_rem_pio2+0x2f8>)
 8010f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f76:	e7de      	b.n	8010f36 <__ieee754_rem_pio2+0x6e>
 8010f78:	f7ef f9a0 	bl	80002bc <__adddf3>
 8010f7c:	45a8      	cmp	r8, r5
 8010f7e:	4606      	mov	r6, r0
 8010f80:	460f      	mov	r7, r1
 8010f82:	d016      	beq.n	8010fb2 <__ieee754_rem_pio2+0xea>
 8010f84:	a38a      	add	r3, pc, #552	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x2e8>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	f7ef f997 	bl	80002bc <__adddf3>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	460b      	mov	r3, r1
 8010f92:	e9c4 2300 	strd	r2, r3, [r4]
 8010f96:	4630      	mov	r0, r6
 8010f98:	4639      	mov	r1, r7
 8010f9a:	f7ef f98d 	bl	80002b8 <__aeabi_dsub>
 8010f9e:	a384      	add	r3, pc, #528	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x2e8>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	f7ef f98a 	bl	80002bc <__adddf3>
 8010fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8010fac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010fb0:	e7c6      	b.n	8010f40 <__ieee754_rem_pio2+0x78>
 8010fb2:	a381      	add	r3, pc, #516	; (adr r3, 80111b8 <__ieee754_rem_pio2+0x2f0>)
 8010fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb8:	f7ef f980 	bl	80002bc <__adddf3>
 8010fbc:	a380      	add	r3, pc, #512	; (adr r3, 80111c0 <__ieee754_rem_pio2+0x2f8>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	460f      	mov	r7, r1
 8010fc6:	f7ef f979 	bl	80002bc <__adddf3>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	460b      	mov	r3, r1
 8010fce:	e9c4 2300 	strd	r2, r3, [r4]
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	4639      	mov	r1, r7
 8010fd6:	f7ef f96f 	bl	80002b8 <__aeabi_dsub>
 8010fda:	a379      	add	r3, pc, #484	; (adr r3, 80111c0 <__ieee754_rem_pio2+0x2f8>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	e7e0      	b.n	8010fa4 <__ieee754_rem_pio2+0xdc>
 8010fe2:	4b82      	ldr	r3, [pc, #520]	; (80111ec <__ieee754_rem_pio2+0x324>)
 8010fe4:	4598      	cmp	r8, r3
 8010fe6:	f300 80d0 	bgt.w	801118a <__ieee754_rem_pio2+0x2c2>
 8010fea:	f000 fe23 	bl	8011c34 <fabs>
 8010fee:	ec57 6b10 	vmov	r6, r7, d0
 8010ff2:	ee10 0a10 	vmov	r0, s0
 8010ff6:	a374      	add	r3, pc, #464	; (adr r3, 80111c8 <__ieee754_rem_pio2+0x300>)
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	f7ef fb13 	bl	8000628 <__aeabi_dmul>
 8011002:	2200      	movs	r2, #0
 8011004:	4b7a      	ldr	r3, [pc, #488]	; (80111f0 <__ieee754_rem_pio2+0x328>)
 8011006:	f7ef f959 	bl	80002bc <__adddf3>
 801100a:	f7ef fdbd 	bl	8000b88 <__aeabi_d2iz>
 801100e:	4605      	mov	r5, r0
 8011010:	f7ef faa0 	bl	8000554 <__aeabi_i2d>
 8011014:	a364      	add	r3, pc, #400	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x2e0>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801101e:	f7ef fb03 	bl	8000628 <__aeabi_dmul>
 8011022:	4602      	mov	r2, r0
 8011024:	460b      	mov	r3, r1
 8011026:	4630      	mov	r0, r6
 8011028:	4639      	mov	r1, r7
 801102a:	f7ef f945 	bl	80002b8 <__aeabi_dsub>
 801102e:	a360      	add	r3, pc, #384	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x2e8>)
 8011030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011034:	4682      	mov	sl, r0
 8011036:	468b      	mov	fp, r1
 8011038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801103c:	f7ef faf4 	bl	8000628 <__aeabi_dmul>
 8011040:	2d1f      	cmp	r5, #31
 8011042:	4606      	mov	r6, r0
 8011044:	460f      	mov	r7, r1
 8011046:	dc0c      	bgt.n	8011062 <__ieee754_rem_pio2+0x19a>
 8011048:	1e6a      	subs	r2, r5, #1
 801104a:	4b6a      	ldr	r3, [pc, #424]	; (80111f4 <__ieee754_rem_pio2+0x32c>)
 801104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011050:	4543      	cmp	r3, r8
 8011052:	d006      	beq.n	8011062 <__ieee754_rem_pio2+0x19a>
 8011054:	4632      	mov	r2, r6
 8011056:	463b      	mov	r3, r7
 8011058:	4650      	mov	r0, sl
 801105a:	4659      	mov	r1, fp
 801105c:	f7ef f92c 	bl	80002b8 <__aeabi_dsub>
 8011060:	e00e      	b.n	8011080 <__ieee754_rem_pio2+0x1b8>
 8011062:	4632      	mov	r2, r6
 8011064:	463b      	mov	r3, r7
 8011066:	4650      	mov	r0, sl
 8011068:	4659      	mov	r1, fp
 801106a:	f7ef f925 	bl	80002b8 <__aeabi_dsub>
 801106e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011072:	9305      	str	r3, [sp, #20]
 8011074:	9a05      	ldr	r2, [sp, #20]
 8011076:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	2b10      	cmp	r3, #16
 801107e:	dc02      	bgt.n	8011086 <__ieee754_rem_pio2+0x1be>
 8011080:	e9c4 0100 	strd	r0, r1, [r4]
 8011084:	e039      	b.n	80110fa <__ieee754_rem_pio2+0x232>
 8011086:	a34c      	add	r3, pc, #304	; (adr r3, 80111b8 <__ieee754_rem_pio2+0x2f0>)
 8011088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011090:	f7ef faca 	bl	8000628 <__aeabi_dmul>
 8011094:	4606      	mov	r6, r0
 8011096:	460f      	mov	r7, r1
 8011098:	4602      	mov	r2, r0
 801109a:	460b      	mov	r3, r1
 801109c:	4650      	mov	r0, sl
 801109e:	4659      	mov	r1, fp
 80110a0:	f7ef f90a 	bl	80002b8 <__aeabi_dsub>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	4680      	mov	r8, r0
 80110aa:	4689      	mov	r9, r1
 80110ac:	4650      	mov	r0, sl
 80110ae:	4659      	mov	r1, fp
 80110b0:	f7ef f902 	bl	80002b8 <__aeabi_dsub>
 80110b4:	4632      	mov	r2, r6
 80110b6:	463b      	mov	r3, r7
 80110b8:	f7ef f8fe 	bl	80002b8 <__aeabi_dsub>
 80110bc:	a340      	add	r3, pc, #256	; (adr r3, 80111c0 <__ieee754_rem_pio2+0x2f8>)
 80110be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c2:	4606      	mov	r6, r0
 80110c4:	460f      	mov	r7, r1
 80110c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110ca:	f7ef faad 	bl	8000628 <__aeabi_dmul>
 80110ce:	4632      	mov	r2, r6
 80110d0:	463b      	mov	r3, r7
 80110d2:	f7ef f8f1 	bl	80002b8 <__aeabi_dsub>
 80110d6:	4602      	mov	r2, r0
 80110d8:	460b      	mov	r3, r1
 80110da:	4606      	mov	r6, r0
 80110dc:	460f      	mov	r7, r1
 80110de:	4640      	mov	r0, r8
 80110e0:	4649      	mov	r1, r9
 80110e2:	f7ef f8e9 	bl	80002b8 <__aeabi_dsub>
 80110e6:	9a05      	ldr	r2, [sp, #20]
 80110e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	2b31      	cmp	r3, #49	; 0x31
 80110f0:	dc20      	bgt.n	8011134 <__ieee754_rem_pio2+0x26c>
 80110f2:	e9c4 0100 	strd	r0, r1, [r4]
 80110f6:	46c2      	mov	sl, r8
 80110f8:	46cb      	mov	fp, r9
 80110fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80110fe:	4650      	mov	r0, sl
 8011100:	4642      	mov	r2, r8
 8011102:	464b      	mov	r3, r9
 8011104:	4659      	mov	r1, fp
 8011106:	f7ef f8d7 	bl	80002b8 <__aeabi_dsub>
 801110a:	463b      	mov	r3, r7
 801110c:	4632      	mov	r2, r6
 801110e:	f7ef f8d3 	bl	80002b8 <__aeabi_dsub>
 8011112:	9b04      	ldr	r3, [sp, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801111a:	f6bf af11 	bge.w	8010f40 <__ieee754_rem_pio2+0x78>
 801111e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011122:	6063      	str	r3, [r4, #4]
 8011124:	f8c4 8000 	str.w	r8, [r4]
 8011128:	60a0      	str	r0, [r4, #8]
 801112a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801112e:	60e3      	str	r3, [r4, #12]
 8011130:	426d      	negs	r5, r5
 8011132:	e705      	b.n	8010f40 <__ieee754_rem_pio2+0x78>
 8011134:	a326      	add	r3, pc, #152	; (adr r3, 80111d0 <__ieee754_rem_pio2+0x308>)
 8011136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801113e:	f7ef fa73 	bl	8000628 <__aeabi_dmul>
 8011142:	4606      	mov	r6, r0
 8011144:	460f      	mov	r7, r1
 8011146:	4602      	mov	r2, r0
 8011148:	460b      	mov	r3, r1
 801114a:	4640      	mov	r0, r8
 801114c:	4649      	mov	r1, r9
 801114e:	f7ef f8b3 	bl	80002b8 <__aeabi_dsub>
 8011152:	4602      	mov	r2, r0
 8011154:	460b      	mov	r3, r1
 8011156:	4682      	mov	sl, r0
 8011158:	468b      	mov	fp, r1
 801115a:	4640      	mov	r0, r8
 801115c:	4649      	mov	r1, r9
 801115e:	f7ef f8ab 	bl	80002b8 <__aeabi_dsub>
 8011162:	4632      	mov	r2, r6
 8011164:	463b      	mov	r3, r7
 8011166:	f7ef f8a7 	bl	80002b8 <__aeabi_dsub>
 801116a:	a31b      	add	r3, pc, #108	; (adr r3, 80111d8 <__ieee754_rem_pio2+0x310>)
 801116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011170:	4606      	mov	r6, r0
 8011172:	460f      	mov	r7, r1
 8011174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011178:	f7ef fa56 	bl	8000628 <__aeabi_dmul>
 801117c:	4632      	mov	r2, r6
 801117e:	463b      	mov	r3, r7
 8011180:	f7ef f89a 	bl	80002b8 <__aeabi_dsub>
 8011184:	4606      	mov	r6, r0
 8011186:	460f      	mov	r7, r1
 8011188:	e764      	b.n	8011054 <__ieee754_rem_pio2+0x18c>
 801118a:	4b1b      	ldr	r3, [pc, #108]	; (80111f8 <__ieee754_rem_pio2+0x330>)
 801118c:	4598      	cmp	r8, r3
 801118e:	dd35      	ble.n	80111fc <__ieee754_rem_pio2+0x334>
 8011190:	ee10 2a10 	vmov	r2, s0
 8011194:	463b      	mov	r3, r7
 8011196:	4630      	mov	r0, r6
 8011198:	4639      	mov	r1, r7
 801119a:	f7ef f88d 	bl	80002b8 <__aeabi_dsub>
 801119e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80111a2:	e9c4 0100 	strd	r0, r1, [r4]
 80111a6:	e6a1      	b.n	8010eec <__ieee754_rem_pio2+0x24>
 80111a8:	54400000 	.word	0x54400000
 80111ac:	3ff921fb 	.word	0x3ff921fb
 80111b0:	1a626331 	.word	0x1a626331
 80111b4:	3dd0b461 	.word	0x3dd0b461
 80111b8:	1a600000 	.word	0x1a600000
 80111bc:	3dd0b461 	.word	0x3dd0b461
 80111c0:	2e037073 	.word	0x2e037073
 80111c4:	3ba3198a 	.word	0x3ba3198a
 80111c8:	6dc9c883 	.word	0x6dc9c883
 80111cc:	3fe45f30 	.word	0x3fe45f30
 80111d0:	2e000000 	.word	0x2e000000
 80111d4:	3ba3198a 	.word	0x3ba3198a
 80111d8:	252049c1 	.word	0x252049c1
 80111dc:	397b839a 	.word	0x397b839a
 80111e0:	3fe921fb 	.word	0x3fe921fb
 80111e4:	4002d97b 	.word	0x4002d97b
 80111e8:	3ff921fb 	.word	0x3ff921fb
 80111ec:	413921fb 	.word	0x413921fb
 80111f0:	3fe00000 	.word	0x3fe00000
 80111f4:	08017334 	.word	0x08017334
 80111f8:	7fefffff 	.word	0x7fefffff
 80111fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011200:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011204:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011208:	4630      	mov	r0, r6
 801120a:	460f      	mov	r7, r1
 801120c:	f7ef fcbc 	bl	8000b88 <__aeabi_d2iz>
 8011210:	f7ef f9a0 	bl	8000554 <__aeabi_i2d>
 8011214:	4602      	mov	r2, r0
 8011216:	460b      	mov	r3, r1
 8011218:	4630      	mov	r0, r6
 801121a:	4639      	mov	r1, r7
 801121c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011220:	f7ef f84a 	bl	80002b8 <__aeabi_dsub>
 8011224:	2200      	movs	r2, #0
 8011226:	4b1f      	ldr	r3, [pc, #124]	; (80112a4 <__ieee754_rem_pio2+0x3dc>)
 8011228:	f7ef f9fe 	bl	8000628 <__aeabi_dmul>
 801122c:	460f      	mov	r7, r1
 801122e:	4606      	mov	r6, r0
 8011230:	f7ef fcaa 	bl	8000b88 <__aeabi_d2iz>
 8011234:	f7ef f98e 	bl	8000554 <__aeabi_i2d>
 8011238:	4602      	mov	r2, r0
 801123a:	460b      	mov	r3, r1
 801123c:	4630      	mov	r0, r6
 801123e:	4639      	mov	r1, r7
 8011240:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011244:	f7ef f838 	bl	80002b8 <__aeabi_dsub>
 8011248:	2200      	movs	r2, #0
 801124a:	4b16      	ldr	r3, [pc, #88]	; (80112a4 <__ieee754_rem_pio2+0x3dc>)
 801124c:	f7ef f9ec 	bl	8000628 <__aeabi_dmul>
 8011250:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011254:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011258:	f04f 0803 	mov.w	r8, #3
 801125c:	2600      	movs	r6, #0
 801125e:	2700      	movs	r7, #0
 8011260:	4632      	mov	r2, r6
 8011262:	463b      	mov	r3, r7
 8011264:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011268:	f108 3aff 	add.w	sl, r8, #4294967295
 801126c:	f7ef fc44 	bl	8000af8 <__aeabi_dcmpeq>
 8011270:	b9b0      	cbnz	r0, 80112a0 <__ieee754_rem_pio2+0x3d8>
 8011272:	4b0d      	ldr	r3, [pc, #52]	; (80112a8 <__ieee754_rem_pio2+0x3e0>)
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	2302      	movs	r3, #2
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	462a      	mov	r2, r5
 801127c:	4643      	mov	r3, r8
 801127e:	4621      	mov	r1, r4
 8011280:	a806      	add	r0, sp, #24
 8011282:	f000 f8dd 	bl	8011440 <__kernel_rem_pio2>
 8011286:	9b04      	ldr	r3, [sp, #16]
 8011288:	2b00      	cmp	r3, #0
 801128a:	4605      	mov	r5, r0
 801128c:	f6bf ae58 	bge.w	8010f40 <__ieee754_rem_pio2+0x78>
 8011290:	6863      	ldr	r3, [r4, #4]
 8011292:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011296:	6063      	str	r3, [r4, #4]
 8011298:	68e3      	ldr	r3, [r4, #12]
 801129a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801129e:	e746      	b.n	801112e <__ieee754_rem_pio2+0x266>
 80112a0:	46d0      	mov	r8, sl
 80112a2:	e7dd      	b.n	8011260 <__ieee754_rem_pio2+0x398>
 80112a4:	41700000 	.word	0x41700000
 80112a8:	080173b4 	.word	0x080173b4
 80112ac:	00000000 	.word	0x00000000

080112b0 <__kernel_cos>:
 80112b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	ec59 8b10 	vmov	r8, r9, d0
 80112b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80112bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80112c0:	ed2d 8b02 	vpush	{d8}
 80112c4:	eeb0 8a41 	vmov.f32	s16, s2
 80112c8:	eef0 8a61 	vmov.f32	s17, s3
 80112cc:	da07      	bge.n	80112de <__kernel_cos+0x2e>
 80112ce:	ee10 0a10 	vmov	r0, s0
 80112d2:	4649      	mov	r1, r9
 80112d4:	f7ef fc58 	bl	8000b88 <__aeabi_d2iz>
 80112d8:	2800      	cmp	r0, #0
 80112da:	f000 8089 	beq.w	80113f0 <__kernel_cos+0x140>
 80112de:	4642      	mov	r2, r8
 80112e0:	464b      	mov	r3, r9
 80112e2:	4640      	mov	r0, r8
 80112e4:	4649      	mov	r1, r9
 80112e6:	f7ef f99f 	bl	8000628 <__aeabi_dmul>
 80112ea:	2200      	movs	r2, #0
 80112ec:	4b4e      	ldr	r3, [pc, #312]	; (8011428 <__kernel_cos+0x178>)
 80112ee:	4604      	mov	r4, r0
 80112f0:	460d      	mov	r5, r1
 80112f2:	f7ef f999 	bl	8000628 <__aeabi_dmul>
 80112f6:	a340      	add	r3, pc, #256	; (adr r3, 80113f8 <__kernel_cos+0x148>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	4682      	mov	sl, r0
 80112fe:	468b      	mov	fp, r1
 8011300:	4620      	mov	r0, r4
 8011302:	4629      	mov	r1, r5
 8011304:	f7ef f990 	bl	8000628 <__aeabi_dmul>
 8011308:	a33d      	add	r3, pc, #244	; (adr r3, 8011400 <__kernel_cos+0x150>)
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	f7ee ffd5 	bl	80002bc <__adddf3>
 8011312:	4622      	mov	r2, r4
 8011314:	462b      	mov	r3, r5
 8011316:	f7ef f987 	bl	8000628 <__aeabi_dmul>
 801131a:	a33b      	add	r3, pc, #236	; (adr r3, 8011408 <__kernel_cos+0x158>)
 801131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011320:	f7ee ffca 	bl	80002b8 <__aeabi_dsub>
 8011324:	4622      	mov	r2, r4
 8011326:	462b      	mov	r3, r5
 8011328:	f7ef f97e 	bl	8000628 <__aeabi_dmul>
 801132c:	a338      	add	r3, pc, #224	; (adr r3, 8011410 <__kernel_cos+0x160>)
 801132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011332:	f7ee ffc3 	bl	80002bc <__adddf3>
 8011336:	4622      	mov	r2, r4
 8011338:	462b      	mov	r3, r5
 801133a:	f7ef f975 	bl	8000628 <__aeabi_dmul>
 801133e:	a336      	add	r3, pc, #216	; (adr r3, 8011418 <__kernel_cos+0x168>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	f7ee ffb8 	bl	80002b8 <__aeabi_dsub>
 8011348:	4622      	mov	r2, r4
 801134a:	462b      	mov	r3, r5
 801134c:	f7ef f96c 	bl	8000628 <__aeabi_dmul>
 8011350:	a333      	add	r3, pc, #204	; (adr r3, 8011420 <__kernel_cos+0x170>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ee ffb1 	bl	80002bc <__adddf3>
 801135a:	4622      	mov	r2, r4
 801135c:	462b      	mov	r3, r5
 801135e:	f7ef f963 	bl	8000628 <__aeabi_dmul>
 8011362:	4622      	mov	r2, r4
 8011364:	462b      	mov	r3, r5
 8011366:	f7ef f95f 	bl	8000628 <__aeabi_dmul>
 801136a:	ec53 2b18 	vmov	r2, r3, d8
 801136e:	4604      	mov	r4, r0
 8011370:	460d      	mov	r5, r1
 8011372:	4640      	mov	r0, r8
 8011374:	4649      	mov	r1, r9
 8011376:	f7ef f957 	bl	8000628 <__aeabi_dmul>
 801137a:	460b      	mov	r3, r1
 801137c:	4602      	mov	r2, r0
 801137e:	4629      	mov	r1, r5
 8011380:	4620      	mov	r0, r4
 8011382:	f7ee ff99 	bl	80002b8 <__aeabi_dsub>
 8011386:	4b29      	ldr	r3, [pc, #164]	; (801142c <__kernel_cos+0x17c>)
 8011388:	429e      	cmp	r6, r3
 801138a:	4680      	mov	r8, r0
 801138c:	4689      	mov	r9, r1
 801138e:	dc11      	bgt.n	80113b4 <__kernel_cos+0x104>
 8011390:	4602      	mov	r2, r0
 8011392:	460b      	mov	r3, r1
 8011394:	4650      	mov	r0, sl
 8011396:	4659      	mov	r1, fp
 8011398:	f7ee ff8e 	bl	80002b8 <__aeabi_dsub>
 801139c:	460b      	mov	r3, r1
 801139e:	4924      	ldr	r1, [pc, #144]	; (8011430 <__kernel_cos+0x180>)
 80113a0:	4602      	mov	r2, r0
 80113a2:	2000      	movs	r0, #0
 80113a4:	f7ee ff88 	bl	80002b8 <__aeabi_dsub>
 80113a8:	ecbd 8b02 	vpop	{d8}
 80113ac:	ec41 0b10 	vmov	d0, r0, r1
 80113b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	4b1f      	ldr	r3, [pc, #124]	; (8011434 <__kernel_cos+0x184>)
 80113b6:	491e      	ldr	r1, [pc, #120]	; (8011430 <__kernel_cos+0x180>)
 80113b8:	429e      	cmp	r6, r3
 80113ba:	bfcc      	ite	gt
 80113bc:	4d1e      	ldrgt	r5, [pc, #120]	; (8011438 <__kernel_cos+0x188>)
 80113be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80113c2:	2400      	movs	r4, #0
 80113c4:	4622      	mov	r2, r4
 80113c6:	462b      	mov	r3, r5
 80113c8:	2000      	movs	r0, #0
 80113ca:	f7ee ff75 	bl	80002b8 <__aeabi_dsub>
 80113ce:	4622      	mov	r2, r4
 80113d0:	4606      	mov	r6, r0
 80113d2:	460f      	mov	r7, r1
 80113d4:	462b      	mov	r3, r5
 80113d6:	4650      	mov	r0, sl
 80113d8:	4659      	mov	r1, fp
 80113da:	f7ee ff6d 	bl	80002b8 <__aeabi_dsub>
 80113de:	4642      	mov	r2, r8
 80113e0:	464b      	mov	r3, r9
 80113e2:	f7ee ff69 	bl	80002b8 <__aeabi_dsub>
 80113e6:	4602      	mov	r2, r0
 80113e8:	460b      	mov	r3, r1
 80113ea:	4630      	mov	r0, r6
 80113ec:	4639      	mov	r1, r7
 80113ee:	e7d9      	b.n	80113a4 <__kernel_cos+0xf4>
 80113f0:	2000      	movs	r0, #0
 80113f2:	490f      	ldr	r1, [pc, #60]	; (8011430 <__kernel_cos+0x180>)
 80113f4:	e7d8      	b.n	80113a8 <__kernel_cos+0xf8>
 80113f6:	bf00      	nop
 80113f8:	be8838d4 	.word	0xbe8838d4
 80113fc:	bda8fae9 	.word	0xbda8fae9
 8011400:	bdb4b1c4 	.word	0xbdb4b1c4
 8011404:	3e21ee9e 	.word	0x3e21ee9e
 8011408:	809c52ad 	.word	0x809c52ad
 801140c:	3e927e4f 	.word	0x3e927e4f
 8011410:	19cb1590 	.word	0x19cb1590
 8011414:	3efa01a0 	.word	0x3efa01a0
 8011418:	16c15177 	.word	0x16c15177
 801141c:	3f56c16c 	.word	0x3f56c16c
 8011420:	5555554c 	.word	0x5555554c
 8011424:	3fa55555 	.word	0x3fa55555
 8011428:	3fe00000 	.word	0x3fe00000
 801142c:	3fd33332 	.word	0x3fd33332
 8011430:	3ff00000 	.word	0x3ff00000
 8011434:	3fe90000 	.word	0x3fe90000
 8011438:	3fd20000 	.word	0x3fd20000
 801143c:	00000000 	.word	0x00000000

08011440 <__kernel_rem_pio2>:
 8011440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011444:	ed2d 8b02 	vpush	{d8}
 8011448:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801144c:	1ed4      	subs	r4, r2, #3
 801144e:	9308      	str	r3, [sp, #32]
 8011450:	9101      	str	r1, [sp, #4]
 8011452:	4bc5      	ldr	r3, [pc, #788]	; (8011768 <__kernel_rem_pio2+0x328>)
 8011454:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011456:	9009      	str	r0, [sp, #36]	; 0x24
 8011458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801145c:	9304      	str	r3, [sp, #16]
 801145e:	9b08      	ldr	r3, [sp, #32]
 8011460:	3b01      	subs	r3, #1
 8011462:	9307      	str	r3, [sp, #28]
 8011464:	2318      	movs	r3, #24
 8011466:	fb94 f4f3 	sdiv	r4, r4, r3
 801146a:	f06f 0317 	mvn.w	r3, #23
 801146e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011472:	fb04 3303 	mla	r3, r4, r3, r3
 8011476:	eb03 0a02 	add.w	sl, r3, r2
 801147a:	9b04      	ldr	r3, [sp, #16]
 801147c:	9a07      	ldr	r2, [sp, #28]
 801147e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011758 <__kernel_rem_pio2+0x318>
 8011482:	eb03 0802 	add.w	r8, r3, r2
 8011486:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011488:	1aa7      	subs	r7, r4, r2
 801148a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801148e:	ae22      	add	r6, sp, #136	; 0x88
 8011490:	2500      	movs	r5, #0
 8011492:	4545      	cmp	r5, r8
 8011494:	dd13      	ble.n	80114be <__kernel_rem_pio2+0x7e>
 8011496:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011758 <__kernel_rem_pio2+0x318>
 801149a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801149e:	2600      	movs	r6, #0
 80114a0:	9b04      	ldr	r3, [sp, #16]
 80114a2:	429e      	cmp	r6, r3
 80114a4:	dc32      	bgt.n	801150c <__kernel_rem_pio2+0xcc>
 80114a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114a8:	9302      	str	r3, [sp, #8]
 80114aa:	9b08      	ldr	r3, [sp, #32]
 80114ac:	199d      	adds	r5, r3, r6
 80114ae:	ab22      	add	r3, sp, #136	; 0x88
 80114b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80114b4:	9306      	str	r3, [sp, #24]
 80114b6:	ec59 8b18 	vmov	r8, r9, d8
 80114ba:	2700      	movs	r7, #0
 80114bc:	e01f      	b.n	80114fe <__kernel_rem_pio2+0xbe>
 80114be:	42ef      	cmn	r7, r5
 80114c0:	d407      	bmi.n	80114d2 <__kernel_rem_pio2+0x92>
 80114c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80114c6:	f7ef f845 	bl	8000554 <__aeabi_i2d>
 80114ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80114ce:	3501      	adds	r5, #1
 80114d0:	e7df      	b.n	8011492 <__kernel_rem_pio2+0x52>
 80114d2:	ec51 0b18 	vmov	r0, r1, d8
 80114d6:	e7f8      	b.n	80114ca <__kernel_rem_pio2+0x8a>
 80114d8:	9906      	ldr	r1, [sp, #24]
 80114da:	9d02      	ldr	r5, [sp, #8]
 80114dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80114e0:	9106      	str	r1, [sp, #24]
 80114e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80114e6:	9502      	str	r5, [sp, #8]
 80114e8:	f7ef f89e 	bl	8000628 <__aeabi_dmul>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4640      	mov	r0, r8
 80114f2:	4649      	mov	r1, r9
 80114f4:	f7ee fee2 	bl	80002bc <__adddf3>
 80114f8:	3701      	adds	r7, #1
 80114fa:	4680      	mov	r8, r0
 80114fc:	4689      	mov	r9, r1
 80114fe:	9b07      	ldr	r3, [sp, #28]
 8011500:	429f      	cmp	r7, r3
 8011502:	dde9      	ble.n	80114d8 <__kernel_rem_pio2+0x98>
 8011504:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011508:	3601      	adds	r6, #1
 801150a:	e7c9      	b.n	80114a0 <__kernel_rem_pio2+0x60>
 801150c:	9b04      	ldr	r3, [sp, #16]
 801150e:	aa0e      	add	r2, sp, #56	; 0x38
 8011510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011514:	930c      	str	r3, [sp, #48]	; 0x30
 8011516:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011518:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801151c:	9c04      	ldr	r4, [sp, #16]
 801151e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011520:	ab9a      	add	r3, sp, #616	; 0x268
 8011522:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011526:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801152a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801152e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011532:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011536:	ab9a      	add	r3, sp, #616	; 0x268
 8011538:	445b      	add	r3, fp
 801153a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801153e:	2500      	movs	r5, #0
 8011540:	1b63      	subs	r3, r4, r5
 8011542:	2b00      	cmp	r3, #0
 8011544:	dc78      	bgt.n	8011638 <__kernel_rem_pio2+0x1f8>
 8011546:	4650      	mov	r0, sl
 8011548:	ec49 8b10 	vmov	d0, r8, r9
 801154c:	f000 fc00 	bl	8011d50 <scalbn>
 8011550:	ec57 6b10 	vmov	r6, r7, d0
 8011554:	2200      	movs	r2, #0
 8011556:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801155a:	ee10 0a10 	vmov	r0, s0
 801155e:	4639      	mov	r1, r7
 8011560:	f7ef f862 	bl	8000628 <__aeabi_dmul>
 8011564:	ec41 0b10 	vmov	d0, r0, r1
 8011568:	f000 fb6e 	bl	8011c48 <floor>
 801156c:	2200      	movs	r2, #0
 801156e:	ec51 0b10 	vmov	r0, r1, d0
 8011572:	4b7e      	ldr	r3, [pc, #504]	; (801176c <__kernel_rem_pio2+0x32c>)
 8011574:	f7ef f858 	bl	8000628 <__aeabi_dmul>
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4630      	mov	r0, r6
 801157e:	4639      	mov	r1, r7
 8011580:	f7ee fe9a 	bl	80002b8 <__aeabi_dsub>
 8011584:	460f      	mov	r7, r1
 8011586:	4606      	mov	r6, r0
 8011588:	f7ef fafe 	bl	8000b88 <__aeabi_d2iz>
 801158c:	9006      	str	r0, [sp, #24]
 801158e:	f7ee ffe1 	bl	8000554 <__aeabi_i2d>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	4630      	mov	r0, r6
 8011598:	4639      	mov	r1, r7
 801159a:	f7ee fe8d 	bl	80002b8 <__aeabi_dsub>
 801159e:	f1ba 0f00 	cmp.w	sl, #0
 80115a2:	4606      	mov	r6, r0
 80115a4:	460f      	mov	r7, r1
 80115a6:	dd6c      	ble.n	8011682 <__kernel_rem_pio2+0x242>
 80115a8:	1e62      	subs	r2, r4, #1
 80115aa:	ab0e      	add	r3, sp, #56	; 0x38
 80115ac:	f1ca 0118 	rsb	r1, sl, #24
 80115b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80115b4:	9d06      	ldr	r5, [sp, #24]
 80115b6:	fa40 f301 	asr.w	r3, r0, r1
 80115ba:	441d      	add	r5, r3
 80115bc:	408b      	lsls	r3, r1
 80115be:	1ac0      	subs	r0, r0, r3
 80115c0:	ab0e      	add	r3, sp, #56	; 0x38
 80115c2:	9506      	str	r5, [sp, #24]
 80115c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80115c8:	f1ca 0317 	rsb	r3, sl, #23
 80115cc:	fa40 f303 	asr.w	r3, r0, r3
 80115d0:	9302      	str	r3, [sp, #8]
 80115d2:	9b02      	ldr	r3, [sp, #8]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	dd62      	ble.n	801169e <__kernel_rem_pio2+0x25e>
 80115d8:	9b06      	ldr	r3, [sp, #24]
 80115da:	2200      	movs	r2, #0
 80115dc:	3301      	adds	r3, #1
 80115de:	9306      	str	r3, [sp, #24]
 80115e0:	4615      	mov	r5, r2
 80115e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80115e6:	4294      	cmp	r4, r2
 80115e8:	f300 8095 	bgt.w	8011716 <__kernel_rem_pio2+0x2d6>
 80115ec:	f1ba 0f00 	cmp.w	sl, #0
 80115f0:	dd07      	ble.n	8011602 <__kernel_rem_pio2+0x1c2>
 80115f2:	f1ba 0f01 	cmp.w	sl, #1
 80115f6:	f000 80a2 	beq.w	801173e <__kernel_rem_pio2+0x2fe>
 80115fa:	f1ba 0f02 	cmp.w	sl, #2
 80115fe:	f000 80c1 	beq.w	8011784 <__kernel_rem_pio2+0x344>
 8011602:	9b02      	ldr	r3, [sp, #8]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d14a      	bne.n	801169e <__kernel_rem_pio2+0x25e>
 8011608:	4632      	mov	r2, r6
 801160a:	463b      	mov	r3, r7
 801160c:	2000      	movs	r0, #0
 801160e:	4958      	ldr	r1, [pc, #352]	; (8011770 <__kernel_rem_pio2+0x330>)
 8011610:	f7ee fe52 	bl	80002b8 <__aeabi_dsub>
 8011614:	4606      	mov	r6, r0
 8011616:	460f      	mov	r7, r1
 8011618:	2d00      	cmp	r5, #0
 801161a:	d040      	beq.n	801169e <__kernel_rem_pio2+0x25e>
 801161c:	4650      	mov	r0, sl
 801161e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011760 <__kernel_rem_pio2+0x320>
 8011622:	f000 fb95 	bl	8011d50 <scalbn>
 8011626:	4630      	mov	r0, r6
 8011628:	4639      	mov	r1, r7
 801162a:	ec53 2b10 	vmov	r2, r3, d0
 801162e:	f7ee fe43 	bl	80002b8 <__aeabi_dsub>
 8011632:	4606      	mov	r6, r0
 8011634:	460f      	mov	r7, r1
 8011636:	e032      	b.n	801169e <__kernel_rem_pio2+0x25e>
 8011638:	2200      	movs	r2, #0
 801163a:	4b4e      	ldr	r3, [pc, #312]	; (8011774 <__kernel_rem_pio2+0x334>)
 801163c:	4640      	mov	r0, r8
 801163e:	4649      	mov	r1, r9
 8011640:	f7ee fff2 	bl	8000628 <__aeabi_dmul>
 8011644:	f7ef faa0 	bl	8000b88 <__aeabi_d2iz>
 8011648:	f7ee ff84 	bl	8000554 <__aeabi_i2d>
 801164c:	2200      	movs	r2, #0
 801164e:	4b4a      	ldr	r3, [pc, #296]	; (8011778 <__kernel_rem_pio2+0x338>)
 8011650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011654:	f7ee ffe8 	bl	8000628 <__aeabi_dmul>
 8011658:	4602      	mov	r2, r0
 801165a:	460b      	mov	r3, r1
 801165c:	4640      	mov	r0, r8
 801165e:	4649      	mov	r1, r9
 8011660:	f7ee fe2a 	bl	80002b8 <__aeabi_dsub>
 8011664:	f7ef fa90 	bl	8000b88 <__aeabi_d2iz>
 8011668:	ab0e      	add	r3, sp, #56	; 0x38
 801166a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801166e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011676:	f7ee fe21 	bl	80002bc <__adddf3>
 801167a:	3501      	adds	r5, #1
 801167c:	4680      	mov	r8, r0
 801167e:	4689      	mov	r9, r1
 8011680:	e75e      	b.n	8011540 <__kernel_rem_pio2+0x100>
 8011682:	d105      	bne.n	8011690 <__kernel_rem_pio2+0x250>
 8011684:	1e63      	subs	r3, r4, #1
 8011686:	aa0e      	add	r2, sp, #56	; 0x38
 8011688:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801168c:	15c3      	asrs	r3, r0, #23
 801168e:	e79f      	b.n	80115d0 <__kernel_rem_pio2+0x190>
 8011690:	2200      	movs	r2, #0
 8011692:	4b3a      	ldr	r3, [pc, #232]	; (801177c <__kernel_rem_pio2+0x33c>)
 8011694:	f7ef fa4e 	bl	8000b34 <__aeabi_dcmpge>
 8011698:	2800      	cmp	r0, #0
 801169a:	d139      	bne.n	8011710 <__kernel_rem_pio2+0x2d0>
 801169c:	9002      	str	r0, [sp, #8]
 801169e:	2200      	movs	r2, #0
 80116a0:	2300      	movs	r3, #0
 80116a2:	4630      	mov	r0, r6
 80116a4:	4639      	mov	r1, r7
 80116a6:	f7ef fa27 	bl	8000af8 <__aeabi_dcmpeq>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f000 80c7 	beq.w	801183e <__kernel_rem_pio2+0x3fe>
 80116b0:	1e65      	subs	r5, r4, #1
 80116b2:	462b      	mov	r3, r5
 80116b4:	2200      	movs	r2, #0
 80116b6:	9904      	ldr	r1, [sp, #16]
 80116b8:	428b      	cmp	r3, r1
 80116ba:	da6a      	bge.n	8011792 <__kernel_rem_pio2+0x352>
 80116bc:	2a00      	cmp	r2, #0
 80116be:	f000 8088 	beq.w	80117d2 <__kernel_rem_pio2+0x392>
 80116c2:	ab0e      	add	r3, sp, #56	; 0x38
 80116c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80116c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f000 80b4 	beq.w	801183a <__kernel_rem_pio2+0x3fa>
 80116d2:	4650      	mov	r0, sl
 80116d4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011760 <__kernel_rem_pio2+0x320>
 80116d8:	f000 fb3a 	bl	8011d50 <scalbn>
 80116dc:	00ec      	lsls	r4, r5, #3
 80116de:	ab72      	add	r3, sp, #456	; 0x1c8
 80116e0:	191e      	adds	r6, r3, r4
 80116e2:	ec59 8b10 	vmov	r8, r9, d0
 80116e6:	f106 0a08 	add.w	sl, r6, #8
 80116ea:	462f      	mov	r7, r5
 80116ec:	2f00      	cmp	r7, #0
 80116ee:	f280 80df 	bge.w	80118b0 <__kernel_rem_pio2+0x470>
 80116f2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011758 <__kernel_rem_pio2+0x318>
 80116f6:	f04f 0a00 	mov.w	sl, #0
 80116fa:	eba5 030a 	sub.w	r3, r5, sl
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f2c0 810a 	blt.w	8011918 <__kernel_rem_pio2+0x4d8>
 8011704:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011780 <__kernel_rem_pio2+0x340>
 8011708:	ec59 8b18 	vmov	r8, r9, d8
 801170c:	2700      	movs	r7, #0
 801170e:	e0f5      	b.n	80118fc <__kernel_rem_pio2+0x4bc>
 8011710:	2302      	movs	r3, #2
 8011712:	9302      	str	r3, [sp, #8]
 8011714:	e760      	b.n	80115d8 <__kernel_rem_pio2+0x198>
 8011716:	ab0e      	add	r3, sp, #56	; 0x38
 8011718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801171c:	b94d      	cbnz	r5, 8011732 <__kernel_rem_pio2+0x2f2>
 801171e:	b12b      	cbz	r3, 801172c <__kernel_rem_pio2+0x2ec>
 8011720:	a80e      	add	r0, sp, #56	; 0x38
 8011722:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011726:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801172a:	2301      	movs	r3, #1
 801172c:	3201      	adds	r2, #1
 801172e:	461d      	mov	r5, r3
 8011730:	e759      	b.n	80115e6 <__kernel_rem_pio2+0x1a6>
 8011732:	a80e      	add	r0, sp, #56	; 0x38
 8011734:	1acb      	subs	r3, r1, r3
 8011736:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801173a:	462b      	mov	r3, r5
 801173c:	e7f6      	b.n	801172c <__kernel_rem_pio2+0x2ec>
 801173e:	1e62      	subs	r2, r4, #1
 8011740:	ab0e      	add	r3, sp, #56	; 0x38
 8011742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011746:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801174a:	a90e      	add	r1, sp, #56	; 0x38
 801174c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011750:	e757      	b.n	8011602 <__kernel_rem_pio2+0x1c2>
 8011752:	bf00      	nop
 8011754:	f3af 8000 	nop.w
	...
 8011764:	3ff00000 	.word	0x3ff00000
 8011768:	08017500 	.word	0x08017500
 801176c:	40200000 	.word	0x40200000
 8011770:	3ff00000 	.word	0x3ff00000
 8011774:	3e700000 	.word	0x3e700000
 8011778:	41700000 	.word	0x41700000
 801177c:	3fe00000 	.word	0x3fe00000
 8011780:	080174c0 	.word	0x080174c0
 8011784:	1e62      	subs	r2, r4, #1
 8011786:	ab0e      	add	r3, sp, #56	; 0x38
 8011788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801178c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011790:	e7db      	b.n	801174a <__kernel_rem_pio2+0x30a>
 8011792:	a90e      	add	r1, sp, #56	; 0x38
 8011794:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011798:	3b01      	subs	r3, #1
 801179a:	430a      	orrs	r2, r1
 801179c:	e78b      	b.n	80116b6 <__kernel_rem_pio2+0x276>
 801179e:	3301      	adds	r3, #1
 80117a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80117a4:	2900      	cmp	r1, #0
 80117a6:	d0fa      	beq.n	801179e <__kernel_rem_pio2+0x35e>
 80117a8:	9a08      	ldr	r2, [sp, #32]
 80117aa:	4422      	add	r2, r4
 80117ac:	00d2      	lsls	r2, r2, #3
 80117ae:	a922      	add	r1, sp, #136	; 0x88
 80117b0:	18e3      	adds	r3, r4, r3
 80117b2:	9206      	str	r2, [sp, #24]
 80117b4:	440a      	add	r2, r1
 80117b6:	9302      	str	r3, [sp, #8]
 80117b8:	f10b 0108 	add.w	r1, fp, #8
 80117bc:	f102 0308 	add.w	r3, r2, #8
 80117c0:	1c66      	adds	r6, r4, #1
 80117c2:	910a      	str	r1, [sp, #40]	; 0x28
 80117c4:	2500      	movs	r5, #0
 80117c6:	930d      	str	r3, [sp, #52]	; 0x34
 80117c8:	9b02      	ldr	r3, [sp, #8]
 80117ca:	42b3      	cmp	r3, r6
 80117cc:	da04      	bge.n	80117d8 <__kernel_rem_pio2+0x398>
 80117ce:	461c      	mov	r4, r3
 80117d0:	e6a6      	b.n	8011520 <__kernel_rem_pio2+0xe0>
 80117d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117d4:	2301      	movs	r3, #1
 80117d6:	e7e3      	b.n	80117a0 <__kernel_rem_pio2+0x360>
 80117d8:	9b06      	ldr	r3, [sp, #24]
 80117da:	18ef      	adds	r7, r5, r3
 80117dc:	ab22      	add	r3, sp, #136	; 0x88
 80117de:	441f      	add	r7, r3
 80117e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80117e6:	f7ee feb5 	bl	8000554 <__aeabi_i2d>
 80117ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ec:	461c      	mov	r4, r3
 80117ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117f0:	e9c7 0100 	strd	r0, r1, [r7]
 80117f4:	eb03 0b05 	add.w	fp, r3, r5
 80117f8:	2700      	movs	r7, #0
 80117fa:	f04f 0800 	mov.w	r8, #0
 80117fe:	f04f 0900 	mov.w	r9, #0
 8011802:	9b07      	ldr	r3, [sp, #28]
 8011804:	429f      	cmp	r7, r3
 8011806:	dd08      	ble.n	801181a <__kernel_rem_pio2+0x3da>
 8011808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801180a:	aa72      	add	r2, sp, #456	; 0x1c8
 801180c:	18eb      	adds	r3, r5, r3
 801180e:	4413      	add	r3, r2
 8011810:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011814:	3601      	adds	r6, #1
 8011816:	3508      	adds	r5, #8
 8011818:	e7d6      	b.n	80117c8 <__kernel_rem_pio2+0x388>
 801181a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801181e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011822:	f7ee ff01 	bl	8000628 <__aeabi_dmul>
 8011826:	4602      	mov	r2, r0
 8011828:	460b      	mov	r3, r1
 801182a:	4640      	mov	r0, r8
 801182c:	4649      	mov	r1, r9
 801182e:	f7ee fd45 	bl	80002bc <__adddf3>
 8011832:	3701      	adds	r7, #1
 8011834:	4680      	mov	r8, r0
 8011836:	4689      	mov	r9, r1
 8011838:	e7e3      	b.n	8011802 <__kernel_rem_pio2+0x3c2>
 801183a:	3d01      	subs	r5, #1
 801183c:	e741      	b.n	80116c2 <__kernel_rem_pio2+0x282>
 801183e:	f1ca 0000 	rsb	r0, sl, #0
 8011842:	ec47 6b10 	vmov	d0, r6, r7
 8011846:	f000 fa83 	bl	8011d50 <scalbn>
 801184a:	ec57 6b10 	vmov	r6, r7, d0
 801184e:	2200      	movs	r2, #0
 8011850:	4b99      	ldr	r3, [pc, #612]	; (8011ab8 <__kernel_rem_pio2+0x678>)
 8011852:	ee10 0a10 	vmov	r0, s0
 8011856:	4639      	mov	r1, r7
 8011858:	f7ef f96c 	bl	8000b34 <__aeabi_dcmpge>
 801185c:	b1f8      	cbz	r0, 801189e <__kernel_rem_pio2+0x45e>
 801185e:	2200      	movs	r2, #0
 8011860:	4b96      	ldr	r3, [pc, #600]	; (8011abc <__kernel_rem_pio2+0x67c>)
 8011862:	4630      	mov	r0, r6
 8011864:	4639      	mov	r1, r7
 8011866:	f7ee fedf 	bl	8000628 <__aeabi_dmul>
 801186a:	f7ef f98d 	bl	8000b88 <__aeabi_d2iz>
 801186e:	4680      	mov	r8, r0
 8011870:	f7ee fe70 	bl	8000554 <__aeabi_i2d>
 8011874:	2200      	movs	r2, #0
 8011876:	4b90      	ldr	r3, [pc, #576]	; (8011ab8 <__kernel_rem_pio2+0x678>)
 8011878:	f7ee fed6 	bl	8000628 <__aeabi_dmul>
 801187c:	460b      	mov	r3, r1
 801187e:	4602      	mov	r2, r0
 8011880:	4639      	mov	r1, r7
 8011882:	4630      	mov	r0, r6
 8011884:	f7ee fd18 	bl	80002b8 <__aeabi_dsub>
 8011888:	f7ef f97e 	bl	8000b88 <__aeabi_d2iz>
 801188c:	1c65      	adds	r5, r4, #1
 801188e:	ab0e      	add	r3, sp, #56	; 0x38
 8011890:	f10a 0a18 	add.w	sl, sl, #24
 8011894:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011898:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801189c:	e719      	b.n	80116d2 <__kernel_rem_pio2+0x292>
 801189e:	4630      	mov	r0, r6
 80118a0:	4639      	mov	r1, r7
 80118a2:	f7ef f971 	bl	8000b88 <__aeabi_d2iz>
 80118a6:	ab0e      	add	r3, sp, #56	; 0x38
 80118a8:	4625      	mov	r5, r4
 80118aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80118ae:	e710      	b.n	80116d2 <__kernel_rem_pio2+0x292>
 80118b0:	ab0e      	add	r3, sp, #56	; 0x38
 80118b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80118b6:	f7ee fe4d 	bl	8000554 <__aeabi_i2d>
 80118ba:	4642      	mov	r2, r8
 80118bc:	464b      	mov	r3, r9
 80118be:	f7ee feb3 	bl	8000628 <__aeabi_dmul>
 80118c2:	2200      	movs	r2, #0
 80118c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80118c8:	4b7c      	ldr	r3, [pc, #496]	; (8011abc <__kernel_rem_pio2+0x67c>)
 80118ca:	4640      	mov	r0, r8
 80118cc:	4649      	mov	r1, r9
 80118ce:	f7ee feab 	bl	8000628 <__aeabi_dmul>
 80118d2:	3f01      	subs	r7, #1
 80118d4:	4680      	mov	r8, r0
 80118d6:	4689      	mov	r9, r1
 80118d8:	e708      	b.n	80116ec <__kernel_rem_pio2+0x2ac>
 80118da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80118de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80118e6:	f7ee fe9f 	bl	8000628 <__aeabi_dmul>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	4640      	mov	r0, r8
 80118f0:	4649      	mov	r1, r9
 80118f2:	f7ee fce3 	bl	80002bc <__adddf3>
 80118f6:	3701      	adds	r7, #1
 80118f8:	4680      	mov	r8, r0
 80118fa:	4689      	mov	r9, r1
 80118fc:	9b04      	ldr	r3, [sp, #16]
 80118fe:	429f      	cmp	r7, r3
 8011900:	dc01      	bgt.n	8011906 <__kernel_rem_pio2+0x4c6>
 8011902:	45ba      	cmp	sl, r7
 8011904:	dae9      	bge.n	80118da <__kernel_rem_pio2+0x49a>
 8011906:	ab4a      	add	r3, sp, #296	; 0x128
 8011908:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801190c:	e9c3 8900 	strd	r8, r9, [r3]
 8011910:	f10a 0a01 	add.w	sl, sl, #1
 8011914:	3e08      	subs	r6, #8
 8011916:	e6f0      	b.n	80116fa <__kernel_rem_pio2+0x2ba>
 8011918:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801191a:	2b03      	cmp	r3, #3
 801191c:	d85b      	bhi.n	80119d6 <__kernel_rem_pio2+0x596>
 801191e:	e8df f003 	tbb	[pc, r3]
 8011922:	264a      	.short	0x264a
 8011924:	0226      	.short	0x0226
 8011926:	ab9a      	add	r3, sp, #616	; 0x268
 8011928:	441c      	add	r4, r3
 801192a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801192e:	46a2      	mov	sl, r4
 8011930:	46ab      	mov	fp, r5
 8011932:	f1bb 0f00 	cmp.w	fp, #0
 8011936:	dc6c      	bgt.n	8011a12 <__kernel_rem_pio2+0x5d2>
 8011938:	46a2      	mov	sl, r4
 801193a:	46ab      	mov	fp, r5
 801193c:	f1bb 0f01 	cmp.w	fp, #1
 8011940:	f300 8086 	bgt.w	8011a50 <__kernel_rem_pio2+0x610>
 8011944:	2000      	movs	r0, #0
 8011946:	2100      	movs	r1, #0
 8011948:	2d01      	cmp	r5, #1
 801194a:	f300 80a0 	bgt.w	8011a8e <__kernel_rem_pio2+0x64e>
 801194e:	9b02      	ldr	r3, [sp, #8]
 8011950:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011954:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011958:	2b00      	cmp	r3, #0
 801195a:	f040 809e 	bne.w	8011a9a <__kernel_rem_pio2+0x65a>
 801195e:	9b01      	ldr	r3, [sp, #4]
 8011960:	e9c3 7800 	strd	r7, r8, [r3]
 8011964:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011968:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801196c:	e033      	b.n	80119d6 <__kernel_rem_pio2+0x596>
 801196e:	3408      	adds	r4, #8
 8011970:	ab4a      	add	r3, sp, #296	; 0x128
 8011972:	441c      	add	r4, r3
 8011974:	462e      	mov	r6, r5
 8011976:	2000      	movs	r0, #0
 8011978:	2100      	movs	r1, #0
 801197a:	2e00      	cmp	r6, #0
 801197c:	da3a      	bge.n	80119f4 <__kernel_rem_pio2+0x5b4>
 801197e:	9b02      	ldr	r3, [sp, #8]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d03d      	beq.n	8011a00 <__kernel_rem_pio2+0x5c0>
 8011984:	4602      	mov	r2, r0
 8011986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801198a:	9c01      	ldr	r4, [sp, #4]
 801198c:	e9c4 2300 	strd	r2, r3, [r4]
 8011990:	4602      	mov	r2, r0
 8011992:	460b      	mov	r3, r1
 8011994:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011998:	f7ee fc8e 	bl	80002b8 <__aeabi_dsub>
 801199c:	ae4c      	add	r6, sp, #304	; 0x130
 801199e:	2401      	movs	r4, #1
 80119a0:	42a5      	cmp	r5, r4
 80119a2:	da30      	bge.n	8011a06 <__kernel_rem_pio2+0x5c6>
 80119a4:	9b02      	ldr	r3, [sp, #8]
 80119a6:	b113      	cbz	r3, 80119ae <__kernel_rem_pio2+0x56e>
 80119a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119ac:	4619      	mov	r1, r3
 80119ae:	9b01      	ldr	r3, [sp, #4]
 80119b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80119b4:	e00f      	b.n	80119d6 <__kernel_rem_pio2+0x596>
 80119b6:	ab9a      	add	r3, sp, #616	; 0x268
 80119b8:	441c      	add	r4, r3
 80119ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80119be:	2000      	movs	r0, #0
 80119c0:	2100      	movs	r1, #0
 80119c2:	2d00      	cmp	r5, #0
 80119c4:	da10      	bge.n	80119e8 <__kernel_rem_pio2+0x5a8>
 80119c6:	9b02      	ldr	r3, [sp, #8]
 80119c8:	b113      	cbz	r3, 80119d0 <__kernel_rem_pio2+0x590>
 80119ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119ce:	4619      	mov	r1, r3
 80119d0:	9b01      	ldr	r3, [sp, #4]
 80119d2:	e9c3 0100 	strd	r0, r1, [r3]
 80119d6:	9b06      	ldr	r3, [sp, #24]
 80119d8:	f003 0007 	and.w	r0, r3, #7
 80119dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80119e0:	ecbd 8b02 	vpop	{d8}
 80119e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80119ec:	f7ee fc66 	bl	80002bc <__adddf3>
 80119f0:	3d01      	subs	r5, #1
 80119f2:	e7e6      	b.n	80119c2 <__kernel_rem_pio2+0x582>
 80119f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80119f8:	f7ee fc60 	bl	80002bc <__adddf3>
 80119fc:	3e01      	subs	r6, #1
 80119fe:	e7bc      	b.n	801197a <__kernel_rem_pio2+0x53a>
 8011a00:	4602      	mov	r2, r0
 8011a02:	460b      	mov	r3, r1
 8011a04:	e7c1      	b.n	801198a <__kernel_rem_pio2+0x54a>
 8011a06:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011a0a:	f7ee fc57 	bl	80002bc <__adddf3>
 8011a0e:	3401      	adds	r4, #1
 8011a10:	e7c6      	b.n	80119a0 <__kernel_rem_pio2+0x560>
 8011a12:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011a16:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011a1a:	4640      	mov	r0, r8
 8011a1c:	ec53 2b17 	vmov	r2, r3, d7
 8011a20:	4649      	mov	r1, r9
 8011a22:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a26:	f7ee fc49 	bl	80002bc <__adddf3>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	4606      	mov	r6, r0
 8011a30:	460f      	mov	r7, r1
 8011a32:	4640      	mov	r0, r8
 8011a34:	4649      	mov	r1, r9
 8011a36:	f7ee fc3f 	bl	80002b8 <__aeabi_dsub>
 8011a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a3e:	f7ee fc3d 	bl	80002bc <__adddf3>
 8011a42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a46:	e9ca 0100 	strd	r0, r1, [sl]
 8011a4a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011a4e:	e770      	b.n	8011932 <__kernel_rem_pio2+0x4f2>
 8011a50:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011a54:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011a58:	4630      	mov	r0, r6
 8011a5a:	ec53 2b17 	vmov	r2, r3, d7
 8011a5e:	4639      	mov	r1, r7
 8011a60:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a64:	f7ee fc2a 	bl	80002bc <__adddf3>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	4680      	mov	r8, r0
 8011a6e:	4689      	mov	r9, r1
 8011a70:	4630      	mov	r0, r6
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ee fc20 	bl	80002b8 <__aeabi_dsub>
 8011a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a7c:	f7ee fc1e 	bl	80002bc <__adddf3>
 8011a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a84:	e9ca 0100 	strd	r0, r1, [sl]
 8011a88:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011a8c:	e756      	b.n	801193c <__kernel_rem_pio2+0x4fc>
 8011a8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011a92:	f7ee fc13 	bl	80002bc <__adddf3>
 8011a96:	3d01      	subs	r5, #1
 8011a98:	e756      	b.n	8011948 <__kernel_rem_pio2+0x508>
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	9a01      	ldr	r2, [sp, #4]
 8011a9e:	601f      	str	r7, [r3, #0]
 8011aa0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011aa4:	605c      	str	r4, [r3, #4]
 8011aa6:	609d      	str	r5, [r3, #8]
 8011aa8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011aac:	60d3      	str	r3, [r2, #12]
 8011aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ab2:	6110      	str	r0, [r2, #16]
 8011ab4:	6153      	str	r3, [r2, #20]
 8011ab6:	e78e      	b.n	80119d6 <__kernel_rem_pio2+0x596>
 8011ab8:	41700000 	.word	0x41700000
 8011abc:	3e700000 	.word	0x3e700000

08011ac0 <__kernel_sin>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	ec55 4b10 	vmov	r4, r5, d0
 8011ac8:	b085      	sub	sp, #20
 8011aca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011ace:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011ad2:	ed8d 1b00 	vstr	d1, [sp]
 8011ad6:	9002      	str	r0, [sp, #8]
 8011ad8:	da06      	bge.n	8011ae8 <__kernel_sin+0x28>
 8011ada:	ee10 0a10 	vmov	r0, s0
 8011ade:	4629      	mov	r1, r5
 8011ae0:	f7ef f852 	bl	8000b88 <__aeabi_d2iz>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d051      	beq.n	8011b8c <__kernel_sin+0xcc>
 8011ae8:	4622      	mov	r2, r4
 8011aea:	462b      	mov	r3, r5
 8011aec:	4620      	mov	r0, r4
 8011aee:	4629      	mov	r1, r5
 8011af0:	f7ee fd9a 	bl	8000628 <__aeabi_dmul>
 8011af4:	4682      	mov	sl, r0
 8011af6:	468b      	mov	fp, r1
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	4620      	mov	r0, r4
 8011afe:	4629      	mov	r1, r5
 8011b00:	f7ee fd92 	bl	8000628 <__aeabi_dmul>
 8011b04:	a341      	add	r3, pc, #260	; (adr r3, 8011c0c <__kernel_sin+0x14c>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	4680      	mov	r8, r0
 8011b0c:	4689      	mov	r9, r1
 8011b0e:	4650      	mov	r0, sl
 8011b10:	4659      	mov	r1, fp
 8011b12:	f7ee fd89 	bl	8000628 <__aeabi_dmul>
 8011b16:	a33f      	add	r3, pc, #252	; (adr r3, 8011c14 <__kernel_sin+0x154>)
 8011b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1c:	f7ee fbcc 	bl	80002b8 <__aeabi_dsub>
 8011b20:	4652      	mov	r2, sl
 8011b22:	465b      	mov	r3, fp
 8011b24:	f7ee fd80 	bl	8000628 <__aeabi_dmul>
 8011b28:	a33c      	add	r3, pc, #240	; (adr r3, 8011c1c <__kernel_sin+0x15c>)
 8011b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2e:	f7ee fbc5 	bl	80002bc <__adddf3>
 8011b32:	4652      	mov	r2, sl
 8011b34:	465b      	mov	r3, fp
 8011b36:	f7ee fd77 	bl	8000628 <__aeabi_dmul>
 8011b3a:	a33a      	add	r3, pc, #232	; (adr r3, 8011c24 <__kernel_sin+0x164>)
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	f7ee fbba 	bl	80002b8 <__aeabi_dsub>
 8011b44:	4652      	mov	r2, sl
 8011b46:	465b      	mov	r3, fp
 8011b48:	f7ee fd6e 	bl	8000628 <__aeabi_dmul>
 8011b4c:	a337      	add	r3, pc, #220	; (adr r3, 8011c2c <__kernel_sin+0x16c>)
 8011b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b52:	f7ee fbb3 	bl	80002bc <__adddf3>
 8011b56:	9b02      	ldr	r3, [sp, #8]
 8011b58:	4606      	mov	r6, r0
 8011b5a:	460f      	mov	r7, r1
 8011b5c:	b9db      	cbnz	r3, 8011b96 <__kernel_sin+0xd6>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	460b      	mov	r3, r1
 8011b62:	4650      	mov	r0, sl
 8011b64:	4659      	mov	r1, fp
 8011b66:	f7ee fd5f 	bl	8000628 <__aeabi_dmul>
 8011b6a:	a325      	add	r3, pc, #148	; (adr r3, 8011c00 <__kernel_sin+0x140>)
 8011b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b70:	f7ee fba2 	bl	80002b8 <__aeabi_dsub>
 8011b74:	4642      	mov	r2, r8
 8011b76:	464b      	mov	r3, r9
 8011b78:	f7ee fd56 	bl	8000628 <__aeabi_dmul>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	4620      	mov	r0, r4
 8011b82:	4629      	mov	r1, r5
 8011b84:	f7ee fb9a 	bl	80002bc <__adddf3>
 8011b88:	4604      	mov	r4, r0
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	ec45 4b10 	vmov	d0, r4, r5
 8011b90:	b005      	add	sp, #20
 8011b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b96:	2200      	movs	r2, #0
 8011b98:	4b1b      	ldr	r3, [pc, #108]	; (8011c08 <__kernel_sin+0x148>)
 8011b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b9e:	f7ee fd43 	bl	8000628 <__aeabi_dmul>
 8011ba2:	4632      	mov	r2, r6
 8011ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ba8:	463b      	mov	r3, r7
 8011baa:	4640      	mov	r0, r8
 8011bac:	4649      	mov	r1, r9
 8011bae:	f7ee fd3b 	bl	8000628 <__aeabi_dmul>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bba:	f7ee fb7d 	bl	80002b8 <__aeabi_dsub>
 8011bbe:	4652      	mov	r2, sl
 8011bc0:	465b      	mov	r3, fp
 8011bc2:	f7ee fd31 	bl	8000628 <__aeabi_dmul>
 8011bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bca:	f7ee fb75 	bl	80002b8 <__aeabi_dsub>
 8011bce:	a30c      	add	r3, pc, #48	; (adr r3, 8011c00 <__kernel_sin+0x140>)
 8011bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd4:	4606      	mov	r6, r0
 8011bd6:	460f      	mov	r7, r1
 8011bd8:	4640      	mov	r0, r8
 8011bda:	4649      	mov	r1, r9
 8011bdc:	f7ee fd24 	bl	8000628 <__aeabi_dmul>
 8011be0:	4602      	mov	r2, r0
 8011be2:	460b      	mov	r3, r1
 8011be4:	4630      	mov	r0, r6
 8011be6:	4639      	mov	r1, r7
 8011be8:	f7ee fb68 	bl	80002bc <__adddf3>
 8011bec:	4602      	mov	r2, r0
 8011bee:	460b      	mov	r3, r1
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	f7ee fb60 	bl	80002b8 <__aeabi_dsub>
 8011bf8:	e7c6      	b.n	8011b88 <__kernel_sin+0xc8>
 8011bfa:	bf00      	nop
 8011bfc:	f3af 8000 	nop.w
 8011c00:	55555549 	.word	0x55555549
 8011c04:	3fc55555 	.word	0x3fc55555
 8011c08:	3fe00000 	.word	0x3fe00000
 8011c0c:	5acfd57c 	.word	0x5acfd57c
 8011c10:	3de5d93a 	.word	0x3de5d93a
 8011c14:	8a2b9ceb 	.word	0x8a2b9ceb
 8011c18:	3e5ae5e6 	.word	0x3e5ae5e6
 8011c1c:	57b1fe7d 	.word	0x57b1fe7d
 8011c20:	3ec71de3 	.word	0x3ec71de3
 8011c24:	19c161d5 	.word	0x19c161d5
 8011c28:	3f2a01a0 	.word	0x3f2a01a0
 8011c2c:	1110f8a6 	.word	0x1110f8a6
 8011c30:	3f811111 	.word	0x3f811111

08011c34 <fabs>:
 8011c34:	ec51 0b10 	vmov	r0, r1, d0
 8011c38:	ee10 2a10 	vmov	r2, s0
 8011c3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c40:	ec43 2b10 	vmov	d0, r2, r3
 8011c44:	4770      	bx	lr
	...

08011c48 <floor>:
 8011c48:	ec51 0b10 	vmov	r0, r1, d0
 8011c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011c54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011c58:	2e13      	cmp	r6, #19
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	ee10 5a10 	vmov	r5, s0
 8011c60:	4680      	mov	r8, r0
 8011c62:	dc34      	bgt.n	8011cce <floor+0x86>
 8011c64:	2e00      	cmp	r6, #0
 8011c66:	da16      	bge.n	8011c96 <floor+0x4e>
 8011c68:	a335      	add	r3, pc, #212	; (adr r3, 8011d40 <floor+0xf8>)
 8011c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6e:	f7ee fb25 	bl	80002bc <__adddf3>
 8011c72:	2200      	movs	r2, #0
 8011c74:	2300      	movs	r3, #0
 8011c76:	f7ee ff67 	bl	8000b48 <__aeabi_dcmpgt>
 8011c7a:	b148      	cbz	r0, 8011c90 <floor+0x48>
 8011c7c:	2c00      	cmp	r4, #0
 8011c7e:	da59      	bge.n	8011d34 <floor+0xec>
 8011c80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011c84:	4a30      	ldr	r2, [pc, #192]	; (8011d48 <floor+0x100>)
 8011c86:	432b      	orrs	r3, r5
 8011c88:	2500      	movs	r5, #0
 8011c8a:	42ab      	cmp	r3, r5
 8011c8c:	bf18      	it	ne
 8011c8e:	4614      	movne	r4, r2
 8011c90:	4621      	mov	r1, r4
 8011c92:	4628      	mov	r0, r5
 8011c94:	e025      	b.n	8011ce2 <floor+0x9a>
 8011c96:	4f2d      	ldr	r7, [pc, #180]	; (8011d4c <floor+0x104>)
 8011c98:	4137      	asrs	r7, r6
 8011c9a:	ea01 0307 	and.w	r3, r1, r7
 8011c9e:	4303      	orrs	r3, r0
 8011ca0:	d01f      	beq.n	8011ce2 <floor+0x9a>
 8011ca2:	a327      	add	r3, pc, #156	; (adr r3, 8011d40 <floor+0xf8>)
 8011ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca8:	f7ee fb08 	bl	80002bc <__adddf3>
 8011cac:	2200      	movs	r2, #0
 8011cae:	2300      	movs	r3, #0
 8011cb0:	f7ee ff4a 	bl	8000b48 <__aeabi_dcmpgt>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d0eb      	beq.n	8011c90 <floor+0x48>
 8011cb8:	2c00      	cmp	r4, #0
 8011cba:	bfbe      	ittt	lt
 8011cbc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011cc0:	fa43 f606 	asrlt.w	r6, r3, r6
 8011cc4:	19a4      	addlt	r4, r4, r6
 8011cc6:	ea24 0407 	bic.w	r4, r4, r7
 8011cca:	2500      	movs	r5, #0
 8011ccc:	e7e0      	b.n	8011c90 <floor+0x48>
 8011cce:	2e33      	cmp	r6, #51	; 0x33
 8011cd0:	dd0b      	ble.n	8011cea <floor+0xa2>
 8011cd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011cd6:	d104      	bne.n	8011ce2 <floor+0x9a>
 8011cd8:	ee10 2a10 	vmov	r2, s0
 8011cdc:	460b      	mov	r3, r1
 8011cde:	f7ee faed 	bl	80002bc <__adddf3>
 8011ce2:	ec41 0b10 	vmov	d0, r0, r1
 8011ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011cee:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf2:	fa23 f707 	lsr.w	r7, r3, r7
 8011cf6:	4207      	tst	r7, r0
 8011cf8:	d0f3      	beq.n	8011ce2 <floor+0x9a>
 8011cfa:	a311      	add	r3, pc, #68	; (adr r3, 8011d40 <floor+0xf8>)
 8011cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d00:	f7ee fadc 	bl	80002bc <__adddf3>
 8011d04:	2200      	movs	r2, #0
 8011d06:	2300      	movs	r3, #0
 8011d08:	f7ee ff1e 	bl	8000b48 <__aeabi_dcmpgt>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d0bf      	beq.n	8011c90 <floor+0x48>
 8011d10:	2c00      	cmp	r4, #0
 8011d12:	da02      	bge.n	8011d1a <floor+0xd2>
 8011d14:	2e14      	cmp	r6, #20
 8011d16:	d103      	bne.n	8011d20 <floor+0xd8>
 8011d18:	3401      	adds	r4, #1
 8011d1a:	ea25 0507 	bic.w	r5, r5, r7
 8011d1e:	e7b7      	b.n	8011c90 <floor+0x48>
 8011d20:	2301      	movs	r3, #1
 8011d22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011d26:	fa03 f606 	lsl.w	r6, r3, r6
 8011d2a:	4435      	add	r5, r6
 8011d2c:	4545      	cmp	r5, r8
 8011d2e:	bf38      	it	cc
 8011d30:	18e4      	addcc	r4, r4, r3
 8011d32:	e7f2      	b.n	8011d1a <floor+0xd2>
 8011d34:	2500      	movs	r5, #0
 8011d36:	462c      	mov	r4, r5
 8011d38:	e7aa      	b.n	8011c90 <floor+0x48>
 8011d3a:	bf00      	nop
 8011d3c:	f3af 8000 	nop.w
 8011d40:	8800759c 	.word	0x8800759c
 8011d44:	7e37e43c 	.word	0x7e37e43c
 8011d48:	bff00000 	.word	0xbff00000
 8011d4c:	000fffff 	.word	0x000fffff

08011d50 <scalbn>:
 8011d50:	b570      	push	{r4, r5, r6, lr}
 8011d52:	ec55 4b10 	vmov	r4, r5, d0
 8011d56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	462b      	mov	r3, r5
 8011d5e:	b9aa      	cbnz	r2, 8011d8c <scalbn+0x3c>
 8011d60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011d64:	4323      	orrs	r3, r4
 8011d66:	d03b      	beq.n	8011de0 <scalbn+0x90>
 8011d68:	4b31      	ldr	r3, [pc, #196]	; (8011e30 <scalbn+0xe0>)
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	ee10 0a10 	vmov	r0, s0
 8011d72:	f7ee fc59 	bl	8000628 <__aeabi_dmul>
 8011d76:	4b2f      	ldr	r3, [pc, #188]	; (8011e34 <scalbn+0xe4>)
 8011d78:	429e      	cmp	r6, r3
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	460d      	mov	r5, r1
 8011d7e:	da12      	bge.n	8011da6 <scalbn+0x56>
 8011d80:	a327      	add	r3, pc, #156	; (adr r3, 8011e20 <scalbn+0xd0>)
 8011d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d86:	f7ee fc4f 	bl	8000628 <__aeabi_dmul>
 8011d8a:	e009      	b.n	8011da0 <scalbn+0x50>
 8011d8c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011d90:	428a      	cmp	r2, r1
 8011d92:	d10c      	bne.n	8011dae <scalbn+0x5e>
 8011d94:	ee10 2a10 	vmov	r2, s0
 8011d98:	4620      	mov	r0, r4
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	f7ee fa8e 	bl	80002bc <__adddf3>
 8011da0:	4604      	mov	r4, r0
 8011da2:	460d      	mov	r5, r1
 8011da4:	e01c      	b.n	8011de0 <scalbn+0x90>
 8011da6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011daa:	460b      	mov	r3, r1
 8011dac:	3a36      	subs	r2, #54	; 0x36
 8011dae:	4432      	add	r2, r6
 8011db0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011db4:	428a      	cmp	r2, r1
 8011db6:	dd0b      	ble.n	8011dd0 <scalbn+0x80>
 8011db8:	ec45 4b11 	vmov	d1, r4, r5
 8011dbc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011e28 <scalbn+0xd8>
 8011dc0:	f000 f83c 	bl	8011e3c <copysign>
 8011dc4:	a318      	add	r3, pc, #96	; (adr r3, 8011e28 <scalbn+0xd8>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	ec51 0b10 	vmov	r0, r1, d0
 8011dce:	e7da      	b.n	8011d86 <scalbn+0x36>
 8011dd0:	2a00      	cmp	r2, #0
 8011dd2:	dd08      	ble.n	8011de6 <scalbn+0x96>
 8011dd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011dd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ddc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011de0:	ec45 4b10 	vmov	d0, r4, r5
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011dea:	da0d      	bge.n	8011e08 <scalbn+0xb8>
 8011dec:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011df0:	429e      	cmp	r6, r3
 8011df2:	ec45 4b11 	vmov	d1, r4, r5
 8011df6:	dce1      	bgt.n	8011dbc <scalbn+0x6c>
 8011df8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011e20 <scalbn+0xd0>
 8011dfc:	f000 f81e 	bl	8011e3c <copysign>
 8011e00:	a307      	add	r3, pc, #28	; (adr r3, 8011e20 <scalbn+0xd0>)
 8011e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e06:	e7e0      	b.n	8011dca <scalbn+0x7a>
 8011e08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e0c:	3236      	adds	r2, #54	; 0x36
 8011e0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e16:	4620      	mov	r0, r4
 8011e18:	4629      	mov	r1, r5
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <scalbn+0xe8>)
 8011e1e:	e7b2      	b.n	8011d86 <scalbn+0x36>
 8011e20:	c2f8f359 	.word	0xc2f8f359
 8011e24:	01a56e1f 	.word	0x01a56e1f
 8011e28:	8800759c 	.word	0x8800759c
 8011e2c:	7e37e43c 	.word	0x7e37e43c
 8011e30:	43500000 	.word	0x43500000
 8011e34:	ffff3cb0 	.word	0xffff3cb0
 8011e38:	3c900000 	.word	0x3c900000

08011e3c <copysign>:
 8011e3c:	ec51 0b10 	vmov	r0, r1, d0
 8011e40:	ee11 0a90 	vmov	r0, s3
 8011e44:	ee10 2a10 	vmov	r2, s0
 8011e48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011e50:	ea41 0300 	orr.w	r3, r1, r0
 8011e54:	ec43 2b10 	vmov	d0, r2, r3
 8011e58:	4770      	bx	lr
	...

08011e5c <__errno>:
 8011e5c:	4b01      	ldr	r3, [pc, #4]	; (8011e64 <__errno+0x8>)
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	2000000c 	.word	0x2000000c

08011e68 <__libc_init_array>:
 8011e68:	b570      	push	{r4, r5, r6, lr}
 8011e6a:	4e0d      	ldr	r6, [pc, #52]	; (8011ea0 <__libc_init_array+0x38>)
 8011e6c:	4c0d      	ldr	r4, [pc, #52]	; (8011ea4 <__libc_init_array+0x3c>)
 8011e6e:	1ba4      	subs	r4, r4, r6
 8011e70:	10a4      	asrs	r4, r4, #2
 8011e72:	2500      	movs	r5, #0
 8011e74:	42a5      	cmp	r5, r4
 8011e76:	d109      	bne.n	8011e8c <__libc_init_array+0x24>
 8011e78:	4e0b      	ldr	r6, [pc, #44]	; (8011ea8 <__libc_init_array+0x40>)
 8011e7a:	4c0c      	ldr	r4, [pc, #48]	; (8011eac <__libc_init_array+0x44>)
 8011e7c:	f004 ff36 	bl	8016cec <_init>
 8011e80:	1ba4      	subs	r4, r4, r6
 8011e82:	10a4      	asrs	r4, r4, #2
 8011e84:	2500      	movs	r5, #0
 8011e86:	42a5      	cmp	r5, r4
 8011e88:	d105      	bne.n	8011e96 <__libc_init_array+0x2e>
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
 8011e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e90:	4798      	blx	r3
 8011e92:	3501      	adds	r5, #1
 8011e94:	e7ee      	b.n	8011e74 <__libc_init_array+0xc>
 8011e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e9a:	4798      	blx	r3
 8011e9c:	3501      	adds	r5, #1
 8011e9e:	e7f2      	b.n	8011e86 <__libc_init_array+0x1e>
 8011ea0:	08017854 	.word	0x08017854
 8011ea4:	08017854 	.word	0x08017854
 8011ea8:	08017854 	.word	0x08017854
 8011eac:	0801785c 	.word	0x0801785c

08011eb0 <memset>:
 8011eb0:	4402      	add	r2, r0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d100      	bne.n	8011eba <memset+0xa>
 8011eb8:	4770      	bx	lr
 8011eba:	f803 1b01 	strb.w	r1, [r3], #1
 8011ebe:	e7f9      	b.n	8011eb4 <memset+0x4>

08011ec0 <__cvt>:
 8011ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec4:	ec55 4b10 	vmov	r4, r5, d0
 8011ec8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011eca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ece:	2d00      	cmp	r5, #0
 8011ed0:	460e      	mov	r6, r1
 8011ed2:	4691      	mov	r9, r2
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	bfb8      	it	lt
 8011ed8:	4622      	movlt	r2, r4
 8011eda:	462b      	mov	r3, r5
 8011edc:	f027 0720 	bic.w	r7, r7, #32
 8011ee0:	bfbb      	ittet	lt
 8011ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011ee6:	461d      	movlt	r5, r3
 8011ee8:	2300      	movge	r3, #0
 8011eea:	232d      	movlt	r3, #45	; 0x2d
 8011eec:	bfb8      	it	lt
 8011eee:	4614      	movlt	r4, r2
 8011ef0:	2f46      	cmp	r7, #70	; 0x46
 8011ef2:	700b      	strb	r3, [r1, #0]
 8011ef4:	d004      	beq.n	8011f00 <__cvt+0x40>
 8011ef6:	2f45      	cmp	r7, #69	; 0x45
 8011ef8:	d100      	bne.n	8011efc <__cvt+0x3c>
 8011efa:	3601      	adds	r6, #1
 8011efc:	2102      	movs	r1, #2
 8011efe:	e000      	b.n	8011f02 <__cvt+0x42>
 8011f00:	2103      	movs	r1, #3
 8011f02:	ab03      	add	r3, sp, #12
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	ab02      	add	r3, sp, #8
 8011f08:	9300      	str	r3, [sp, #0]
 8011f0a:	4632      	mov	r2, r6
 8011f0c:	4653      	mov	r3, sl
 8011f0e:	ec45 4b10 	vmov	d0, r4, r5
 8011f12:	f001 ffb1 	bl	8013e78 <_dtoa_r>
 8011f16:	2f47      	cmp	r7, #71	; 0x47
 8011f18:	4680      	mov	r8, r0
 8011f1a:	d102      	bne.n	8011f22 <__cvt+0x62>
 8011f1c:	f019 0f01 	tst.w	r9, #1
 8011f20:	d026      	beq.n	8011f70 <__cvt+0xb0>
 8011f22:	2f46      	cmp	r7, #70	; 0x46
 8011f24:	eb08 0906 	add.w	r9, r8, r6
 8011f28:	d111      	bne.n	8011f4e <__cvt+0x8e>
 8011f2a:	f898 3000 	ldrb.w	r3, [r8]
 8011f2e:	2b30      	cmp	r3, #48	; 0x30
 8011f30:	d10a      	bne.n	8011f48 <__cvt+0x88>
 8011f32:	2200      	movs	r2, #0
 8011f34:	2300      	movs	r3, #0
 8011f36:	4620      	mov	r0, r4
 8011f38:	4629      	mov	r1, r5
 8011f3a:	f7ee fddd 	bl	8000af8 <__aeabi_dcmpeq>
 8011f3e:	b918      	cbnz	r0, 8011f48 <__cvt+0x88>
 8011f40:	f1c6 0601 	rsb	r6, r6, #1
 8011f44:	f8ca 6000 	str.w	r6, [sl]
 8011f48:	f8da 3000 	ldr.w	r3, [sl]
 8011f4c:	4499      	add	r9, r3
 8011f4e:	2200      	movs	r2, #0
 8011f50:	2300      	movs	r3, #0
 8011f52:	4620      	mov	r0, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	f7ee fdcf 	bl	8000af8 <__aeabi_dcmpeq>
 8011f5a:	b938      	cbnz	r0, 8011f6c <__cvt+0xac>
 8011f5c:	2230      	movs	r2, #48	; 0x30
 8011f5e:	9b03      	ldr	r3, [sp, #12]
 8011f60:	454b      	cmp	r3, r9
 8011f62:	d205      	bcs.n	8011f70 <__cvt+0xb0>
 8011f64:	1c59      	adds	r1, r3, #1
 8011f66:	9103      	str	r1, [sp, #12]
 8011f68:	701a      	strb	r2, [r3, #0]
 8011f6a:	e7f8      	b.n	8011f5e <__cvt+0x9e>
 8011f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f70:	9b03      	ldr	r3, [sp, #12]
 8011f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f74:	eba3 0308 	sub.w	r3, r3, r8
 8011f78:	4640      	mov	r0, r8
 8011f7a:	6013      	str	r3, [r2, #0]
 8011f7c:	b004      	add	sp, #16
 8011f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011f82 <__exponent>:
 8011f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f84:	2900      	cmp	r1, #0
 8011f86:	4604      	mov	r4, r0
 8011f88:	bfba      	itte	lt
 8011f8a:	4249      	neglt	r1, r1
 8011f8c:	232d      	movlt	r3, #45	; 0x2d
 8011f8e:	232b      	movge	r3, #43	; 0x2b
 8011f90:	2909      	cmp	r1, #9
 8011f92:	f804 2b02 	strb.w	r2, [r4], #2
 8011f96:	7043      	strb	r3, [r0, #1]
 8011f98:	dd20      	ble.n	8011fdc <__exponent+0x5a>
 8011f9a:	f10d 0307 	add.w	r3, sp, #7
 8011f9e:	461f      	mov	r7, r3
 8011fa0:	260a      	movs	r6, #10
 8011fa2:	fb91 f5f6 	sdiv	r5, r1, r6
 8011fa6:	fb06 1115 	mls	r1, r6, r5, r1
 8011faa:	3130      	adds	r1, #48	; 0x30
 8011fac:	2d09      	cmp	r5, #9
 8011fae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011fb2:	f103 32ff 	add.w	r2, r3, #4294967295
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	dc09      	bgt.n	8011fce <__exponent+0x4c>
 8011fba:	3130      	adds	r1, #48	; 0x30
 8011fbc:	3b02      	subs	r3, #2
 8011fbe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011fc2:	42bb      	cmp	r3, r7
 8011fc4:	4622      	mov	r2, r4
 8011fc6:	d304      	bcc.n	8011fd2 <__exponent+0x50>
 8011fc8:	1a10      	subs	r0, r2, r0
 8011fca:	b003      	add	sp, #12
 8011fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fce:	4613      	mov	r3, r2
 8011fd0:	e7e7      	b.n	8011fa2 <__exponent+0x20>
 8011fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fd6:	f804 2b01 	strb.w	r2, [r4], #1
 8011fda:	e7f2      	b.n	8011fc2 <__exponent+0x40>
 8011fdc:	2330      	movs	r3, #48	; 0x30
 8011fde:	4419      	add	r1, r3
 8011fe0:	7083      	strb	r3, [r0, #2]
 8011fe2:	1d02      	adds	r2, r0, #4
 8011fe4:	70c1      	strb	r1, [r0, #3]
 8011fe6:	e7ef      	b.n	8011fc8 <__exponent+0x46>

08011fe8 <_printf_float>:
 8011fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fec:	b08d      	sub	sp, #52	; 0x34
 8011fee:	460c      	mov	r4, r1
 8011ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011ff4:	4616      	mov	r6, r2
 8011ff6:	461f      	mov	r7, r3
 8011ff8:	4605      	mov	r5, r0
 8011ffa:	f003 f9a9 	bl	8015350 <_localeconv_r>
 8011ffe:	6803      	ldr	r3, [r0, #0]
 8012000:	9304      	str	r3, [sp, #16]
 8012002:	4618      	mov	r0, r3
 8012004:	f7ee f8fc 	bl	8000200 <strlen>
 8012008:	2300      	movs	r3, #0
 801200a:	930a      	str	r3, [sp, #40]	; 0x28
 801200c:	f8d8 3000 	ldr.w	r3, [r8]
 8012010:	9005      	str	r0, [sp, #20]
 8012012:	3307      	adds	r3, #7
 8012014:	f023 0307 	bic.w	r3, r3, #7
 8012018:	f103 0208 	add.w	r2, r3, #8
 801201c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012020:	f8d4 b000 	ldr.w	fp, [r4]
 8012024:	f8c8 2000 	str.w	r2, [r8]
 8012028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012030:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012034:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012038:	9307      	str	r3, [sp, #28]
 801203a:	f8cd 8018 	str.w	r8, [sp, #24]
 801203e:	f04f 32ff 	mov.w	r2, #4294967295
 8012042:	4ba7      	ldr	r3, [pc, #668]	; (80122e0 <_printf_float+0x2f8>)
 8012044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012048:	f7ee fd88 	bl	8000b5c <__aeabi_dcmpun>
 801204c:	bb70      	cbnz	r0, 80120ac <_printf_float+0xc4>
 801204e:	f04f 32ff 	mov.w	r2, #4294967295
 8012052:	4ba3      	ldr	r3, [pc, #652]	; (80122e0 <_printf_float+0x2f8>)
 8012054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012058:	f7ee fd62 	bl	8000b20 <__aeabi_dcmple>
 801205c:	bb30      	cbnz	r0, 80120ac <_printf_float+0xc4>
 801205e:	2200      	movs	r2, #0
 8012060:	2300      	movs	r3, #0
 8012062:	4640      	mov	r0, r8
 8012064:	4649      	mov	r1, r9
 8012066:	f7ee fd51 	bl	8000b0c <__aeabi_dcmplt>
 801206a:	b110      	cbz	r0, 8012072 <_printf_float+0x8a>
 801206c:	232d      	movs	r3, #45	; 0x2d
 801206e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012072:	4a9c      	ldr	r2, [pc, #624]	; (80122e4 <_printf_float+0x2fc>)
 8012074:	4b9c      	ldr	r3, [pc, #624]	; (80122e8 <_printf_float+0x300>)
 8012076:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801207a:	bf8c      	ite	hi
 801207c:	4690      	movhi	r8, r2
 801207e:	4698      	movls	r8, r3
 8012080:	2303      	movs	r3, #3
 8012082:	f02b 0204 	bic.w	r2, fp, #4
 8012086:	6123      	str	r3, [r4, #16]
 8012088:	6022      	str	r2, [r4, #0]
 801208a:	f04f 0900 	mov.w	r9, #0
 801208e:	9700      	str	r7, [sp, #0]
 8012090:	4633      	mov	r3, r6
 8012092:	aa0b      	add	r2, sp, #44	; 0x2c
 8012094:	4621      	mov	r1, r4
 8012096:	4628      	mov	r0, r5
 8012098:	f000 f9e6 	bl	8012468 <_printf_common>
 801209c:	3001      	adds	r0, #1
 801209e:	f040 808d 	bne.w	80121bc <_printf_float+0x1d4>
 80120a2:	f04f 30ff 	mov.w	r0, #4294967295
 80120a6:	b00d      	add	sp, #52	; 0x34
 80120a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ac:	4642      	mov	r2, r8
 80120ae:	464b      	mov	r3, r9
 80120b0:	4640      	mov	r0, r8
 80120b2:	4649      	mov	r1, r9
 80120b4:	f7ee fd52 	bl	8000b5c <__aeabi_dcmpun>
 80120b8:	b110      	cbz	r0, 80120c0 <_printf_float+0xd8>
 80120ba:	4a8c      	ldr	r2, [pc, #560]	; (80122ec <_printf_float+0x304>)
 80120bc:	4b8c      	ldr	r3, [pc, #560]	; (80122f0 <_printf_float+0x308>)
 80120be:	e7da      	b.n	8012076 <_printf_float+0x8e>
 80120c0:	6861      	ldr	r1, [r4, #4]
 80120c2:	1c4b      	adds	r3, r1, #1
 80120c4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80120c8:	a80a      	add	r0, sp, #40	; 0x28
 80120ca:	d13e      	bne.n	801214a <_printf_float+0x162>
 80120cc:	2306      	movs	r3, #6
 80120ce:	6063      	str	r3, [r4, #4]
 80120d0:	2300      	movs	r3, #0
 80120d2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80120d6:	ab09      	add	r3, sp, #36	; 0x24
 80120d8:	9300      	str	r3, [sp, #0]
 80120da:	ec49 8b10 	vmov	d0, r8, r9
 80120de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80120e2:	6022      	str	r2, [r4, #0]
 80120e4:	f8cd a004 	str.w	sl, [sp, #4]
 80120e8:	6861      	ldr	r1, [r4, #4]
 80120ea:	4628      	mov	r0, r5
 80120ec:	f7ff fee8 	bl	8011ec0 <__cvt>
 80120f0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80120f4:	2b47      	cmp	r3, #71	; 0x47
 80120f6:	4680      	mov	r8, r0
 80120f8:	d109      	bne.n	801210e <_printf_float+0x126>
 80120fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120fc:	1cd8      	adds	r0, r3, #3
 80120fe:	db02      	blt.n	8012106 <_printf_float+0x11e>
 8012100:	6862      	ldr	r2, [r4, #4]
 8012102:	4293      	cmp	r3, r2
 8012104:	dd47      	ble.n	8012196 <_printf_float+0x1ae>
 8012106:	f1aa 0a02 	sub.w	sl, sl, #2
 801210a:	fa5f fa8a 	uxtb.w	sl, sl
 801210e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012114:	d824      	bhi.n	8012160 <_printf_float+0x178>
 8012116:	3901      	subs	r1, #1
 8012118:	4652      	mov	r2, sl
 801211a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801211e:	9109      	str	r1, [sp, #36]	; 0x24
 8012120:	f7ff ff2f 	bl	8011f82 <__exponent>
 8012124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012126:	1813      	adds	r3, r2, r0
 8012128:	2a01      	cmp	r2, #1
 801212a:	4681      	mov	r9, r0
 801212c:	6123      	str	r3, [r4, #16]
 801212e:	dc02      	bgt.n	8012136 <_printf_float+0x14e>
 8012130:	6822      	ldr	r2, [r4, #0]
 8012132:	07d1      	lsls	r1, r2, #31
 8012134:	d501      	bpl.n	801213a <_printf_float+0x152>
 8012136:	3301      	adds	r3, #1
 8012138:	6123      	str	r3, [r4, #16]
 801213a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801213e:	2b00      	cmp	r3, #0
 8012140:	d0a5      	beq.n	801208e <_printf_float+0xa6>
 8012142:	232d      	movs	r3, #45	; 0x2d
 8012144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012148:	e7a1      	b.n	801208e <_printf_float+0xa6>
 801214a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801214e:	f000 8177 	beq.w	8012440 <_printf_float+0x458>
 8012152:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012156:	d1bb      	bne.n	80120d0 <_printf_float+0xe8>
 8012158:	2900      	cmp	r1, #0
 801215a:	d1b9      	bne.n	80120d0 <_printf_float+0xe8>
 801215c:	2301      	movs	r3, #1
 801215e:	e7b6      	b.n	80120ce <_printf_float+0xe6>
 8012160:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012164:	d119      	bne.n	801219a <_printf_float+0x1b2>
 8012166:	2900      	cmp	r1, #0
 8012168:	6863      	ldr	r3, [r4, #4]
 801216a:	dd0c      	ble.n	8012186 <_printf_float+0x19e>
 801216c:	6121      	str	r1, [r4, #16]
 801216e:	b913      	cbnz	r3, 8012176 <_printf_float+0x18e>
 8012170:	6822      	ldr	r2, [r4, #0]
 8012172:	07d2      	lsls	r2, r2, #31
 8012174:	d502      	bpl.n	801217c <_printf_float+0x194>
 8012176:	3301      	adds	r3, #1
 8012178:	440b      	add	r3, r1
 801217a:	6123      	str	r3, [r4, #16]
 801217c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801217e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012180:	f04f 0900 	mov.w	r9, #0
 8012184:	e7d9      	b.n	801213a <_printf_float+0x152>
 8012186:	b913      	cbnz	r3, 801218e <_printf_float+0x1a6>
 8012188:	6822      	ldr	r2, [r4, #0]
 801218a:	07d0      	lsls	r0, r2, #31
 801218c:	d501      	bpl.n	8012192 <_printf_float+0x1aa>
 801218e:	3302      	adds	r3, #2
 8012190:	e7f3      	b.n	801217a <_printf_float+0x192>
 8012192:	2301      	movs	r3, #1
 8012194:	e7f1      	b.n	801217a <_printf_float+0x192>
 8012196:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801219a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801219e:	4293      	cmp	r3, r2
 80121a0:	db05      	blt.n	80121ae <_printf_float+0x1c6>
 80121a2:	6822      	ldr	r2, [r4, #0]
 80121a4:	6123      	str	r3, [r4, #16]
 80121a6:	07d1      	lsls	r1, r2, #31
 80121a8:	d5e8      	bpl.n	801217c <_printf_float+0x194>
 80121aa:	3301      	adds	r3, #1
 80121ac:	e7e5      	b.n	801217a <_printf_float+0x192>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	bfd4      	ite	le
 80121b2:	f1c3 0302 	rsble	r3, r3, #2
 80121b6:	2301      	movgt	r3, #1
 80121b8:	4413      	add	r3, r2
 80121ba:	e7de      	b.n	801217a <_printf_float+0x192>
 80121bc:	6823      	ldr	r3, [r4, #0]
 80121be:	055a      	lsls	r2, r3, #21
 80121c0:	d407      	bmi.n	80121d2 <_printf_float+0x1ea>
 80121c2:	6923      	ldr	r3, [r4, #16]
 80121c4:	4642      	mov	r2, r8
 80121c6:	4631      	mov	r1, r6
 80121c8:	4628      	mov	r0, r5
 80121ca:	47b8      	blx	r7
 80121cc:	3001      	adds	r0, #1
 80121ce:	d12b      	bne.n	8012228 <_printf_float+0x240>
 80121d0:	e767      	b.n	80120a2 <_printf_float+0xba>
 80121d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80121d6:	f240 80dc 	bls.w	8012392 <_printf_float+0x3aa>
 80121da:	2200      	movs	r2, #0
 80121dc:	2300      	movs	r3, #0
 80121de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80121e2:	f7ee fc89 	bl	8000af8 <__aeabi_dcmpeq>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	d033      	beq.n	8012252 <_printf_float+0x26a>
 80121ea:	2301      	movs	r3, #1
 80121ec:	4a41      	ldr	r2, [pc, #260]	; (80122f4 <_printf_float+0x30c>)
 80121ee:	4631      	mov	r1, r6
 80121f0:	4628      	mov	r0, r5
 80121f2:	47b8      	blx	r7
 80121f4:	3001      	adds	r0, #1
 80121f6:	f43f af54 	beq.w	80120a2 <_printf_float+0xba>
 80121fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121fe:	429a      	cmp	r2, r3
 8012200:	db02      	blt.n	8012208 <_printf_float+0x220>
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	07d8      	lsls	r0, r3, #31
 8012206:	d50f      	bpl.n	8012228 <_printf_float+0x240>
 8012208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801220c:	4631      	mov	r1, r6
 801220e:	4628      	mov	r0, r5
 8012210:	47b8      	blx	r7
 8012212:	3001      	adds	r0, #1
 8012214:	f43f af45 	beq.w	80120a2 <_printf_float+0xba>
 8012218:	f04f 0800 	mov.w	r8, #0
 801221c:	f104 091a 	add.w	r9, r4, #26
 8012220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012222:	3b01      	subs	r3, #1
 8012224:	4543      	cmp	r3, r8
 8012226:	dc09      	bgt.n	801223c <_printf_float+0x254>
 8012228:	6823      	ldr	r3, [r4, #0]
 801222a:	079b      	lsls	r3, r3, #30
 801222c:	f100 8103 	bmi.w	8012436 <_printf_float+0x44e>
 8012230:	68e0      	ldr	r0, [r4, #12]
 8012232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012234:	4298      	cmp	r0, r3
 8012236:	bfb8      	it	lt
 8012238:	4618      	movlt	r0, r3
 801223a:	e734      	b.n	80120a6 <_printf_float+0xbe>
 801223c:	2301      	movs	r3, #1
 801223e:	464a      	mov	r2, r9
 8012240:	4631      	mov	r1, r6
 8012242:	4628      	mov	r0, r5
 8012244:	47b8      	blx	r7
 8012246:	3001      	adds	r0, #1
 8012248:	f43f af2b 	beq.w	80120a2 <_printf_float+0xba>
 801224c:	f108 0801 	add.w	r8, r8, #1
 8012250:	e7e6      	b.n	8012220 <_printf_float+0x238>
 8012252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012254:	2b00      	cmp	r3, #0
 8012256:	dc2b      	bgt.n	80122b0 <_printf_float+0x2c8>
 8012258:	2301      	movs	r3, #1
 801225a:	4a26      	ldr	r2, [pc, #152]	; (80122f4 <_printf_float+0x30c>)
 801225c:	4631      	mov	r1, r6
 801225e:	4628      	mov	r0, r5
 8012260:	47b8      	blx	r7
 8012262:	3001      	adds	r0, #1
 8012264:	f43f af1d 	beq.w	80120a2 <_printf_float+0xba>
 8012268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801226a:	b923      	cbnz	r3, 8012276 <_printf_float+0x28e>
 801226c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226e:	b913      	cbnz	r3, 8012276 <_printf_float+0x28e>
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	07d9      	lsls	r1, r3, #31
 8012274:	d5d8      	bpl.n	8012228 <_printf_float+0x240>
 8012276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801227a:	4631      	mov	r1, r6
 801227c:	4628      	mov	r0, r5
 801227e:	47b8      	blx	r7
 8012280:	3001      	adds	r0, #1
 8012282:	f43f af0e 	beq.w	80120a2 <_printf_float+0xba>
 8012286:	f04f 0900 	mov.w	r9, #0
 801228a:	f104 0a1a 	add.w	sl, r4, #26
 801228e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012290:	425b      	negs	r3, r3
 8012292:	454b      	cmp	r3, r9
 8012294:	dc01      	bgt.n	801229a <_printf_float+0x2b2>
 8012296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012298:	e794      	b.n	80121c4 <_printf_float+0x1dc>
 801229a:	2301      	movs	r3, #1
 801229c:	4652      	mov	r2, sl
 801229e:	4631      	mov	r1, r6
 80122a0:	4628      	mov	r0, r5
 80122a2:	47b8      	blx	r7
 80122a4:	3001      	adds	r0, #1
 80122a6:	f43f aefc 	beq.w	80120a2 <_printf_float+0xba>
 80122aa:	f109 0901 	add.w	r9, r9, #1
 80122ae:	e7ee      	b.n	801228e <_printf_float+0x2a6>
 80122b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122b4:	429a      	cmp	r2, r3
 80122b6:	bfa8      	it	ge
 80122b8:	461a      	movge	r2, r3
 80122ba:	2a00      	cmp	r2, #0
 80122bc:	4691      	mov	r9, r2
 80122be:	dd07      	ble.n	80122d0 <_printf_float+0x2e8>
 80122c0:	4613      	mov	r3, r2
 80122c2:	4631      	mov	r1, r6
 80122c4:	4642      	mov	r2, r8
 80122c6:	4628      	mov	r0, r5
 80122c8:	47b8      	blx	r7
 80122ca:	3001      	adds	r0, #1
 80122cc:	f43f aee9 	beq.w	80120a2 <_printf_float+0xba>
 80122d0:	f104 031a 	add.w	r3, r4, #26
 80122d4:	f04f 0b00 	mov.w	fp, #0
 80122d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122dc:	9306      	str	r3, [sp, #24]
 80122de:	e015      	b.n	801230c <_printf_float+0x324>
 80122e0:	7fefffff 	.word	0x7fefffff
 80122e4:	08017518 	.word	0x08017518
 80122e8:	08017514 	.word	0x08017514
 80122ec:	08017520 	.word	0x08017520
 80122f0:	0801751c 	.word	0x0801751c
 80122f4:	08017743 	.word	0x08017743
 80122f8:	2301      	movs	r3, #1
 80122fa:	9a06      	ldr	r2, [sp, #24]
 80122fc:	4631      	mov	r1, r6
 80122fe:	4628      	mov	r0, r5
 8012300:	47b8      	blx	r7
 8012302:	3001      	adds	r0, #1
 8012304:	f43f aecd 	beq.w	80120a2 <_printf_float+0xba>
 8012308:	f10b 0b01 	add.w	fp, fp, #1
 801230c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012310:	ebaa 0309 	sub.w	r3, sl, r9
 8012314:	455b      	cmp	r3, fp
 8012316:	dcef      	bgt.n	80122f8 <_printf_float+0x310>
 8012318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801231c:	429a      	cmp	r2, r3
 801231e:	44d0      	add	r8, sl
 8012320:	db15      	blt.n	801234e <_printf_float+0x366>
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	07da      	lsls	r2, r3, #31
 8012326:	d412      	bmi.n	801234e <_printf_float+0x366>
 8012328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801232a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801232c:	eba3 020a 	sub.w	r2, r3, sl
 8012330:	eba3 0a01 	sub.w	sl, r3, r1
 8012334:	4592      	cmp	sl, r2
 8012336:	bfa8      	it	ge
 8012338:	4692      	movge	sl, r2
 801233a:	f1ba 0f00 	cmp.w	sl, #0
 801233e:	dc0e      	bgt.n	801235e <_printf_float+0x376>
 8012340:	f04f 0800 	mov.w	r8, #0
 8012344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012348:	f104 091a 	add.w	r9, r4, #26
 801234c:	e019      	b.n	8012382 <_printf_float+0x39a>
 801234e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012352:	4631      	mov	r1, r6
 8012354:	4628      	mov	r0, r5
 8012356:	47b8      	blx	r7
 8012358:	3001      	adds	r0, #1
 801235a:	d1e5      	bne.n	8012328 <_printf_float+0x340>
 801235c:	e6a1      	b.n	80120a2 <_printf_float+0xba>
 801235e:	4653      	mov	r3, sl
 8012360:	4642      	mov	r2, r8
 8012362:	4631      	mov	r1, r6
 8012364:	4628      	mov	r0, r5
 8012366:	47b8      	blx	r7
 8012368:	3001      	adds	r0, #1
 801236a:	d1e9      	bne.n	8012340 <_printf_float+0x358>
 801236c:	e699      	b.n	80120a2 <_printf_float+0xba>
 801236e:	2301      	movs	r3, #1
 8012370:	464a      	mov	r2, r9
 8012372:	4631      	mov	r1, r6
 8012374:	4628      	mov	r0, r5
 8012376:	47b8      	blx	r7
 8012378:	3001      	adds	r0, #1
 801237a:	f43f ae92 	beq.w	80120a2 <_printf_float+0xba>
 801237e:	f108 0801 	add.w	r8, r8, #1
 8012382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012386:	1a9b      	subs	r3, r3, r2
 8012388:	eba3 030a 	sub.w	r3, r3, sl
 801238c:	4543      	cmp	r3, r8
 801238e:	dcee      	bgt.n	801236e <_printf_float+0x386>
 8012390:	e74a      	b.n	8012228 <_printf_float+0x240>
 8012392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012394:	2a01      	cmp	r2, #1
 8012396:	dc01      	bgt.n	801239c <_printf_float+0x3b4>
 8012398:	07db      	lsls	r3, r3, #31
 801239a:	d53a      	bpl.n	8012412 <_printf_float+0x42a>
 801239c:	2301      	movs	r3, #1
 801239e:	4642      	mov	r2, r8
 80123a0:	4631      	mov	r1, r6
 80123a2:	4628      	mov	r0, r5
 80123a4:	47b8      	blx	r7
 80123a6:	3001      	adds	r0, #1
 80123a8:	f43f ae7b 	beq.w	80120a2 <_printf_float+0xba>
 80123ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123b0:	4631      	mov	r1, r6
 80123b2:	4628      	mov	r0, r5
 80123b4:	47b8      	blx	r7
 80123b6:	3001      	adds	r0, #1
 80123b8:	f108 0801 	add.w	r8, r8, #1
 80123bc:	f43f ae71 	beq.w	80120a2 <_printf_float+0xba>
 80123c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c2:	2200      	movs	r2, #0
 80123c4:	f103 3aff 	add.w	sl, r3, #4294967295
 80123c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123cc:	2300      	movs	r3, #0
 80123ce:	f7ee fb93 	bl	8000af8 <__aeabi_dcmpeq>
 80123d2:	b9c8      	cbnz	r0, 8012408 <_printf_float+0x420>
 80123d4:	4653      	mov	r3, sl
 80123d6:	4642      	mov	r2, r8
 80123d8:	4631      	mov	r1, r6
 80123da:	4628      	mov	r0, r5
 80123dc:	47b8      	blx	r7
 80123de:	3001      	adds	r0, #1
 80123e0:	d10e      	bne.n	8012400 <_printf_float+0x418>
 80123e2:	e65e      	b.n	80120a2 <_printf_float+0xba>
 80123e4:	2301      	movs	r3, #1
 80123e6:	4652      	mov	r2, sl
 80123e8:	4631      	mov	r1, r6
 80123ea:	4628      	mov	r0, r5
 80123ec:	47b8      	blx	r7
 80123ee:	3001      	adds	r0, #1
 80123f0:	f43f ae57 	beq.w	80120a2 <_printf_float+0xba>
 80123f4:	f108 0801 	add.w	r8, r8, #1
 80123f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123fa:	3b01      	subs	r3, #1
 80123fc:	4543      	cmp	r3, r8
 80123fe:	dcf1      	bgt.n	80123e4 <_printf_float+0x3fc>
 8012400:	464b      	mov	r3, r9
 8012402:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012406:	e6de      	b.n	80121c6 <_printf_float+0x1de>
 8012408:	f04f 0800 	mov.w	r8, #0
 801240c:	f104 0a1a 	add.w	sl, r4, #26
 8012410:	e7f2      	b.n	80123f8 <_printf_float+0x410>
 8012412:	2301      	movs	r3, #1
 8012414:	e7df      	b.n	80123d6 <_printf_float+0x3ee>
 8012416:	2301      	movs	r3, #1
 8012418:	464a      	mov	r2, r9
 801241a:	4631      	mov	r1, r6
 801241c:	4628      	mov	r0, r5
 801241e:	47b8      	blx	r7
 8012420:	3001      	adds	r0, #1
 8012422:	f43f ae3e 	beq.w	80120a2 <_printf_float+0xba>
 8012426:	f108 0801 	add.w	r8, r8, #1
 801242a:	68e3      	ldr	r3, [r4, #12]
 801242c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801242e:	1a9b      	subs	r3, r3, r2
 8012430:	4543      	cmp	r3, r8
 8012432:	dcf0      	bgt.n	8012416 <_printf_float+0x42e>
 8012434:	e6fc      	b.n	8012230 <_printf_float+0x248>
 8012436:	f04f 0800 	mov.w	r8, #0
 801243a:	f104 0919 	add.w	r9, r4, #25
 801243e:	e7f4      	b.n	801242a <_printf_float+0x442>
 8012440:	2900      	cmp	r1, #0
 8012442:	f43f ae8b 	beq.w	801215c <_printf_float+0x174>
 8012446:	2300      	movs	r3, #0
 8012448:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801244c:	ab09      	add	r3, sp, #36	; 0x24
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	ec49 8b10 	vmov	d0, r8, r9
 8012454:	6022      	str	r2, [r4, #0]
 8012456:	f8cd a004 	str.w	sl, [sp, #4]
 801245a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801245e:	4628      	mov	r0, r5
 8012460:	f7ff fd2e 	bl	8011ec0 <__cvt>
 8012464:	4680      	mov	r8, r0
 8012466:	e648      	b.n	80120fa <_printf_float+0x112>

08012468 <_printf_common>:
 8012468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801246c:	4691      	mov	r9, r2
 801246e:	461f      	mov	r7, r3
 8012470:	688a      	ldr	r2, [r1, #8]
 8012472:	690b      	ldr	r3, [r1, #16]
 8012474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012478:	4293      	cmp	r3, r2
 801247a:	bfb8      	it	lt
 801247c:	4613      	movlt	r3, r2
 801247e:	f8c9 3000 	str.w	r3, [r9]
 8012482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012486:	4606      	mov	r6, r0
 8012488:	460c      	mov	r4, r1
 801248a:	b112      	cbz	r2, 8012492 <_printf_common+0x2a>
 801248c:	3301      	adds	r3, #1
 801248e:	f8c9 3000 	str.w	r3, [r9]
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	0699      	lsls	r1, r3, #26
 8012496:	bf42      	ittt	mi
 8012498:	f8d9 3000 	ldrmi.w	r3, [r9]
 801249c:	3302      	addmi	r3, #2
 801249e:	f8c9 3000 	strmi.w	r3, [r9]
 80124a2:	6825      	ldr	r5, [r4, #0]
 80124a4:	f015 0506 	ands.w	r5, r5, #6
 80124a8:	d107      	bne.n	80124ba <_printf_common+0x52>
 80124aa:	f104 0a19 	add.w	sl, r4, #25
 80124ae:	68e3      	ldr	r3, [r4, #12]
 80124b0:	f8d9 2000 	ldr.w	r2, [r9]
 80124b4:	1a9b      	subs	r3, r3, r2
 80124b6:	42ab      	cmp	r3, r5
 80124b8:	dc28      	bgt.n	801250c <_printf_common+0xa4>
 80124ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80124be:	6822      	ldr	r2, [r4, #0]
 80124c0:	3300      	adds	r3, #0
 80124c2:	bf18      	it	ne
 80124c4:	2301      	movne	r3, #1
 80124c6:	0692      	lsls	r2, r2, #26
 80124c8:	d42d      	bmi.n	8012526 <_printf_common+0xbe>
 80124ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124ce:	4639      	mov	r1, r7
 80124d0:	4630      	mov	r0, r6
 80124d2:	47c0      	blx	r8
 80124d4:	3001      	adds	r0, #1
 80124d6:	d020      	beq.n	801251a <_printf_common+0xb2>
 80124d8:	6823      	ldr	r3, [r4, #0]
 80124da:	68e5      	ldr	r5, [r4, #12]
 80124dc:	f8d9 2000 	ldr.w	r2, [r9]
 80124e0:	f003 0306 	and.w	r3, r3, #6
 80124e4:	2b04      	cmp	r3, #4
 80124e6:	bf08      	it	eq
 80124e8:	1aad      	subeq	r5, r5, r2
 80124ea:	68a3      	ldr	r3, [r4, #8]
 80124ec:	6922      	ldr	r2, [r4, #16]
 80124ee:	bf0c      	ite	eq
 80124f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124f4:	2500      	movne	r5, #0
 80124f6:	4293      	cmp	r3, r2
 80124f8:	bfc4      	itt	gt
 80124fa:	1a9b      	subgt	r3, r3, r2
 80124fc:	18ed      	addgt	r5, r5, r3
 80124fe:	f04f 0900 	mov.w	r9, #0
 8012502:	341a      	adds	r4, #26
 8012504:	454d      	cmp	r5, r9
 8012506:	d11a      	bne.n	801253e <_printf_common+0xd6>
 8012508:	2000      	movs	r0, #0
 801250a:	e008      	b.n	801251e <_printf_common+0xb6>
 801250c:	2301      	movs	r3, #1
 801250e:	4652      	mov	r2, sl
 8012510:	4639      	mov	r1, r7
 8012512:	4630      	mov	r0, r6
 8012514:	47c0      	blx	r8
 8012516:	3001      	adds	r0, #1
 8012518:	d103      	bne.n	8012522 <_printf_common+0xba>
 801251a:	f04f 30ff 	mov.w	r0, #4294967295
 801251e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012522:	3501      	adds	r5, #1
 8012524:	e7c3      	b.n	80124ae <_printf_common+0x46>
 8012526:	18e1      	adds	r1, r4, r3
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	2030      	movs	r0, #48	; 0x30
 801252c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012530:	4422      	add	r2, r4
 8012532:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012536:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801253a:	3302      	adds	r3, #2
 801253c:	e7c5      	b.n	80124ca <_printf_common+0x62>
 801253e:	2301      	movs	r3, #1
 8012540:	4622      	mov	r2, r4
 8012542:	4639      	mov	r1, r7
 8012544:	4630      	mov	r0, r6
 8012546:	47c0      	blx	r8
 8012548:	3001      	adds	r0, #1
 801254a:	d0e6      	beq.n	801251a <_printf_common+0xb2>
 801254c:	f109 0901 	add.w	r9, r9, #1
 8012550:	e7d8      	b.n	8012504 <_printf_common+0x9c>
	...

08012554 <_printf_i>:
 8012554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012558:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801255c:	460c      	mov	r4, r1
 801255e:	7e09      	ldrb	r1, [r1, #24]
 8012560:	b085      	sub	sp, #20
 8012562:	296e      	cmp	r1, #110	; 0x6e
 8012564:	4617      	mov	r7, r2
 8012566:	4606      	mov	r6, r0
 8012568:	4698      	mov	r8, r3
 801256a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801256c:	f000 80b3 	beq.w	80126d6 <_printf_i+0x182>
 8012570:	d822      	bhi.n	80125b8 <_printf_i+0x64>
 8012572:	2963      	cmp	r1, #99	; 0x63
 8012574:	d036      	beq.n	80125e4 <_printf_i+0x90>
 8012576:	d80a      	bhi.n	801258e <_printf_i+0x3a>
 8012578:	2900      	cmp	r1, #0
 801257a:	f000 80b9 	beq.w	80126f0 <_printf_i+0x19c>
 801257e:	2958      	cmp	r1, #88	; 0x58
 8012580:	f000 8083 	beq.w	801268a <_printf_i+0x136>
 8012584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012588:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801258c:	e032      	b.n	80125f4 <_printf_i+0xa0>
 801258e:	2964      	cmp	r1, #100	; 0x64
 8012590:	d001      	beq.n	8012596 <_printf_i+0x42>
 8012592:	2969      	cmp	r1, #105	; 0x69
 8012594:	d1f6      	bne.n	8012584 <_printf_i+0x30>
 8012596:	6820      	ldr	r0, [r4, #0]
 8012598:	6813      	ldr	r3, [r2, #0]
 801259a:	0605      	lsls	r5, r0, #24
 801259c:	f103 0104 	add.w	r1, r3, #4
 80125a0:	d52a      	bpl.n	80125f8 <_printf_i+0xa4>
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	6011      	str	r1, [r2, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	da03      	bge.n	80125b2 <_printf_i+0x5e>
 80125aa:	222d      	movs	r2, #45	; 0x2d
 80125ac:	425b      	negs	r3, r3
 80125ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80125b2:	486f      	ldr	r0, [pc, #444]	; (8012770 <_printf_i+0x21c>)
 80125b4:	220a      	movs	r2, #10
 80125b6:	e039      	b.n	801262c <_printf_i+0xd8>
 80125b8:	2973      	cmp	r1, #115	; 0x73
 80125ba:	f000 809d 	beq.w	80126f8 <_printf_i+0x1a4>
 80125be:	d808      	bhi.n	80125d2 <_printf_i+0x7e>
 80125c0:	296f      	cmp	r1, #111	; 0x6f
 80125c2:	d020      	beq.n	8012606 <_printf_i+0xb2>
 80125c4:	2970      	cmp	r1, #112	; 0x70
 80125c6:	d1dd      	bne.n	8012584 <_printf_i+0x30>
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	f043 0320 	orr.w	r3, r3, #32
 80125ce:	6023      	str	r3, [r4, #0]
 80125d0:	e003      	b.n	80125da <_printf_i+0x86>
 80125d2:	2975      	cmp	r1, #117	; 0x75
 80125d4:	d017      	beq.n	8012606 <_printf_i+0xb2>
 80125d6:	2978      	cmp	r1, #120	; 0x78
 80125d8:	d1d4      	bne.n	8012584 <_printf_i+0x30>
 80125da:	2378      	movs	r3, #120	; 0x78
 80125dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125e0:	4864      	ldr	r0, [pc, #400]	; (8012774 <_printf_i+0x220>)
 80125e2:	e055      	b.n	8012690 <_printf_i+0x13c>
 80125e4:	6813      	ldr	r3, [r2, #0]
 80125e6:	1d19      	adds	r1, r3, #4
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	6011      	str	r1, [r2, #0]
 80125ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125f4:	2301      	movs	r3, #1
 80125f6:	e08c      	b.n	8012712 <_printf_i+0x1be>
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	6011      	str	r1, [r2, #0]
 80125fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012600:	bf18      	it	ne
 8012602:	b21b      	sxthne	r3, r3
 8012604:	e7cf      	b.n	80125a6 <_printf_i+0x52>
 8012606:	6813      	ldr	r3, [r2, #0]
 8012608:	6825      	ldr	r5, [r4, #0]
 801260a:	1d18      	adds	r0, r3, #4
 801260c:	6010      	str	r0, [r2, #0]
 801260e:	0628      	lsls	r0, r5, #24
 8012610:	d501      	bpl.n	8012616 <_printf_i+0xc2>
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	e002      	b.n	801261c <_printf_i+0xc8>
 8012616:	0668      	lsls	r0, r5, #25
 8012618:	d5fb      	bpl.n	8012612 <_printf_i+0xbe>
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	4854      	ldr	r0, [pc, #336]	; (8012770 <_printf_i+0x21c>)
 801261e:	296f      	cmp	r1, #111	; 0x6f
 8012620:	bf14      	ite	ne
 8012622:	220a      	movne	r2, #10
 8012624:	2208      	moveq	r2, #8
 8012626:	2100      	movs	r1, #0
 8012628:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801262c:	6865      	ldr	r5, [r4, #4]
 801262e:	60a5      	str	r5, [r4, #8]
 8012630:	2d00      	cmp	r5, #0
 8012632:	f2c0 8095 	blt.w	8012760 <_printf_i+0x20c>
 8012636:	6821      	ldr	r1, [r4, #0]
 8012638:	f021 0104 	bic.w	r1, r1, #4
 801263c:	6021      	str	r1, [r4, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d13d      	bne.n	80126be <_printf_i+0x16a>
 8012642:	2d00      	cmp	r5, #0
 8012644:	f040 808e 	bne.w	8012764 <_printf_i+0x210>
 8012648:	4665      	mov	r5, ip
 801264a:	2a08      	cmp	r2, #8
 801264c:	d10b      	bne.n	8012666 <_printf_i+0x112>
 801264e:	6823      	ldr	r3, [r4, #0]
 8012650:	07db      	lsls	r3, r3, #31
 8012652:	d508      	bpl.n	8012666 <_printf_i+0x112>
 8012654:	6923      	ldr	r3, [r4, #16]
 8012656:	6862      	ldr	r2, [r4, #4]
 8012658:	429a      	cmp	r2, r3
 801265a:	bfde      	ittt	le
 801265c:	2330      	movle	r3, #48	; 0x30
 801265e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012662:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012666:	ebac 0305 	sub.w	r3, ip, r5
 801266a:	6123      	str	r3, [r4, #16]
 801266c:	f8cd 8000 	str.w	r8, [sp]
 8012670:	463b      	mov	r3, r7
 8012672:	aa03      	add	r2, sp, #12
 8012674:	4621      	mov	r1, r4
 8012676:	4630      	mov	r0, r6
 8012678:	f7ff fef6 	bl	8012468 <_printf_common>
 801267c:	3001      	adds	r0, #1
 801267e:	d14d      	bne.n	801271c <_printf_i+0x1c8>
 8012680:	f04f 30ff 	mov.w	r0, #4294967295
 8012684:	b005      	add	sp, #20
 8012686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801268a:	4839      	ldr	r0, [pc, #228]	; (8012770 <_printf_i+0x21c>)
 801268c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012690:	6813      	ldr	r3, [r2, #0]
 8012692:	6821      	ldr	r1, [r4, #0]
 8012694:	1d1d      	adds	r5, r3, #4
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	6015      	str	r5, [r2, #0]
 801269a:	060a      	lsls	r2, r1, #24
 801269c:	d50b      	bpl.n	80126b6 <_printf_i+0x162>
 801269e:	07ca      	lsls	r2, r1, #31
 80126a0:	bf44      	itt	mi
 80126a2:	f041 0120 	orrmi.w	r1, r1, #32
 80126a6:	6021      	strmi	r1, [r4, #0]
 80126a8:	b91b      	cbnz	r3, 80126b2 <_printf_i+0x15e>
 80126aa:	6822      	ldr	r2, [r4, #0]
 80126ac:	f022 0220 	bic.w	r2, r2, #32
 80126b0:	6022      	str	r2, [r4, #0]
 80126b2:	2210      	movs	r2, #16
 80126b4:	e7b7      	b.n	8012626 <_printf_i+0xd2>
 80126b6:	064d      	lsls	r5, r1, #25
 80126b8:	bf48      	it	mi
 80126ba:	b29b      	uxthmi	r3, r3
 80126bc:	e7ef      	b.n	801269e <_printf_i+0x14a>
 80126be:	4665      	mov	r5, ip
 80126c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80126c4:	fb02 3311 	mls	r3, r2, r1, r3
 80126c8:	5cc3      	ldrb	r3, [r0, r3]
 80126ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80126ce:	460b      	mov	r3, r1
 80126d0:	2900      	cmp	r1, #0
 80126d2:	d1f5      	bne.n	80126c0 <_printf_i+0x16c>
 80126d4:	e7b9      	b.n	801264a <_printf_i+0xf6>
 80126d6:	6813      	ldr	r3, [r2, #0]
 80126d8:	6825      	ldr	r5, [r4, #0]
 80126da:	6961      	ldr	r1, [r4, #20]
 80126dc:	1d18      	adds	r0, r3, #4
 80126de:	6010      	str	r0, [r2, #0]
 80126e0:	0628      	lsls	r0, r5, #24
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	d501      	bpl.n	80126ea <_printf_i+0x196>
 80126e6:	6019      	str	r1, [r3, #0]
 80126e8:	e002      	b.n	80126f0 <_printf_i+0x19c>
 80126ea:	066a      	lsls	r2, r5, #25
 80126ec:	d5fb      	bpl.n	80126e6 <_printf_i+0x192>
 80126ee:	8019      	strh	r1, [r3, #0]
 80126f0:	2300      	movs	r3, #0
 80126f2:	6123      	str	r3, [r4, #16]
 80126f4:	4665      	mov	r5, ip
 80126f6:	e7b9      	b.n	801266c <_printf_i+0x118>
 80126f8:	6813      	ldr	r3, [r2, #0]
 80126fa:	1d19      	adds	r1, r3, #4
 80126fc:	6011      	str	r1, [r2, #0]
 80126fe:	681d      	ldr	r5, [r3, #0]
 8012700:	6862      	ldr	r2, [r4, #4]
 8012702:	2100      	movs	r1, #0
 8012704:	4628      	mov	r0, r5
 8012706:	f7ed fd83 	bl	8000210 <memchr>
 801270a:	b108      	cbz	r0, 8012710 <_printf_i+0x1bc>
 801270c:	1b40      	subs	r0, r0, r5
 801270e:	6060      	str	r0, [r4, #4]
 8012710:	6863      	ldr	r3, [r4, #4]
 8012712:	6123      	str	r3, [r4, #16]
 8012714:	2300      	movs	r3, #0
 8012716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801271a:	e7a7      	b.n	801266c <_printf_i+0x118>
 801271c:	6923      	ldr	r3, [r4, #16]
 801271e:	462a      	mov	r2, r5
 8012720:	4639      	mov	r1, r7
 8012722:	4630      	mov	r0, r6
 8012724:	47c0      	blx	r8
 8012726:	3001      	adds	r0, #1
 8012728:	d0aa      	beq.n	8012680 <_printf_i+0x12c>
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	079b      	lsls	r3, r3, #30
 801272e:	d413      	bmi.n	8012758 <_printf_i+0x204>
 8012730:	68e0      	ldr	r0, [r4, #12]
 8012732:	9b03      	ldr	r3, [sp, #12]
 8012734:	4298      	cmp	r0, r3
 8012736:	bfb8      	it	lt
 8012738:	4618      	movlt	r0, r3
 801273a:	e7a3      	b.n	8012684 <_printf_i+0x130>
 801273c:	2301      	movs	r3, #1
 801273e:	464a      	mov	r2, r9
 8012740:	4639      	mov	r1, r7
 8012742:	4630      	mov	r0, r6
 8012744:	47c0      	blx	r8
 8012746:	3001      	adds	r0, #1
 8012748:	d09a      	beq.n	8012680 <_printf_i+0x12c>
 801274a:	3501      	adds	r5, #1
 801274c:	68e3      	ldr	r3, [r4, #12]
 801274e:	9a03      	ldr	r2, [sp, #12]
 8012750:	1a9b      	subs	r3, r3, r2
 8012752:	42ab      	cmp	r3, r5
 8012754:	dcf2      	bgt.n	801273c <_printf_i+0x1e8>
 8012756:	e7eb      	b.n	8012730 <_printf_i+0x1dc>
 8012758:	2500      	movs	r5, #0
 801275a:	f104 0919 	add.w	r9, r4, #25
 801275e:	e7f5      	b.n	801274c <_printf_i+0x1f8>
 8012760:	2b00      	cmp	r3, #0
 8012762:	d1ac      	bne.n	80126be <_printf_i+0x16a>
 8012764:	7803      	ldrb	r3, [r0, #0]
 8012766:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801276a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801276e:	e76c      	b.n	801264a <_printf_i+0xf6>
 8012770:	08017524 	.word	0x08017524
 8012774:	08017535 	.word	0x08017535

08012778 <_scanf_float>:
 8012778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801277c:	469a      	mov	sl, r3
 801277e:	688b      	ldr	r3, [r1, #8]
 8012780:	4616      	mov	r6, r2
 8012782:	1e5a      	subs	r2, r3, #1
 8012784:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012788:	b087      	sub	sp, #28
 801278a:	bf83      	ittte	hi
 801278c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012790:	189b      	addhi	r3, r3, r2
 8012792:	9301      	strhi	r3, [sp, #4]
 8012794:	2300      	movls	r3, #0
 8012796:	bf86      	itte	hi
 8012798:	f240 135d 	movwhi	r3, #349	; 0x15d
 801279c:	608b      	strhi	r3, [r1, #8]
 801279e:	9301      	strls	r3, [sp, #4]
 80127a0:	680b      	ldr	r3, [r1, #0]
 80127a2:	4688      	mov	r8, r1
 80127a4:	f04f 0b00 	mov.w	fp, #0
 80127a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80127ac:	f848 3b1c 	str.w	r3, [r8], #28
 80127b0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80127b4:	4607      	mov	r7, r0
 80127b6:	460c      	mov	r4, r1
 80127b8:	4645      	mov	r5, r8
 80127ba:	465a      	mov	r2, fp
 80127bc:	46d9      	mov	r9, fp
 80127be:	f8cd b008 	str.w	fp, [sp, #8]
 80127c2:	68a1      	ldr	r1, [r4, #8]
 80127c4:	b181      	cbz	r1, 80127e8 <_scanf_float+0x70>
 80127c6:	6833      	ldr	r3, [r6, #0]
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	2b49      	cmp	r3, #73	; 0x49
 80127cc:	d071      	beq.n	80128b2 <_scanf_float+0x13a>
 80127ce:	d84d      	bhi.n	801286c <_scanf_float+0xf4>
 80127d0:	2b39      	cmp	r3, #57	; 0x39
 80127d2:	d840      	bhi.n	8012856 <_scanf_float+0xde>
 80127d4:	2b31      	cmp	r3, #49	; 0x31
 80127d6:	f080 8088 	bcs.w	80128ea <_scanf_float+0x172>
 80127da:	2b2d      	cmp	r3, #45	; 0x2d
 80127dc:	f000 8090 	beq.w	8012900 <_scanf_float+0x188>
 80127e0:	d815      	bhi.n	801280e <_scanf_float+0x96>
 80127e2:	2b2b      	cmp	r3, #43	; 0x2b
 80127e4:	f000 808c 	beq.w	8012900 <_scanf_float+0x188>
 80127e8:	f1b9 0f00 	cmp.w	r9, #0
 80127ec:	d003      	beq.n	80127f6 <_scanf_float+0x7e>
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	3a01      	subs	r2, #1
 80127f8:	2a01      	cmp	r2, #1
 80127fa:	f200 80ea 	bhi.w	80129d2 <_scanf_float+0x25a>
 80127fe:	4545      	cmp	r5, r8
 8012800:	f200 80dc 	bhi.w	80129bc <_scanf_float+0x244>
 8012804:	2601      	movs	r6, #1
 8012806:	4630      	mov	r0, r6
 8012808:	b007      	add	sp, #28
 801280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801280e:	2b2e      	cmp	r3, #46	; 0x2e
 8012810:	f000 809f 	beq.w	8012952 <_scanf_float+0x1da>
 8012814:	2b30      	cmp	r3, #48	; 0x30
 8012816:	d1e7      	bne.n	80127e8 <_scanf_float+0x70>
 8012818:	6820      	ldr	r0, [r4, #0]
 801281a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801281e:	d064      	beq.n	80128ea <_scanf_float+0x172>
 8012820:	9b01      	ldr	r3, [sp, #4]
 8012822:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012826:	6020      	str	r0, [r4, #0]
 8012828:	f109 0901 	add.w	r9, r9, #1
 801282c:	b11b      	cbz	r3, 8012836 <_scanf_float+0xbe>
 801282e:	3b01      	subs	r3, #1
 8012830:	3101      	adds	r1, #1
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	60a1      	str	r1, [r4, #8]
 8012836:	68a3      	ldr	r3, [r4, #8]
 8012838:	3b01      	subs	r3, #1
 801283a:	60a3      	str	r3, [r4, #8]
 801283c:	6923      	ldr	r3, [r4, #16]
 801283e:	3301      	adds	r3, #1
 8012840:	6123      	str	r3, [r4, #16]
 8012842:	6873      	ldr	r3, [r6, #4]
 8012844:	3b01      	subs	r3, #1
 8012846:	2b00      	cmp	r3, #0
 8012848:	6073      	str	r3, [r6, #4]
 801284a:	f340 80ac 	ble.w	80129a6 <_scanf_float+0x22e>
 801284e:	6833      	ldr	r3, [r6, #0]
 8012850:	3301      	adds	r3, #1
 8012852:	6033      	str	r3, [r6, #0]
 8012854:	e7b5      	b.n	80127c2 <_scanf_float+0x4a>
 8012856:	2b45      	cmp	r3, #69	; 0x45
 8012858:	f000 8085 	beq.w	8012966 <_scanf_float+0x1ee>
 801285c:	2b46      	cmp	r3, #70	; 0x46
 801285e:	d06a      	beq.n	8012936 <_scanf_float+0x1be>
 8012860:	2b41      	cmp	r3, #65	; 0x41
 8012862:	d1c1      	bne.n	80127e8 <_scanf_float+0x70>
 8012864:	2a01      	cmp	r2, #1
 8012866:	d1bf      	bne.n	80127e8 <_scanf_float+0x70>
 8012868:	2202      	movs	r2, #2
 801286a:	e046      	b.n	80128fa <_scanf_float+0x182>
 801286c:	2b65      	cmp	r3, #101	; 0x65
 801286e:	d07a      	beq.n	8012966 <_scanf_float+0x1ee>
 8012870:	d818      	bhi.n	80128a4 <_scanf_float+0x12c>
 8012872:	2b54      	cmp	r3, #84	; 0x54
 8012874:	d066      	beq.n	8012944 <_scanf_float+0x1cc>
 8012876:	d811      	bhi.n	801289c <_scanf_float+0x124>
 8012878:	2b4e      	cmp	r3, #78	; 0x4e
 801287a:	d1b5      	bne.n	80127e8 <_scanf_float+0x70>
 801287c:	2a00      	cmp	r2, #0
 801287e:	d146      	bne.n	801290e <_scanf_float+0x196>
 8012880:	f1b9 0f00 	cmp.w	r9, #0
 8012884:	d145      	bne.n	8012912 <_scanf_float+0x19a>
 8012886:	6821      	ldr	r1, [r4, #0]
 8012888:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801288c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012890:	d13f      	bne.n	8012912 <_scanf_float+0x19a>
 8012892:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012896:	6021      	str	r1, [r4, #0]
 8012898:	2201      	movs	r2, #1
 801289a:	e02e      	b.n	80128fa <_scanf_float+0x182>
 801289c:	2b59      	cmp	r3, #89	; 0x59
 801289e:	d01e      	beq.n	80128de <_scanf_float+0x166>
 80128a0:	2b61      	cmp	r3, #97	; 0x61
 80128a2:	e7de      	b.n	8012862 <_scanf_float+0xea>
 80128a4:	2b6e      	cmp	r3, #110	; 0x6e
 80128a6:	d0e9      	beq.n	801287c <_scanf_float+0x104>
 80128a8:	d815      	bhi.n	80128d6 <_scanf_float+0x15e>
 80128aa:	2b66      	cmp	r3, #102	; 0x66
 80128ac:	d043      	beq.n	8012936 <_scanf_float+0x1be>
 80128ae:	2b69      	cmp	r3, #105	; 0x69
 80128b0:	d19a      	bne.n	80127e8 <_scanf_float+0x70>
 80128b2:	f1bb 0f00 	cmp.w	fp, #0
 80128b6:	d138      	bne.n	801292a <_scanf_float+0x1b2>
 80128b8:	f1b9 0f00 	cmp.w	r9, #0
 80128bc:	d197      	bne.n	80127ee <_scanf_float+0x76>
 80128be:	6821      	ldr	r1, [r4, #0]
 80128c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80128c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80128c8:	d195      	bne.n	80127f6 <_scanf_float+0x7e>
 80128ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80128ce:	6021      	str	r1, [r4, #0]
 80128d0:	f04f 0b01 	mov.w	fp, #1
 80128d4:	e011      	b.n	80128fa <_scanf_float+0x182>
 80128d6:	2b74      	cmp	r3, #116	; 0x74
 80128d8:	d034      	beq.n	8012944 <_scanf_float+0x1cc>
 80128da:	2b79      	cmp	r3, #121	; 0x79
 80128dc:	d184      	bne.n	80127e8 <_scanf_float+0x70>
 80128de:	f1bb 0f07 	cmp.w	fp, #7
 80128e2:	d181      	bne.n	80127e8 <_scanf_float+0x70>
 80128e4:	f04f 0b08 	mov.w	fp, #8
 80128e8:	e007      	b.n	80128fa <_scanf_float+0x182>
 80128ea:	eb12 0f0b 	cmn.w	r2, fp
 80128ee:	f47f af7b 	bne.w	80127e8 <_scanf_float+0x70>
 80128f2:	6821      	ldr	r1, [r4, #0]
 80128f4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80128f8:	6021      	str	r1, [r4, #0]
 80128fa:	702b      	strb	r3, [r5, #0]
 80128fc:	3501      	adds	r5, #1
 80128fe:	e79a      	b.n	8012836 <_scanf_float+0xbe>
 8012900:	6821      	ldr	r1, [r4, #0]
 8012902:	0608      	lsls	r0, r1, #24
 8012904:	f57f af70 	bpl.w	80127e8 <_scanf_float+0x70>
 8012908:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801290c:	e7f4      	b.n	80128f8 <_scanf_float+0x180>
 801290e:	2a02      	cmp	r2, #2
 8012910:	d047      	beq.n	80129a2 <_scanf_float+0x22a>
 8012912:	f1bb 0f01 	cmp.w	fp, #1
 8012916:	d003      	beq.n	8012920 <_scanf_float+0x1a8>
 8012918:	f1bb 0f04 	cmp.w	fp, #4
 801291c:	f47f af64 	bne.w	80127e8 <_scanf_float+0x70>
 8012920:	f10b 0b01 	add.w	fp, fp, #1
 8012924:	fa5f fb8b 	uxtb.w	fp, fp
 8012928:	e7e7      	b.n	80128fa <_scanf_float+0x182>
 801292a:	f1bb 0f03 	cmp.w	fp, #3
 801292e:	d0f7      	beq.n	8012920 <_scanf_float+0x1a8>
 8012930:	f1bb 0f05 	cmp.w	fp, #5
 8012934:	e7f2      	b.n	801291c <_scanf_float+0x1a4>
 8012936:	f1bb 0f02 	cmp.w	fp, #2
 801293a:	f47f af55 	bne.w	80127e8 <_scanf_float+0x70>
 801293e:	f04f 0b03 	mov.w	fp, #3
 8012942:	e7da      	b.n	80128fa <_scanf_float+0x182>
 8012944:	f1bb 0f06 	cmp.w	fp, #6
 8012948:	f47f af4e 	bne.w	80127e8 <_scanf_float+0x70>
 801294c:	f04f 0b07 	mov.w	fp, #7
 8012950:	e7d3      	b.n	80128fa <_scanf_float+0x182>
 8012952:	6821      	ldr	r1, [r4, #0]
 8012954:	0588      	lsls	r0, r1, #22
 8012956:	f57f af47 	bpl.w	80127e8 <_scanf_float+0x70>
 801295a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801295e:	6021      	str	r1, [r4, #0]
 8012960:	f8cd 9008 	str.w	r9, [sp, #8]
 8012964:	e7c9      	b.n	80128fa <_scanf_float+0x182>
 8012966:	6821      	ldr	r1, [r4, #0]
 8012968:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801296c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012970:	d006      	beq.n	8012980 <_scanf_float+0x208>
 8012972:	0548      	lsls	r0, r1, #21
 8012974:	f57f af38 	bpl.w	80127e8 <_scanf_float+0x70>
 8012978:	f1b9 0f00 	cmp.w	r9, #0
 801297c:	f43f af3b 	beq.w	80127f6 <_scanf_float+0x7e>
 8012980:	0588      	lsls	r0, r1, #22
 8012982:	bf58      	it	pl
 8012984:	9802      	ldrpl	r0, [sp, #8]
 8012986:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801298a:	bf58      	it	pl
 801298c:	eba9 0000 	subpl.w	r0, r9, r0
 8012990:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012994:	bf58      	it	pl
 8012996:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801299a:	6021      	str	r1, [r4, #0]
 801299c:	f04f 0900 	mov.w	r9, #0
 80129a0:	e7ab      	b.n	80128fa <_scanf_float+0x182>
 80129a2:	2203      	movs	r2, #3
 80129a4:	e7a9      	b.n	80128fa <_scanf_float+0x182>
 80129a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80129aa:	9205      	str	r2, [sp, #20]
 80129ac:	4631      	mov	r1, r6
 80129ae:	4638      	mov	r0, r7
 80129b0:	4798      	blx	r3
 80129b2:	9a05      	ldr	r2, [sp, #20]
 80129b4:	2800      	cmp	r0, #0
 80129b6:	f43f af04 	beq.w	80127c2 <_scanf_float+0x4a>
 80129ba:	e715      	b.n	80127e8 <_scanf_float+0x70>
 80129bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80129c4:	4632      	mov	r2, r6
 80129c6:	4638      	mov	r0, r7
 80129c8:	4798      	blx	r3
 80129ca:	6923      	ldr	r3, [r4, #16]
 80129cc:	3b01      	subs	r3, #1
 80129ce:	6123      	str	r3, [r4, #16]
 80129d0:	e715      	b.n	80127fe <_scanf_float+0x86>
 80129d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80129d6:	2b06      	cmp	r3, #6
 80129d8:	d80a      	bhi.n	80129f0 <_scanf_float+0x278>
 80129da:	f1bb 0f02 	cmp.w	fp, #2
 80129de:	d968      	bls.n	8012ab2 <_scanf_float+0x33a>
 80129e0:	f1ab 0b03 	sub.w	fp, fp, #3
 80129e4:	fa5f fb8b 	uxtb.w	fp, fp
 80129e8:	eba5 0b0b 	sub.w	fp, r5, fp
 80129ec:	455d      	cmp	r5, fp
 80129ee:	d14b      	bne.n	8012a88 <_scanf_float+0x310>
 80129f0:	6823      	ldr	r3, [r4, #0]
 80129f2:	05da      	lsls	r2, r3, #23
 80129f4:	d51f      	bpl.n	8012a36 <_scanf_float+0x2be>
 80129f6:	055b      	lsls	r3, r3, #21
 80129f8:	d468      	bmi.n	8012acc <_scanf_float+0x354>
 80129fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80129fe:	6923      	ldr	r3, [r4, #16]
 8012a00:	2965      	cmp	r1, #101	; 0x65
 8012a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a06:	f105 3bff 	add.w	fp, r5, #4294967295
 8012a0a:	6123      	str	r3, [r4, #16]
 8012a0c:	d00d      	beq.n	8012a2a <_scanf_float+0x2b2>
 8012a0e:	2945      	cmp	r1, #69	; 0x45
 8012a10:	d00b      	beq.n	8012a2a <_scanf_float+0x2b2>
 8012a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a16:	4632      	mov	r2, r6
 8012a18:	4638      	mov	r0, r7
 8012a1a:	4798      	blx	r3
 8012a1c:	6923      	ldr	r3, [r4, #16]
 8012a1e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012a22:	3b01      	subs	r3, #1
 8012a24:	f1a5 0b02 	sub.w	fp, r5, #2
 8012a28:	6123      	str	r3, [r4, #16]
 8012a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a2e:	4632      	mov	r2, r6
 8012a30:	4638      	mov	r0, r7
 8012a32:	4798      	blx	r3
 8012a34:	465d      	mov	r5, fp
 8012a36:	6826      	ldr	r6, [r4, #0]
 8012a38:	f016 0610 	ands.w	r6, r6, #16
 8012a3c:	d17a      	bne.n	8012b34 <_scanf_float+0x3bc>
 8012a3e:	702e      	strb	r6, [r5, #0]
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012a4a:	d142      	bne.n	8012ad2 <_scanf_float+0x35a>
 8012a4c:	9b02      	ldr	r3, [sp, #8]
 8012a4e:	eba9 0303 	sub.w	r3, r9, r3
 8012a52:	425a      	negs	r2, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d149      	bne.n	8012aec <_scanf_float+0x374>
 8012a58:	2200      	movs	r2, #0
 8012a5a:	4641      	mov	r1, r8
 8012a5c:	4638      	mov	r0, r7
 8012a5e:	f000 ffdf 	bl	8013a20 <_strtod_r>
 8012a62:	6825      	ldr	r5, [r4, #0]
 8012a64:	f8da 3000 	ldr.w	r3, [sl]
 8012a68:	f015 0f02 	tst.w	r5, #2
 8012a6c:	f103 0204 	add.w	r2, r3, #4
 8012a70:	ec59 8b10 	vmov	r8, r9, d0
 8012a74:	f8ca 2000 	str.w	r2, [sl]
 8012a78:	d043      	beq.n	8012b02 <_scanf_float+0x38a>
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	e9c3 8900 	strd	r8, r9, [r3]
 8012a80:	68e3      	ldr	r3, [r4, #12]
 8012a82:	3301      	adds	r3, #1
 8012a84:	60e3      	str	r3, [r4, #12]
 8012a86:	e6be      	b.n	8012806 <_scanf_float+0x8e>
 8012a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012a90:	4632      	mov	r2, r6
 8012a92:	4638      	mov	r0, r7
 8012a94:	4798      	blx	r3
 8012a96:	6923      	ldr	r3, [r4, #16]
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	6123      	str	r3, [r4, #16]
 8012a9c:	e7a6      	b.n	80129ec <_scanf_float+0x274>
 8012a9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aa2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012aa6:	4632      	mov	r2, r6
 8012aa8:	4638      	mov	r0, r7
 8012aaa:	4798      	blx	r3
 8012aac:	6923      	ldr	r3, [r4, #16]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	6123      	str	r3, [r4, #16]
 8012ab2:	4545      	cmp	r5, r8
 8012ab4:	d8f3      	bhi.n	8012a9e <_scanf_float+0x326>
 8012ab6:	e6a5      	b.n	8012804 <_scanf_float+0x8c>
 8012ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012abc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012ac0:	4632      	mov	r2, r6
 8012ac2:	4638      	mov	r0, r7
 8012ac4:	4798      	blx	r3
 8012ac6:	6923      	ldr	r3, [r4, #16]
 8012ac8:	3b01      	subs	r3, #1
 8012aca:	6123      	str	r3, [r4, #16]
 8012acc:	4545      	cmp	r5, r8
 8012ace:	d8f3      	bhi.n	8012ab8 <_scanf_float+0x340>
 8012ad0:	e698      	b.n	8012804 <_scanf_float+0x8c>
 8012ad2:	9b03      	ldr	r3, [sp, #12]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d0bf      	beq.n	8012a58 <_scanf_float+0x2e0>
 8012ad8:	9904      	ldr	r1, [sp, #16]
 8012ada:	230a      	movs	r3, #10
 8012adc:	4632      	mov	r2, r6
 8012ade:	3101      	adds	r1, #1
 8012ae0:	4638      	mov	r0, r7
 8012ae2:	f001 f829 	bl	8013b38 <_strtol_r>
 8012ae6:	9b03      	ldr	r3, [sp, #12]
 8012ae8:	9d04      	ldr	r5, [sp, #16]
 8012aea:	1ac2      	subs	r2, r0, r3
 8012aec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012af0:	429d      	cmp	r5, r3
 8012af2:	bf28      	it	cs
 8012af4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012af8:	490f      	ldr	r1, [pc, #60]	; (8012b38 <_scanf_float+0x3c0>)
 8012afa:	4628      	mov	r0, r5
 8012afc:	f000 f8e8 	bl	8012cd0 <siprintf>
 8012b00:	e7aa      	b.n	8012a58 <_scanf_float+0x2e0>
 8012b02:	f015 0504 	ands.w	r5, r5, #4
 8012b06:	d1b8      	bne.n	8012a7a <_scanf_float+0x302>
 8012b08:	681f      	ldr	r7, [r3, #0]
 8012b0a:	ee10 2a10 	vmov	r2, s0
 8012b0e:	464b      	mov	r3, r9
 8012b10:	ee10 0a10 	vmov	r0, s0
 8012b14:	4649      	mov	r1, r9
 8012b16:	f7ee f821 	bl	8000b5c <__aeabi_dcmpun>
 8012b1a:	b128      	cbz	r0, 8012b28 <_scanf_float+0x3b0>
 8012b1c:	4628      	mov	r0, r5
 8012b1e:	f000 f89d 	bl	8012c5c <nanf>
 8012b22:	ed87 0a00 	vstr	s0, [r7]
 8012b26:	e7ab      	b.n	8012a80 <_scanf_float+0x308>
 8012b28:	4640      	mov	r0, r8
 8012b2a:	4649      	mov	r1, r9
 8012b2c:	f7ee f874 	bl	8000c18 <__aeabi_d2f>
 8012b30:	6038      	str	r0, [r7, #0]
 8012b32:	e7a5      	b.n	8012a80 <_scanf_float+0x308>
 8012b34:	2600      	movs	r6, #0
 8012b36:	e666      	b.n	8012806 <_scanf_float+0x8e>
 8012b38:	08017546 	.word	0x08017546

08012b3c <iprintf>:
 8012b3c:	b40f      	push	{r0, r1, r2, r3}
 8012b3e:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <iprintf+0x2c>)
 8012b40:	b513      	push	{r0, r1, r4, lr}
 8012b42:	681c      	ldr	r4, [r3, #0]
 8012b44:	b124      	cbz	r4, 8012b50 <iprintf+0x14>
 8012b46:	69a3      	ldr	r3, [r4, #24]
 8012b48:	b913      	cbnz	r3, 8012b50 <iprintf+0x14>
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f002 f83c 	bl	8014bc8 <__sinit>
 8012b50:	ab05      	add	r3, sp, #20
 8012b52:	9a04      	ldr	r2, [sp, #16]
 8012b54:	68a1      	ldr	r1, [r4, #8]
 8012b56:	9301      	str	r3, [sp, #4]
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f003 fc7d 	bl	8016458 <_vfiprintf_r>
 8012b5e:	b002      	add	sp, #8
 8012b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b64:	b004      	add	sp, #16
 8012b66:	4770      	bx	lr
 8012b68:	2000000c 	.word	0x2000000c

08012b6c <putchar>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4b08      	ldr	r3, [pc, #32]	; (8012b90 <putchar+0x24>)
 8012b70:	681c      	ldr	r4, [r3, #0]
 8012b72:	4605      	mov	r5, r0
 8012b74:	b124      	cbz	r4, 8012b80 <putchar+0x14>
 8012b76:	69a3      	ldr	r3, [r4, #24]
 8012b78:	b913      	cbnz	r3, 8012b80 <putchar+0x14>
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	f002 f824 	bl	8014bc8 <__sinit>
 8012b80:	68a2      	ldr	r2, [r4, #8]
 8012b82:	4629      	mov	r1, r5
 8012b84:	4620      	mov	r0, r4
 8012b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b8a:	f003 bed3 	b.w	8016934 <_putc_r>
 8012b8e:	bf00      	nop
 8012b90:	2000000c 	.word	0x2000000c

08012b94 <_puts_r>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	460e      	mov	r6, r1
 8012b98:	4605      	mov	r5, r0
 8012b9a:	b118      	cbz	r0, 8012ba4 <_puts_r+0x10>
 8012b9c:	6983      	ldr	r3, [r0, #24]
 8012b9e:	b90b      	cbnz	r3, 8012ba4 <_puts_r+0x10>
 8012ba0:	f002 f812 	bl	8014bc8 <__sinit>
 8012ba4:	69ab      	ldr	r3, [r5, #24]
 8012ba6:	68ac      	ldr	r4, [r5, #8]
 8012ba8:	b913      	cbnz	r3, 8012bb0 <_puts_r+0x1c>
 8012baa:	4628      	mov	r0, r5
 8012bac:	f002 f80c 	bl	8014bc8 <__sinit>
 8012bb0:	4b23      	ldr	r3, [pc, #140]	; (8012c40 <_puts_r+0xac>)
 8012bb2:	429c      	cmp	r4, r3
 8012bb4:	d117      	bne.n	8012be6 <_puts_r+0x52>
 8012bb6:	686c      	ldr	r4, [r5, #4]
 8012bb8:	89a3      	ldrh	r3, [r4, #12]
 8012bba:	071b      	lsls	r3, r3, #28
 8012bbc:	d51d      	bpl.n	8012bfa <_puts_r+0x66>
 8012bbe:	6923      	ldr	r3, [r4, #16]
 8012bc0:	b1db      	cbz	r3, 8012bfa <_puts_r+0x66>
 8012bc2:	3e01      	subs	r6, #1
 8012bc4:	68a3      	ldr	r3, [r4, #8]
 8012bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	60a3      	str	r3, [r4, #8]
 8012bce:	b9e9      	cbnz	r1, 8012c0c <_puts_r+0x78>
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	da2e      	bge.n	8012c32 <_puts_r+0x9e>
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	210a      	movs	r1, #10
 8012bd8:	4628      	mov	r0, r5
 8012bda:	f000 ffdf 	bl	8013b9c <__swbuf_r>
 8012bde:	3001      	adds	r0, #1
 8012be0:	d011      	beq.n	8012c06 <_puts_r+0x72>
 8012be2:	200a      	movs	r0, #10
 8012be4:	e011      	b.n	8012c0a <_puts_r+0x76>
 8012be6:	4b17      	ldr	r3, [pc, #92]	; (8012c44 <_puts_r+0xb0>)
 8012be8:	429c      	cmp	r4, r3
 8012bea:	d101      	bne.n	8012bf0 <_puts_r+0x5c>
 8012bec:	68ac      	ldr	r4, [r5, #8]
 8012bee:	e7e3      	b.n	8012bb8 <_puts_r+0x24>
 8012bf0:	4b15      	ldr	r3, [pc, #84]	; (8012c48 <_puts_r+0xb4>)
 8012bf2:	429c      	cmp	r4, r3
 8012bf4:	bf08      	it	eq
 8012bf6:	68ec      	ldreq	r4, [r5, #12]
 8012bf8:	e7de      	b.n	8012bb8 <_puts_r+0x24>
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	f001 f831 	bl	8013c64 <__swsetup_r>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d0dd      	beq.n	8012bc2 <_puts_r+0x2e>
 8012c06:	f04f 30ff 	mov.w	r0, #4294967295
 8012c0a:	bd70      	pop	{r4, r5, r6, pc}
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	da04      	bge.n	8012c1a <_puts_r+0x86>
 8012c10:	69a2      	ldr	r2, [r4, #24]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	dc06      	bgt.n	8012c24 <_puts_r+0x90>
 8012c16:	290a      	cmp	r1, #10
 8012c18:	d004      	beq.n	8012c24 <_puts_r+0x90>
 8012c1a:	6823      	ldr	r3, [r4, #0]
 8012c1c:	1c5a      	adds	r2, r3, #1
 8012c1e:	6022      	str	r2, [r4, #0]
 8012c20:	7019      	strb	r1, [r3, #0]
 8012c22:	e7cf      	b.n	8012bc4 <_puts_r+0x30>
 8012c24:	4622      	mov	r2, r4
 8012c26:	4628      	mov	r0, r5
 8012c28:	f000 ffb8 	bl	8013b9c <__swbuf_r>
 8012c2c:	3001      	adds	r0, #1
 8012c2e:	d1c9      	bne.n	8012bc4 <_puts_r+0x30>
 8012c30:	e7e9      	b.n	8012c06 <_puts_r+0x72>
 8012c32:	6823      	ldr	r3, [r4, #0]
 8012c34:	200a      	movs	r0, #10
 8012c36:	1c5a      	adds	r2, r3, #1
 8012c38:	6022      	str	r2, [r4, #0]
 8012c3a:	7018      	strb	r0, [r3, #0]
 8012c3c:	e7e5      	b.n	8012c0a <_puts_r+0x76>
 8012c3e:	bf00      	nop
 8012c40:	080175d0 	.word	0x080175d0
 8012c44:	080175f0 	.word	0x080175f0
 8012c48:	080175b0 	.word	0x080175b0

08012c4c <puts>:
 8012c4c:	4b02      	ldr	r3, [pc, #8]	; (8012c58 <puts+0xc>)
 8012c4e:	4601      	mov	r1, r0
 8012c50:	6818      	ldr	r0, [r3, #0]
 8012c52:	f7ff bf9f 	b.w	8012b94 <_puts_r>
 8012c56:	bf00      	nop
 8012c58:	2000000c 	.word	0x2000000c

08012c5c <nanf>:
 8012c5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012c64 <nanf+0x8>
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	7fc00000 	.word	0x7fc00000

08012c68 <sniprintf>:
 8012c68:	b40c      	push	{r2, r3}
 8012c6a:	b530      	push	{r4, r5, lr}
 8012c6c:	4b17      	ldr	r3, [pc, #92]	; (8012ccc <sniprintf+0x64>)
 8012c6e:	1e0c      	subs	r4, r1, #0
 8012c70:	b09d      	sub	sp, #116	; 0x74
 8012c72:	681d      	ldr	r5, [r3, #0]
 8012c74:	da08      	bge.n	8012c88 <sniprintf+0x20>
 8012c76:	238b      	movs	r3, #139	; 0x8b
 8012c78:	602b      	str	r3, [r5, #0]
 8012c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c7e:	b01d      	add	sp, #116	; 0x74
 8012c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c84:	b002      	add	sp, #8
 8012c86:	4770      	bx	lr
 8012c88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012c90:	bf14      	ite	ne
 8012c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012c96:	4623      	moveq	r3, r4
 8012c98:	9304      	str	r3, [sp, #16]
 8012c9a:	9307      	str	r3, [sp, #28]
 8012c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ca0:	9002      	str	r0, [sp, #8]
 8012ca2:	9006      	str	r0, [sp, #24]
 8012ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012ca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012caa:	ab21      	add	r3, sp, #132	; 0x84
 8012cac:	a902      	add	r1, sp, #8
 8012cae:	4628      	mov	r0, r5
 8012cb0:	9301      	str	r3, [sp, #4]
 8012cb2:	f003 f905 	bl	8015ec0 <_svfiprintf_r>
 8012cb6:	1c43      	adds	r3, r0, #1
 8012cb8:	bfbc      	itt	lt
 8012cba:	238b      	movlt	r3, #139	; 0x8b
 8012cbc:	602b      	strlt	r3, [r5, #0]
 8012cbe:	2c00      	cmp	r4, #0
 8012cc0:	d0dd      	beq.n	8012c7e <sniprintf+0x16>
 8012cc2:	9b02      	ldr	r3, [sp, #8]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	701a      	strb	r2, [r3, #0]
 8012cc8:	e7d9      	b.n	8012c7e <sniprintf+0x16>
 8012cca:	bf00      	nop
 8012ccc:	2000000c 	.word	0x2000000c

08012cd0 <siprintf>:
 8012cd0:	b40e      	push	{r1, r2, r3}
 8012cd2:	b500      	push	{lr}
 8012cd4:	b09c      	sub	sp, #112	; 0x70
 8012cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8012cd8:	9002      	str	r0, [sp, #8]
 8012cda:	9006      	str	r0, [sp, #24]
 8012cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ce0:	4809      	ldr	r0, [pc, #36]	; (8012d08 <siprintf+0x38>)
 8012ce2:	9107      	str	r1, [sp, #28]
 8012ce4:	9104      	str	r1, [sp, #16]
 8012ce6:	4909      	ldr	r1, [pc, #36]	; (8012d0c <siprintf+0x3c>)
 8012ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cec:	9105      	str	r1, [sp, #20]
 8012cee:	6800      	ldr	r0, [r0, #0]
 8012cf0:	9301      	str	r3, [sp, #4]
 8012cf2:	a902      	add	r1, sp, #8
 8012cf4:	f003 f8e4 	bl	8015ec0 <_svfiprintf_r>
 8012cf8:	9b02      	ldr	r3, [sp, #8]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	701a      	strb	r2, [r3, #0]
 8012cfe:	b01c      	add	sp, #112	; 0x70
 8012d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d04:	b003      	add	sp, #12
 8012d06:	4770      	bx	lr
 8012d08:	2000000c 	.word	0x2000000c
 8012d0c:	ffff0208 	.word	0xffff0208

08012d10 <siscanf>:
 8012d10:	b40e      	push	{r1, r2, r3}
 8012d12:	b530      	push	{r4, r5, lr}
 8012d14:	b09c      	sub	sp, #112	; 0x70
 8012d16:	ac1f      	add	r4, sp, #124	; 0x7c
 8012d18:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012d1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8012d20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012d24:	9002      	str	r0, [sp, #8]
 8012d26:	9006      	str	r0, [sp, #24]
 8012d28:	f7ed fa6a 	bl	8000200 <strlen>
 8012d2c:	4b0b      	ldr	r3, [pc, #44]	; (8012d5c <siscanf+0x4c>)
 8012d2e:	9003      	str	r0, [sp, #12]
 8012d30:	9007      	str	r0, [sp, #28]
 8012d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d34:	480a      	ldr	r0, [pc, #40]	; (8012d60 <siscanf+0x50>)
 8012d36:	9401      	str	r4, [sp, #4]
 8012d38:	2300      	movs	r3, #0
 8012d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8012d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d46:	462a      	mov	r2, r5
 8012d48:	4623      	mov	r3, r4
 8012d4a:	a902      	add	r1, sp, #8
 8012d4c:	6800      	ldr	r0, [r0, #0]
 8012d4e:	f003 fa09 	bl	8016164 <__ssvfiscanf_r>
 8012d52:	b01c      	add	sp, #112	; 0x70
 8012d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d58:	b003      	add	sp, #12
 8012d5a:	4770      	bx	lr
 8012d5c:	08012d87 	.word	0x08012d87
 8012d60:	2000000c 	.word	0x2000000c

08012d64 <__sread>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	460c      	mov	r4, r1
 8012d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6c:	f003 fe18 	bl	80169a0 <_read_r>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	bfab      	itete	ge
 8012d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d76:	89a3      	ldrhlt	r3, [r4, #12]
 8012d78:	181b      	addge	r3, r3, r0
 8012d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d7e:	bfac      	ite	ge
 8012d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d82:	81a3      	strhlt	r3, [r4, #12]
 8012d84:	bd10      	pop	{r4, pc}

08012d86 <__seofread>:
 8012d86:	2000      	movs	r0, #0
 8012d88:	4770      	bx	lr

08012d8a <__swrite>:
 8012d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8e:	461f      	mov	r7, r3
 8012d90:	898b      	ldrh	r3, [r1, #12]
 8012d92:	05db      	lsls	r3, r3, #23
 8012d94:	4605      	mov	r5, r0
 8012d96:	460c      	mov	r4, r1
 8012d98:	4616      	mov	r6, r2
 8012d9a:	d505      	bpl.n	8012da8 <__swrite+0x1e>
 8012d9c:	2302      	movs	r3, #2
 8012d9e:	2200      	movs	r2, #0
 8012da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012da4:	f002 fae2 	bl	801536c <_lseek_r>
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	4632      	mov	r2, r6
 8012db6:	463b      	mov	r3, r7
 8012db8:	4628      	mov	r0, r5
 8012dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbe:	f000 bf3f 	b.w	8013c40 <_write_r>

08012dc2 <__sseek>:
 8012dc2:	b510      	push	{r4, lr}
 8012dc4:	460c      	mov	r4, r1
 8012dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dca:	f002 facf 	bl	801536c <_lseek_r>
 8012dce:	1c43      	adds	r3, r0, #1
 8012dd0:	89a3      	ldrh	r3, [r4, #12]
 8012dd2:	bf15      	itete	ne
 8012dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012dde:	81a3      	strheq	r3, [r4, #12]
 8012de0:	bf18      	it	ne
 8012de2:	81a3      	strhne	r3, [r4, #12]
 8012de4:	bd10      	pop	{r4, pc}

08012de6 <__sclose>:
 8012de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dea:	f000 bfa9 	b.w	8013d40 <_close_r>

08012dee <strcpy>:
 8012dee:	4603      	mov	r3, r0
 8012df0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012df4:	f803 2b01 	strb.w	r2, [r3], #1
 8012df8:	2a00      	cmp	r2, #0
 8012dfa:	d1f9      	bne.n	8012df0 <strcpy+0x2>
 8012dfc:	4770      	bx	lr

08012dfe <sulp>:
 8012dfe:	b570      	push	{r4, r5, r6, lr}
 8012e00:	4604      	mov	r4, r0
 8012e02:	460d      	mov	r5, r1
 8012e04:	ec45 4b10 	vmov	d0, r4, r5
 8012e08:	4616      	mov	r6, r2
 8012e0a:	f002 fe15 	bl	8015a38 <__ulp>
 8012e0e:	ec51 0b10 	vmov	r0, r1, d0
 8012e12:	b17e      	cbz	r6, 8012e34 <sulp+0x36>
 8012e14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	dd09      	ble.n	8012e34 <sulp+0x36>
 8012e20:	051b      	lsls	r3, r3, #20
 8012e22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012e26:	2400      	movs	r4, #0
 8012e28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	462b      	mov	r3, r5
 8012e30:	f7ed fbfa 	bl	8000628 <__aeabi_dmul>
 8012e34:	bd70      	pop	{r4, r5, r6, pc}
	...

08012e38 <_strtod_l>:
 8012e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3c:	461f      	mov	r7, r3
 8012e3e:	b0a1      	sub	sp, #132	; 0x84
 8012e40:	2300      	movs	r3, #0
 8012e42:	4681      	mov	r9, r0
 8012e44:	4638      	mov	r0, r7
 8012e46:	460e      	mov	r6, r1
 8012e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8012e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8012e4c:	f002 fa7e 	bl	801534c <__localeconv_l>
 8012e50:	4680      	mov	r8, r0
 8012e52:	6800      	ldr	r0, [r0, #0]
 8012e54:	f7ed f9d4 	bl	8000200 <strlen>
 8012e58:	f04f 0a00 	mov.w	sl, #0
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	f04f 0b00 	mov.w	fp, #0
 8012e62:	961b      	str	r6, [sp, #108]	; 0x6c
 8012e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e66:	781a      	ldrb	r2, [r3, #0]
 8012e68:	2a0d      	cmp	r2, #13
 8012e6a:	d832      	bhi.n	8012ed2 <_strtod_l+0x9a>
 8012e6c:	2a09      	cmp	r2, #9
 8012e6e:	d236      	bcs.n	8012ede <_strtod_l+0xa6>
 8012e70:	2a00      	cmp	r2, #0
 8012e72:	d03e      	beq.n	8012ef2 <_strtod_l+0xba>
 8012e74:	2300      	movs	r3, #0
 8012e76:	930d      	str	r3, [sp, #52]	; 0x34
 8012e78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012e7a:	782b      	ldrb	r3, [r5, #0]
 8012e7c:	2b30      	cmp	r3, #48	; 0x30
 8012e7e:	f040 80ac 	bne.w	8012fda <_strtod_l+0x1a2>
 8012e82:	786b      	ldrb	r3, [r5, #1]
 8012e84:	2b58      	cmp	r3, #88	; 0x58
 8012e86:	d001      	beq.n	8012e8c <_strtod_l+0x54>
 8012e88:	2b78      	cmp	r3, #120	; 0x78
 8012e8a:	d167      	bne.n	8012f5c <_strtod_l+0x124>
 8012e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e8e:	9301      	str	r3, [sp, #4]
 8012e90:	ab1c      	add	r3, sp, #112	; 0x70
 8012e92:	9300      	str	r3, [sp, #0]
 8012e94:	9702      	str	r7, [sp, #8]
 8012e96:	ab1d      	add	r3, sp, #116	; 0x74
 8012e98:	4a88      	ldr	r2, [pc, #544]	; (80130bc <_strtod_l+0x284>)
 8012e9a:	a91b      	add	r1, sp, #108	; 0x6c
 8012e9c:	4648      	mov	r0, r9
 8012e9e:	f001 ff6c 	bl	8014d7a <__gethex>
 8012ea2:	f010 0407 	ands.w	r4, r0, #7
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	d005      	beq.n	8012eb6 <_strtod_l+0x7e>
 8012eaa:	2c06      	cmp	r4, #6
 8012eac:	d12b      	bne.n	8012f06 <_strtod_l+0xce>
 8012eae:	3501      	adds	r5, #1
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8012eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8012eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f040 859a 	bne.w	80139f2 <_strtod_l+0xbba>
 8012ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ec0:	b1e3      	cbz	r3, 8012efc <_strtod_l+0xc4>
 8012ec2:	4652      	mov	r2, sl
 8012ec4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012ec8:	ec43 2b10 	vmov	d0, r2, r3
 8012ecc:	b021      	add	sp, #132	; 0x84
 8012ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed2:	2a2b      	cmp	r2, #43	; 0x2b
 8012ed4:	d015      	beq.n	8012f02 <_strtod_l+0xca>
 8012ed6:	2a2d      	cmp	r2, #45	; 0x2d
 8012ed8:	d004      	beq.n	8012ee4 <_strtod_l+0xac>
 8012eda:	2a20      	cmp	r2, #32
 8012edc:	d1ca      	bne.n	8012e74 <_strtod_l+0x3c>
 8012ede:	3301      	adds	r3, #1
 8012ee0:	931b      	str	r3, [sp, #108]	; 0x6c
 8012ee2:	e7bf      	b.n	8012e64 <_strtod_l+0x2c>
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	920d      	str	r2, [sp, #52]	; 0x34
 8012ee8:	1c5a      	adds	r2, r3, #1
 8012eea:	921b      	str	r2, [sp, #108]	; 0x6c
 8012eec:	785b      	ldrb	r3, [r3, #1]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d1c2      	bne.n	8012e78 <_strtod_l+0x40>
 8012ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ef4:	961b      	str	r6, [sp, #108]	; 0x6c
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f040 8579 	bne.w	80139ee <_strtod_l+0xbb6>
 8012efc:	4652      	mov	r2, sl
 8012efe:	465b      	mov	r3, fp
 8012f00:	e7e2      	b.n	8012ec8 <_strtod_l+0x90>
 8012f02:	2200      	movs	r2, #0
 8012f04:	e7ef      	b.n	8012ee6 <_strtod_l+0xae>
 8012f06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012f08:	b13a      	cbz	r2, 8012f1a <_strtod_l+0xe2>
 8012f0a:	2135      	movs	r1, #53	; 0x35
 8012f0c:	a81e      	add	r0, sp, #120	; 0x78
 8012f0e:	f002 fe8b 	bl	8015c28 <__copybits>
 8012f12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012f14:	4648      	mov	r0, r9
 8012f16:	f002 faf8 	bl	801550a <_Bfree>
 8012f1a:	3c01      	subs	r4, #1
 8012f1c:	2c04      	cmp	r4, #4
 8012f1e:	d806      	bhi.n	8012f2e <_strtod_l+0xf6>
 8012f20:	e8df f004 	tbb	[pc, r4]
 8012f24:	1714030a 	.word	0x1714030a
 8012f28:	0a          	.byte	0x0a
 8012f29:	00          	.byte	0x00
 8012f2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012f2e:	0730      	lsls	r0, r6, #28
 8012f30:	d5c1      	bpl.n	8012eb6 <_strtod_l+0x7e>
 8012f32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012f36:	e7be      	b.n	8012eb6 <_strtod_l+0x7e>
 8012f38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012f3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012f3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012f42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012f46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012f4a:	e7f0      	b.n	8012f2e <_strtod_l+0xf6>
 8012f4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80130c0 <_strtod_l+0x288>
 8012f50:	e7ed      	b.n	8012f2e <_strtod_l+0xf6>
 8012f52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012f56:	f04f 3aff 	mov.w	sl, #4294967295
 8012f5a:	e7e8      	b.n	8012f2e <_strtod_l+0xf6>
 8012f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8012f62:	785b      	ldrb	r3, [r3, #1]
 8012f64:	2b30      	cmp	r3, #48	; 0x30
 8012f66:	d0f9      	beq.n	8012f5c <_strtod_l+0x124>
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d0a4      	beq.n	8012eb6 <_strtod_l+0x7e>
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	2500      	movs	r5, #0
 8012f70:	9306      	str	r3, [sp, #24]
 8012f72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f74:	9308      	str	r3, [sp, #32]
 8012f76:	9507      	str	r5, [sp, #28]
 8012f78:	9505      	str	r5, [sp, #20]
 8012f7a:	220a      	movs	r2, #10
 8012f7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012f7e:	7807      	ldrb	r7, [r0, #0]
 8012f80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012f84:	b2d9      	uxtb	r1, r3
 8012f86:	2909      	cmp	r1, #9
 8012f88:	d929      	bls.n	8012fde <_strtod_l+0x1a6>
 8012f8a:	4622      	mov	r2, r4
 8012f8c:	f8d8 1000 	ldr.w	r1, [r8]
 8012f90:	f003 fd5a 	bl	8016a48 <strncmp>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d031      	beq.n	8012ffc <_strtod_l+0x1c4>
 8012f98:	2000      	movs	r0, #0
 8012f9a:	9c05      	ldr	r4, [sp, #20]
 8012f9c:	9004      	str	r0, [sp, #16]
 8012f9e:	463b      	mov	r3, r7
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	2b65      	cmp	r3, #101	; 0x65
 8012fa4:	d001      	beq.n	8012faa <_strtod_l+0x172>
 8012fa6:	2b45      	cmp	r3, #69	; 0x45
 8012fa8:	d114      	bne.n	8012fd4 <_strtod_l+0x19c>
 8012faa:	b924      	cbnz	r4, 8012fb6 <_strtod_l+0x17e>
 8012fac:	b910      	cbnz	r0, 8012fb4 <_strtod_l+0x17c>
 8012fae:	9b06      	ldr	r3, [sp, #24]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d09e      	beq.n	8012ef2 <_strtod_l+0xba>
 8012fb4:	2400      	movs	r4, #0
 8012fb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012fb8:	1c73      	adds	r3, r6, #1
 8012fba:	931b      	str	r3, [sp, #108]	; 0x6c
 8012fbc:	7873      	ldrb	r3, [r6, #1]
 8012fbe:	2b2b      	cmp	r3, #43	; 0x2b
 8012fc0:	d078      	beq.n	80130b4 <_strtod_l+0x27c>
 8012fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8012fc4:	d070      	beq.n	80130a8 <_strtod_l+0x270>
 8012fc6:	f04f 0c00 	mov.w	ip, #0
 8012fca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012fce:	2f09      	cmp	r7, #9
 8012fd0:	d97c      	bls.n	80130cc <_strtod_l+0x294>
 8012fd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8012fd4:	f04f 0e00 	mov.w	lr, #0
 8012fd8:	e09a      	b.n	8013110 <_strtod_l+0x2d8>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	e7c7      	b.n	8012f6e <_strtod_l+0x136>
 8012fde:	9905      	ldr	r1, [sp, #20]
 8012fe0:	2908      	cmp	r1, #8
 8012fe2:	bfdd      	ittte	le
 8012fe4:	9907      	ldrle	r1, [sp, #28]
 8012fe6:	fb02 3301 	mlale	r3, r2, r1, r3
 8012fea:	9307      	strle	r3, [sp, #28]
 8012fec:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012ff0:	9b05      	ldr	r3, [sp, #20]
 8012ff2:	3001      	adds	r0, #1
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	9305      	str	r3, [sp, #20]
 8012ff8:	901b      	str	r0, [sp, #108]	; 0x6c
 8012ffa:	e7bf      	b.n	8012f7c <_strtod_l+0x144>
 8012ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ffe:	191a      	adds	r2, r3, r4
 8013000:	921b      	str	r2, [sp, #108]	; 0x6c
 8013002:	9a05      	ldr	r2, [sp, #20]
 8013004:	5d1b      	ldrb	r3, [r3, r4]
 8013006:	2a00      	cmp	r2, #0
 8013008:	d037      	beq.n	801307a <_strtod_l+0x242>
 801300a:	9c05      	ldr	r4, [sp, #20]
 801300c:	4602      	mov	r2, r0
 801300e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013012:	2909      	cmp	r1, #9
 8013014:	d913      	bls.n	801303e <_strtod_l+0x206>
 8013016:	2101      	movs	r1, #1
 8013018:	9104      	str	r1, [sp, #16]
 801301a:	e7c2      	b.n	8012fa2 <_strtod_l+0x16a>
 801301c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801301e:	1c5a      	adds	r2, r3, #1
 8013020:	921b      	str	r2, [sp, #108]	; 0x6c
 8013022:	785b      	ldrb	r3, [r3, #1]
 8013024:	3001      	adds	r0, #1
 8013026:	2b30      	cmp	r3, #48	; 0x30
 8013028:	d0f8      	beq.n	801301c <_strtod_l+0x1e4>
 801302a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801302e:	2a08      	cmp	r2, #8
 8013030:	f200 84e4 	bhi.w	80139fc <_strtod_l+0xbc4>
 8013034:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013036:	9208      	str	r2, [sp, #32]
 8013038:	4602      	mov	r2, r0
 801303a:	2000      	movs	r0, #0
 801303c:	4604      	mov	r4, r0
 801303e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013042:	f100 0101 	add.w	r1, r0, #1
 8013046:	d012      	beq.n	801306e <_strtod_l+0x236>
 8013048:	440a      	add	r2, r1
 801304a:	eb00 0c04 	add.w	ip, r0, r4
 801304e:	4621      	mov	r1, r4
 8013050:	270a      	movs	r7, #10
 8013052:	458c      	cmp	ip, r1
 8013054:	d113      	bne.n	801307e <_strtod_l+0x246>
 8013056:	1821      	adds	r1, r4, r0
 8013058:	2908      	cmp	r1, #8
 801305a:	f104 0401 	add.w	r4, r4, #1
 801305e:	4404      	add	r4, r0
 8013060:	dc19      	bgt.n	8013096 <_strtod_l+0x25e>
 8013062:	9b07      	ldr	r3, [sp, #28]
 8013064:	210a      	movs	r1, #10
 8013066:	fb01 e303 	mla	r3, r1, r3, lr
 801306a:	9307      	str	r3, [sp, #28]
 801306c:	2100      	movs	r1, #0
 801306e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013070:	1c58      	adds	r0, r3, #1
 8013072:	901b      	str	r0, [sp, #108]	; 0x6c
 8013074:	785b      	ldrb	r3, [r3, #1]
 8013076:	4608      	mov	r0, r1
 8013078:	e7c9      	b.n	801300e <_strtod_l+0x1d6>
 801307a:	9805      	ldr	r0, [sp, #20]
 801307c:	e7d3      	b.n	8013026 <_strtod_l+0x1ee>
 801307e:	2908      	cmp	r1, #8
 8013080:	f101 0101 	add.w	r1, r1, #1
 8013084:	dc03      	bgt.n	801308e <_strtod_l+0x256>
 8013086:	9b07      	ldr	r3, [sp, #28]
 8013088:	437b      	muls	r3, r7
 801308a:	9307      	str	r3, [sp, #28]
 801308c:	e7e1      	b.n	8013052 <_strtod_l+0x21a>
 801308e:	2910      	cmp	r1, #16
 8013090:	bfd8      	it	le
 8013092:	437d      	mulle	r5, r7
 8013094:	e7dd      	b.n	8013052 <_strtod_l+0x21a>
 8013096:	2c10      	cmp	r4, #16
 8013098:	bfdc      	itt	le
 801309a:	210a      	movle	r1, #10
 801309c:	fb01 e505 	mlale	r5, r1, r5, lr
 80130a0:	e7e4      	b.n	801306c <_strtod_l+0x234>
 80130a2:	2301      	movs	r3, #1
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	e781      	b.n	8012fac <_strtod_l+0x174>
 80130a8:	f04f 0c01 	mov.w	ip, #1
 80130ac:	1cb3      	adds	r3, r6, #2
 80130ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80130b0:	78b3      	ldrb	r3, [r6, #2]
 80130b2:	e78a      	b.n	8012fca <_strtod_l+0x192>
 80130b4:	f04f 0c00 	mov.w	ip, #0
 80130b8:	e7f8      	b.n	80130ac <_strtod_l+0x274>
 80130ba:	bf00      	nop
 80130bc:	0801754c 	.word	0x0801754c
 80130c0:	7ff00000 	.word	0x7ff00000
 80130c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130c6:	1c5f      	adds	r7, r3, #1
 80130c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80130ca:	785b      	ldrb	r3, [r3, #1]
 80130cc:	2b30      	cmp	r3, #48	; 0x30
 80130ce:	d0f9      	beq.n	80130c4 <_strtod_l+0x28c>
 80130d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80130d4:	2f08      	cmp	r7, #8
 80130d6:	f63f af7d 	bhi.w	8012fd4 <_strtod_l+0x19c>
 80130da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80130de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130e0:	930a      	str	r3, [sp, #40]	; 0x28
 80130e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130e4:	1c5f      	adds	r7, r3, #1
 80130e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80130e8:	785b      	ldrb	r3, [r3, #1]
 80130ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80130ee:	f1b8 0f09 	cmp.w	r8, #9
 80130f2:	d937      	bls.n	8013164 <_strtod_l+0x32c>
 80130f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80130f6:	1a7f      	subs	r7, r7, r1
 80130f8:	2f08      	cmp	r7, #8
 80130fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80130fe:	dc37      	bgt.n	8013170 <_strtod_l+0x338>
 8013100:	45be      	cmp	lr, r7
 8013102:	bfa8      	it	ge
 8013104:	46be      	movge	lr, r7
 8013106:	f1bc 0f00 	cmp.w	ip, #0
 801310a:	d001      	beq.n	8013110 <_strtod_l+0x2d8>
 801310c:	f1ce 0e00 	rsb	lr, lr, #0
 8013110:	2c00      	cmp	r4, #0
 8013112:	d151      	bne.n	80131b8 <_strtod_l+0x380>
 8013114:	2800      	cmp	r0, #0
 8013116:	f47f aece 	bne.w	8012eb6 <_strtod_l+0x7e>
 801311a:	9a06      	ldr	r2, [sp, #24]
 801311c:	2a00      	cmp	r2, #0
 801311e:	f47f aeca 	bne.w	8012eb6 <_strtod_l+0x7e>
 8013122:	9a04      	ldr	r2, [sp, #16]
 8013124:	2a00      	cmp	r2, #0
 8013126:	f47f aee4 	bne.w	8012ef2 <_strtod_l+0xba>
 801312a:	2b4e      	cmp	r3, #78	; 0x4e
 801312c:	d027      	beq.n	801317e <_strtod_l+0x346>
 801312e:	dc21      	bgt.n	8013174 <_strtod_l+0x33c>
 8013130:	2b49      	cmp	r3, #73	; 0x49
 8013132:	f47f aede 	bne.w	8012ef2 <_strtod_l+0xba>
 8013136:	49a0      	ldr	r1, [pc, #640]	; (80133b8 <_strtod_l+0x580>)
 8013138:	a81b      	add	r0, sp, #108	; 0x6c
 801313a:	f002 f851 	bl	80151e0 <__match>
 801313e:	2800      	cmp	r0, #0
 8013140:	f43f aed7 	beq.w	8012ef2 <_strtod_l+0xba>
 8013144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013146:	499d      	ldr	r1, [pc, #628]	; (80133bc <_strtod_l+0x584>)
 8013148:	3b01      	subs	r3, #1
 801314a:	a81b      	add	r0, sp, #108	; 0x6c
 801314c:	931b      	str	r3, [sp, #108]	; 0x6c
 801314e:	f002 f847 	bl	80151e0 <__match>
 8013152:	b910      	cbnz	r0, 801315a <_strtod_l+0x322>
 8013154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013156:	3301      	adds	r3, #1
 8013158:	931b      	str	r3, [sp, #108]	; 0x6c
 801315a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80133d0 <_strtod_l+0x598>
 801315e:	f04f 0a00 	mov.w	sl, #0
 8013162:	e6a8      	b.n	8012eb6 <_strtod_l+0x7e>
 8013164:	210a      	movs	r1, #10
 8013166:	fb01 3e0e 	mla	lr, r1, lr, r3
 801316a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801316e:	e7b8      	b.n	80130e2 <_strtod_l+0x2aa>
 8013170:	46be      	mov	lr, r7
 8013172:	e7c8      	b.n	8013106 <_strtod_l+0x2ce>
 8013174:	2b69      	cmp	r3, #105	; 0x69
 8013176:	d0de      	beq.n	8013136 <_strtod_l+0x2fe>
 8013178:	2b6e      	cmp	r3, #110	; 0x6e
 801317a:	f47f aeba 	bne.w	8012ef2 <_strtod_l+0xba>
 801317e:	4990      	ldr	r1, [pc, #576]	; (80133c0 <_strtod_l+0x588>)
 8013180:	a81b      	add	r0, sp, #108	; 0x6c
 8013182:	f002 f82d 	bl	80151e0 <__match>
 8013186:	2800      	cmp	r0, #0
 8013188:	f43f aeb3 	beq.w	8012ef2 <_strtod_l+0xba>
 801318c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b28      	cmp	r3, #40	; 0x28
 8013192:	d10e      	bne.n	80131b2 <_strtod_l+0x37a>
 8013194:	aa1e      	add	r2, sp, #120	; 0x78
 8013196:	498b      	ldr	r1, [pc, #556]	; (80133c4 <_strtod_l+0x58c>)
 8013198:	a81b      	add	r0, sp, #108	; 0x6c
 801319a:	f002 f835 	bl	8015208 <__hexnan>
 801319e:	2805      	cmp	r0, #5
 80131a0:	d107      	bne.n	80131b2 <_strtod_l+0x37a>
 80131a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80131a4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80131a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80131ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80131b0:	e681      	b.n	8012eb6 <_strtod_l+0x7e>
 80131b2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80133d8 <_strtod_l+0x5a0>
 80131b6:	e7d2      	b.n	801315e <_strtod_l+0x326>
 80131b8:	ebae 0302 	sub.w	r3, lr, r2
 80131bc:	9306      	str	r3, [sp, #24]
 80131be:	9b05      	ldr	r3, [sp, #20]
 80131c0:	9807      	ldr	r0, [sp, #28]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	bf08      	it	eq
 80131c6:	4623      	moveq	r3, r4
 80131c8:	2c10      	cmp	r4, #16
 80131ca:	9305      	str	r3, [sp, #20]
 80131cc:	46a0      	mov	r8, r4
 80131ce:	bfa8      	it	ge
 80131d0:	f04f 0810 	movge.w	r8, #16
 80131d4:	f7ed f9ae 	bl	8000534 <__aeabi_ui2d>
 80131d8:	2c09      	cmp	r4, #9
 80131da:	4682      	mov	sl, r0
 80131dc:	468b      	mov	fp, r1
 80131de:	dc13      	bgt.n	8013208 <_strtod_l+0x3d0>
 80131e0:	9b06      	ldr	r3, [sp, #24]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	f43f ae67 	beq.w	8012eb6 <_strtod_l+0x7e>
 80131e8:	9b06      	ldr	r3, [sp, #24]
 80131ea:	dd7a      	ble.n	80132e2 <_strtod_l+0x4aa>
 80131ec:	2b16      	cmp	r3, #22
 80131ee:	dc61      	bgt.n	80132b4 <_strtod_l+0x47c>
 80131f0:	4a75      	ldr	r2, [pc, #468]	; (80133c8 <_strtod_l+0x590>)
 80131f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80131f6:	e9de 0100 	ldrd	r0, r1, [lr]
 80131fa:	4652      	mov	r2, sl
 80131fc:	465b      	mov	r3, fp
 80131fe:	f7ed fa13 	bl	8000628 <__aeabi_dmul>
 8013202:	4682      	mov	sl, r0
 8013204:	468b      	mov	fp, r1
 8013206:	e656      	b.n	8012eb6 <_strtod_l+0x7e>
 8013208:	4b6f      	ldr	r3, [pc, #444]	; (80133c8 <_strtod_l+0x590>)
 801320a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801320e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013212:	f7ed fa09 	bl	8000628 <__aeabi_dmul>
 8013216:	4606      	mov	r6, r0
 8013218:	4628      	mov	r0, r5
 801321a:	460f      	mov	r7, r1
 801321c:	f7ed f98a 	bl	8000534 <__aeabi_ui2d>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4630      	mov	r0, r6
 8013226:	4639      	mov	r1, r7
 8013228:	f7ed f848 	bl	80002bc <__adddf3>
 801322c:	2c0f      	cmp	r4, #15
 801322e:	4682      	mov	sl, r0
 8013230:	468b      	mov	fp, r1
 8013232:	ddd5      	ble.n	80131e0 <_strtod_l+0x3a8>
 8013234:	9b06      	ldr	r3, [sp, #24]
 8013236:	eba4 0808 	sub.w	r8, r4, r8
 801323a:	4498      	add	r8, r3
 801323c:	f1b8 0f00 	cmp.w	r8, #0
 8013240:	f340 8096 	ble.w	8013370 <_strtod_l+0x538>
 8013244:	f018 030f 	ands.w	r3, r8, #15
 8013248:	d00a      	beq.n	8013260 <_strtod_l+0x428>
 801324a:	495f      	ldr	r1, [pc, #380]	; (80133c8 <_strtod_l+0x590>)
 801324c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013250:	4652      	mov	r2, sl
 8013252:	465b      	mov	r3, fp
 8013254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013258:	f7ed f9e6 	bl	8000628 <__aeabi_dmul>
 801325c:	4682      	mov	sl, r0
 801325e:	468b      	mov	fp, r1
 8013260:	f038 080f 	bics.w	r8, r8, #15
 8013264:	d073      	beq.n	801334e <_strtod_l+0x516>
 8013266:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801326a:	dd47      	ble.n	80132fc <_strtod_l+0x4c4>
 801326c:	2400      	movs	r4, #0
 801326e:	46a0      	mov	r8, r4
 8013270:	9407      	str	r4, [sp, #28]
 8013272:	9405      	str	r4, [sp, #20]
 8013274:	2322      	movs	r3, #34	; 0x22
 8013276:	f8df b158 	ldr.w	fp, [pc, #344]	; 80133d0 <_strtod_l+0x598>
 801327a:	f8c9 3000 	str.w	r3, [r9]
 801327e:	f04f 0a00 	mov.w	sl, #0
 8013282:	9b07      	ldr	r3, [sp, #28]
 8013284:	2b00      	cmp	r3, #0
 8013286:	f43f ae16 	beq.w	8012eb6 <_strtod_l+0x7e>
 801328a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801328c:	4648      	mov	r0, r9
 801328e:	f002 f93c 	bl	801550a <_Bfree>
 8013292:	9905      	ldr	r1, [sp, #20]
 8013294:	4648      	mov	r0, r9
 8013296:	f002 f938 	bl	801550a <_Bfree>
 801329a:	4641      	mov	r1, r8
 801329c:	4648      	mov	r0, r9
 801329e:	f002 f934 	bl	801550a <_Bfree>
 80132a2:	9907      	ldr	r1, [sp, #28]
 80132a4:	4648      	mov	r0, r9
 80132a6:	f002 f930 	bl	801550a <_Bfree>
 80132aa:	4621      	mov	r1, r4
 80132ac:	4648      	mov	r0, r9
 80132ae:	f002 f92c 	bl	801550a <_Bfree>
 80132b2:	e600      	b.n	8012eb6 <_strtod_l+0x7e>
 80132b4:	9a06      	ldr	r2, [sp, #24]
 80132b6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80132ba:	4293      	cmp	r3, r2
 80132bc:	dbba      	blt.n	8013234 <_strtod_l+0x3fc>
 80132be:	4d42      	ldr	r5, [pc, #264]	; (80133c8 <_strtod_l+0x590>)
 80132c0:	f1c4 040f 	rsb	r4, r4, #15
 80132c4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80132c8:	4652      	mov	r2, sl
 80132ca:	465b      	mov	r3, fp
 80132cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132d0:	f7ed f9aa 	bl	8000628 <__aeabi_dmul>
 80132d4:	9b06      	ldr	r3, [sp, #24]
 80132d6:	1b1c      	subs	r4, r3, r4
 80132d8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80132dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80132e0:	e78d      	b.n	80131fe <_strtod_l+0x3c6>
 80132e2:	f113 0f16 	cmn.w	r3, #22
 80132e6:	dba5      	blt.n	8013234 <_strtod_l+0x3fc>
 80132e8:	4a37      	ldr	r2, [pc, #220]	; (80133c8 <_strtod_l+0x590>)
 80132ea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80132ee:	e9d2 2300 	ldrd	r2, r3, [r2]
 80132f2:	4650      	mov	r0, sl
 80132f4:	4659      	mov	r1, fp
 80132f6:	f7ed fac1 	bl	800087c <__aeabi_ddiv>
 80132fa:	e782      	b.n	8013202 <_strtod_l+0x3ca>
 80132fc:	2300      	movs	r3, #0
 80132fe:	4e33      	ldr	r6, [pc, #204]	; (80133cc <_strtod_l+0x594>)
 8013300:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013304:	4650      	mov	r0, sl
 8013306:	4659      	mov	r1, fp
 8013308:	461d      	mov	r5, r3
 801330a:	f1b8 0f01 	cmp.w	r8, #1
 801330e:	dc21      	bgt.n	8013354 <_strtod_l+0x51c>
 8013310:	b10b      	cbz	r3, 8013316 <_strtod_l+0x4de>
 8013312:	4682      	mov	sl, r0
 8013314:	468b      	mov	fp, r1
 8013316:	4b2d      	ldr	r3, [pc, #180]	; (80133cc <_strtod_l+0x594>)
 8013318:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801331c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013320:	4652      	mov	r2, sl
 8013322:	465b      	mov	r3, fp
 8013324:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013328:	f7ed f97e 	bl	8000628 <__aeabi_dmul>
 801332c:	4b28      	ldr	r3, [pc, #160]	; (80133d0 <_strtod_l+0x598>)
 801332e:	460a      	mov	r2, r1
 8013330:	400b      	ands	r3, r1
 8013332:	4928      	ldr	r1, [pc, #160]	; (80133d4 <_strtod_l+0x59c>)
 8013334:	428b      	cmp	r3, r1
 8013336:	4682      	mov	sl, r0
 8013338:	d898      	bhi.n	801326c <_strtod_l+0x434>
 801333a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801333e:	428b      	cmp	r3, r1
 8013340:	bf86      	itte	hi
 8013342:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80133dc <_strtod_l+0x5a4>
 8013346:	f04f 3aff 	movhi.w	sl, #4294967295
 801334a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801334e:	2300      	movs	r3, #0
 8013350:	9304      	str	r3, [sp, #16]
 8013352:	e077      	b.n	8013444 <_strtod_l+0x60c>
 8013354:	f018 0f01 	tst.w	r8, #1
 8013358:	d006      	beq.n	8013368 <_strtod_l+0x530>
 801335a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013362:	f7ed f961 	bl	8000628 <__aeabi_dmul>
 8013366:	2301      	movs	r3, #1
 8013368:	3501      	adds	r5, #1
 801336a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801336e:	e7cc      	b.n	801330a <_strtod_l+0x4d2>
 8013370:	d0ed      	beq.n	801334e <_strtod_l+0x516>
 8013372:	f1c8 0800 	rsb	r8, r8, #0
 8013376:	f018 020f 	ands.w	r2, r8, #15
 801337a:	d00a      	beq.n	8013392 <_strtod_l+0x55a>
 801337c:	4b12      	ldr	r3, [pc, #72]	; (80133c8 <_strtod_l+0x590>)
 801337e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013382:	4650      	mov	r0, sl
 8013384:	4659      	mov	r1, fp
 8013386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338a:	f7ed fa77 	bl	800087c <__aeabi_ddiv>
 801338e:	4682      	mov	sl, r0
 8013390:	468b      	mov	fp, r1
 8013392:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013396:	d0da      	beq.n	801334e <_strtod_l+0x516>
 8013398:	f1b8 0f1f 	cmp.w	r8, #31
 801339c:	dd20      	ble.n	80133e0 <_strtod_l+0x5a8>
 801339e:	2400      	movs	r4, #0
 80133a0:	46a0      	mov	r8, r4
 80133a2:	9407      	str	r4, [sp, #28]
 80133a4:	9405      	str	r4, [sp, #20]
 80133a6:	2322      	movs	r3, #34	; 0x22
 80133a8:	f04f 0a00 	mov.w	sl, #0
 80133ac:	f04f 0b00 	mov.w	fp, #0
 80133b0:	f8c9 3000 	str.w	r3, [r9]
 80133b4:	e765      	b.n	8013282 <_strtod_l+0x44a>
 80133b6:	bf00      	nop
 80133b8:	08017519 	.word	0x08017519
 80133bc:	080175a3 	.word	0x080175a3
 80133c0:	08017521 	.word	0x08017521
 80133c4:	08017560 	.word	0x08017560
 80133c8:	08017648 	.word	0x08017648
 80133cc:	08017620 	.word	0x08017620
 80133d0:	7ff00000 	.word	0x7ff00000
 80133d4:	7ca00000 	.word	0x7ca00000
 80133d8:	fff80000 	.word	0xfff80000
 80133dc:	7fefffff 	.word	0x7fefffff
 80133e0:	f018 0310 	ands.w	r3, r8, #16
 80133e4:	bf18      	it	ne
 80133e6:	236a      	movne	r3, #106	; 0x6a
 80133e8:	4da0      	ldr	r5, [pc, #640]	; (801366c <_strtod_l+0x834>)
 80133ea:	9304      	str	r3, [sp, #16]
 80133ec:	4650      	mov	r0, sl
 80133ee:	4659      	mov	r1, fp
 80133f0:	2300      	movs	r3, #0
 80133f2:	f1b8 0f00 	cmp.w	r8, #0
 80133f6:	f300 810a 	bgt.w	801360e <_strtod_l+0x7d6>
 80133fa:	b10b      	cbz	r3, 8013400 <_strtod_l+0x5c8>
 80133fc:	4682      	mov	sl, r0
 80133fe:	468b      	mov	fp, r1
 8013400:	9b04      	ldr	r3, [sp, #16]
 8013402:	b1bb      	cbz	r3, 8013434 <_strtod_l+0x5fc>
 8013404:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013408:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801340c:	2b00      	cmp	r3, #0
 801340e:	4659      	mov	r1, fp
 8013410:	dd10      	ble.n	8013434 <_strtod_l+0x5fc>
 8013412:	2b1f      	cmp	r3, #31
 8013414:	f340 8107 	ble.w	8013626 <_strtod_l+0x7ee>
 8013418:	2b34      	cmp	r3, #52	; 0x34
 801341a:	bfde      	ittt	le
 801341c:	3b20      	suble	r3, #32
 801341e:	f04f 32ff 	movle.w	r2, #4294967295
 8013422:	fa02 f303 	lslle.w	r3, r2, r3
 8013426:	f04f 0a00 	mov.w	sl, #0
 801342a:	bfcc      	ite	gt
 801342c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013430:	ea03 0b01 	andle.w	fp, r3, r1
 8013434:	2200      	movs	r2, #0
 8013436:	2300      	movs	r3, #0
 8013438:	4650      	mov	r0, sl
 801343a:	4659      	mov	r1, fp
 801343c:	f7ed fb5c 	bl	8000af8 <__aeabi_dcmpeq>
 8013440:	2800      	cmp	r0, #0
 8013442:	d1ac      	bne.n	801339e <_strtod_l+0x566>
 8013444:	9b07      	ldr	r3, [sp, #28]
 8013446:	9300      	str	r3, [sp, #0]
 8013448:	9a05      	ldr	r2, [sp, #20]
 801344a:	9908      	ldr	r1, [sp, #32]
 801344c:	4623      	mov	r3, r4
 801344e:	4648      	mov	r0, r9
 8013450:	f002 f8ad 	bl	80155ae <__s2b>
 8013454:	9007      	str	r0, [sp, #28]
 8013456:	2800      	cmp	r0, #0
 8013458:	f43f af08 	beq.w	801326c <_strtod_l+0x434>
 801345c:	9a06      	ldr	r2, [sp, #24]
 801345e:	9b06      	ldr	r3, [sp, #24]
 8013460:	2a00      	cmp	r2, #0
 8013462:	f1c3 0300 	rsb	r3, r3, #0
 8013466:	bfa8      	it	ge
 8013468:	2300      	movge	r3, #0
 801346a:	930e      	str	r3, [sp, #56]	; 0x38
 801346c:	2400      	movs	r4, #0
 801346e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013472:	9316      	str	r3, [sp, #88]	; 0x58
 8013474:	46a0      	mov	r8, r4
 8013476:	9b07      	ldr	r3, [sp, #28]
 8013478:	4648      	mov	r0, r9
 801347a:	6859      	ldr	r1, [r3, #4]
 801347c:	f002 f811 	bl	80154a2 <_Balloc>
 8013480:	9005      	str	r0, [sp, #20]
 8013482:	2800      	cmp	r0, #0
 8013484:	f43f aef6 	beq.w	8013274 <_strtod_l+0x43c>
 8013488:	9b07      	ldr	r3, [sp, #28]
 801348a:	691a      	ldr	r2, [r3, #16]
 801348c:	3202      	adds	r2, #2
 801348e:	f103 010c 	add.w	r1, r3, #12
 8013492:	0092      	lsls	r2, r2, #2
 8013494:	300c      	adds	r0, #12
 8013496:	f001 fff9 	bl	801548c <memcpy>
 801349a:	aa1e      	add	r2, sp, #120	; 0x78
 801349c:	a91d      	add	r1, sp, #116	; 0x74
 801349e:	ec4b ab10 	vmov	d0, sl, fp
 80134a2:	4648      	mov	r0, r9
 80134a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80134a8:	f002 fb3c 	bl	8015b24 <__d2b>
 80134ac:	901c      	str	r0, [sp, #112]	; 0x70
 80134ae:	2800      	cmp	r0, #0
 80134b0:	f43f aee0 	beq.w	8013274 <_strtod_l+0x43c>
 80134b4:	2101      	movs	r1, #1
 80134b6:	4648      	mov	r0, r9
 80134b8:	f002 f905 	bl	80156c6 <__i2b>
 80134bc:	4680      	mov	r8, r0
 80134be:	2800      	cmp	r0, #0
 80134c0:	f43f aed8 	beq.w	8013274 <_strtod_l+0x43c>
 80134c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80134c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80134c8:	2e00      	cmp	r6, #0
 80134ca:	bfab      	itete	ge
 80134cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80134ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80134d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80134d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80134d4:	bfac      	ite	ge
 80134d6:	18f7      	addge	r7, r6, r3
 80134d8:	1b9d      	sublt	r5, r3, r6
 80134da:	9b04      	ldr	r3, [sp, #16]
 80134dc:	1af6      	subs	r6, r6, r3
 80134de:	4416      	add	r6, r2
 80134e0:	4b63      	ldr	r3, [pc, #396]	; (8013670 <_strtod_l+0x838>)
 80134e2:	3e01      	subs	r6, #1
 80134e4:	429e      	cmp	r6, r3
 80134e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80134ea:	f280 80af 	bge.w	801364c <_strtod_l+0x814>
 80134ee:	1b9b      	subs	r3, r3, r6
 80134f0:	2b1f      	cmp	r3, #31
 80134f2:	eba2 0203 	sub.w	r2, r2, r3
 80134f6:	f04f 0101 	mov.w	r1, #1
 80134fa:	f300 809b 	bgt.w	8013634 <_strtod_l+0x7fc>
 80134fe:	fa01 f303 	lsl.w	r3, r1, r3
 8013502:	930f      	str	r3, [sp, #60]	; 0x3c
 8013504:	2300      	movs	r3, #0
 8013506:	930a      	str	r3, [sp, #40]	; 0x28
 8013508:	18be      	adds	r6, r7, r2
 801350a:	9b04      	ldr	r3, [sp, #16]
 801350c:	42b7      	cmp	r7, r6
 801350e:	4415      	add	r5, r2
 8013510:	441d      	add	r5, r3
 8013512:	463b      	mov	r3, r7
 8013514:	bfa8      	it	ge
 8013516:	4633      	movge	r3, r6
 8013518:	42ab      	cmp	r3, r5
 801351a:	bfa8      	it	ge
 801351c:	462b      	movge	r3, r5
 801351e:	2b00      	cmp	r3, #0
 8013520:	bfc2      	ittt	gt
 8013522:	1af6      	subgt	r6, r6, r3
 8013524:	1aed      	subgt	r5, r5, r3
 8013526:	1aff      	subgt	r7, r7, r3
 8013528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801352a:	b1bb      	cbz	r3, 801355c <_strtod_l+0x724>
 801352c:	4641      	mov	r1, r8
 801352e:	461a      	mov	r2, r3
 8013530:	4648      	mov	r0, r9
 8013532:	f002 f967 	bl	8015804 <__pow5mult>
 8013536:	4680      	mov	r8, r0
 8013538:	2800      	cmp	r0, #0
 801353a:	f43f ae9b 	beq.w	8013274 <_strtod_l+0x43c>
 801353e:	4601      	mov	r1, r0
 8013540:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013542:	4648      	mov	r0, r9
 8013544:	f002 f8c8 	bl	80156d8 <__multiply>
 8013548:	900c      	str	r0, [sp, #48]	; 0x30
 801354a:	2800      	cmp	r0, #0
 801354c:	f43f ae92 	beq.w	8013274 <_strtod_l+0x43c>
 8013550:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013552:	4648      	mov	r0, r9
 8013554:	f001 ffd9 	bl	801550a <_Bfree>
 8013558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801355a:	931c      	str	r3, [sp, #112]	; 0x70
 801355c:	2e00      	cmp	r6, #0
 801355e:	dc7a      	bgt.n	8013656 <_strtod_l+0x81e>
 8013560:	9b06      	ldr	r3, [sp, #24]
 8013562:	2b00      	cmp	r3, #0
 8013564:	dd08      	ble.n	8013578 <_strtod_l+0x740>
 8013566:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013568:	9905      	ldr	r1, [sp, #20]
 801356a:	4648      	mov	r0, r9
 801356c:	f002 f94a 	bl	8015804 <__pow5mult>
 8013570:	9005      	str	r0, [sp, #20]
 8013572:	2800      	cmp	r0, #0
 8013574:	f43f ae7e 	beq.w	8013274 <_strtod_l+0x43c>
 8013578:	2d00      	cmp	r5, #0
 801357a:	dd08      	ble.n	801358e <_strtod_l+0x756>
 801357c:	462a      	mov	r2, r5
 801357e:	9905      	ldr	r1, [sp, #20]
 8013580:	4648      	mov	r0, r9
 8013582:	f002 f98d 	bl	80158a0 <__lshift>
 8013586:	9005      	str	r0, [sp, #20]
 8013588:	2800      	cmp	r0, #0
 801358a:	f43f ae73 	beq.w	8013274 <_strtod_l+0x43c>
 801358e:	2f00      	cmp	r7, #0
 8013590:	dd08      	ble.n	80135a4 <_strtod_l+0x76c>
 8013592:	4641      	mov	r1, r8
 8013594:	463a      	mov	r2, r7
 8013596:	4648      	mov	r0, r9
 8013598:	f002 f982 	bl	80158a0 <__lshift>
 801359c:	4680      	mov	r8, r0
 801359e:	2800      	cmp	r0, #0
 80135a0:	f43f ae68 	beq.w	8013274 <_strtod_l+0x43c>
 80135a4:	9a05      	ldr	r2, [sp, #20]
 80135a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80135a8:	4648      	mov	r0, r9
 80135aa:	f002 f9e7 	bl	801597c <__mdiff>
 80135ae:	4604      	mov	r4, r0
 80135b0:	2800      	cmp	r0, #0
 80135b2:	f43f ae5f 	beq.w	8013274 <_strtod_l+0x43c>
 80135b6:	68c3      	ldr	r3, [r0, #12]
 80135b8:	930c      	str	r3, [sp, #48]	; 0x30
 80135ba:	2300      	movs	r3, #0
 80135bc:	60c3      	str	r3, [r0, #12]
 80135be:	4641      	mov	r1, r8
 80135c0:	f002 f9c2 	bl	8015948 <__mcmp>
 80135c4:	2800      	cmp	r0, #0
 80135c6:	da55      	bge.n	8013674 <_strtod_l+0x83c>
 80135c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135ca:	b9e3      	cbnz	r3, 8013606 <_strtod_l+0x7ce>
 80135cc:	f1ba 0f00 	cmp.w	sl, #0
 80135d0:	d119      	bne.n	8013606 <_strtod_l+0x7ce>
 80135d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135d6:	b9b3      	cbnz	r3, 8013606 <_strtod_l+0x7ce>
 80135d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135dc:	0d1b      	lsrs	r3, r3, #20
 80135de:	051b      	lsls	r3, r3, #20
 80135e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80135e4:	d90f      	bls.n	8013606 <_strtod_l+0x7ce>
 80135e6:	6963      	ldr	r3, [r4, #20]
 80135e8:	b913      	cbnz	r3, 80135f0 <_strtod_l+0x7b8>
 80135ea:	6923      	ldr	r3, [r4, #16]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	dd0a      	ble.n	8013606 <_strtod_l+0x7ce>
 80135f0:	4621      	mov	r1, r4
 80135f2:	2201      	movs	r2, #1
 80135f4:	4648      	mov	r0, r9
 80135f6:	f002 f953 	bl	80158a0 <__lshift>
 80135fa:	4641      	mov	r1, r8
 80135fc:	4604      	mov	r4, r0
 80135fe:	f002 f9a3 	bl	8015948 <__mcmp>
 8013602:	2800      	cmp	r0, #0
 8013604:	dc67      	bgt.n	80136d6 <_strtod_l+0x89e>
 8013606:	9b04      	ldr	r3, [sp, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d171      	bne.n	80136f0 <_strtod_l+0x8b8>
 801360c:	e63d      	b.n	801328a <_strtod_l+0x452>
 801360e:	f018 0f01 	tst.w	r8, #1
 8013612:	d004      	beq.n	801361e <_strtod_l+0x7e6>
 8013614:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013618:	f7ed f806 	bl	8000628 <__aeabi_dmul>
 801361c:	2301      	movs	r3, #1
 801361e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013622:	3508      	adds	r5, #8
 8013624:	e6e5      	b.n	80133f2 <_strtod_l+0x5ba>
 8013626:	f04f 32ff 	mov.w	r2, #4294967295
 801362a:	fa02 f303 	lsl.w	r3, r2, r3
 801362e:	ea03 0a0a 	and.w	sl, r3, sl
 8013632:	e6ff      	b.n	8013434 <_strtod_l+0x5fc>
 8013634:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013638:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801363c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013640:	36e2      	adds	r6, #226	; 0xe2
 8013642:	fa01 f306 	lsl.w	r3, r1, r6
 8013646:	930a      	str	r3, [sp, #40]	; 0x28
 8013648:	910f      	str	r1, [sp, #60]	; 0x3c
 801364a:	e75d      	b.n	8013508 <_strtod_l+0x6d0>
 801364c:	2300      	movs	r3, #0
 801364e:	930a      	str	r3, [sp, #40]	; 0x28
 8013650:	2301      	movs	r3, #1
 8013652:	930f      	str	r3, [sp, #60]	; 0x3c
 8013654:	e758      	b.n	8013508 <_strtod_l+0x6d0>
 8013656:	4632      	mov	r2, r6
 8013658:	991c      	ldr	r1, [sp, #112]	; 0x70
 801365a:	4648      	mov	r0, r9
 801365c:	f002 f920 	bl	80158a0 <__lshift>
 8013660:	901c      	str	r0, [sp, #112]	; 0x70
 8013662:	2800      	cmp	r0, #0
 8013664:	f47f af7c 	bne.w	8013560 <_strtod_l+0x728>
 8013668:	e604      	b.n	8013274 <_strtod_l+0x43c>
 801366a:	bf00      	nop
 801366c:	08017578 	.word	0x08017578
 8013670:	fffffc02 	.word	0xfffffc02
 8013674:	465d      	mov	r5, fp
 8013676:	f040 8086 	bne.w	8013786 <_strtod_l+0x94e>
 801367a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801367c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013680:	b32a      	cbz	r2, 80136ce <_strtod_l+0x896>
 8013682:	4aaf      	ldr	r2, [pc, #700]	; (8013940 <_strtod_l+0xb08>)
 8013684:	4293      	cmp	r3, r2
 8013686:	d153      	bne.n	8013730 <_strtod_l+0x8f8>
 8013688:	9b04      	ldr	r3, [sp, #16]
 801368a:	4650      	mov	r0, sl
 801368c:	b1d3      	cbz	r3, 80136c4 <_strtod_l+0x88c>
 801368e:	4aad      	ldr	r2, [pc, #692]	; (8013944 <_strtod_l+0xb0c>)
 8013690:	402a      	ands	r2, r5
 8013692:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013696:	f04f 31ff 	mov.w	r1, #4294967295
 801369a:	d816      	bhi.n	80136ca <_strtod_l+0x892>
 801369c:	0d12      	lsrs	r2, r2, #20
 801369e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80136a2:	fa01 f303 	lsl.w	r3, r1, r3
 80136a6:	4298      	cmp	r0, r3
 80136a8:	d142      	bne.n	8013730 <_strtod_l+0x8f8>
 80136aa:	4ba7      	ldr	r3, [pc, #668]	; (8013948 <_strtod_l+0xb10>)
 80136ac:	429d      	cmp	r5, r3
 80136ae:	d102      	bne.n	80136b6 <_strtod_l+0x87e>
 80136b0:	3001      	adds	r0, #1
 80136b2:	f43f addf 	beq.w	8013274 <_strtod_l+0x43c>
 80136b6:	4ba3      	ldr	r3, [pc, #652]	; (8013944 <_strtod_l+0xb0c>)
 80136b8:	402b      	ands	r3, r5
 80136ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80136be:	f04f 0a00 	mov.w	sl, #0
 80136c2:	e7a0      	b.n	8013606 <_strtod_l+0x7ce>
 80136c4:	f04f 33ff 	mov.w	r3, #4294967295
 80136c8:	e7ed      	b.n	80136a6 <_strtod_l+0x86e>
 80136ca:	460b      	mov	r3, r1
 80136cc:	e7eb      	b.n	80136a6 <_strtod_l+0x86e>
 80136ce:	bb7b      	cbnz	r3, 8013730 <_strtod_l+0x8f8>
 80136d0:	f1ba 0f00 	cmp.w	sl, #0
 80136d4:	d12c      	bne.n	8013730 <_strtod_l+0x8f8>
 80136d6:	9904      	ldr	r1, [sp, #16]
 80136d8:	4a9a      	ldr	r2, [pc, #616]	; (8013944 <_strtod_l+0xb0c>)
 80136da:	465b      	mov	r3, fp
 80136dc:	b1f1      	cbz	r1, 801371c <_strtod_l+0x8e4>
 80136de:	ea02 010b 	and.w	r1, r2, fp
 80136e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80136e6:	dc19      	bgt.n	801371c <_strtod_l+0x8e4>
 80136e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80136ec:	f77f ae5b 	ble.w	80133a6 <_strtod_l+0x56e>
 80136f0:	4a96      	ldr	r2, [pc, #600]	; (801394c <_strtod_l+0xb14>)
 80136f2:	2300      	movs	r3, #0
 80136f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80136f8:	4650      	mov	r0, sl
 80136fa:	4659      	mov	r1, fp
 80136fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013700:	f7ec ff92 	bl	8000628 <__aeabi_dmul>
 8013704:	4682      	mov	sl, r0
 8013706:	468b      	mov	fp, r1
 8013708:	2900      	cmp	r1, #0
 801370a:	f47f adbe 	bne.w	801328a <_strtod_l+0x452>
 801370e:	2800      	cmp	r0, #0
 8013710:	f47f adbb 	bne.w	801328a <_strtod_l+0x452>
 8013714:	2322      	movs	r3, #34	; 0x22
 8013716:	f8c9 3000 	str.w	r3, [r9]
 801371a:	e5b6      	b.n	801328a <_strtod_l+0x452>
 801371c:	4013      	ands	r3, r2
 801371e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013722:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013726:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801372a:	f04f 3aff 	mov.w	sl, #4294967295
 801372e:	e76a      	b.n	8013606 <_strtod_l+0x7ce>
 8013730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013732:	b193      	cbz	r3, 801375a <_strtod_l+0x922>
 8013734:	422b      	tst	r3, r5
 8013736:	f43f af66 	beq.w	8013606 <_strtod_l+0x7ce>
 801373a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801373c:	9a04      	ldr	r2, [sp, #16]
 801373e:	4650      	mov	r0, sl
 8013740:	4659      	mov	r1, fp
 8013742:	b173      	cbz	r3, 8013762 <_strtod_l+0x92a>
 8013744:	f7ff fb5b 	bl	8012dfe <sulp>
 8013748:	4602      	mov	r2, r0
 801374a:	460b      	mov	r3, r1
 801374c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013750:	f7ec fdb4 	bl	80002bc <__adddf3>
 8013754:	4682      	mov	sl, r0
 8013756:	468b      	mov	fp, r1
 8013758:	e755      	b.n	8013606 <_strtod_l+0x7ce>
 801375a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801375c:	ea13 0f0a 	tst.w	r3, sl
 8013760:	e7e9      	b.n	8013736 <_strtod_l+0x8fe>
 8013762:	f7ff fb4c 	bl	8012dfe <sulp>
 8013766:	4602      	mov	r2, r0
 8013768:	460b      	mov	r3, r1
 801376a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801376e:	f7ec fda3 	bl	80002b8 <__aeabi_dsub>
 8013772:	2200      	movs	r2, #0
 8013774:	2300      	movs	r3, #0
 8013776:	4682      	mov	sl, r0
 8013778:	468b      	mov	fp, r1
 801377a:	f7ed f9bd 	bl	8000af8 <__aeabi_dcmpeq>
 801377e:	2800      	cmp	r0, #0
 8013780:	f47f ae11 	bne.w	80133a6 <_strtod_l+0x56e>
 8013784:	e73f      	b.n	8013606 <_strtod_l+0x7ce>
 8013786:	4641      	mov	r1, r8
 8013788:	4620      	mov	r0, r4
 801378a:	f002 fa1a 	bl	8015bc2 <__ratio>
 801378e:	ec57 6b10 	vmov	r6, r7, d0
 8013792:	2200      	movs	r2, #0
 8013794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013798:	ee10 0a10 	vmov	r0, s0
 801379c:	4639      	mov	r1, r7
 801379e:	f7ed f9bf 	bl	8000b20 <__aeabi_dcmple>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d077      	beq.n	8013896 <_strtod_l+0xa5e>
 80137a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d04a      	beq.n	8013842 <_strtod_l+0xa0a>
 80137ac:	4b68      	ldr	r3, [pc, #416]	; (8013950 <_strtod_l+0xb18>)
 80137ae:	2200      	movs	r2, #0
 80137b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80137b4:	4f66      	ldr	r7, [pc, #408]	; (8013950 <_strtod_l+0xb18>)
 80137b6:	2600      	movs	r6, #0
 80137b8:	4b62      	ldr	r3, [pc, #392]	; (8013944 <_strtod_l+0xb0c>)
 80137ba:	402b      	ands	r3, r5
 80137bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80137be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137c0:	4b64      	ldr	r3, [pc, #400]	; (8013954 <_strtod_l+0xb1c>)
 80137c2:	429a      	cmp	r2, r3
 80137c4:	f040 80ce 	bne.w	8013964 <_strtod_l+0xb2c>
 80137c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80137cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80137d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80137d4:	ec4b ab10 	vmov	d0, sl, fp
 80137d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80137dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80137e0:	f002 f92a 	bl	8015a38 <__ulp>
 80137e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80137e8:	ec53 2b10 	vmov	r2, r3, d0
 80137ec:	f7ec ff1c 	bl	8000628 <__aeabi_dmul>
 80137f0:	4652      	mov	r2, sl
 80137f2:	465b      	mov	r3, fp
 80137f4:	f7ec fd62 	bl	80002bc <__adddf3>
 80137f8:	460b      	mov	r3, r1
 80137fa:	4952      	ldr	r1, [pc, #328]	; (8013944 <_strtod_l+0xb0c>)
 80137fc:	4a56      	ldr	r2, [pc, #344]	; (8013958 <_strtod_l+0xb20>)
 80137fe:	4019      	ands	r1, r3
 8013800:	4291      	cmp	r1, r2
 8013802:	4682      	mov	sl, r0
 8013804:	d95b      	bls.n	80138be <_strtod_l+0xa86>
 8013806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013808:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801380c:	4293      	cmp	r3, r2
 801380e:	d103      	bne.n	8013818 <_strtod_l+0x9e0>
 8013810:	9b08      	ldr	r3, [sp, #32]
 8013812:	3301      	adds	r3, #1
 8013814:	f43f ad2e 	beq.w	8013274 <_strtod_l+0x43c>
 8013818:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013948 <_strtod_l+0xb10>
 801381c:	f04f 3aff 	mov.w	sl, #4294967295
 8013820:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013822:	4648      	mov	r0, r9
 8013824:	f001 fe71 	bl	801550a <_Bfree>
 8013828:	9905      	ldr	r1, [sp, #20]
 801382a:	4648      	mov	r0, r9
 801382c:	f001 fe6d 	bl	801550a <_Bfree>
 8013830:	4641      	mov	r1, r8
 8013832:	4648      	mov	r0, r9
 8013834:	f001 fe69 	bl	801550a <_Bfree>
 8013838:	4621      	mov	r1, r4
 801383a:	4648      	mov	r0, r9
 801383c:	f001 fe65 	bl	801550a <_Bfree>
 8013840:	e619      	b.n	8013476 <_strtod_l+0x63e>
 8013842:	f1ba 0f00 	cmp.w	sl, #0
 8013846:	d11a      	bne.n	801387e <_strtod_l+0xa46>
 8013848:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801384c:	b9eb      	cbnz	r3, 801388a <_strtod_l+0xa52>
 801384e:	2200      	movs	r2, #0
 8013850:	4b3f      	ldr	r3, [pc, #252]	; (8013950 <_strtod_l+0xb18>)
 8013852:	4630      	mov	r0, r6
 8013854:	4639      	mov	r1, r7
 8013856:	f7ed f959 	bl	8000b0c <__aeabi_dcmplt>
 801385a:	b9c8      	cbnz	r0, 8013890 <_strtod_l+0xa58>
 801385c:	4630      	mov	r0, r6
 801385e:	4639      	mov	r1, r7
 8013860:	2200      	movs	r2, #0
 8013862:	4b3e      	ldr	r3, [pc, #248]	; (801395c <_strtod_l+0xb24>)
 8013864:	f7ec fee0 	bl	8000628 <__aeabi_dmul>
 8013868:	4606      	mov	r6, r0
 801386a:	460f      	mov	r7, r1
 801386c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013870:	9618      	str	r6, [sp, #96]	; 0x60
 8013872:	9319      	str	r3, [sp, #100]	; 0x64
 8013874:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013878:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801387c:	e79c      	b.n	80137b8 <_strtod_l+0x980>
 801387e:	f1ba 0f01 	cmp.w	sl, #1
 8013882:	d102      	bne.n	801388a <_strtod_l+0xa52>
 8013884:	2d00      	cmp	r5, #0
 8013886:	f43f ad8e 	beq.w	80133a6 <_strtod_l+0x56e>
 801388a:	2200      	movs	r2, #0
 801388c:	4b34      	ldr	r3, [pc, #208]	; (8013960 <_strtod_l+0xb28>)
 801388e:	e78f      	b.n	80137b0 <_strtod_l+0x978>
 8013890:	2600      	movs	r6, #0
 8013892:	4f32      	ldr	r7, [pc, #200]	; (801395c <_strtod_l+0xb24>)
 8013894:	e7ea      	b.n	801386c <_strtod_l+0xa34>
 8013896:	4b31      	ldr	r3, [pc, #196]	; (801395c <_strtod_l+0xb24>)
 8013898:	4630      	mov	r0, r6
 801389a:	4639      	mov	r1, r7
 801389c:	2200      	movs	r2, #0
 801389e:	f7ec fec3 	bl	8000628 <__aeabi_dmul>
 80138a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138a4:	4606      	mov	r6, r0
 80138a6:	460f      	mov	r7, r1
 80138a8:	b933      	cbnz	r3, 80138b8 <_strtod_l+0xa80>
 80138aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ae:	9010      	str	r0, [sp, #64]	; 0x40
 80138b0:	9311      	str	r3, [sp, #68]	; 0x44
 80138b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80138b6:	e7df      	b.n	8013878 <_strtod_l+0xa40>
 80138b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80138bc:	e7f9      	b.n	80138b2 <_strtod_l+0xa7a>
 80138be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80138c2:	9b04      	ldr	r3, [sp, #16]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d1ab      	bne.n	8013820 <_strtod_l+0x9e8>
 80138c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80138cc:	0d1b      	lsrs	r3, r3, #20
 80138ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138d0:	051b      	lsls	r3, r3, #20
 80138d2:	429a      	cmp	r2, r3
 80138d4:	465d      	mov	r5, fp
 80138d6:	d1a3      	bne.n	8013820 <_strtod_l+0x9e8>
 80138d8:	4639      	mov	r1, r7
 80138da:	4630      	mov	r0, r6
 80138dc:	f7ed f954 	bl	8000b88 <__aeabi_d2iz>
 80138e0:	f7ec fe38 	bl	8000554 <__aeabi_i2d>
 80138e4:	460b      	mov	r3, r1
 80138e6:	4602      	mov	r2, r0
 80138e8:	4639      	mov	r1, r7
 80138ea:	4630      	mov	r0, r6
 80138ec:	f7ec fce4 	bl	80002b8 <__aeabi_dsub>
 80138f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138f2:	4606      	mov	r6, r0
 80138f4:	460f      	mov	r7, r1
 80138f6:	b933      	cbnz	r3, 8013906 <_strtod_l+0xace>
 80138f8:	f1ba 0f00 	cmp.w	sl, #0
 80138fc:	d103      	bne.n	8013906 <_strtod_l+0xace>
 80138fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013902:	2d00      	cmp	r5, #0
 8013904:	d06d      	beq.n	80139e2 <_strtod_l+0xbaa>
 8013906:	a30a      	add	r3, pc, #40	; (adr r3, 8013930 <_strtod_l+0xaf8>)
 8013908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801390c:	4630      	mov	r0, r6
 801390e:	4639      	mov	r1, r7
 8013910:	f7ed f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8013914:	2800      	cmp	r0, #0
 8013916:	f47f acb8 	bne.w	801328a <_strtod_l+0x452>
 801391a:	a307      	add	r3, pc, #28	; (adr r3, 8013938 <_strtod_l+0xb00>)
 801391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013920:	4630      	mov	r0, r6
 8013922:	4639      	mov	r1, r7
 8013924:	f7ed f910 	bl	8000b48 <__aeabi_dcmpgt>
 8013928:	2800      	cmp	r0, #0
 801392a:	f43f af79 	beq.w	8013820 <_strtod_l+0x9e8>
 801392e:	e4ac      	b.n	801328a <_strtod_l+0x452>
 8013930:	94a03595 	.word	0x94a03595
 8013934:	3fdfffff 	.word	0x3fdfffff
 8013938:	35afe535 	.word	0x35afe535
 801393c:	3fe00000 	.word	0x3fe00000
 8013940:	000fffff 	.word	0x000fffff
 8013944:	7ff00000 	.word	0x7ff00000
 8013948:	7fefffff 	.word	0x7fefffff
 801394c:	39500000 	.word	0x39500000
 8013950:	3ff00000 	.word	0x3ff00000
 8013954:	7fe00000 	.word	0x7fe00000
 8013958:	7c9fffff 	.word	0x7c9fffff
 801395c:	3fe00000 	.word	0x3fe00000
 8013960:	bff00000 	.word	0xbff00000
 8013964:	9b04      	ldr	r3, [sp, #16]
 8013966:	b333      	cbz	r3, 80139b6 <_strtod_l+0xb7e>
 8013968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801396a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801396e:	d822      	bhi.n	80139b6 <_strtod_l+0xb7e>
 8013970:	a327      	add	r3, pc, #156	; (adr r3, 8013a10 <_strtod_l+0xbd8>)
 8013972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013976:	4630      	mov	r0, r6
 8013978:	4639      	mov	r1, r7
 801397a:	f7ed f8d1 	bl	8000b20 <__aeabi_dcmple>
 801397e:	b1a0      	cbz	r0, 80139aa <_strtod_l+0xb72>
 8013980:	4639      	mov	r1, r7
 8013982:	4630      	mov	r0, r6
 8013984:	f7ed f928 	bl	8000bd8 <__aeabi_d2uiz>
 8013988:	2800      	cmp	r0, #0
 801398a:	bf08      	it	eq
 801398c:	2001      	moveq	r0, #1
 801398e:	f7ec fdd1 	bl	8000534 <__aeabi_ui2d>
 8013992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013994:	4606      	mov	r6, r0
 8013996:	460f      	mov	r7, r1
 8013998:	bb03      	cbnz	r3, 80139dc <_strtod_l+0xba4>
 801399a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801399e:	9012      	str	r0, [sp, #72]	; 0x48
 80139a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80139a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80139a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80139aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80139b2:	1a9b      	subs	r3, r3, r2
 80139b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80139b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80139ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80139be:	f002 f83b 	bl	8015a38 <__ulp>
 80139c2:	4650      	mov	r0, sl
 80139c4:	ec53 2b10 	vmov	r2, r3, d0
 80139c8:	4659      	mov	r1, fp
 80139ca:	f7ec fe2d 	bl	8000628 <__aeabi_dmul>
 80139ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80139d2:	f7ec fc73 	bl	80002bc <__adddf3>
 80139d6:	4682      	mov	sl, r0
 80139d8:	468b      	mov	fp, r1
 80139da:	e772      	b.n	80138c2 <_strtod_l+0xa8a>
 80139dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80139e0:	e7df      	b.n	80139a2 <_strtod_l+0xb6a>
 80139e2:	a30d      	add	r3, pc, #52	; (adr r3, 8013a18 <_strtod_l+0xbe0>)
 80139e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e8:	f7ed f890 	bl	8000b0c <__aeabi_dcmplt>
 80139ec:	e79c      	b.n	8013928 <_strtod_l+0xaf0>
 80139ee:	2300      	movs	r3, #0
 80139f0:	930d      	str	r3, [sp, #52]	; 0x34
 80139f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80139f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139f6:	6013      	str	r3, [r2, #0]
 80139f8:	f7ff ba61 	b.w	8012ebe <_strtod_l+0x86>
 80139fc:	2b65      	cmp	r3, #101	; 0x65
 80139fe:	f04f 0200 	mov.w	r2, #0
 8013a02:	f43f ab4e 	beq.w	80130a2 <_strtod_l+0x26a>
 8013a06:	2101      	movs	r1, #1
 8013a08:	4614      	mov	r4, r2
 8013a0a:	9104      	str	r1, [sp, #16]
 8013a0c:	f7ff bacb 	b.w	8012fa6 <_strtod_l+0x16e>
 8013a10:	ffc00000 	.word	0xffc00000
 8013a14:	41dfffff 	.word	0x41dfffff
 8013a18:	94a03595 	.word	0x94a03595
 8013a1c:	3fcfffff 	.word	0x3fcfffff

08013a20 <_strtod_r>:
 8013a20:	4b05      	ldr	r3, [pc, #20]	; (8013a38 <_strtod_r+0x18>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	b410      	push	{r4}
 8013a26:	6a1b      	ldr	r3, [r3, #32]
 8013a28:	4c04      	ldr	r4, [pc, #16]	; (8013a3c <_strtod_r+0x1c>)
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	bf08      	it	eq
 8013a2e:	4623      	moveq	r3, r4
 8013a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a34:	f7ff ba00 	b.w	8012e38 <_strtod_l>
 8013a38:	2000000c 	.word	0x2000000c
 8013a3c:	20000070 	.word	0x20000070

08013a40 <_strtol_l.isra.0>:
 8013a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a44:	4680      	mov	r8, r0
 8013a46:	4689      	mov	r9, r1
 8013a48:	4692      	mov	sl, r2
 8013a4a:	461e      	mov	r6, r3
 8013a4c:	460f      	mov	r7, r1
 8013a4e:	463d      	mov	r5, r7
 8013a50:	9808      	ldr	r0, [sp, #32]
 8013a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a56:	f001 fc67 	bl	8015328 <__locale_ctype_ptr_l>
 8013a5a:	4420      	add	r0, r4
 8013a5c:	7843      	ldrb	r3, [r0, #1]
 8013a5e:	f013 0308 	ands.w	r3, r3, #8
 8013a62:	d132      	bne.n	8013aca <_strtol_l.isra.0+0x8a>
 8013a64:	2c2d      	cmp	r4, #45	; 0x2d
 8013a66:	d132      	bne.n	8013ace <_strtol_l.isra.0+0x8e>
 8013a68:	787c      	ldrb	r4, [r7, #1]
 8013a6a:	1cbd      	adds	r5, r7, #2
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	2e00      	cmp	r6, #0
 8013a70:	d05d      	beq.n	8013b2e <_strtol_l.isra.0+0xee>
 8013a72:	2e10      	cmp	r6, #16
 8013a74:	d109      	bne.n	8013a8a <_strtol_l.isra.0+0x4a>
 8013a76:	2c30      	cmp	r4, #48	; 0x30
 8013a78:	d107      	bne.n	8013a8a <_strtol_l.isra.0+0x4a>
 8013a7a:	782b      	ldrb	r3, [r5, #0]
 8013a7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013a80:	2b58      	cmp	r3, #88	; 0x58
 8013a82:	d14f      	bne.n	8013b24 <_strtol_l.isra.0+0xe4>
 8013a84:	786c      	ldrb	r4, [r5, #1]
 8013a86:	2610      	movs	r6, #16
 8013a88:	3502      	adds	r5, #2
 8013a8a:	2a00      	cmp	r2, #0
 8013a8c:	bf14      	ite	ne
 8013a8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013a92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013a96:	2700      	movs	r7, #0
 8013a98:	fbb1 fcf6 	udiv	ip, r1, r6
 8013a9c:	4638      	mov	r0, r7
 8013a9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013aa2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013aa6:	2b09      	cmp	r3, #9
 8013aa8:	d817      	bhi.n	8013ada <_strtol_l.isra.0+0x9a>
 8013aaa:	461c      	mov	r4, r3
 8013aac:	42a6      	cmp	r6, r4
 8013aae:	dd23      	ble.n	8013af8 <_strtol_l.isra.0+0xb8>
 8013ab0:	1c7b      	adds	r3, r7, #1
 8013ab2:	d007      	beq.n	8013ac4 <_strtol_l.isra.0+0x84>
 8013ab4:	4584      	cmp	ip, r0
 8013ab6:	d31c      	bcc.n	8013af2 <_strtol_l.isra.0+0xb2>
 8013ab8:	d101      	bne.n	8013abe <_strtol_l.isra.0+0x7e>
 8013aba:	45a6      	cmp	lr, r4
 8013abc:	db19      	blt.n	8013af2 <_strtol_l.isra.0+0xb2>
 8013abe:	fb00 4006 	mla	r0, r0, r6, r4
 8013ac2:	2701      	movs	r7, #1
 8013ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ac8:	e7eb      	b.n	8013aa2 <_strtol_l.isra.0+0x62>
 8013aca:	462f      	mov	r7, r5
 8013acc:	e7bf      	b.n	8013a4e <_strtol_l.isra.0+0xe>
 8013ace:	2c2b      	cmp	r4, #43	; 0x2b
 8013ad0:	bf04      	itt	eq
 8013ad2:	1cbd      	addeq	r5, r7, #2
 8013ad4:	787c      	ldrbeq	r4, [r7, #1]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	e7c9      	b.n	8013a6e <_strtol_l.isra.0+0x2e>
 8013ada:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013ade:	2b19      	cmp	r3, #25
 8013ae0:	d801      	bhi.n	8013ae6 <_strtol_l.isra.0+0xa6>
 8013ae2:	3c37      	subs	r4, #55	; 0x37
 8013ae4:	e7e2      	b.n	8013aac <_strtol_l.isra.0+0x6c>
 8013ae6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013aea:	2b19      	cmp	r3, #25
 8013aec:	d804      	bhi.n	8013af8 <_strtol_l.isra.0+0xb8>
 8013aee:	3c57      	subs	r4, #87	; 0x57
 8013af0:	e7dc      	b.n	8013aac <_strtol_l.isra.0+0x6c>
 8013af2:	f04f 37ff 	mov.w	r7, #4294967295
 8013af6:	e7e5      	b.n	8013ac4 <_strtol_l.isra.0+0x84>
 8013af8:	1c7b      	adds	r3, r7, #1
 8013afa:	d108      	bne.n	8013b0e <_strtol_l.isra.0+0xce>
 8013afc:	2322      	movs	r3, #34	; 0x22
 8013afe:	f8c8 3000 	str.w	r3, [r8]
 8013b02:	4608      	mov	r0, r1
 8013b04:	f1ba 0f00 	cmp.w	sl, #0
 8013b08:	d107      	bne.n	8013b1a <_strtol_l.isra.0+0xda>
 8013b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b0e:	b102      	cbz	r2, 8013b12 <_strtol_l.isra.0+0xd2>
 8013b10:	4240      	negs	r0, r0
 8013b12:	f1ba 0f00 	cmp.w	sl, #0
 8013b16:	d0f8      	beq.n	8013b0a <_strtol_l.isra.0+0xca>
 8013b18:	b10f      	cbz	r7, 8013b1e <_strtol_l.isra.0+0xde>
 8013b1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8013b1e:	f8ca 9000 	str.w	r9, [sl]
 8013b22:	e7f2      	b.n	8013b0a <_strtol_l.isra.0+0xca>
 8013b24:	2430      	movs	r4, #48	; 0x30
 8013b26:	2e00      	cmp	r6, #0
 8013b28:	d1af      	bne.n	8013a8a <_strtol_l.isra.0+0x4a>
 8013b2a:	2608      	movs	r6, #8
 8013b2c:	e7ad      	b.n	8013a8a <_strtol_l.isra.0+0x4a>
 8013b2e:	2c30      	cmp	r4, #48	; 0x30
 8013b30:	d0a3      	beq.n	8013a7a <_strtol_l.isra.0+0x3a>
 8013b32:	260a      	movs	r6, #10
 8013b34:	e7a9      	b.n	8013a8a <_strtol_l.isra.0+0x4a>
	...

08013b38 <_strtol_r>:
 8013b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b3a:	4c06      	ldr	r4, [pc, #24]	; (8013b54 <_strtol_r+0x1c>)
 8013b3c:	4d06      	ldr	r5, [pc, #24]	; (8013b58 <_strtol_r+0x20>)
 8013b3e:	6824      	ldr	r4, [r4, #0]
 8013b40:	6a24      	ldr	r4, [r4, #32]
 8013b42:	2c00      	cmp	r4, #0
 8013b44:	bf08      	it	eq
 8013b46:	462c      	moveq	r4, r5
 8013b48:	9400      	str	r4, [sp, #0]
 8013b4a:	f7ff ff79 	bl	8013a40 <_strtol_l.isra.0>
 8013b4e:	b003      	add	sp, #12
 8013b50:	bd30      	pop	{r4, r5, pc}
 8013b52:	bf00      	nop
 8013b54:	2000000c 	.word	0x2000000c
 8013b58:	20000070 	.word	0x20000070

08013b5c <_vsiprintf_r>:
 8013b5c:	b500      	push	{lr}
 8013b5e:	b09b      	sub	sp, #108	; 0x6c
 8013b60:	9100      	str	r1, [sp, #0]
 8013b62:	9104      	str	r1, [sp, #16]
 8013b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b68:	9105      	str	r1, [sp, #20]
 8013b6a:	9102      	str	r1, [sp, #8]
 8013b6c:	4905      	ldr	r1, [pc, #20]	; (8013b84 <_vsiprintf_r+0x28>)
 8013b6e:	9103      	str	r1, [sp, #12]
 8013b70:	4669      	mov	r1, sp
 8013b72:	f002 f9a5 	bl	8015ec0 <_svfiprintf_r>
 8013b76:	9b00      	ldr	r3, [sp, #0]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	701a      	strb	r2, [r3, #0]
 8013b7c:	b01b      	add	sp, #108	; 0x6c
 8013b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b82:	bf00      	nop
 8013b84:	ffff0208 	.word	0xffff0208

08013b88 <vsiprintf>:
 8013b88:	4613      	mov	r3, r2
 8013b8a:	460a      	mov	r2, r1
 8013b8c:	4601      	mov	r1, r0
 8013b8e:	4802      	ldr	r0, [pc, #8]	; (8013b98 <vsiprintf+0x10>)
 8013b90:	6800      	ldr	r0, [r0, #0]
 8013b92:	f7ff bfe3 	b.w	8013b5c <_vsiprintf_r>
 8013b96:	bf00      	nop
 8013b98:	2000000c 	.word	0x2000000c

08013b9c <__swbuf_r>:
 8013b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b9e:	460e      	mov	r6, r1
 8013ba0:	4614      	mov	r4, r2
 8013ba2:	4605      	mov	r5, r0
 8013ba4:	b118      	cbz	r0, 8013bae <__swbuf_r+0x12>
 8013ba6:	6983      	ldr	r3, [r0, #24]
 8013ba8:	b90b      	cbnz	r3, 8013bae <__swbuf_r+0x12>
 8013baa:	f001 f80d 	bl	8014bc8 <__sinit>
 8013bae:	4b21      	ldr	r3, [pc, #132]	; (8013c34 <__swbuf_r+0x98>)
 8013bb0:	429c      	cmp	r4, r3
 8013bb2:	d12a      	bne.n	8013c0a <__swbuf_r+0x6e>
 8013bb4:	686c      	ldr	r4, [r5, #4]
 8013bb6:	69a3      	ldr	r3, [r4, #24]
 8013bb8:	60a3      	str	r3, [r4, #8]
 8013bba:	89a3      	ldrh	r3, [r4, #12]
 8013bbc:	071a      	lsls	r2, r3, #28
 8013bbe:	d52e      	bpl.n	8013c1e <__swbuf_r+0x82>
 8013bc0:	6923      	ldr	r3, [r4, #16]
 8013bc2:	b363      	cbz	r3, 8013c1e <__swbuf_r+0x82>
 8013bc4:	6923      	ldr	r3, [r4, #16]
 8013bc6:	6820      	ldr	r0, [r4, #0]
 8013bc8:	1ac0      	subs	r0, r0, r3
 8013bca:	6963      	ldr	r3, [r4, #20]
 8013bcc:	b2f6      	uxtb	r6, r6
 8013bce:	4283      	cmp	r3, r0
 8013bd0:	4637      	mov	r7, r6
 8013bd2:	dc04      	bgt.n	8013bde <__swbuf_r+0x42>
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f000 ff8c 	bl	8014af4 <_fflush_r>
 8013bdc:	bb28      	cbnz	r0, 8013c2a <__swbuf_r+0x8e>
 8013bde:	68a3      	ldr	r3, [r4, #8]
 8013be0:	3b01      	subs	r3, #1
 8013be2:	60a3      	str	r3, [r4, #8]
 8013be4:	6823      	ldr	r3, [r4, #0]
 8013be6:	1c5a      	adds	r2, r3, #1
 8013be8:	6022      	str	r2, [r4, #0]
 8013bea:	701e      	strb	r6, [r3, #0]
 8013bec:	6963      	ldr	r3, [r4, #20]
 8013bee:	3001      	adds	r0, #1
 8013bf0:	4283      	cmp	r3, r0
 8013bf2:	d004      	beq.n	8013bfe <__swbuf_r+0x62>
 8013bf4:	89a3      	ldrh	r3, [r4, #12]
 8013bf6:	07db      	lsls	r3, r3, #31
 8013bf8:	d519      	bpl.n	8013c2e <__swbuf_r+0x92>
 8013bfa:	2e0a      	cmp	r6, #10
 8013bfc:	d117      	bne.n	8013c2e <__swbuf_r+0x92>
 8013bfe:	4621      	mov	r1, r4
 8013c00:	4628      	mov	r0, r5
 8013c02:	f000 ff77 	bl	8014af4 <_fflush_r>
 8013c06:	b190      	cbz	r0, 8013c2e <__swbuf_r+0x92>
 8013c08:	e00f      	b.n	8013c2a <__swbuf_r+0x8e>
 8013c0a:	4b0b      	ldr	r3, [pc, #44]	; (8013c38 <__swbuf_r+0x9c>)
 8013c0c:	429c      	cmp	r4, r3
 8013c0e:	d101      	bne.n	8013c14 <__swbuf_r+0x78>
 8013c10:	68ac      	ldr	r4, [r5, #8]
 8013c12:	e7d0      	b.n	8013bb6 <__swbuf_r+0x1a>
 8013c14:	4b09      	ldr	r3, [pc, #36]	; (8013c3c <__swbuf_r+0xa0>)
 8013c16:	429c      	cmp	r4, r3
 8013c18:	bf08      	it	eq
 8013c1a:	68ec      	ldreq	r4, [r5, #12]
 8013c1c:	e7cb      	b.n	8013bb6 <__swbuf_r+0x1a>
 8013c1e:	4621      	mov	r1, r4
 8013c20:	4628      	mov	r0, r5
 8013c22:	f000 f81f 	bl	8013c64 <__swsetup_r>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d0cc      	beq.n	8013bc4 <__swbuf_r+0x28>
 8013c2a:	f04f 37ff 	mov.w	r7, #4294967295
 8013c2e:	4638      	mov	r0, r7
 8013c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c32:	bf00      	nop
 8013c34:	080175d0 	.word	0x080175d0
 8013c38:	080175f0 	.word	0x080175f0
 8013c3c:	080175b0 	.word	0x080175b0

08013c40 <_write_r>:
 8013c40:	b538      	push	{r3, r4, r5, lr}
 8013c42:	4c07      	ldr	r4, [pc, #28]	; (8013c60 <_write_r+0x20>)
 8013c44:	4605      	mov	r5, r0
 8013c46:	4608      	mov	r0, r1
 8013c48:	4611      	mov	r1, r2
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	6022      	str	r2, [r4, #0]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	f7ef fc3f 	bl	80034d2 <_write>
 8013c54:	1c43      	adds	r3, r0, #1
 8013c56:	d102      	bne.n	8013c5e <_write_r+0x1e>
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	b103      	cbz	r3, 8013c5e <_write_r+0x1e>
 8013c5c:	602b      	str	r3, [r5, #0]
 8013c5e:	bd38      	pop	{r3, r4, r5, pc}
 8013c60:	2000c6ac 	.word	0x2000c6ac

08013c64 <__swsetup_r>:
 8013c64:	4b32      	ldr	r3, [pc, #200]	; (8013d30 <__swsetup_r+0xcc>)
 8013c66:	b570      	push	{r4, r5, r6, lr}
 8013c68:	681d      	ldr	r5, [r3, #0]
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	460c      	mov	r4, r1
 8013c6e:	b125      	cbz	r5, 8013c7a <__swsetup_r+0x16>
 8013c70:	69ab      	ldr	r3, [r5, #24]
 8013c72:	b913      	cbnz	r3, 8013c7a <__swsetup_r+0x16>
 8013c74:	4628      	mov	r0, r5
 8013c76:	f000 ffa7 	bl	8014bc8 <__sinit>
 8013c7a:	4b2e      	ldr	r3, [pc, #184]	; (8013d34 <__swsetup_r+0xd0>)
 8013c7c:	429c      	cmp	r4, r3
 8013c7e:	d10f      	bne.n	8013ca0 <__swsetup_r+0x3c>
 8013c80:	686c      	ldr	r4, [r5, #4]
 8013c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	0715      	lsls	r5, r2, #28
 8013c8a:	d42c      	bmi.n	8013ce6 <__swsetup_r+0x82>
 8013c8c:	06d0      	lsls	r0, r2, #27
 8013c8e:	d411      	bmi.n	8013cb4 <__swsetup_r+0x50>
 8013c90:	2209      	movs	r2, #9
 8013c92:	6032      	str	r2, [r6, #0]
 8013c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c98:	81a3      	strh	r3, [r4, #12]
 8013c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c9e:	e03e      	b.n	8013d1e <__swsetup_r+0xba>
 8013ca0:	4b25      	ldr	r3, [pc, #148]	; (8013d38 <__swsetup_r+0xd4>)
 8013ca2:	429c      	cmp	r4, r3
 8013ca4:	d101      	bne.n	8013caa <__swsetup_r+0x46>
 8013ca6:	68ac      	ldr	r4, [r5, #8]
 8013ca8:	e7eb      	b.n	8013c82 <__swsetup_r+0x1e>
 8013caa:	4b24      	ldr	r3, [pc, #144]	; (8013d3c <__swsetup_r+0xd8>)
 8013cac:	429c      	cmp	r4, r3
 8013cae:	bf08      	it	eq
 8013cb0:	68ec      	ldreq	r4, [r5, #12]
 8013cb2:	e7e6      	b.n	8013c82 <__swsetup_r+0x1e>
 8013cb4:	0751      	lsls	r1, r2, #29
 8013cb6:	d512      	bpl.n	8013cde <__swsetup_r+0x7a>
 8013cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013cba:	b141      	cbz	r1, 8013cce <__swsetup_r+0x6a>
 8013cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cc0:	4299      	cmp	r1, r3
 8013cc2:	d002      	beq.n	8013cca <__swsetup_r+0x66>
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f001 fff9 	bl	8015cbc <_free_r>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8013cce:	89a3      	ldrh	r3, [r4, #12]
 8013cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013cd4:	81a3      	strh	r3, [r4, #12]
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	6063      	str	r3, [r4, #4]
 8013cda:	6923      	ldr	r3, [r4, #16]
 8013cdc:	6023      	str	r3, [r4, #0]
 8013cde:	89a3      	ldrh	r3, [r4, #12]
 8013ce0:	f043 0308 	orr.w	r3, r3, #8
 8013ce4:	81a3      	strh	r3, [r4, #12]
 8013ce6:	6923      	ldr	r3, [r4, #16]
 8013ce8:	b94b      	cbnz	r3, 8013cfe <__swsetup_r+0x9a>
 8013cea:	89a3      	ldrh	r3, [r4, #12]
 8013cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cf4:	d003      	beq.n	8013cfe <__swsetup_r+0x9a>
 8013cf6:	4621      	mov	r1, r4
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	f001 fb6d 	bl	80153d8 <__smakebuf_r>
 8013cfe:	89a2      	ldrh	r2, [r4, #12]
 8013d00:	f012 0301 	ands.w	r3, r2, #1
 8013d04:	d00c      	beq.n	8013d20 <__swsetup_r+0xbc>
 8013d06:	2300      	movs	r3, #0
 8013d08:	60a3      	str	r3, [r4, #8]
 8013d0a:	6963      	ldr	r3, [r4, #20]
 8013d0c:	425b      	negs	r3, r3
 8013d0e:	61a3      	str	r3, [r4, #24]
 8013d10:	6923      	ldr	r3, [r4, #16]
 8013d12:	b953      	cbnz	r3, 8013d2a <__swsetup_r+0xc6>
 8013d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013d1c:	d1ba      	bne.n	8013c94 <__swsetup_r+0x30>
 8013d1e:	bd70      	pop	{r4, r5, r6, pc}
 8013d20:	0792      	lsls	r2, r2, #30
 8013d22:	bf58      	it	pl
 8013d24:	6963      	ldrpl	r3, [r4, #20]
 8013d26:	60a3      	str	r3, [r4, #8]
 8013d28:	e7f2      	b.n	8013d10 <__swsetup_r+0xac>
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	e7f7      	b.n	8013d1e <__swsetup_r+0xba>
 8013d2e:	bf00      	nop
 8013d30:	2000000c 	.word	0x2000000c
 8013d34:	080175d0 	.word	0x080175d0
 8013d38:	080175f0 	.word	0x080175f0
 8013d3c:	080175b0 	.word	0x080175b0

08013d40 <_close_r>:
 8013d40:	b538      	push	{r3, r4, r5, lr}
 8013d42:	4c06      	ldr	r4, [pc, #24]	; (8013d5c <_close_r+0x1c>)
 8013d44:	2300      	movs	r3, #0
 8013d46:	4605      	mov	r5, r0
 8013d48:	4608      	mov	r0, r1
 8013d4a:	6023      	str	r3, [r4, #0]
 8013d4c:	f7f1 f91f 	bl	8004f8e <_close>
 8013d50:	1c43      	adds	r3, r0, #1
 8013d52:	d102      	bne.n	8013d5a <_close_r+0x1a>
 8013d54:	6823      	ldr	r3, [r4, #0]
 8013d56:	b103      	cbz	r3, 8013d5a <_close_r+0x1a>
 8013d58:	602b      	str	r3, [r5, #0]
 8013d5a:	bd38      	pop	{r3, r4, r5, pc}
 8013d5c:	2000c6ac 	.word	0x2000c6ac

08013d60 <quorem>:
 8013d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	6903      	ldr	r3, [r0, #16]
 8013d66:	690c      	ldr	r4, [r1, #16]
 8013d68:	42a3      	cmp	r3, r4
 8013d6a:	4680      	mov	r8, r0
 8013d6c:	f2c0 8082 	blt.w	8013e74 <quorem+0x114>
 8013d70:	3c01      	subs	r4, #1
 8013d72:	f101 0714 	add.w	r7, r1, #20
 8013d76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013d7a:	f100 0614 	add.w	r6, r0, #20
 8013d7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013d82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013d86:	eb06 030c 	add.w	r3, r6, ip
 8013d8a:	3501      	adds	r5, #1
 8013d8c:	eb07 090c 	add.w	r9, r7, ip
 8013d90:	9301      	str	r3, [sp, #4]
 8013d92:	fbb0 f5f5 	udiv	r5, r0, r5
 8013d96:	b395      	cbz	r5, 8013dfe <quorem+0x9e>
 8013d98:	f04f 0a00 	mov.w	sl, #0
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	46b6      	mov	lr, r6
 8013da0:	46d3      	mov	fp, sl
 8013da2:	f850 2b04 	ldr.w	r2, [r0], #4
 8013da6:	b293      	uxth	r3, r2
 8013da8:	fb05 a303 	mla	r3, r5, r3, sl
 8013dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	ebab 0303 	sub.w	r3, fp, r3
 8013db6:	0c12      	lsrs	r2, r2, #16
 8013db8:	f8de b000 	ldr.w	fp, [lr]
 8013dbc:	fb05 a202 	mla	r2, r5, r2, sl
 8013dc0:	fa13 f38b 	uxtah	r3, r3, fp
 8013dc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013dc8:	fa1f fb82 	uxth.w	fp, r2
 8013dcc:	f8de 2000 	ldr.w	r2, [lr]
 8013dd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dde:	4581      	cmp	r9, r0
 8013de0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013de4:	f84e 3b04 	str.w	r3, [lr], #4
 8013de8:	d2db      	bcs.n	8013da2 <quorem+0x42>
 8013dea:	f856 300c 	ldr.w	r3, [r6, ip]
 8013dee:	b933      	cbnz	r3, 8013dfe <quorem+0x9e>
 8013df0:	9b01      	ldr	r3, [sp, #4]
 8013df2:	3b04      	subs	r3, #4
 8013df4:	429e      	cmp	r6, r3
 8013df6:	461a      	mov	r2, r3
 8013df8:	d330      	bcc.n	8013e5c <quorem+0xfc>
 8013dfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8013dfe:	4640      	mov	r0, r8
 8013e00:	f001 fda2 	bl	8015948 <__mcmp>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	db25      	blt.n	8013e54 <quorem+0xf4>
 8013e08:	3501      	adds	r5, #1
 8013e0a:	4630      	mov	r0, r6
 8013e0c:	f04f 0c00 	mov.w	ip, #0
 8013e10:	f857 2b04 	ldr.w	r2, [r7], #4
 8013e14:	f8d0 e000 	ldr.w	lr, [r0]
 8013e18:	b293      	uxth	r3, r2
 8013e1a:	ebac 0303 	sub.w	r3, ip, r3
 8013e1e:	0c12      	lsrs	r2, r2, #16
 8013e20:	fa13 f38e 	uxtah	r3, r3, lr
 8013e24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e32:	45b9      	cmp	r9, r7
 8013e34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e38:	f840 3b04 	str.w	r3, [r0], #4
 8013e3c:	d2e8      	bcs.n	8013e10 <quorem+0xb0>
 8013e3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013e42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013e46:	b92a      	cbnz	r2, 8013e54 <quorem+0xf4>
 8013e48:	3b04      	subs	r3, #4
 8013e4a:	429e      	cmp	r6, r3
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	d30b      	bcc.n	8013e68 <quorem+0x108>
 8013e50:	f8c8 4010 	str.w	r4, [r8, #16]
 8013e54:	4628      	mov	r0, r5
 8013e56:	b003      	add	sp, #12
 8013e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5c:	6812      	ldr	r2, [r2, #0]
 8013e5e:	3b04      	subs	r3, #4
 8013e60:	2a00      	cmp	r2, #0
 8013e62:	d1ca      	bne.n	8013dfa <quorem+0x9a>
 8013e64:	3c01      	subs	r4, #1
 8013e66:	e7c5      	b.n	8013df4 <quorem+0x94>
 8013e68:	6812      	ldr	r2, [r2, #0]
 8013e6a:	3b04      	subs	r3, #4
 8013e6c:	2a00      	cmp	r2, #0
 8013e6e:	d1ef      	bne.n	8013e50 <quorem+0xf0>
 8013e70:	3c01      	subs	r4, #1
 8013e72:	e7ea      	b.n	8013e4a <quorem+0xea>
 8013e74:	2000      	movs	r0, #0
 8013e76:	e7ee      	b.n	8013e56 <quorem+0xf6>

08013e78 <_dtoa_r>:
 8013e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e7c:	ec57 6b10 	vmov	r6, r7, d0
 8013e80:	b097      	sub	sp, #92	; 0x5c
 8013e82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e84:	9106      	str	r1, [sp, #24]
 8013e86:	4604      	mov	r4, r0
 8013e88:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e8a:	9312      	str	r3, [sp, #72]	; 0x48
 8013e8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e90:	e9cd 6700 	strd	r6, r7, [sp]
 8013e94:	b93d      	cbnz	r5, 8013ea6 <_dtoa_r+0x2e>
 8013e96:	2010      	movs	r0, #16
 8013e98:	f001 fade 	bl	8015458 <malloc>
 8013e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8013e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ea2:	6005      	str	r5, [r0, #0]
 8013ea4:	60c5      	str	r5, [r0, #12]
 8013ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ea8:	6819      	ldr	r1, [r3, #0]
 8013eaa:	b151      	cbz	r1, 8013ec2 <_dtoa_r+0x4a>
 8013eac:	685a      	ldr	r2, [r3, #4]
 8013eae:	604a      	str	r2, [r1, #4]
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	4093      	lsls	r3, r2
 8013eb4:	608b      	str	r3, [r1, #8]
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f001 fb27 	bl	801550a <_Bfree>
 8013ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	601a      	str	r2, [r3, #0]
 8013ec2:	1e3b      	subs	r3, r7, #0
 8013ec4:	bfbb      	ittet	lt
 8013ec6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013eca:	9301      	strlt	r3, [sp, #4]
 8013ecc:	2300      	movge	r3, #0
 8013ece:	2201      	movlt	r2, #1
 8013ed0:	bfac      	ite	ge
 8013ed2:	f8c8 3000 	strge.w	r3, [r8]
 8013ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8013eda:	4baf      	ldr	r3, [pc, #700]	; (8014198 <_dtoa_r+0x320>)
 8013edc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ee0:	ea33 0308 	bics.w	r3, r3, r8
 8013ee4:	d114      	bne.n	8013f10 <_dtoa_r+0x98>
 8013ee6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8013eec:	6013      	str	r3, [r2, #0]
 8013eee:	9b00      	ldr	r3, [sp, #0]
 8013ef0:	b923      	cbnz	r3, 8013efc <_dtoa_r+0x84>
 8013ef2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	f000 8542 	beq.w	8014980 <_dtoa_r+0xb08>
 8013efc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013efe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80141ac <_dtoa_r+0x334>
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f000 8544 	beq.w	8014990 <_dtoa_r+0xb18>
 8013f08:	f10b 0303 	add.w	r3, fp, #3
 8013f0c:	f000 bd3e 	b.w	801498c <_dtoa_r+0xb14>
 8013f10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013f14:	2200      	movs	r2, #0
 8013f16:	2300      	movs	r3, #0
 8013f18:	4630      	mov	r0, r6
 8013f1a:	4639      	mov	r1, r7
 8013f1c:	f7ec fdec 	bl	8000af8 <__aeabi_dcmpeq>
 8013f20:	4681      	mov	r9, r0
 8013f22:	b168      	cbz	r0, 8013f40 <_dtoa_r+0xc8>
 8013f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f26:	2301      	movs	r3, #1
 8013f28:	6013      	str	r3, [r2, #0]
 8013f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	f000 8524 	beq.w	801497a <_dtoa_r+0xb02>
 8013f32:	4b9a      	ldr	r3, [pc, #616]	; (801419c <_dtoa_r+0x324>)
 8013f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f36:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f3a:	6013      	str	r3, [r2, #0]
 8013f3c:	f000 bd28 	b.w	8014990 <_dtoa_r+0xb18>
 8013f40:	aa14      	add	r2, sp, #80	; 0x50
 8013f42:	a915      	add	r1, sp, #84	; 0x54
 8013f44:	ec47 6b10 	vmov	d0, r6, r7
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f001 fdeb 	bl	8015b24 <__d2b>
 8013f4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013f52:	9004      	str	r0, [sp, #16]
 8013f54:	2d00      	cmp	r5, #0
 8013f56:	d07c      	beq.n	8014052 <_dtoa_r+0x1da>
 8013f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013f60:	46b2      	mov	sl, r6
 8013f62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013f6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013f6e:	2200      	movs	r2, #0
 8013f70:	4b8b      	ldr	r3, [pc, #556]	; (80141a0 <_dtoa_r+0x328>)
 8013f72:	4650      	mov	r0, sl
 8013f74:	4659      	mov	r1, fp
 8013f76:	f7ec f99f 	bl	80002b8 <__aeabi_dsub>
 8013f7a:	a381      	add	r3, pc, #516	; (adr r3, 8014180 <_dtoa_r+0x308>)
 8013f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f80:	f7ec fb52 	bl	8000628 <__aeabi_dmul>
 8013f84:	a380      	add	r3, pc, #512	; (adr r3, 8014188 <_dtoa_r+0x310>)
 8013f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f8a:	f7ec f997 	bl	80002bc <__adddf3>
 8013f8e:	4606      	mov	r6, r0
 8013f90:	4628      	mov	r0, r5
 8013f92:	460f      	mov	r7, r1
 8013f94:	f7ec fade 	bl	8000554 <__aeabi_i2d>
 8013f98:	a37d      	add	r3, pc, #500	; (adr r3, 8014190 <_dtoa_r+0x318>)
 8013f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9e:	f7ec fb43 	bl	8000628 <__aeabi_dmul>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	4639      	mov	r1, r7
 8013faa:	f7ec f987 	bl	80002bc <__adddf3>
 8013fae:	4606      	mov	r6, r0
 8013fb0:	460f      	mov	r7, r1
 8013fb2:	f7ec fde9 	bl	8000b88 <__aeabi_d2iz>
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	4682      	mov	sl, r0
 8013fba:	2300      	movs	r3, #0
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	4639      	mov	r1, r7
 8013fc0:	f7ec fda4 	bl	8000b0c <__aeabi_dcmplt>
 8013fc4:	b148      	cbz	r0, 8013fda <_dtoa_r+0x162>
 8013fc6:	4650      	mov	r0, sl
 8013fc8:	f7ec fac4 	bl	8000554 <__aeabi_i2d>
 8013fcc:	4632      	mov	r2, r6
 8013fce:	463b      	mov	r3, r7
 8013fd0:	f7ec fd92 	bl	8000af8 <__aeabi_dcmpeq>
 8013fd4:	b908      	cbnz	r0, 8013fda <_dtoa_r+0x162>
 8013fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fda:	f1ba 0f16 	cmp.w	sl, #22
 8013fde:	d859      	bhi.n	8014094 <_dtoa_r+0x21c>
 8013fe0:	4970      	ldr	r1, [pc, #448]	; (80141a4 <_dtoa_r+0x32c>)
 8013fe2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fee:	f7ec fdab 	bl	8000b48 <__aeabi_dcmpgt>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	d050      	beq.n	8014098 <_dtoa_r+0x220>
 8013ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014000:	1b5d      	subs	r5, r3, r5
 8014002:	f1b5 0801 	subs.w	r8, r5, #1
 8014006:	bf49      	itett	mi
 8014008:	f1c5 0301 	rsbmi	r3, r5, #1
 801400c:	2300      	movpl	r3, #0
 801400e:	9305      	strmi	r3, [sp, #20]
 8014010:	f04f 0800 	movmi.w	r8, #0
 8014014:	bf58      	it	pl
 8014016:	9305      	strpl	r3, [sp, #20]
 8014018:	f1ba 0f00 	cmp.w	sl, #0
 801401c:	db3e      	blt.n	801409c <_dtoa_r+0x224>
 801401e:	2300      	movs	r3, #0
 8014020:	44d0      	add	r8, sl
 8014022:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014026:	9307      	str	r3, [sp, #28]
 8014028:	9b06      	ldr	r3, [sp, #24]
 801402a:	2b09      	cmp	r3, #9
 801402c:	f200 8090 	bhi.w	8014150 <_dtoa_r+0x2d8>
 8014030:	2b05      	cmp	r3, #5
 8014032:	bfc4      	itt	gt
 8014034:	3b04      	subgt	r3, #4
 8014036:	9306      	strgt	r3, [sp, #24]
 8014038:	9b06      	ldr	r3, [sp, #24]
 801403a:	f1a3 0302 	sub.w	r3, r3, #2
 801403e:	bfcc      	ite	gt
 8014040:	2500      	movgt	r5, #0
 8014042:	2501      	movle	r5, #1
 8014044:	2b03      	cmp	r3, #3
 8014046:	f200 808f 	bhi.w	8014168 <_dtoa_r+0x2f0>
 801404a:	e8df f003 	tbb	[pc, r3]
 801404e:	7f7d      	.short	0x7f7d
 8014050:	7131      	.short	0x7131
 8014052:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014056:	441d      	add	r5, r3
 8014058:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801405c:	2820      	cmp	r0, #32
 801405e:	dd13      	ble.n	8014088 <_dtoa_r+0x210>
 8014060:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014064:	9b00      	ldr	r3, [sp, #0]
 8014066:	fa08 f800 	lsl.w	r8, r8, r0
 801406a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801406e:	fa23 f000 	lsr.w	r0, r3, r0
 8014072:	ea48 0000 	orr.w	r0, r8, r0
 8014076:	f7ec fa5d 	bl	8000534 <__aeabi_ui2d>
 801407a:	2301      	movs	r3, #1
 801407c:	4682      	mov	sl, r0
 801407e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014082:	3d01      	subs	r5, #1
 8014084:	9313      	str	r3, [sp, #76]	; 0x4c
 8014086:	e772      	b.n	8013f6e <_dtoa_r+0xf6>
 8014088:	9b00      	ldr	r3, [sp, #0]
 801408a:	f1c0 0020 	rsb	r0, r0, #32
 801408e:	fa03 f000 	lsl.w	r0, r3, r0
 8014092:	e7f0      	b.n	8014076 <_dtoa_r+0x1fe>
 8014094:	2301      	movs	r3, #1
 8014096:	e7b1      	b.n	8013ffc <_dtoa_r+0x184>
 8014098:	900f      	str	r0, [sp, #60]	; 0x3c
 801409a:	e7b0      	b.n	8013ffe <_dtoa_r+0x186>
 801409c:	9b05      	ldr	r3, [sp, #20]
 801409e:	eba3 030a 	sub.w	r3, r3, sl
 80140a2:	9305      	str	r3, [sp, #20]
 80140a4:	f1ca 0300 	rsb	r3, sl, #0
 80140a8:	9307      	str	r3, [sp, #28]
 80140aa:	2300      	movs	r3, #0
 80140ac:	930e      	str	r3, [sp, #56]	; 0x38
 80140ae:	e7bb      	b.n	8014028 <_dtoa_r+0x1b0>
 80140b0:	2301      	movs	r3, #1
 80140b2:	930a      	str	r3, [sp, #40]	; 0x28
 80140b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dd59      	ble.n	801416e <_dtoa_r+0x2f6>
 80140ba:	9302      	str	r3, [sp, #8]
 80140bc:	4699      	mov	r9, r3
 80140be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80140c0:	2200      	movs	r2, #0
 80140c2:	6072      	str	r2, [r6, #4]
 80140c4:	2204      	movs	r2, #4
 80140c6:	f102 0014 	add.w	r0, r2, #20
 80140ca:	4298      	cmp	r0, r3
 80140cc:	6871      	ldr	r1, [r6, #4]
 80140ce:	d953      	bls.n	8014178 <_dtoa_r+0x300>
 80140d0:	4620      	mov	r0, r4
 80140d2:	f001 f9e6 	bl	80154a2 <_Balloc>
 80140d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140d8:	6030      	str	r0, [r6, #0]
 80140da:	f1b9 0f0e 	cmp.w	r9, #14
 80140de:	f8d3 b000 	ldr.w	fp, [r3]
 80140e2:	f200 80e6 	bhi.w	80142b2 <_dtoa_r+0x43a>
 80140e6:	2d00      	cmp	r5, #0
 80140e8:	f000 80e3 	beq.w	80142b2 <_dtoa_r+0x43a>
 80140ec:	ed9d 7b00 	vldr	d7, [sp]
 80140f0:	f1ba 0f00 	cmp.w	sl, #0
 80140f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80140f8:	dd74      	ble.n	80141e4 <_dtoa_r+0x36c>
 80140fa:	4a2a      	ldr	r2, [pc, #168]	; (80141a4 <_dtoa_r+0x32c>)
 80140fc:	f00a 030f 	and.w	r3, sl, #15
 8014100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014104:	ed93 7b00 	vldr	d7, [r3]
 8014108:	ea4f 162a 	mov.w	r6, sl, asr #4
 801410c:	06f0      	lsls	r0, r6, #27
 801410e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014112:	d565      	bpl.n	80141e0 <_dtoa_r+0x368>
 8014114:	4b24      	ldr	r3, [pc, #144]	; (80141a8 <_dtoa_r+0x330>)
 8014116:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801411a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801411e:	f7ec fbad 	bl	800087c <__aeabi_ddiv>
 8014122:	e9cd 0100 	strd	r0, r1, [sp]
 8014126:	f006 060f 	and.w	r6, r6, #15
 801412a:	2503      	movs	r5, #3
 801412c:	4f1e      	ldr	r7, [pc, #120]	; (80141a8 <_dtoa_r+0x330>)
 801412e:	e04c      	b.n	80141ca <_dtoa_r+0x352>
 8014130:	2301      	movs	r3, #1
 8014132:	930a      	str	r3, [sp, #40]	; 0x28
 8014134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014136:	4453      	add	r3, sl
 8014138:	f103 0901 	add.w	r9, r3, #1
 801413c:	9302      	str	r3, [sp, #8]
 801413e:	464b      	mov	r3, r9
 8014140:	2b01      	cmp	r3, #1
 8014142:	bfb8      	it	lt
 8014144:	2301      	movlt	r3, #1
 8014146:	e7ba      	b.n	80140be <_dtoa_r+0x246>
 8014148:	2300      	movs	r3, #0
 801414a:	e7b2      	b.n	80140b2 <_dtoa_r+0x23a>
 801414c:	2300      	movs	r3, #0
 801414e:	e7f0      	b.n	8014132 <_dtoa_r+0x2ba>
 8014150:	2501      	movs	r5, #1
 8014152:	2300      	movs	r3, #0
 8014154:	9306      	str	r3, [sp, #24]
 8014156:	950a      	str	r5, [sp, #40]	; 0x28
 8014158:	f04f 33ff 	mov.w	r3, #4294967295
 801415c:	9302      	str	r3, [sp, #8]
 801415e:	4699      	mov	r9, r3
 8014160:	2200      	movs	r2, #0
 8014162:	2312      	movs	r3, #18
 8014164:	920b      	str	r2, [sp, #44]	; 0x2c
 8014166:	e7aa      	b.n	80140be <_dtoa_r+0x246>
 8014168:	2301      	movs	r3, #1
 801416a:	930a      	str	r3, [sp, #40]	; 0x28
 801416c:	e7f4      	b.n	8014158 <_dtoa_r+0x2e0>
 801416e:	2301      	movs	r3, #1
 8014170:	9302      	str	r3, [sp, #8]
 8014172:	4699      	mov	r9, r3
 8014174:	461a      	mov	r2, r3
 8014176:	e7f5      	b.n	8014164 <_dtoa_r+0x2ec>
 8014178:	3101      	adds	r1, #1
 801417a:	6071      	str	r1, [r6, #4]
 801417c:	0052      	lsls	r2, r2, #1
 801417e:	e7a2      	b.n	80140c6 <_dtoa_r+0x24e>
 8014180:	636f4361 	.word	0x636f4361
 8014184:	3fd287a7 	.word	0x3fd287a7
 8014188:	8b60c8b3 	.word	0x8b60c8b3
 801418c:	3fc68a28 	.word	0x3fc68a28
 8014190:	509f79fb 	.word	0x509f79fb
 8014194:	3fd34413 	.word	0x3fd34413
 8014198:	7ff00000 	.word	0x7ff00000
 801419c:	08017744 	.word	0x08017744
 80141a0:	3ff80000 	.word	0x3ff80000
 80141a4:	08017648 	.word	0x08017648
 80141a8:	08017620 	.word	0x08017620
 80141ac:	080175a9 	.word	0x080175a9
 80141b0:	07f1      	lsls	r1, r6, #31
 80141b2:	d508      	bpl.n	80141c6 <_dtoa_r+0x34e>
 80141b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80141b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80141bc:	f7ec fa34 	bl	8000628 <__aeabi_dmul>
 80141c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80141c4:	3501      	adds	r5, #1
 80141c6:	1076      	asrs	r6, r6, #1
 80141c8:	3708      	adds	r7, #8
 80141ca:	2e00      	cmp	r6, #0
 80141cc:	d1f0      	bne.n	80141b0 <_dtoa_r+0x338>
 80141ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80141d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141d6:	f7ec fb51 	bl	800087c <__aeabi_ddiv>
 80141da:	e9cd 0100 	strd	r0, r1, [sp]
 80141de:	e01a      	b.n	8014216 <_dtoa_r+0x39e>
 80141e0:	2502      	movs	r5, #2
 80141e2:	e7a3      	b.n	801412c <_dtoa_r+0x2b4>
 80141e4:	f000 80a0 	beq.w	8014328 <_dtoa_r+0x4b0>
 80141e8:	f1ca 0600 	rsb	r6, sl, #0
 80141ec:	4b9f      	ldr	r3, [pc, #636]	; (801446c <_dtoa_r+0x5f4>)
 80141ee:	4fa0      	ldr	r7, [pc, #640]	; (8014470 <_dtoa_r+0x5f8>)
 80141f0:	f006 020f 	and.w	r2, r6, #15
 80141f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014200:	f7ec fa12 	bl	8000628 <__aeabi_dmul>
 8014204:	e9cd 0100 	strd	r0, r1, [sp]
 8014208:	1136      	asrs	r6, r6, #4
 801420a:	2300      	movs	r3, #0
 801420c:	2502      	movs	r5, #2
 801420e:	2e00      	cmp	r6, #0
 8014210:	d17f      	bne.n	8014312 <_dtoa_r+0x49a>
 8014212:	2b00      	cmp	r3, #0
 8014214:	d1e1      	bne.n	80141da <_dtoa_r+0x362>
 8014216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014218:	2b00      	cmp	r3, #0
 801421a:	f000 8087 	beq.w	801432c <_dtoa_r+0x4b4>
 801421e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014222:	2200      	movs	r2, #0
 8014224:	4b93      	ldr	r3, [pc, #588]	; (8014474 <_dtoa_r+0x5fc>)
 8014226:	4630      	mov	r0, r6
 8014228:	4639      	mov	r1, r7
 801422a:	f7ec fc6f 	bl	8000b0c <__aeabi_dcmplt>
 801422e:	2800      	cmp	r0, #0
 8014230:	d07c      	beq.n	801432c <_dtoa_r+0x4b4>
 8014232:	f1b9 0f00 	cmp.w	r9, #0
 8014236:	d079      	beq.n	801432c <_dtoa_r+0x4b4>
 8014238:	9b02      	ldr	r3, [sp, #8]
 801423a:	2b00      	cmp	r3, #0
 801423c:	dd35      	ble.n	80142aa <_dtoa_r+0x432>
 801423e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014242:	9308      	str	r3, [sp, #32]
 8014244:	4639      	mov	r1, r7
 8014246:	2200      	movs	r2, #0
 8014248:	4b8b      	ldr	r3, [pc, #556]	; (8014478 <_dtoa_r+0x600>)
 801424a:	4630      	mov	r0, r6
 801424c:	f7ec f9ec 	bl	8000628 <__aeabi_dmul>
 8014250:	e9cd 0100 	strd	r0, r1, [sp]
 8014254:	9f02      	ldr	r7, [sp, #8]
 8014256:	3501      	adds	r5, #1
 8014258:	4628      	mov	r0, r5
 801425a:	f7ec f97b 	bl	8000554 <__aeabi_i2d>
 801425e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014262:	f7ec f9e1 	bl	8000628 <__aeabi_dmul>
 8014266:	2200      	movs	r2, #0
 8014268:	4b84      	ldr	r3, [pc, #528]	; (801447c <_dtoa_r+0x604>)
 801426a:	f7ec f827 	bl	80002bc <__adddf3>
 801426e:	4605      	mov	r5, r0
 8014270:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014274:	2f00      	cmp	r7, #0
 8014276:	d15d      	bne.n	8014334 <_dtoa_r+0x4bc>
 8014278:	2200      	movs	r2, #0
 801427a:	4b81      	ldr	r3, [pc, #516]	; (8014480 <_dtoa_r+0x608>)
 801427c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014280:	f7ec f81a 	bl	80002b8 <__aeabi_dsub>
 8014284:	462a      	mov	r2, r5
 8014286:	4633      	mov	r3, r6
 8014288:	e9cd 0100 	strd	r0, r1, [sp]
 801428c:	f7ec fc5c 	bl	8000b48 <__aeabi_dcmpgt>
 8014290:	2800      	cmp	r0, #0
 8014292:	f040 8288 	bne.w	80147a6 <_dtoa_r+0x92e>
 8014296:	462a      	mov	r2, r5
 8014298:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801429c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142a0:	f7ec fc34 	bl	8000b0c <__aeabi_dcmplt>
 80142a4:	2800      	cmp	r0, #0
 80142a6:	f040 827c 	bne.w	80147a2 <_dtoa_r+0x92a>
 80142aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142ae:	e9cd 2300 	strd	r2, r3, [sp]
 80142b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f2c0 8150 	blt.w	801455a <_dtoa_r+0x6e2>
 80142ba:	f1ba 0f0e 	cmp.w	sl, #14
 80142be:	f300 814c 	bgt.w	801455a <_dtoa_r+0x6e2>
 80142c2:	4b6a      	ldr	r3, [pc, #424]	; (801446c <_dtoa_r+0x5f4>)
 80142c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142c8:	ed93 7b00 	vldr	d7, [r3]
 80142cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80142d4:	f280 80d8 	bge.w	8014488 <_dtoa_r+0x610>
 80142d8:	f1b9 0f00 	cmp.w	r9, #0
 80142dc:	f300 80d4 	bgt.w	8014488 <_dtoa_r+0x610>
 80142e0:	f040 825e 	bne.w	80147a0 <_dtoa_r+0x928>
 80142e4:	2200      	movs	r2, #0
 80142e6:	4b66      	ldr	r3, [pc, #408]	; (8014480 <_dtoa_r+0x608>)
 80142e8:	ec51 0b17 	vmov	r0, r1, d7
 80142ec:	f7ec f99c 	bl	8000628 <__aeabi_dmul>
 80142f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142f4:	f7ec fc1e 	bl	8000b34 <__aeabi_dcmpge>
 80142f8:	464f      	mov	r7, r9
 80142fa:	464e      	mov	r6, r9
 80142fc:	2800      	cmp	r0, #0
 80142fe:	f040 8234 	bne.w	801476a <_dtoa_r+0x8f2>
 8014302:	2331      	movs	r3, #49	; 0x31
 8014304:	f10b 0501 	add.w	r5, fp, #1
 8014308:	f88b 3000 	strb.w	r3, [fp]
 801430c:	f10a 0a01 	add.w	sl, sl, #1
 8014310:	e22f      	b.n	8014772 <_dtoa_r+0x8fa>
 8014312:	07f2      	lsls	r2, r6, #31
 8014314:	d505      	bpl.n	8014322 <_dtoa_r+0x4aa>
 8014316:	e9d7 2300 	ldrd	r2, r3, [r7]
 801431a:	f7ec f985 	bl	8000628 <__aeabi_dmul>
 801431e:	3501      	adds	r5, #1
 8014320:	2301      	movs	r3, #1
 8014322:	1076      	asrs	r6, r6, #1
 8014324:	3708      	adds	r7, #8
 8014326:	e772      	b.n	801420e <_dtoa_r+0x396>
 8014328:	2502      	movs	r5, #2
 801432a:	e774      	b.n	8014216 <_dtoa_r+0x39e>
 801432c:	f8cd a020 	str.w	sl, [sp, #32]
 8014330:	464f      	mov	r7, r9
 8014332:	e791      	b.n	8014258 <_dtoa_r+0x3e0>
 8014334:	4b4d      	ldr	r3, [pc, #308]	; (801446c <_dtoa_r+0x5f4>)
 8014336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801433a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801433e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014340:	2b00      	cmp	r3, #0
 8014342:	d047      	beq.n	80143d4 <_dtoa_r+0x55c>
 8014344:	4602      	mov	r2, r0
 8014346:	460b      	mov	r3, r1
 8014348:	2000      	movs	r0, #0
 801434a:	494e      	ldr	r1, [pc, #312]	; (8014484 <_dtoa_r+0x60c>)
 801434c:	f7ec fa96 	bl	800087c <__aeabi_ddiv>
 8014350:	462a      	mov	r2, r5
 8014352:	4633      	mov	r3, r6
 8014354:	f7eb ffb0 	bl	80002b8 <__aeabi_dsub>
 8014358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801435c:	465d      	mov	r5, fp
 801435e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014362:	f7ec fc11 	bl	8000b88 <__aeabi_d2iz>
 8014366:	4606      	mov	r6, r0
 8014368:	f7ec f8f4 	bl	8000554 <__aeabi_i2d>
 801436c:	4602      	mov	r2, r0
 801436e:	460b      	mov	r3, r1
 8014370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014374:	f7eb ffa0 	bl	80002b8 <__aeabi_dsub>
 8014378:	3630      	adds	r6, #48	; 0x30
 801437a:	f805 6b01 	strb.w	r6, [r5], #1
 801437e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014382:	e9cd 0100 	strd	r0, r1, [sp]
 8014386:	f7ec fbc1 	bl	8000b0c <__aeabi_dcmplt>
 801438a:	2800      	cmp	r0, #0
 801438c:	d163      	bne.n	8014456 <_dtoa_r+0x5de>
 801438e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014392:	2000      	movs	r0, #0
 8014394:	4937      	ldr	r1, [pc, #220]	; (8014474 <_dtoa_r+0x5fc>)
 8014396:	f7eb ff8f 	bl	80002b8 <__aeabi_dsub>
 801439a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801439e:	f7ec fbb5 	bl	8000b0c <__aeabi_dcmplt>
 80143a2:	2800      	cmp	r0, #0
 80143a4:	f040 80b7 	bne.w	8014516 <_dtoa_r+0x69e>
 80143a8:	eba5 030b 	sub.w	r3, r5, fp
 80143ac:	429f      	cmp	r7, r3
 80143ae:	f77f af7c 	ble.w	80142aa <_dtoa_r+0x432>
 80143b2:	2200      	movs	r2, #0
 80143b4:	4b30      	ldr	r3, [pc, #192]	; (8014478 <_dtoa_r+0x600>)
 80143b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80143ba:	f7ec f935 	bl	8000628 <__aeabi_dmul>
 80143be:	2200      	movs	r2, #0
 80143c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143c4:	4b2c      	ldr	r3, [pc, #176]	; (8014478 <_dtoa_r+0x600>)
 80143c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143ca:	f7ec f92d 	bl	8000628 <__aeabi_dmul>
 80143ce:	e9cd 0100 	strd	r0, r1, [sp]
 80143d2:	e7c4      	b.n	801435e <_dtoa_r+0x4e6>
 80143d4:	462a      	mov	r2, r5
 80143d6:	4633      	mov	r3, r6
 80143d8:	f7ec f926 	bl	8000628 <__aeabi_dmul>
 80143dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143e0:	eb0b 0507 	add.w	r5, fp, r7
 80143e4:	465e      	mov	r6, fp
 80143e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143ea:	f7ec fbcd 	bl	8000b88 <__aeabi_d2iz>
 80143ee:	4607      	mov	r7, r0
 80143f0:	f7ec f8b0 	bl	8000554 <__aeabi_i2d>
 80143f4:	3730      	adds	r7, #48	; 0x30
 80143f6:	4602      	mov	r2, r0
 80143f8:	460b      	mov	r3, r1
 80143fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143fe:	f7eb ff5b 	bl	80002b8 <__aeabi_dsub>
 8014402:	f806 7b01 	strb.w	r7, [r6], #1
 8014406:	42ae      	cmp	r6, r5
 8014408:	e9cd 0100 	strd	r0, r1, [sp]
 801440c:	f04f 0200 	mov.w	r2, #0
 8014410:	d126      	bne.n	8014460 <_dtoa_r+0x5e8>
 8014412:	4b1c      	ldr	r3, [pc, #112]	; (8014484 <_dtoa_r+0x60c>)
 8014414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014418:	f7eb ff50 	bl	80002bc <__adddf3>
 801441c:	4602      	mov	r2, r0
 801441e:	460b      	mov	r3, r1
 8014420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014424:	f7ec fb90 	bl	8000b48 <__aeabi_dcmpgt>
 8014428:	2800      	cmp	r0, #0
 801442a:	d174      	bne.n	8014516 <_dtoa_r+0x69e>
 801442c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014430:	2000      	movs	r0, #0
 8014432:	4914      	ldr	r1, [pc, #80]	; (8014484 <_dtoa_r+0x60c>)
 8014434:	f7eb ff40 	bl	80002b8 <__aeabi_dsub>
 8014438:	4602      	mov	r2, r0
 801443a:	460b      	mov	r3, r1
 801443c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014440:	f7ec fb64 	bl	8000b0c <__aeabi_dcmplt>
 8014444:	2800      	cmp	r0, #0
 8014446:	f43f af30 	beq.w	80142aa <_dtoa_r+0x432>
 801444a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801444e:	2b30      	cmp	r3, #48	; 0x30
 8014450:	f105 32ff 	add.w	r2, r5, #4294967295
 8014454:	d002      	beq.n	801445c <_dtoa_r+0x5e4>
 8014456:	f8dd a020 	ldr.w	sl, [sp, #32]
 801445a:	e04a      	b.n	80144f2 <_dtoa_r+0x67a>
 801445c:	4615      	mov	r5, r2
 801445e:	e7f4      	b.n	801444a <_dtoa_r+0x5d2>
 8014460:	4b05      	ldr	r3, [pc, #20]	; (8014478 <_dtoa_r+0x600>)
 8014462:	f7ec f8e1 	bl	8000628 <__aeabi_dmul>
 8014466:	e9cd 0100 	strd	r0, r1, [sp]
 801446a:	e7bc      	b.n	80143e6 <_dtoa_r+0x56e>
 801446c:	08017648 	.word	0x08017648
 8014470:	08017620 	.word	0x08017620
 8014474:	3ff00000 	.word	0x3ff00000
 8014478:	40240000 	.word	0x40240000
 801447c:	401c0000 	.word	0x401c0000
 8014480:	40140000 	.word	0x40140000
 8014484:	3fe00000 	.word	0x3fe00000
 8014488:	e9dd 6700 	ldrd	r6, r7, [sp]
 801448c:	465d      	mov	r5, fp
 801448e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014492:	4630      	mov	r0, r6
 8014494:	4639      	mov	r1, r7
 8014496:	f7ec f9f1 	bl	800087c <__aeabi_ddiv>
 801449a:	f7ec fb75 	bl	8000b88 <__aeabi_d2iz>
 801449e:	4680      	mov	r8, r0
 80144a0:	f7ec f858 	bl	8000554 <__aeabi_i2d>
 80144a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144a8:	f7ec f8be 	bl	8000628 <__aeabi_dmul>
 80144ac:	4602      	mov	r2, r0
 80144ae:	460b      	mov	r3, r1
 80144b0:	4630      	mov	r0, r6
 80144b2:	4639      	mov	r1, r7
 80144b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80144b8:	f7eb fefe 	bl	80002b8 <__aeabi_dsub>
 80144bc:	f805 6b01 	strb.w	r6, [r5], #1
 80144c0:	eba5 060b 	sub.w	r6, r5, fp
 80144c4:	45b1      	cmp	r9, r6
 80144c6:	4602      	mov	r2, r0
 80144c8:	460b      	mov	r3, r1
 80144ca:	d139      	bne.n	8014540 <_dtoa_r+0x6c8>
 80144cc:	f7eb fef6 	bl	80002bc <__adddf3>
 80144d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144d4:	4606      	mov	r6, r0
 80144d6:	460f      	mov	r7, r1
 80144d8:	f7ec fb36 	bl	8000b48 <__aeabi_dcmpgt>
 80144dc:	b9c8      	cbnz	r0, 8014512 <_dtoa_r+0x69a>
 80144de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144e2:	4630      	mov	r0, r6
 80144e4:	4639      	mov	r1, r7
 80144e6:	f7ec fb07 	bl	8000af8 <__aeabi_dcmpeq>
 80144ea:	b110      	cbz	r0, 80144f2 <_dtoa_r+0x67a>
 80144ec:	f018 0f01 	tst.w	r8, #1
 80144f0:	d10f      	bne.n	8014512 <_dtoa_r+0x69a>
 80144f2:	9904      	ldr	r1, [sp, #16]
 80144f4:	4620      	mov	r0, r4
 80144f6:	f001 f808 	bl	801550a <_Bfree>
 80144fa:	2300      	movs	r3, #0
 80144fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144fe:	702b      	strb	r3, [r5, #0]
 8014500:	f10a 0301 	add.w	r3, sl, #1
 8014504:	6013      	str	r3, [r2, #0]
 8014506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014508:	2b00      	cmp	r3, #0
 801450a:	f000 8241 	beq.w	8014990 <_dtoa_r+0xb18>
 801450e:	601d      	str	r5, [r3, #0]
 8014510:	e23e      	b.n	8014990 <_dtoa_r+0xb18>
 8014512:	f8cd a020 	str.w	sl, [sp, #32]
 8014516:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801451a:	2a39      	cmp	r2, #57	; 0x39
 801451c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014520:	d108      	bne.n	8014534 <_dtoa_r+0x6bc>
 8014522:	459b      	cmp	fp, r3
 8014524:	d10a      	bne.n	801453c <_dtoa_r+0x6c4>
 8014526:	9b08      	ldr	r3, [sp, #32]
 8014528:	3301      	adds	r3, #1
 801452a:	9308      	str	r3, [sp, #32]
 801452c:	2330      	movs	r3, #48	; 0x30
 801452e:	f88b 3000 	strb.w	r3, [fp]
 8014532:	465b      	mov	r3, fp
 8014534:	781a      	ldrb	r2, [r3, #0]
 8014536:	3201      	adds	r2, #1
 8014538:	701a      	strb	r2, [r3, #0]
 801453a:	e78c      	b.n	8014456 <_dtoa_r+0x5de>
 801453c:	461d      	mov	r5, r3
 801453e:	e7ea      	b.n	8014516 <_dtoa_r+0x69e>
 8014540:	2200      	movs	r2, #0
 8014542:	4b9b      	ldr	r3, [pc, #620]	; (80147b0 <_dtoa_r+0x938>)
 8014544:	f7ec f870 	bl	8000628 <__aeabi_dmul>
 8014548:	2200      	movs	r2, #0
 801454a:	2300      	movs	r3, #0
 801454c:	4606      	mov	r6, r0
 801454e:	460f      	mov	r7, r1
 8014550:	f7ec fad2 	bl	8000af8 <__aeabi_dcmpeq>
 8014554:	2800      	cmp	r0, #0
 8014556:	d09a      	beq.n	801448e <_dtoa_r+0x616>
 8014558:	e7cb      	b.n	80144f2 <_dtoa_r+0x67a>
 801455a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801455c:	2a00      	cmp	r2, #0
 801455e:	f000 808b 	beq.w	8014678 <_dtoa_r+0x800>
 8014562:	9a06      	ldr	r2, [sp, #24]
 8014564:	2a01      	cmp	r2, #1
 8014566:	dc6e      	bgt.n	8014646 <_dtoa_r+0x7ce>
 8014568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801456a:	2a00      	cmp	r2, #0
 801456c:	d067      	beq.n	801463e <_dtoa_r+0x7c6>
 801456e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014572:	9f07      	ldr	r7, [sp, #28]
 8014574:	9d05      	ldr	r5, [sp, #20]
 8014576:	9a05      	ldr	r2, [sp, #20]
 8014578:	2101      	movs	r1, #1
 801457a:	441a      	add	r2, r3
 801457c:	4620      	mov	r0, r4
 801457e:	9205      	str	r2, [sp, #20]
 8014580:	4498      	add	r8, r3
 8014582:	f001 f8a0 	bl	80156c6 <__i2b>
 8014586:	4606      	mov	r6, r0
 8014588:	2d00      	cmp	r5, #0
 801458a:	dd0c      	ble.n	80145a6 <_dtoa_r+0x72e>
 801458c:	f1b8 0f00 	cmp.w	r8, #0
 8014590:	dd09      	ble.n	80145a6 <_dtoa_r+0x72e>
 8014592:	4545      	cmp	r5, r8
 8014594:	9a05      	ldr	r2, [sp, #20]
 8014596:	462b      	mov	r3, r5
 8014598:	bfa8      	it	ge
 801459a:	4643      	movge	r3, r8
 801459c:	1ad2      	subs	r2, r2, r3
 801459e:	9205      	str	r2, [sp, #20]
 80145a0:	1aed      	subs	r5, r5, r3
 80145a2:	eba8 0803 	sub.w	r8, r8, r3
 80145a6:	9b07      	ldr	r3, [sp, #28]
 80145a8:	b1eb      	cbz	r3, 80145e6 <_dtoa_r+0x76e>
 80145aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d067      	beq.n	8014680 <_dtoa_r+0x808>
 80145b0:	b18f      	cbz	r7, 80145d6 <_dtoa_r+0x75e>
 80145b2:	4631      	mov	r1, r6
 80145b4:	463a      	mov	r2, r7
 80145b6:	4620      	mov	r0, r4
 80145b8:	f001 f924 	bl	8015804 <__pow5mult>
 80145bc:	9a04      	ldr	r2, [sp, #16]
 80145be:	4601      	mov	r1, r0
 80145c0:	4606      	mov	r6, r0
 80145c2:	4620      	mov	r0, r4
 80145c4:	f001 f888 	bl	80156d8 <__multiply>
 80145c8:	9904      	ldr	r1, [sp, #16]
 80145ca:	9008      	str	r0, [sp, #32]
 80145cc:	4620      	mov	r0, r4
 80145ce:	f000 ff9c 	bl	801550a <_Bfree>
 80145d2:	9b08      	ldr	r3, [sp, #32]
 80145d4:	9304      	str	r3, [sp, #16]
 80145d6:	9b07      	ldr	r3, [sp, #28]
 80145d8:	1bda      	subs	r2, r3, r7
 80145da:	d004      	beq.n	80145e6 <_dtoa_r+0x76e>
 80145dc:	9904      	ldr	r1, [sp, #16]
 80145de:	4620      	mov	r0, r4
 80145e0:	f001 f910 	bl	8015804 <__pow5mult>
 80145e4:	9004      	str	r0, [sp, #16]
 80145e6:	2101      	movs	r1, #1
 80145e8:	4620      	mov	r0, r4
 80145ea:	f001 f86c 	bl	80156c6 <__i2b>
 80145ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145f0:	4607      	mov	r7, r0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f000 81d0 	beq.w	8014998 <_dtoa_r+0xb20>
 80145f8:	461a      	mov	r2, r3
 80145fa:	4601      	mov	r1, r0
 80145fc:	4620      	mov	r0, r4
 80145fe:	f001 f901 	bl	8015804 <__pow5mult>
 8014602:	9b06      	ldr	r3, [sp, #24]
 8014604:	2b01      	cmp	r3, #1
 8014606:	4607      	mov	r7, r0
 8014608:	dc40      	bgt.n	801468c <_dtoa_r+0x814>
 801460a:	9b00      	ldr	r3, [sp, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d139      	bne.n	8014684 <_dtoa_r+0x80c>
 8014610:	9b01      	ldr	r3, [sp, #4]
 8014612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014616:	2b00      	cmp	r3, #0
 8014618:	d136      	bne.n	8014688 <_dtoa_r+0x810>
 801461a:	9b01      	ldr	r3, [sp, #4]
 801461c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014620:	0d1b      	lsrs	r3, r3, #20
 8014622:	051b      	lsls	r3, r3, #20
 8014624:	b12b      	cbz	r3, 8014632 <_dtoa_r+0x7ba>
 8014626:	9b05      	ldr	r3, [sp, #20]
 8014628:	3301      	adds	r3, #1
 801462a:	9305      	str	r3, [sp, #20]
 801462c:	f108 0801 	add.w	r8, r8, #1
 8014630:	2301      	movs	r3, #1
 8014632:	9307      	str	r3, [sp, #28]
 8014634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014636:	2b00      	cmp	r3, #0
 8014638:	d12a      	bne.n	8014690 <_dtoa_r+0x818>
 801463a:	2001      	movs	r0, #1
 801463c:	e030      	b.n	80146a0 <_dtoa_r+0x828>
 801463e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014640:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014644:	e795      	b.n	8014572 <_dtoa_r+0x6fa>
 8014646:	9b07      	ldr	r3, [sp, #28]
 8014648:	f109 37ff 	add.w	r7, r9, #4294967295
 801464c:	42bb      	cmp	r3, r7
 801464e:	bfbf      	itttt	lt
 8014650:	9b07      	ldrlt	r3, [sp, #28]
 8014652:	9707      	strlt	r7, [sp, #28]
 8014654:	1afa      	sublt	r2, r7, r3
 8014656:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014658:	bfbb      	ittet	lt
 801465a:	189b      	addlt	r3, r3, r2
 801465c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801465e:	1bdf      	subge	r7, r3, r7
 8014660:	2700      	movlt	r7, #0
 8014662:	f1b9 0f00 	cmp.w	r9, #0
 8014666:	bfb5      	itete	lt
 8014668:	9b05      	ldrlt	r3, [sp, #20]
 801466a:	9d05      	ldrge	r5, [sp, #20]
 801466c:	eba3 0509 	sublt.w	r5, r3, r9
 8014670:	464b      	movge	r3, r9
 8014672:	bfb8      	it	lt
 8014674:	2300      	movlt	r3, #0
 8014676:	e77e      	b.n	8014576 <_dtoa_r+0x6fe>
 8014678:	9f07      	ldr	r7, [sp, #28]
 801467a:	9d05      	ldr	r5, [sp, #20]
 801467c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801467e:	e783      	b.n	8014588 <_dtoa_r+0x710>
 8014680:	9a07      	ldr	r2, [sp, #28]
 8014682:	e7ab      	b.n	80145dc <_dtoa_r+0x764>
 8014684:	2300      	movs	r3, #0
 8014686:	e7d4      	b.n	8014632 <_dtoa_r+0x7ba>
 8014688:	9b00      	ldr	r3, [sp, #0]
 801468a:	e7d2      	b.n	8014632 <_dtoa_r+0x7ba>
 801468c:	2300      	movs	r3, #0
 801468e:	9307      	str	r3, [sp, #28]
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014696:	6918      	ldr	r0, [r3, #16]
 8014698:	f000 ffc7 	bl	801562a <__hi0bits>
 801469c:	f1c0 0020 	rsb	r0, r0, #32
 80146a0:	4440      	add	r0, r8
 80146a2:	f010 001f 	ands.w	r0, r0, #31
 80146a6:	d047      	beq.n	8014738 <_dtoa_r+0x8c0>
 80146a8:	f1c0 0320 	rsb	r3, r0, #32
 80146ac:	2b04      	cmp	r3, #4
 80146ae:	dd3b      	ble.n	8014728 <_dtoa_r+0x8b0>
 80146b0:	9b05      	ldr	r3, [sp, #20]
 80146b2:	f1c0 001c 	rsb	r0, r0, #28
 80146b6:	4403      	add	r3, r0
 80146b8:	9305      	str	r3, [sp, #20]
 80146ba:	4405      	add	r5, r0
 80146bc:	4480      	add	r8, r0
 80146be:	9b05      	ldr	r3, [sp, #20]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	dd05      	ble.n	80146d0 <_dtoa_r+0x858>
 80146c4:	461a      	mov	r2, r3
 80146c6:	9904      	ldr	r1, [sp, #16]
 80146c8:	4620      	mov	r0, r4
 80146ca:	f001 f8e9 	bl	80158a0 <__lshift>
 80146ce:	9004      	str	r0, [sp, #16]
 80146d0:	f1b8 0f00 	cmp.w	r8, #0
 80146d4:	dd05      	ble.n	80146e2 <_dtoa_r+0x86a>
 80146d6:	4639      	mov	r1, r7
 80146d8:	4642      	mov	r2, r8
 80146da:	4620      	mov	r0, r4
 80146dc:	f001 f8e0 	bl	80158a0 <__lshift>
 80146e0:	4607      	mov	r7, r0
 80146e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146e4:	b353      	cbz	r3, 801473c <_dtoa_r+0x8c4>
 80146e6:	4639      	mov	r1, r7
 80146e8:	9804      	ldr	r0, [sp, #16]
 80146ea:	f001 f92d 	bl	8015948 <__mcmp>
 80146ee:	2800      	cmp	r0, #0
 80146f0:	da24      	bge.n	801473c <_dtoa_r+0x8c4>
 80146f2:	2300      	movs	r3, #0
 80146f4:	220a      	movs	r2, #10
 80146f6:	9904      	ldr	r1, [sp, #16]
 80146f8:	4620      	mov	r0, r4
 80146fa:	f000 ff1d 	bl	8015538 <__multadd>
 80146fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014700:	9004      	str	r0, [sp, #16]
 8014702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 814d 	beq.w	80149a6 <_dtoa_r+0xb2e>
 801470c:	2300      	movs	r3, #0
 801470e:	4631      	mov	r1, r6
 8014710:	220a      	movs	r2, #10
 8014712:	4620      	mov	r0, r4
 8014714:	f000 ff10 	bl	8015538 <__multadd>
 8014718:	9b02      	ldr	r3, [sp, #8]
 801471a:	2b00      	cmp	r3, #0
 801471c:	4606      	mov	r6, r0
 801471e:	dc4f      	bgt.n	80147c0 <_dtoa_r+0x948>
 8014720:	9b06      	ldr	r3, [sp, #24]
 8014722:	2b02      	cmp	r3, #2
 8014724:	dd4c      	ble.n	80147c0 <_dtoa_r+0x948>
 8014726:	e011      	b.n	801474c <_dtoa_r+0x8d4>
 8014728:	d0c9      	beq.n	80146be <_dtoa_r+0x846>
 801472a:	9a05      	ldr	r2, [sp, #20]
 801472c:	331c      	adds	r3, #28
 801472e:	441a      	add	r2, r3
 8014730:	9205      	str	r2, [sp, #20]
 8014732:	441d      	add	r5, r3
 8014734:	4498      	add	r8, r3
 8014736:	e7c2      	b.n	80146be <_dtoa_r+0x846>
 8014738:	4603      	mov	r3, r0
 801473a:	e7f6      	b.n	801472a <_dtoa_r+0x8b2>
 801473c:	f1b9 0f00 	cmp.w	r9, #0
 8014740:	dc38      	bgt.n	80147b4 <_dtoa_r+0x93c>
 8014742:	9b06      	ldr	r3, [sp, #24]
 8014744:	2b02      	cmp	r3, #2
 8014746:	dd35      	ble.n	80147b4 <_dtoa_r+0x93c>
 8014748:	f8cd 9008 	str.w	r9, [sp, #8]
 801474c:	9b02      	ldr	r3, [sp, #8]
 801474e:	b963      	cbnz	r3, 801476a <_dtoa_r+0x8f2>
 8014750:	4639      	mov	r1, r7
 8014752:	2205      	movs	r2, #5
 8014754:	4620      	mov	r0, r4
 8014756:	f000 feef 	bl	8015538 <__multadd>
 801475a:	4601      	mov	r1, r0
 801475c:	4607      	mov	r7, r0
 801475e:	9804      	ldr	r0, [sp, #16]
 8014760:	f001 f8f2 	bl	8015948 <__mcmp>
 8014764:	2800      	cmp	r0, #0
 8014766:	f73f adcc 	bgt.w	8014302 <_dtoa_r+0x48a>
 801476a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801476c:	465d      	mov	r5, fp
 801476e:	ea6f 0a03 	mvn.w	sl, r3
 8014772:	f04f 0900 	mov.w	r9, #0
 8014776:	4639      	mov	r1, r7
 8014778:	4620      	mov	r0, r4
 801477a:	f000 fec6 	bl	801550a <_Bfree>
 801477e:	2e00      	cmp	r6, #0
 8014780:	f43f aeb7 	beq.w	80144f2 <_dtoa_r+0x67a>
 8014784:	f1b9 0f00 	cmp.w	r9, #0
 8014788:	d005      	beq.n	8014796 <_dtoa_r+0x91e>
 801478a:	45b1      	cmp	r9, r6
 801478c:	d003      	beq.n	8014796 <_dtoa_r+0x91e>
 801478e:	4649      	mov	r1, r9
 8014790:	4620      	mov	r0, r4
 8014792:	f000 feba 	bl	801550a <_Bfree>
 8014796:	4631      	mov	r1, r6
 8014798:	4620      	mov	r0, r4
 801479a:	f000 feb6 	bl	801550a <_Bfree>
 801479e:	e6a8      	b.n	80144f2 <_dtoa_r+0x67a>
 80147a0:	2700      	movs	r7, #0
 80147a2:	463e      	mov	r6, r7
 80147a4:	e7e1      	b.n	801476a <_dtoa_r+0x8f2>
 80147a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80147aa:	463e      	mov	r6, r7
 80147ac:	e5a9      	b.n	8014302 <_dtoa_r+0x48a>
 80147ae:	bf00      	nop
 80147b0:	40240000 	.word	0x40240000
 80147b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	f000 80fa 	beq.w	80149b4 <_dtoa_r+0xb3c>
 80147c0:	2d00      	cmp	r5, #0
 80147c2:	dd05      	ble.n	80147d0 <_dtoa_r+0x958>
 80147c4:	4631      	mov	r1, r6
 80147c6:	462a      	mov	r2, r5
 80147c8:	4620      	mov	r0, r4
 80147ca:	f001 f869 	bl	80158a0 <__lshift>
 80147ce:	4606      	mov	r6, r0
 80147d0:	9b07      	ldr	r3, [sp, #28]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d04c      	beq.n	8014870 <_dtoa_r+0x9f8>
 80147d6:	6871      	ldr	r1, [r6, #4]
 80147d8:	4620      	mov	r0, r4
 80147da:	f000 fe62 	bl	80154a2 <_Balloc>
 80147de:	6932      	ldr	r2, [r6, #16]
 80147e0:	3202      	adds	r2, #2
 80147e2:	4605      	mov	r5, r0
 80147e4:	0092      	lsls	r2, r2, #2
 80147e6:	f106 010c 	add.w	r1, r6, #12
 80147ea:	300c      	adds	r0, #12
 80147ec:	f000 fe4e 	bl	801548c <memcpy>
 80147f0:	2201      	movs	r2, #1
 80147f2:	4629      	mov	r1, r5
 80147f4:	4620      	mov	r0, r4
 80147f6:	f001 f853 	bl	80158a0 <__lshift>
 80147fa:	9b00      	ldr	r3, [sp, #0]
 80147fc:	f8cd b014 	str.w	fp, [sp, #20]
 8014800:	f003 0301 	and.w	r3, r3, #1
 8014804:	46b1      	mov	r9, r6
 8014806:	9307      	str	r3, [sp, #28]
 8014808:	4606      	mov	r6, r0
 801480a:	4639      	mov	r1, r7
 801480c:	9804      	ldr	r0, [sp, #16]
 801480e:	f7ff faa7 	bl	8013d60 <quorem>
 8014812:	4649      	mov	r1, r9
 8014814:	4605      	mov	r5, r0
 8014816:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801481a:	9804      	ldr	r0, [sp, #16]
 801481c:	f001 f894 	bl	8015948 <__mcmp>
 8014820:	4632      	mov	r2, r6
 8014822:	9000      	str	r0, [sp, #0]
 8014824:	4639      	mov	r1, r7
 8014826:	4620      	mov	r0, r4
 8014828:	f001 f8a8 	bl	801597c <__mdiff>
 801482c:	68c3      	ldr	r3, [r0, #12]
 801482e:	4602      	mov	r2, r0
 8014830:	bb03      	cbnz	r3, 8014874 <_dtoa_r+0x9fc>
 8014832:	4601      	mov	r1, r0
 8014834:	9008      	str	r0, [sp, #32]
 8014836:	9804      	ldr	r0, [sp, #16]
 8014838:	f001 f886 	bl	8015948 <__mcmp>
 801483c:	9a08      	ldr	r2, [sp, #32]
 801483e:	4603      	mov	r3, r0
 8014840:	4611      	mov	r1, r2
 8014842:	4620      	mov	r0, r4
 8014844:	9308      	str	r3, [sp, #32]
 8014846:	f000 fe60 	bl	801550a <_Bfree>
 801484a:	9b08      	ldr	r3, [sp, #32]
 801484c:	b9a3      	cbnz	r3, 8014878 <_dtoa_r+0xa00>
 801484e:	9a06      	ldr	r2, [sp, #24]
 8014850:	b992      	cbnz	r2, 8014878 <_dtoa_r+0xa00>
 8014852:	9a07      	ldr	r2, [sp, #28]
 8014854:	b982      	cbnz	r2, 8014878 <_dtoa_r+0xa00>
 8014856:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801485a:	d029      	beq.n	80148b0 <_dtoa_r+0xa38>
 801485c:	9b00      	ldr	r3, [sp, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	dd01      	ble.n	8014866 <_dtoa_r+0x9ee>
 8014862:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014866:	9b05      	ldr	r3, [sp, #20]
 8014868:	1c5d      	adds	r5, r3, #1
 801486a:	f883 8000 	strb.w	r8, [r3]
 801486e:	e782      	b.n	8014776 <_dtoa_r+0x8fe>
 8014870:	4630      	mov	r0, r6
 8014872:	e7c2      	b.n	80147fa <_dtoa_r+0x982>
 8014874:	2301      	movs	r3, #1
 8014876:	e7e3      	b.n	8014840 <_dtoa_r+0x9c8>
 8014878:	9a00      	ldr	r2, [sp, #0]
 801487a:	2a00      	cmp	r2, #0
 801487c:	db04      	blt.n	8014888 <_dtoa_r+0xa10>
 801487e:	d125      	bne.n	80148cc <_dtoa_r+0xa54>
 8014880:	9a06      	ldr	r2, [sp, #24]
 8014882:	bb1a      	cbnz	r2, 80148cc <_dtoa_r+0xa54>
 8014884:	9a07      	ldr	r2, [sp, #28]
 8014886:	bb0a      	cbnz	r2, 80148cc <_dtoa_r+0xa54>
 8014888:	2b00      	cmp	r3, #0
 801488a:	ddec      	ble.n	8014866 <_dtoa_r+0x9ee>
 801488c:	2201      	movs	r2, #1
 801488e:	9904      	ldr	r1, [sp, #16]
 8014890:	4620      	mov	r0, r4
 8014892:	f001 f805 	bl	80158a0 <__lshift>
 8014896:	4639      	mov	r1, r7
 8014898:	9004      	str	r0, [sp, #16]
 801489a:	f001 f855 	bl	8015948 <__mcmp>
 801489e:	2800      	cmp	r0, #0
 80148a0:	dc03      	bgt.n	80148aa <_dtoa_r+0xa32>
 80148a2:	d1e0      	bne.n	8014866 <_dtoa_r+0x9ee>
 80148a4:	f018 0f01 	tst.w	r8, #1
 80148a8:	d0dd      	beq.n	8014866 <_dtoa_r+0x9ee>
 80148aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148ae:	d1d8      	bne.n	8014862 <_dtoa_r+0x9ea>
 80148b0:	9b05      	ldr	r3, [sp, #20]
 80148b2:	9a05      	ldr	r2, [sp, #20]
 80148b4:	1c5d      	adds	r5, r3, #1
 80148b6:	2339      	movs	r3, #57	; 0x39
 80148b8:	7013      	strb	r3, [r2, #0]
 80148ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80148be:	2b39      	cmp	r3, #57	; 0x39
 80148c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80148c4:	d04f      	beq.n	8014966 <_dtoa_r+0xaee>
 80148c6:	3301      	adds	r3, #1
 80148c8:	7013      	strb	r3, [r2, #0]
 80148ca:	e754      	b.n	8014776 <_dtoa_r+0x8fe>
 80148cc:	9a05      	ldr	r2, [sp, #20]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	f102 0501 	add.w	r5, r2, #1
 80148d4:	dd06      	ble.n	80148e4 <_dtoa_r+0xa6c>
 80148d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148da:	d0e9      	beq.n	80148b0 <_dtoa_r+0xa38>
 80148dc:	f108 0801 	add.w	r8, r8, #1
 80148e0:	9b05      	ldr	r3, [sp, #20]
 80148e2:	e7c2      	b.n	801486a <_dtoa_r+0x9f2>
 80148e4:	9a02      	ldr	r2, [sp, #8]
 80148e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80148ea:	eba5 030b 	sub.w	r3, r5, fp
 80148ee:	4293      	cmp	r3, r2
 80148f0:	d021      	beq.n	8014936 <_dtoa_r+0xabe>
 80148f2:	2300      	movs	r3, #0
 80148f4:	220a      	movs	r2, #10
 80148f6:	9904      	ldr	r1, [sp, #16]
 80148f8:	4620      	mov	r0, r4
 80148fa:	f000 fe1d 	bl	8015538 <__multadd>
 80148fe:	45b1      	cmp	r9, r6
 8014900:	9004      	str	r0, [sp, #16]
 8014902:	f04f 0300 	mov.w	r3, #0
 8014906:	f04f 020a 	mov.w	r2, #10
 801490a:	4649      	mov	r1, r9
 801490c:	4620      	mov	r0, r4
 801490e:	d105      	bne.n	801491c <_dtoa_r+0xaa4>
 8014910:	f000 fe12 	bl	8015538 <__multadd>
 8014914:	4681      	mov	r9, r0
 8014916:	4606      	mov	r6, r0
 8014918:	9505      	str	r5, [sp, #20]
 801491a:	e776      	b.n	801480a <_dtoa_r+0x992>
 801491c:	f000 fe0c 	bl	8015538 <__multadd>
 8014920:	4631      	mov	r1, r6
 8014922:	4681      	mov	r9, r0
 8014924:	2300      	movs	r3, #0
 8014926:	220a      	movs	r2, #10
 8014928:	4620      	mov	r0, r4
 801492a:	f000 fe05 	bl	8015538 <__multadd>
 801492e:	4606      	mov	r6, r0
 8014930:	e7f2      	b.n	8014918 <_dtoa_r+0xaa0>
 8014932:	f04f 0900 	mov.w	r9, #0
 8014936:	2201      	movs	r2, #1
 8014938:	9904      	ldr	r1, [sp, #16]
 801493a:	4620      	mov	r0, r4
 801493c:	f000 ffb0 	bl	80158a0 <__lshift>
 8014940:	4639      	mov	r1, r7
 8014942:	9004      	str	r0, [sp, #16]
 8014944:	f001 f800 	bl	8015948 <__mcmp>
 8014948:	2800      	cmp	r0, #0
 801494a:	dcb6      	bgt.n	80148ba <_dtoa_r+0xa42>
 801494c:	d102      	bne.n	8014954 <_dtoa_r+0xadc>
 801494e:	f018 0f01 	tst.w	r8, #1
 8014952:	d1b2      	bne.n	80148ba <_dtoa_r+0xa42>
 8014954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014958:	2b30      	cmp	r3, #48	; 0x30
 801495a:	f105 32ff 	add.w	r2, r5, #4294967295
 801495e:	f47f af0a 	bne.w	8014776 <_dtoa_r+0x8fe>
 8014962:	4615      	mov	r5, r2
 8014964:	e7f6      	b.n	8014954 <_dtoa_r+0xadc>
 8014966:	4593      	cmp	fp, r2
 8014968:	d105      	bne.n	8014976 <_dtoa_r+0xafe>
 801496a:	2331      	movs	r3, #49	; 0x31
 801496c:	f10a 0a01 	add.w	sl, sl, #1
 8014970:	f88b 3000 	strb.w	r3, [fp]
 8014974:	e6ff      	b.n	8014776 <_dtoa_r+0x8fe>
 8014976:	4615      	mov	r5, r2
 8014978:	e79f      	b.n	80148ba <_dtoa_r+0xa42>
 801497a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80149e0 <_dtoa_r+0xb68>
 801497e:	e007      	b.n	8014990 <_dtoa_r+0xb18>
 8014980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014982:	f8df b060 	ldr.w	fp, [pc, #96]	; 80149e4 <_dtoa_r+0xb6c>
 8014986:	b11b      	cbz	r3, 8014990 <_dtoa_r+0xb18>
 8014988:	f10b 0308 	add.w	r3, fp, #8
 801498c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801498e:	6013      	str	r3, [r2, #0]
 8014990:	4658      	mov	r0, fp
 8014992:	b017      	add	sp, #92	; 0x5c
 8014994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014998:	9b06      	ldr	r3, [sp, #24]
 801499a:	2b01      	cmp	r3, #1
 801499c:	f77f ae35 	ble.w	801460a <_dtoa_r+0x792>
 80149a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149a2:	9307      	str	r3, [sp, #28]
 80149a4:	e649      	b.n	801463a <_dtoa_r+0x7c2>
 80149a6:	9b02      	ldr	r3, [sp, #8]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	dc03      	bgt.n	80149b4 <_dtoa_r+0xb3c>
 80149ac:	9b06      	ldr	r3, [sp, #24]
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	f73f aecc 	bgt.w	801474c <_dtoa_r+0x8d4>
 80149b4:	465d      	mov	r5, fp
 80149b6:	4639      	mov	r1, r7
 80149b8:	9804      	ldr	r0, [sp, #16]
 80149ba:	f7ff f9d1 	bl	8013d60 <quorem>
 80149be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80149c2:	f805 8b01 	strb.w	r8, [r5], #1
 80149c6:	9a02      	ldr	r2, [sp, #8]
 80149c8:	eba5 030b 	sub.w	r3, r5, fp
 80149cc:	429a      	cmp	r2, r3
 80149ce:	ddb0      	ble.n	8014932 <_dtoa_r+0xaba>
 80149d0:	2300      	movs	r3, #0
 80149d2:	220a      	movs	r2, #10
 80149d4:	9904      	ldr	r1, [sp, #16]
 80149d6:	4620      	mov	r0, r4
 80149d8:	f000 fdae 	bl	8015538 <__multadd>
 80149dc:	9004      	str	r0, [sp, #16]
 80149de:	e7ea      	b.n	80149b6 <_dtoa_r+0xb3e>
 80149e0:	08017743 	.word	0x08017743
 80149e4:	080175a0 	.word	0x080175a0

080149e8 <__sflush_r>:
 80149e8:	898a      	ldrh	r2, [r1, #12]
 80149ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ee:	4605      	mov	r5, r0
 80149f0:	0710      	lsls	r0, r2, #28
 80149f2:	460c      	mov	r4, r1
 80149f4:	d458      	bmi.n	8014aa8 <__sflush_r+0xc0>
 80149f6:	684b      	ldr	r3, [r1, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	dc05      	bgt.n	8014a08 <__sflush_r+0x20>
 80149fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	dc02      	bgt.n	8014a08 <__sflush_r+0x20>
 8014a02:	2000      	movs	r0, #0
 8014a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a0a:	2e00      	cmp	r6, #0
 8014a0c:	d0f9      	beq.n	8014a02 <__sflush_r+0x1a>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a14:	682f      	ldr	r7, [r5, #0]
 8014a16:	6a21      	ldr	r1, [r4, #32]
 8014a18:	602b      	str	r3, [r5, #0]
 8014a1a:	d032      	beq.n	8014a82 <__sflush_r+0x9a>
 8014a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a1e:	89a3      	ldrh	r3, [r4, #12]
 8014a20:	075a      	lsls	r2, r3, #29
 8014a22:	d505      	bpl.n	8014a30 <__sflush_r+0x48>
 8014a24:	6863      	ldr	r3, [r4, #4]
 8014a26:	1ac0      	subs	r0, r0, r3
 8014a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a2a:	b10b      	cbz	r3, 8014a30 <__sflush_r+0x48>
 8014a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a2e:	1ac0      	subs	r0, r0, r3
 8014a30:	2300      	movs	r3, #0
 8014a32:	4602      	mov	r2, r0
 8014a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a36:	6a21      	ldr	r1, [r4, #32]
 8014a38:	4628      	mov	r0, r5
 8014a3a:	47b0      	blx	r6
 8014a3c:	1c43      	adds	r3, r0, #1
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	d106      	bne.n	8014a50 <__sflush_r+0x68>
 8014a42:	6829      	ldr	r1, [r5, #0]
 8014a44:	291d      	cmp	r1, #29
 8014a46:	d848      	bhi.n	8014ada <__sflush_r+0xf2>
 8014a48:	4a29      	ldr	r2, [pc, #164]	; (8014af0 <__sflush_r+0x108>)
 8014a4a:	40ca      	lsrs	r2, r1
 8014a4c:	07d6      	lsls	r6, r2, #31
 8014a4e:	d544      	bpl.n	8014ada <__sflush_r+0xf2>
 8014a50:	2200      	movs	r2, #0
 8014a52:	6062      	str	r2, [r4, #4]
 8014a54:	04d9      	lsls	r1, r3, #19
 8014a56:	6922      	ldr	r2, [r4, #16]
 8014a58:	6022      	str	r2, [r4, #0]
 8014a5a:	d504      	bpl.n	8014a66 <__sflush_r+0x7e>
 8014a5c:	1c42      	adds	r2, r0, #1
 8014a5e:	d101      	bne.n	8014a64 <__sflush_r+0x7c>
 8014a60:	682b      	ldr	r3, [r5, #0]
 8014a62:	b903      	cbnz	r3, 8014a66 <__sflush_r+0x7e>
 8014a64:	6560      	str	r0, [r4, #84]	; 0x54
 8014a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a68:	602f      	str	r7, [r5, #0]
 8014a6a:	2900      	cmp	r1, #0
 8014a6c:	d0c9      	beq.n	8014a02 <__sflush_r+0x1a>
 8014a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a72:	4299      	cmp	r1, r3
 8014a74:	d002      	beq.n	8014a7c <__sflush_r+0x94>
 8014a76:	4628      	mov	r0, r5
 8014a78:	f001 f920 	bl	8015cbc <_free_r>
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8014a80:	e7c0      	b.n	8014a04 <__sflush_r+0x1c>
 8014a82:	2301      	movs	r3, #1
 8014a84:	4628      	mov	r0, r5
 8014a86:	47b0      	blx	r6
 8014a88:	1c41      	adds	r1, r0, #1
 8014a8a:	d1c8      	bne.n	8014a1e <__sflush_r+0x36>
 8014a8c:	682b      	ldr	r3, [r5, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d0c5      	beq.n	8014a1e <__sflush_r+0x36>
 8014a92:	2b1d      	cmp	r3, #29
 8014a94:	d001      	beq.n	8014a9a <__sflush_r+0xb2>
 8014a96:	2b16      	cmp	r3, #22
 8014a98:	d101      	bne.n	8014a9e <__sflush_r+0xb6>
 8014a9a:	602f      	str	r7, [r5, #0]
 8014a9c:	e7b1      	b.n	8014a02 <__sflush_r+0x1a>
 8014a9e:	89a3      	ldrh	r3, [r4, #12]
 8014aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aa4:	81a3      	strh	r3, [r4, #12]
 8014aa6:	e7ad      	b.n	8014a04 <__sflush_r+0x1c>
 8014aa8:	690f      	ldr	r7, [r1, #16]
 8014aaa:	2f00      	cmp	r7, #0
 8014aac:	d0a9      	beq.n	8014a02 <__sflush_r+0x1a>
 8014aae:	0793      	lsls	r3, r2, #30
 8014ab0:	680e      	ldr	r6, [r1, #0]
 8014ab2:	bf08      	it	eq
 8014ab4:	694b      	ldreq	r3, [r1, #20]
 8014ab6:	600f      	str	r7, [r1, #0]
 8014ab8:	bf18      	it	ne
 8014aba:	2300      	movne	r3, #0
 8014abc:	eba6 0807 	sub.w	r8, r6, r7
 8014ac0:	608b      	str	r3, [r1, #8]
 8014ac2:	f1b8 0f00 	cmp.w	r8, #0
 8014ac6:	dd9c      	ble.n	8014a02 <__sflush_r+0x1a>
 8014ac8:	4643      	mov	r3, r8
 8014aca:	463a      	mov	r2, r7
 8014acc:	6a21      	ldr	r1, [r4, #32]
 8014ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	47b0      	blx	r6
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	dc06      	bgt.n	8014ae6 <__sflush_r+0xfe>
 8014ad8:	89a3      	ldrh	r3, [r4, #12]
 8014ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ade:	81a3      	strh	r3, [r4, #12]
 8014ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ae4:	e78e      	b.n	8014a04 <__sflush_r+0x1c>
 8014ae6:	4407      	add	r7, r0
 8014ae8:	eba8 0800 	sub.w	r8, r8, r0
 8014aec:	e7e9      	b.n	8014ac2 <__sflush_r+0xda>
 8014aee:	bf00      	nop
 8014af0:	20400001 	.word	0x20400001

08014af4 <_fflush_r>:
 8014af4:	b538      	push	{r3, r4, r5, lr}
 8014af6:	690b      	ldr	r3, [r1, #16]
 8014af8:	4605      	mov	r5, r0
 8014afa:	460c      	mov	r4, r1
 8014afc:	b1db      	cbz	r3, 8014b36 <_fflush_r+0x42>
 8014afe:	b118      	cbz	r0, 8014b08 <_fflush_r+0x14>
 8014b00:	6983      	ldr	r3, [r0, #24]
 8014b02:	b90b      	cbnz	r3, 8014b08 <_fflush_r+0x14>
 8014b04:	f000 f860 	bl	8014bc8 <__sinit>
 8014b08:	4b0c      	ldr	r3, [pc, #48]	; (8014b3c <_fflush_r+0x48>)
 8014b0a:	429c      	cmp	r4, r3
 8014b0c:	d109      	bne.n	8014b22 <_fflush_r+0x2e>
 8014b0e:	686c      	ldr	r4, [r5, #4]
 8014b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b14:	b17b      	cbz	r3, 8014b36 <_fflush_r+0x42>
 8014b16:	4621      	mov	r1, r4
 8014b18:	4628      	mov	r0, r5
 8014b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b1e:	f7ff bf63 	b.w	80149e8 <__sflush_r>
 8014b22:	4b07      	ldr	r3, [pc, #28]	; (8014b40 <_fflush_r+0x4c>)
 8014b24:	429c      	cmp	r4, r3
 8014b26:	d101      	bne.n	8014b2c <_fflush_r+0x38>
 8014b28:	68ac      	ldr	r4, [r5, #8]
 8014b2a:	e7f1      	b.n	8014b10 <_fflush_r+0x1c>
 8014b2c:	4b05      	ldr	r3, [pc, #20]	; (8014b44 <_fflush_r+0x50>)
 8014b2e:	429c      	cmp	r4, r3
 8014b30:	bf08      	it	eq
 8014b32:	68ec      	ldreq	r4, [r5, #12]
 8014b34:	e7ec      	b.n	8014b10 <_fflush_r+0x1c>
 8014b36:	2000      	movs	r0, #0
 8014b38:	bd38      	pop	{r3, r4, r5, pc}
 8014b3a:	bf00      	nop
 8014b3c:	080175d0 	.word	0x080175d0
 8014b40:	080175f0 	.word	0x080175f0
 8014b44:	080175b0 	.word	0x080175b0

08014b48 <std>:
 8014b48:	2300      	movs	r3, #0
 8014b4a:	b510      	push	{r4, lr}
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8014b52:	6083      	str	r3, [r0, #8]
 8014b54:	8181      	strh	r1, [r0, #12]
 8014b56:	6643      	str	r3, [r0, #100]	; 0x64
 8014b58:	81c2      	strh	r2, [r0, #14]
 8014b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b5e:	6183      	str	r3, [r0, #24]
 8014b60:	4619      	mov	r1, r3
 8014b62:	2208      	movs	r2, #8
 8014b64:	305c      	adds	r0, #92	; 0x5c
 8014b66:	f7fd f9a3 	bl	8011eb0 <memset>
 8014b6a:	4b05      	ldr	r3, [pc, #20]	; (8014b80 <std+0x38>)
 8014b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8014b6e:	4b05      	ldr	r3, [pc, #20]	; (8014b84 <std+0x3c>)
 8014b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b72:	4b05      	ldr	r3, [pc, #20]	; (8014b88 <std+0x40>)
 8014b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b76:	4b05      	ldr	r3, [pc, #20]	; (8014b8c <std+0x44>)
 8014b78:	6224      	str	r4, [r4, #32]
 8014b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8014b7c:	bd10      	pop	{r4, pc}
 8014b7e:	bf00      	nop
 8014b80:	08012d65 	.word	0x08012d65
 8014b84:	08012d8b 	.word	0x08012d8b
 8014b88:	08012dc3 	.word	0x08012dc3
 8014b8c:	08012de7 	.word	0x08012de7

08014b90 <_cleanup_r>:
 8014b90:	4901      	ldr	r1, [pc, #4]	; (8014b98 <_cleanup_r+0x8>)
 8014b92:	f000 b885 	b.w	8014ca0 <_fwalk_reent>
 8014b96:	bf00      	nop
 8014b98:	08014af5 	.word	0x08014af5

08014b9c <__sfmoreglue>:
 8014b9c:	b570      	push	{r4, r5, r6, lr}
 8014b9e:	1e4a      	subs	r2, r1, #1
 8014ba0:	2568      	movs	r5, #104	; 0x68
 8014ba2:	4355      	muls	r5, r2
 8014ba4:	460e      	mov	r6, r1
 8014ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014baa:	f001 f8d5 	bl	8015d58 <_malloc_r>
 8014bae:	4604      	mov	r4, r0
 8014bb0:	b140      	cbz	r0, 8014bc4 <__sfmoreglue+0x28>
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8014bb8:	300c      	adds	r0, #12
 8014bba:	60a0      	str	r0, [r4, #8]
 8014bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014bc0:	f7fd f976 	bl	8011eb0 <memset>
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	bd70      	pop	{r4, r5, r6, pc}

08014bc8 <__sinit>:
 8014bc8:	6983      	ldr	r3, [r0, #24]
 8014bca:	b510      	push	{r4, lr}
 8014bcc:	4604      	mov	r4, r0
 8014bce:	bb33      	cbnz	r3, 8014c1e <__sinit+0x56>
 8014bd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014bd4:	6503      	str	r3, [r0, #80]	; 0x50
 8014bd6:	4b12      	ldr	r3, [pc, #72]	; (8014c20 <__sinit+0x58>)
 8014bd8:	4a12      	ldr	r2, [pc, #72]	; (8014c24 <__sinit+0x5c>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	6282      	str	r2, [r0, #40]	; 0x28
 8014bde:	4298      	cmp	r0, r3
 8014be0:	bf04      	itt	eq
 8014be2:	2301      	moveq	r3, #1
 8014be4:	6183      	streq	r3, [r0, #24]
 8014be6:	f000 f81f 	bl	8014c28 <__sfp>
 8014bea:	6060      	str	r0, [r4, #4]
 8014bec:	4620      	mov	r0, r4
 8014bee:	f000 f81b 	bl	8014c28 <__sfp>
 8014bf2:	60a0      	str	r0, [r4, #8]
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	f000 f817 	bl	8014c28 <__sfp>
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	60e0      	str	r0, [r4, #12]
 8014bfe:	2104      	movs	r1, #4
 8014c00:	6860      	ldr	r0, [r4, #4]
 8014c02:	f7ff ffa1 	bl	8014b48 <std>
 8014c06:	2201      	movs	r2, #1
 8014c08:	2109      	movs	r1, #9
 8014c0a:	68a0      	ldr	r0, [r4, #8]
 8014c0c:	f7ff ff9c 	bl	8014b48 <std>
 8014c10:	2202      	movs	r2, #2
 8014c12:	2112      	movs	r1, #18
 8014c14:	68e0      	ldr	r0, [r4, #12]
 8014c16:	f7ff ff97 	bl	8014b48 <std>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	61a3      	str	r3, [r4, #24]
 8014c1e:	bd10      	pop	{r4, pc}
 8014c20:	08017510 	.word	0x08017510
 8014c24:	08014b91 	.word	0x08014b91

08014c28 <__sfp>:
 8014c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2a:	4b1b      	ldr	r3, [pc, #108]	; (8014c98 <__sfp+0x70>)
 8014c2c:	681e      	ldr	r6, [r3, #0]
 8014c2e:	69b3      	ldr	r3, [r6, #24]
 8014c30:	4607      	mov	r7, r0
 8014c32:	b913      	cbnz	r3, 8014c3a <__sfp+0x12>
 8014c34:	4630      	mov	r0, r6
 8014c36:	f7ff ffc7 	bl	8014bc8 <__sinit>
 8014c3a:	3648      	adds	r6, #72	; 0x48
 8014c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c40:	3b01      	subs	r3, #1
 8014c42:	d503      	bpl.n	8014c4c <__sfp+0x24>
 8014c44:	6833      	ldr	r3, [r6, #0]
 8014c46:	b133      	cbz	r3, 8014c56 <__sfp+0x2e>
 8014c48:	6836      	ldr	r6, [r6, #0]
 8014c4a:	e7f7      	b.n	8014c3c <__sfp+0x14>
 8014c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c50:	b16d      	cbz	r5, 8014c6e <__sfp+0x46>
 8014c52:	3468      	adds	r4, #104	; 0x68
 8014c54:	e7f4      	b.n	8014c40 <__sfp+0x18>
 8014c56:	2104      	movs	r1, #4
 8014c58:	4638      	mov	r0, r7
 8014c5a:	f7ff ff9f 	bl	8014b9c <__sfmoreglue>
 8014c5e:	6030      	str	r0, [r6, #0]
 8014c60:	2800      	cmp	r0, #0
 8014c62:	d1f1      	bne.n	8014c48 <__sfp+0x20>
 8014c64:	230c      	movs	r3, #12
 8014c66:	603b      	str	r3, [r7, #0]
 8014c68:	4604      	mov	r4, r0
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c6e:	4b0b      	ldr	r3, [pc, #44]	; (8014c9c <__sfp+0x74>)
 8014c70:	6665      	str	r5, [r4, #100]	; 0x64
 8014c72:	e9c4 5500 	strd	r5, r5, [r4]
 8014c76:	60a5      	str	r5, [r4, #8]
 8014c78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014c7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c80:	2208      	movs	r2, #8
 8014c82:	4629      	mov	r1, r5
 8014c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c88:	f7fd f912 	bl	8011eb0 <memset>
 8014c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c94:	e7e9      	b.n	8014c6a <__sfp+0x42>
 8014c96:	bf00      	nop
 8014c98:	08017510 	.word	0x08017510
 8014c9c:	ffff0001 	.word	0xffff0001

08014ca0 <_fwalk_reent>:
 8014ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ca4:	4680      	mov	r8, r0
 8014ca6:	4689      	mov	r9, r1
 8014ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014cac:	2600      	movs	r6, #0
 8014cae:	b914      	cbnz	r4, 8014cb6 <_fwalk_reent+0x16>
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014cba:	3f01      	subs	r7, #1
 8014cbc:	d501      	bpl.n	8014cc2 <_fwalk_reent+0x22>
 8014cbe:	6824      	ldr	r4, [r4, #0]
 8014cc0:	e7f5      	b.n	8014cae <_fwalk_reent+0xe>
 8014cc2:	89ab      	ldrh	r3, [r5, #12]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d907      	bls.n	8014cd8 <_fwalk_reent+0x38>
 8014cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	d003      	beq.n	8014cd8 <_fwalk_reent+0x38>
 8014cd0:	4629      	mov	r1, r5
 8014cd2:	4640      	mov	r0, r8
 8014cd4:	47c8      	blx	r9
 8014cd6:	4306      	orrs	r6, r0
 8014cd8:	3568      	adds	r5, #104	; 0x68
 8014cda:	e7ee      	b.n	8014cba <_fwalk_reent+0x1a>

08014cdc <rshift>:
 8014cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cde:	6906      	ldr	r6, [r0, #16]
 8014ce0:	114b      	asrs	r3, r1, #5
 8014ce2:	429e      	cmp	r6, r3
 8014ce4:	f100 0414 	add.w	r4, r0, #20
 8014ce8:	dd30      	ble.n	8014d4c <rshift+0x70>
 8014cea:	f011 011f 	ands.w	r1, r1, #31
 8014cee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014cf2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014cf6:	d108      	bne.n	8014d0a <rshift+0x2e>
 8014cf8:	4621      	mov	r1, r4
 8014cfa:	42b2      	cmp	r2, r6
 8014cfc:	460b      	mov	r3, r1
 8014cfe:	d211      	bcs.n	8014d24 <rshift+0x48>
 8014d00:	f852 3b04 	ldr.w	r3, [r2], #4
 8014d04:	f841 3b04 	str.w	r3, [r1], #4
 8014d08:	e7f7      	b.n	8014cfa <rshift+0x1e>
 8014d0a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014d0e:	f1c1 0c20 	rsb	ip, r1, #32
 8014d12:	40cd      	lsrs	r5, r1
 8014d14:	3204      	adds	r2, #4
 8014d16:	4623      	mov	r3, r4
 8014d18:	42b2      	cmp	r2, r6
 8014d1a:	4617      	mov	r7, r2
 8014d1c:	d30c      	bcc.n	8014d38 <rshift+0x5c>
 8014d1e:	601d      	str	r5, [r3, #0]
 8014d20:	b105      	cbz	r5, 8014d24 <rshift+0x48>
 8014d22:	3304      	adds	r3, #4
 8014d24:	1b1a      	subs	r2, r3, r4
 8014d26:	42a3      	cmp	r3, r4
 8014d28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014d2c:	bf08      	it	eq
 8014d2e:	2300      	moveq	r3, #0
 8014d30:	6102      	str	r2, [r0, #16]
 8014d32:	bf08      	it	eq
 8014d34:	6143      	streq	r3, [r0, #20]
 8014d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d38:	683f      	ldr	r7, [r7, #0]
 8014d3a:	fa07 f70c 	lsl.w	r7, r7, ip
 8014d3e:	433d      	orrs	r5, r7
 8014d40:	f843 5b04 	str.w	r5, [r3], #4
 8014d44:	f852 5b04 	ldr.w	r5, [r2], #4
 8014d48:	40cd      	lsrs	r5, r1
 8014d4a:	e7e5      	b.n	8014d18 <rshift+0x3c>
 8014d4c:	4623      	mov	r3, r4
 8014d4e:	e7e9      	b.n	8014d24 <rshift+0x48>

08014d50 <__hexdig_fun>:
 8014d50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014d54:	2b09      	cmp	r3, #9
 8014d56:	d802      	bhi.n	8014d5e <__hexdig_fun+0xe>
 8014d58:	3820      	subs	r0, #32
 8014d5a:	b2c0      	uxtb	r0, r0
 8014d5c:	4770      	bx	lr
 8014d5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014d62:	2b05      	cmp	r3, #5
 8014d64:	d801      	bhi.n	8014d6a <__hexdig_fun+0x1a>
 8014d66:	3847      	subs	r0, #71	; 0x47
 8014d68:	e7f7      	b.n	8014d5a <__hexdig_fun+0xa>
 8014d6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014d6e:	2b05      	cmp	r3, #5
 8014d70:	d801      	bhi.n	8014d76 <__hexdig_fun+0x26>
 8014d72:	3827      	subs	r0, #39	; 0x27
 8014d74:	e7f1      	b.n	8014d5a <__hexdig_fun+0xa>
 8014d76:	2000      	movs	r0, #0
 8014d78:	4770      	bx	lr

08014d7a <__gethex>:
 8014d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7e:	b08b      	sub	sp, #44	; 0x2c
 8014d80:	468a      	mov	sl, r1
 8014d82:	9002      	str	r0, [sp, #8]
 8014d84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014d86:	9306      	str	r3, [sp, #24]
 8014d88:	4690      	mov	r8, r2
 8014d8a:	f000 fadf 	bl	801534c <__localeconv_l>
 8014d8e:	6803      	ldr	r3, [r0, #0]
 8014d90:	9303      	str	r3, [sp, #12]
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7eb fa34 	bl	8000200 <strlen>
 8014d98:	9b03      	ldr	r3, [sp, #12]
 8014d9a:	9001      	str	r0, [sp, #4]
 8014d9c:	4403      	add	r3, r0
 8014d9e:	f04f 0b00 	mov.w	fp, #0
 8014da2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014da6:	9307      	str	r3, [sp, #28]
 8014da8:	f8da 3000 	ldr.w	r3, [sl]
 8014dac:	3302      	adds	r3, #2
 8014dae:	461f      	mov	r7, r3
 8014db0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014db4:	2830      	cmp	r0, #48	; 0x30
 8014db6:	d06c      	beq.n	8014e92 <__gethex+0x118>
 8014db8:	f7ff ffca 	bl	8014d50 <__hexdig_fun>
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d16a      	bne.n	8014e98 <__gethex+0x11e>
 8014dc2:	9a01      	ldr	r2, [sp, #4]
 8014dc4:	9903      	ldr	r1, [sp, #12]
 8014dc6:	4638      	mov	r0, r7
 8014dc8:	f001 fe3e 	bl	8016a48 <strncmp>
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d166      	bne.n	8014e9e <__gethex+0x124>
 8014dd0:	9b01      	ldr	r3, [sp, #4]
 8014dd2:	5cf8      	ldrb	r0, [r7, r3]
 8014dd4:	18fe      	adds	r6, r7, r3
 8014dd6:	f7ff ffbb 	bl	8014d50 <__hexdig_fun>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	d062      	beq.n	8014ea4 <__gethex+0x12a>
 8014dde:	4633      	mov	r3, r6
 8014de0:	7818      	ldrb	r0, [r3, #0]
 8014de2:	2830      	cmp	r0, #48	; 0x30
 8014de4:	461f      	mov	r7, r3
 8014de6:	f103 0301 	add.w	r3, r3, #1
 8014dea:	d0f9      	beq.n	8014de0 <__gethex+0x66>
 8014dec:	f7ff ffb0 	bl	8014d50 <__hexdig_fun>
 8014df0:	fab0 f580 	clz	r5, r0
 8014df4:	096d      	lsrs	r5, r5, #5
 8014df6:	4634      	mov	r4, r6
 8014df8:	f04f 0b01 	mov.w	fp, #1
 8014dfc:	463a      	mov	r2, r7
 8014dfe:	4616      	mov	r6, r2
 8014e00:	3201      	adds	r2, #1
 8014e02:	7830      	ldrb	r0, [r6, #0]
 8014e04:	f7ff ffa4 	bl	8014d50 <__hexdig_fun>
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d1f8      	bne.n	8014dfe <__gethex+0x84>
 8014e0c:	9a01      	ldr	r2, [sp, #4]
 8014e0e:	9903      	ldr	r1, [sp, #12]
 8014e10:	4630      	mov	r0, r6
 8014e12:	f001 fe19 	bl	8016a48 <strncmp>
 8014e16:	b950      	cbnz	r0, 8014e2e <__gethex+0xb4>
 8014e18:	b954      	cbnz	r4, 8014e30 <__gethex+0xb6>
 8014e1a:	9b01      	ldr	r3, [sp, #4]
 8014e1c:	18f4      	adds	r4, r6, r3
 8014e1e:	4622      	mov	r2, r4
 8014e20:	4616      	mov	r6, r2
 8014e22:	3201      	adds	r2, #1
 8014e24:	7830      	ldrb	r0, [r6, #0]
 8014e26:	f7ff ff93 	bl	8014d50 <__hexdig_fun>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d1f8      	bne.n	8014e20 <__gethex+0xa6>
 8014e2e:	b10c      	cbz	r4, 8014e34 <__gethex+0xba>
 8014e30:	1ba4      	subs	r4, r4, r6
 8014e32:	00a4      	lsls	r4, r4, #2
 8014e34:	7833      	ldrb	r3, [r6, #0]
 8014e36:	2b50      	cmp	r3, #80	; 0x50
 8014e38:	d001      	beq.n	8014e3e <__gethex+0xc4>
 8014e3a:	2b70      	cmp	r3, #112	; 0x70
 8014e3c:	d140      	bne.n	8014ec0 <__gethex+0x146>
 8014e3e:	7873      	ldrb	r3, [r6, #1]
 8014e40:	2b2b      	cmp	r3, #43	; 0x2b
 8014e42:	d031      	beq.n	8014ea8 <__gethex+0x12e>
 8014e44:	2b2d      	cmp	r3, #45	; 0x2d
 8014e46:	d033      	beq.n	8014eb0 <__gethex+0x136>
 8014e48:	1c71      	adds	r1, r6, #1
 8014e4a:	f04f 0900 	mov.w	r9, #0
 8014e4e:	7808      	ldrb	r0, [r1, #0]
 8014e50:	f7ff ff7e 	bl	8014d50 <__hexdig_fun>
 8014e54:	1e43      	subs	r3, r0, #1
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	2b18      	cmp	r3, #24
 8014e5a:	d831      	bhi.n	8014ec0 <__gethex+0x146>
 8014e5c:	f1a0 0210 	sub.w	r2, r0, #16
 8014e60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014e64:	f7ff ff74 	bl	8014d50 <__hexdig_fun>
 8014e68:	1e43      	subs	r3, r0, #1
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	2b18      	cmp	r3, #24
 8014e6e:	d922      	bls.n	8014eb6 <__gethex+0x13c>
 8014e70:	f1b9 0f00 	cmp.w	r9, #0
 8014e74:	d000      	beq.n	8014e78 <__gethex+0xfe>
 8014e76:	4252      	negs	r2, r2
 8014e78:	4414      	add	r4, r2
 8014e7a:	f8ca 1000 	str.w	r1, [sl]
 8014e7e:	b30d      	cbz	r5, 8014ec4 <__gethex+0x14a>
 8014e80:	f1bb 0f00 	cmp.w	fp, #0
 8014e84:	bf0c      	ite	eq
 8014e86:	2706      	moveq	r7, #6
 8014e88:	2700      	movne	r7, #0
 8014e8a:	4638      	mov	r0, r7
 8014e8c:	b00b      	add	sp, #44	; 0x2c
 8014e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e92:	f10b 0b01 	add.w	fp, fp, #1
 8014e96:	e78a      	b.n	8014dae <__gethex+0x34>
 8014e98:	2500      	movs	r5, #0
 8014e9a:	462c      	mov	r4, r5
 8014e9c:	e7ae      	b.n	8014dfc <__gethex+0x82>
 8014e9e:	463e      	mov	r6, r7
 8014ea0:	2501      	movs	r5, #1
 8014ea2:	e7c7      	b.n	8014e34 <__gethex+0xba>
 8014ea4:	4604      	mov	r4, r0
 8014ea6:	e7fb      	b.n	8014ea0 <__gethex+0x126>
 8014ea8:	f04f 0900 	mov.w	r9, #0
 8014eac:	1cb1      	adds	r1, r6, #2
 8014eae:	e7ce      	b.n	8014e4e <__gethex+0xd4>
 8014eb0:	f04f 0901 	mov.w	r9, #1
 8014eb4:	e7fa      	b.n	8014eac <__gethex+0x132>
 8014eb6:	230a      	movs	r3, #10
 8014eb8:	fb03 0202 	mla	r2, r3, r2, r0
 8014ebc:	3a10      	subs	r2, #16
 8014ebe:	e7cf      	b.n	8014e60 <__gethex+0xe6>
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	e7da      	b.n	8014e7a <__gethex+0x100>
 8014ec4:	1bf3      	subs	r3, r6, r7
 8014ec6:	3b01      	subs	r3, #1
 8014ec8:	4629      	mov	r1, r5
 8014eca:	2b07      	cmp	r3, #7
 8014ecc:	dc49      	bgt.n	8014f62 <__gethex+0x1e8>
 8014ece:	9802      	ldr	r0, [sp, #8]
 8014ed0:	f000 fae7 	bl	80154a2 <_Balloc>
 8014ed4:	9b01      	ldr	r3, [sp, #4]
 8014ed6:	f100 0914 	add.w	r9, r0, #20
 8014eda:	f04f 0b00 	mov.w	fp, #0
 8014ede:	f1c3 0301 	rsb	r3, r3, #1
 8014ee2:	4605      	mov	r5, r0
 8014ee4:	f8cd 9010 	str.w	r9, [sp, #16]
 8014ee8:	46da      	mov	sl, fp
 8014eea:	9308      	str	r3, [sp, #32]
 8014eec:	42b7      	cmp	r7, r6
 8014eee:	d33b      	bcc.n	8014f68 <__gethex+0x1ee>
 8014ef0:	9804      	ldr	r0, [sp, #16]
 8014ef2:	f840 ab04 	str.w	sl, [r0], #4
 8014ef6:	eba0 0009 	sub.w	r0, r0, r9
 8014efa:	1080      	asrs	r0, r0, #2
 8014efc:	6128      	str	r0, [r5, #16]
 8014efe:	0147      	lsls	r7, r0, #5
 8014f00:	4650      	mov	r0, sl
 8014f02:	f000 fb92 	bl	801562a <__hi0bits>
 8014f06:	f8d8 6000 	ldr.w	r6, [r8]
 8014f0a:	1a3f      	subs	r7, r7, r0
 8014f0c:	42b7      	cmp	r7, r6
 8014f0e:	dd64      	ble.n	8014fda <__gethex+0x260>
 8014f10:	1bbf      	subs	r7, r7, r6
 8014f12:	4639      	mov	r1, r7
 8014f14:	4628      	mov	r0, r5
 8014f16:	f000 fea1 	bl	8015c5c <__any_on>
 8014f1a:	4682      	mov	sl, r0
 8014f1c:	b178      	cbz	r0, 8014f3e <__gethex+0x1c4>
 8014f1e:	1e7b      	subs	r3, r7, #1
 8014f20:	1159      	asrs	r1, r3, #5
 8014f22:	f003 021f 	and.w	r2, r3, #31
 8014f26:	f04f 0a01 	mov.w	sl, #1
 8014f2a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014f2e:	fa0a f202 	lsl.w	r2, sl, r2
 8014f32:	420a      	tst	r2, r1
 8014f34:	d003      	beq.n	8014f3e <__gethex+0x1c4>
 8014f36:	4553      	cmp	r3, sl
 8014f38:	dc46      	bgt.n	8014fc8 <__gethex+0x24e>
 8014f3a:	f04f 0a02 	mov.w	sl, #2
 8014f3e:	4639      	mov	r1, r7
 8014f40:	4628      	mov	r0, r5
 8014f42:	f7ff fecb 	bl	8014cdc <rshift>
 8014f46:	443c      	add	r4, r7
 8014f48:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f4c:	42a3      	cmp	r3, r4
 8014f4e:	da52      	bge.n	8014ff6 <__gethex+0x27c>
 8014f50:	4629      	mov	r1, r5
 8014f52:	9802      	ldr	r0, [sp, #8]
 8014f54:	f000 fad9 	bl	801550a <_Bfree>
 8014f58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	6013      	str	r3, [r2, #0]
 8014f5e:	27a3      	movs	r7, #163	; 0xa3
 8014f60:	e793      	b.n	8014e8a <__gethex+0x110>
 8014f62:	3101      	adds	r1, #1
 8014f64:	105b      	asrs	r3, r3, #1
 8014f66:	e7b0      	b.n	8014eca <__gethex+0x150>
 8014f68:	1e73      	subs	r3, r6, #1
 8014f6a:	9305      	str	r3, [sp, #20]
 8014f6c:	9a07      	ldr	r2, [sp, #28]
 8014f6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014f72:	4293      	cmp	r3, r2
 8014f74:	d018      	beq.n	8014fa8 <__gethex+0x22e>
 8014f76:	f1bb 0f20 	cmp.w	fp, #32
 8014f7a:	d107      	bne.n	8014f8c <__gethex+0x212>
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	f8c3 a000 	str.w	sl, [r3]
 8014f82:	3304      	adds	r3, #4
 8014f84:	f04f 0a00 	mov.w	sl, #0
 8014f88:	9304      	str	r3, [sp, #16]
 8014f8a:	46d3      	mov	fp, sl
 8014f8c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014f90:	f7ff fede 	bl	8014d50 <__hexdig_fun>
 8014f94:	f000 000f 	and.w	r0, r0, #15
 8014f98:	fa00 f00b 	lsl.w	r0, r0, fp
 8014f9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8014fa0:	f10b 0b04 	add.w	fp, fp, #4
 8014fa4:	9b05      	ldr	r3, [sp, #20]
 8014fa6:	e00d      	b.n	8014fc4 <__gethex+0x24a>
 8014fa8:	9b05      	ldr	r3, [sp, #20]
 8014faa:	9a08      	ldr	r2, [sp, #32]
 8014fac:	4413      	add	r3, r2
 8014fae:	42bb      	cmp	r3, r7
 8014fb0:	d3e1      	bcc.n	8014f76 <__gethex+0x1fc>
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	9a01      	ldr	r2, [sp, #4]
 8014fb6:	9903      	ldr	r1, [sp, #12]
 8014fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8014fba:	f001 fd45 	bl	8016a48 <strncmp>
 8014fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	d1d8      	bne.n	8014f76 <__gethex+0x1fc>
 8014fc4:	461e      	mov	r6, r3
 8014fc6:	e791      	b.n	8014eec <__gethex+0x172>
 8014fc8:	1eb9      	subs	r1, r7, #2
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f000 fe46 	bl	8015c5c <__any_on>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	d0b2      	beq.n	8014f3a <__gethex+0x1c0>
 8014fd4:	f04f 0a03 	mov.w	sl, #3
 8014fd8:	e7b1      	b.n	8014f3e <__gethex+0x1c4>
 8014fda:	da09      	bge.n	8014ff0 <__gethex+0x276>
 8014fdc:	1bf7      	subs	r7, r6, r7
 8014fde:	4629      	mov	r1, r5
 8014fe0:	463a      	mov	r2, r7
 8014fe2:	9802      	ldr	r0, [sp, #8]
 8014fe4:	f000 fc5c 	bl	80158a0 <__lshift>
 8014fe8:	1be4      	subs	r4, r4, r7
 8014fea:	4605      	mov	r5, r0
 8014fec:	f100 0914 	add.w	r9, r0, #20
 8014ff0:	f04f 0a00 	mov.w	sl, #0
 8014ff4:	e7a8      	b.n	8014f48 <__gethex+0x1ce>
 8014ff6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014ffa:	42a0      	cmp	r0, r4
 8014ffc:	dd6a      	ble.n	80150d4 <__gethex+0x35a>
 8014ffe:	1b04      	subs	r4, r0, r4
 8015000:	42a6      	cmp	r6, r4
 8015002:	dc2e      	bgt.n	8015062 <__gethex+0x2e8>
 8015004:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015008:	2b02      	cmp	r3, #2
 801500a:	d022      	beq.n	8015052 <__gethex+0x2d8>
 801500c:	2b03      	cmp	r3, #3
 801500e:	d024      	beq.n	801505a <__gethex+0x2e0>
 8015010:	2b01      	cmp	r3, #1
 8015012:	d115      	bne.n	8015040 <__gethex+0x2c6>
 8015014:	42a6      	cmp	r6, r4
 8015016:	d113      	bne.n	8015040 <__gethex+0x2c6>
 8015018:	2e01      	cmp	r6, #1
 801501a:	dc0b      	bgt.n	8015034 <__gethex+0x2ba>
 801501c:	9a06      	ldr	r2, [sp, #24]
 801501e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015022:	6013      	str	r3, [r2, #0]
 8015024:	2301      	movs	r3, #1
 8015026:	612b      	str	r3, [r5, #16]
 8015028:	f8c9 3000 	str.w	r3, [r9]
 801502c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801502e:	2762      	movs	r7, #98	; 0x62
 8015030:	601d      	str	r5, [r3, #0]
 8015032:	e72a      	b.n	8014e8a <__gethex+0x110>
 8015034:	1e71      	subs	r1, r6, #1
 8015036:	4628      	mov	r0, r5
 8015038:	f000 fe10 	bl	8015c5c <__any_on>
 801503c:	2800      	cmp	r0, #0
 801503e:	d1ed      	bne.n	801501c <__gethex+0x2a2>
 8015040:	4629      	mov	r1, r5
 8015042:	9802      	ldr	r0, [sp, #8]
 8015044:	f000 fa61 	bl	801550a <_Bfree>
 8015048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801504a:	2300      	movs	r3, #0
 801504c:	6013      	str	r3, [r2, #0]
 801504e:	2750      	movs	r7, #80	; 0x50
 8015050:	e71b      	b.n	8014e8a <__gethex+0x110>
 8015052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015054:	2b00      	cmp	r3, #0
 8015056:	d0e1      	beq.n	801501c <__gethex+0x2a2>
 8015058:	e7f2      	b.n	8015040 <__gethex+0x2c6>
 801505a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801505c:	2b00      	cmp	r3, #0
 801505e:	d1dd      	bne.n	801501c <__gethex+0x2a2>
 8015060:	e7ee      	b.n	8015040 <__gethex+0x2c6>
 8015062:	1e67      	subs	r7, r4, #1
 8015064:	f1ba 0f00 	cmp.w	sl, #0
 8015068:	d131      	bne.n	80150ce <__gethex+0x354>
 801506a:	b127      	cbz	r7, 8015076 <__gethex+0x2fc>
 801506c:	4639      	mov	r1, r7
 801506e:	4628      	mov	r0, r5
 8015070:	f000 fdf4 	bl	8015c5c <__any_on>
 8015074:	4682      	mov	sl, r0
 8015076:	117a      	asrs	r2, r7, #5
 8015078:	2301      	movs	r3, #1
 801507a:	f007 071f 	and.w	r7, r7, #31
 801507e:	fa03 f707 	lsl.w	r7, r3, r7
 8015082:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015086:	4621      	mov	r1, r4
 8015088:	421f      	tst	r7, r3
 801508a:	4628      	mov	r0, r5
 801508c:	bf18      	it	ne
 801508e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015092:	1b36      	subs	r6, r6, r4
 8015094:	f7ff fe22 	bl	8014cdc <rshift>
 8015098:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801509c:	2702      	movs	r7, #2
 801509e:	f1ba 0f00 	cmp.w	sl, #0
 80150a2:	d048      	beq.n	8015136 <__gethex+0x3bc>
 80150a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80150a8:	2b02      	cmp	r3, #2
 80150aa:	d015      	beq.n	80150d8 <__gethex+0x35e>
 80150ac:	2b03      	cmp	r3, #3
 80150ae:	d017      	beq.n	80150e0 <__gethex+0x366>
 80150b0:	2b01      	cmp	r3, #1
 80150b2:	d109      	bne.n	80150c8 <__gethex+0x34e>
 80150b4:	f01a 0f02 	tst.w	sl, #2
 80150b8:	d006      	beq.n	80150c8 <__gethex+0x34e>
 80150ba:	f8d9 3000 	ldr.w	r3, [r9]
 80150be:	ea4a 0a03 	orr.w	sl, sl, r3
 80150c2:	f01a 0f01 	tst.w	sl, #1
 80150c6:	d10e      	bne.n	80150e6 <__gethex+0x36c>
 80150c8:	f047 0710 	orr.w	r7, r7, #16
 80150cc:	e033      	b.n	8015136 <__gethex+0x3bc>
 80150ce:	f04f 0a01 	mov.w	sl, #1
 80150d2:	e7d0      	b.n	8015076 <__gethex+0x2fc>
 80150d4:	2701      	movs	r7, #1
 80150d6:	e7e2      	b.n	801509e <__gethex+0x324>
 80150d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150da:	f1c3 0301 	rsb	r3, r3, #1
 80150de:	9315      	str	r3, [sp, #84]	; 0x54
 80150e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d0f0      	beq.n	80150c8 <__gethex+0x34e>
 80150e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80150ea:	f105 0314 	add.w	r3, r5, #20
 80150ee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80150f2:	eb03 010a 	add.w	r1, r3, sl
 80150f6:	f04f 0c00 	mov.w	ip, #0
 80150fa:	4618      	mov	r0, r3
 80150fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015100:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015104:	d01c      	beq.n	8015140 <__gethex+0x3c6>
 8015106:	3201      	adds	r2, #1
 8015108:	6002      	str	r2, [r0, #0]
 801510a:	2f02      	cmp	r7, #2
 801510c:	f105 0314 	add.w	r3, r5, #20
 8015110:	d138      	bne.n	8015184 <__gethex+0x40a>
 8015112:	f8d8 2000 	ldr.w	r2, [r8]
 8015116:	3a01      	subs	r2, #1
 8015118:	42b2      	cmp	r2, r6
 801511a:	d10a      	bne.n	8015132 <__gethex+0x3b8>
 801511c:	1171      	asrs	r1, r6, #5
 801511e:	2201      	movs	r2, #1
 8015120:	f006 061f 	and.w	r6, r6, #31
 8015124:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015128:	fa02 f606 	lsl.w	r6, r2, r6
 801512c:	421e      	tst	r6, r3
 801512e:	bf18      	it	ne
 8015130:	4617      	movne	r7, r2
 8015132:	f047 0720 	orr.w	r7, r7, #32
 8015136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015138:	601d      	str	r5, [r3, #0]
 801513a:	9b06      	ldr	r3, [sp, #24]
 801513c:	601c      	str	r4, [r3, #0]
 801513e:	e6a4      	b.n	8014e8a <__gethex+0x110>
 8015140:	4299      	cmp	r1, r3
 8015142:	f843 cc04 	str.w	ip, [r3, #-4]
 8015146:	d8d8      	bhi.n	80150fa <__gethex+0x380>
 8015148:	68ab      	ldr	r3, [r5, #8]
 801514a:	4599      	cmp	r9, r3
 801514c:	db12      	blt.n	8015174 <__gethex+0x3fa>
 801514e:	6869      	ldr	r1, [r5, #4]
 8015150:	9802      	ldr	r0, [sp, #8]
 8015152:	3101      	adds	r1, #1
 8015154:	f000 f9a5 	bl	80154a2 <_Balloc>
 8015158:	692a      	ldr	r2, [r5, #16]
 801515a:	3202      	adds	r2, #2
 801515c:	f105 010c 	add.w	r1, r5, #12
 8015160:	4683      	mov	fp, r0
 8015162:	0092      	lsls	r2, r2, #2
 8015164:	300c      	adds	r0, #12
 8015166:	f000 f991 	bl	801548c <memcpy>
 801516a:	4629      	mov	r1, r5
 801516c:	9802      	ldr	r0, [sp, #8]
 801516e:	f000 f9cc 	bl	801550a <_Bfree>
 8015172:	465d      	mov	r5, fp
 8015174:	692b      	ldr	r3, [r5, #16]
 8015176:	1c5a      	adds	r2, r3, #1
 8015178:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801517c:	612a      	str	r2, [r5, #16]
 801517e:	2201      	movs	r2, #1
 8015180:	615a      	str	r2, [r3, #20]
 8015182:	e7c2      	b.n	801510a <__gethex+0x390>
 8015184:	692a      	ldr	r2, [r5, #16]
 8015186:	454a      	cmp	r2, r9
 8015188:	dd0b      	ble.n	80151a2 <__gethex+0x428>
 801518a:	2101      	movs	r1, #1
 801518c:	4628      	mov	r0, r5
 801518e:	f7ff fda5 	bl	8014cdc <rshift>
 8015192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015196:	3401      	adds	r4, #1
 8015198:	42a3      	cmp	r3, r4
 801519a:	f6ff aed9 	blt.w	8014f50 <__gethex+0x1d6>
 801519e:	2701      	movs	r7, #1
 80151a0:	e7c7      	b.n	8015132 <__gethex+0x3b8>
 80151a2:	f016 061f 	ands.w	r6, r6, #31
 80151a6:	d0fa      	beq.n	801519e <__gethex+0x424>
 80151a8:	449a      	add	sl, r3
 80151aa:	f1c6 0620 	rsb	r6, r6, #32
 80151ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80151b2:	f000 fa3a 	bl	801562a <__hi0bits>
 80151b6:	42b0      	cmp	r0, r6
 80151b8:	dbe7      	blt.n	801518a <__gethex+0x410>
 80151ba:	e7f0      	b.n	801519e <__gethex+0x424>

080151bc <L_shift>:
 80151bc:	f1c2 0208 	rsb	r2, r2, #8
 80151c0:	0092      	lsls	r2, r2, #2
 80151c2:	b570      	push	{r4, r5, r6, lr}
 80151c4:	f1c2 0620 	rsb	r6, r2, #32
 80151c8:	6843      	ldr	r3, [r0, #4]
 80151ca:	6804      	ldr	r4, [r0, #0]
 80151cc:	fa03 f506 	lsl.w	r5, r3, r6
 80151d0:	432c      	orrs	r4, r5
 80151d2:	40d3      	lsrs	r3, r2
 80151d4:	6004      	str	r4, [r0, #0]
 80151d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80151da:	4288      	cmp	r0, r1
 80151dc:	d3f4      	bcc.n	80151c8 <L_shift+0xc>
 80151de:	bd70      	pop	{r4, r5, r6, pc}

080151e0 <__match>:
 80151e0:	b530      	push	{r4, r5, lr}
 80151e2:	6803      	ldr	r3, [r0, #0]
 80151e4:	3301      	adds	r3, #1
 80151e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151ea:	b914      	cbnz	r4, 80151f2 <__match+0x12>
 80151ec:	6003      	str	r3, [r0, #0]
 80151ee:	2001      	movs	r0, #1
 80151f0:	bd30      	pop	{r4, r5, pc}
 80151f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80151fa:	2d19      	cmp	r5, #25
 80151fc:	bf98      	it	ls
 80151fe:	3220      	addls	r2, #32
 8015200:	42a2      	cmp	r2, r4
 8015202:	d0f0      	beq.n	80151e6 <__match+0x6>
 8015204:	2000      	movs	r0, #0
 8015206:	e7f3      	b.n	80151f0 <__match+0x10>

08015208 <__hexnan>:
 8015208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801520c:	680b      	ldr	r3, [r1, #0]
 801520e:	6801      	ldr	r1, [r0, #0]
 8015210:	115f      	asrs	r7, r3, #5
 8015212:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015216:	f013 031f 	ands.w	r3, r3, #31
 801521a:	b087      	sub	sp, #28
 801521c:	bf18      	it	ne
 801521e:	3704      	addne	r7, #4
 8015220:	2500      	movs	r5, #0
 8015222:	1f3e      	subs	r6, r7, #4
 8015224:	4682      	mov	sl, r0
 8015226:	4690      	mov	r8, r2
 8015228:	9301      	str	r3, [sp, #4]
 801522a:	f847 5c04 	str.w	r5, [r7, #-4]
 801522e:	46b1      	mov	r9, r6
 8015230:	4634      	mov	r4, r6
 8015232:	9502      	str	r5, [sp, #8]
 8015234:	46ab      	mov	fp, r5
 8015236:	784a      	ldrb	r2, [r1, #1]
 8015238:	1c4b      	adds	r3, r1, #1
 801523a:	9303      	str	r3, [sp, #12]
 801523c:	b342      	cbz	r2, 8015290 <__hexnan+0x88>
 801523e:	4610      	mov	r0, r2
 8015240:	9105      	str	r1, [sp, #20]
 8015242:	9204      	str	r2, [sp, #16]
 8015244:	f7ff fd84 	bl	8014d50 <__hexdig_fun>
 8015248:	2800      	cmp	r0, #0
 801524a:	d143      	bne.n	80152d4 <__hexnan+0xcc>
 801524c:	9a04      	ldr	r2, [sp, #16]
 801524e:	9905      	ldr	r1, [sp, #20]
 8015250:	2a20      	cmp	r2, #32
 8015252:	d818      	bhi.n	8015286 <__hexnan+0x7e>
 8015254:	9b02      	ldr	r3, [sp, #8]
 8015256:	459b      	cmp	fp, r3
 8015258:	dd13      	ble.n	8015282 <__hexnan+0x7a>
 801525a:	454c      	cmp	r4, r9
 801525c:	d206      	bcs.n	801526c <__hexnan+0x64>
 801525e:	2d07      	cmp	r5, #7
 8015260:	dc04      	bgt.n	801526c <__hexnan+0x64>
 8015262:	462a      	mov	r2, r5
 8015264:	4649      	mov	r1, r9
 8015266:	4620      	mov	r0, r4
 8015268:	f7ff ffa8 	bl	80151bc <L_shift>
 801526c:	4544      	cmp	r4, r8
 801526e:	d944      	bls.n	80152fa <__hexnan+0xf2>
 8015270:	2300      	movs	r3, #0
 8015272:	f1a4 0904 	sub.w	r9, r4, #4
 8015276:	f844 3c04 	str.w	r3, [r4, #-4]
 801527a:	f8cd b008 	str.w	fp, [sp, #8]
 801527e:	464c      	mov	r4, r9
 8015280:	461d      	mov	r5, r3
 8015282:	9903      	ldr	r1, [sp, #12]
 8015284:	e7d7      	b.n	8015236 <__hexnan+0x2e>
 8015286:	2a29      	cmp	r2, #41	; 0x29
 8015288:	d14a      	bne.n	8015320 <__hexnan+0x118>
 801528a:	3102      	adds	r1, #2
 801528c:	f8ca 1000 	str.w	r1, [sl]
 8015290:	f1bb 0f00 	cmp.w	fp, #0
 8015294:	d044      	beq.n	8015320 <__hexnan+0x118>
 8015296:	454c      	cmp	r4, r9
 8015298:	d206      	bcs.n	80152a8 <__hexnan+0xa0>
 801529a:	2d07      	cmp	r5, #7
 801529c:	dc04      	bgt.n	80152a8 <__hexnan+0xa0>
 801529e:	462a      	mov	r2, r5
 80152a0:	4649      	mov	r1, r9
 80152a2:	4620      	mov	r0, r4
 80152a4:	f7ff ff8a 	bl	80151bc <L_shift>
 80152a8:	4544      	cmp	r4, r8
 80152aa:	d928      	bls.n	80152fe <__hexnan+0xf6>
 80152ac:	4643      	mov	r3, r8
 80152ae:	f854 2b04 	ldr.w	r2, [r4], #4
 80152b2:	f843 2b04 	str.w	r2, [r3], #4
 80152b6:	42a6      	cmp	r6, r4
 80152b8:	d2f9      	bcs.n	80152ae <__hexnan+0xa6>
 80152ba:	2200      	movs	r2, #0
 80152bc:	f843 2b04 	str.w	r2, [r3], #4
 80152c0:	429e      	cmp	r6, r3
 80152c2:	d2fb      	bcs.n	80152bc <__hexnan+0xb4>
 80152c4:	6833      	ldr	r3, [r6, #0]
 80152c6:	b91b      	cbnz	r3, 80152d0 <__hexnan+0xc8>
 80152c8:	4546      	cmp	r6, r8
 80152ca:	d127      	bne.n	801531c <__hexnan+0x114>
 80152cc:	2301      	movs	r3, #1
 80152ce:	6033      	str	r3, [r6, #0]
 80152d0:	2005      	movs	r0, #5
 80152d2:	e026      	b.n	8015322 <__hexnan+0x11a>
 80152d4:	3501      	adds	r5, #1
 80152d6:	2d08      	cmp	r5, #8
 80152d8:	f10b 0b01 	add.w	fp, fp, #1
 80152dc:	dd06      	ble.n	80152ec <__hexnan+0xe4>
 80152de:	4544      	cmp	r4, r8
 80152e0:	d9cf      	bls.n	8015282 <__hexnan+0x7a>
 80152e2:	2300      	movs	r3, #0
 80152e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80152e8:	2501      	movs	r5, #1
 80152ea:	3c04      	subs	r4, #4
 80152ec:	6822      	ldr	r2, [r4, #0]
 80152ee:	f000 000f 	and.w	r0, r0, #15
 80152f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80152f6:	6020      	str	r0, [r4, #0]
 80152f8:	e7c3      	b.n	8015282 <__hexnan+0x7a>
 80152fa:	2508      	movs	r5, #8
 80152fc:	e7c1      	b.n	8015282 <__hexnan+0x7a>
 80152fe:	9b01      	ldr	r3, [sp, #4]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d0df      	beq.n	80152c4 <__hexnan+0xbc>
 8015304:	f04f 32ff 	mov.w	r2, #4294967295
 8015308:	f1c3 0320 	rsb	r3, r3, #32
 801530c:	fa22 f303 	lsr.w	r3, r2, r3
 8015310:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015314:	401a      	ands	r2, r3
 8015316:	f847 2c04 	str.w	r2, [r7, #-4]
 801531a:	e7d3      	b.n	80152c4 <__hexnan+0xbc>
 801531c:	3e04      	subs	r6, #4
 801531e:	e7d1      	b.n	80152c4 <__hexnan+0xbc>
 8015320:	2004      	movs	r0, #4
 8015322:	b007      	add	sp, #28
 8015324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015328 <__locale_ctype_ptr_l>:
 8015328:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801532c:	4770      	bx	lr
	...

08015330 <__locale_ctype_ptr>:
 8015330:	4b04      	ldr	r3, [pc, #16]	; (8015344 <__locale_ctype_ptr+0x14>)
 8015332:	4a05      	ldr	r2, [pc, #20]	; (8015348 <__locale_ctype_ptr+0x18>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	6a1b      	ldr	r3, [r3, #32]
 8015338:	2b00      	cmp	r3, #0
 801533a:	bf08      	it	eq
 801533c:	4613      	moveq	r3, r2
 801533e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015342:	4770      	bx	lr
 8015344:	2000000c 	.word	0x2000000c
 8015348:	20000070 	.word	0x20000070

0801534c <__localeconv_l>:
 801534c:	30f0      	adds	r0, #240	; 0xf0
 801534e:	4770      	bx	lr

08015350 <_localeconv_r>:
 8015350:	4b04      	ldr	r3, [pc, #16]	; (8015364 <_localeconv_r+0x14>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	6a18      	ldr	r0, [r3, #32]
 8015356:	4b04      	ldr	r3, [pc, #16]	; (8015368 <_localeconv_r+0x18>)
 8015358:	2800      	cmp	r0, #0
 801535a:	bf08      	it	eq
 801535c:	4618      	moveq	r0, r3
 801535e:	30f0      	adds	r0, #240	; 0xf0
 8015360:	4770      	bx	lr
 8015362:	bf00      	nop
 8015364:	2000000c 	.word	0x2000000c
 8015368:	20000070 	.word	0x20000070

0801536c <_lseek_r>:
 801536c:	b538      	push	{r3, r4, r5, lr}
 801536e:	4c07      	ldr	r4, [pc, #28]	; (801538c <_lseek_r+0x20>)
 8015370:	4605      	mov	r5, r0
 8015372:	4608      	mov	r0, r1
 8015374:	4611      	mov	r1, r2
 8015376:	2200      	movs	r2, #0
 8015378:	6022      	str	r2, [r4, #0]
 801537a:	461a      	mov	r2, r3
 801537c:	f7ef fe2e 	bl	8004fdc <_lseek>
 8015380:	1c43      	adds	r3, r0, #1
 8015382:	d102      	bne.n	801538a <_lseek_r+0x1e>
 8015384:	6823      	ldr	r3, [r4, #0]
 8015386:	b103      	cbz	r3, 801538a <_lseek_r+0x1e>
 8015388:	602b      	str	r3, [r5, #0]
 801538a:	bd38      	pop	{r3, r4, r5, pc}
 801538c:	2000c6ac 	.word	0x2000c6ac

08015390 <__swhatbuf_r>:
 8015390:	b570      	push	{r4, r5, r6, lr}
 8015392:	460e      	mov	r6, r1
 8015394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015398:	2900      	cmp	r1, #0
 801539a:	b096      	sub	sp, #88	; 0x58
 801539c:	4614      	mov	r4, r2
 801539e:	461d      	mov	r5, r3
 80153a0:	da07      	bge.n	80153b2 <__swhatbuf_r+0x22>
 80153a2:	2300      	movs	r3, #0
 80153a4:	602b      	str	r3, [r5, #0]
 80153a6:	89b3      	ldrh	r3, [r6, #12]
 80153a8:	061a      	lsls	r2, r3, #24
 80153aa:	d410      	bmi.n	80153ce <__swhatbuf_r+0x3e>
 80153ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153b0:	e00e      	b.n	80153d0 <__swhatbuf_r+0x40>
 80153b2:	466a      	mov	r2, sp
 80153b4:	f001 fc2e 	bl	8016c14 <_fstat_r>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	dbf2      	blt.n	80153a2 <__swhatbuf_r+0x12>
 80153bc:	9a01      	ldr	r2, [sp, #4]
 80153be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80153c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80153c6:	425a      	negs	r2, r3
 80153c8:	415a      	adcs	r2, r3
 80153ca:	602a      	str	r2, [r5, #0]
 80153cc:	e7ee      	b.n	80153ac <__swhatbuf_r+0x1c>
 80153ce:	2340      	movs	r3, #64	; 0x40
 80153d0:	2000      	movs	r0, #0
 80153d2:	6023      	str	r3, [r4, #0]
 80153d4:	b016      	add	sp, #88	; 0x58
 80153d6:	bd70      	pop	{r4, r5, r6, pc}

080153d8 <__smakebuf_r>:
 80153d8:	898b      	ldrh	r3, [r1, #12]
 80153da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153dc:	079d      	lsls	r5, r3, #30
 80153de:	4606      	mov	r6, r0
 80153e0:	460c      	mov	r4, r1
 80153e2:	d507      	bpl.n	80153f4 <__smakebuf_r+0x1c>
 80153e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80153e8:	6023      	str	r3, [r4, #0]
 80153ea:	6123      	str	r3, [r4, #16]
 80153ec:	2301      	movs	r3, #1
 80153ee:	6163      	str	r3, [r4, #20]
 80153f0:	b002      	add	sp, #8
 80153f2:	bd70      	pop	{r4, r5, r6, pc}
 80153f4:	ab01      	add	r3, sp, #4
 80153f6:	466a      	mov	r2, sp
 80153f8:	f7ff ffca 	bl	8015390 <__swhatbuf_r>
 80153fc:	9900      	ldr	r1, [sp, #0]
 80153fe:	4605      	mov	r5, r0
 8015400:	4630      	mov	r0, r6
 8015402:	f000 fca9 	bl	8015d58 <_malloc_r>
 8015406:	b948      	cbnz	r0, 801541c <__smakebuf_r+0x44>
 8015408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801540c:	059a      	lsls	r2, r3, #22
 801540e:	d4ef      	bmi.n	80153f0 <__smakebuf_r+0x18>
 8015410:	f023 0303 	bic.w	r3, r3, #3
 8015414:	f043 0302 	orr.w	r3, r3, #2
 8015418:	81a3      	strh	r3, [r4, #12]
 801541a:	e7e3      	b.n	80153e4 <__smakebuf_r+0xc>
 801541c:	4b0d      	ldr	r3, [pc, #52]	; (8015454 <__smakebuf_r+0x7c>)
 801541e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015420:	89a3      	ldrh	r3, [r4, #12]
 8015422:	6020      	str	r0, [r4, #0]
 8015424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015428:	81a3      	strh	r3, [r4, #12]
 801542a:	9b00      	ldr	r3, [sp, #0]
 801542c:	6163      	str	r3, [r4, #20]
 801542e:	9b01      	ldr	r3, [sp, #4]
 8015430:	6120      	str	r0, [r4, #16]
 8015432:	b15b      	cbz	r3, 801544c <__smakebuf_r+0x74>
 8015434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015438:	4630      	mov	r0, r6
 801543a:	f001 fbfd 	bl	8016c38 <_isatty_r>
 801543e:	b128      	cbz	r0, 801544c <__smakebuf_r+0x74>
 8015440:	89a3      	ldrh	r3, [r4, #12]
 8015442:	f023 0303 	bic.w	r3, r3, #3
 8015446:	f043 0301 	orr.w	r3, r3, #1
 801544a:	81a3      	strh	r3, [r4, #12]
 801544c:	89a3      	ldrh	r3, [r4, #12]
 801544e:	431d      	orrs	r5, r3
 8015450:	81a5      	strh	r5, [r4, #12]
 8015452:	e7cd      	b.n	80153f0 <__smakebuf_r+0x18>
 8015454:	08014b91 	.word	0x08014b91

08015458 <malloc>:
 8015458:	4b02      	ldr	r3, [pc, #8]	; (8015464 <malloc+0xc>)
 801545a:	4601      	mov	r1, r0
 801545c:	6818      	ldr	r0, [r3, #0]
 801545e:	f000 bc7b 	b.w	8015d58 <_malloc_r>
 8015462:	bf00      	nop
 8015464:	2000000c 	.word	0x2000000c

08015468 <__ascii_mbtowc>:
 8015468:	b082      	sub	sp, #8
 801546a:	b901      	cbnz	r1, 801546e <__ascii_mbtowc+0x6>
 801546c:	a901      	add	r1, sp, #4
 801546e:	b142      	cbz	r2, 8015482 <__ascii_mbtowc+0x1a>
 8015470:	b14b      	cbz	r3, 8015486 <__ascii_mbtowc+0x1e>
 8015472:	7813      	ldrb	r3, [r2, #0]
 8015474:	600b      	str	r3, [r1, #0]
 8015476:	7812      	ldrb	r2, [r2, #0]
 8015478:	1c10      	adds	r0, r2, #0
 801547a:	bf18      	it	ne
 801547c:	2001      	movne	r0, #1
 801547e:	b002      	add	sp, #8
 8015480:	4770      	bx	lr
 8015482:	4610      	mov	r0, r2
 8015484:	e7fb      	b.n	801547e <__ascii_mbtowc+0x16>
 8015486:	f06f 0001 	mvn.w	r0, #1
 801548a:	e7f8      	b.n	801547e <__ascii_mbtowc+0x16>

0801548c <memcpy>:
 801548c:	b510      	push	{r4, lr}
 801548e:	1e43      	subs	r3, r0, #1
 8015490:	440a      	add	r2, r1
 8015492:	4291      	cmp	r1, r2
 8015494:	d100      	bne.n	8015498 <memcpy+0xc>
 8015496:	bd10      	pop	{r4, pc}
 8015498:	f811 4b01 	ldrb.w	r4, [r1], #1
 801549c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80154a0:	e7f7      	b.n	8015492 <memcpy+0x6>

080154a2 <_Balloc>:
 80154a2:	b570      	push	{r4, r5, r6, lr}
 80154a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80154a6:	4604      	mov	r4, r0
 80154a8:	460e      	mov	r6, r1
 80154aa:	b93d      	cbnz	r5, 80154bc <_Balloc+0x1a>
 80154ac:	2010      	movs	r0, #16
 80154ae:	f7ff ffd3 	bl	8015458 <malloc>
 80154b2:	6260      	str	r0, [r4, #36]	; 0x24
 80154b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80154b8:	6005      	str	r5, [r0, #0]
 80154ba:	60c5      	str	r5, [r0, #12]
 80154bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80154be:	68eb      	ldr	r3, [r5, #12]
 80154c0:	b183      	cbz	r3, 80154e4 <_Balloc+0x42>
 80154c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154c4:	68db      	ldr	r3, [r3, #12]
 80154c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80154ca:	b9b8      	cbnz	r0, 80154fc <_Balloc+0x5a>
 80154cc:	2101      	movs	r1, #1
 80154ce:	fa01 f506 	lsl.w	r5, r1, r6
 80154d2:	1d6a      	adds	r2, r5, #5
 80154d4:	0092      	lsls	r2, r2, #2
 80154d6:	4620      	mov	r0, r4
 80154d8:	f000 fbe1 	bl	8015c9e <_calloc_r>
 80154dc:	b160      	cbz	r0, 80154f8 <_Balloc+0x56>
 80154de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80154e2:	e00e      	b.n	8015502 <_Balloc+0x60>
 80154e4:	2221      	movs	r2, #33	; 0x21
 80154e6:	2104      	movs	r1, #4
 80154e8:	4620      	mov	r0, r4
 80154ea:	f000 fbd8 	bl	8015c9e <_calloc_r>
 80154ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154f0:	60e8      	str	r0, [r5, #12]
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1e4      	bne.n	80154c2 <_Balloc+0x20>
 80154f8:	2000      	movs	r0, #0
 80154fa:	bd70      	pop	{r4, r5, r6, pc}
 80154fc:	6802      	ldr	r2, [r0, #0]
 80154fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015502:	2300      	movs	r3, #0
 8015504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015508:	e7f7      	b.n	80154fa <_Balloc+0x58>

0801550a <_Bfree>:
 801550a:	b570      	push	{r4, r5, r6, lr}
 801550c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801550e:	4606      	mov	r6, r0
 8015510:	460d      	mov	r5, r1
 8015512:	b93c      	cbnz	r4, 8015524 <_Bfree+0x1a>
 8015514:	2010      	movs	r0, #16
 8015516:	f7ff ff9f 	bl	8015458 <malloc>
 801551a:	6270      	str	r0, [r6, #36]	; 0x24
 801551c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015520:	6004      	str	r4, [r0, #0]
 8015522:	60c4      	str	r4, [r0, #12]
 8015524:	b13d      	cbz	r5, 8015536 <_Bfree+0x2c>
 8015526:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015528:	686a      	ldr	r2, [r5, #4]
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015530:	6029      	str	r1, [r5, #0]
 8015532:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015536:	bd70      	pop	{r4, r5, r6, pc}

08015538 <__multadd>:
 8015538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553c:	690d      	ldr	r5, [r1, #16]
 801553e:	461f      	mov	r7, r3
 8015540:	4606      	mov	r6, r0
 8015542:	460c      	mov	r4, r1
 8015544:	f101 0c14 	add.w	ip, r1, #20
 8015548:	2300      	movs	r3, #0
 801554a:	f8dc 0000 	ldr.w	r0, [ip]
 801554e:	b281      	uxth	r1, r0
 8015550:	fb02 7101 	mla	r1, r2, r1, r7
 8015554:	0c0f      	lsrs	r7, r1, #16
 8015556:	0c00      	lsrs	r0, r0, #16
 8015558:	fb02 7000 	mla	r0, r2, r0, r7
 801555c:	b289      	uxth	r1, r1
 801555e:	3301      	adds	r3, #1
 8015560:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015564:	429d      	cmp	r5, r3
 8015566:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801556a:	f84c 1b04 	str.w	r1, [ip], #4
 801556e:	dcec      	bgt.n	801554a <__multadd+0x12>
 8015570:	b1d7      	cbz	r7, 80155a8 <__multadd+0x70>
 8015572:	68a3      	ldr	r3, [r4, #8]
 8015574:	42ab      	cmp	r3, r5
 8015576:	dc12      	bgt.n	801559e <__multadd+0x66>
 8015578:	6861      	ldr	r1, [r4, #4]
 801557a:	4630      	mov	r0, r6
 801557c:	3101      	adds	r1, #1
 801557e:	f7ff ff90 	bl	80154a2 <_Balloc>
 8015582:	6922      	ldr	r2, [r4, #16]
 8015584:	3202      	adds	r2, #2
 8015586:	f104 010c 	add.w	r1, r4, #12
 801558a:	4680      	mov	r8, r0
 801558c:	0092      	lsls	r2, r2, #2
 801558e:	300c      	adds	r0, #12
 8015590:	f7ff ff7c 	bl	801548c <memcpy>
 8015594:	4621      	mov	r1, r4
 8015596:	4630      	mov	r0, r6
 8015598:	f7ff ffb7 	bl	801550a <_Bfree>
 801559c:	4644      	mov	r4, r8
 801559e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80155a2:	3501      	adds	r5, #1
 80155a4:	615f      	str	r7, [r3, #20]
 80155a6:	6125      	str	r5, [r4, #16]
 80155a8:	4620      	mov	r0, r4
 80155aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155ae <__s2b>:
 80155ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155b2:	460c      	mov	r4, r1
 80155b4:	4615      	mov	r5, r2
 80155b6:	461f      	mov	r7, r3
 80155b8:	2209      	movs	r2, #9
 80155ba:	3308      	adds	r3, #8
 80155bc:	4606      	mov	r6, r0
 80155be:	fb93 f3f2 	sdiv	r3, r3, r2
 80155c2:	2100      	movs	r1, #0
 80155c4:	2201      	movs	r2, #1
 80155c6:	429a      	cmp	r2, r3
 80155c8:	db20      	blt.n	801560c <__s2b+0x5e>
 80155ca:	4630      	mov	r0, r6
 80155cc:	f7ff ff69 	bl	80154a2 <_Balloc>
 80155d0:	9b08      	ldr	r3, [sp, #32]
 80155d2:	6143      	str	r3, [r0, #20]
 80155d4:	2d09      	cmp	r5, #9
 80155d6:	f04f 0301 	mov.w	r3, #1
 80155da:	6103      	str	r3, [r0, #16]
 80155dc:	dd19      	ble.n	8015612 <__s2b+0x64>
 80155de:	f104 0809 	add.w	r8, r4, #9
 80155e2:	46c1      	mov	r9, r8
 80155e4:	442c      	add	r4, r5
 80155e6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80155ea:	4601      	mov	r1, r0
 80155ec:	3b30      	subs	r3, #48	; 0x30
 80155ee:	220a      	movs	r2, #10
 80155f0:	4630      	mov	r0, r6
 80155f2:	f7ff ffa1 	bl	8015538 <__multadd>
 80155f6:	45a1      	cmp	r9, r4
 80155f8:	d1f5      	bne.n	80155e6 <__s2b+0x38>
 80155fa:	eb08 0405 	add.w	r4, r8, r5
 80155fe:	3c08      	subs	r4, #8
 8015600:	1b2d      	subs	r5, r5, r4
 8015602:	1963      	adds	r3, r4, r5
 8015604:	42bb      	cmp	r3, r7
 8015606:	db07      	blt.n	8015618 <__s2b+0x6a>
 8015608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801560c:	0052      	lsls	r2, r2, #1
 801560e:	3101      	adds	r1, #1
 8015610:	e7d9      	b.n	80155c6 <__s2b+0x18>
 8015612:	340a      	adds	r4, #10
 8015614:	2509      	movs	r5, #9
 8015616:	e7f3      	b.n	8015600 <__s2b+0x52>
 8015618:	f814 3b01 	ldrb.w	r3, [r4], #1
 801561c:	4601      	mov	r1, r0
 801561e:	3b30      	subs	r3, #48	; 0x30
 8015620:	220a      	movs	r2, #10
 8015622:	4630      	mov	r0, r6
 8015624:	f7ff ff88 	bl	8015538 <__multadd>
 8015628:	e7eb      	b.n	8015602 <__s2b+0x54>

0801562a <__hi0bits>:
 801562a:	0c02      	lsrs	r2, r0, #16
 801562c:	0412      	lsls	r2, r2, #16
 801562e:	4603      	mov	r3, r0
 8015630:	b9b2      	cbnz	r2, 8015660 <__hi0bits+0x36>
 8015632:	0403      	lsls	r3, r0, #16
 8015634:	2010      	movs	r0, #16
 8015636:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801563a:	bf04      	itt	eq
 801563c:	021b      	lsleq	r3, r3, #8
 801563e:	3008      	addeq	r0, #8
 8015640:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015644:	bf04      	itt	eq
 8015646:	011b      	lsleq	r3, r3, #4
 8015648:	3004      	addeq	r0, #4
 801564a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801564e:	bf04      	itt	eq
 8015650:	009b      	lsleq	r3, r3, #2
 8015652:	3002      	addeq	r0, #2
 8015654:	2b00      	cmp	r3, #0
 8015656:	db06      	blt.n	8015666 <__hi0bits+0x3c>
 8015658:	005b      	lsls	r3, r3, #1
 801565a:	d503      	bpl.n	8015664 <__hi0bits+0x3a>
 801565c:	3001      	adds	r0, #1
 801565e:	4770      	bx	lr
 8015660:	2000      	movs	r0, #0
 8015662:	e7e8      	b.n	8015636 <__hi0bits+0xc>
 8015664:	2020      	movs	r0, #32
 8015666:	4770      	bx	lr

08015668 <__lo0bits>:
 8015668:	6803      	ldr	r3, [r0, #0]
 801566a:	f013 0207 	ands.w	r2, r3, #7
 801566e:	4601      	mov	r1, r0
 8015670:	d00b      	beq.n	801568a <__lo0bits+0x22>
 8015672:	07da      	lsls	r2, r3, #31
 8015674:	d423      	bmi.n	80156be <__lo0bits+0x56>
 8015676:	0798      	lsls	r0, r3, #30
 8015678:	bf49      	itett	mi
 801567a:	085b      	lsrmi	r3, r3, #1
 801567c:	089b      	lsrpl	r3, r3, #2
 801567e:	2001      	movmi	r0, #1
 8015680:	600b      	strmi	r3, [r1, #0]
 8015682:	bf5c      	itt	pl
 8015684:	600b      	strpl	r3, [r1, #0]
 8015686:	2002      	movpl	r0, #2
 8015688:	4770      	bx	lr
 801568a:	b298      	uxth	r0, r3
 801568c:	b9a8      	cbnz	r0, 80156ba <__lo0bits+0x52>
 801568e:	0c1b      	lsrs	r3, r3, #16
 8015690:	2010      	movs	r0, #16
 8015692:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015696:	bf04      	itt	eq
 8015698:	0a1b      	lsreq	r3, r3, #8
 801569a:	3008      	addeq	r0, #8
 801569c:	071a      	lsls	r2, r3, #28
 801569e:	bf04      	itt	eq
 80156a0:	091b      	lsreq	r3, r3, #4
 80156a2:	3004      	addeq	r0, #4
 80156a4:	079a      	lsls	r2, r3, #30
 80156a6:	bf04      	itt	eq
 80156a8:	089b      	lsreq	r3, r3, #2
 80156aa:	3002      	addeq	r0, #2
 80156ac:	07da      	lsls	r2, r3, #31
 80156ae:	d402      	bmi.n	80156b6 <__lo0bits+0x4e>
 80156b0:	085b      	lsrs	r3, r3, #1
 80156b2:	d006      	beq.n	80156c2 <__lo0bits+0x5a>
 80156b4:	3001      	adds	r0, #1
 80156b6:	600b      	str	r3, [r1, #0]
 80156b8:	4770      	bx	lr
 80156ba:	4610      	mov	r0, r2
 80156bc:	e7e9      	b.n	8015692 <__lo0bits+0x2a>
 80156be:	2000      	movs	r0, #0
 80156c0:	4770      	bx	lr
 80156c2:	2020      	movs	r0, #32
 80156c4:	4770      	bx	lr

080156c6 <__i2b>:
 80156c6:	b510      	push	{r4, lr}
 80156c8:	460c      	mov	r4, r1
 80156ca:	2101      	movs	r1, #1
 80156cc:	f7ff fee9 	bl	80154a2 <_Balloc>
 80156d0:	2201      	movs	r2, #1
 80156d2:	6144      	str	r4, [r0, #20]
 80156d4:	6102      	str	r2, [r0, #16]
 80156d6:	bd10      	pop	{r4, pc}

080156d8 <__multiply>:
 80156d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156dc:	4614      	mov	r4, r2
 80156de:	690a      	ldr	r2, [r1, #16]
 80156e0:	6923      	ldr	r3, [r4, #16]
 80156e2:	429a      	cmp	r2, r3
 80156e4:	bfb8      	it	lt
 80156e6:	460b      	movlt	r3, r1
 80156e8:	4688      	mov	r8, r1
 80156ea:	bfbc      	itt	lt
 80156ec:	46a0      	movlt	r8, r4
 80156ee:	461c      	movlt	r4, r3
 80156f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80156f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80156f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80156fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015700:	eb07 0609 	add.w	r6, r7, r9
 8015704:	42b3      	cmp	r3, r6
 8015706:	bfb8      	it	lt
 8015708:	3101      	addlt	r1, #1
 801570a:	f7ff feca 	bl	80154a2 <_Balloc>
 801570e:	f100 0514 	add.w	r5, r0, #20
 8015712:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015716:	462b      	mov	r3, r5
 8015718:	2200      	movs	r2, #0
 801571a:	4573      	cmp	r3, lr
 801571c:	d316      	bcc.n	801574c <__multiply+0x74>
 801571e:	f104 0214 	add.w	r2, r4, #20
 8015722:	f108 0114 	add.w	r1, r8, #20
 8015726:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801572a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801572e:	9300      	str	r3, [sp, #0]
 8015730:	9b00      	ldr	r3, [sp, #0]
 8015732:	9201      	str	r2, [sp, #4]
 8015734:	4293      	cmp	r3, r2
 8015736:	d80c      	bhi.n	8015752 <__multiply+0x7a>
 8015738:	2e00      	cmp	r6, #0
 801573a:	dd03      	ble.n	8015744 <__multiply+0x6c>
 801573c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015740:	2b00      	cmp	r3, #0
 8015742:	d05d      	beq.n	8015800 <__multiply+0x128>
 8015744:	6106      	str	r6, [r0, #16]
 8015746:	b003      	add	sp, #12
 8015748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801574c:	f843 2b04 	str.w	r2, [r3], #4
 8015750:	e7e3      	b.n	801571a <__multiply+0x42>
 8015752:	f8b2 b000 	ldrh.w	fp, [r2]
 8015756:	f1bb 0f00 	cmp.w	fp, #0
 801575a:	d023      	beq.n	80157a4 <__multiply+0xcc>
 801575c:	4689      	mov	r9, r1
 801575e:	46ac      	mov	ip, r5
 8015760:	f04f 0800 	mov.w	r8, #0
 8015764:	f859 4b04 	ldr.w	r4, [r9], #4
 8015768:	f8dc a000 	ldr.w	sl, [ip]
 801576c:	b2a3      	uxth	r3, r4
 801576e:	fa1f fa8a 	uxth.w	sl, sl
 8015772:	fb0b a303 	mla	r3, fp, r3, sl
 8015776:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801577a:	f8dc 4000 	ldr.w	r4, [ip]
 801577e:	4443      	add	r3, r8
 8015780:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015784:	fb0b 840a 	mla	r4, fp, sl, r8
 8015788:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801578c:	46e2      	mov	sl, ip
 801578e:	b29b      	uxth	r3, r3
 8015790:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015794:	454f      	cmp	r7, r9
 8015796:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801579a:	f84a 3b04 	str.w	r3, [sl], #4
 801579e:	d82b      	bhi.n	80157f8 <__multiply+0x120>
 80157a0:	f8cc 8004 	str.w	r8, [ip, #4]
 80157a4:	9b01      	ldr	r3, [sp, #4]
 80157a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80157aa:	3204      	adds	r2, #4
 80157ac:	f1ba 0f00 	cmp.w	sl, #0
 80157b0:	d020      	beq.n	80157f4 <__multiply+0x11c>
 80157b2:	682b      	ldr	r3, [r5, #0]
 80157b4:	4689      	mov	r9, r1
 80157b6:	46a8      	mov	r8, r5
 80157b8:	f04f 0b00 	mov.w	fp, #0
 80157bc:	f8b9 c000 	ldrh.w	ip, [r9]
 80157c0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80157c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80157c8:	445c      	add	r4, fp
 80157ca:	46c4      	mov	ip, r8
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80157d2:	f84c 3b04 	str.w	r3, [ip], #4
 80157d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80157da:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80157de:	0c1b      	lsrs	r3, r3, #16
 80157e0:	fb0a b303 	mla	r3, sl, r3, fp
 80157e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80157e8:	454f      	cmp	r7, r9
 80157ea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80157ee:	d805      	bhi.n	80157fc <__multiply+0x124>
 80157f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80157f4:	3504      	adds	r5, #4
 80157f6:	e79b      	b.n	8015730 <__multiply+0x58>
 80157f8:	46d4      	mov	ip, sl
 80157fa:	e7b3      	b.n	8015764 <__multiply+0x8c>
 80157fc:	46e0      	mov	r8, ip
 80157fe:	e7dd      	b.n	80157bc <__multiply+0xe4>
 8015800:	3e01      	subs	r6, #1
 8015802:	e799      	b.n	8015738 <__multiply+0x60>

08015804 <__pow5mult>:
 8015804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015808:	4615      	mov	r5, r2
 801580a:	f012 0203 	ands.w	r2, r2, #3
 801580e:	4606      	mov	r6, r0
 8015810:	460f      	mov	r7, r1
 8015812:	d007      	beq.n	8015824 <__pow5mult+0x20>
 8015814:	3a01      	subs	r2, #1
 8015816:	4c21      	ldr	r4, [pc, #132]	; (801589c <__pow5mult+0x98>)
 8015818:	2300      	movs	r3, #0
 801581a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801581e:	f7ff fe8b 	bl	8015538 <__multadd>
 8015822:	4607      	mov	r7, r0
 8015824:	10ad      	asrs	r5, r5, #2
 8015826:	d035      	beq.n	8015894 <__pow5mult+0x90>
 8015828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801582a:	b93c      	cbnz	r4, 801583c <__pow5mult+0x38>
 801582c:	2010      	movs	r0, #16
 801582e:	f7ff fe13 	bl	8015458 <malloc>
 8015832:	6270      	str	r0, [r6, #36]	; 0x24
 8015834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015838:	6004      	str	r4, [r0, #0]
 801583a:	60c4      	str	r4, [r0, #12]
 801583c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015844:	b94c      	cbnz	r4, 801585a <__pow5mult+0x56>
 8015846:	f240 2171 	movw	r1, #625	; 0x271
 801584a:	4630      	mov	r0, r6
 801584c:	f7ff ff3b 	bl	80156c6 <__i2b>
 8015850:	2300      	movs	r3, #0
 8015852:	f8c8 0008 	str.w	r0, [r8, #8]
 8015856:	4604      	mov	r4, r0
 8015858:	6003      	str	r3, [r0, #0]
 801585a:	f04f 0800 	mov.w	r8, #0
 801585e:	07eb      	lsls	r3, r5, #31
 8015860:	d50a      	bpl.n	8015878 <__pow5mult+0x74>
 8015862:	4639      	mov	r1, r7
 8015864:	4622      	mov	r2, r4
 8015866:	4630      	mov	r0, r6
 8015868:	f7ff ff36 	bl	80156d8 <__multiply>
 801586c:	4639      	mov	r1, r7
 801586e:	4681      	mov	r9, r0
 8015870:	4630      	mov	r0, r6
 8015872:	f7ff fe4a 	bl	801550a <_Bfree>
 8015876:	464f      	mov	r7, r9
 8015878:	106d      	asrs	r5, r5, #1
 801587a:	d00b      	beq.n	8015894 <__pow5mult+0x90>
 801587c:	6820      	ldr	r0, [r4, #0]
 801587e:	b938      	cbnz	r0, 8015890 <__pow5mult+0x8c>
 8015880:	4622      	mov	r2, r4
 8015882:	4621      	mov	r1, r4
 8015884:	4630      	mov	r0, r6
 8015886:	f7ff ff27 	bl	80156d8 <__multiply>
 801588a:	6020      	str	r0, [r4, #0]
 801588c:	f8c0 8000 	str.w	r8, [r0]
 8015890:	4604      	mov	r4, r0
 8015892:	e7e4      	b.n	801585e <__pow5mult+0x5a>
 8015894:	4638      	mov	r0, r7
 8015896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801589a:	bf00      	nop
 801589c:	08017710 	.word	0x08017710

080158a0 <__lshift>:
 80158a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158a4:	460c      	mov	r4, r1
 80158a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158aa:	6923      	ldr	r3, [r4, #16]
 80158ac:	6849      	ldr	r1, [r1, #4]
 80158ae:	eb0a 0903 	add.w	r9, sl, r3
 80158b2:	68a3      	ldr	r3, [r4, #8]
 80158b4:	4607      	mov	r7, r0
 80158b6:	4616      	mov	r6, r2
 80158b8:	f109 0501 	add.w	r5, r9, #1
 80158bc:	42ab      	cmp	r3, r5
 80158be:	db32      	blt.n	8015926 <__lshift+0x86>
 80158c0:	4638      	mov	r0, r7
 80158c2:	f7ff fdee 	bl	80154a2 <_Balloc>
 80158c6:	2300      	movs	r3, #0
 80158c8:	4680      	mov	r8, r0
 80158ca:	f100 0114 	add.w	r1, r0, #20
 80158ce:	461a      	mov	r2, r3
 80158d0:	4553      	cmp	r3, sl
 80158d2:	db2b      	blt.n	801592c <__lshift+0x8c>
 80158d4:	6920      	ldr	r0, [r4, #16]
 80158d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80158da:	f104 0314 	add.w	r3, r4, #20
 80158de:	f016 021f 	ands.w	r2, r6, #31
 80158e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80158e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80158ea:	d025      	beq.n	8015938 <__lshift+0x98>
 80158ec:	f1c2 0e20 	rsb	lr, r2, #32
 80158f0:	2000      	movs	r0, #0
 80158f2:	681e      	ldr	r6, [r3, #0]
 80158f4:	468a      	mov	sl, r1
 80158f6:	4096      	lsls	r6, r2
 80158f8:	4330      	orrs	r0, r6
 80158fa:	f84a 0b04 	str.w	r0, [sl], #4
 80158fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8015902:	459c      	cmp	ip, r3
 8015904:	fa20 f00e 	lsr.w	r0, r0, lr
 8015908:	d814      	bhi.n	8015934 <__lshift+0x94>
 801590a:	6048      	str	r0, [r1, #4]
 801590c:	b108      	cbz	r0, 8015912 <__lshift+0x72>
 801590e:	f109 0502 	add.w	r5, r9, #2
 8015912:	3d01      	subs	r5, #1
 8015914:	4638      	mov	r0, r7
 8015916:	f8c8 5010 	str.w	r5, [r8, #16]
 801591a:	4621      	mov	r1, r4
 801591c:	f7ff fdf5 	bl	801550a <_Bfree>
 8015920:	4640      	mov	r0, r8
 8015922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015926:	3101      	adds	r1, #1
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	e7c7      	b.n	80158bc <__lshift+0x1c>
 801592c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015930:	3301      	adds	r3, #1
 8015932:	e7cd      	b.n	80158d0 <__lshift+0x30>
 8015934:	4651      	mov	r1, sl
 8015936:	e7dc      	b.n	80158f2 <__lshift+0x52>
 8015938:	3904      	subs	r1, #4
 801593a:	f853 2b04 	ldr.w	r2, [r3], #4
 801593e:	f841 2f04 	str.w	r2, [r1, #4]!
 8015942:	459c      	cmp	ip, r3
 8015944:	d8f9      	bhi.n	801593a <__lshift+0x9a>
 8015946:	e7e4      	b.n	8015912 <__lshift+0x72>

08015948 <__mcmp>:
 8015948:	6903      	ldr	r3, [r0, #16]
 801594a:	690a      	ldr	r2, [r1, #16]
 801594c:	1a9b      	subs	r3, r3, r2
 801594e:	b530      	push	{r4, r5, lr}
 8015950:	d10c      	bne.n	801596c <__mcmp+0x24>
 8015952:	0092      	lsls	r2, r2, #2
 8015954:	3014      	adds	r0, #20
 8015956:	3114      	adds	r1, #20
 8015958:	1884      	adds	r4, r0, r2
 801595a:	4411      	add	r1, r2
 801595c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015964:	4295      	cmp	r5, r2
 8015966:	d003      	beq.n	8015970 <__mcmp+0x28>
 8015968:	d305      	bcc.n	8015976 <__mcmp+0x2e>
 801596a:	2301      	movs	r3, #1
 801596c:	4618      	mov	r0, r3
 801596e:	bd30      	pop	{r4, r5, pc}
 8015970:	42a0      	cmp	r0, r4
 8015972:	d3f3      	bcc.n	801595c <__mcmp+0x14>
 8015974:	e7fa      	b.n	801596c <__mcmp+0x24>
 8015976:	f04f 33ff 	mov.w	r3, #4294967295
 801597a:	e7f7      	b.n	801596c <__mcmp+0x24>

0801597c <__mdiff>:
 801597c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015980:	460d      	mov	r5, r1
 8015982:	4607      	mov	r7, r0
 8015984:	4611      	mov	r1, r2
 8015986:	4628      	mov	r0, r5
 8015988:	4614      	mov	r4, r2
 801598a:	f7ff ffdd 	bl	8015948 <__mcmp>
 801598e:	1e06      	subs	r6, r0, #0
 8015990:	d108      	bne.n	80159a4 <__mdiff+0x28>
 8015992:	4631      	mov	r1, r6
 8015994:	4638      	mov	r0, r7
 8015996:	f7ff fd84 	bl	80154a2 <_Balloc>
 801599a:	2301      	movs	r3, #1
 801599c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80159a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159a4:	bfa4      	itt	ge
 80159a6:	4623      	movge	r3, r4
 80159a8:	462c      	movge	r4, r5
 80159aa:	4638      	mov	r0, r7
 80159ac:	6861      	ldr	r1, [r4, #4]
 80159ae:	bfa6      	itte	ge
 80159b0:	461d      	movge	r5, r3
 80159b2:	2600      	movge	r6, #0
 80159b4:	2601      	movlt	r6, #1
 80159b6:	f7ff fd74 	bl	80154a2 <_Balloc>
 80159ba:	692b      	ldr	r3, [r5, #16]
 80159bc:	60c6      	str	r6, [r0, #12]
 80159be:	6926      	ldr	r6, [r4, #16]
 80159c0:	f105 0914 	add.w	r9, r5, #20
 80159c4:	f104 0214 	add.w	r2, r4, #20
 80159c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80159cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80159d0:	f100 0514 	add.w	r5, r0, #20
 80159d4:	f04f 0e00 	mov.w	lr, #0
 80159d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80159dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80159e0:	fa1e f18a 	uxtah	r1, lr, sl
 80159e4:	b2a3      	uxth	r3, r4
 80159e6:	1ac9      	subs	r1, r1, r3
 80159e8:	0c23      	lsrs	r3, r4, #16
 80159ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80159ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80159f2:	b289      	uxth	r1, r1
 80159f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80159f8:	45c8      	cmp	r8, r9
 80159fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80159fe:	4694      	mov	ip, r2
 8015a00:	f845 3b04 	str.w	r3, [r5], #4
 8015a04:	d8e8      	bhi.n	80159d8 <__mdiff+0x5c>
 8015a06:	45bc      	cmp	ip, r7
 8015a08:	d304      	bcc.n	8015a14 <__mdiff+0x98>
 8015a0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015a0e:	b183      	cbz	r3, 8015a32 <__mdiff+0xb6>
 8015a10:	6106      	str	r6, [r0, #16]
 8015a12:	e7c5      	b.n	80159a0 <__mdiff+0x24>
 8015a14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015a18:	fa1e f381 	uxtah	r3, lr, r1
 8015a1c:	141a      	asrs	r2, r3, #16
 8015a1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015a28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015a2c:	f845 3b04 	str.w	r3, [r5], #4
 8015a30:	e7e9      	b.n	8015a06 <__mdiff+0x8a>
 8015a32:	3e01      	subs	r6, #1
 8015a34:	e7e9      	b.n	8015a0a <__mdiff+0x8e>
	...

08015a38 <__ulp>:
 8015a38:	4b12      	ldr	r3, [pc, #72]	; (8015a84 <__ulp+0x4c>)
 8015a3a:	ee10 2a90 	vmov	r2, s1
 8015a3e:	401a      	ands	r2, r3
 8015a40:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	dd04      	ble.n	8015a52 <__ulp+0x1a>
 8015a48:	2000      	movs	r0, #0
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	ec41 0b10 	vmov	d0, r0, r1
 8015a50:	4770      	bx	lr
 8015a52:	425b      	negs	r3, r3
 8015a54:	151b      	asrs	r3, r3, #20
 8015a56:	2b13      	cmp	r3, #19
 8015a58:	f04f 0000 	mov.w	r0, #0
 8015a5c:	f04f 0100 	mov.w	r1, #0
 8015a60:	dc04      	bgt.n	8015a6c <__ulp+0x34>
 8015a62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015a66:	fa42 f103 	asr.w	r1, r2, r3
 8015a6a:	e7ef      	b.n	8015a4c <__ulp+0x14>
 8015a6c:	3b14      	subs	r3, #20
 8015a6e:	2b1e      	cmp	r3, #30
 8015a70:	f04f 0201 	mov.w	r2, #1
 8015a74:	bfda      	itte	le
 8015a76:	f1c3 031f 	rsble	r3, r3, #31
 8015a7a:	fa02 f303 	lslle.w	r3, r2, r3
 8015a7e:	4613      	movgt	r3, r2
 8015a80:	4618      	mov	r0, r3
 8015a82:	e7e3      	b.n	8015a4c <__ulp+0x14>
 8015a84:	7ff00000 	.word	0x7ff00000

08015a88 <__b2d>:
 8015a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a8a:	6905      	ldr	r5, [r0, #16]
 8015a8c:	f100 0714 	add.w	r7, r0, #20
 8015a90:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015a94:	1f2e      	subs	r6, r5, #4
 8015a96:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	f7ff fdc5 	bl	801562a <__hi0bits>
 8015aa0:	f1c0 0320 	rsb	r3, r0, #32
 8015aa4:	280a      	cmp	r0, #10
 8015aa6:	600b      	str	r3, [r1, #0]
 8015aa8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015b20 <__b2d+0x98>
 8015aac:	dc14      	bgt.n	8015ad8 <__b2d+0x50>
 8015aae:	f1c0 0e0b 	rsb	lr, r0, #11
 8015ab2:	fa24 f10e 	lsr.w	r1, r4, lr
 8015ab6:	42b7      	cmp	r7, r6
 8015ab8:	ea41 030c 	orr.w	r3, r1, ip
 8015abc:	bf34      	ite	cc
 8015abe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015ac2:	2100      	movcs	r1, #0
 8015ac4:	3015      	adds	r0, #21
 8015ac6:	fa04 f000 	lsl.w	r0, r4, r0
 8015aca:	fa21 f10e 	lsr.w	r1, r1, lr
 8015ace:	ea40 0201 	orr.w	r2, r0, r1
 8015ad2:	ec43 2b10 	vmov	d0, r2, r3
 8015ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ad8:	42b7      	cmp	r7, r6
 8015ada:	bf3a      	itte	cc
 8015adc:	f1a5 0608 	subcc.w	r6, r5, #8
 8015ae0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015ae4:	2100      	movcs	r1, #0
 8015ae6:	380b      	subs	r0, #11
 8015ae8:	d015      	beq.n	8015b16 <__b2d+0x8e>
 8015aea:	4084      	lsls	r4, r0
 8015aec:	f1c0 0520 	rsb	r5, r0, #32
 8015af0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015af4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015af8:	42be      	cmp	r6, r7
 8015afa:	fa21 fc05 	lsr.w	ip, r1, r5
 8015afe:	ea44 030c 	orr.w	r3, r4, ip
 8015b02:	bf8c      	ite	hi
 8015b04:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015b08:	2400      	movls	r4, #0
 8015b0a:	fa01 f000 	lsl.w	r0, r1, r0
 8015b0e:	40ec      	lsrs	r4, r5
 8015b10:	ea40 0204 	orr.w	r2, r0, r4
 8015b14:	e7dd      	b.n	8015ad2 <__b2d+0x4a>
 8015b16:	ea44 030c 	orr.w	r3, r4, ip
 8015b1a:	460a      	mov	r2, r1
 8015b1c:	e7d9      	b.n	8015ad2 <__b2d+0x4a>
 8015b1e:	bf00      	nop
 8015b20:	3ff00000 	.word	0x3ff00000

08015b24 <__d2b>:
 8015b24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b28:	460e      	mov	r6, r1
 8015b2a:	2101      	movs	r1, #1
 8015b2c:	ec59 8b10 	vmov	r8, r9, d0
 8015b30:	4615      	mov	r5, r2
 8015b32:	f7ff fcb6 	bl	80154a2 <_Balloc>
 8015b36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015b3a:	4607      	mov	r7, r0
 8015b3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b40:	bb34      	cbnz	r4, 8015b90 <__d2b+0x6c>
 8015b42:	9301      	str	r3, [sp, #4]
 8015b44:	f1b8 0300 	subs.w	r3, r8, #0
 8015b48:	d027      	beq.n	8015b9a <__d2b+0x76>
 8015b4a:	a802      	add	r0, sp, #8
 8015b4c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015b50:	f7ff fd8a 	bl	8015668 <__lo0bits>
 8015b54:	9900      	ldr	r1, [sp, #0]
 8015b56:	b1f0      	cbz	r0, 8015b96 <__d2b+0x72>
 8015b58:	9a01      	ldr	r2, [sp, #4]
 8015b5a:	f1c0 0320 	rsb	r3, r0, #32
 8015b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b62:	430b      	orrs	r3, r1
 8015b64:	40c2      	lsrs	r2, r0
 8015b66:	617b      	str	r3, [r7, #20]
 8015b68:	9201      	str	r2, [sp, #4]
 8015b6a:	9b01      	ldr	r3, [sp, #4]
 8015b6c:	61bb      	str	r3, [r7, #24]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	bf14      	ite	ne
 8015b72:	2102      	movne	r1, #2
 8015b74:	2101      	moveq	r1, #1
 8015b76:	6139      	str	r1, [r7, #16]
 8015b78:	b1c4      	cbz	r4, 8015bac <__d2b+0x88>
 8015b7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015b7e:	4404      	add	r4, r0
 8015b80:	6034      	str	r4, [r6, #0]
 8015b82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b86:	6028      	str	r0, [r5, #0]
 8015b88:	4638      	mov	r0, r7
 8015b8a:	b003      	add	sp, #12
 8015b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b94:	e7d5      	b.n	8015b42 <__d2b+0x1e>
 8015b96:	6179      	str	r1, [r7, #20]
 8015b98:	e7e7      	b.n	8015b6a <__d2b+0x46>
 8015b9a:	a801      	add	r0, sp, #4
 8015b9c:	f7ff fd64 	bl	8015668 <__lo0bits>
 8015ba0:	9b01      	ldr	r3, [sp, #4]
 8015ba2:	617b      	str	r3, [r7, #20]
 8015ba4:	2101      	movs	r1, #1
 8015ba6:	6139      	str	r1, [r7, #16]
 8015ba8:	3020      	adds	r0, #32
 8015baa:	e7e5      	b.n	8015b78 <__d2b+0x54>
 8015bac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015bb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015bb4:	6030      	str	r0, [r6, #0]
 8015bb6:	6918      	ldr	r0, [r3, #16]
 8015bb8:	f7ff fd37 	bl	801562a <__hi0bits>
 8015bbc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015bc0:	e7e1      	b.n	8015b86 <__d2b+0x62>

08015bc2 <__ratio>:
 8015bc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc6:	4688      	mov	r8, r1
 8015bc8:	4669      	mov	r1, sp
 8015bca:	4681      	mov	r9, r0
 8015bcc:	f7ff ff5c 	bl	8015a88 <__b2d>
 8015bd0:	a901      	add	r1, sp, #4
 8015bd2:	4640      	mov	r0, r8
 8015bd4:	ec57 6b10 	vmov	r6, r7, d0
 8015bd8:	f7ff ff56 	bl	8015a88 <__b2d>
 8015bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015be0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015be4:	eba3 0c02 	sub.w	ip, r3, r2
 8015be8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015bec:	1a9b      	subs	r3, r3, r2
 8015bee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015bf2:	ec5b ab10 	vmov	sl, fp, d0
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	bfce      	itee	gt
 8015bfa:	463a      	movgt	r2, r7
 8015bfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015c00:	465a      	movle	r2, fp
 8015c02:	4659      	mov	r1, fp
 8015c04:	463d      	mov	r5, r7
 8015c06:	bfd4      	ite	le
 8015c08:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015c0c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015c10:	4630      	mov	r0, r6
 8015c12:	ee10 2a10 	vmov	r2, s0
 8015c16:	460b      	mov	r3, r1
 8015c18:	4629      	mov	r1, r5
 8015c1a:	f7ea fe2f 	bl	800087c <__aeabi_ddiv>
 8015c1e:	ec41 0b10 	vmov	d0, r0, r1
 8015c22:	b003      	add	sp, #12
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c28 <__copybits>:
 8015c28:	3901      	subs	r1, #1
 8015c2a:	b510      	push	{r4, lr}
 8015c2c:	1149      	asrs	r1, r1, #5
 8015c2e:	6914      	ldr	r4, [r2, #16]
 8015c30:	3101      	adds	r1, #1
 8015c32:	f102 0314 	add.w	r3, r2, #20
 8015c36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015c3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c3e:	42a3      	cmp	r3, r4
 8015c40:	4602      	mov	r2, r0
 8015c42:	d303      	bcc.n	8015c4c <__copybits+0x24>
 8015c44:	2300      	movs	r3, #0
 8015c46:	428a      	cmp	r2, r1
 8015c48:	d305      	bcc.n	8015c56 <__copybits+0x2e>
 8015c4a:	bd10      	pop	{r4, pc}
 8015c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c50:	f840 2b04 	str.w	r2, [r0], #4
 8015c54:	e7f3      	b.n	8015c3e <__copybits+0x16>
 8015c56:	f842 3b04 	str.w	r3, [r2], #4
 8015c5a:	e7f4      	b.n	8015c46 <__copybits+0x1e>

08015c5c <__any_on>:
 8015c5c:	f100 0214 	add.w	r2, r0, #20
 8015c60:	6900      	ldr	r0, [r0, #16]
 8015c62:	114b      	asrs	r3, r1, #5
 8015c64:	4298      	cmp	r0, r3
 8015c66:	b510      	push	{r4, lr}
 8015c68:	db11      	blt.n	8015c8e <__any_on+0x32>
 8015c6a:	dd0a      	ble.n	8015c82 <__any_on+0x26>
 8015c6c:	f011 011f 	ands.w	r1, r1, #31
 8015c70:	d007      	beq.n	8015c82 <__any_on+0x26>
 8015c72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015c76:	fa24 f001 	lsr.w	r0, r4, r1
 8015c7a:	fa00 f101 	lsl.w	r1, r0, r1
 8015c7e:	428c      	cmp	r4, r1
 8015c80:	d10b      	bne.n	8015c9a <__any_on+0x3e>
 8015c82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c86:	4293      	cmp	r3, r2
 8015c88:	d803      	bhi.n	8015c92 <__any_on+0x36>
 8015c8a:	2000      	movs	r0, #0
 8015c8c:	bd10      	pop	{r4, pc}
 8015c8e:	4603      	mov	r3, r0
 8015c90:	e7f7      	b.n	8015c82 <__any_on+0x26>
 8015c92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c96:	2900      	cmp	r1, #0
 8015c98:	d0f5      	beq.n	8015c86 <__any_on+0x2a>
 8015c9a:	2001      	movs	r0, #1
 8015c9c:	e7f6      	b.n	8015c8c <__any_on+0x30>

08015c9e <_calloc_r>:
 8015c9e:	b538      	push	{r3, r4, r5, lr}
 8015ca0:	fb02 f401 	mul.w	r4, r2, r1
 8015ca4:	4621      	mov	r1, r4
 8015ca6:	f000 f857 	bl	8015d58 <_malloc_r>
 8015caa:	4605      	mov	r5, r0
 8015cac:	b118      	cbz	r0, 8015cb6 <_calloc_r+0x18>
 8015cae:	4622      	mov	r2, r4
 8015cb0:	2100      	movs	r1, #0
 8015cb2:	f7fc f8fd 	bl	8011eb0 <memset>
 8015cb6:	4628      	mov	r0, r5
 8015cb8:	bd38      	pop	{r3, r4, r5, pc}
	...

08015cbc <_free_r>:
 8015cbc:	b538      	push	{r3, r4, r5, lr}
 8015cbe:	4605      	mov	r5, r0
 8015cc0:	2900      	cmp	r1, #0
 8015cc2:	d045      	beq.n	8015d50 <_free_r+0x94>
 8015cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cc8:	1f0c      	subs	r4, r1, #4
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	bfb8      	it	lt
 8015cce:	18e4      	addlt	r4, r4, r3
 8015cd0:	f000 ffdb 	bl	8016c8a <__malloc_lock>
 8015cd4:	4a1f      	ldr	r2, [pc, #124]	; (8015d54 <_free_r+0x98>)
 8015cd6:	6813      	ldr	r3, [r2, #0]
 8015cd8:	4610      	mov	r0, r2
 8015cda:	b933      	cbnz	r3, 8015cea <_free_r+0x2e>
 8015cdc:	6063      	str	r3, [r4, #4]
 8015cde:	6014      	str	r4, [r2, #0]
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ce6:	f000 bfd1 	b.w	8016c8c <__malloc_unlock>
 8015cea:	42a3      	cmp	r3, r4
 8015cec:	d90c      	bls.n	8015d08 <_free_r+0x4c>
 8015cee:	6821      	ldr	r1, [r4, #0]
 8015cf0:	1862      	adds	r2, r4, r1
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	bf04      	itt	eq
 8015cf6:	681a      	ldreq	r2, [r3, #0]
 8015cf8:	685b      	ldreq	r3, [r3, #4]
 8015cfa:	6063      	str	r3, [r4, #4]
 8015cfc:	bf04      	itt	eq
 8015cfe:	1852      	addeq	r2, r2, r1
 8015d00:	6022      	streq	r2, [r4, #0]
 8015d02:	6004      	str	r4, [r0, #0]
 8015d04:	e7ec      	b.n	8015ce0 <_free_r+0x24>
 8015d06:	4613      	mov	r3, r2
 8015d08:	685a      	ldr	r2, [r3, #4]
 8015d0a:	b10a      	cbz	r2, 8015d10 <_free_r+0x54>
 8015d0c:	42a2      	cmp	r2, r4
 8015d0e:	d9fa      	bls.n	8015d06 <_free_r+0x4a>
 8015d10:	6819      	ldr	r1, [r3, #0]
 8015d12:	1858      	adds	r0, r3, r1
 8015d14:	42a0      	cmp	r0, r4
 8015d16:	d10b      	bne.n	8015d30 <_free_r+0x74>
 8015d18:	6820      	ldr	r0, [r4, #0]
 8015d1a:	4401      	add	r1, r0
 8015d1c:	1858      	adds	r0, r3, r1
 8015d1e:	4282      	cmp	r2, r0
 8015d20:	6019      	str	r1, [r3, #0]
 8015d22:	d1dd      	bne.n	8015ce0 <_free_r+0x24>
 8015d24:	6810      	ldr	r0, [r2, #0]
 8015d26:	6852      	ldr	r2, [r2, #4]
 8015d28:	605a      	str	r2, [r3, #4]
 8015d2a:	4401      	add	r1, r0
 8015d2c:	6019      	str	r1, [r3, #0]
 8015d2e:	e7d7      	b.n	8015ce0 <_free_r+0x24>
 8015d30:	d902      	bls.n	8015d38 <_free_r+0x7c>
 8015d32:	230c      	movs	r3, #12
 8015d34:	602b      	str	r3, [r5, #0]
 8015d36:	e7d3      	b.n	8015ce0 <_free_r+0x24>
 8015d38:	6820      	ldr	r0, [r4, #0]
 8015d3a:	1821      	adds	r1, r4, r0
 8015d3c:	428a      	cmp	r2, r1
 8015d3e:	bf04      	itt	eq
 8015d40:	6811      	ldreq	r1, [r2, #0]
 8015d42:	6852      	ldreq	r2, [r2, #4]
 8015d44:	6062      	str	r2, [r4, #4]
 8015d46:	bf04      	itt	eq
 8015d48:	1809      	addeq	r1, r1, r0
 8015d4a:	6021      	streq	r1, [r4, #0]
 8015d4c:	605c      	str	r4, [r3, #4]
 8015d4e:	e7c7      	b.n	8015ce0 <_free_r+0x24>
 8015d50:	bd38      	pop	{r3, r4, r5, pc}
 8015d52:	bf00      	nop
 8015d54:	20007da0 	.word	0x20007da0

08015d58 <_malloc_r>:
 8015d58:	b570      	push	{r4, r5, r6, lr}
 8015d5a:	1ccd      	adds	r5, r1, #3
 8015d5c:	f025 0503 	bic.w	r5, r5, #3
 8015d60:	3508      	adds	r5, #8
 8015d62:	2d0c      	cmp	r5, #12
 8015d64:	bf38      	it	cc
 8015d66:	250c      	movcc	r5, #12
 8015d68:	2d00      	cmp	r5, #0
 8015d6a:	4606      	mov	r6, r0
 8015d6c:	db01      	blt.n	8015d72 <_malloc_r+0x1a>
 8015d6e:	42a9      	cmp	r1, r5
 8015d70:	d903      	bls.n	8015d7a <_malloc_r+0x22>
 8015d72:	230c      	movs	r3, #12
 8015d74:	6033      	str	r3, [r6, #0]
 8015d76:	2000      	movs	r0, #0
 8015d78:	bd70      	pop	{r4, r5, r6, pc}
 8015d7a:	f000 ff86 	bl	8016c8a <__malloc_lock>
 8015d7e:	4a21      	ldr	r2, [pc, #132]	; (8015e04 <_malloc_r+0xac>)
 8015d80:	6814      	ldr	r4, [r2, #0]
 8015d82:	4621      	mov	r1, r4
 8015d84:	b991      	cbnz	r1, 8015dac <_malloc_r+0x54>
 8015d86:	4c20      	ldr	r4, [pc, #128]	; (8015e08 <_malloc_r+0xb0>)
 8015d88:	6823      	ldr	r3, [r4, #0]
 8015d8a:	b91b      	cbnz	r3, 8015d94 <_malloc_r+0x3c>
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	f000 fe19 	bl	80169c4 <_sbrk_r>
 8015d92:	6020      	str	r0, [r4, #0]
 8015d94:	4629      	mov	r1, r5
 8015d96:	4630      	mov	r0, r6
 8015d98:	f000 fe14 	bl	80169c4 <_sbrk_r>
 8015d9c:	1c43      	adds	r3, r0, #1
 8015d9e:	d124      	bne.n	8015dea <_malloc_r+0x92>
 8015da0:	230c      	movs	r3, #12
 8015da2:	6033      	str	r3, [r6, #0]
 8015da4:	4630      	mov	r0, r6
 8015da6:	f000 ff71 	bl	8016c8c <__malloc_unlock>
 8015daa:	e7e4      	b.n	8015d76 <_malloc_r+0x1e>
 8015dac:	680b      	ldr	r3, [r1, #0]
 8015dae:	1b5b      	subs	r3, r3, r5
 8015db0:	d418      	bmi.n	8015de4 <_malloc_r+0x8c>
 8015db2:	2b0b      	cmp	r3, #11
 8015db4:	d90f      	bls.n	8015dd6 <_malloc_r+0x7e>
 8015db6:	600b      	str	r3, [r1, #0]
 8015db8:	50cd      	str	r5, [r1, r3]
 8015dba:	18cc      	adds	r4, r1, r3
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	f000 ff65 	bl	8016c8c <__malloc_unlock>
 8015dc2:	f104 000b 	add.w	r0, r4, #11
 8015dc6:	1d23      	adds	r3, r4, #4
 8015dc8:	f020 0007 	bic.w	r0, r0, #7
 8015dcc:	1ac3      	subs	r3, r0, r3
 8015dce:	d0d3      	beq.n	8015d78 <_malloc_r+0x20>
 8015dd0:	425a      	negs	r2, r3
 8015dd2:	50e2      	str	r2, [r4, r3]
 8015dd4:	e7d0      	b.n	8015d78 <_malloc_r+0x20>
 8015dd6:	428c      	cmp	r4, r1
 8015dd8:	684b      	ldr	r3, [r1, #4]
 8015dda:	bf16      	itet	ne
 8015ddc:	6063      	strne	r3, [r4, #4]
 8015dde:	6013      	streq	r3, [r2, #0]
 8015de0:	460c      	movne	r4, r1
 8015de2:	e7eb      	b.n	8015dbc <_malloc_r+0x64>
 8015de4:	460c      	mov	r4, r1
 8015de6:	6849      	ldr	r1, [r1, #4]
 8015de8:	e7cc      	b.n	8015d84 <_malloc_r+0x2c>
 8015dea:	1cc4      	adds	r4, r0, #3
 8015dec:	f024 0403 	bic.w	r4, r4, #3
 8015df0:	42a0      	cmp	r0, r4
 8015df2:	d005      	beq.n	8015e00 <_malloc_r+0xa8>
 8015df4:	1a21      	subs	r1, r4, r0
 8015df6:	4630      	mov	r0, r6
 8015df8:	f000 fde4 	bl	80169c4 <_sbrk_r>
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d0cf      	beq.n	8015da0 <_malloc_r+0x48>
 8015e00:	6025      	str	r5, [r4, #0]
 8015e02:	e7db      	b.n	8015dbc <_malloc_r+0x64>
 8015e04:	20007da0 	.word	0x20007da0
 8015e08:	20007da4 	.word	0x20007da4

08015e0c <__ssputs_r>:
 8015e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e10:	688e      	ldr	r6, [r1, #8]
 8015e12:	429e      	cmp	r6, r3
 8015e14:	4682      	mov	sl, r0
 8015e16:	460c      	mov	r4, r1
 8015e18:	4690      	mov	r8, r2
 8015e1a:	4699      	mov	r9, r3
 8015e1c:	d837      	bhi.n	8015e8e <__ssputs_r+0x82>
 8015e1e:	898a      	ldrh	r2, [r1, #12]
 8015e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015e24:	d031      	beq.n	8015e8a <__ssputs_r+0x7e>
 8015e26:	6825      	ldr	r5, [r4, #0]
 8015e28:	6909      	ldr	r1, [r1, #16]
 8015e2a:	1a6f      	subs	r7, r5, r1
 8015e2c:	6965      	ldr	r5, [r4, #20]
 8015e2e:	2302      	movs	r3, #2
 8015e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8015e38:	f109 0301 	add.w	r3, r9, #1
 8015e3c:	443b      	add	r3, r7
 8015e3e:	429d      	cmp	r5, r3
 8015e40:	bf38      	it	cc
 8015e42:	461d      	movcc	r5, r3
 8015e44:	0553      	lsls	r3, r2, #21
 8015e46:	d530      	bpl.n	8015eaa <__ssputs_r+0x9e>
 8015e48:	4629      	mov	r1, r5
 8015e4a:	f7ff ff85 	bl	8015d58 <_malloc_r>
 8015e4e:	4606      	mov	r6, r0
 8015e50:	b950      	cbnz	r0, 8015e68 <__ssputs_r+0x5c>
 8015e52:	230c      	movs	r3, #12
 8015e54:	f8ca 3000 	str.w	r3, [sl]
 8015e58:	89a3      	ldrh	r3, [r4, #12]
 8015e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e5e:	81a3      	strh	r3, [r4, #12]
 8015e60:	f04f 30ff 	mov.w	r0, #4294967295
 8015e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e68:	463a      	mov	r2, r7
 8015e6a:	6921      	ldr	r1, [r4, #16]
 8015e6c:	f7ff fb0e 	bl	801548c <memcpy>
 8015e70:	89a3      	ldrh	r3, [r4, #12]
 8015e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e7a:	81a3      	strh	r3, [r4, #12]
 8015e7c:	6126      	str	r6, [r4, #16]
 8015e7e:	6165      	str	r5, [r4, #20]
 8015e80:	443e      	add	r6, r7
 8015e82:	1bed      	subs	r5, r5, r7
 8015e84:	6026      	str	r6, [r4, #0]
 8015e86:	60a5      	str	r5, [r4, #8]
 8015e88:	464e      	mov	r6, r9
 8015e8a:	454e      	cmp	r6, r9
 8015e8c:	d900      	bls.n	8015e90 <__ssputs_r+0x84>
 8015e8e:	464e      	mov	r6, r9
 8015e90:	4632      	mov	r2, r6
 8015e92:	4641      	mov	r1, r8
 8015e94:	6820      	ldr	r0, [r4, #0]
 8015e96:	f000 fedf 	bl	8016c58 <memmove>
 8015e9a:	68a3      	ldr	r3, [r4, #8]
 8015e9c:	1b9b      	subs	r3, r3, r6
 8015e9e:	60a3      	str	r3, [r4, #8]
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	441e      	add	r6, r3
 8015ea4:	6026      	str	r6, [r4, #0]
 8015ea6:	2000      	movs	r0, #0
 8015ea8:	e7dc      	b.n	8015e64 <__ssputs_r+0x58>
 8015eaa:	462a      	mov	r2, r5
 8015eac:	f000 feef 	bl	8016c8e <_realloc_r>
 8015eb0:	4606      	mov	r6, r0
 8015eb2:	2800      	cmp	r0, #0
 8015eb4:	d1e2      	bne.n	8015e7c <__ssputs_r+0x70>
 8015eb6:	6921      	ldr	r1, [r4, #16]
 8015eb8:	4650      	mov	r0, sl
 8015eba:	f7ff feff 	bl	8015cbc <_free_r>
 8015ebe:	e7c8      	b.n	8015e52 <__ssputs_r+0x46>

08015ec0 <_svfiprintf_r>:
 8015ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec4:	461d      	mov	r5, r3
 8015ec6:	898b      	ldrh	r3, [r1, #12]
 8015ec8:	061f      	lsls	r7, r3, #24
 8015eca:	b09d      	sub	sp, #116	; 0x74
 8015ecc:	4680      	mov	r8, r0
 8015ece:	460c      	mov	r4, r1
 8015ed0:	4616      	mov	r6, r2
 8015ed2:	d50f      	bpl.n	8015ef4 <_svfiprintf_r+0x34>
 8015ed4:	690b      	ldr	r3, [r1, #16]
 8015ed6:	b96b      	cbnz	r3, 8015ef4 <_svfiprintf_r+0x34>
 8015ed8:	2140      	movs	r1, #64	; 0x40
 8015eda:	f7ff ff3d 	bl	8015d58 <_malloc_r>
 8015ede:	6020      	str	r0, [r4, #0]
 8015ee0:	6120      	str	r0, [r4, #16]
 8015ee2:	b928      	cbnz	r0, 8015ef0 <_svfiprintf_r+0x30>
 8015ee4:	230c      	movs	r3, #12
 8015ee6:	f8c8 3000 	str.w	r3, [r8]
 8015eea:	f04f 30ff 	mov.w	r0, #4294967295
 8015eee:	e0c8      	b.n	8016082 <_svfiprintf_r+0x1c2>
 8015ef0:	2340      	movs	r3, #64	; 0x40
 8015ef2:	6163      	str	r3, [r4, #20]
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8015ef8:	2320      	movs	r3, #32
 8015efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015efe:	2330      	movs	r3, #48	; 0x30
 8015f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f04:	9503      	str	r5, [sp, #12]
 8015f06:	f04f 0b01 	mov.w	fp, #1
 8015f0a:	4637      	mov	r7, r6
 8015f0c:	463d      	mov	r5, r7
 8015f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015f12:	b10b      	cbz	r3, 8015f18 <_svfiprintf_r+0x58>
 8015f14:	2b25      	cmp	r3, #37	; 0x25
 8015f16:	d13e      	bne.n	8015f96 <_svfiprintf_r+0xd6>
 8015f18:	ebb7 0a06 	subs.w	sl, r7, r6
 8015f1c:	d00b      	beq.n	8015f36 <_svfiprintf_r+0x76>
 8015f1e:	4653      	mov	r3, sl
 8015f20:	4632      	mov	r2, r6
 8015f22:	4621      	mov	r1, r4
 8015f24:	4640      	mov	r0, r8
 8015f26:	f7ff ff71 	bl	8015e0c <__ssputs_r>
 8015f2a:	3001      	adds	r0, #1
 8015f2c:	f000 80a4 	beq.w	8016078 <_svfiprintf_r+0x1b8>
 8015f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f32:	4453      	add	r3, sl
 8015f34:	9309      	str	r3, [sp, #36]	; 0x24
 8015f36:	783b      	ldrb	r3, [r7, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	f000 809d 	beq.w	8016078 <_svfiprintf_r+0x1b8>
 8015f3e:	2300      	movs	r3, #0
 8015f40:	f04f 32ff 	mov.w	r2, #4294967295
 8015f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f48:	9304      	str	r3, [sp, #16]
 8015f4a:	9307      	str	r3, [sp, #28]
 8015f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f50:	931a      	str	r3, [sp, #104]	; 0x68
 8015f52:	462f      	mov	r7, r5
 8015f54:	2205      	movs	r2, #5
 8015f56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015f5a:	4850      	ldr	r0, [pc, #320]	; (801609c <_svfiprintf_r+0x1dc>)
 8015f5c:	f7ea f958 	bl	8000210 <memchr>
 8015f60:	9b04      	ldr	r3, [sp, #16]
 8015f62:	b9d0      	cbnz	r0, 8015f9a <_svfiprintf_r+0xda>
 8015f64:	06d9      	lsls	r1, r3, #27
 8015f66:	bf44      	itt	mi
 8015f68:	2220      	movmi	r2, #32
 8015f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f6e:	071a      	lsls	r2, r3, #28
 8015f70:	bf44      	itt	mi
 8015f72:	222b      	movmi	r2, #43	; 0x2b
 8015f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f78:	782a      	ldrb	r2, [r5, #0]
 8015f7a:	2a2a      	cmp	r2, #42	; 0x2a
 8015f7c:	d015      	beq.n	8015faa <_svfiprintf_r+0xea>
 8015f7e:	9a07      	ldr	r2, [sp, #28]
 8015f80:	462f      	mov	r7, r5
 8015f82:	2000      	movs	r0, #0
 8015f84:	250a      	movs	r5, #10
 8015f86:	4639      	mov	r1, r7
 8015f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f8c:	3b30      	subs	r3, #48	; 0x30
 8015f8e:	2b09      	cmp	r3, #9
 8015f90:	d94d      	bls.n	801602e <_svfiprintf_r+0x16e>
 8015f92:	b1b8      	cbz	r0, 8015fc4 <_svfiprintf_r+0x104>
 8015f94:	e00f      	b.n	8015fb6 <_svfiprintf_r+0xf6>
 8015f96:	462f      	mov	r7, r5
 8015f98:	e7b8      	b.n	8015f0c <_svfiprintf_r+0x4c>
 8015f9a:	4a40      	ldr	r2, [pc, #256]	; (801609c <_svfiprintf_r+0x1dc>)
 8015f9c:	1a80      	subs	r0, r0, r2
 8015f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8015fa2:	4318      	orrs	r0, r3
 8015fa4:	9004      	str	r0, [sp, #16]
 8015fa6:	463d      	mov	r5, r7
 8015fa8:	e7d3      	b.n	8015f52 <_svfiprintf_r+0x92>
 8015faa:	9a03      	ldr	r2, [sp, #12]
 8015fac:	1d11      	adds	r1, r2, #4
 8015fae:	6812      	ldr	r2, [r2, #0]
 8015fb0:	9103      	str	r1, [sp, #12]
 8015fb2:	2a00      	cmp	r2, #0
 8015fb4:	db01      	blt.n	8015fba <_svfiprintf_r+0xfa>
 8015fb6:	9207      	str	r2, [sp, #28]
 8015fb8:	e004      	b.n	8015fc4 <_svfiprintf_r+0x104>
 8015fba:	4252      	negs	r2, r2
 8015fbc:	f043 0302 	orr.w	r3, r3, #2
 8015fc0:	9207      	str	r2, [sp, #28]
 8015fc2:	9304      	str	r3, [sp, #16]
 8015fc4:	783b      	ldrb	r3, [r7, #0]
 8015fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8015fc8:	d10c      	bne.n	8015fe4 <_svfiprintf_r+0x124>
 8015fca:	787b      	ldrb	r3, [r7, #1]
 8015fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8015fce:	d133      	bne.n	8016038 <_svfiprintf_r+0x178>
 8015fd0:	9b03      	ldr	r3, [sp, #12]
 8015fd2:	1d1a      	adds	r2, r3, #4
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	9203      	str	r2, [sp, #12]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	bfb8      	it	lt
 8015fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fe0:	3702      	adds	r7, #2
 8015fe2:	9305      	str	r3, [sp, #20]
 8015fe4:	4d2e      	ldr	r5, [pc, #184]	; (80160a0 <_svfiprintf_r+0x1e0>)
 8015fe6:	7839      	ldrb	r1, [r7, #0]
 8015fe8:	2203      	movs	r2, #3
 8015fea:	4628      	mov	r0, r5
 8015fec:	f7ea f910 	bl	8000210 <memchr>
 8015ff0:	b138      	cbz	r0, 8016002 <_svfiprintf_r+0x142>
 8015ff2:	2340      	movs	r3, #64	; 0x40
 8015ff4:	1b40      	subs	r0, r0, r5
 8015ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8015ffa:	9b04      	ldr	r3, [sp, #16]
 8015ffc:	4303      	orrs	r3, r0
 8015ffe:	3701      	adds	r7, #1
 8016000:	9304      	str	r3, [sp, #16]
 8016002:	7839      	ldrb	r1, [r7, #0]
 8016004:	4827      	ldr	r0, [pc, #156]	; (80160a4 <_svfiprintf_r+0x1e4>)
 8016006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801600a:	2206      	movs	r2, #6
 801600c:	1c7e      	adds	r6, r7, #1
 801600e:	f7ea f8ff 	bl	8000210 <memchr>
 8016012:	2800      	cmp	r0, #0
 8016014:	d038      	beq.n	8016088 <_svfiprintf_r+0x1c8>
 8016016:	4b24      	ldr	r3, [pc, #144]	; (80160a8 <_svfiprintf_r+0x1e8>)
 8016018:	bb13      	cbnz	r3, 8016060 <_svfiprintf_r+0x1a0>
 801601a:	9b03      	ldr	r3, [sp, #12]
 801601c:	3307      	adds	r3, #7
 801601e:	f023 0307 	bic.w	r3, r3, #7
 8016022:	3308      	adds	r3, #8
 8016024:	9303      	str	r3, [sp, #12]
 8016026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016028:	444b      	add	r3, r9
 801602a:	9309      	str	r3, [sp, #36]	; 0x24
 801602c:	e76d      	b.n	8015f0a <_svfiprintf_r+0x4a>
 801602e:	fb05 3202 	mla	r2, r5, r2, r3
 8016032:	2001      	movs	r0, #1
 8016034:	460f      	mov	r7, r1
 8016036:	e7a6      	b.n	8015f86 <_svfiprintf_r+0xc6>
 8016038:	2300      	movs	r3, #0
 801603a:	3701      	adds	r7, #1
 801603c:	9305      	str	r3, [sp, #20]
 801603e:	4619      	mov	r1, r3
 8016040:	250a      	movs	r5, #10
 8016042:	4638      	mov	r0, r7
 8016044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016048:	3a30      	subs	r2, #48	; 0x30
 801604a:	2a09      	cmp	r2, #9
 801604c:	d903      	bls.n	8016056 <_svfiprintf_r+0x196>
 801604e:	2b00      	cmp	r3, #0
 8016050:	d0c8      	beq.n	8015fe4 <_svfiprintf_r+0x124>
 8016052:	9105      	str	r1, [sp, #20]
 8016054:	e7c6      	b.n	8015fe4 <_svfiprintf_r+0x124>
 8016056:	fb05 2101 	mla	r1, r5, r1, r2
 801605a:	2301      	movs	r3, #1
 801605c:	4607      	mov	r7, r0
 801605e:	e7f0      	b.n	8016042 <_svfiprintf_r+0x182>
 8016060:	ab03      	add	r3, sp, #12
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	4622      	mov	r2, r4
 8016066:	4b11      	ldr	r3, [pc, #68]	; (80160ac <_svfiprintf_r+0x1ec>)
 8016068:	a904      	add	r1, sp, #16
 801606a:	4640      	mov	r0, r8
 801606c:	f7fb ffbc 	bl	8011fe8 <_printf_float>
 8016070:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016074:	4681      	mov	r9, r0
 8016076:	d1d6      	bne.n	8016026 <_svfiprintf_r+0x166>
 8016078:	89a3      	ldrh	r3, [r4, #12]
 801607a:	065b      	lsls	r3, r3, #25
 801607c:	f53f af35 	bmi.w	8015eea <_svfiprintf_r+0x2a>
 8016080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016082:	b01d      	add	sp, #116	; 0x74
 8016084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016088:	ab03      	add	r3, sp, #12
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	4622      	mov	r2, r4
 801608e:	4b07      	ldr	r3, [pc, #28]	; (80160ac <_svfiprintf_r+0x1ec>)
 8016090:	a904      	add	r1, sp, #16
 8016092:	4640      	mov	r0, r8
 8016094:	f7fc fa5e 	bl	8012554 <_printf_i>
 8016098:	e7ea      	b.n	8016070 <_svfiprintf_r+0x1b0>
 801609a:	bf00      	nop
 801609c:	0801771c 	.word	0x0801771c
 80160a0:	08017722 	.word	0x08017722
 80160a4:	08017726 	.word	0x08017726
 80160a8:	08011fe9 	.word	0x08011fe9
 80160ac:	08015e0d 	.word	0x08015e0d

080160b0 <_sungetc_r>:
 80160b0:	b538      	push	{r3, r4, r5, lr}
 80160b2:	1c4b      	adds	r3, r1, #1
 80160b4:	4614      	mov	r4, r2
 80160b6:	d103      	bne.n	80160c0 <_sungetc_r+0x10>
 80160b8:	f04f 35ff 	mov.w	r5, #4294967295
 80160bc:	4628      	mov	r0, r5
 80160be:	bd38      	pop	{r3, r4, r5, pc}
 80160c0:	8993      	ldrh	r3, [r2, #12]
 80160c2:	f023 0320 	bic.w	r3, r3, #32
 80160c6:	8193      	strh	r3, [r2, #12]
 80160c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80160ca:	6852      	ldr	r2, [r2, #4]
 80160cc:	b2cd      	uxtb	r5, r1
 80160ce:	b18b      	cbz	r3, 80160f4 <_sungetc_r+0x44>
 80160d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80160d2:	4293      	cmp	r3, r2
 80160d4:	dd08      	ble.n	80160e8 <_sungetc_r+0x38>
 80160d6:	6823      	ldr	r3, [r4, #0]
 80160d8:	1e5a      	subs	r2, r3, #1
 80160da:	6022      	str	r2, [r4, #0]
 80160dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80160e0:	6863      	ldr	r3, [r4, #4]
 80160e2:	3301      	adds	r3, #1
 80160e4:	6063      	str	r3, [r4, #4]
 80160e6:	e7e9      	b.n	80160bc <_sungetc_r+0xc>
 80160e8:	4621      	mov	r1, r4
 80160ea:	f000 fd4b 	bl	8016b84 <__submore>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d0f1      	beq.n	80160d6 <_sungetc_r+0x26>
 80160f2:	e7e1      	b.n	80160b8 <_sungetc_r+0x8>
 80160f4:	6921      	ldr	r1, [r4, #16]
 80160f6:	6823      	ldr	r3, [r4, #0]
 80160f8:	b151      	cbz	r1, 8016110 <_sungetc_r+0x60>
 80160fa:	4299      	cmp	r1, r3
 80160fc:	d208      	bcs.n	8016110 <_sungetc_r+0x60>
 80160fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016102:	42a9      	cmp	r1, r5
 8016104:	d104      	bne.n	8016110 <_sungetc_r+0x60>
 8016106:	3b01      	subs	r3, #1
 8016108:	3201      	adds	r2, #1
 801610a:	6023      	str	r3, [r4, #0]
 801610c:	6062      	str	r2, [r4, #4]
 801610e:	e7d5      	b.n	80160bc <_sungetc_r+0xc>
 8016110:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016118:	6363      	str	r3, [r4, #52]	; 0x34
 801611a:	2303      	movs	r3, #3
 801611c:	63a3      	str	r3, [r4, #56]	; 0x38
 801611e:	4623      	mov	r3, r4
 8016120:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016124:	6023      	str	r3, [r4, #0]
 8016126:	2301      	movs	r3, #1
 8016128:	e7dc      	b.n	80160e4 <_sungetc_r+0x34>

0801612a <__ssrefill_r>:
 801612a:	b510      	push	{r4, lr}
 801612c:	460c      	mov	r4, r1
 801612e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016130:	b169      	cbz	r1, 801614e <__ssrefill_r+0x24>
 8016132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016136:	4299      	cmp	r1, r3
 8016138:	d001      	beq.n	801613e <__ssrefill_r+0x14>
 801613a:	f7ff fdbf 	bl	8015cbc <_free_r>
 801613e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016140:	6063      	str	r3, [r4, #4]
 8016142:	2000      	movs	r0, #0
 8016144:	6360      	str	r0, [r4, #52]	; 0x34
 8016146:	b113      	cbz	r3, 801614e <__ssrefill_r+0x24>
 8016148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801614a:	6023      	str	r3, [r4, #0]
 801614c:	bd10      	pop	{r4, pc}
 801614e:	6923      	ldr	r3, [r4, #16]
 8016150:	6023      	str	r3, [r4, #0]
 8016152:	2300      	movs	r3, #0
 8016154:	6063      	str	r3, [r4, #4]
 8016156:	89a3      	ldrh	r3, [r4, #12]
 8016158:	f043 0320 	orr.w	r3, r3, #32
 801615c:	81a3      	strh	r3, [r4, #12]
 801615e:	f04f 30ff 	mov.w	r0, #4294967295
 8016162:	e7f3      	b.n	801614c <__ssrefill_r+0x22>

08016164 <__ssvfiscanf_r>:
 8016164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016168:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801616c:	460c      	mov	r4, r1
 801616e:	2100      	movs	r1, #0
 8016170:	9144      	str	r1, [sp, #272]	; 0x110
 8016172:	9145      	str	r1, [sp, #276]	; 0x114
 8016174:	499f      	ldr	r1, [pc, #636]	; (80163f4 <__ssvfiscanf_r+0x290>)
 8016176:	91a0      	str	r1, [sp, #640]	; 0x280
 8016178:	f10d 0804 	add.w	r8, sp, #4
 801617c:	499e      	ldr	r1, [pc, #632]	; (80163f8 <__ssvfiscanf_r+0x294>)
 801617e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80163fc <__ssvfiscanf_r+0x298>
 8016182:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016186:	4606      	mov	r6, r0
 8016188:	4692      	mov	sl, r2
 801618a:	91a1      	str	r1, [sp, #644]	; 0x284
 801618c:	9300      	str	r3, [sp, #0]
 801618e:	270a      	movs	r7, #10
 8016190:	f89a 3000 	ldrb.w	r3, [sl]
 8016194:	2b00      	cmp	r3, #0
 8016196:	f000 812a 	beq.w	80163ee <__ssvfiscanf_r+0x28a>
 801619a:	4655      	mov	r5, sl
 801619c:	f7ff f8c8 	bl	8015330 <__locale_ctype_ptr>
 80161a0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80161a4:	4458      	add	r0, fp
 80161a6:	7843      	ldrb	r3, [r0, #1]
 80161a8:	f013 0308 	ands.w	r3, r3, #8
 80161ac:	d01c      	beq.n	80161e8 <__ssvfiscanf_r+0x84>
 80161ae:	6863      	ldr	r3, [r4, #4]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	dd12      	ble.n	80161da <__ssvfiscanf_r+0x76>
 80161b4:	f7ff f8bc 	bl	8015330 <__locale_ctype_ptr>
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	781a      	ldrb	r2, [r3, #0]
 80161bc:	4410      	add	r0, r2
 80161be:	7842      	ldrb	r2, [r0, #1]
 80161c0:	0712      	lsls	r2, r2, #28
 80161c2:	d401      	bmi.n	80161c8 <__ssvfiscanf_r+0x64>
 80161c4:	46aa      	mov	sl, r5
 80161c6:	e7e3      	b.n	8016190 <__ssvfiscanf_r+0x2c>
 80161c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80161ca:	3201      	adds	r2, #1
 80161cc:	9245      	str	r2, [sp, #276]	; 0x114
 80161ce:	6862      	ldr	r2, [r4, #4]
 80161d0:	3301      	adds	r3, #1
 80161d2:	3a01      	subs	r2, #1
 80161d4:	6062      	str	r2, [r4, #4]
 80161d6:	6023      	str	r3, [r4, #0]
 80161d8:	e7e9      	b.n	80161ae <__ssvfiscanf_r+0x4a>
 80161da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80161dc:	4621      	mov	r1, r4
 80161de:	4630      	mov	r0, r6
 80161e0:	4798      	blx	r3
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d0e6      	beq.n	80161b4 <__ssvfiscanf_r+0x50>
 80161e6:	e7ed      	b.n	80161c4 <__ssvfiscanf_r+0x60>
 80161e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80161ec:	f040 8082 	bne.w	80162f4 <__ssvfiscanf_r+0x190>
 80161f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80161f2:	9341      	str	r3, [sp, #260]	; 0x104
 80161f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80161f8:	2b2a      	cmp	r3, #42	; 0x2a
 80161fa:	d103      	bne.n	8016204 <__ssvfiscanf_r+0xa0>
 80161fc:	2310      	movs	r3, #16
 80161fe:	9341      	str	r3, [sp, #260]	; 0x104
 8016200:	f10a 0502 	add.w	r5, sl, #2
 8016204:	46aa      	mov	sl, r5
 8016206:	f815 1b01 	ldrb.w	r1, [r5], #1
 801620a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801620e:	2a09      	cmp	r2, #9
 8016210:	d922      	bls.n	8016258 <__ssvfiscanf_r+0xf4>
 8016212:	2203      	movs	r2, #3
 8016214:	4879      	ldr	r0, [pc, #484]	; (80163fc <__ssvfiscanf_r+0x298>)
 8016216:	f7e9 fffb 	bl	8000210 <memchr>
 801621a:	b138      	cbz	r0, 801622c <__ssvfiscanf_r+0xc8>
 801621c:	eba0 0309 	sub.w	r3, r0, r9
 8016220:	2001      	movs	r0, #1
 8016222:	4098      	lsls	r0, r3
 8016224:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016226:	4318      	orrs	r0, r3
 8016228:	9041      	str	r0, [sp, #260]	; 0x104
 801622a:	46aa      	mov	sl, r5
 801622c:	f89a 3000 	ldrb.w	r3, [sl]
 8016230:	2b67      	cmp	r3, #103	; 0x67
 8016232:	f10a 0501 	add.w	r5, sl, #1
 8016236:	d82b      	bhi.n	8016290 <__ssvfiscanf_r+0x12c>
 8016238:	2b65      	cmp	r3, #101	; 0x65
 801623a:	f080 809f 	bcs.w	801637c <__ssvfiscanf_r+0x218>
 801623e:	2b47      	cmp	r3, #71	; 0x47
 8016240:	d810      	bhi.n	8016264 <__ssvfiscanf_r+0x100>
 8016242:	2b45      	cmp	r3, #69	; 0x45
 8016244:	f080 809a 	bcs.w	801637c <__ssvfiscanf_r+0x218>
 8016248:	2b00      	cmp	r3, #0
 801624a:	d06c      	beq.n	8016326 <__ssvfiscanf_r+0x1c2>
 801624c:	2b25      	cmp	r3, #37	; 0x25
 801624e:	d051      	beq.n	80162f4 <__ssvfiscanf_r+0x190>
 8016250:	2303      	movs	r3, #3
 8016252:	9347      	str	r3, [sp, #284]	; 0x11c
 8016254:	9742      	str	r7, [sp, #264]	; 0x108
 8016256:	e027      	b.n	80162a8 <__ssvfiscanf_r+0x144>
 8016258:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801625a:	fb07 1303 	mla	r3, r7, r3, r1
 801625e:	3b30      	subs	r3, #48	; 0x30
 8016260:	9343      	str	r3, [sp, #268]	; 0x10c
 8016262:	e7cf      	b.n	8016204 <__ssvfiscanf_r+0xa0>
 8016264:	2b5b      	cmp	r3, #91	; 0x5b
 8016266:	d06a      	beq.n	801633e <__ssvfiscanf_r+0x1da>
 8016268:	d80c      	bhi.n	8016284 <__ssvfiscanf_r+0x120>
 801626a:	2b58      	cmp	r3, #88	; 0x58
 801626c:	d1f0      	bne.n	8016250 <__ssvfiscanf_r+0xec>
 801626e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016274:	9241      	str	r2, [sp, #260]	; 0x104
 8016276:	2210      	movs	r2, #16
 8016278:	9242      	str	r2, [sp, #264]	; 0x108
 801627a:	2b6e      	cmp	r3, #110	; 0x6e
 801627c:	bf8c      	ite	hi
 801627e:	2304      	movhi	r3, #4
 8016280:	2303      	movls	r3, #3
 8016282:	e010      	b.n	80162a6 <__ssvfiscanf_r+0x142>
 8016284:	2b63      	cmp	r3, #99	; 0x63
 8016286:	d065      	beq.n	8016354 <__ssvfiscanf_r+0x1f0>
 8016288:	2b64      	cmp	r3, #100	; 0x64
 801628a:	d1e1      	bne.n	8016250 <__ssvfiscanf_r+0xec>
 801628c:	9742      	str	r7, [sp, #264]	; 0x108
 801628e:	e7f4      	b.n	801627a <__ssvfiscanf_r+0x116>
 8016290:	2b70      	cmp	r3, #112	; 0x70
 8016292:	d04b      	beq.n	801632c <__ssvfiscanf_r+0x1c8>
 8016294:	d826      	bhi.n	80162e4 <__ssvfiscanf_r+0x180>
 8016296:	2b6e      	cmp	r3, #110	; 0x6e
 8016298:	d062      	beq.n	8016360 <__ssvfiscanf_r+0x1fc>
 801629a:	d84c      	bhi.n	8016336 <__ssvfiscanf_r+0x1d2>
 801629c:	2b69      	cmp	r3, #105	; 0x69
 801629e:	d1d7      	bne.n	8016250 <__ssvfiscanf_r+0xec>
 80162a0:	2300      	movs	r3, #0
 80162a2:	9342      	str	r3, [sp, #264]	; 0x108
 80162a4:	2303      	movs	r3, #3
 80162a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80162a8:	6863      	ldr	r3, [r4, #4]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	dd68      	ble.n	8016380 <__ssvfiscanf_r+0x21c>
 80162ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80162b0:	0659      	lsls	r1, r3, #25
 80162b2:	d407      	bmi.n	80162c4 <__ssvfiscanf_r+0x160>
 80162b4:	f7ff f83c 	bl	8015330 <__locale_ctype_ptr>
 80162b8:	6823      	ldr	r3, [r4, #0]
 80162ba:	781a      	ldrb	r2, [r3, #0]
 80162bc:	4410      	add	r0, r2
 80162be:	7842      	ldrb	r2, [r0, #1]
 80162c0:	0712      	lsls	r2, r2, #28
 80162c2:	d464      	bmi.n	801638e <__ssvfiscanf_r+0x22a>
 80162c4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80162c6:	2b02      	cmp	r3, #2
 80162c8:	dc73      	bgt.n	80163b2 <__ssvfiscanf_r+0x24e>
 80162ca:	466b      	mov	r3, sp
 80162cc:	4622      	mov	r2, r4
 80162ce:	a941      	add	r1, sp, #260	; 0x104
 80162d0:	4630      	mov	r0, r6
 80162d2:	f000 f9d7 	bl	8016684 <_scanf_chars>
 80162d6:	2801      	cmp	r0, #1
 80162d8:	f000 8089 	beq.w	80163ee <__ssvfiscanf_r+0x28a>
 80162dc:	2802      	cmp	r0, #2
 80162de:	f47f af71 	bne.w	80161c4 <__ssvfiscanf_r+0x60>
 80162e2:	e01d      	b.n	8016320 <__ssvfiscanf_r+0x1bc>
 80162e4:	2b75      	cmp	r3, #117	; 0x75
 80162e6:	d0d1      	beq.n	801628c <__ssvfiscanf_r+0x128>
 80162e8:	2b78      	cmp	r3, #120	; 0x78
 80162ea:	d0c0      	beq.n	801626e <__ssvfiscanf_r+0x10a>
 80162ec:	2b73      	cmp	r3, #115	; 0x73
 80162ee:	d1af      	bne.n	8016250 <__ssvfiscanf_r+0xec>
 80162f0:	2302      	movs	r3, #2
 80162f2:	e7d8      	b.n	80162a6 <__ssvfiscanf_r+0x142>
 80162f4:	6863      	ldr	r3, [r4, #4]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	dd0c      	ble.n	8016314 <__ssvfiscanf_r+0x1b0>
 80162fa:	6823      	ldr	r3, [r4, #0]
 80162fc:	781a      	ldrb	r2, [r3, #0]
 80162fe:	455a      	cmp	r2, fp
 8016300:	d175      	bne.n	80163ee <__ssvfiscanf_r+0x28a>
 8016302:	3301      	adds	r3, #1
 8016304:	6862      	ldr	r2, [r4, #4]
 8016306:	6023      	str	r3, [r4, #0]
 8016308:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801630a:	3a01      	subs	r2, #1
 801630c:	3301      	adds	r3, #1
 801630e:	6062      	str	r2, [r4, #4]
 8016310:	9345      	str	r3, [sp, #276]	; 0x114
 8016312:	e757      	b.n	80161c4 <__ssvfiscanf_r+0x60>
 8016314:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016316:	4621      	mov	r1, r4
 8016318:	4630      	mov	r0, r6
 801631a:	4798      	blx	r3
 801631c:	2800      	cmp	r0, #0
 801631e:	d0ec      	beq.n	80162fa <__ssvfiscanf_r+0x196>
 8016320:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016322:	2800      	cmp	r0, #0
 8016324:	d159      	bne.n	80163da <__ssvfiscanf_r+0x276>
 8016326:	f04f 30ff 	mov.w	r0, #4294967295
 801632a:	e05c      	b.n	80163e6 <__ssvfiscanf_r+0x282>
 801632c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801632e:	f042 0220 	orr.w	r2, r2, #32
 8016332:	9241      	str	r2, [sp, #260]	; 0x104
 8016334:	e79b      	b.n	801626e <__ssvfiscanf_r+0x10a>
 8016336:	2308      	movs	r3, #8
 8016338:	9342      	str	r3, [sp, #264]	; 0x108
 801633a:	2304      	movs	r3, #4
 801633c:	e7b3      	b.n	80162a6 <__ssvfiscanf_r+0x142>
 801633e:	4629      	mov	r1, r5
 8016340:	4640      	mov	r0, r8
 8016342:	f000 fb4f 	bl	80169e4 <__sccl>
 8016346:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801634c:	9341      	str	r3, [sp, #260]	; 0x104
 801634e:	4605      	mov	r5, r0
 8016350:	2301      	movs	r3, #1
 8016352:	e7a8      	b.n	80162a6 <__ssvfiscanf_r+0x142>
 8016354:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801635a:	9341      	str	r3, [sp, #260]	; 0x104
 801635c:	2300      	movs	r3, #0
 801635e:	e7a2      	b.n	80162a6 <__ssvfiscanf_r+0x142>
 8016360:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016362:	06c3      	lsls	r3, r0, #27
 8016364:	f53f af2e 	bmi.w	80161c4 <__ssvfiscanf_r+0x60>
 8016368:	9b00      	ldr	r3, [sp, #0]
 801636a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801636c:	1d19      	adds	r1, r3, #4
 801636e:	9100      	str	r1, [sp, #0]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	07c0      	lsls	r0, r0, #31
 8016374:	bf4c      	ite	mi
 8016376:	801a      	strhmi	r2, [r3, #0]
 8016378:	601a      	strpl	r2, [r3, #0]
 801637a:	e723      	b.n	80161c4 <__ssvfiscanf_r+0x60>
 801637c:	2305      	movs	r3, #5
 801637e:	e792      	b.n	80162a6 <__ssvfiscanf_r+0x142>
 8016380:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016382:	4621      	mov	r1, r4
 8016384:	4630      	mov	r0, r6
 8016386:	4798      	blx	r3
 8016388:	2800      	cmp	r0, #0
 801638a:	d090      	beq.n	80162ae <__ssvfiscanf_r+0x14a>
 801638c:	e7c8      	b.n	8016320 <__ssvfiscanf_r+0x1bc>
 801638e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016390:	3201      	adds	r2, #1
 8016392:	9245      	str	r2, [sp, #276]	; 0x114
 8016394:	6862      	ldr	r2, [r4, #4]
 8016396:	3a01      	subs	r2, #1
 8016398:	2a00      	cmp	r2, #0
 801639a:	6062      	str	r2, [r4, #4]
 801639c:	dd02      	ble.n	80163a4 <__ssvfiscanf_r+0x240>
 801639e:	3301      	adds	r3, #1
 80163a0:	6023      	str	r3, [r4, #0]
 80163a2:	e787      	b.n	80162b4 <__ssvfiscanf_r+0x150>
 80163a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80163a6:	4621      	mov	r1, r4
 80163a8:	4630      	mov	r0, r6
 80163aa:	4798      	blx	r3
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d081      	beq.n	80162b4 <__ssvfiscanf_r+0x150>
 80163b0:	e7b6      	b.n	8016320 <__ssvfiscanf_r+0x1bc>
 80163b2:	2b04      	cmp	r3, #4
 80163b4:	dc06      	bgt.n	80163c4 <__ssvfiscanf_r+0x260>
 80163b6:	466b      	mov	r3, sp
 80163b8:	4622      	mov	r2, r4
 80163ba:	a941      	add	r1, sp, #260	; 0x104
 80163bc:	4630      	mov	r0, r6
 80163be:	f000 f9c5 	bl	801674c <_scanf_i>
 80163c2:	e788      	b.n	80162d6 <__ssvfiscanf_r+0x172>
 80163c4:	4b0e      	ldr	r3, [pc, #56]	; (8016400 <__ssvfiscanf_r+0x29c>)
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f43f aefc 	beq.w	80161c4 <__ssvfiscanf_r+0x60>
 80163cc:	466b      	mov	r3, sp
 80163ce:	4622      	mov	r2, r4
 80163d0:	a941      	add	r1, sp, #260	; 0x104
 80163d2:	4630      	mov	r0, r6
 80163d4:	f7fc f9d0 	bl	8012778 <_scanf_float>
 80163d8:	e77d      	b.n	80162d6 <__ssvfiscanf_r+0x172>
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80163e0:	bf18      	it	ne
 80163e2:	f04f 30ff 	movne.w	r0, #4294967295
 80163e6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80163ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80163f0:	e7f9      	b.n	80163e6 <__ssvfiscanf_r+0x282>
 80163f2:	bf00      	nop
 80163f4:	080160b1 	.word	0x080160b1
 80163f8:	0801612b 	.word	0x0801612b
 80163fc:	08017722 	.word	0x08017722
 8016400:	08012779 	.word	0x08012779

08016404 <__sfputc_r>:
 8016404:	6893      	ldr	r3, [r2, #8]
 8016406:	3b01      	subs	r3, #1
 8016408:	2b00      	cmp	r3, #0
 801640a:	b410      	push	{r4}
 801640c:	6093      	str	r3, [r2, #8]
 801640e:	da08      	bge.n	8016422 <__sfputc_r+0x1e>
 8016410:	6994      	ldr	r4, [r2, #24]
 8016412:	42a3      	cmp	r3, r4
 8016414:	db01      	blt.n	801641a <__sfputc_r+0x16>
 8016416:	290a      	cmp	r1, #10
 8016418:	d103      	bne.n	8016422 <__sfputc_r+0x1e>
 801641a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801641e:	f7fd bbbd 	b.w	8013b9c <__swbuf_r>
 8016422:	6813      	ldr	r3, [r2, #0]
 8016424:	1c58      	adds	r0, r3, #1
 8016426:	6010      	str	r0, [r2, #0]
 8016428:	7019      	strb	r1, [r3, #0]
 801642a:	4608      	mov	r0, r1
 801642c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016430:	4770      	bx	lr

08016432 <__sfputs_r>:
 8016432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016434:	4606      	mov	r6, r0
 8016436:	460f      	mov	r7, r1
 8016438:	4614      	mov	r4, r2
 801643a:	18d5      	adds	r5, r2, r3
 801643c:	42ac      	cmp	r4, r5
 801643e:	d101      	bne.n	8016444 <__sfputs_r+0x12>
 8016440:	2000      	movs	r0, #0
 8016442:	e007      	b.n	8016454 <__sfputs_r+0x22>
 8016444:	463a      	mov	r2, r7
 8016446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801644a:	4630      	mov	r0, r6
 801644c:	f7ff ffda 	bl	8016404 <__sfputc_r>
 8016450:	1c43      	adds	r3, r0, #1
 8016452:	d1f3      	bne.n	801643c <__sfputs_r+0xa>
 8016454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016458 <_vfiprintf_r>:
 8016458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645c:	460c      	mov	r4, r1
 801645e:	b09d      	sub	sp, #116	; 0x74
 8016460:	4617      	mov	r7, r2
 8016462:	461d      	mov	r5, r3
 8016464:	4606      	mov	r6, r0
 8016466:	b118      	cbz	r0, 8016470 <_vfiprintf_r+0x18>
 8016468:	6983      	ldr	r3, [r0, #24]
 801646a:	b90b      	cbnz	r3, 8016470 <_vfiprintf_r+0x18>
 801646c:	f7fe fbac 	bl	8014bc8 <__sinit>
 8016470:	4b7c      	ldr	r3, [pc, #496]	; (8016664 <_vfiprintf_r+0x20c>)
 8016472:	429c      	cmp	r4, r3
 8016474:	d158      	bne.n	8016528 <_vfiprintf_r+0xd0>
 8016476:	6874      	ldr	r4, [r6, #4]
 8016478:	89a3      	ldrh	r3, [r4, #12]
 801647a:	0718      	lsls	r0, r3, #28
 801647c:	d55e      	bpl.n	801653c <_vfiprintf_r+0xe4>
 801647e:	6923      	ldr	r3, [r4, #16]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d05b      	beq.n	801653c <_vfiprintf_r+0xe4>
 8016484:	2300      	movs	r3, #0
 8016486:	9309      	str	r3, [sp, #36]	; 0x24
 8016488:	2320      	movs	r3, #32
 801648a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801648e:	2330      	movs	r3, #48	; 0x30
 8016490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016494:	9503      	str	r5, [sp, #12]
 8016496:	f04f 0b01 	mov.w	fp, #1
 801649a:	46b8      	mov	r8, r7
 801649c:	4645      	mov	r5, r8
 801649e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80164a2:	b10b      	cbz	r3, 80164a8 <_vfiprintf_r+0x50>
 80164a4:	2b25      	cmp	r3, #37	; 0x25
 80164a6:	d154      	bne.n	8016552 <_vfiprintf_r+0xfa>
 80164a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80164ac:	d00b      	beq.n	80164c6 <_vfiprintf_r+0x6e>
 80164ae:	4653      	mov	r3, sl
 80164b0:	463a      	mov	r2, r7
 80164b2:	4621      	mov	r1, r4
 80164b4:	4630      	mov	r0, r6
 80164b6:	f7ff ffbc 	bl	8016432 <__sfputs_r>
 80164ba:	3001      	adds	r0, #1
 80164bc:	f000 80c2 	beq.w	8016644 <_vfiprintf_r+0x1ec>
 80164c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164c2:	4453      	add	r3, sl
 80164c4:	9309      	str	r3, [sp, #36]	; 0x24
 80164c6:	f898 3000 	ldrb.w	r3, [r8]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	f000 80ba 	beq.w	8016644 <_vfiprintf_r+0x1ec>
 80164d0:	2300      	movs	r3, #0
 80164d2:	f04f 32ff 	mov.w	r2, #4294967295
 80164d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164da:	9304      	str	r3, [sp, #16]
 80164dc:	9307      	str	r3, [sp, #28]
 80164de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164e2:	931a      	str	r3, [sp, #104]	; 0x68
 80164e4:	46a8      	mov	r8, r5
 80164e6:	2205      	movs	r2, #5
 80164e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80164ec:	485e      	ldr	r0, [pc, #376]	; (8016668 <_vfiprintf_r+0x210>)
 80164ee:	f7e9 fe8f 	bl	8000210 <memchr>
 80164f2:	9b04      	ldr	r3, [sp, #16]
 80164f4:	bb78      	cbnz	r0, 8016556 <_vfiprintf_r+0xfe>
 80164f6:	06d9      	lsls	r1, r3, #27
 80164f8:	bf44      	itt	mi
 80164fa:	2220      	movmi	r2, #32
 80164fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016500:	071a      	lsls	r2, r3, #28
 8016502:	bf44      	itt	mi
 8016504:	222b      	movmi	r2, #43	; 0x2b
 8016506:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801650a:	782a      	ldrb	r2, [r5, #0]
 801650c:	2a2a      	cmp	r2, #42	; 0x2a
 801650e:	d02a      	beq.n	8016566 <_vfiprintf_r+0x10e>
 8016510:	9a07      	ldr	r2, [sp, #28]
 8016512:	46a8      	mov	r8, r5
 8016514:	2000      	movs	r0, #0
 8016516:	250a      	movs	r5, #10
 8016518:	4641      	mov	r1, r8
 801651a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801651e:	3b30      	subs	r3, #48	; 0x30
 8016520:	2b09      	cmp	r3, #9
 8016522:	d969      	bls.n	80165f8 <_vfiprintf_r+0x1a0>
 8016524:	b360      	cbz	r0, 8016580 <_vfiprintf_r+0x128>
 8016526:	e024      	b.n	8016572 <_vfiprintf_r+0x11a>
 8016528:	4b50      	ldr	r3, [pc, #320]	; (801666c <_vfiprintf_r+0x214>)
 801652a:	429c      	cmp	r4, r3
 801652c:	d101      	bne.n	8016532 <_vfiprintf_r+0xda>
 801652e:	68b4      	ldr	r4, [r6, #8]
 8016530:	e7a2      	b.n	8016478 <_vfiprintf_r+0x20>
 8016532:	4b4f      	ldr	r3, [pc, #316]	; (8016670 <_vfiprintf_r+0x218>)
 8016534:	429c      	cmp	r4, r3
 8016536:	bf08      	it	eq
 8016538:	68f4      	ldreq	r4, [r6, #12]
 801653a:	e79d      	b.n	8016478 <_vfiprintf_r+0x20>
 801653c:	4621      	mov	r1, r4
 801653e:	4630      	mov	r0, r6
 8016540:	f7fd fb90 	bl	8013c64 <__swsetup_r>
 8016544:	2800      	cmp	r0, #0
 8016546:	d09d      	beq.n	8016484 <_vfiprintf_r+0x2c>
 8016548:	f04f 30ff 	mov.w	r0, #4294967295
 801654c:	b01d      	add	sp, #116	; 0x74
 801654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016552:	46a8      	mov	r8, r5
 8016554:	e7a2      	b.n	801649c <_vfiprintf_r+0x44>
 8016556:	4a44      	ldr	r2, [pc, #272]	; (8016668 <_vfiprintf_r+0x210>)
 8016558:	1a80      	subs	r0, r0, r2
 801655a:	fa0b f000 	lsl.w	r0, fp, r0
 801655e:	4318      	orrs	r0, r3
 8016560:	9004      	str	r0, [sp, #16]
 8016562:	4645      	mov	r5, r8
 8016564:	e7be      	b.n	80164e4 <_vfiprintf_r+0x8c>
 8016566:	9a03      	ldr	r2, [sp, #12]
 8016568:	1d11      	adds	r1, r2, #4
 801656a:	6812      	ldr	r2, [r2, #0]
 801656c:	9103      	str	r1, [sp, #12]
 801656e:	2a00      	cmp	r2, #0
 8016570:	db01      	blt.n	8016576 <_vfiprintf_r+0x11e>
 8016572:	9207      	str	r2, [sp, #28]
 8016574:	e004      	b.n	8016580 <_vfiprintf_r+0x128>
 8016576:	4252      	negs	r2, r2
 8016578:	f043 0302 	orr.w	r3, r3, #2
 801657c:	9207      	str	r2, [sp, #28]
 801657e:	9304      	str	r3, [sp, #16]
 8016580:	f898 3000 	ldrb.w	r3, [r8]
 8016584:	2b2e      	cmp	r3, #46	; 0x2e
 8016586:	d10e      	bne.n	80165a6 <_vfiprintf_r+0x14e>
 8016588:	f898 3001 	ldrb.w	r3, [r8, #1]
 801658c:	2b2a      	cmp	r3, #42	; 0x2a
 801658e:	d138      	bne.n	8016602 <_vfiprintf_r+0x1aa>
 8016590:	9b03      	ldr	r3, [sp, #12]
 8016592:	1d1a      	adds	r2, r3, #4
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	9203      	str	r2, [sp, #12]
 8016598:	2b00      	cmp	r3, #0
 801659a:	bfb8      	it	lt
 801659c:	f04f 33ff 	movlt.w	r3, #4294967295
 80165a0:	f108 0802 	add.w	r8, r8, #2
 80165a4:	9305      	str	r3, [sp, #20]
 80165a6:	4d33      	ldr	r5, [pc, #204]	; (8016674 <_vfiprintf_r+0x21c>)
 80165a8:	f898 1000 	ldrb.w	r1, [r8]
 80165ac:	2203      	movs	r2, #3
 80165ae:	4628      	mov	r0, r5
 80165b0:	f7e9 fe2e 	bl	8000210 <memchr>
 80165b4:	b140      	cbz	r0, 80165c8 <_vfiprintf_r+0x170>
 80165b6:	2340      	movs	r3, #64	; 0x40
 80165b8:	1b40      	subs	r0, r0, r5
 80165ba:	fa03 f000 	lsl.w	r0, r3, r0
 80165be:	9b04      	ldr	r3, [sp, #16]
 80165c0:	4303      	orrs	r3, r0
 80165c2:	f108 0801 	add.w	r8, r8, #1
 80165c6:	9304      	str	r3, [sp, #16]
 80165c8:	f898 1000 	ldrb.w	r1, [r8]
 80165cc:	482a      	ldr	r0, [pc, #168]	; (8016678 <_vfiprintf_r+0x220>)
 80165ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80165d2:	2206      	movs	r2, #6
 80165d4:	f108 0701 	add.w	r7, r8, #1
 80165d8:	f7e9 fe1a 	bl	8000210 <memchr>
 80165dc:	2800      	cmp	r0, #0
 80165de:	d037      	beq.n	8016650 <_vfiprintf_r+0x1f8>
 80165e0:	4b26      	ldr	r3, [pc, #152]	; (801667c <_vfiprintf_r+0x224>)
 80165e2:	bb1b      	cbnz	r3, 801662c <_vfiprintf_r+0x1d4>
 80165e4:	9b03      	ldr	r3, [sp, #12]
 80165e6:	3307      	adds	r3, #7
 80165e8:	f023 0307 	bic.w	r3, r3, #7
 80165ec:	3308      	adds	r3, #8
 80165ee:	9303      	str	r3, [sp, #12]
 80165f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165f2:	444b      	add	r3, r9
 80165f4:	9309      	str	r3, [sp, #36]	; 0x24
 80165f6:	e750      	b.n	801649a <_vfiprintf_r+0x42>
 80165f8:	fb05 3202 	mla	r2, r5, r2, r3
 80165fc:	2001      	movs	r0, #1
 80165fe:	4688      	mov	r8, r1
 8016600:	e78a      	b.n	8016518 <_vfiprintf_r+0xc0>
 8016602:	2300      	movs	r3, #0
 8016604:	f108 0801 	add.w	r8, r8, #1
 8016608:	9305      	str	r3, [sp, #20]
 801660a:	4619      	mov	r1, r3
 801660c:	250a      	movs	r5, #10
 801660e:	4640      	mov	r0, r8
 8016610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016614:	3a30      	subs	r2, #48	; 0x30
 8016616:	2a09      	cmp	r2, #9
 8016618:	d903      	bls.n	8016622 <_vfiprintf_r+0x1ca>
 801661a:	2b00      	cmp	r3, #0
 801661c:	d0c3      	beq.n	80165a6 <_vfiprintf_r+0x14e>
 801661e:	9105      	str	r1, [sp, #20]
 8016620:	e7c1      	b.n	80165a6 <_vfiprintf_r+0x14e>
 8016622:	fb05 2101 	mla	r1, r5, r1, r2
 8016626:	2301      	movs	r3, #1
 8016628:	4680      	mov	r8, r0
 801662a:	e7f0      	b.n	801660e <_vfiprintf_r+0x1b6>
 801662c:	ab03      	add	r3, sp, #12
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	4622      	mov	r2, r4
 8016632:	4b13      	ldr	r3, [pc, #76]	; (8016680 <_vfiprintf_r+0x228>)
 8016634:	a904      	add	r1, sp, #16
 8016636:	4630      	mov	r0, r6
 8016638:	f7fb fcd6 	bl	8011fe8 <_printf_float>
 801663c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016640:	4681      	mov	r9, r0
 8016642:	d1d5      	bne.n	80165f0 <_vfiprintf_r+0x198>
 8016644:	89a3      	ldrh	r3, [r4, #12]
 8016646:	065b      	lsls	r3, r3, #25
 8016648:	f53f af7e 	bmi.w	8016548 <_vfiprintf_r+0xf0>
 801664c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801664e:	e77d      	b.n	801654c <_vfiprintf_r+0xf4>
 8016650:	ab03      	add	r3, sp, #12
 8016652:	9300      	str	r3, [sp, #0]
 8016654:	4622      	mov	r2, r4
 8016656:	4b0a      	ldr	r3, [pc, #40]	; (8016680 <_vfiprintf_r+0x228>)
 8016658:	a904      	add	r1, sp, #16
 801665a:	4630      	mov	r0, r6
 801665c:	f7fb ff7a 	bl	8012554 <_printf_i>
 8016660:	e7ec      	b.n	801663c <_vfiprintf_r+0x1e4>
 8016662:	bf00      	nop
 8016664:	080175d0 	.word	0x080175d0
 8016668:	0801771c 	.word	0x0801771c
 801666c:	080175f0 	.word	0x080175f0
 8016670:	080175b0 	.word	0x080175b0
 8016674:	08017722 	.word	0x08017722
 8016678:	08017726 	.word	0x08017726
 801667c:	08011fe9 	.word	0x08011fe9
 8016680:	08016433 	.word	0x08016433

08016684 <_scanf_chars>:
 8016684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016688:	4615      	mov	r5, r2
 801668a:	688a      	ldr	r2, [r1, #8]
 801668c:	4680      	mov	r8, r0
 801668e:	460c      	mov	r4, r1
 8016690:	b932      	cbnz	r2, 80166a0 <_scanf_chars+0x1c>
 8016692:	698a      	ldr	r2, [r1, #24]
 8016694:	2a00      	cmp	r2, #0
 8016696:	bf14      	ite	ne
 8016698:	f04f 32ff 	movne.w	r2, #4294967295
 801669c:	2201      	moveq	r2, #1
 801669e:	608a      	str	r2, [r1, #8]
 80166a0:	6822      	ldr	r2, [r4, #0]
 80166a2:	06d1      	lsls	r1, r2, #27
 80166a4:	bf5f      	itttt	pl
 80166a6:	681a      	ldrpl	r2, [r3, #0]
 80166a8:	1d11      	addpl	r1, r2, #4
 80166aa:	6019      	strpl	r1, [r3, #0]
 80166ac:	6817      	ldrpl	r7, [r2, #0]
 80166ae:	2600      	movs	r6, #0
 80166b0:	69a3      	ldr	r3, [r4, #24]
 80166b2:	b1db      	cbz	r3, 80166ec <_scanf_chars+0x68>
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	d107      	bne.n	80166c8 <_scanf_chars+0x44>
 80166b8:	682b      	ldr	r3, [r5, #0]
 80166ba:	6962      	ldr	r2, [r4, #20]
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	5cd3      	ldrb	r3, [r2, r3]
 80166c0:	b9a3      	cbnz	r3, 80166ec <_scanf_chars+0x68>
 80166c2:	2e00      	cmp	r6, #0
 80166c4:	d132      	bne.n	801672c <_scanf_chars+0xa8>
 80166c6:	e006      	b.n	80166d6 <_scanf_chars+0x52>
 80166c8:	2b02      	cmp	r3, #2
 80166ca:	d007      	beq.n	80166dc <_scanf_chars+0x58>
 80166cc:	2e00      	cmp	r6, #0
 80166ce:	d12d      	bne.n	801672c <_scanf_chars+0xa8>
 80166d0:	69a3      	ldr	r3, [r4, #24]
 80166d2:	2b01      	cmp	r3, #1
 80166d4:	d12a      	bne.n	801672c <_scanf_chars+0xa8>
 80166d6:	2001      	movs	r0, #1
 80166d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166dc:	f7fe fe28 	bl	8015330 <__locale_ctype_ptr>
 80166e0:	682b      	ldr	r3, [r5, #0]
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	4418      	add	r0, r3
 80166e6:	7843      	ldrb	r3, [r0, #1]
 80166e8:	071b      	lsls	r3, r3, #28
 80166ea:	d4ef      	bmi.n	80166cc <_scanf_chars+0x48>
 80166ec:	6823      	ldr	r3, [r4, #0]
 80166ee:	06da      	lsls	r2, r3, #27
 80166f0:	bf5e      	ittt	pl
 80166f2:	682b      	ldrpl	r3, [r5, #0]
 80166f4:	781b      	ldrbpl	r3, [r3, #0]
 80166f6:	703b      	strbpl	r3, [r7, #0]
 80166f8:	682a      	ldr	r2, [r5, #0]
 80166fa:	686b      	ldr	r3, [r5, #4]
 80166fc:	f102 0201 	add.w	r2, r2, #1
 8016700:	602a      	str	r2, [r5, #0]
 8016702:	68a2      	ldr	r2, [r4, #8]
 8016704:	f103 33ff 	add.w	r3, r3, #4294967295
 8016708:	f102 32ff 	add.w	r2, r2, #4294967295
 801670c:	606b      	str	r3, [r5, #4]
 801670e:	f106 0601 	add.w	r6, r6, #1
 8016712:	bf58      	it	pl
 8016714:	3701      	addpl	r7, #1
 8016716:	60a2      	str	r2, [r4, #8]
 8016718:	b142      	cbz	r2, 801672c <_scanf_chars+0xa8>
 801671a:	2b00      	cmp	r3, #0
 801671c:	dcc8      	bgt.n	80166b0 <_scanf_chars+0x2c>
 801671e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016722:	4629      	mov	r1, r5
 8016724:	4640      	mov	r0, r8
 8016726:	4798      	blx	r3
 8016728:	2800      	cmp	r0, #0
 801672a:	d0c1      	beq.n	80166b0 <_scanf_chars+0x2c>
 801672c:	6823      	ldr	r3, [r4, #0]
 801672e:	f013 0310 	ands.w	r3, r3, #16
 8016732:	d105      	bne.n	8016740 <_scanf_chars+0xbc>
 8016734:	68e2      	ldr	r2, [r4, #12]
 8016736:	3201      	adds	r2, #1
 8016738:	60e2      	str	r2, [r4, #12]
 801673a:	69a2      	ldr	r2, [r4, #24]
 801673c:	b102      	cbz	r2, 8016740 <_scanf_chars+0xbc>
 801673e:	703b      	strb	r3, [r7, #0]
 8016740:	6923      	ldr	r3, [r4, #16]
 8016742:	441e      	add	r6, r3
 8016744:	6126      	str	r6, [r4, #16]
 8016746:	2000      	movs	r0, #0
 8016748:	e7c6      	b.n	80166d8 <_scanf_chars+0x54>
	...

0801674c <_scanf_i>:
 801674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016750:	469a      	mov	sl, r3
 8016752:	4b74      	ldr	r3, [pc, #464]	; (8016924 <_scanf_i+0x1d8>)
 8016754:	460c      	mov	r4, r1
 8016756:	4683      	mov	fp, r0
 8016758:	4616      	mov	r6, r2
 801675a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801675e:	b087      	sub	sp, #28
 8016760:	ab03      	add	r3, sp, #12
 8016762:	68a7      	ldr	r7, [r4, #8]
 8016764:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016768:	4b6f      	ldr	r3, [pc, #444]	; (8016928 <_scanf_i+0x1dc>)
 801676a:	69a1      	ldr	r1, [r4, #24]
 801676c:	4a6f      	ldr	r2, [pc, #444]	; (801692c <_scanf_i+0x1e0>)
 801676e:	2903      	cmp	r1, #3
 8016770:	bf08      	it	eq
 8016772:	461a      	moveq	r2, r3
 8016774:	1e7b      	subs	r3, r7, #1
 8016776:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801677a:	bf84      	itt	hi
 801677c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016780:	60a3      	strhi	r3, [r4, #8]
 8016782:	6823      	ldr	r3, [r4, #0]
 8016784:	9200      	str	r2, [sp, #0]
 8016786:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801678a:	bf88      	it	hi
 801678c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016790:	f104 091c 	add.w	r9, r4, #28
 8016794:	6023      	str	r3, [r4, #0]
 8016796:	bf8c      	ite	hi
 8016798:	197f      	addhi	r7, r7, r5
 801679a:	2700      	movls	r7, #0
 801679c:	464b      	mov	r3, r9
 801679e:	f04f 0800 	mov.w	r8, #0
 80167a2:	9301      	str	r3, [sp, #4]
 80167a4:	6831      	ldr	r1, [r6, #0]
 80167a6:	ab03      	add	r3, sp, #12
 80167a8:	2202      	movs	r2, #2
 80167aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80167ae:	7809      	ldrb	r1, [r1, #0]
 80167b0:	f7e9 fd2e 	bl	8000210 <memchr>
 80167b4:	9b01      	ldr	r3, [sp, #4]
 80167b6:	b330      	cbz	r0, 8016806 <_scanf_i+0xba>
 80167b8:	f1b8 0f01 	cmp.w	r8, #1
 80167bc:	d15a      	bne.n	8016874 <_scanf_i+0x128>
 80167be:	6862      	ldr	r2, [r4, #4]
 80167c0:	b92a      	cbnz	r2, 80167ce <_scanf_i+0x82>
 80167c2:	6822      	ldr	r2, [r4, #0]
 80167c4:	2108      	movs	r1, #8
 80167c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80167ca:	6061      	str	r1, [r4, #4]
 80167cc:	6022      	str	r2, [r4, #0]
 80167ce:	6822      	ldr	r2, [r4, #0]
 80167d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80167d4:	6022      	str	r2, [r4, #0]
 80167d6:	68a2      	ldr	r2, [r4, #8]
 80167d8:	1e51      	subs	r1, r2, #1
 80167da:	60a1      	str	r1, [r4, #8]
 80167dc:	b19a      	cbz	r2, 8016806 <_scanf_i+0xba>
 80167de:	6832      	ldr	r2, [r6, #0]
 80167e0:	1c51      	adds	r1, r2, #1
 80167e2:	6031      	str	r1, [r6, #0]
 80167e4:	7812      	ldrb	r2, [r2, #0]
 80167e6:	701a      	strb	r2, [r3, #0]
 80167e8:	1c5d      	adds	r5, r3, #1
 80167ea:	6873      	ldr	r3, [r6, #4]
 80167ec:	3b01      	subs	r3, #1
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	6073      	str	r3, [r6, #4]
 80167f2:	dc07      	bgt.n	8016804 <_scanf_i+0xb8>
 80167f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80167f8:	4631      	mov	r1, r6
 80167fa:	4658      	mov	r0, fp
 80167fc:	4798      	blx	r3
 80167fe:	2800      	cmp	r0, #0
 8016800:	f040 8086 	bne.w	8016910 <_scanf_i+0x1c4>
 8016804:	462b      	mov	r3, r5
 8016806:	f108 0801 	add.w	r8, r8, #1
 801680a:	f1b8 0f03 	cmp.w	r8, #3
 801680e:	d1c8      	bne.n	80167a2 <_scanf_i+0x56>
 8016810:	6862      	ldr	r2, [r4, #4]
 8016812:	b90a      	cbnz	r2, 8016818 <_scanf_i+0xcc>
 8016814:	220a      	movs	r2, #10
 8016816:	6062      	str	r2, [r4, #4]
 8016818:	6862      	ldr	r2, [r4, #4]
 801681a:	4945      	ldr	r1, [pc, #276]	; (8016930 <_scanf_i+0x1e4>)
 801681c:	6960      	ldr	r0, [r4, #20]
 801681e:	9301      	str	r3, [sp, #4]
 8016820:	1a89      	subs	r1, r1, r2
 8016822:	f000 f8df 	bl	80169e4 <__sccl>
 8016826:	9b01      	ldr	r3, [sp, #4]
 8016828:	f04f 0800 	mov.w	r8, #0
 801682c:	461d      	mov	r5, r3
 801682e:	68a3      	ldr	r3, [r4, #8]
 8016830:	6822      	ldr	r2, [r4, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d03a      	beq.n	80168ac <_scanf_i+0x160>
 8016836:	6831      	ldr	r1, [r6, #0]
 8016838:	6960      	ldr	r0, [r4, #20]
 801683a:	f891 c000 	ldrb.w	ip, [r1]
 801683e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016842:	2800      	cmp	r0, #0
 8016844:	d032      	beq.n	80168ac <_scanf_i+0x160>
 8016846:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801684a:	d121      	bne.n	8016890 <_scanf_i+0x144>
 801684c:	0510      	lsls	r0, r2, #20
 801684e:	d51f      	bpl.n	8016890 <_scanf_i+0x144>
 8016850:	f108 0801 	add.w	r8, r8, #1
 8016854:	b117      	cbz	r7, 801685c <_scanf_i+0x110>
 8016856:	3301      	adds	r3, #1
 8016858:	3f01      	subs	r7, #1
 801685a:	60a3      	str	r3, [r4, #8]
 801685c:	6873      	ldr	r3, [r6, #4]
 801685e:	3b01      	subs	r3, #1
 8016860:	2b00      	cmp	r3, #0
 8016862:	6073      	str	r3, [r6, #4]
 8016864:	dd1b      	ble.n	801689e <_scanf_i+0x152>
 8016866:	6833      	ldr	r3, [r6, #0]
 8016868:	3301      	adds	r3, #1
 801686a:	6033      	str	r3, [r6, #0]
 801686c:	68a3      	ldr	r3, [r4, #8]
 801686e:	3b01      	subs	r3, #1
 8016870:	60a3      	str	r3, [r4, #8]
 8016872:	e7dc      	b.n	801682e <_scanf_i+0xe2>
 8016874:	f1b8 0f02 	cmp.w	r8, #2
 8016878:	d1ad      	bne.n	80167d6 <_scanf_i+0x8a>
 801687a:	6822      	ldr	r2, [r4, #0]
 801687c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016880:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016884:	d1bf      	bne.n	8016806 <_scanf_i+0xba>
 8016886:	2110      	movs	r1, #16
 8016888:	6061      	str	r1, [r4, #4]
 801688a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801688e:	e7a1      	b.n	80167d4 <_scanf_i+0x88>
 8016890:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016894:	6022      	str	r2, [r4, #0]
 8016896:	780b      	ldrb	r3, [r1, #0]
 8016898:	702b      	strb	r3, [r5, #0]
 801689a:	3501      	adds	r5, #1
 801689c:	e7de      	b.n	801685c <_scanf_i+0x110>
 801689e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168a2:	4631      	mov	r1, r6
 80168a4:	4658      	mov	r0, fp
 80168a6:	4798      	blx	r3
 80168a8:	2800      	cmp	r0, #0
 80168aa:	d0df      	beq.n	801686c <_scanf_i+0x120>
 80168ac:	6823      	ldr	r3, [r4, #0]
 80168ae:	05d9      	lsls	r1, r3, #23
 80168b0:	d50c      	bpl.n	80168cc <_scanf_i+0x180>
 80168b2:	454d      	cmp	r5, r9
 80168b4:	d908      	bls.n	80168c8 <_scanf_i+0x17c>
 80168b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80168ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168be:	4632      	mov	r2, r6
 80168c0:	4658      	mov	r0, fp
 80168c2:	4798      	blx	r3
 80168c4:	1e6f      	subs	r7, r5, #1
 80168c6:	463d      	mov	r5, r7
 80168c8:	454d      	cmp	r5, r9
 80168ca:	d029      	beq.n	8016920 <_scanf_i+0x1d4>
 80168cc:	6822      	ldr	r2, [r4, #0]
 80168ce:	f012 0210 	ands.w	r2, r2, #16
 80168d2:	d113      	bne.n	80168fc <_scanf_i+0x1b0>
 80168d4:	702a      	strb	r2, [r5, #0]
 80168d6:	6863      	ldr	r3, [r4, #4]
 80168d8:	9e00      	ldr	r6, [sp, #0]
 80168da:	4649      	mov	r1, r9
 80168dc:	4658      	mov	r0, fp
 80168de:	47b0      	blx	r6
 80168e0:	f8da 3000 	ldr.w	r3, [sl]
 80168e4:	6821      	ldr	r1, [r4, #0]
 80168e6:	1d1a      	adds	r2, r3, #4
 80168e8:	f8ca 2000 	str.w	r2, [sl]
 80168ec:	f011 0f20 	tst.w	r1, #32
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	d010      	beq.n	8016916 <_scanf_i+0x1ca>
 80168f4:	6018      	str	r0, [r3, #0]
 80168f6:	68e3      	ldr	r3, [r4, #12]
 80168f8:	3301      	adds	r3, #1
 80168fa:	60e3      	str	r3, [r4, #12]
 80168fc:	eba5 0509 	sub.w	r5, r5, r9
 8016900:	44a8      	add	r8, r5
 8016902:	6925      	ldr	r5, [r4, #16]
 8016904:	4445      	add	r5, r8
 8016906:	6125      	str	r5, [r4, #16]
 8016908:	2000      	movs	r0, #0
 801690a:	b007      	add	sp, #28
 801690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016910:	f04f 0800 	mov.w	r8, #0
 8016914:	e7ca      	b.n	80168ac <_scanf_i+0x160>
 8016916:	07ca      	lsls	r2, r1, #31
 8016918:	bf4c      	ite	mi
 801691a:	8018      	strhmi	r0, [r3, #0]
 801691c:	6018      	strpl	r0, [r3, #0]
 801691e:	e7ea      	b.n	80168f6 <_scanf_i+0x1aa>
 8016920:	2001      	movs	r0, #1
 8016922:	e7f2      	b.n	801690a <_scanf_i+0x1be>
 8016924:	08016eb4 	.word	0x08016eb4
 8016928:	08013b39 	.word	0x08013b39
 801692c:	08016b61 	.word	0x08016b61
 8016930:	0801773d 	.word	0x0801773d

08016934 <_putc_r>:
 8016934:	b570      	push	{r4, r5, r6, lr}
 8016936:	460d      	mov	r5, r1
 8016938:	4614      	mov	r4, r2
 801693a:	4606      	mov	r6, r0
 801693c:	b118      	cbz	r0, 8016946 <_putc_r+0x12>
 801693e:	6983      	ldr	r3, [r0, #24]
 8016940:	b90b      	cbnz	r3, 8016946 <_putc_r+0x12>
 8016942:	f7fe f941 	bl	8014bc8 <__sinit>
 8016946:	4b13      	ldr	r3, [pc, #76]	; (8016994 <_putc_r+0x60>)
 8016948:	429c      	cmp	r4, r3
 801694a:	d112      	bne.n	8016972 <_putc_r+0x3e>
 801694c:	6874      	ldr	r4, [r6, #4]
 801694e:	68a3      	ldr	r3, [r4, #8]
 8016950:	3b01      	subs	r3, #1
 8016952:	2b00      	cmp	r3, #0
 8016954:	60a3      	str	r3, [r4, #8]
 8016956:	da16      	bge.n	8016986 <_putc_r+0x52>
 8016958:	69a2      	ldr	r2, [r4, #24]
 801695a:	4293      	cmp	r3, r2
 801695c:	db02      	blt.n	8016964 <_putc_r+0x30>
 801695e:	b2eb      	uxtb	r3, r5
 8016960:	2b0a      	cmp	r3, #10
 8016962:	d110      	bne.n	8016986 <_putc_r+0x52>
 8016964:	4622      	mov	r2, r4
 8016966:	4629      	mov	r1, r5
 8016968:	4630      	mov	r0, r6
 801696a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801696e:	f7fd b915 	b.w	8013b9c <__swbuf_r>
 8016972:	4b09      	ldr	r3, [pc, #36]	; (8016998 <_putc_r+0x64>)
 8016974:	429c      	cmp	r4, r3
 8016976:	d101      	bne.n	801697c <_putc_r+0x48>
 8016978:	68b4      	ldr	r4, [r6, #8]
 801697a:	e7e8      	b.n	801694e <_putc_r+0x1a>
 801697c:	4b07      	ldr	r3, [pc, #28]	; (801699c <_putc_r+0x68>)
 801697e:	429c      	cmp	r4, r3
 8016980:	bf08      	it	eq
 8016982:	68f4      	ldreq	r4, [r6, #12]
 8016984:	e7e3      	b.n	801694e <_putc_r+0x1a>
 8016986:	6823      	ldr	r3, [r4, #0]
 8016988:	1c5a      	adds	r2, r3, #1
 801698a:	6022      	str	r2, [r4, #0]
 801698c:	701d      	strb	r5, [r3, #0]
 801698e:	b2e8      	uxtb	r0, r5
 8016990:	bd70      	pop	{r4, r5, r6, pc}
 8016992:	bf00      	nop
 8016994:	080175d0 	.word	0x080175d0
 8016998:	080175f0 	.word	0x080175f0
 801699c:	080175b0 	.word	0x080175b0

080169a0 <_read_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4c07      	ldr	r4, [pc, #28]	; (80169c0 <_read_r+0x20>)
 80169a4:	4605      	mov	r5, r0
 80169a6:	4608      	mov	r0, r1
 80169a8:	4611      	mov	r1, r2
 80169aa:	2200      	movs	r2, #0
 80169ac:	6022      	str	r2, [r4, #0]
 80169ae:	461a      	mov	r2, r3
 80169b0:	f7ee fad0 	bl	8004f54 <_read>
 80169b4:	1c43      	adds	r3, r0, #1
 80169b6:	d102      	bne.n	80169be <_read_r+0x1e>
 80169b8:	6823      	ldr	r3, [r4, #0]
 80169ba:	b103      	cbz	r3, 80169be <_read_r+0x1e>
 80169bc:	602b      	str	r3, [r5, #0]
 80169be:	bd38      	pop	{r3, r4, r5, pc}
 80169c0:	2000c6ac 	.word	0x2000c6ac

080169c4 <_sbrk_r>:
 80169c4:	b538      	push	{r3, r4, r5, lr}
 80169c6:	4c06      	ldr	r4, [pc, #24]	; (80169e0 <_sbrk_r+0x1c>)
 80169c8:	2300      	movs	r3, #0
 80169ca:	4605      	mov	r5, r0
 80169cc:	4608      	mov	r0, r1
 80169ce:	6023      	str	r3, [r4, #0]
 80169d0:	f7ee fb12 	bl	8004ff8 <_sbrk>
 80169d4:	1c43      	adds	r3, r0, #1
 80169d6:	d102      	bne.n	80169de <_sbrk_r+0x1a>
 80169d8:	6823      	ldr	r3, [r4, #0]
 80169da:	b103      	cbz	r3, 80169de <_sbrk_r+0x1a>
 80169dc:	602b      	str	r3, [r5, #0]
 80169de:	bd38      	pop	{r3, r4, r5, pc}
 80169e0:	2000c6ac 	.word	0x2000c6ac

080169e4 <__sccl>:
 80169e4:	b570      	push	{r4, r5, r6, lr}
 80169e6:	780b      	ldrb	r3, [r1, #0]
 80169e8:	2b5e      	cmp	r3, #94	; 0x5e
 80169ea:	bf13      	iteet	ne
 80169ec:	1c4a      	addne	r2, r1, #1
 80169ee:	1c8a      	addeq	r2, r1, #2
 80169f0:	784b      	ldrbeq	r3, [r1, #1]
 80169f2:	2100      	movne	r1, #0
 80169f4:	bf08      	it	eq
 80169f6:	2101      	moveq	r1, #1
 80169f8:	1e44      	subs	r4, r0, #1
 80169fa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80169fe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016a02:	42ac      	cmp	r4, r5
 8016a04:	d1fb      	bne.n	80169fe <__sccl+0x1a>
 8016a06:	b913      	cbnz	r3, 8016a0e <__sccl+0x2a>
 8016a08:	3a01      	subs	r2, #1
 8016a0a:	4610      	mov	r0, r2
 8016a0c:	bd70      	pop	{r4, r5, r6, pc}
 8016a0e:	f081 0401 	eor.w	r4, r1, #1
 8016a12:	54c4      	strb	r4, [r0, r3]
 8016a14:	1c51      	adds	r1, r2, #1
 8016a16:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016a1a:	2d2d      	cmp	r5, #45	; 0x2d
 8016a1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8016a20:	460a      	mov	r2, r1
 8016a22:	d006      	beq.n	8016a32 <__sccl+0x4e>
 8016a24:	2d5d      	cmp	r5, #93	; 0x5d
 8016a26:	d0f0      	beq.n	8016a0a <__sccl+0x26>
 8016a28:	b90d      	cbnz	r5, 8016a2e <__sccl+0x4a>
 8016a2a:	4632      	mov	r2, r6
 8016a2c:	e7ed      	b.n	8016a0a <__sccl+0x26>
 8016a2e:	462b      	mov	r3, r5
 8016a30:	e7ef      	b.n	8016a12 <__sccl+0x2e>
 8016a32:	780e      	ldrb	r6, [r1, #0]
 8016a34:	2e5d      	cmp	r6, #93	; 0x5d
 8016a36:	d0fa      	beq.n	8016a2e <__sccl+0x4a>
 8016a38:	42b3      	cmp	r3, r6
 8016a3a:	dcf8      	bgt.n	8016a2e <__sccl+0x4a>
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	429e      	cmp	r6, r3
 8016a40:	54c4      	strb	r4, [r0, r3]
 8016a42:	dcfb      	bgt.n	8016a3c <__sccl+0x58>
 8016a44:	3102      	adds	r1, #2
 8016a46:	e7e6      	b.n	8016a16 <__sccl+0x32>

08016a48 <strncmp>:
 8016a48:	b510      	push	{r4, lr}
 8016a4a:	b16a      	cbz	r2, 8016a68 <strncmp+0x20>
 8016a4c:	3901      	subs	r1, #1
 8016a4e:	1884      	adds	r4, r0, r2
 8016a50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016a54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d103      	bne.n	8016a64 <strncmp+0x1c>
 8016a5c:	42a0      	cmp	r0, r4
 8016a5e:	d001      	beq.n	8016a64 <strncmp+0x1c>
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d1f5      	bne.n	8016a50 <strncmp+0x8>
 8016a64:	1a98      	subs	r0, r3, r2
 8016a66:	bd10      	pop	{r4, pc}
 8016a68:	4610      	mov	r0, r2
 8016a6a:	e7fc      	b.n	8016a66 <strncmp+0x1e>

08016a6c <_strtoul_l.isra.0>:
 8016a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a70:	4680      	mov	r8, r0
 8016a72:	4689      	mov	r9, r1
 8016a74:	4692      	mov	sl, r2
 8016a76:	461e      	mov	r6, r3
 8016a78:	460f      	mov	r7, r1
 8016a7a:	463d      	mov	r5, r7
 8016a7c:	9808      	ldr	r0, [sp, #32]
 8016a7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a82:	f7fe fc51 	bl	8015328 <__locale_ctype_ptr_l>
 8016a86:	4420      	add	r0, r4
 8016a88:	7843      	ldrb	r3, [r0, #1]
 8016a8a:	f013 0308 	ands.w	r3, r3, #8
 8016a8e:	d130      	bne.n	8016af2 <_strtoul_l.isra.0+0x86>
 8016a90:	2c2d      	cmp	r4, #45	; 0x2d
 8016a92:	d130      	bne.n	8016af6 <_strtoul_l.isra.0+0x8a>
 8016a94:	787c      	ldrb	r4, [r7, #1]
 8016a96:	1cbd      	adds	r5, r7, #2
 8016a98:	2101      	movs	r1, #1
 8016a9a:	2e00      	cmp	r6, #0
 8016a9c:	d05c      	beq.n	8016b58 <_strtoul_l.isra.0+0xec>
 8016a9e:	2e10      	cmp	r6, #16
 8016aa0:	d109      	bne.n	8016ab6 <_strtoul_l.isra.0+0x4a>
 8016aa2:	2c30      	cmp	r4, #48	; 0x30
 8016aa4:	d107      	bne.n	8016ab6 <_strtoul_l.isra.0+0x4a>
 8016aa6:	782b      	ldrb	r3, [r5, #0]
 8016aa8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016aac:	2b58      	cmp	r3, #88	; 0x58
 8016aae:	d14e      	bne.n	8016b4e <_strtoul_l.isra.0+0xe2>
 8016ab0:	786c      	ldrb	r4, [r5, #1]
 8016ab2:	2610      	movs	r6, #16
 8016ab4:	3502      	adds	r5, #2
 8016ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8016aba:	2300      	movs	r3, #0
 8016abc:	fbb2 f2f6 	udiv	r2, r2, r6
 8016ac0:	fb06 fc02 	mul.w	ip, r6, r2
 8016ac4:	ea6f 0c0c 	mvn.w	ip, ip
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016ace:	2f09      	cmp	r7, #9
 8016ad0:	d817      	bhi.n	8016b02 <_strtoul_l.isra.0+0x96>
 8016ad2:	463c      	mov	r4, r7
 8016ad4:	42a6      	cmp	r6, r4
 8016ad6:	dd23      	ble.n	8016b20 <_strtoul_l.isra.0+0xb4>
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	db1e      	blt.n	8016b1a <_strtoul_l.isra.0+0xae>
 8016adc:	4282      	cmp	r2, r0
 8016ade:	d31c      	bcc.n	8016b1a <_strtoul_l.isra.0+0xae>
 8016ae0:	d101      	bne.n	8016ae6 <_strtoul_l.isra.0+0x7a>
 8016ae2:	45a4      	cmp	ip, r4
 8016ae4:	db19      	blt.n	8016b1a <_strtoul_l.isra.0+0xae>
 8016ae6:	fb00 4006 	mla	r0, r0, r6, r4
 8016aea:	2301      	movs	r3, #1
 8016aec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016af0:	e7eb      	b.n	8016aca <_strtoul_l.isra.0+0x5e>
 8016af2:	462f      	mov	r7, r5
 8016af4:	e7c1      	b.n	8016a7a <_strtoul_l.isra.0+0xe>
 8016af6:	2c2b      	cmp	r4, #43	; 0x2b
 8016af8:	bf04      	itt	eq
 8016afa:	1cbd      	addeq	r5, r7, #2
 8016afc:	787c      	ldrbeq	r4, [r7, #1]
 8016afe:	4619      	mov	r1, r3
 8016b00:	e7cb      	b.n	8016a9a <_strtoul_l.isra.0+0x2e>
 8016b02:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016b06:	2f19      	cmp	r7, #25
 8016b08:	d801      	bhi.n	8016b0e <_strtoul_l.isra.0+0xa2>
 8016b0a:	3c37      	subs	r4, #55	; 0x37
 8016b0c:	e7e2      	b.n	8016ad4 <_strtoul_l.isra.0+0x68>
 8016b0e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016b12:	2f19      	cmp	r7, #25
 8016b14:	d804      	bhi.n	8016b20 <_strtoul_l.isra.0+0xb4>
 8016b16:	3c57      	subs	r4, #87	; 0x57
 8016b18:	e7dc      	b.n	8016ad4 <_strtoul_l.isra.0+0x68>
 8016b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b1e:	e7e5      	b.n	8016aec <_strtoul_l.isra.0+0x80>
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	da09      	bge.n	8016b38 <_strtoul_l.isra.0+0xcc>
 8016b24:	2322      	movs	r3, #34	; 0x22
 8016b26:	f8c8 3000 	str.w	r3, [r8]
 8016b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b2e:	f1ba 0f00 	cmp.w	sl, #0
 8016b32:	d107      	bne.n	8016b44 <_strtoul_l.isra.0+0xd8>
 8016b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b38:	b101      	cbz	r1, 8016b3c <_strtoul_l.isra.0+0xd0>
 8016b3a:	4240      	negs	r0, r0
 8016b3c:	f1ba 0f00 	cmp.w	sl, #0
 8016b40:	d0f8      	beq.n	8016b34 <_strtoul_l.isra.0+0xc8>
 8016b42:	b10b      	cbz	r3, 8016b48 <_strtoul_l.isra.0+0xdc>
 8016b44:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b48:	f8ca 9000 	str.w	r9, [sl]
 8016b4c:	e7f2      	b.n	8016b34 <_strtoul_l.isra.0+0xc8>
 8016b4e:	2430      	movs	r4, #48	; 0x30
 8016b50:	2e00      	cmp	r6, #0
 8016b52:	d1b0      	bne.n	8016ab6 <_strtoul_l.isra.0+0x4a>
 8016b54:	2608      	movs	r6, #8
 8016b56:	e7ae      	b.n	8016ab6 <_strtoul_l.isra.0+0x4a>
 8016b58:	2c30      	cmp	r4, #48	; 0x30
 8016b5a:	d0a4      	beq.n	8016aa6 <_strtoul_l.isra.0+0x3a>
 8016b5c:	260a      	movs	r6, #10
 8016b5e:	e7aa      	b.n	8016ab6 <_strtoul_l.isra.0+0x4a>

08016b60 <_strtoul_r>:
 8016b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b62:	4c06      	ldr	r4, [pc, #24]	; (8016b7c <_strtoul_r+0x1c>)
 8016b64:	4d06      	ldr	r5, [pc, #24]	; (8016b80 <_strtoul_r+0x20>)
 8016b66:	6824      	ldr	r4, [r4, #0]
 8016b68:	6a24      	ldr	r4, [r4, #32]
 8016b6a:	2c00      	cmp	r4, #0
 8016b6c:	bf08      	it	eq
 8016b6e:	462c      	moveq	r4, r5
 8016b70:	9400      	str	r4, [sp, #0]
 8016b72:	f7ff ff7b 	bl	8016a6c <_strtoul_l.isra.0>
 8016b76:	b003      	add	sp, #12
 8016b78:	bd30      	pop	{r4, r5, pc}
 8016b7a:	bf00      	nop
 8016b7c:	2000000c 	.word	0x2000000c
 8016b80:	20000070 	.word	0x20000070

08016b84 <__submore>:
 8016b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b88:	460c      	mov	r4, r1
 8016b8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b90:	4299      	cmp	r1, r3
 8016b92:	d11d      	bne.n	8016bd0 <__submore+0x4c>
 8016b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016b98:	f7ff f8de 	bl	8015d58 <_malloc_r>
 8016b9c:	b918      	cbnz	r0, 8016ba6 <__submore+0x22>
 8016b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8016ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016baa:	63a3      	str	r3, [r4, #56]	; 0x38
 8016bac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8016bb2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016bb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016bba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016bbe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016bc2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016bc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016bca:	6020      	str	r0, [r4, #0]
 8016bcc:	2000      	movs	r0, #0
 8016bce:	e7e8      	b.n	8016ba2 <__submore+0x1e>
 8016bd0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016bd2:	0077      	lsls	r7, r6, #1
 8016bd4:	463a      	mov	r2, r7
 8016bd6:	f000 f85a 	bl	8016c8e <_realloc_r>
 8016bda:	4605      	mov	r5, r0
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	d0de      	beq.n	8016b9e <__submore+0x1a>
 8016be0:	eb00 0806 	add.w	r8, r0, r6
 8016be4:	4601      	mov	r1, r0
 8016be6:	4632      	mov	r2, r6
 8016be8:	4640      	mov	r0, r8
 8016bea:	f7fe fc4f 	bl	801548c <memcpy>
 8016bee:	f8c4 8000 	str.w	r8, [r4]
 8016bf2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016bf6:	e7e9      	b.n	8016bcc <__submore+0x48>

08016bf8 <__ascii_wctomb>:
 8016bf8:	b149      	cbz	r1, 8016c0e <__ascii_wctomb+0x16>
 8016bfa:	2aff      	cmp	r2, #255	; 0xff
 8016bfc:	bf85      	ittet	hi
 8016bfe:	238a      	movhi	r3, #138	; 0x8a
 8016c00:	6003      	strhi	r3, [r0, #0]
 8016c02:	700a      	strbls	r2, [r1, #0]
 8016c04:	f04f 30ff 	movhi.w	r0, #4294967295
 8016c08:	bf98      	it	ls
 8016c0a:	2001      	movls	r0, #1
 8016c0c:	4770      	bx	lr
 8016c0e:	4608      	mov	r0, r1
 8016c10:	4770      	bx	lr
	...

08016c14 <_fstat_r>:
 8016c14:	b538      	push	{r3, r4, r5, lr}
 8016c16:	4c07      	ldr	r4, [pc, #28]	; (8016c34 <_fstat_r+0x20>)
 8016c18:	2300      	movs	r3, #0
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	4608      	mov	r0, r1
 8016c1e:	4611      	mov	r1, r2
 8016c20:	6023      	str	r3, [r4, #0]
 8016c22:	f7ee f9c0 	bl	8004fa6 <_fstat>
 8016c26:	1c43      	adds	r3, r0, #1
 8016c28:	d102      	bne.n	8016c30 <_fstat_r+0x1c>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	b103      	cbz	r3, 8016c30 <_fstat_r+0x1c>
 8016c2e:	602b      	str	r3, [r5, #0]
 8016c30:	bd38      	pop	{r3, r4, r5, pc}
 8016c32:	bf00      	nop
 8016c34:	2000c6ac 	.word	0x2000c6ac

08016c38 <_isatty_r>:
 8016c38:	b538      	push	{r3, r4, r5, lr}
 8016c3a:	4c06      	ldr	r4, [pc, #24]	; (8016c54 <_isatty_r+0x1c>)
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	4605      	mov	r5, r0
 8016c40:	4608      	mov	r0, r1
 8016c42:	6023      	str	r3, [r4, #0]
 8016c44:	f7ee f9bf 	bl	8004fc6 <_isatty>
 8016c48:	1c43      	adds	r3, r0, #1
 8016c4a:	d102      	bne.n	8016c52 <_isatty_r+0x1a>
 8016c4c:	6823      	ldr	r3, [r4, #0]
 8016c4e:	b103      	cbz	r3, 8016c52 <_isatty_r+0x1a>
 8016c50:	602b      	str	r3, [r5, #0]
 8016c52:	bd38      	pop	{r3, r4, r5, pc}
 8016c54:	2000c6ac 	.word	0x2000c6ac

08016c58 <memmove>:
 8016c58:	4288      	cmp	r0, r1
 8016c5a:	b510      	push	{r4, lr}
 8016c5c:	eb01 0302 	add.w	r3, r1, r2
 8016c60:	d807      	bhi.n	8016c72 <memmove+0x1a>
 8016c62:	1e42      	subs	r2, r0, #1
 8016c64:	4299      	cmp	r1, r3
 8016c66:	d00a      	beq.n	8016c7e <memmove+0x26>
 8016c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016c70:	e7f8      	b.n	8016c64 <memmove+0xc>
 8016c72:	4283      	cmp	r3, r0
 8016c74:	d9f5      	bls.n	8016c62 <memmove+0xa>
 8016c76:	1881      	adds	r1, r0, r2
 8016c78:	1ad2      	subs	r2, r2, r3
 8016c7a:	42d3      	cmn	r3, r2
 8016c7c:	d100      	bne.n	8016c80 <memmove+0x28>
 8016c7e:	bd10      	pop	{r4, pc}
 8016c80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016c88:	e7f7      	b.n	8016c7a <memmove+0x22>

08016c8a <__malloc_lock>:
 8016c8a:	4770      	bx	lr

08016c8c <__malloc_unlock>:
 8016c8c:	4770      	bx	lr

08016c8e <_realloc_r>:
 8016c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c90:	4607      	mov	r7, r0
 8016c92:	4614      	mov	r4, r2
 8016c94:	460e      	mov	r6, r1
 8016c96:	b921      	cbnz	r1, 8016ca2 <_realloc_r+0x14>
 8016c98:	4611      	mov	r1, r2
 8016c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016c9e:	f7ff b85b 	b.w	8015d58 <_malloc_r>
 8016ca2:	b922      	cbnz	r2, 8016cae <_realloc_r+0x20>
 8016ca4:	f7ff f80a 	bl	8015cbc <_free_r>
 8016ca8:	4625      	mov	r5, r4
 8016caa:	4628      	mov	r0, r5
 8016cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cae:	f000 f814 	bl	8016cda <_malloc_usable_size_r>
 8016cb2:	42a0      	cmp	r0, r4
 8016cb4:	d20f      	bcs.n	8016cd6 <_realloc_r+0x48>
 8016cb6:	4621      	mov	r1, r4
 8016cb8:	4638      	mov	r0, r7
 8016cba:	f7ff f84d 	bl	8015d58 <_malloc_r>
 8016cbe:	4605      	mov	r5, r0
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	d0f2      	beq.n	8016caa <_realloc_r+0x1c>
 8016cc4:	4631      	mov	r1, r6
 8016cc6:	4622      	mov	r2, r4
 8016cc8:	f7fe fbe0 	bl	801548c <memcpy>
 8016ccc:	4631      	mov	r1, r6
 8016cce:	4638      	mov	r0, r7
 8016cd0:	f7fe fff4 	bl	8015cbc <_free_r>
 8016cd4:	e7e9      	b.n	8016caa <_realloc_r+0x1c>
 8016cd6:	4635      	mov	r5, r6
 8016cd8:	e7e7      	b.n	8016caa <_realloc_r+0x1c>

08016cda <_malloc_usable_size_r>:
 8016cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cde:	1f18      	subs	r0, r3, #4
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	bfbc      	itt	lt
 8016ce4:	580b      	ldrlt	r3, [r1, r0]
 8016ce6:	18c0      	addlt	r0, r0, r3
 8016ce8:	4770      	bx	lr
	...

08016cec <_init>:
 8016cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cee:	bf00      	nop
 8016cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cf2:	bc08      	pop	{r3}
 8016cf4:	469e      	mov	lr, r3
 8016cf6:	4770      	bx	lr

08016cf8 <_fini>:
 8016cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cfa:	bf00      	nop
 8016cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cfe:	bc08      	pop	{r3}
 8016d00:	469e      	mov	lr, r3
 8016d02:	4770      	bx	lr
