
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175cc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  08017790  08017790  00027790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181cc  080181cc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080181cc  080181cc  000281cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181d4  080181d4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080181d4  080181d4  000281d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181dc  080181dc  000281dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080181e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f918  200001e0  080183bc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2002faf8  080183bc  0003faf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a189  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007dd4  00000000  00000000  0006a395  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021b0  00000000  00000000  00072170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee0  00000000  00000000  00074320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037699  00000000  00000000  00076200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b1e  00000000  00000000  000ad899  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001124c5  00000000  00000000  000d33b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e587c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a360  00000000  00000000  001e58f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017774 	.word	0x08017774

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017774 	.word	0x08017774

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fb68 	bl	80086ac <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2002d5f0 	.word	0x2002d5f0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fb50 	bl	80086ac <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2002d5f0 	.word	0x2002d5f0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 f9d9 	bl	80083d8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 ff40 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 ff3a 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 ff34 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 ff2e 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 ff28 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 ff22 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 ff1c 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 ff16 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 ff10 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 ff0a 	bl	8006eac <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fefe 	bl	8006eac <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fef8 	bl	8006eac <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fab1 	bl	8014690 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00b f908 	bl	800c3dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00b f904 	bl	800c3dc <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2002d844 	.word	0x2002d844
 80011f0:	2002d528 	.word	0x2002d528
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fa37 	bl	80018cc <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa4b 	bl	80018f8 <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fd0a 	bl	8010e90 <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2002c434 	.word	0x2002c434

0800148c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write_float+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write_float+0x98>)
 80014c6:	f012 f953 	bl	8013770 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write_float+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write_float+0x9c>)
 80014d8:	f00f fd4e 	bl	8010f78 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write_float+0x9c>)
 80014e2:	f00f fd49 	bl	8010f78 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write_float+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write_float+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write_float+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write_float+0x9c>)
 80014f4:	f00f fab7 	bl	8010a66 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 fa18 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write_float+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017790 	.word	0x08017790
 8001524:	2002c3a4 	.word	0x2002c3a4
 8001528:	2002c434 	.word	0x2002c434
 800152c:	2002c424 	.word	0x2002c424

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9c0 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fcc5 	bl	8010ee4 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f ff30 	bl	80113c0 <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f fcbf 	bl	8010ee4 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f9c7 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f012 f8ee 	bl	8013770 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fcec 	bl	8010f78 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f fa5a 	bl	8010a66 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f9bb 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fc5e 	bl	8010e90 <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2002c2a4 	.word	0x2002c2a4
 80015e4:	2002b164 	.word	0x2002b164
 80015e8:	080177ac 	.word	0x080177ac
 80015ec:	08017790 	.word	0x08017790
 80015f0:	2002c3a4 	.word	0x2002c3a4
 80015f4:	2002c434 	.word	0x2002c434
 80015f8:	2002c424 	.word	0x2002c424

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f95a 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fc5f 	bl	8010ee4 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f feca 	bl	80113c0 <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fc59 	bl	8010ee4 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f961 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%lf\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f012 f88c 	bl	8013770 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f fc8a 	bl	8010f78 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f f9f8 	bl	8010a66 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f959 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fbfc 	bl	8010e90 <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2002c2a4 	.word	0x2002c2a4
 80016a8:	2002b164 	.word	0x2002b164
 80016ac:	080177ac 	.word	0x080177ac
 80016b0:	080177a0 	.word	0x080177a0
 80016b4:	2002c3a4 	.word	0x2002c3a4
 80016b8:	2002c434 	.word	0x2002c434
 80016bc:	2002c424 	.word	0x2002c424

080016c0 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f8f6 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e0:	f000 f90a 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016e4:	e019      	b.n	800171a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <sd_read_array_double+0x80>)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <sd_read_array_double+0x84>)
 80016f6:	f012 f88f 	bl	8013818 <siscanf>
		i++;
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	db03      	blt.n	800171a <sd_read_array_double+0x5a>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <sd_read_array_double+0x88>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <sd_read_array_double+0x84>)
 8001720:	f010 f82c 	bl	801177c <f_gets>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1dd      	bne.n	80016e6 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800172a:	f000 f8ff 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <sd_read_array_double+0x88>)
 8001730:	f00f fbae 	bl	8010e90 <f_close>

	return ret;
 8001734:	7d7b      	ldrb	r3, [r7, #21]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	080177a8 	.word	0x080177a8
 8001744:	2002c3a4 	.word	0x2002c3a4
 8001748:	2002c434 	.word	0x2002c434

0800174c <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f8b2 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <sd_write_array_int+0xa0>)
 8001772:	f00f fbb7 	bl	8010ee4 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <sd_write_array_int+0xa4>)
 8001778:	f00f fe22 	bl	80113c0 <f_unlink>
		f_chdir("..");
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <sd_write_array_int+0xa8>)
 800177e:	f00f fbb1 	bl	8010ee4 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001782:	f000 f8b9 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001786:	2300      	movs	r3, #0
 8001788:	82fb      	strh	r3, [r7, #22]
 800178a:	e021      	b.n	80017d0 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 800178c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <sd_write_array_int+0xac>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <sd_write_array_int+0xb0>)
 800179e:	f011 ffe7 	bl	8013770 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <sd_write_array_int+0xb4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <sd_write_array_int+0xb4>)
 80017aa:	f00f fbe5 	bl	8010f78 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <sd_write_array_int+0xb0>)
 80017b0:	f7fe fd26 	bl	8000200 <strlen>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <sd_write_array_int+0xb8>)
 80017b8:	4910      	ldr	r1, [pc, #64]	; (80017fc <sd_write_array_int+0xb0>)
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <sd_write_array_int+0xb4>)
 80017bc:	f00f f953 	bl	8010a66 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c0:	f000 f8b4 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	82fb      	strh	r3, [r7, #22]
 80017d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbd7      	blt.n	800178c <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <sd_write_array_int+0xb4>)
 80017de:	f00f fb57 	bl	8010e90 <f_close>

	return ret;
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2002c2a4 	.word	0x2002c2a4
 80017f0:	2002b164 	.word	0x2002b164
 80017f4:	080177ac 	.word	0x080177ac
 80017f8:	080177b0 	.word	0x080177b0
 80017fc:	2002c3a4 	.word	0x2002c3a4
 8001800:	2002c434 	.word	0x2002c434
 8001804:	2002c424 	.word	0x2002c424

08001808 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f852 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001828:	f000 f866 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800182c:	e019      	b.n	8001862 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <sd_read_array_int+0x80>)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <sd_read_array_int+0x84>)
 800183e:	f011 ffeb 	bl	8013818 <siscanf>
		i++;
 8001842:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800184e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	429a      	cmp	r2, r3
 8001858:	db03      	blt.n	8001862 <sd_read_array_int+0x5a>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3b01      	subs	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <sd_read_array_int+0x88>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <sd_read_array_int+0x84>)
 8001868:	f00f ff88 	bl	801177c <f_gets>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1dd      	bne.n	800182e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001872:	f000 f85b 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <sd_read_array_int+0x88>)
 8001878:	f00f fb0a 	bl	8010e90 <f_close>

	return ret;
 800187c:	7d7b      	ldrb	r3, [r7, #21]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	080177b4 	.word	0x080177b4
 800188c:	2002c3a4 	.word	0x2002c3a4
 8001890:	2002c434 	.word	0x2002c434

08001894 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800189e:	2201      	movs	r2, #1
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <sd_mount+0x30>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <sd_mount+0x34>)
 80018a4:	f00e fd6c 	bl	8010380 <f_mount>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <sd_mount+0x20>
 80018ae:	2301      	movs	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e001      	b.n	80018b8 <sd_mount+0x24>
	else ret = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	080177b8 	.word	0x080177b8
 80018c8:	2002b264 	.word	0x2002b264

080018cc <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <create_path+0x24>)
 80018da:	f012 f80c 	bl	80138f6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <create_path+0x28>)
 80018e2:	f012 f808 	bl	80138f6 <strcpy>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2002c2a4 	.word	0x2002c2a4
 80018f4:	2002b164 	.word	0x2002b164

080018f8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <fopen_folder_and_file+0x24>)
 80018fe:	f00f fe21 	bl	8011544 <f_mkdir>

	f_chdir(dirpath);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <fopen_folder_and_file+0x24>)
 8001904:	f00f faee 	bl	8010ee4 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001908:	2213      	movs	r2, #19
 800190a:	4905      	ldr	r1, [pc, #20]	; (8001920 <fopen_folder_and_file+0x28>)
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <fopen_folder_and_file+0x2c>)
 800190e:	f00e fd7d 	bl	801040c <f_open>

	f_chdir("..");
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <fopen_folder_and_file+0x30>)
 8001914:	f00f fae6 	bl	8010ee4 <f_chdir>


}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2002c2a4 	.word	0x2002c2a4
 8001920:	2002b164 	.word	0x2002b164
 8001924:	2002c434 	.word	0x2002c434
 8001928:	080177ac 	.word	0x080177ac

0800192c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e007      	b.n	8001948 <bufclear+0x1c>
		buffer[i] = '\0';
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <bufclear+0x30>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	ddf4      	ble.n	8001938 <bufclear+0xc>
	}
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2002c3a4 	.word	0x2002c3a4

08001960 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <read_byte+0x54>)
 800197c:	f006 fd2c 	bl	80083d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001980:	f107 010f 	add.w	r1, r7, #15
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2201      	movs	r2, #1
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <read_byte+0x58>)
 800198a:	f009 feed 	bl	800b768 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800198e:	f107 010e 	add.w	r1, r7, #14
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2201      	movs	r2, #1
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <read_byte+0x58>)
 8001998:	f00a f81a 	bl	800b9d0 <HAL_SPI_Receive>
	CS_SET;
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <read_byte+0x54>)
 80019a4:	f006 fd18 	bl	80083d8 <HAL_GPIO_WritePin>

	return val;
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020400 	.word	0x40020400
 80019b8:	2002d4d0 	.word	0x2002d4d0

080019bc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <write_byte+0x54>)
 80019de:	f006 fcfb 	bl	80083d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2201      	movs	r2, #1
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <write_byte+0x58>)
 80019ec:	f009 febc 	bl	800b768 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80019f0:	1db9      	adds	r1, r7, #6
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	2201      	movs	r2, #1
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <write_byte+0x58>)
 80019f8:	f009 feb6 	bl	800b768 <HAL_SPI_Transmit>
	CS_SET;
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <write_byte+0x54>)
 8001a04:	f006 fce8 	bl	80083d8 <HAL_GPIO_WritePin>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020400 	.word	0x40020400
 8001a14:	2002d4d0 	.word	0x2002d4d0

08001a18 <IMU_init>:

uint16_t IMU_init() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff9c 	bl	8001960 <read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	2be0      	cmp	r3, #224	; 0xe0
 8001a30:	d119      	bne.n	8001a66 <IMU_init+0x4e>
		ret = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001a36:	2101      	movs	r1, #1
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffbf 	bl	80019bc <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001a3e:	2110      	movs	r1, #16
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7ff ffbb 	bl	80019bc <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001a46:	2120      	movs	r1, #32
 8001a48:	207f      	movs	r0, #127	; 0x7f
 8001a4a:	f7ff ffb7 	bl	80019bc <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001a4e:	2106      	movs	r1, #6
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffb3 	bl	80019bc <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001a56:	2106      	movs	r1, #6
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff ffaf 	bl	80019bc <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	207f      	movs	r0, #127	; 0x7f
 8001a62:	f7ff ffab 	bl	80019bc <write_byte>
	}
	return ret;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <read_gyro_data>:

void read_gyro_data() {
 8001a70:	b598      	push	{r3, r4, r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a74:	2033      	movs	r0, #51	; 0x33
 8001a76:	f7ff ff73 	bl	8001960 <read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	2034      	movs	r0, #52	; 0x34
 8001a82:	f7ff ff6d 	bl	8001960 <read_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <read_gyro_data+0x64>)
 8001a90:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a92:	2035      	movs	r0, #53	; 0x35
 8001a94:	f7ff ff64 	bl	8001960 <read_byte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21c      	sxth	r4, r3
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f7ff ff5e 	bl	8001960 <read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <read_gyro_data+0x68>)
 8001aae:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001ab0:	2037      	movs	r0, #55	; 0x37
 8001ab2:	f7ff ff55 	bl	8001960 <read_byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21c      	sxth	r4, r3
 8001abc:	2038      	movs	r0, #56	; 0x38
 8001abe:	f7ff ff4f 	bl	8001960 <read_byte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <read_gyro_data+0x6c>)
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	bd98      	pop	{r3, r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2002d46c 	.word	0x2002d46c
 8001ad8:	2002d46a 	.word	0x2002d46a
 8001adc:	2002d464 	.word	0x2002d464

08001ae0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

uint16_t mon_zg;

IMU::IMU() : array_idx(0), offset_(0)
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
{
	for(uint16_t i = 0; i < STORE_NUM; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	81fb      	strh	r3, [r7, #14]
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d82a      	bhi.n	8001b58 <_ZN3IMUC1Ev+0x78>
		xa_store_[i] = 0;
 8001b02:	89fa      	ldrh	r2, [r7, #14]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2100      	movs	r1, #0
 8001b08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		ya_store_[i] = 0;
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	3304      	adds	r3, #4
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	805a      	strh	r2, [r3, #2]
		za_store_[i] = 0;
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	3308      	adds	r3, #8
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	809a      	strh	r2, [r3, #4]
		xg_store_[i] = 0;
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	330c      	adds	r3, #12
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	80da      	strh	r2, [r3, #6]
		yg_store_[i] = 0;
 8001b36:	89fa      	ldrh	r2, [r7, #14]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3214      	adds	r2, #20
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		zg_store_[i] = 0;
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	3318      	adds	r3, #24
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	805a      	strh	r2, [r3, #2]
	for(uint16_t i = 0; i < STORE_NUM; i++){
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	3301      	adds	r3, #1
 8001b54:	81fb      	strh	r3, [r7, #14]
 8001b56:	e7d1      	b.n	8001afc <_ZN3IMUC1Ev+0x1c>
	}

}
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b70:	f7ff ff52 	bl	8001a18 <IMU_init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <_ZN3IMU4initEv+0x24>)
 8001b7e:	f011 fd75 	bl	801366c <iprintf>

}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	080177bc 	.word	0x080177bc

08001b90 <_ZN3IMU11storeValuesEv>:

void IMU::storeValues()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b98:	f7ff ff6a 	bl	8001a70 <read_gyro_data>
	//read_accel_data();

	//xa_store_[array_idx] = xa;
	//ya_store_[array_idx] = ya;
	//za_store_[array_idx] = za;
	xg_store_[array_idx] = xg;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <_ZN3IMU11storeValuesEv+0x74>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b219      	sxth	r1, r3
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	f100 030c 	add.w	r3, r0, #12
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	80da      	strh	r2, [r3, #6]
	yg_store_[array_idx] = yg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <_ZN3IMU11storeValuesEv+0x78>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3214      	adds	r2, #20
 8001bca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	zg_store_[array_idx] = zg;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <_ZN3IMU11storeValuesEv+0x7c>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b219      	sxth	r1, r3
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	f100 0318 	add.w	r3, r0, #24
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	460a      	mov	r2, r1
 8001be8:	805a      	strh	r2, [r3, #2]

	if(array_idx >= STORE_NUM) array_idx = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d903      	bls.n	8001bfc <_ZN3IMU11storeValuesEv+0x6c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2002d46c 	.word	0x2002d46c
 8001c08:	2002d46a 	.word	0x2002d46a
 8001c0c:	2002d464 	.word	0x2002d464

08001c10 <_ZN3IMU12updateValuesEv>:
void IMU::updateValues()
{
 8001c10:	b480      	push	{r7}
 8001c12:	b08f      	sub	sp, #60	; 0x3c
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	// heap value
	float temp_val[10];
	for(uint8_t i = 0; i < STORE_NUM; i++){
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d81a      	bhi.n	8001c5c <_ZN3IMU12updateValuesEv+0x4c>
		temp_val[i] = zg_store_[i];
 8001c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001c36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c3a:	ee07 2a90 	vmov	s15, r2
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b30      	subs	r3, #48	; 0x30
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < STORE_NUM; i++){
 8001c50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c54:	3301      	adds	r3, #1
 8001c56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c5a:	e7e0      	b.n	8001c1e <_ZN3IMU12updateValuesEv+0xe>
	}

	// sort
	for(uint8_t i = 0; i < STORE_NUM; i++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001c62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d84d      	bhi.n	8001d06 <_ZN3IMU12updateValuesEv+0xf6>
		for (uint8_t j = i+1; j < STORE_NUM; j++) {
 8001c6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001c74:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d83e      	bhi.n	8001cfa <_ZN3IMU12updateValuesEv+0xea>
			if(temp_val[i] < temp_val[j]){
 8001c7c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c86:	4413      	add	r3, r2
 8001c88:	3b30      	subs	r3, #48	; 0x30
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b30      	subs	r3, #48	; 0x30
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d521      	bpl.n	8001cee <_ZN3IMU12updateValuesEv+0xde>
				float tmp = temp_val[j];
 8001caa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b30      	subs	r3, #48	; 0x30
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
				temp_val[j] = temp_val[i];
 8001cbc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001cc0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cca:	440a      	add	r2, r1
 8001ccc:	3a30      	subs	r2, #48	; 0x30
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3b30      	subs	r3, #48	; 0x30
 8001cda:	601a      	str	r2, [r3, #0]
				temp_val[i] = tmp;
 8001cdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b30      	subs	r3, #48	; 0x30
 8001cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cec:	601a      	str	r2, [r3, #0]
		for (uint8_t j = i+1; j < STORE_NUM; j++) {
 8001cee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001cf8:	e7bc      	b.n	8001c74 <_ZN3IMU12updateValuesEv+0x64>
	for(uint8_t i = 0; i < STORE_NUM; i++){
 8001cfa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d04:	e7ad      	b.n	8001c62 <_ZN3IMU12updateValuesEv+0x52>
			}
		}
	}

	zg_ = temp_val[2];
 8001d06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0e:	ee17 3a90 	vmov	r3, s15
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	mon_zg = zg_;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <_ZN3IMU12updateValuesEv+0x124>)
 8001d24:	801a      	strh	r2, [r3, #0]

}
 8001d26:	bf00      	nop
 8001d28:	373c      	adds	r7, #60	; 0x3c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000200 	.word	0x20000200

08001d38 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe fc0b 	bl	8000578 <__aeabi_f2d>
 8001d62:	a316      	add	r3, pc, #88	; (adr r3, 8001dbc <_ZN3IMU8getOmegaEv+0x84>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fd88 	bl	800087c <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d76:	a313      	add	r3, pc, #76	; (adr r3, 8001dc4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fc52 	bl	8000628 <__aeabi_dmul>
 8001d84:	4603      	mov	r3, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <_ZN3IMU8getOmegaEv+0x80>)
 8001d92:	f7fe fd73 	bl	800087c <__aeabi_ddiv>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	f7fe ff3b 	bl	8000c18 <__aeabi_d2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	ee07 3a90 	vmov	s15, r3
}
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	f3af 8000 	nop.w
 8001db8:	40668000 	.word	0x40668000
 8001dbc:	66666666 	.word	0x66666666
 8001dc0:	40306666 	.word	0x40306666
 8001dc4:	54411744 	.word	0x54411744
 8001dc8:	400921fb 	.word	0x400921fb

08001dcc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001dd4:	466b      	mov	r3, sp
 8001dd6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ddc:	f005 f866 	bl	8006eac <HAL_Delay>
	int16_t num = 2000;
 8001de0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001de4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001de6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dea:	1e5d      	subs	r5, r3, #1
 8001dec:	61bd      	str	r5, [r7, #24]
 8001dee:	462b      	mov	r3, r5
 8001df0:	3301      	adds	r3, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f04f 0400 	mov.w	r4, #0
 8001e00:	0154      	lsls	r4, r2, #5
 8001e02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e06:	014b      	lsls	r3, r1, #5
 8001e08:	462b      	mov	r3, r5
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f04f 0400 	mov.w	r4, #0
 8001e1a:	0154      	lsls	r4, r2, #5
 8001e1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e20:	014b      	lsls	r3, r1, #5
 8001e22:	462b      	mov	r3, r5
 8001e24:	3301      	adds	r3, #1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	3303      	adds	r3, #3
 8001e2a:	3307      	adds	r3, #7
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	ebad 0d03 	sub.w	sp, sp, r3
 8001e34:	466b      	mov	r3, sp
 8001e36:	3303      	adds	r3, #3
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	83fb      	strh	r3, [r7, #30]
 8001e42:	8bfa      	ldrh	r2, [r7, #30]
 8001e44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	da13      	bge.n	8001e74 <_ZN3IMU11calibrationEv+0xa8>
		zg_vals[i] = float(zg_);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8001e52:	8bfb      	ldrh	r3, [r7, #30]
 8001e54:	ee07 2a90 	vmov	s15, r2
 8001e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001e66:	2002      	movs	r0, #2
 8001e68:	f005 f820 	bl	8006eac <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001e6c:	8bfb      	ldrh	r3, [r7, #30]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	83fb      	strh	r3, [r7, #30]
 8001e72:	e7e6      	b.n	8001e42 <_ZN3IMU11calibrationEv+0x76>
	for(const auto &v : zg_vals){
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d00e      	beq.n	8001eaa <_ZN3IMU11calibrationEv+0xde>
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	e7ec      	b.n	8001e84 <_ZN3IMU11calibrationEv+0xb8>
	offset_ = sum / num;
 8001eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8001ec4:	46b5      	mov	sp, r6
}
 8001ec6:	bf00      	nop
 8001ec8:	372c      	adds	r7, #44	; 0x2c
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ed0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ee0:	79bb      	ldrb	r3, [r7, #6]
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	1dfa      	adds	r2, r7, #7
 8001ee6:	2364      	movs	r3, #100	; 0x64
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <INA260_read+0x50>)
 8001eee:	f006 fbdd 	bl	80086ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	b299      	uxth	r1, r3
 8001ef6:	f107 020c 	add.w	r2, r7, #12
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2302      	movs	r3, #2
 8001f00:	4807      	ldr	r0, [pc, #28]	; (8001f20 <INA260_read+0x50>)
 8001f02:	f006 fcd1 	bl	80088a8 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001f06:	7b3b      	ldrb	r3, [r7, #12]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f16:	89fb      	ldrh	r3, [r7, #14]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2002d684 	.word	0x2002d684

08001f24 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	4603      	mov	r3, r0
 8001f38:	71bb      	strb	r3, [r7, #6]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	717b      	strb	r3, [r7, #5]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	733b      	strb	r3, [r7, #12]
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	737b      	strb	r3, [r7, #13]
 8001f4a:	797b      	ldrb	r3, [r7, #5]
 8001f4c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001f4e:	793b      	ldrb	r3, [r7, #4]
 8001f50:	b299      	uxth	r1, r3
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	2364      	movs	r3, #100	; 0x64
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <INA260_write+0x48>)
 8001f5e:	f006 fba5 	bl	80086ac <HAL_I2C_Master_Transmit>
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2002d684 	.word	0x2002d684

08001f70 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	71bb      	strb	r3, [r7, #6]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001f82:	797b      	ldrb	r3, [r7, #5]
 8001f84:	79ba      	ldrb	r2, [r7, #6]
 8001f86:	79f9      	ldrb	r1, [r7, #7]
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff ffcb 	bl	8001f24 <INA260_write>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	21df      	movs	r1, #223	; 0xdf
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff ffe2 	bl	8001f70 <setConfig>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
{

}
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	482a      	ldr	r0, [pc, #168]	; (8002088 <_ZN8JoyStick8getValueEv+0xbc>)
 8001fde:	f006 f9e3 	bl	80083a8 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <_ZN8JoyStick8getValueEv+0x2e>
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4823      	ldr	r0, [pc, #140]	; (800208c <_ZN8JoyStick8getValueEv+0xc0>)
 8001ffe:	f006 f9d3 	bl	80083a8 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <_ZN8JoyStick8getValueEv+0x4e>
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800201a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201e:	481a      	ldr	r0, [pc, #104]	; (8002088 <_ZN8JoyStick8getValueEv+0xbc>)
 8002020:	f006 f9c2 	bl	80083a8 <HAL_GPIO_ReadPin>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <_ZN8JoyStick8getValueEv+0x70>
 8002034:	89fb      	ldrh	r3, [r7, #14]
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800203c:	2104      	movs	r1, #4
 800203e:	4814      	ldr	r0, [pc, #80]	; (8002090 <_ZN8JoyStick8getValueEv+0xc4>)
 8002040:	f006 f9b2 	bl	80083a8 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <_ZN8JoyStick8getValueEv+0x90>
 8002054:	89fb      	ldrh	r3, [r7, #14]
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	480a      	ldr	r0, [pc, #40]	; (8002088 <_ZN8JoyStick8getValueEv+0xbc>)
 8002060:	f006 f9a2 	bl	80083a8 <HAL_GPIO_ReadPin>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <_ZN8JoyStick8getValueEv+0xb0>
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800207c:	89fb      	ldrh	r3, [r7, #14]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40020400 	.word	0x40020400

08002094 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b52      	cmp	r3, #82	; 0x52
 80020a4:	d112      	bne.n	80020cc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ac:	4856      	ldr	r0, [pc, #344]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80020ae:	f006 f993 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b8:	4853      	ldr	r0, [pc, #332]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80020ba:	f006 f98d 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c4:	4850      	ldr	r0, [pc, #320]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80020c6:	f006 f987 	bl	80083d8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80020ca:	e098      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	2b47      	cmp	r3, #71	; 0x47
 80020d0:	d112      	bne.n	80020f8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d8:	484b      	ldr	r0, [pc, #300]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80020da:	f006 f97d 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e4:	4848      	ldr	r0, [pc, #288]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80020e6:	f006 f977 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f0:	4845      	ldr	r0, [pc, #276]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80020f2:	f006 f971 	bl	80083d8 <HAL_GPIO_WritePin>
}
 80020f6:	e082      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b42      	cmp	r3, #66	; 0x42
 80020fc:	d112      	bne.n	8002124 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002104:	4840      	ldr	r0, [pc, #256]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 8002106:	f006 f967 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002110:	483d      	ldr	r0, [pc, #244]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 8002112:	f006 f961 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800211c:	483a      	ldr	r0, [pc, #232]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 800211e:	f006 f95b 	bl	80083d8 <HAL_GPIO_WritePin>
}
 8002122:	e06c      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b43      	cmp	r3, #67	; 0x43
 8002128:	d112      	bne.n	8002150 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002130:	4835      	ldr	r0, [pc, #212]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 8002132:	f006 f951 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213c:	4832      	ldr	r0, [pc, #200]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 800213e:	f006 f94b 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002148:	482f      	ldr	r0, [pc, #188]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 800214a:	f006 f945 	bl	80083d8 <HAL_GPIO_WritePin>
}
 800214e:	e056      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	2b4d      	cmp	r3, #77	; 0x4d
 8002154:	d112      	bne.n	800217c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800215c:	482a      	ldr	r0, [pc, #168]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 800215e:	f006 f93b 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002168:	4827      	ldr	r0, [pc, #156]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 800216a:	f006 f935 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002174:	4824      	ldr	r0, [pc, #144]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 8002176:	f006 f92f 	bl	80083d8 <HAL_GPIO_WritePin>
}
 800217a:	e040      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	2b59      	cmp	r3, #89	; 0x59
 8002180:	d112      	bne.n	80021a8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002188:	481f      	ldr	r0, [pc, #124]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 800218a:	f006 f925 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002194:	481c      	ldr	r0, [pc, #112]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 8002196:	f006 f91f 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a0:	4819      	ldr	r0, [pc, #100]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021a2:	f006 f919 	bl	80083d8 <HAL_GPIO_WritePin>
}
 80021a6:	e02a      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	2b57      	cmp	r3, #87	; 0x57
 80021ac:	d112      	bne.n	80021d4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b4:	4814      	ldr	r0, [pc, #80]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021b6:	f006 f90f 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c0:	4811      	ldr	r0, [pc, #68]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021c2:	f006 f909 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021cc:	480e      	ldr	r0, [pc, #56]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021ce:	f006 f903 	bl	80083d8 <HAL_GPIO_WritePin>
}
 80021d2:	e014      	b.n	80021fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b7e      	cmp	r3, #126	; 0x7e
 80021d8:	d111      	bne.n	80021fe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021e2:	f006 f8f9 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021ee:	f006 f8f3 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <_ZN3LED9fullColorEc+0x174>)
 80021fa:	f006 f8ed 	bl	80083d8 <HAL_GPIO_WritePin>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020000 	.word	0x40020000

0800220c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
 8002218:	4613      	mov	r3, r2
 800221a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222a:	4813      	ldr	r0, [pc, #76]	; (8002278 <_ZN3LED2LREaa+0x6c>)
 800222c:	f006 f8d4 	bl	80083d8 <HAL_GPIO_WritePin>
 8002230:	e009      	b.n	8002246 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <_ZN3LED2LREaa+0x6c>)
 8002242:	f006 f8c9 	bl	80083d8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002246:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <_ZN3LED2LREaa+0x6c>)
 8002256:	f006 f8bf 	bl	80083d8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800225a:	e009      	b.n	8002270 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800225c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226a:	4803      	ldr	r0, [pc, #12]	; (8002278 <_ZN3LED2LREaa+0x6c>)
 800226c:	f006 f8b4 	bl	80083d8 <HAL_GPIO_WritePin>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40020000 	.word	0x40020000

0800227c <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 800227c:	b580      	push	{r7, lr}
 800227e:	b092      	sub	sp, #72	; 0x48
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fe92 	bl	8001fb4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	331c      	adds	r3, #28
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
 800229e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d008      	beq.n	80022b8 <_ZN10LineSensorC1Ev+0x3c>
 80022a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2200      	movs	r2, #0
 80022ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80022b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b2:	3302      	adds	r3, #2
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
 80022b6:	e7f2      	b.n	800229e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	3338      	adds	r3, #56	; 0x38
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d009      	beq.n	80022e6 <_ZN10LineSensorC1Ev+0x6a>
 80022d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80022de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e0:	3304      	adds	r3, #4
 80022e2:	643b      	str	r3, [r7, #64]	; 0x40
 80022e4:	e7f1      	b.n	80022ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3338      	adds	r3, #56	; 0x38
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d009      	beq.n	8002314 <_ZN10LineSensorC1Ev+0x98>
 8002300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002302:	617b      	str	r3, [r7, #20]
		m = 0;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800230c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230e:	3304      	adds	r3, #4
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002312:	e7f1      	b.n	80022f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3338      	adds	r3, #56	; 0x38
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	429a      	cmp	r2, r3
 800232c:	d009      	beq.n	8002342 <_ZN10LineSensorC1Ev+0xc6>
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002338:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233c:	3304      	adds	r3, #4
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002340:	e7f1      	b.n	8002326 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	3748      	adds	r7, #72	; 0x48
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	220e      	movs	r2, #14
 8002358:	4619      	mov	r1, r3
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800235c:	f004 fe0c 	bl	8006f78 <HAL_ADC_Start_DMA>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2002d5a8 	.word	0x2002d5a8

0800236c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b0d      	cmp	r3, #13
 800237c:	dc2f      	bgt.n	80023de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3392      	adds	r3, #146	; 0x92
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	33a0      	adds	r3, #160	; 0xa0
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a5b      	subs	r3, r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	440b      	add	r3, r1
 80023ca:	3306      	adds	r3, #6
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e7cc      	b.n	8002378 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b09      	cmp	r3, #9
 80023f0:	d902      	bls.n	80023f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]


}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000202 	.word	0x20000202

08002408 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002408:	b490      	push	{r4, r7}
 800240a:	b08e      	sub	sp, #56	; 0x38
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800241a:	2b0d      	cmp	r3, #13
 800241c:	f200 8087 	bhi.w	800252e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002426:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800242a:	2b09      	cmp	r3, #9
 800242c:	d81c      	bhi.n	8002468 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800242e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002432:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002436:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4423      	add	r3, r4
 8002446:	3306      	adds	r3, #6
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4403      	add	r3, r0
 800244c:	3304      	adds	r3, #4
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	008b      	lsls	r3, r1, #2
 8002452:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002456:	440b      	add	r3, r1
 8002458:	3b30      	subs	r3, #48	; 0x30
 800245a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800245c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002460:	3301      	adds	r3, #1
 8002462:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002466:	e7de      	b.n	8002426 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800246e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002472:	2b09      	cmp	r3, #9
 8002474:	d84d      	bhi.n	8002512 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002476:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800247a:	3301      	adds	r3, #1
 800247c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002480:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002484:	2b09      	cmp	r3, #9
 8002486:	d83e      	bhi.n	8002506 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002488:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002492:	4413      	add	r3, r2
 8002494:	3b30      	subs	r3, #48	; 0x30
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a4:	4413      	add	r3, r2
 80024a6:	3b30      	subs	r3, #48	; 0x30
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d521      	bpl.n	80024fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80024b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024c0:	4413      	add	r3, r2
 80024c2:	3b30      	subs	r3, #48	; 0x30
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80024c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80024cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024d6:	440a      	add	r2, r1
 80024d8:	3a30      	subs	r2, #48	; 0x30
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024e2:	440b      	add	r3, r1
 80024e4:	3b30      	subs	r3, #48	; 0x30
 80024e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80024e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f2:	4413      	add	r3, r2
 80024f4:	3b30      	subs	r3, #48	; 0x30
 80024f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80024fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024fe:	3301      	adds	r3, #1
 8002500:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002504:	e7bc      	b.n	8002480 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002506:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800250a:	3301      	adds	r3, #1
 800250c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002510:	e7ad      	b.n	800246e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	33b0      	adds	r3, #176	; 0xb0
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002526:	3301      	adds	r3, #1
 8002528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800252c:	e773      	b.n	8002416 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800252e:	bf00      	nop
 8002530:	3738      	adds	r7, #56	; 0x38
 8002532:	46bd      	mov	sp, r7
 8002534:	bc90      	pop	{r4, r7}
 8002536:	4770      	bx	lr

08002538 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	3338      	adds	r3, #56	; 0x38
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	429a      	cmp	r2, r3
 800255c:	d012      	beq.n	8002584 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80025a4 <_ZN10LineSensor13emergencyStopEv+0x6c>
 800256c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	db02      	blt.n	800257c <_ZN10LineSensor13emergencyStopEv+0x44>
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	3301      	adds	r3, #1
 800257a:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	3304      	adds	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e7e8      	b.n	8002556 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002584:	7ffb      	ldrb	r3, [r7, #31]
 8002586:	2b0d      	cmp	r3, #13
 8002588:	d902      	bls.n	8002590 <_ZN10LineSensor13emergencyStopEv+0x58>
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
 800258e:	e001      	b.n	8002594 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002594:	7dfb      	ldrb	r3, [r7, #23]

}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	44160000 	.word	0x44160000

080025a8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
	motor_ = motor;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 800262e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800263a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002652:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002666:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002672:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 800267e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800268a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002696:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80026a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	ee07 3a90 	vmov	s15, r3

}
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	0000      	movs	r0, r0
 80026c4:	0000      	movs	r0, r0
	...

080026c8 <_ZN9LineTrace23pidAngularVelocityTraceEv>:
	pre_diff = diff;

}

void LineTrace::pidAngularVelocityTrace()
{
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff94 	bl	80025fe <_ZN9LineTrace9calcErrorEv>
 80026d6:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;
	float target_omega = 0;
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	613b      	str	r3, [r7, #16]

	p = kp_velo_ * diff;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80026e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	edc7 7a03 	vstr	s15, [r7, #12]
	d = kd_velo_ * (diff - pre_diff) / DELTA_T;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	edd7 6a05 	vldr	s13, [r7, #20]
 8002702:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd ff33 	bl	8000578 <__aeabi_f2d>
 8002712:	a329      	add	r3, pc, #164	; (adr r3, 80027b8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe f8b0 	bl	800087c <__aeabi_ddiv>
 800271c:	4603      	mov	r3, r0
 800271e:	460c      	mov	r4, r1
 8002720:	4618      	mov	r0, r3
 8002722:	4621      	mov	r1, r4
 8002724:	f7fe fa78 	bl	8000c18 <__aeabi_d2f>
 8002728:	4603      	mov	r3, r0
 800272a:	60bb      	str	r3, [r7, #8]
	i += ki_velo_ * diff * DELTA_T;
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff21 	bl	8000578 <__aeabi_f2d>
 8002736:	4604      	mov	r4, r0
 8002738:	460d      	mov	r5, r1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002740:	edd7 7a05 	vldr	s15, [r7, #20]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	ee17 0a90 	vmov	r0, s15
 800274c:	f7fd ff14 	bl	8000578 <__aeabi_f2d>
 8002750:	a319      	add	r3, pc, #100	; (adr r3, 80027b8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	f7fd ff67 	bl	8000628 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fd fdab 	bl	80002bc <__adddf3>
 8002766:	4603      	mov	r3, r0
 8002768:	460c      	mov	r4, r1
 800276a:	4618      	mov	r0, r3
 800276c:	4621      	mov	r1, r4
 800276e:	f7fe fa53 	bl	8000c18 <__aeabi_d2f>
 8002772:	4602      	mov	r2, r0
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002776:	601a      	str	r2, [r3, #0]

	target_omega = p + d + i;
 8002778:	ed97 7a03 	vldr	s14, [r7, #12]
 800277c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278e:	edc7 7a04 	vstr	s15, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800279c:	edd7 0a04 	vldr	s1, [r7, #16]
 80027a0:	eeb0 0a67 	vmov.f32	s0, s15
 80027a4:	4610      	mov	r0, r2
 80027a6:	f001 f9e7 	bl	8003b78 <_ZN12VelocityCtrl11setVelocityEff>

	pre_diff = diff;
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	6013      	str	r3, [r2, #0]

}
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdb0      	pop	{r4, r5, r7, pc}
 80027b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027bc:	3f50624d 	.word	0x3f50624d
 80027c0:	20000204 	.word	0x20000204
 80027c4:	20000208 	.word	0x20000208

080027c8 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	double temp_kp_v, temp_ki_v, temp_kd_v;
	sd_read_array_double("Params", "kp_v.txt", 1, &temp_kp_v);
 80027d0:	f107 0318 	add.w	r3, r7, #24
 80027d4:	2201      	movs	r2, #1
 80027d6:	491a      	ldr	r1, [pc, #104]	; (8002840 <_ZN9LineTrace4initEv+0x78>)
 80027d8:	481a      	ldr	r0, [pc, #104]	; (8002844 <_ZN9LineTrace4initEv+0x7c>)
 80027da:	f7fe ff71 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "ki_v.txt", 1, &temp_ki_v);
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	2201      	movs	r2, #1
 80027e4:	4918      	ldr	r1, [pc, #96]	; (8002848 <_ZN9LineTrace4initEv+0x80>)
 80027e6:	4817      	ldr	r0, [pc, #92]	; (8002844 <_ZN9LineTrace4initEv+0x7c>)
 80027e8:	f7fe ff6a 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "kd_v.txt", 1, &temp_kd_v);
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	2201      	movs	r2, #1
 80027f2:	4916      	ldr	r1, [pc, #88]	; (800284c <_ZN9LineTrace4initEv+0x84>)
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <_ZN9LineTrace4initEv+0x7c>)
 80027f6:	f7fe ff63 	bl	80016c0 <sd_read_array_double>
	setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 80027fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027fe:	4618      	mov	r0, r3
 8002800:	4621      	mov	r1, r4
 8002802:	f7fe fa09 	bl	8000c18 <__aeabi_d2f>
 8002806:	4605      	mov	r5, r0
 8002808:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800280c:	4618      	mov	r0, r3
 800280e:	4621      	mov	r1, r4
 8002810:	f7fe fa02 	bl	8000c18 <__aeabi_d2f>
 8002814:	4606      	mov	r6, r0
 8002816:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	4621      	mov	r1, r4
 800281e:	f7fe f9fb 	bl	8000c18 <__aeabi_d2f>
 8002822:	4603      	mov	r3, r0
 8002824:	ee01 3a10 	vmov	s2, r3
 8002828:	ee00 6a90 	vmov	s1, r6
 800282c:	ee00 5a10 	vmov	s0, r5
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f826 	bl	8002882 <_ZN9LineTrace11setVeloGainEfff>

}
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283e:	bf00      	nop
 8002840:	080177cc 	.word	0x080177cc
 8002844:	080177d8 	.word	0x080177d8
 8002848:	080177e0 	.word	0x080177e0
 800284c:	080177ec 	.word	0x080177ec

08002850 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	ed87 0a02 	vstr	s0, [r7, #8]
 800285c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002860:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
	kd_ = kd;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	615a      	str	r2, [r3, #20]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_ZN9LineTrace11setVeloGainEfff>:


void LineTrace::setVeloGain(float kp, float ki, float kd)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	ed87 0a02 	vstr	s0, [r7, #8]
 800288e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002892:	ed87 1a00 	vstr	s2, [r7]
	kp_velo_ = kp;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	61da      	str	r2, [r3, #28]
	ki_velo_ = ki;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
	kd_velo_ = kd;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZN9LineTrace6getKpVEv>:
{
	return kd_;
}

float LineTrace::getKpV()
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	return kp_velo_;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	ee07 3a90 	vmov	s15, r3
}
 80028c4:	eeb0 0a67 	vmov.f32	s0, s15
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_ZN9LineTrace6getKiVEv>:
float LineTrace::getKiV()
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
	return ki_velo_;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	ee07 3a90 	vmov	s15, r3
}
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_ZN9LineTrace6getKdVEv>:
float LineTrace::getKdV()
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return kd_velo_;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	ee07 3a90 	vmov	s15, r3
}
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	0000      	movs	r0, r0
 800294c:	0000      	movs	r0, r0
	...

08002950 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d024      	beq.n	80029ac <_ZN9LineTrace4flipEv+0x5c>
		//pidTrace();
		pidAngularVelocityTrace();
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff feb0 	bl	80026c8 <_ZN9LineTrace23pidAngularVelocityTraceEv>
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fde3 	bl	8002538 <_ZN10LineSensor13emergencyStopEv>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d011      	beq.n	800299c <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80029b8 <_ZN9LineTrace4flipEv+0x68>
 8002980:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80029b8 <_ZN9LineTrace4flipEv+0x68>
 8002984:	4618      	mov	r0, r3
 8002986:	f000 f9af 	bl	8002ce8 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	330c      	adds	r3, #12
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fc39 	bl	800220c <_ZN3LED2LREaa>
			led_.LR(0, -1);

		}
	}

}
 800299a:	e007      	b.n	80029ac <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	330c      	adds	r3, #12
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fc30 	bl	800220c <_ZN3LED2LREaa>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	f3af 8000 	nop.w
	...

080029c0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	0000      	movs	r0, r0
	...

080029e0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002a10 <_ZN9LineTrace4stopEv+0x30>
 80029f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002a10 <_ZN9LineTrace4stopEv+0x30>
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f973 	bl	8002ce8 <_ZN5Motor8setRatioEdd>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	f3af 8000 	nop.w
	...

08002a18 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a32:	33b2      	adds	r3, #178	; 0xb2
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a3e:	33b4      	adds	r3, #180	; 0xb4
 8002a40:	2200      	movs	r2, #0
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002a60:	f7fe ff18 	bl	8001894 <sd_mount>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	bf0c      	ite	eq
 8002a6a:	2301      	moveq	r3, #1
 8002a6c:	2300      	movne	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002a74:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002a76:	f010 fe6d 	bl	8013754 <puts>
	  ret = true;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
 8002a7e:	e004      	b.n	8002a8a <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002a80:	4814      	ldr	r0, [pc, #80]	; (8002ad4 <_ZN6Logger10sdCardInitEv+0x80>)
 8002a82:	f010 fe67 	bl	8013754 <puts>
	  ret = false;
 8002a86:	2300      	movs	r3, #0
 8002a88:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002a8a:	2364      	movs	r3, #100	; 0x64
 8002a8c:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002a8e:	f107 0210 	add.w	r2, r7, #16
 8002a92:	2301      	movs	r3, #1
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	2201      	movs	r2, #1
 8002a9a:	490f      	ldr	r1, [pc, #60]	; (8002ad8 <_ZN6Logger10sdCardInitEv+0x84>)
 8002a9c:	480f      	ldr	r0, [pc, #60]	; (8002adc <_ZN6Logger10sdCardInitEv+0x88>)
 8002a9e:	f7fe fe55 	bl	800174c <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	490b      	ldr	r1, [pc, #44]	; (8002ad8 <_ZN6Logger10sdCardInitEv+0x84>)
 8002aaa:	480c      	ldr	r0, [pc, #48]	; (8002adc <_ZN6Logger10sdCardInitEv+0x88>)
 8002aac:	f7fe feac 	bl	8001808 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 8002ab0:	f107 020c 	add.w	r2, r7, #12
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	2201      	movs	r2, #1
 8002abc:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <_ZN6Logger10sdCardInitEv+0x8c>)
 8002abe:	4807      	ldr	r0, [pc, #28]	; (8002adc <_ZN6Logger10sdCardInitEv+0x88>)
 8002ac0:	f7fe fe44 	bl	800174c <sd_write_array_int>

	return ret;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	080177f8 	.word	0x080177f8
 8002ad4:	08017808 	.word	0x08017808
 8002ad8:	08017818 	.word	0x08017818
 8002adc:	08017824 	.word	0x08017824
 8002ae0:	0801782c 	.word	0x0801782c

08002ae4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002af6:	33b0      	adds	r3, #176	; 0xb0
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b04:	33b2      	adds	r3, #178	; 0xb2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b18:	33b2      	adds	r3, #178	; 0xb2
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b26:	33b2      	adds	r3, #178	; 0xb2
 8002b28:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b30:	33b2      	adds	r3, #178	; 0xb2
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d905      	bls.n	8002b48 <_ZN6Logger8storeLogEf+0x64>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b42:	33b2      	adds	r3, #178	; 0xb2
 8002b44:	2200      	movs	r2, #0
 8002b46:	801a      	strh	r2, [r3, #0]
	}
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	68b8      	ldr	r0, [r7, #8]
 8002b70:	f7fe fcde 	bl	8001530 <sd_write_array_float>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002b90:	3330      	adds	r3, #48	; 0x30
 8002b92:	2200      	movs	r2, #0
 8002b94:	9200      	str	r2, [sp, #0]
 8002b96:	f241 7270 	movw	r2, #6000	; 0x1770
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	68b8      	ldr	r0, [r7, #8]
 8002b9e:	f7fe fcc7 	bl	8001530 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f503 4352 	add.w	r3, r3, #53760	; 0xd200
 8002ba8:	33f0      	adds	r3, #240	; 0xf0
 8002baa:	2200      	movs	r2, #0
 8002bac:	9200      	str	r2, [sp, #0]
 8002bae:	f241 7270 	movw	r2, #6000	; 0x1770
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	68b8      	ldr	r0, [r7, #8]
 8002bb6:	f7fe fcbb 	bl	8001530 <sd_write_array_float>
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002bd0:	33b0      	adds	r3, #176	; 0xb0
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002bf0:	33b0      	adds	r3, #176	; 0xb0
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	805a      	strh	r2, [r3, #2]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c2c:	2108      	movs	r1, #8
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <_ZN5Motor4initEv+0x20>)
 8002c30:	f009 fb04 	bl	800c23c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002c34:	210c      	movs	r1, #12
 8002c36:	4803      	ldr	r0, [pc, #12]	; (8002c44 <_ZN5Motor4initEv+0x20>)
 8002c38:	f009 fb00 	bl	800c23c <HAL_TIM_PWM_Start>

}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	2002d568 	.word	0x2002d568

08002c48 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da0d      	bge.n	8002c76 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c60:	481f      	ldr	r0, [pc, #124]	; (8002ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002c62:	f005 fbb9 	bl	80083d8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	425b      	negs	r3, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	81fb      	strh	r3, [r7, #14]
 8002c74:	e00a      	b.n	8002c8c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002c76:	2201      	movs	r2, #1
 8002c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7c:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002c7e:	f005 fbab 	bl	80083d8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da0d      	bge.n	8002cb2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002c96:	2201      	movs	r2, #1
 8002c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c9c:	4810      	ldr	r0, [pc, #64]	; (8002ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002c9e:	f005 fb9b 	bl	80083d8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	425b      	negs	r3, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	81bb      	strh	r3, [r7, #12]
 8002cb0:	e00a      	b.n	8002cc8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cb8:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cba:	f005 fb8d 	bl	80083d8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002cc8:	89fa      	ldrh	r2, [r7, #14]
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002cd0:	89ba      	ldrh	r2, [r7, #12]
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	2002d568 	.word	0x2002d568

08002ce8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6178      	str	r0, [r7, #20]
 8002cf0:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cf4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d02:	f7fd ff21 	bl	8000b48 <__aeabi_dcmpgt>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <_ZN5Motor8setRatioEdd+0x30>
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	4c2b      	ldr	r4, [pc, #172]	; (8002dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d12:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002d16:	e00e      	b.n	8002d36 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d22:	f7fd fef3 	bl	8000b0c <__aeabi_dcmplt>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <_ZN5Motor8setRatioEdd+0x4e>
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	4c24      	ldr	r4, [pc, #144]	; (8002dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d32:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d40:	f7fd ff02 	bl	8000b48 <__aeabi_dcmpgt>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <_ZN5Motor8setRatioEdd+0x6e>
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	4c1c      	ldr	r4, [pc, #112]	; (8002dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d50:	e9c7 3400 	strd	r3, r4, [r7]
 8002d54:	e00e      	b.n	8002d74 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d60:	f7fd fed4 	bl	8000b0c <__aeabi_dcmplt>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <_ZN5Motor8setRatioEdd+0x8c>
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	4c15      	ldr	r4, [pc, #84]	; (8002dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d70:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d7e:	f7fd fc53 	bl	8000628 <__aeabi_dmul>
 8002d82:	4603      	mov	r3, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	4618      	mov	r0, r3
 8002d88:	4621      	mov	r1, r4
 8002d8a:	f7fd fefd 	bl	8000b88 <__aeabi_d2iz>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002da0:	f7fd fc42 	bl	8000628 <__aeabi_dmul>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	4618      	mov	r0, r3
 8002daa:	4621      	mov	r1, r4
 8002dac:	f7fd feec 	bl	8000b88 <__aeabi_d2iz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	805a      	strh	r2, [r3, #2]

}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	3ff00000 	.word	0x3ff00000
 8002dc4:	bff00000 	.word	0xbff00000
 8002dc8:	409c2000 	.word	0x409c2000

08002dcc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002dcc:	b490      	push	{r4, r7}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	f04f 0400 	mov.w	r4, #0
 8002de4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f04f 0400 	mov.w	r4, #0
 8002e00:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	609a      	str	r2, [r3, #8]
}
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc90      	pop	{r4, r7}
 8002e20:	4770      	bx	lr
 8002e22:	0000      	movs	r0, r0
 8002e24:	0000      	movs	r0, r0
	...

08002e28 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe ff7e 	bl	8001d38 <_ZN3IMU8getOmegaEv>
 8002e3c:	ee10 3a10 	vmov	r3, s0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fb99 	bl	8000578 <__aeabi_f2d>
 8002e46:	4603      	mov	r3, r0
 8002e48:	460c      	mov	r4, r1
 8002e4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fa8f 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002e58:	ec54 3b10 	vmov	r3, r4, d0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4621      	mov	r1, r4
 8002e60:	f7fd feda 	bl	8000c18 <__aeabi_d2f>
 8002e64:	4603      	mov	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002e68:	a356      	add	r3, pc, #344	; (adr r3, 8002fc4 <_ZN8Odometry12calcPotitionEv+0x19c>)
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e72:	f7fd fbd9 	bl	8000628 <__aeabi_dmul>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7fd fb76 	bl	8000578 <__aeabi_f2d>
 8002e8c:	4682      	mov	sl, r0
 8002e8e:	468b      	mov	fp, r1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ea4:	f7fd fcea 	bl	800087c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4640      	mov	r0, r8
 8002eae:	4649      	mov	r1, r9
 8002eb0:	f7fd fa04 	bl	80002bc <__adddf3>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	ec43 2b17 	vmov	d7, r2, r3
 8002ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ec0:	eef0 0a67 	vmov.f32	s1, s15
 8002ec4:	f00e fd00 	bl	80118c8 <cos>
 8002ec8:	ec53 2b10 	vmov	r2, r3, d0
 8002ecc:	4650      	mov	r0, sl
 8002ece:	4659      	mov	r1, fp
 8002ed0:	f7fd fbaa 	bl	8000628 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4620      	mov	r0, r4
 8002eda:	4629      	mov	r1, r5
 8002edc:	f7fd f9ee 	bl	80002bc <__adddf3>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7fd fb41 	bl	8000578 <__aeabi_f2d>
 8002ef6:	4682      	mov	sl, r0
 8002ef8:	468b      	mov	fp, r1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f0e:	f7fd fcb5 	bl	800087c <__aeabi_ddiv>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4640      	mov	r0, r8
 8002f18:	4649      	mov	r1, r9
 8002f1a:	f7fd f9cf 	bl	80002bc <__adddf3>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	ec43 2b17 	vmov	d7, r2, r3
 8002f26:	eeb0 0a47 	vmov.f32	s0, s14
 8002f2a:	eef0 0a67 	vmov.f32	s1, s15
 8002f2e:	f00e fd0f 	bl	8011950 <sin>
 8002f32:	ec53 2b10 	vmov	r2, r3, d0
 8002f36:	4650      	mov	r0, sl
 8002f38:	4659      	mov	r1, fp
 8002f3a:	f7fd fb75 	bl	8000628 <__aeabi_dmul>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd f9b9 	bl	80002bc <__adddf3>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002f60:	461a      	mov	r2, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	f7fd f9aa 	bl	80002bc <__adddf3>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	f7fd fe4c 	bl	8000c18 <__aeabi_d2f>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002f84:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	4621      	mov	r1, r4
 8002f90:	f7fd fe42 	bl	8000c18 <__aeabi_d2f>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <_ZN8Odometry12calcPotitionEv+0x194>)
 8002f98:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	f7fd fe38 	bl	8000c18 <__aeabi_d2f>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <_ZN8Odometry12calcPotitionEv+0x198>)
 8002fac:	601a      	str	r2, [r3, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb8:	2000020c 	.word	0x2000020c
 8002fbc:	20000210 	.word	0x20000210
 8002fc0:	20000214 	.word	0x20000214
 8002fc4:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fc8:	3f50624d 	.word	0x3f50624d

08002fcc <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff27 	bl	8002e28 <_ZN8Odometry12calcPotitionEv>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002fe2:	b490      	push	{r4, r7}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	f04f 0400 	mov.w	r4, #0
 8003010:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bc90      	pop	{r4, r7}
 800301c:	4770      	bx	lr
	...

08003020 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003020:	b490      	push	{r4, r7}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	f04f 0400 	mov.w	r4, #0
 8003038:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f04f 0400 	mov.w	r4, #0
 8003054:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800305e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003062:	2200      	movs	r2, #0
 8003064:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <_ZN13PathFollowingC1Ev+0xec>)
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003074:	4a25      	ldr	r2, [pc, #148]	; (800310c <_ZN13PathFollowingC1Ev+0xec>)
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	f04f 0400 	mov.w	r4, #0
 800307e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <_ZN13PathFollowingC1Ev+0xec>)
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <_ZN13PathFollowingC1Ev+0xf0>)
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f04f 0400 	mov.w	r4, #0
 800309a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <_ZN13PathFollowingC1Ev+0xf0>)
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f04f 0400 	mov.w	r4, #0
 80030a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <_ZN13PathFollowingC1Ev+0xf0>)
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	f04f 0400 	mov.w	r4, #0
 80030b6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <_ZN13PathFollowingC1Ev+0xf0>)
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <_ZN13PathFollowingC1Ev+0xf0>)
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	f04f 0400 	mov.w	r4, #0
 80030d2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <_ZN13PathFollowingC1Ev+0xf0>)
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <_ZN13PathFollowingC1Ev+0xf4>)
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <_ZN13PathFollowingC1Ev+0xf4>)
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bc90      	pop	{r4, r7}
 800310a:	4770      	bx	lr
 800310c:	2002da68 	.word	0x2002da68
 8003110:	2002d9f8 	.word	0x2002d9f8
 8003114:	2002da58 	.word	0x2002da58

08003118 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003120:	f001 fd8c 	bl	8004c3c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 8003124:	f107 0318 	add.w	r3, r7, #24
 8003128:	2201      	movs	r2, #1
 800312a:	4915      	ldr	r1, [pc, #84]	; (8003180 <_ZN13PathFollowing4initEv+0x68>)
 800312c:	4815      	ldr	r0, [pc, #84]	; (8003184 <_ZN13PathFollowing4initEv+0x6c>)
 800312e:	f7fe fac7 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	2201      	movs	r2, #1
 8003138:	4913      	ldr	r1, [pc, #76]	; (8003188 <_ZN13PathFollowing4initEv+0x70>)
 800313a:	4812      	ldr	r0, [pc, #72]	; (8003184 <_ZN13PathFollowing4initEv+0x6c>)
 800313c:	f7fe fac0 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 8003140:	f107 0308 	add.w	r3, r7, #8
 8003144:	2201      	movs	r2, #1
 8003146:	4911      	ldr	r1, [pc, #68]	; (800318c <_ZN13PathFollowing4initEv+0x74>)
 8003148:	480e      	ldr	r0, [pc, #56]	; (8003184 <_ZN13PathFollowing4initEv+0x6c>)
 800314a:	f7fe fab9 	bl	80016c0 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800314e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003152:	ed97 6b04 	vldr	d6, [r7, #16]
 8003156:	ed97 5b02 	vldr	d5, [r7, #8]
 800315a:	eeb0 2a45 	vmov.f32	s4, s10
 800315e:	eef0 2a65 	vmov.f32	s5, s11
 8003162:	eeb0 1a46 	vmov.f32	s2, s12
 8003166:	eef0 1a66 	vmov.f32	s3, s13
 800316a:	eeb0 0a47 	vmov.f32	s0, s14
 800316e:	eef0 0a67 	vmov.f32	s1, s15
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f80c 	bl	8003190 <_ZN13PathFollowing7setGainEddd>
}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	08017838 	.word	0x08017838
 8003184:	08017840 	.word	0x08017840
 8003188:	08017848 	.word	0x08017848
 800318c:	08017850 	.word	0x08017850

08003190 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003190:	b490      	push	{r4, r7}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	61f8      	str	r0, [r7, #28]
 8003198:	ed87 0b04 	vstr	d0, [r7, #16]
 800319c:	ed87 1b02 	vstr	d1, [r7, #8]
 80031a0:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80031a4:	4a09      	ldr	r2, [pc, #36]	; (80031cc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031aa:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031be:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80031c2:	bf00      	nop
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc90      	pop	{r4, r7}
 80031ca:	4770      	bx	lr
 80031cc:	2002da68 	.word	0x2002da68

080031d0 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 80031d0:	b490      	push	{r4, r7}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <_ZN13PathFollowing8getKxValEv+0x24>)
 80031da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031de:	ec44 3b17 	vmov	d7, r3, r4
}
 80031e2:	eeb0 0a47 	vmov.f32	s0, s14
 80031e6:	eef0 0a67 	vmov.f32	s1, s15
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc90      	pop	{r4, r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2002da68 	.word	0x2002da68

080031f8 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 80031f8:	b490      	push	{r4, r7}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003202:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003206:	ec44 3b17 	vmov	d7, r3, r4
}
 800320a:	eeb0 0a47 	vmov.f32	s0, s14
 800320e:	eef0 0a67 	vmov.f32	s1, s15
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bc90      	pop	{r4, r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2002da68 	.word	0x2002da68

08003220 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003220:	b490      	push	{r4, r7}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <_ZN13PathFollowing8getKtValEv+0x24>)
 800322a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800322e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003232:	eeb0 0a47 	vmov.f32	s0, s14
 8003236:	eef0 0a67 	vmov.f32	s1, s15
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bc90      	pop	{r4, r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2002da68 	.word	0x2002da68

08003248 <_ZN13PathFollowing18setTargetPathMultiEv>:
	rtU.target_y = y;
	rtU.th = th;
}

void PathFollowing::setTargetPathMulti()
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	sd_read_array_double("Pos", "TH_S2.txt", LOG_DATA_SIZE_DIS, log_delta_thetas_);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003256:	33a0      	adds	r3, #160	; 0xa0
 8003258:	f241 7270 	movw	r2, #6000	; 0x1770
 800325c:	490f      	ldr	r1, [pc, #60]	; (800329c <_ZN13PathFollowing18setTargetPathMultiEv+0x54>)
 800325e:	4810      	ldr	r0, [pc, #64]	; (80032a0 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8003260:	f7fe fa2e 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Pos", "DIS_S2.txt", LOG_DATA_SIZE_DIS, log_distances_);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3320      	adds	r3, #32
 8003268:	f241 7270 	movw	r2, #6000	; 0x1770
 800326c:	490d      	ldr	r1, [pc, #52]	; (80032a4 <_ZN13PathFollowing18setTargetPathMultiEv+0x5c>)
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8003270:	f7fe fa26 	bl	80016c0 <sd_read_array_double>

	mon_log_dis = log_distances_[1];
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800327a:	4a0b      	ldr	r2, [pc, #44]	; (80032a8 <_ZN13PathFollowing18setTargetPathMultiEv+0x60>)
 800327c:	e9c2 3400 	strd	r3, r4, [r2]
	mon_log_th = log_delta_thetas_[1];
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003286:	33a8      	adds	r3, #168	; 0xa8
 8003288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800328c:	4a07      	ldr	r2, [pc, #28]	; (80032ac <_ZN13PathFollowing18setTargetPathMultiEv+0x64>)
 800328e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	bf00      	nop
 800329c:	08017858 	.word	0x08017858
 80032a0:	08017864 	.word	0x08017864
 80032a4:	08017868 	.word	0x08017868
 80032a8:	20000218 	.word	0x20000218
 80032ac:	20000220 	.word	0x20000220

080032b0 <_ZN13PathFollowing5startEv>:
{
	return rtY.tar;
}

void PathFollowing::start()
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	execute_flag_ = true;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <_ZN13PathFollowing4stopEv>:

void PathFollowing::stop()
{
 80032cc:	b490      	push	{r4, r7}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	execute_flag_ = false;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
	ref_num = 0;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80032e0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80032e4:	2200      	movs	r2, #0
 80032e6:	801a      	strh	r2, [r3, #0]
	x_tar_ = 0;
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	y_tar_ = 0;
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	e9c2 3404 	strd	r3, r4, [r2, #16]
	th_tar_ = 0;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	e9c2 3406 	strd	r3, r4, [r2, #24]

	rtU.target_x = 0;
 8003312:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <_ZN13PathFollowing4stopEv+0xf8>)
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003320:	4a28      	ldr	r2, [pc, #160]	; (80033c4 <_ZN13PathFollowing4stopEv+0xf8>)
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f04f 0400 	mov.w	r4, #0
 800332a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800332e:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <_ZN13PathFollowing4stopEv+0xf8>)
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	f04f 0400 	mov.w	r4, #0
 8003338:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800333c:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <_ZN13PathFollowing4stopEv+0xf8>)
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f04f 0400 	mov.w	r4, #0
 8003346:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <_ZN13PathFollowing4stopEv+0xf8>)
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	f04f 0400 	mov.w	r4, #0
 8003354:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003358:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <_ZN13PathFollowing4stopEv+0xf8>)
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f04f 0400 	mov.w	r4, #0
 8003362:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	rtDW.Add4 = 0;
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <_ZN13PathFollowing4stopEv+0xfc>)
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	f04f 0400 	mov.w	r4, #0
 8003370:	e9c2 3400 	strd	r3, r4, [r2]
	rtDW.Add5 = 0;
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <_ZN13PathFollowing4stopEv+0xfc>)
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtDW.Add3 = 0;
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <_ZN13PathFollowing4stopEv+0xfc>)
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f04f 0400 	mov.w	r4, #0
 800338c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtDW.UD_DSTATE = 0;
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <_ZN13PathFollowing4stopEv+0xfc>)
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtDW.UD_DSTATE_o = 0;
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <_ZN13PathFollowing4stopEv+0xfc>)
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f04f 0400 	mov.w	r4, #0
 80033a8:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtDW.UD_DSTATE_d = 0;
 80033ac:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <_ZN13PathFollowing4stopEv+0xfc>)
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc90      	pop	{r4, r7}
 80033c2:	4770      	bx	lr
 80033c4:	2002d9f8 	.word	0x2002d9f8
 80033c8:	2002da28 	.word	0x2002da28

080033cc <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80033d4:	2088      	movs	r0, #136	; 0x88
 80033d6:	f7fe fdde 	bl	8001f96 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80033da:	2080      	movs	r0, #128	; 0x80
 80033dc:	f7fe fddb 	bl	8001f96 <INA260_init>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80033f0:	2188      	movs	r1, #136	; 0x88
 80033f2:	2002      	movs	r0, #2
 80033f4:	f7fe fd6c 	bl	8001ed0 <INA260_read>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8aa 	bl	8000554 <__aeabi_i2d>
 8003400:	a30c      	add	r3, pc, #48	; (adr r3, 8003434 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd f90f 	bl	8000628 <__aeabi_dmul>
 800340a:	4603      	mov	r3, r0
 800340c:	460c      	mov	r4, r1
 800340e:	4618      	mov	r0, r3
 8003410:	4621      	mov	r1, r4
 8003412:	f7fd fc01 	bl	8000c18 <__aeabi_d2f>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a03      	ldr	r2, [pc, #12]	; (8003430 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003422:	6013      	str	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	f3af 8000 	nop.w
 8003430:	20000228 	.word	0x20000228
 8003434:	47ae147b 	.word	0x47ae147b
 8003438:	3f547ae1 	.word	0x3f547ae1

0800343c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	ee07 3a90 	vmov	s15, r3

}
 800344c:	eeb0 0a67 	vmov.f32	s0, s15
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	0000      	movs	r0, r0
 800345c:	0000      	movs	r0, r0
	...

08003460 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f881 	bl	8000578 <__aeabi_f2d>
 8003476:	a311      	add	r3, pc, #68	; (adr r3, 80034bc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fd fb46 	bl	8000b0c <__aeabi_dcmplt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e002      	b.n	800349a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003496:	2200      	movs	r2, #0
 8003498:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000022c 	.word	0x2000022c
 80034bc:	9999999a 	.word	0x9999999a
 80034c0:	401d9999 	.word	0x401d9999

080034c4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80034d0:	2102      	movs	r1, #2
 80034d2:	4822      	ldr	r0, [pc, #136]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034d4:	f004 ff68 	bl	80083a8 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80034f0:	2108      	movs	r1, #8
 80034f2:	481a      	ldr	r0, [pc, #104]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034f4:	f004 ff58 	bl	80083a8 <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003510:	2110      	movs	r1, #16
 8003512:	4812      	ldr	r0, [pc, #72]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003514:	f004 ff48 	bl	80083a8 <HAL_GPIO_ReadPin>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	480a      	ldr	r0, [pc, #40]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003534:	f004 ff38 	bl	80083a8 <HAL_GPIO_ReadPin>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003550:	89fb      	ldrh	r3, [r7, #14]

}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40020c00 	.word	0x40020c00

08003560 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
{

}
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d111      	bne.n	80035ae <_ZN10SideSensor12updateStatusEt+0x36>
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	f083 0301 	eor.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80035a6:	4b21      	ldr	r3, [pc, #132]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e010      	b.n	80035d0 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10d      	bne.n	80035d0 <_ZN10SideSensor12updateStatusEt+0x58>
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d111      	bne.n	80035fc <_ZN10SideSensor12updateStatusEt+0x84>
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80035fa:	e011      	b.n	8003620 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d10d      	bne.n	8003620 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	f083 0302 	eor.w	r3, r3, #2
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	2000022e 	.word	0x2000022e
 8003630:	2000022f 	.word	0x2000022f

08003634 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x5c>)
 8003644:	3308      	adds	r3, #8
 8003646:	4611      	mov	r1, r2
 8003648:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800364c:	4618      	mov	r0, r3
 800364e:	f00f f9bb 	bl	80129c8 <memcpy>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f8d1 	bl	8003808 <_ZN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEC1Ev>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
{
	logger_ = logger;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	08017874 	.word	0x08017874

08003694 <_ZN20SystemIdentification11outputStoreEf>:
{

}

void SystemIdentification::outputStore(float output)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <_ZN20SystemIdentification11outputStoreEf+0x24>
		logger_->storeLog(output);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	ed97 0a00 	vldr	s0, [r7]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fa16 	bl	8002ae4 <_ZN6Logger8storeLogEf>
	}

}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_ZN20SystemIdentification10outputSaveEv>:

void SystemIdentification::outputSave()
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <_ZN20SystemIdentification10outputSaveEv+0x20>)
 80036ce:	4905      	ldr	r1, [pc, #20]	; (80036e4 <_ZN20SystemIdentification10outputSaveEv+0x24>)
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fa3f 	bl	8002b54 <_ZN6Logger8saveLogsEPKcS1_>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	08017a68 	.word	0x08017a68
 80036e4:	08017a74 	.word	0x08017a74

080036e8 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d048      	beq.n	800378c <_ZN20SystemIdentification10updateMsigEv+0xa4>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
		msigArrayIdx_++;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003728:	3301      	adds	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003738:	4a16      	ldr	r2, [pc, #88]	; (8003794 <_ZN20SystemIdentification10updateMsigEv+0xac>)
 800373a:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003742:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003746:	d304      	bcc.n	8003752 <_ZN20SystemIdentification10updateMsigEv+0x6a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800374e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685c      	ldr	r4, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc ff0b 	bl	8000578 <__aeabi_f2d>
 8003762:	4605      	mov	r5, r0
 8003764:	460e      	mov	r6, r1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 800376c:	eef1 7a67 	vneg.f32	s15, s15
 8003770:	ee17 3a90 	vmov	r3, s15
 8003774:	4618      	mov	r0, r3
 8003776:	f7fc feff 	bl	8000578 <__aeabi_f2d>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	ec43 2b11 	vmov	d1, r2, r3
 8003782:	ec46 5b10 	vmov	d0, r5, r6
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff faae 	bl	8002ce8 <_ZN5Motor8setRatioEdd>

	}

}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003794:	20000230 	.word	0x20000230

08003798 <_ZN20SystemIdentification5startEv>:
{
	inputRatio_ = ratio;
}

void SystemIdentification::start()
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fa0c 	bl	8002bc2 <_ZN6Logger5startEv>
	processing_flag_ = true;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	0000      	movs	r0, r0
 80037bc:	0000      	movs	r0, r0
	...

080037c0 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fa08 	bl	8002be2 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
	msigArrayIdx_ = 0;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003800 <_ZN20SystemIdentification4stopEv+0x40>
 80037ea:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003800 <_ZN20SystemIdentification4stopEv+0x40>
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fa7a 	bl	8002ce8 <_ZN5Motor8setRatioEdd>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	f3af 8000 	nop.w
	...

08003808 <_ZN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEC1Ev>:
      typedef typename __traits_type::value_type  	value_type;
      typedef typename __traits_type::difference_type 	difference_type;
      typedef typename __traits_type::reference 	reference;
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003824:	b490      	push	{r4, r7}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	f04f 0400 	mov.w	r4, #0
 8003854:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	61da      	str	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	625a      	str	r2, [r3, #36]	; 0x24
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc90      	pop	{r4, r7}
 80038ac:	4770      	bx	lr
	...

080038b0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	f107 0208 	add.w	r2, r7, #8
 80038c0:	f107 0110 	add.w	r1, r7, #16
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fd3f 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 80038ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038d2:	461a      	mov	r2, r3
 80038d4:	4623      	mov	r3, r4
 80038d6:	f7fc fcf1 	bl	80002bc <__adddf3>
 80038da:	4603      	mov	r3, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	4618      	mov	r0, r3
 80038e0:	4621      	mov	r1, r4
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038ea:	f7fc ffc7 	bl	800087c <__aeabi_ddiv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80038f6:	a310      	add	r3, pc, #64	; (adr r3, 8003938 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003900:	f7fc fe92 	bl	8000628 <__aeabi_dmul>
 8003904:	4603      	mov	r3, r0
 8003906:	460c      	mov	r4, r1
 8003908:	4618      	mov	r0, r3
 800390a:	4621      	mov	r1, r4
 800390c:	f7fd f984 	bl	8000c18 <__aeabi_d2f>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fe2c 	bl	8000578 <__aeabi_f2d>
 8003920:	4603      	mov	r3, r0
 8003922:	460c      	mov	r4, r1
 8003924:	ec44 3b17 	vmov	d7, r3, r4
}
 8003928:	eeb0 0a47 	vmov.f32	s0, s14
 800392c:	eef0 0a67 	vmov.f32	s1, s15
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	1ab1d998 	.word	0x1ab1d998
 800393c:	3f7830b5 	.word	0x3f7830b5

08003940 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	ed2d 8b02 	vpush	{d8}
 8003946:	b08d      	sub	sp, #52	; 0x34
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	ed93 7a00 	vldr	s14, [r3]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	edd3 7a02 	vldr	s15, [r3, #8]
 8003958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	ed93 8a01 	vldr	s16, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe f9e4 	bl	8001d38 <_ZN3IMU8getOmegaEv>
 8003970:	eef0 7a40 	vmov.f32	s15, s0
 8003974:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003978:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003982:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 800398e:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fdf0 	bl	8000578 <__aeabi_f2d>
 8003998:	4604      	mov	r4, r0
 800399a:	460d      	mov	r5, r1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	ed93 7a08 	vldr	s14, [r3, #32]
 80039a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	ee17 0a90 	vmov	r0, s15
 80039ae:	f7fc fde3 	bl	8000578 <__aeabi_f2d>
 80039b2:	a36b      	add	r3, pc, #428	; (adr r3, 8003b60 <_ZN12VelocityCtrl3pidEv+0x220>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f7fc fe36 	bl	8000628 <__aeabi_dmul>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4620      	mov	r0, r4
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7fc fc7a 	bl	80002bc <__adddf3>
 80039c8:	4603      	mov	r3, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	4618      	mov	r0, r3
 80039ce:	4621      	mov	r1, r4
 80039d0:	f7fd f922 	bl	8000c18 <__aeabi_d2f>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b64      	ldr	r3, [pc, #400]	; (8003b68 <_ZN12VelocityCtrl3pidEv+0x228>)
 80039d8:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80039e0:	4b62      	ldr	r3, [pc, #392]	; (8003b6c <_ZN12VelocityCtrl3pidEv+0x22c>)
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80039ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	ee17 0a90 	vmov	r0, s15
 80039f6:	f7fc fdbf 	bl	8000578 <__aeabi_f2d>
 80039fa:	a359      	add	r3, pc, #356	; (adr r3, 8003b60 <_ZN12VelocityCtrl3pidEv+0x220>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fe12 	bl	8000628 <__aeabi_dmul>
 8003a04:	4603      	mov	r3, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	f7fd f904 	bl	8000c18 <__aeabi_d2f>
 8003a10:	4603      	mov	r3, r0
 8003a12:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003a1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003a26:	4b52      	ldr	r3, [pc, #328]	; (8003b70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fda4 	bl	8000578 <__aeabi_f2d>
 8003a30:	4604      	mov	r4, r0
 8003a32:	460d      	mov	r5, r1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003a3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	ee17 0a90 	vmov	r0, s15
 8003a46:	f7fc fd97 	bl	8000578 <__aeabi_f2d>
 8003a4a:	a345      	add	r3, pc, #276	; (adr r3, 8003b60 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fdea 	bl	8000628 <__aeabi_dmul>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f7fc fc2e 	bl	80002bc <__adddf3>
 8003a60:	4603      	mov	r3, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	4618      	mov	r0, r3
 8003a66:	4621      	mov	r1, r4
 8003a68:	f7fd f8d6 	bl	8000c18 <__aeabi_d2f>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003a70:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003a78:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <_ZN12VelocityCtrl3pidEv+0x234>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003a82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	ee17 0a90 	vmov	r0, s15
 8003a8e:	f7fc fd73 	bl	8000578 <__aeabi_f2d>
 8003a92:	a333      	add	r3, pc, #204	; (adr r3, 8003b60 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f7fc fdc6 	bl	8000628 <__aeabi_dmul>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	f7fd f8b8 	bl	8000c18 <__aeabi_d2f>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003aac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ab0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac2:	edc7 7a05 	vstr	s15, [r7, #20]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 8003aca:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae0:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003ae4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ae8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afa:	eef1 7a67 	vneg.f32	s15, s15
 8003afe:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b12:	ee17 0a90 	vmov	r0, s15
 8003b16:	f7fc fd2f 	bl	8000578 <__aeabi_f2d>
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	460e      	mov	r6, r1
 8003b1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	ee17 0a90 	vmov	r0, s15
 8003b2e:	f7fc fd23 	bl	8000578 <__aeabi_f2d>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	ec43 2b11 	vmov	d1, r2, r3
 8003b3a:	ec46 5b10 	vmov	d0, r5, r6
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7ff f8d2 	bl	8002ce8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003b44:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <_ZN12VelocityCtrl3pidEv+0x234>)
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3734      	adds	r7, #52	; 0x34
 8003b54:	46bd      	mov	sp, r7
 8003b56:	ecbd 8b02 	vpop	{d8}
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5c:	f3af 8000 	nop.w
 8003b60:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b64:	3f50624d 	.word	0x3f50624d
 8003b68:	2000023c 	.word	0x2000023c
 8003b6c:	20000234 	.word	0x20000234
 8003b70:	20000240 	.word	0x20000240
 8003b74:	20000238 	.word	0x20000238

08003b78 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b84:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	605a      	str	r2, [r3, #4]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bac:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bb0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	619a      	str	r2, [r3, #24]
	v_ki_ = ki;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]
	v_kd_ = kd;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	61da      	str	r2, [r3, #28]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bde:	edc7 0a01 	vstr	s1, [r7, #4]
 8003be2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
	o_ki_ = ki;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	o_kd_ = kd;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fe4f 	bl	80038b0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe8f 	bl	8003940 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003c78 <_ZN12VelocityCtrl4stopEv+0x30>
 8003c60:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003c78 <_ZN12VelocityCtrl4stopEv+0x30>
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff f83f 	bl	8002ce8 <_ZN5Motor8setRatioEdd>

}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	f3af 8000 	nop.w
	...

08003c80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ca0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003ca8:	e000      	b.n	8003cac <ITM_SendChar+0x2c>
    {
      __NOP();
 8003caa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003cac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f9      	beq.n	8003caa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003cb6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003cc0:	687b      	ldr	r3, [r7, #4]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e009      	b.n	8003cf4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	60ba      	str	r2, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ffc9 	bl	8003c80 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dbf1      	blt.n	8003ce0 <_write+0x12>
  }
  return len;
 8003cfc:	687b      	ldr	r3, [r7, #4]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 ff32 	bl	8005b7c <cppExit>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003d32:	f001 fe95 	bl	8005a60 <cppFlip1ms>

		tim6_timer++;
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003d3e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d902      	bls.n	8003d50 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003d5a:	f001 fed3 	bl	8005b04 <cppFlip100ns>

		tim7_timer++;
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d66:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d902      	bls.n	8003d78 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10e      	bne.n	8003da0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003d82:	f001 fedd 	bl	8005b40 <cppFlip10ms>

		tim13_timer++;
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d8e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d902      	bls.n	8003da0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
	}

}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40001000 	.word	0x40001000
 8003dac:	2002d6d8 	.word	0x2002d6d8
 8003db0:	0001869f 	.word	0x0001869f
 8003db4:	40001400 	.word	0x40001400
 8003db8:	2002d71c 	.word	0x2002d71c
 8003dbc:	40001c00 	.word	0x40001c00
 8003dc0:	2002d720 	.word	0x2002d720

08003dc4 <init>:

void init()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dce:	4808      	ldr	r0, [pc, #32]	; (8003df0 <init+0x2c>)
 8003dd0:	f004 fb02 	bl	80083d8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003dd4:	4807      	ldr	r0, [pc, #28]	; (8003df4 <init+0x30>)
 8003dd6:	f008 f9e2 	bl	800c19e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003dda:	4807      	ldr	r0, [pc, #28]	; (8003df8 <init+0x34>)
 8003ddc:	f008 f9df 	bl	800c19e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003de0:	4806      	ldr	r0, [pc, #24]	; (8003dfc <init+0x38>)
 8003de2:	f008 f9dc 	bl	800c19e <HAL_TIM_Base_Start_IT>

	cppInit();
 8003de6:	f001 fd93 	bl	8005910 <cppInit>

	//path_following_initialize();

}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	2002d804 	.word	0x2002d804
 8003df8:	2002d9a8 	.word	0x2002d9a8
 8003dfc:	2002d724 	.word	0x2002d724

08003e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e04:	f002 ffe0 	bl	8006dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e08:	f000 f82a 	bl	8003e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e0c:	f000 fdbc 	bl	8004988 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e10:	f000 fd8a 	bl	8004928 <MX_DMA_Init>
  MX_I2C2_Init();
 8003e14:	f000 f9e8 	bl	80041e8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003e18:	f000 fa14 	bl	8004244 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003e1c:	f000 fa32 	bl	8004284 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003e20:	f000 fa66 	bl	80042f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003e24:	f000 fb70 	bl	8004508 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003e28:	f000 fc3c 	bl	80046a4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003e2c:	f000 fd52 	bl	80048d4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003e30:	f00a f988 	bl	800e144 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003e34:	f000 fbcc 	bl	80045d0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003e38:	f000 f9a8 	bl	800418c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003e3c:	f000 fb00 	bl	8004440 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003e40:	f000 fc88 	bl	8004754 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003e44:	f000 fcd4 	bl	80047f0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003e48:	f000 f898 	bl	8003f7c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003e4c:	f000 fbf6 	bl	800463c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003e50:	f000 fd1c 	bl	800488c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003e54:	f7ff ffb6 	bl	8003dc4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003e58:	f001 fea2 	bl	8005ba0 <cppLoop>
 8003e5c:	e7fc      	b.n	8003e58 <main+0x58>
	...

08003e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b0a4      	sub	sp, #144	; 0x90
 8003e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e6a:	2234      	movs	r2, #52	; 0x34
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f00e fdb5 	bl	80129de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	223c      	movs	r2, #60	; 0x3c
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f00e fda6 	bl	80129de <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <SystemClock_Config+0x114>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a36      	ldr	r2, [pc, #216]	; (8003f74 <SystemClock_Config+0x114>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <SystemClock_Config+0x114>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <SystemClock_Config+0x118>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a30      	ldr	r2, [pc, #192]	; (8003f78 <SystemClock_Config+0x118>)
 8003eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <SystemClock_Config+0x118>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ed8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ede:	2308      	movs	r3, #8
 8003ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003ee2:	23b4      	movs	r3, #180	; 0xb4
 8003ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003eee:	2308      	movs	r3, #8
 8003ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003efa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fea4 	bl	8009c4c <HAL_RCC_OscConfig>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003f0a:	f000 fe93 	bl	8004c34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f0e:	f005 fa1f 	bl	8009350 <HAL_PWREx_EnableOverDrive>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003f18:	f000 fe8c 	bl	8004c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f20:	2302      	movs	r3, #2
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f24:	2300      	movs	r3, #0
 8003f26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f32:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f38:	2105      	movs	r1, #5
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f005 fa58 	bl	80093f0 <HAL_RCC_ClockConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003f46:	f000 fe75 	bl	8004c34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003f4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003f50:	2300      	movs	r3, #0
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003f54:	2300      	movs	r3, #0
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f005 fc37 	bl	80097d0 <HAL_RCCEx_PeriphCLKConfig>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003f68:	f000 fe64 	bl	8004c34 <Error_Handler>
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3790      	adds	r7, #144	; 0x90
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40007000 	.word	0x40007000

08003f7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f82:	463b      	mov	r3, r7
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003f8e:	4b7c      	ldr	r3, [pc, #496]	; (8004180 <MX_ADC2_Init+0x204>)
 8003f90:	4a7c      	ldr	r2, [pc, #496]	; (8004184 <MX_ADC2_Init+0x208>)
 8003f92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003f94:	4b7a      	ldr	r3, [pc, #488]	; (8004180 <MX_ADC2_Init+0x204>)
 8003f96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f9c:	4b78      	ldr	r3, [pc, #480]	; (8004180 <MX_ADC2_Init+0x204>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003fa2:	4b77      	ldr	r3, [pc, #476]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003fa8:	4b75      	ldr	r3, [pc, #468]	; (8004180 <MX_ADC2_Init+0x204>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003fae:	4b74      	ldr	r3, [pc, #464]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fbc:	4b70      	ldr	r3, [pc, #448]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fbe:	4a72      	ldr	r2, [pc, #456]	; (8004188 <MX_ADC2_Init+0x20c>)
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003fc8:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fca:	220e      	movs	r2, #14
 8003fcc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003fce:	4b6c      	ldr	r3, [pc, #432]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003fdc:	4868      	ldr	r0, [pc, #416]	; (8004180 <MX_ADC2_Init+0x204>)
 8003fde:	f002 ff87 	bl	8006ef0 <HAL_ADC_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003fe8:	f000 fe24 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003fec:	230a      	movs	r3, #10
 8003fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4860      	ldr	r0, [pc, #384]	; (8004180 <MX_ADC2_Init+0x204>)
 8003ffe:	f003 f8cb 	bl	8007198 <HAL_ADC_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004008:	f000 fe14 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800400c:	230b      	movs	r3, #11
 800400e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004010:	2302      	movs	r3, #2
 8004012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004014:	463b      	mov	r3, r7
 8004016:	4619      	mov	r1, r3
 8004018:	4859      	ldr	r0, [pc, #356]	; (8004180 <MX_ADC2_Init+0x204>)
 800401a:	f003 f8bd 	bl	8007198 <HAL_ADC_ConfigChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004024:	f000 fe06 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004028:	230c      	movs	r3, #12
 800402a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800402c:	2303      	movs	r3, #3
 800402e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004030:	463b      	mov	r3, r7
 8004032:	4619      	mov	r1, r3
 8004034:	4852      	ldr	r0, [pc, #328]	; (8004180 <MX_ADC2_Init+0x204>)
 8004036:	f003 f8af 	bl	8007198 <HAL_ADC_ConfigChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004040:	f000 fdf8 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004044:	230d      	movs	r3, #13
 8004046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004048:	2304      	movs	r3, #4
 800404a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800404c:	463b      	mov	r3, r7
 800404e:	4619      	mov	r1, r3
 8004050:	484b      	ldr	r0, [pc, #300]	; (8004180 <MX_ADC2_Init+0x204>)
 8004052:	f003 f8a1 	bl	8007198 <HAL_ADC_ConfigChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800405c:	f000 fdea 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004060:	2300      	movs	r3, #0
 8004062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004064:	2305      	movs	r3, #5
 8004066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004068:	463b      	mov	r3, r7
 800406a:	4619      	mov	r1, r3
 800406c:	4844      	ldr	r0, [pc, #272]	; (8004180 <MX_ADC2_Init+0x204>)
 800406e:	f003 f893 	bl	8007198 <HAL_ADC_ConfigChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004078:	f000 fddc 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800407c:	2301      	movs	r3, #1
 800407e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004080:	2306      	movs	r3, #6
 8004082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004084:	463b      	mov	r3, r7
 8004086:	4619      	mov	r1, r3
 8004088:	483d      	ldr	r0, [pc, #244]	; (8004180 <MX_ADC2_Init+0x204>)
 800408a:	f003 f885 	bl	8007198 <HAL_ADC_ConfigChannel>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004094:	f000 fdce 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004098:	2302      	movs	r3, #2
 800409a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800409c:	2307      	movs	r3, #7
 800409e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040a0:	463b      	mov	r3, r7
 80040a2:	4619      	mov	r1, r3
 80040a4:	4836      	ldr	r0, [pc, #216]	; (8004180 <MX_ADC2_Init+0x204>)
 80040a6:	f003 f877 	bl	8007198 <HAL_ADC_ConfigChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80040b0:	f000 fdc0 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80040b4:	2303      	movs	r3, #3
 80040b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80040b8:	2308      	movs	r3, #8
 80040ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040bc:	463b      	mov	r3, r7
 80040be:	4619      	mov	r1, r3
 80040c0:	482f      	ldr	r0, [pc, #188]	; (8004180 <MX_ADC2_Init+0x204>)
 80040c2:	f003 f869 	bl	8007198 <HAL_ADC_ConfigChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80040cc:	f000 fdb2 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80040d0:	2304      	movs	r3, #4
 80040d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80040d4:	2309      	movs	r3, #9
 80040d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040d8:	463b      	mov	r3, r7
 80040da:	4619      	mov	r1, r3
 80040dc:	4828      	ldr	r0, [pc, #160]	; (8004180 <MX_ADC2_Init+0x204>)
 80040de:	f003 f85b 	bl	8007198 <HAL_ADC_ConfigChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80040e8:	f000 fda4 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80040ec:	2305      	movs	r3, #5
 80040ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80040f0:	230a      	movs	r3, #10
 80040f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040f4:	463b      	mov	r3, r7
 80040f6:	4619      	mov	r1, r3
 80040f8:	4821      	ldr	r0, [pc, #132]	; (8004180 <MX_ADC2_Init+0x204>)
 80040fa:	f003 f84d 	bl	8007198 <HAL_ADC_ConfigChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004104:	f000 fd96 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004108:	2306      	movs	r3, #6
 800410a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800410c:	230b      	movs	r3, #11
 800410e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004110:	463b      	mov	r3, r7
 8004112:	4619      	mov	r1, r3
 8004114:	481a      	ldr	r0, [pc, #104]	; (8004180 <MX_ADC2_Init+0x204>)
 8004116:	f003 f83f 	bl	8007198 <HAL_ADC_ConfigChannel>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004120:	f000 fd88 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004124:	2307      	movs	r3, #7
 8004126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004128:	230c      	movs	r3, #12
 800412a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800412c:	463b      	mov	r3, r7
 800412e:	4619      	mov	r1, r3
 8004130:	4813      	ldr	r0, [pc, #76]	; (8004180 <MX_ADC2_Init+0x204>)
 8004132:	f003 f831 	bl	8007198 <HAL_ADC_ConfigChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800413c:	f000 fd7a 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004140:	2308      	movs	r3, #8
 8004142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004144:	230d      	movs	r3, #13
 8004146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004148:	463b      	mov	r3, r7
 800414a:	4619      	mov	r1, r3
 800414c:	480c      	ldr	r0, [pc, #48]	; (8004180 <MX_ADC2_Init+0x204>)
 800414e:	f003 f823 	bl	8007198 <HAL_ADC_ConfigChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004158:	f000 fd6c 	bl	8004c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800415c:	2309      	movs	r3, #9
 800415e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004160:	230e      	movs	r3, #14
 8004162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004164:	463b      	mov	r3, r7
 8004166:	4619      	mov	r1, r3
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <MX_ADC2_Init+0x204>)
 800416a:	f003 f815 	bl	8007198 <HAL_ADC_ConfigChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004174:	f000 fd5e 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2002d5a8 	.word	0x2002d5a8
 8004184:	40012100 	.word	0x40012100
 8004188:	0f000001 	.word	0x0f000001

0800418c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <MX_I2C1_Init+0x50>)
 8004192:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <MX_I2C1_Init+0x54>)
 8004194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <MX_I2C1_Init+0x50>)
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <MX_I2C1_Init+0x58>)
 800419a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <MX_I2C1_Init+0x50>)
 800419e:	2200      	movs	r2, #0
 80041a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80041a2:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <MX_I2C1_Init+0x50>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <MX_I2C1_Init+0x50>)
 80041aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <MX_I2C1_Init+0x50>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <MX_I2C1_Init+0x50>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <MX_I2C1_Init+0x50>)
 80041be:	2200      	movs	r2, #0
 80041c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <MX_I2C1_Init+0x50>)
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041c8:	4804      	ldr	r0, [pc, #16]	; (80041dc <MX_I2C1_Init+0x50>)
 80041ca:	f004 f937 	bl	800843c <HAL_I2C_Init>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80041d4:	f000 fd2e 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	2002d5f0 	.word	0x2002d5f0
 80041e0:	40005400 	.word	0x40005400
 80041e4:	000186a0 	.word	0x000186a0

080041e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <MX_I2C2_Init+0x50>)
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <MX_I2C2_Init+0x54>)
 80041f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <MX_I2C2_Init+0x50>)
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <MX_I2C2_Init+0x58>)
 80041f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <MX_I2C2_Init+0x50>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <MX_I2C2_Init+0x50>)
 8004200:	2200      	movs	r2, #0
 8004202:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <MX_I2C2_Init+0x50>)
 8004206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800420a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <MX_I2C2_Init+0x50>)
 800420e:	2200      	movs	r2, #0
 8004210:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <MX_I2C2_Init+0x50>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <MX_I2C2_Init+0x50>)
 800421a:	2200      	movs	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <MX_I2C2_Init+0x50>)
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004224:	4804      	ldr	r0, [pc, #16]	; (8004238 <MX_I2C2_Init+0x50>)
 8004226:	f004 f909 	bl	800843c <HAL_I2C_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004230:	f000 fd00 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}
 8004238:	2002d684 	.word	0x2002d684
 800423c:	40005800 	.word	0x40005800
 8004240:	000186a0 	.word	0x000186a0

08004244 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <MX_SDIO_SD_Init+0x38>)
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <MX_SDIO_SD_Init+0x3c>)
 800424c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <MX_SDIO_SD_Init+0x38>)
 8004250:	2200      	movs	r2, #0
 8004252:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <MX_SDIO_SD_Init+0x38>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <MX_SDIO_SD_Init+0x38>)
 800425c:	2200      	movs	r2, #0
 800425e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <MX_SDIO_SD_Init+0x38>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <MX_SDIO_SD_Init+0x38>)
 8004268:	2200      	movs	r2, #0
 800426a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <MX_SDIO_SD_Init+0x38>)
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	2002d884 	.word	0x2002d884
 8004280:	40012c00 	.word	0x40012c00

08004284 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <MX_SPI2_Init+0x64>)
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <MX_SPI2_Init+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <MX_SPI2_Init+0x64>)
 8004290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004294:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <MX_SPI2_Init+0x64>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <MX_SPI2_Init+0x64>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042a4:	2202      	movs	r2, #2
 80042a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042b8:	2228      	movs	r2, #40	; 0x28
 80042ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042d0:	220a      	movs	r2, #10
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80042d4:	4804      	ldr	r0, [pc, #16]	; (80042e8 <MX_SPI2_Init+0x64>)
 80042d6:	f007 f9e3 	bl	800b6a0 <HAL_SPI_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80042e0:	f000 fca8 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	2002d4d0 	.word	0x2002d4d0
 80042ec:	40003800 	.word	0x40003800

080042f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b09a      	sub	sp, #104	; 0x68
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f00e fb6d 	bl	80129de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800430e:	f107 0320 	add.w	r3, r7, #32
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	611a      	str	r2, [r3, #16]
 800431e:	615a      	str	r2, [r3, #20]
 8004320:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004322:	463b      	mov	r3, r7
 8004324:	2220      	movs	r2, #32
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f00e fb58 	bl	80129de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800432e:	4b42      	ldr	r3, [pc, #264]	; (8004438 <MX_TIM1_Init+0x148>)
 8004330:	4a42      	ldr	r2, [pc, #264]	; (800443c <MX_TIM1_Init+0x14c>)
 8004332:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004334:	4b40      	ldr	r3, [pc, #256]	; (8004438 <MX_TIM1_Init+0x148>)
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <MX_TIM1_Init+0x148>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004340:	4b3d      	ldr	r3, [pc, #244]	; (8004438 <MX_TIM1_Init+0x148>)
 8004342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004346:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004348:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <MX_TIM1_Init+0x148>)
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800434e:	4b3a      	ldr	r3, [pc, #232]	; (8004438 <MX_TIM1_Init+0x148>)
 8004350:	2200      	movs	r2, #0
 8004352:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004354:	4b38      	ldr	r3, [pc, #224]	; (8004438 <MX_TIM1_Init+0x148>)
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800435a:	4837      	ldr	r0, [pc, #220]	; (8004438 <MX_TIM1_Init+0x148>)
 800435c:	f007 ff43 	bl	800c1e6 <HAL_TIM_PWM_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004366:	f000 fc65 	bl	8004c34 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800436a:	2303      	movs	r3, #3
 800436c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800436e:	2300      	movs	r3, #0
 8004370:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004372:	2301      	movs	r3, #1
 8004374:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004376:	2300      	movs	r3, #0
 8004378:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800437e:	2300      	movs	r3, #0
 8004380:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004382:	2301      	movs	r3, #1
 8004384:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004386:	2300      	movs	r3, #0
 8004388:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800438e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004392:	4619      	mov	r1, r3
 8004394:	4828      	ldr	r0, [pc, #160]	; (8004438 <MX_TIM1_Init+0x148>)
 8004396:	f007 ff8f 	bl	800c2b8 <HAL_TIM_Encoder_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80043a0:	f000 fc48 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a4:	2300      	movs	r3, #0
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043b0:	4619      	mov	r1, r3
 80043b2:	4821      	ldr	r0, [pc, #132]	; (8004438 <MX_TIM1_Init+0x148>)
 80043b4:	f008 fcb6 	bl	800cd24 <HAL_TIMEx_MasterConfigSynchronization>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80043be:	f000 fc39 	bl	8004c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c2:	2360      	movs	r3, #96	; 0x60
 80043c4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043ce:	2300      	movs	r3, #0
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043de:	f107 0320 	add.w	r3, r7, #32
 80043e2:	2208      	movs	r2, #8
 80043e4:	4619      	mov	r1, r3
 80043e6:	4814      	ldr	r0, [pc, #80]	; (8004438 <MX_TIM1_Init+0x148>)
 80043e8:	f008 f938 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80043f2:	f000 fc1f 	bl	8004c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800440a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800440e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004414:	463b      	mov	r3, r7
 8004416:	4619      	mov	r1, r3
 8004418:	4807      	ldr	r0, [pc, #28]	; (8004438 <MX_TIM1_Init+0x148>)
 800441a:	f008 fcff 	bl	800ce1c <HAL_TIMEx_ConfigBreakDeadTime>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004424:	f000 fc06 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004428:	4803      	ldr	r0, [pc, #12]	; (8004438 <MX_TIM1_Init+0x148>)
 800442a:	f000 fff3 	bl	8005414 <HAL_TIM_MspPostInit>

}
 800442e:	bf00      	nop
 8004430:	3768      	adds	r7, #104	; 0x68
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2002d844 	.word	0x2002d844
 800443c:	40010000 	.word	0x40010000

08004440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004446:	f107 0320 	add.w	r3, r7, #32
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	615a      	str	r2, [r3, #20]
 8004460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <MX_TIM3_Init+0xc0>)
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <MX_TIM3_Init+0xc4>)
 8004466:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <MX_TIM3_Init+0xc0>)
 800446a:	2200      	movs	r2, #0
 800446c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <MX_TIM3_Init+0xc0>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004474:	4b22      	ldr	r3, [pc, #136]	; (8004500 <MX_TIM3_Init+0xc0>)
 8004476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <MX_TIM3_Init+0xc0>)
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004482:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <MX_TIM3_Init+0xc0>)
 8004484:	2200      	movs	r2, #0
 8004486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004488:	481d      	ldr	r0, [pc, #116]	; (8004500 <MX_TIM3_Init+0xc0>)
 800448a:	f007 feac 	bl	800c1e6 <HAL_TIM_PWM_Init>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004494:	f000 fbce 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004498:	2300      	movs	r3, #0
 800449a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044a0:	f107 0320 	add.w	r3, r7, #32
 80044a4:	4619      	mov	r1, r3
 80044a6:	4816      	ldr	r0, [pc, #88]	; (8004500 <MX_TIM3_Init+0xc0>)
 80044a8:	f008 fc3c 	bl	800cd24 <HAL_TIMEx_MasterConfigSynchronization>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80044b2:	f000 fbbf 	bl	8004c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044b6:	2360      	movs	r3, #96	; 0x60
 80044b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	2200      	movs	r2, #0
 80044ca:	4619      	mov	r1, r3
 80044cc:	480c      	ldr	r0, [pc, #48]	; (8004500 <MX_TIM3_Init+0xc0>)
 80044ce:	f008 f8c5 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80044d8:	f000 fbac 	bl	8004c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	2204      	movs	r2, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4807      	ldr	r0, [pc, #28]	; (8004500 <MX_TIM3_Init+0xc0>)
 80044e4:	f008 f8ba 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80044ee:	f000 fba1 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80044f2:	4803      	ldr	r0, [pc, #12]	; (8004500 <MX_TIM3_Init+0xc0>)
 80044f4:	f000 ff8e 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80044f8:	bf00      	nop
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	2002d6dc 	.word	0x2002d6dc
 8004504:	40000400 	.word	0x40000400

08004508 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450e:	f107 0320 	add.w	r3, r7, #32
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004518:	1d3b      	adds	r3, r7, #4
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	609a      	str	r2, [r3, #8]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	611a      	str	r2, [r3, #16]
 8004526:	615a      	str	r2, [r3, #20]
 8004528:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800452a:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <MX_TIM4_Init+0xc0>)
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <MX_TIM4_Init+0xc4>)
 800452e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <MX_TIM4_Init+0xc0>)
 8004532:	2200      	movs	r2, #0
 8004534:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <MX_TIM4_Init+0xc0>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800453c:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <MX_TIM4_Init+0xc0>)
 800453e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004542:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <MX_TIM4_Init+0xc0>)
 8004546:	2200      	movs	r2, #0
 8004548:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800454a:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <MX_TIM4_Init+0xc0>)
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004550:	481d      	ldr	r0, [pc, #116]	; (80045c8 <MX_TIM4_Init+0xc0>)
 8004552:	f007 fe48 	bl	800c1e6 <HAL_TIM_PWM_Init>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800455c:	f000 fb6a 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004568:	f107 0320 	add.w	r3, r7, #32
 800456c:	4619      	mov	r1, r3
 800456e:	4816      	ldr	r0, [pc, #88]	; (80045c8 <MX_TIM4_Init+0xc0>)
 8004570:	f008 fbd8 	bl	800cd24 <HAL_TIMEx_MasterConfigSynchronization>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800457a:	f000 fb5b 	bl	8004c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800457e:	2360      	movs	r3, #96	; 0x60
 8004580:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	2208      	movs	r2, #8
 8004592:	4619      	mov	r1, r3
 8004594:	480c      	ldr	r0, [pc, #48]	; (80045c8 <MX_TIM4_Init+0xc0>)
 8004596:	f008 f861 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80045a0:	f000 fb48 	bl	8004c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	220c      	movs	r2, #12
 80045a8:	4619      	mov	r1, r3
 80045aa:	4807      	ldr	r0, [pc, #28]	; (80045c8 <MX_TIM4_Init+0xc0>)
 80045ac:	f008 f856 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80045b6:	f000 fb3d 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80045ba:	4803      	ldr	r0, [pc, #12]	; (80045c8 <MX_TIM4_Init+0xc0>)
 80045bc:	f000 ff2a 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80045c0:	bf00      	nop
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	2002d568 	.word	0x2002d568
 80045cc:	40000800 	.word	0x40000800

080045d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045d6:	463b      	mov	r3, r7
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <MX_TIM6_Init+0x64>)
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <MX_TIM6_Init+0x68>)
 80045e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <MX_TIM6_Init+0x64>)
 80045e6:	2259      	movs	r2, #89	; 0x59
 80045e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <MX_TIM6_Init+0x64>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <MX_TIM6_Init+0x64>)
 80045f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045f8:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <MX_TIM6_Init+0x64>)
 80045fa:	2280      	movs	r2, #128	; 0x80
 80045fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80045fe:	480d      	ldr	r0, [pc, #52]	; (8004634 <MX_TIM6_Init+0x64>)
 8004600:	f007 fda2 	bl	800c148 <HAL_TIM_Base_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800460a:	f000 fb13 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004616:	463b      	mov	r3, r7
 8004618:	4619      	mov	r1, r3
 800461a:	4806      	ldr	r0, [pc, #24]	; (8004634 <MX_TIM6_Init+0x64>)
 800461c:	f008 fb82 	bl	800cd24 <HAL_TIMEx_MasterConfigSynchronization>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004626:	f000 fb05 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2002d804 	.word	0x2002d804
 8004638:	40001000 	.word	0x40001000

0800463c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004642:	463b      	mov	r3, r7
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <MX_TIM7_Init+0x60>)
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <MX_TIM7_Init+0x64>)
 800464e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004650:	4b12      	ldr	r3, [pc, #72]	; (800469c <MX_TIM7_Init+0x60>)
 8004652:	22b3      	movs	r2, #179	; 0xb3
 8004654:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <MX_TIM7_Init+0x60>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <MX_TIM7_Init+0x60>)
 800465e:	2231      	movs	r2, #49	; 0x31
 8004660:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004662:	4b0e      	ldr	r3, [pc, #56]	; (800469c <MX_TIM7_Init+0x60>)
 8004664:	2280      	movs	r2, #128	; 0x80
 8004666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004668:	480c      	ldr	r0, [pc, #48]	; (800469c <MX_TIM7_Init+0x60>)
 800466a:	f007 fd6d 	bl	800c148 <HAL_TIM_Base_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004674:	f000 fade 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004680:	463b      	mov	r3, r7
 8004682:	4619      	mov	r1, r3
 8004684:	4805      	ldr	r0, [pc, #20]	; (800469c <MX_TIM7_Init+0x60>)
 8004686:	f008 fb4d 	bl	800cd24 <HAL_TIMEx_MasterConfigSynchronization>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004690:	f000 fad0 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2002d9a8 	.word	0x2002d9a8
 80046a0:	40001400 	.word	0x40001400

080046a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08c      	sub	sp, #48	; 0x30
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f00e f993 	bl	80129de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80046c0:	4b22      	ldr	r3, [pc, #136]	; (800474c <MX_TIM8_Init+0xa8>)
 80046c2:	4a23      	ldr	r2, [pc, #140]	; (8004750 <MX_TIM8_Init+0xac>)
 80046c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <MX_TIM8_Init+0xa8>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <MX_TIM8_Init+0xa8>)
 80046ce:	2210      	movs	r2, #16
 80046d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <MX_TIM8_Init+0xa8>)
 80046d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <MX_TIM8_Init+0xa8>)
 80046dc:	2200      	movs	r2, #0
 80046de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <MX_TIM8_Init+0xa8>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <MX_TIM8_Init+0xa8>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80046ec:	2303      	movs	r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004700:	2300      	movs	r3, #0
 8004702:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004704:	2301      	movs	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004708:	2300      	movs	r3, #0
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	4619      	mov	r1, r3
 8004716:	480d      	ldr	r0, [pc, #52]	; (800474c <MX_TIM8_Init+0xa8>)
 8004718:	f007 fdce 	bl	800c2b8 <HAL_TIM_Encoder_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004722:	f000 fa87 	bl	8004c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4806      	ldr	r0, [pc, #24]	; (800474c <MX_TIM8_Init+0xa8>)
 8004734:	f008 faf6 	bl	800cd24 <HAL_TIMEx_MasterConfigSynchronization>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800473e:	f000 fa79 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004742:	bf00      	nop
 8004744:	3730      	adds	r7, #48	; 0x30
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	2002d528 	.word	0x2002d528
 8004750:	40010400 	.word	0x40010400

08004754 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]
 8004768:	615a      	str	r2, [r3, #20]
 800476a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <MX_TIM10_Init+0x94>)
 800476e:	4a1f      	ldr	r2, [pc, #124]	; (80047ec <MX_TIM10_Init+0x98>)
 8004770:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004772:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <MX_TIM10_Init+0x94>)
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <MX_TIM10_Init+0x94>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800477e:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <MX_TIM10_Init+0x94>)
 8004780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004784:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <MX_TIM10_Init+0x94>)
 8004788:	2200      	movs	r2, #0
 800478a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <MX_TIM10_Init+0x94>)
 800478e:	2200      	movs	r2, #0
 8004790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004792:	4815      	ldr	r0, [pc, #84]	; (80047e8 <MX_TIM10_Init+0x94>)
 8004794:	f007 fcd8 	bl	800c148 <HAL_TIM_Base_Init>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800479e:	f000 fa49 	bl	8004c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80047a2:	4811      	ldr	r0, [pc, #68]	; (80047e8 <MX_TIM10_Init+0x94>)
 80047a4:	f007 fd1f 	bl	800c1e6 <HAL_TIM_PWM_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80047ae:	f000 fa41 	bl	8004c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b2:	2360      	movs	r3, #96	; 0x60
 80047b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	2200      	movs	r2, #0
 80047c6:	4619      	mov	r1, r3
 80047c8:	4807      	ldr	r0, [pc, #28]	; (80047e8 <MX_TIM10_Init+0x94>)
 80047ca:	f007 ff47 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80047d4:	f000 fa2e 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80047d8:	4803      	ldr	r0, [pc, #12]	; (80047e8 <MX_TIM10_Init+0x94>)
 80047da:	f000 fe1b 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80047de:	bf00      	nop
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2002d644 	.word	0x2002d644
 80047ec:	40014400 	.word	0x40014400

080047f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
 8004804:	615a      	str	r2, [r3, #20]
 8004806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004808:	4b1e      	ldr	r3, [pc, #120]	; (8004884 <MX_TIM11_Init+0x94>)
 800480a:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <MX_TIM11_Init+0x98>)
 800480c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <MX_TIM11_Init+0x94>)
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <MX_TIM11_Init+0x94>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <MX_TIM11_Init+0x94>)
 800481c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004820:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <MX_TIM11_Init+0x94>)
 8004824:	2200      	movs	r2, #0
 8004826:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <MX_TIM11_Init+0x94>)
 800482a:	2200      	movs	r2, #0
 800482c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800482e:	4815      	ldr	r0, [pc, #84]	; (8004884 <MX_TIM11_Init+0x94>)
 8004830:	f007 fc8a 	bl	800c148 <HAL_TIM_Base_Init>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800483a:	f000 f9fb 	bl	8004c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800483e:	4811      	ldr	r0, [pc, #68]	; (8004884 <MX_TIM11_Init+0x94>)
 8004840:	f007 fcd1 	bl	800c1e6 <HAL_TIM_PWM_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800484a:	f000 f9f3 	bl	8004c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800484e:	2360      	movs	r3, #96	; 0x60
 8004850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	2200      	movs	r2, #0
 8004862:	4619      	mov	r1, r3
 8004864:	4807      	ldr	r0, [pc, #28]	; (8004884 <MX_TIM11_Init+0x94>)
 8004866:	f007 fef9 	bl	800c65c <HAL_TIM_PWM_ConfigChannel>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004870:	f000 f9e0 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004874:	4803      	ldr	r0, [pc, #12]	; (8004884 <MX_TIM11_Init+0x94>)
 8004876:	f000 fdcd 	bl	8005414 <HAL_TIM_MspPostInit>

}
 800487a:	bf00      	nop
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	2002d764 	.word	0x2002d764
 8004888:	40014800 	.word	0x40014800

0800488c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <MX_TIM13_Init+0x40>)
 8004892:	4a0f      	ldr	r2, [pc, #60]	; (80048d0 <MX_TIM13_Init+0x44>)
 8004894:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <MX_TIM13_Init+0x40>)
 8004898:	2259      	movs	r2, #89	; 0x59
 800489a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <MX_TIM13_Init+0x40>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <MX_TIM13_Init+0x40>)
 80048a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80048a8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <MX_TIM13_Init+0x40>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <MX_TIM13_Init+0x40>)
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80048b6:	4805      	ldr	r0, [pc, #20]	; (80048cc <MX_TIM13_Init+0x40>)
 80048b8:	f007 fc46 	bl	800c148 <HAL_TIM_Base_Init>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80048c2:	f000 f9b7 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	2002d724 	.word	0x2002d724
 80048d0:	40001c00 	.word	0x40001c00

080048d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <MX_USART2_UART_Init+0x50>)
 80048dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 80048e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 80048fa:	220c      	movs	r2, #12
 80048fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 8004900:	2200      	movs	r2, #0
 8004902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 8004906:	2200      	movs	r2, #0
 8004908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800490a:	4805      	ldr	r0, [pc, #20]	; (8004920 <MX_USART2_UART_Init+0x4c>)
 800490c:	f008 faec 	bl	800cee8 <HAL_UART_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004916:	f000 f98d 	bl	8004c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	2002d908 	.word	0x2002d908
 8004924:	40004400 	.word	0x40004400

08004928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <MX_DMA_Init+0x5c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <MX_DMA_Init+0x5c>)
 8004938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <MX_DMA_Init+0x5c>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2100      	movs	r1, #0
 800494e:	203a      	movs	r0, #58	; 0x3a
 8004950:	f002 ffad 	bl	80078ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004954:	203a      	movs	r0, #58	; 0x3a
 8004956:	f002 ffc6 	bl	80078e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	2100      	movs	r1, #0
 800495e:	203b      	movs	r0, #59	; 0x3b
 8004960:	f002 ffa5 	bl	80078ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004964:	203b      	movs	r0, #59	; 0x3b
 8004966:	f002 ffbe 	bl	80078e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800496a:	2200      	movs	r2, #0
 800496c:	2100      	movs	r1, #0
 800496e:	2045      	movs	r0, #69	; 0x45
 8004970:	f002 ff9d 	bl	80078ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004974:	2045      	movs	r0, #69	; 0x45
 8004976:	f002 ffb6 	bl	80078e6 <HAL_NVIC_EnableIRQ>

}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800

08004988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	4b9c      	ldr	r3, [pc, #624]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	4a9b      	ldr	r2, [pc, #620]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049a8:	f043 0310 	orr.w	r3, r3, #16
 80049ac:	6313      	str	r3, [r2, #48]	; 0x30
 80049ae:	4b99      	ldr	r3, [pc, #612]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	4b95      	ldr	r3, [pc, #596]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4a94      	ldr	r2, [pc, #592]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ca:	4b92      	ldr	r3, [pc, #584]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	4b8e      	ldr	r3, [pc, #568]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	4a8d      	ldr	r2, [pc, #564]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049e0:	f043 0304 	orr.w	r3, r3, #4
 80049e4:	6313      	str	r3, [r2, #48]	; 0x30
 80049e6:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b87      	ldr	r3, [pc, #540]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a86      	ldr	r2, [pc, #536]	; (8004c14 <MX_GPIO_Init+0x28c>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b84      	ldr	r3, [pc, #528]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	4b80      	ldr	r3, [pc, #512]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4a7f      	ldr	r2, [pc, #508]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1e:	4b7d      	ldr	r3, [pc, #500]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a78      	ldr	r2, [pc, #480]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a34:	f043 0308 	orr.w	r3, r3, #8
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <MX_GPIO_Init+0x28c>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a4c:	4872      	ldr	r0, [pc, #456]	; (8004c18 <MX_GPIO_Init+0x290>)
 8004a4e:	f003 fcc3 	bl	80083d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a58:	4870      	ldr	r0, [pc, #448]	; (8004c1c <MX_GPIO_Init+0x294>)
 8004a5a:	f003 fcbd 	bl	80083d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a64:	486e      	ldr	r0, [pc, #440]	; (8004c20 <MX_GPIO_Init+0x298>)
 8004a66:	f003 fcb7 	bl	80083d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004a70:	486c      	ldr	r0, [pc, #432]	; (8004c24 <MX_GPIO_Init+0x29c>)
 8004a72:	f003 fcb1 	bl	80083d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a76:	2304      	movs	r3, #4
 8004a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004a7a:	4b6b      	ldr	r3, [pc, #428]	; (8004c28 <MX_GPIO_Init+0x2a0>)
 8004a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a82:	f107 031c 	add.w	r3, r7, #28
 8004a86:	4619      	mov	r1, r3
 8004a88:	4863      	ldr	r0, [pc, #396]	; (8004c18 <MX_GPIO_Init+0x290>)
 8004a8a:	f003 fae3 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004a8e:	230f      	movs	r3, #15
 8004a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a92:	2303      	movs	r3, #3
 8004a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a9a:	f107 031c 	add.w	r3, r7, #28
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4862      	ldr	r0, [pc, #392]	; (8004c2c <MX_GPIO_Init+0x2a4>)
 8004aa2:	f003 fad7 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004aa6:	23e1      	movs	r3, #225	; 0xe1
 8004aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab2:	f107 031c 	add.w	r3, r7, #28
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	485a      	ldr	r0, [pc, #360]	; (8004c24 <MX_GPIO_Init+0x29c>)
 8004aba:	f003 facb 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aca:	f107 031c 	add.w	r3, r7, #28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4852      	ldr	r0, [pc, #328]	; (8004c1c <MX_GPIO_Init+0x294>)
 8004ad2:	f003 fabf 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae2:	f107 031c 	add.w	r3, r7, #28
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	484c      	ldr	r0, [pc, #304]	; (8004c1c <MX_GPIO_Init+0x294>)
 8004aea:	f003 fab3 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004aee:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004af4:	2300      	movs	r3, #0
 8004af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af8:	2301      	movs	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004afc:	f107 031c 	add.w	r3, r7, #28
 8004b00:	4619      	mov	r1, r3
 8004b02:	4845      	ldr	r0, [pc, #276]	; (8004c18 <MX_GPIO_Init+0x290>)
 8004b04:	f003 faa6 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b16:	2300      	movs	r3, #0
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b1a:	f107 031c 	add.w	r3, r7, #28
 8004b1e:	4619      	mov	r1, r3
 8004b20:	483d      	ldr	r0, [pc, #244]	; (8004c18 <MX_GPIO_Init+0x290>)
 8004b22:	f003 fa97 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b38:	f107 031c 	add.w	r3, r7, #28
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4837      	ldr	r0, [pc, #220]	; (8004c1c <MX_GPIO_Init+0x294>)
 8004b40:	f003 fa88 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <MX_GPIO_Init+0x2a8>)
 8004b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	4619      	mov	r1, r3
 8004b58:	4831      	ldr	r0, [pc, #196]	; (8004c20 <MX_GPIO_Init+0x298>)
 8004b5a:	f003 fa7b 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b64:	2301      	movs	r3, #1
 8004b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b70:	f107 031c 	add.w	r3, r7, #28
 8004b74:	4619      	mov	r1, r3
 8004b76:	482a      	ldr	r0, [pc, #168]	; (8004c20 <MX_GPIO_Init+0x298>)
 8004b78:	f003 fa6c 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b82:	2301      	movs	r3, #1
 8004b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b86:	2301      	movs	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b8e:	f107 031c 	add.w	r3, r7, #28
 8004b92:	4619      	mov	r1, r3
 8004b94:	4822      	ldr	r0, [pc, #136]	; (8004c20 <MX_GPIO_Init+0x298>)
 8004b96:	f003 fa5d 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b9a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004b9e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bac:	f107 031c 	add.w	r3, r7, #28
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	481c      	ldr	r0, [pc, #112]	; (8004c24 <MX_GPIO_Init+0x29c>)
 8004bb4:	f003 fa4e 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc6:	f107 031c 	add.w	r3, r7, #28
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4815      	ldr	r0, [pc, #84]	; (8004c24 <MX_GPIO_Init+0x29c>)
 8004bce:	f003 fa41 	bl	8008054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004bd2:	239b      	movs	r3, #155	; 0x9b
 8004bd4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bde:	f107 031c 	add.w	r3, r7, #28
 8004be2:	4619      	mov	r1, r3
 8004be4:	480e      	ldr	r0, [pc, #56]	; (8004c20 <MX_GPIO_Init+0x298>)
 8004be6:	f003 fa35 	bl	8008054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004bea:	2200      	movs	r2, #0
 8004bec:	2100      	movs	r1, #0
 8004bee:	2008      	movs	r0, #8
 8004bf0:	f002 fe5d 	bl	80078ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004bf4:	2008      	movs	r0, #8
 8004bf6:	f002 fe76 	bl	80078e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2017      	movs	r0, #23
 8004c00:	f002 fe55 	bl	80078ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c04:	2017      	movs	r0, #23
 8004c06:	f002 fe6e 	bl	80078e6 <HAL_NVIC_EnableIRQ>

}
 8004c0a:	bf00      	nop
 8004c0c:	3730      	adds	r7, #48	; 0x30
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40020400 	.word	0x40020400
 8004c20:	40020c00 	.word	0x40020c00
 8004c24:	40020000 	.word	0x40020000
 8004c28:	10310000 	.word	0x10310000
 8004c2c:	40020800 	.word	0x40020800
 8004c30:	10110000 	.word	0x10110000

08004c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c3a:	e7fe      	b.n	8004c3a <Error_Handler+0x6>

08004c3c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c60:	6453      	str	r3, [r2, #68]	; 0x44
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800

08004c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <HAL_ADC_MspInit+0x148>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f040 808e 	bne.w	8004ddc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	4a47      	ldr	r2, [pc, #284]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cce:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4a40      	ldr	r2, [pc, #256]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6313      	str	r3, [r2, #48]	; 0x30
 8004cec:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	4a39      	ldr	r2, [pc, #228]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6313      	str	r3, [r2, #48]	; 0x30
 8004d08:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d1e:	f043 0302 	orr.w	r3, r3, #2
 8004d22:	6313      	str	r3, [r2, #48]	; 0x30
 8004d24:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004d30:	230f      	movs	r3, #15
 8004d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d34:	2303      	movs	r3, #3
 8004d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d3c:	f107 031c 	add.w	r3, r7, #28
 8004d40:	4619      	mov	r1, r3
 8004d42:	482a      	ldr	r0, [pc, #168]	; (8004dec <HAL_ADC_MspInit+0x150>)
 8004d44:	f003 f986 	bl	8008054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004d48:	23ff      	movs	r3, #255	; 0xff
 8004d4a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	f107 031c 	add.w	r3, r7, #28
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4825      	ldr	r0, [pc, #148]	; (8004df0 <HAL_ADC_MspInit+0x154>)
 8004d5c:	f003 f97a 	bl	8008054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d60:	2303      	movs	r3, #3
 8004d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d64:	2303      	movs	r3, #3
 8004d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6c:	f107 031c 	add.w	r3, r7, #28
 8004d70:	4619      	mov	r1, r3
 8004d72:	4820      	ldr	r0, [pc, #128]	; (8004df4 <HAL_ADC_MspInit+0x158>)
 8004d74:	f003 f96e 	bl	8008054 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004d78:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <HAL_ADC_MspInit+0x160>)
 8004d7c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d84:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004d92:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d98:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004da8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004db4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004db8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004dc0:	480d      	ldr	r0, [pc, #52]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dc2:	f002 fdab 	bl	800791c <HAL_DMA_Init>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004dcc:	f7ff ff32 	bl	8004c34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004ddc:	bf00      	nop
 8004dde:	3730      	adds	r7, #48	; 0x30
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40012100 	.word	0x40012100
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40020800 	.word	0x40020800
 8004df0:	40020000 	.word	0x40020000
 8004df4:	40020400 	.word	0x40020400
 8004df8:	2002d948 	.word	0x2002d948
 8004dfc:	40026440 	.word	0x40026440

08004e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e08:	f107 031c 	add.w	r3, r7, #28
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_I2C_MspInit+0xe8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d12c      	bne.n	8004e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e3e:	23c0      	movs	r3, #192	; 0xc0
 8004e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e42:	2312      	movs	r3, #18
 8004e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e46:	2301      	movs	r3, #1
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e4e:	2304      	movs	r3, #4
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4825      	ldr	r0, [pc, #148]	; (8004ef0 <HAL_I2C_MspInit+0xf0>)
 8004e5a:	f003 f8fb 	bl	8008054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a21      	ldr	r2, [pc, #132]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004e7a:	e031      	b.n	8004ee0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <HAL_I2C_MspInit+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d12c      	bne.n	8004ee0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ea2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea8:	2312      	movs	r3, #18
 8004eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eac:	2301      	movs	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb8:	f107 031c 	add.w	r3, r7, #28
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <HAL_I2C_MspInit+0xf0>)
 8004ec0:	f003 f8c8 	bl	8008054 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	3730      	adds	r7, #48	; 0x30
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40005400 	.word	0x40005400
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020400 	.word	0x40020400
 8004ef4:	40005800 	.word	0x40005800

08004ef8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a69      	ldr	r2, [pc, #420]	; (80050bc <HAL_SD_MspInit+0x1c4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	f040 80cb 	bne.w	80050b2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	4b67      	ldr	r3, [pc, #412]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	4a66      	ldr	r2, [pc, #408]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2c:	4b64      	ldr	r3, [pc, #400]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	4a5f      	ldr	r2, [pc, #380]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f42:	f043 0304 	orr.w	r3, r3, #4
 8004f46:	6313      	str	r3, [r2, #48]	; 0x30
 8004f48:	4b5d      	ldr	r3, [pc, #372]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f5e:	f043 0308 	orr.w	r3, r3, #8
 8004f62:	6313      	str	r3, [r2, #48]	; 0x30
 8004f64:	4b56      	ldr	r3, [pc, #344]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004f70:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004f74:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f82:	230c      	movs	r3, #12
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	484d      	ldr	r0, [pc, #308]	; (80050c4 <HAL_SD_MspInit+0x1cc>)
 8004f8e:	f003 f861 	bl	8008054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f92:	2304      	movs	r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f96:	2302      	movs	r3, #2
 8004f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4619      	mov	r1, r3
 8004fac:	4846      	ldr	r0, [pc, #280]	; (80050c8 <HAL_SD_MspInit+0x1d0>)
 8004fae:	f003 f851 	bl	8008054 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004fb2:	4b46      	ldr	r3, [pc, #280]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fb4:	4a46      	ldr	r2, [pc, #280]	; (80050d0 <HAL_SD_MspInit+0x1d8>)
 8004fb6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004fb8:	4b44      	ldr	r3, [pc, #272]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fbe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fc0:	4b42      	ldr	r3, [pc, #264]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fd4:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fda:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fe2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004ff0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004ff8:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005000:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005008:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800500e:	482f      	ldr	r0, [pc, #188]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005010:	f002 fc84 	bl	800791c <HAL_DMA_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800501a:	f7ff fe0b 	bl	8004c34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
 8005024:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_SD_MspInit+0x1e0>)
 800502e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005036:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005038:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005044:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800504a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800504c:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800504e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005052:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800505a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800505e:	2220      	movs	r2, #32
 8005060:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005068:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800506c:	2204      	movs	r2, #4
 800506e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005070:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005072:	2203      	movs	r2, #3
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005078:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005080:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005086:	4813      	ldr	r0, [pc, #76]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005088:	f002 fc48 	bl	800791c <HAL_DMA_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005092:	f7ff fdcf 	bl	8004c34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c
 800509c:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	f002 fc01 	bl	80078ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80050ac:	2031      	movs	r0, #49	; 0x31
 80050ae:	f002 fc1a 	bl	80078e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80050b2:	bf00      	nop
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40020800 	.word	0x40020800
 80050c8:	40020c00 	.word	0x40020c00
 80050cc:	2002d470 	.word	0x2002d470
 80050d0:	40026458 	.word	0x40026458
 80050d4:	2002d7a4 	.word	0x2002d7a4
 80050d8:	400264a0 	.word	0x400264a0

080050dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 0314 	add.w	r3, r7, #20
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_SPI_MspInit+0x84>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d12c      	bne.n	8005158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a17      	ldr	r2, [pc, #92]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b15      	ldr	r3, [pc, #84]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <HAL_SPI_MspInit+0x88>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005136:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800513a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005144:	2303      	movs	r3, #3
 8005146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005148:	2305      	movs	r3, #5
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4619      	mov	r1, r3
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <HAL_SPI_MspInit+0x8c>)
 8005154:	f002 ff7e 	bl	8008054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005158:	bf00      	nop
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40003800 	.word	0x40003800
 8005164:	40023800 	.word	0x40023800
 8005168:	40020400 	.word	0x40020400

0800516c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	f107 031c 	add.w	r3, r7, #28
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <HAL_TIM_PWM_MspInit+0xd4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d12d      	bne.n	80051ea <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	4b2c      	ldr	r3, [pc, #176]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6453      	str	r3, [r2, #68]	; 0x44
 800519e:	4b29      	ldr	r3, [pc, #164]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4a24      	ldr	r2, [pc, #144]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051b4:	f043 0310 	orr.w	r3, r3, #16
 80051b8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ba:	4b22      	ldr	r3, [pc, #136]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80051c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80051ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051d8:	2301      	movs	r3, #1
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051dc:	f107 031c 	add.w	r3, r7, #28
 80051e0:	4619      	mov	r1, r3
 80051e2:	4819      	ldr	r0, [pc, #100]	; (8005248 <HAL_TIM_PWM_MspInit+0xdc>)
 80051e4:	f002 ff36 	bl	8008054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80051e8:	e026      	b.n	8005238 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_TIM_PWM_MspInit+0xe0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10e      	bne.n	8005212 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	4b12      	ldr	r3, [pc, #72]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	4a11      	ldr	r2, [pc, #68]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051fe:	f043 0302 	orr.w	r3, r3, #2
 8005202:	6413      	str	r3, [r2, #64]	; 0x40
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]
}
 8005210:	e012      	b.n	8005238 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_TIM_PWM_MspInit+0xe4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d10d      	bne.n	8005238 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	4a07      	ldr	r2, [pc, #28]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6413      	str	r3, [r2, #64]	; 0x40
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	bf00      	nop
 800523a:	3730      	adds	r7, #48	; 0x30
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40010000 	.word	0x40010000
 8005244:	40023800 	.word	0x40023800
 8005248:	40021000 	.word	0x40021000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800

08005254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3e      	ldr	r2, [pc, #248]	; (800535c <HAL_TIM_Base_MspInit+0x108>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d116      	bne.n	8005294 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005270:	f043 0310 	orr.w	r3, r3, #16
 8005274:	6413      	str	r3, [r2, #64]	; 0x40
 8005276:	4b3a      	ldr	r3, [pc, #232]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005282:	2200      	movs	r2, #0
 8005284:	2101      	movs	r1, #1
 8005286:	2036      	movs	r0, #54	; 0x36
 8005288:	f002 fb11 	bl	80078ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800528c:	2036      	movs	r0, #54	; 0x36
 800528e:	f002 fb2a 	bl	80078e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005292:	e05e      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a32      	ldr	r2, [pc, #200]	; (8005364 <HAL_TIM_Base_MspInit+0x110>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d116      	bne.n	80052cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a2e      	ldr	r2, [pc, #184]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052a8:	f043 0320 	orr.w	r3, r3, #32
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
 80052ae:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	2037      	movs	r0, #55	; 0x37
 80052c0:	f002 faf5 	bl	80078ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052c4:	2037      	movs	r0, #55	; 0x37
 80052c6:	f002 fb0e 	bl	80078e6 <HAL_NVIC_EnableIRQ>
}
 80052ca:	e042      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <HAL_TIM_Base_MspInit+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	4a20      	ldr	r2, [pc, #128]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	6453      	str	r3, [r2, #68]	; 0x44
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]
}
 80052f2:	e02e      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIM_Base_MspInit+0x118>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	6453      	str	r3, [r2, #68]	; 0x44
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
}
 800531a:	e01a      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <HAL_TIM_Base_MspInit+0x11c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d115      	bne.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005342:	2200      	movs	r2, #0
 8005344:	2100      	movs	r1, #0
 8005346:	202c      	movs	r0, #44	; 0x2c
 8005348:	f002 fab1 	bl	80078ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800534c:	202c      	movs	r0, #44	; 0x2c
 800534e:	f002 faca 	bl	80078e6 <HAL_NVIC_EnableIRQ>
}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40001000 	.word	0x40001000
 8005360:	40023800 	.word	0x40023800
 8005364:	40001400 	.word	0x40001400
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800
 8005370:	40001c00 	.word	0x40001c00

08005374 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537c:	f107 0314 	add.w	r3, r7, #20
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_TIM_Encoder_MspInit+0x94>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d133      	bne.n	80053fe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053a0:	f043 0302 	orr.w	r3, r3, #2
 80053a4:	6453      	str	r3, [r2, #68]	; 0x44
 80053a6:	4b19      	ldr	r3, [pc, #100]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a14      	ldr	r2, [pc, #80]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d2:	2302      	movs	r3, #2
 80053d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053da:	2300      	movs	r3, #0
 80053dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053de:	2303      	movs	r3, #3
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e2:	f107 0314 	add.w	r3, r7, #20
 80053e6:	4619      	mov	r1, r3
 80053e8:	4809      	ldr	r0, [pc, #36]	; (8005410 <HAL_TIM_Encoder_MspInit+0x9c>)
 80053ea:	f002 fe33 	bl	8008054 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	202c      	movs	r0, #44	; 0x2c
 80053f4:	f002 fa5b 	bl	80078ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80053f8:	202c      	movs	r0, #44	; 0x2c
 80053fa:	f002 fa74 	bl	80078e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80053fe:	bf00      	nop
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40010400 	.word	0x40010400
 800540c:	40023800 	.word	0x40023800
 8005410:	40020800 	.word	0x40020800

08005414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a5c      	ldr	r2, [pc, #368]	; (80055a4 <HAL_TIM_MspPostInit+0x190>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d11f      	bne.n	8005476 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4a5a      	ldr	r2, [pc, #360]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	6313      	str	r3, [r2, #48]	; 0x30
 8005446:	4b58      	ldr	r3, [pc, #352]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005458:	2302      	movs	r3, #2
 800545a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005460:	2300      	movs	r3, #0
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005464:	2301      	movs	r3, #1
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005468:	f107 031c 	add.w	r3, r7, #28
 800546c:	4619      	mov	r1, r3
 800546e:	484f      	ldr	r0, [pc, #316]	; (80055ac <HAL_TIM_MspPostInit+0x198>)
 8005470:	f002 fdf0 	bl	8008054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005474:	e091      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a4d      	ldr	r2, [pc, #308]	; (80055b0 <HAL_TIM_MspPostInit+0x19c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d11e      	bne.n	80054be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	4b48      	ldr	r3, [pc, #288]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4a47      	ldr	r2, [pc, #284]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800548a:	f043 0302 	orr.w	r3, r3, #2
 800548e:	6313      	str	r3, [r2, #48]	; 0x30
 8005490:	4b45      	ldr	r3, [pc, #276]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800549c:	2330      	movs	r3, #48	; 0x30
 800549e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054ac:	2302      	movs	r3, #2
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b0:	f107 031c 	add.w	r3, r7, #28
 80054b4:	4619      	mov	r1, r3
 80054b6:	483f      	ldr	r0, [pc, #252]	; (80055b4 <HAL_TIM_MspPostInit+0x1a0>)
 80054b8:	f002 fdcc 	bl	8008054 <HAL_GPIO_Init>
}
 80054bc:	e06d      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a3d      	ldr	r2, [pc, #244]	; (80055b8 <HAL_TIM_MspPostInit+0x1a4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d11f      	bne.n	8005508 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 80054d2:	f043 0308 	orr.w	r3, r3, #8
 80054d6:	6313      	str	r3, [r2, #48]	; 0x30
 80054d8:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80054e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80054e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f2:	2300      	movs	r3, #0
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054f6:	2302      	movs	r3, #2
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054fa:	f107 031c 	add.w	r3, r7, #28
 80054fe:	4619      	mov	r1, r3
 8005500:	482e      	ldr	r0, [pc, #184]	; (80055bc <HAL_TIM_MspPostInit+0x1a8>)
 8005502:	f002 fda7 	bl	8008054 <HAL_GPIO_Init>
}
 8005506:	e048      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <HAL_TIM_MspPostInit+0x1ac>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d11f      	bne.n	8005552 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	6313      	str	r3, [r2, #48]	; 0x30
 8005522:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800552e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005534:	2302      	movs	r3, #2
 8005536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553c:	2300      	movs	r3, #0
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005540:	2303      	movs	r3, #3
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	4619      	mov	r1, r3
 800554a:	481a      	ldr	r0, [pc, #104]	; (80055b4 <HAL_TIM_MspPostInit+0x1a0>)
 800554c:	f002 fd82 	bl	8008054 <HAL_GPIO_Init>
}
 8005550:	e023      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <HAL_TIM_MspPostInit+0x1b0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d11e      	bne.n	800559a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005566:	f043 0302 	orr.w	r3, r3, #2
 800556a:	6313      	str	r3, [r2, #48]	; 0x30
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557e:	2302      	movs	r3, #2
 8005580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005586:	2300      	movs	r3, #0
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800558a:	2303      	movs	r3, #3
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800558e:	f107 031c 	add.w	r3, r7, #28
 8005592:	4619      	mov	r1, r3
 8005594:	4807      	ldr	r0, [pc, #28]	; (80055b4 <HAL_TIM_MspPostInit+0x1a0>)
 8005596:	f002 fd5d 	bl	8008054 <HAL_GPIO_Init>
}
 800559a:	bf00      	nop
 800559c:	3730      	adds	r7, #48	; 0x30
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40020400 	.word	0x40020400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40020c00 	.word	0x40020c00
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_UART_MspInit+0x84>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d12b      	bne.n	8005642 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_UART_MspInit+0x88>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_UART_MspInit+0x88>)
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6313      	str	r3, [r2, #48]	; 0x30
 8005616:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <HAL_UART_MspInit+0x88>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005622:	2360      	movs	r3, #96	; 0x60
 8005624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	2302      	movs	r3, #2
 8005628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562e:	2303      	movs	r3, #3
 8005630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005632:	2307      	movs	r3, #7
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005636:	f107 0314 	add.w	r3, r7, #20
 800563a:	4619      	mov	r1, r3
 800563c:	4805      	ldr	r0, [pc, #20]	; (8005654 <HAL_UART_MspInit+0x8c>)
 800563e:	f002 fd09 	bl	8008054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005642:	bf00      	nop
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40004400 	.word	0x40004400
 8005650:	40023800 	.word	0x40023800
 8005654:	40020c00 	.word	0x40020c00

08005658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800565c:	e7fe      	b.n	800565c <NMI_Handler+0x4>

0800565e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005662:	e7fe      	b.n	8005662 <HardFault_Handler+0x4>

08005664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005668:	e7fe      	b.n	8005668 <MemManage_Handler+0x4>

0800566a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800566e:	e7fe      	b.n	800566e <BusFault_Handler+0x4>

08005670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <UsageFault_Handler+0x4>

08005676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056a4:	f001 fbe2 	bl	8006e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}

080056ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80056b0:	2004      	movs	r0, #4
 80056b2:	f002 feab 	bl	800840c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}

080056ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80056be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056c2:	f002 fea3 	bl	800840c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80056d0:	4803      	ldr	r0, [pc, #12]	; (80056e0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80056d2:	f006 feba 	bl	800c44a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80056d6:	4803      	ldr	r0, [pc, #12]	; (80056e4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80056d8:	f006 feb7 	bl	800c44a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	2002d528 	.word	0x2002d528
 80056e4:	2002d724 	.word	0x2002d724

080056e8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <SDIO_IRQHandler+0x10>)
 80056ee:	f004 ff53 	bl	800a598 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	2002d884 	.word	0x2002d884

080056fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <TIM6_DAC_IRQHandler+0x10>)
 8005702:	f006 fea2 	bl	800c44a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2002d804 	.word	0x2002d804

08005710 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005714:	4802      	ldr	r0, [pc, #8]	; (8005720 <TIM7_IRQHandler+0x10>)
 8005716:	f006 fe98 	bl	800c44a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2002d9a8 	.word	0x2002d9a8

08005724 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <DMA2_Stream2_IRQHandler+0x10>)
 800572a:	f002 fa1f 	bl	8007b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	2002d948 	.word	0x2002d948

08005738 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800573c:	4802      	ldr	r0, [pc, #8]	; (8005748 <DMA2_Stream3_IRQHandler+0x10>)
 800573e:	f002 fa15 	bl	8007b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005742:	bf00      	nop
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	2002d470 	.word	0x2002d470

0800574c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <DMA2_Stream6_IRQHandler+0x10>)
 8005752:	f002 fa0b 	bl	8007b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2002d7a4 	.word	0x2002d7a4

08005760 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e00a      	b.n	8005788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005772:	f3af 8000 	nop.w
 8005776:	4601      	mov	r1, r0
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	60ba      	str	r2, [r7, #8]
 800577e:	b2ca      	uxtb	r2, r1
 8005780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	3301      	adds	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	dbf0      	blt.n	8005772 <_read+0x12>
	}

return len;
 8005790:	687b      	ldr	r3, [r7, #4]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <_close>:
	}
	return len;
}

int _close(int file)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	return -1;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057c2:	605a      	str	r2, [r3, #4]
	return 0;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <_isatty>:

int _isatty(int file)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
	return 1;
 80057da:	2301      	movs	r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	return 0;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <_sbrk+0x5c>)
 800580e:	4b15      	ldr	r3, [pc, #84]	; (8005864 <_sbrk+0x60>)
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <_sbrk+0x64>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <_sbrk+0x64>)
 8005822:	4a12      	ldr	r2, [pc, #72]	; (800586c <_sbrk+0x68>)
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <_sbrk+0x64>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d207      	bcs.n	8005844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005834:	f00d f89e 	bl	8012974 <__errno>
 8005838:	4602      	mov	r2, r0
 800583a:	230c      	movs	r3, #12
 800583c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	e009      	b.n	8005858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <_sbrk+0x64>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_sbrk+0x64>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	4a05      	ldr	r2, [pc, #20]	; (8005868 <_sbrk+0x64>)
 8005854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20050000 	.word	0x20050000
 8005864:	00000800 	.word	0x00000800
 8005868:	20000244 	.word	0x20000244
 800586c:	2002faf8 	.word	0x2002faf8

08005870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <SystemInit+0x28>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <SystemInit+0x28>)
 800587c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <SystemInit+0x28>)
 8005886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800588a:	609a      	str	r2, [r3, #8]
#endif
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <batteryLowMode>:
double mon_f, mon_d;
float mon_v, mon_w;
uint16_t mon_cnt;

void batteryLowMode()
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
	lcd_clear();
 80058a0:	f7fb fbfe 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80058a4:	2100      	movs	r1, #0
 80058a6:	2000      	movs	r0, #0
 80058a8:	f7fb fc0a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80058ac:	4814      	ldr	r0, [pc, #80]	; (8005900 <batteryLowMode+0x64>)
 80058ae:	f7fb fc31 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80058b2:	2101      	movs	r1, #1
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fb fc03 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80058ba:	4812      	ldr	r0, [pc, #72]	; (8005904 <batteryLowMode+0x68>)
 80058bc:	f7fb fc2a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80058c0:	2152      	movs	r1, #82	; 0x52
 80058c2:	4811      	ldr	r0, [pc, #68]	; (8005908 <batteryLowMode+0x6c>)
 80058c4:	f7fc fbe6 	bl	8002094 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80058c8:	2064      	movs	r0, #100	; 0x64
 80058ca:	f001 faef 	bl	8006eac <HAL_Delay>
		led.fullColor('Y');
 80058ce:	2159      	movs	r1, #89	; 0x59
 80058d0:	480d      	ldr	r0, [pc, #52]	; (8005908 <batteryLowMode+0x6c>)
 80058d2:	f7fc fbdf 	bl	8002094 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80058d6:	2064      	movs	r0, #100	; 0x64
 80058d8:	f001 fae8 	bl	8006eac <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80058dc:	480b      	ldr	r0, [pc, #44]	; (800590c <batteryLowMode+0x70>)
 80058de:	f7fc fb75 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0e6      	beq.n	80058c0 <batteryLowMode+0x24>
			HAL_Delay(500);
 80058f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058f6:	f001 fad9 	bl	8006eac <HAL_Delay>
			break;
 80058fa:	bf00      	nop
		}
	}
}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	08017a80 	.word	0x08017a80
 8005904:	08017a88 	.word	0x08017a88
 8005908:	20000550 	.word	0x20000550
 800590c:	20000544 	.word	0x20000544

08005910 <cppInit>:

void cppInit(void)
{
 8005910:	b598      	push	{r3, r4, r7, lr}
 8005912:	af00      	add	r7, sp, #0
	lcd_init();
 8005914:	f7fb fb80 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005918:	4840      	ldr	r0, [pc, #256]	; (8005a1c <cppInit+0x10c>)
 800591a:	f7fd fd57 	bl	80033cc <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800591e:	2064      	movs	r0, #100	; 0x64
 8005920:	f001 fac4 	bl	8006eac <HAL_Delay>
	power_sensor.updateValues();
 8005924:	483d      	ldr	r0, [pc, #244]	; (8005a1c <cppInit+0x10c>)
 8005926:	f7fd fd5f 	bl	80033e8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800592a:	f7fb fbb9 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800592e:	2100      	movs	r1, #0
 8005930:	2000      	movs	r0, #0
 8005932:	f7fb fbc5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005936:	483a      	ldr	r0, [pc, #232]	; (8005a20 <cppInit+0x110>)
 8005938:	f7fb fbec 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800593c:	2101      	movs	r1, #1
 800593e:	2000      	movs	r0, #0
 8005940:	f7fb fbbe 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005944:	4835      	ldr	r0, [pc, #212]	; (8005a1c <cppInit+0x10c>)
 8005946:	f7fd fd79 	bl	800343c <_ZN11PowerSensor17getButteryVoltageEv>
 800594a:	ee10 3a10 	vmov	r3, s0
 800594e:	4618      	mov	r0, r3
 8005950:	f7fa fe12 	bl	8000578 <__aeabi_f2d>
 8005954:	4603      	mov	r3, r0
 8005956:	460c      	mov	r4, r1
 8005958:	461a      	mov	r2, r3
 800595a:	4623      	mov	r3, r4
 800595c:	4831      	ldr	r0, [pc, #196]	; (8005a24 <cppInit+0x114>)
 800595e:	f7fb fbd9 	bl	8001114 <lcd_printf>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005962:	482e      	ldr	r0, [pc, #184]	; (8005a1c <cppInit+0x10c>)
 8005964:	f7fd fd7c 	bl	8003460 <_ZN11PowerSensor12butteryCheckEv>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <cppInit+0x62>
 800596e:	f7ff ff95 	bl	800589c <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005972:	482d      	ldr	r0, [pc, #180]	; (8005a28 <cppInit+0x118>)
 8005974:	f7fd f86e 	bl	8002a54 <_ZN6Logger10sdCardInitEv>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <cppInit+0x7e>
		led.fullColor('G');
 800597e:	2147      	movs	r1, #71	; 0x47
 8005980:	482a      	ldr	r0, [pc, #168]	; (8005a2c <cppInit+0x11c>)
 8005982:	f7fc fb87 	bl	8002094 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005986:	2064      	movs	r0, #100	; 0x64
 8005988:	f001 fa90 	bl	8006eac <HAL_Delay>
 800598c:	e006      	b.n	800599c <cppInit+0x8c>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800598e:	2152      	movs	r1, #82	; 0x52
 8005990:	4826      	ldr	r0, [pc, #152]	; (8005a2c <cppInit+0x11c>)
 8005992:	f7fc fb7f 	bl	8002094 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005996:	2064      	movs	r0, #100	; 0x64
 8005998:	f001 fa88 	bl	8006eac <HAL_Delay>
	}

	line_sensor.ADCStart();
 800599c:	4824      	ldr	r0, [pc, #144]	; (8005a30 <cppInit+0x120>)
 800599e:	f7fc fcd5 	bl	800234c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80059a2:	4824      	ldr	r0, [pc, #144]	; (8005a34 <cppInit+0x124>)
 80059a4:	f7fd f93e 	bl	8002c24 <_ZN5Motor4initEv>
	encoder.init();
 80059a8:	4823      	ldr	r0, [pc, #140]	; (8005a38 <cppInit+0x128>)
 80059aa:	f7fb fc07 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 80059ae:	4823      	ldr	r0, [pc, #140]	; (8005a3c <cppInit+0x12c>)
 80059b0:	f7fc f8da 	bl	8001b68 <_ZN3IMU4initEv>
	line_trace.init();
 80059b4:	4822      	ldr	r0, [pc, #136]	; (8005a40 <cppInit+0x130>)
 80059b6:	f7fc ff07 	bl	80027c8 <_ZN9LineTrace4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 80059ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059be:	f001 fa75 	bl	8006eac <HAL_Delay>

	led.fullColor('M');
 80059c2:	214d      	movs	r1, #77	; 0x4d
 80059c4:	4819      	ldr	r0, [pc, #100]	; (8005a2c <cppInit+0x11c>)
 80059c6:	f7fc fb65 	bl	8002094 <_ZN3LED9fullColorEc>
	imu.calibration();
 80059ca:	481c      	ldr	r0, [pc, #112]	; (8005a3c <cppInit+0x12c>)
 80059cc:	f7fc f9fe 	bl	8001dcc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 80059d0:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8005a44 <cppInit+0x134>
 80059d4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005a48 <cppInit+0x138>
 80059d8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005a4c <cppInit+0x13c>
 80059dc:	4818      	ldr	r0, [pc, #96]	; (8005a40 <cppInit+0x130>)
 80059de:	f7fc ff37 	bl	8002850 <_ZN9LineTrace7setGainEfff>

	velocity_ctrl.setVelocityGain(1.5, 0, 20);
 80059e2:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80059e6:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005a44 <cppInit+0x134>
 80059ea:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80059ee:	4818      	ldr	r0, [pc, #96]	; (8005a50 <cppInit+0x140>)
 80059f0:	f7fe f8d6 	bl	8003ba0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(0, 0, 0);
	velocity_ctrl.setOmegaGain(0.05, 7, 0);
 80059f4:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8005a44 <cppInit+0x134>
 80059f8:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 80059fc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8005a54 <cppInit+0x144>
 8005a00:	4813      	ldr	r0, [pc, #76]	; (8005a50 <cppInit+0x140>)
 8005a02:	f7fe f8e6 	bl	8003bd2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.51189, 8.724, 0.00);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005a06:	480c      	ldr	r0, [pc, #48]	; (8005a38 <cppInit+0x128>)
 8005a08:	f7fb fcc6 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005a0c:	4812      	ldr	r0, [pc, #72]	; (8005a58 <cppInit+0x148>)
 8005a0e:	f7fd fae8 	bl	8002fe2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005a12:	4812      	ldr	r0, [pc, #72]	; (8005a5c <cppInit+0x14c>)
 8005a14:	f7fd fb80 	bl	8003118 <_ZN13PathFollowing4initEv>

}
 8005a18:	bf00      	nop
 8005a1a:	bd98      	pop	{r3, r4, r7, pc}
 8005a1c:	20000554 	.word	0x20000554
 8005a20:	08017a8c 	.word	0x08017a8c
 8005a24:	08017a94 	.word	0x08017a94
 8005a28:	200005b4 	.word	0x200005b4
 8005a2c:	20000550 	.word	0x20000550
 8005a30:	20000248 	.word	0x20000248
 8005a34:	2000054c 	.word	0x2000054c
 8005a38:	20013670 	.word	0x20013670
 8005a3c:	20000560 	.word	0x20000560
 8005a40:	200136e0 	.word	0x200136e0
 8005a44:	00000000 	.word	0x00000000
 8005a48:	360637bd 	.word	0x360637bd
 8005a4c:	3a03126f 	.word	0x3a03126f
 8005a50:	200136a0 	.word	0x200136a0
 8005a54:	3d4ccccd 	.word	0x3d4ccccd
 8005a58:	20013748 	.word	0x20013748
 8005a5c:	20013988 	.word	0x20013988

08005a60 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005a64:	481d      	ldr	r0, [pc, #116]	; (8005adc <cppFlip1ms+0x7c>)
 8005a66:	f7fc fccf 	bl	8002408 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005a6a:	481d      	ldr	r0, [pc, #116]	; (8005ae0 <cppFlip1ms+0x80>)
 8005a6c:	f7fc f8d0 	bl	8001c10 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005a70:	481c      	ldr	r0, [pc, #112]	; (8005ae4 <cppFlip1ms+0x84>)
 8005a72:	f7fb fbc5 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005a76:	481c      	ldr	r0, [pc, #112]	; (8005ae8 <cppFlip1ms+0x88>)
 8005a78:	f7fc ff6a 	bl	8002950 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005a7c:	481b      	ldr	r0, [pc, #108]	; (8005aec <cppFlip1ms+0x8c>)
 8005a7e:	f7fe f8c1 	bl	8003c04 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005a82:	481b      	ldr	r0, [pc, #108]	; (8005af0 <cppFlip1ms+0x90>)
 8005a84:	f7fd faa2 	bl	8002fcc <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005a88:	481a      	ldr	r0, [pc, #104]	; (8005af4 <cppFlip1ms+0x94>)
 8005a8a:	f7fd f8dd 	bl	8002c48 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(imu.getOmega());
 8005a8e:	4814      	ldr	r0, [pc, #80]	; (8005ae0 <cppFlip1ms+0x80>)
 8005a90:	f7fc f952 	bl	8001d38 <_ZN3IMU8getOmegaEv>
 8005a94:	eef0 7a40 	vmov.f32	s15, s0
 8005a98:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9c:	4816      	ldr	r0, [pc, #88]	; (8005af8 <cppFlip1ms+0x98>)
 8005a9e:	f7fd f821 	bl	8002ae4 <_ZN6Logger8storeLogEf>

	static uint16_t twice_cnt;
	twice_cnt++;
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <cppFlip1ms+0x9c>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <cppFlip1ms+0x9c>)
 8005aac:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 4){
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <cppFlip1ms+0x9c>)
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d90c      	bls.n	8005ad0 <cppFlip1ms+0x70>
		sys_ident.outputStore(imu.getOmega());
 8005ab6:	480a      	ldr	r0, [pc, #40]	; (8005ae0 <cppFlip1ms+0x80>)
 8005ab8:	f7fc f93e 	bl	8001d38 <_ZN3IMU8getOmegaEv>
 8005abc:	eef0 7a40 	vmov.f32	s15, s0
 8005ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ac4:	480e      	ldr	r0, [pc, #56]	; (8005b00 <cppFlip1ms+0xa0>)
 8005ac6:	f7fd fde5 	bl	8003694 <_ZN20SystemIdentification11outputStoreEf>
		twice_cnt = 0;
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <cppFlip1ms+0x9c>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005ad0:	4804      	ldr	r0, [pc, #16]	; (8005ae4 <cppFlip1ms+0x84>)
 8005ad2:	f7fb fc71 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000248 	.word	0x20000248
 8005ae0:	20000560 	.word	0x20000560
 8005ae4:	20013670 	.word	0x20013670
 8005ae8:	200136e0 	.word	0x200136e0
 8005aec:	200136a0 	.word	0x200136a0
 8005af0:	20013748 	.word	0x20013748
 8005af4:	2000054c 	.word	0x2000054c
 8005af8:	200005b4 	.word	0x200005b4
 8005afc:	2002b0b2 	.word	0x2002b0b2
 8005b00:	20013778 	.word	0x20013778

08005b04 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005b08:	480a      	ldr	r0, [pc, #40]	; (8005b34 <cppFlip100ns+0x30>)
 8005b0a:	f7fc fc2f 	bl	800236c <_ZN10LineSensor17storeSensorValuesEv>

	static uint8_t cnt;
	cnt++;
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <cppFlip100ns+0x34>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <cppFlip100ns+0x34>)
 8005b18:	701a      	strb	r2, [r3, #0]
	if(cnt >= 2){
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <cppFlip100ns+0x34>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d905      	bls.n	8005b2e <cppFlip100ns+0x2a>
		cnt = 0;
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <cppFlip100ns+0x34>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
		imu.storeValues();
 8005b28:	4804      	ldr	r0, [pc, #16]	; (8005b3c <cppFlip100ns+0x38>)
 8005b2a:	f7fc f831 	bl	8001b90 <_ZN3IMU11storeValuesEv>
	}
}
 8005b2e:	bf00      	nop
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000248 	.word	0x20000248
 8005b38:	2002b0b4 	.word	0x2002b0b4
 8005b3c:	20000560 	.word	0x20000560

08005b40 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <cppFlip10ms+0x30>)
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <cppFlip10ms+0x30>)
 8005b4e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 4){
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <cppFlip10ms+0x30>)
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d905      	bls.n	8005b64 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005b58:	4806      	ldr	r0, [pc, #24]	; (8005b74 <cppFlip10ms+0x34>)
 8005b5a:	f7fd fdc5 	bl	80036e8 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8005b5e:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <cppFlip10ms+0x30>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005b64:	4b02      	ldr	r3, [pc, #8]	; (8005b70 <cppFlip10ms+0x30>)
 8005b66:	881a      	ldrh	r2, [r3, #0]
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <cppFlip10ms+0x38>)
 8005b6a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	2002b0b6 	.word	0x2002b0b6
 8005b74:	20013778 	.word	0x20013778
 8005b78:	2002b0b0 	.word	0x2002b0b0

08005b7c <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4803      	ldr	r0, [pc, #12]	; (8005b98 <cppExit+0x1c>)
 8005b8c:	f7fd fcf4 	bl	8003578 <_ZN10SideSensor12updateStatusEt>
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000540 	.word	0x20000540
 8005b9c:	00000000 	.word	0x00000000

08005ba0 <cppLoop>:

void cppLoop(void)
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b091      	sub	sp, #68	; 0x44
 8005ba4:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005ba6:	48b8      	ldr	r0, [pc, #736]	; (8005e88 <cppLoop+0x2e8>)
 8005ba8:	f7fd fc8c 	bl	80034c4 <_ZN12RotarySwitch8getValueEv>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b0f      	cmp	r3, #15
 8005bb0:	f201 8050 	bhi.w	8006c54 <cppLoop+0x10b4>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <cppLoop+0x1c>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bfd 	.word	0x08005bfd
 8005bc0:	080060d5 	.word	0x080060d5
 8005bc4:	080061a9 	.word	0x080061a9
 8005bc8:	0800621f 	.word	0x0800621f
 8005bcc:	080062d9 	.word	0x080062d9
 8005bd0:	08006367 	.word	0x08006367
 8005bd4:	08006435 	.word	0x08006435
 8005bd8:	08006559 	.word	0x08006559
 8005bdc:	0800662b 	.word	0x0800662b
 8005be0:	08006ac7 	.word	0x08006ac7
 8005be4:	08006bc5 	.word	0x08006bc5
 8005be8:	08006c55 	.word	0x08006c55
 8005bec:	08006c55 	.word	0x08006c55
 8005bf0:	08006c55 	.word	0x08006c55
 8005bf4:	08006c55 	.word	0x08006c55
 8005bf8:	08006c55 	.word	0x08006c55
	static int16_t selector;

	case 0:
		lcd_clear();
 8005bfc:	f7fb fa50 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005c00:	2100      	movs	r1, #0
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fb fa5c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKpV()*1000);
 8005c08:	48a0      	ldr	r0, [pc, #640]	; (8005e8c <cppLoop+0x2ec>)
 8005c0a:	f7fc fe53 	bl	80028b4 <_ZN9LineTrace6getKpVEv>
 8005c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8005c12:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8005e90 <cppLoop+0x2f0>
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	ee17 0a90 	vmov	r0, s15
 8005c1e:	f7fa fcab 	bl	8000578 <__aeabi_f2d>
 8005c22:	4603      	mov	r3, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	461a      	mov	r2, r3
 8005c28:	4623      	mov	r3, r4
 8005c2a:	489a      	ldr	r0, [pc, #616]	; (8005e94 <cppLoop+0x2f4>)
 8005c2c:	f7fb fa72 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005c30:	2101      	movs	r1, #1
 8005c32:	2000      	movs	r0, #0
 8005c34:	f7fb fa44 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiV()*1000, line_trace.getKdV()*1000);
 8005c38:	4894      	ldr	r0, [pc, #592]	; (8005e8c <cppLoop+0x2ec>)
 8005c3a:	f7fc fe4a 	bl	80028d2 <_ZN9LineTrace6getKiVEv>
 8005c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8005c42:	eddf 7a93 	vldr	s15, [pc, #588]	; 8005e90 <cppLoop+0x2f0>
 8005c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4a:	ee17 0a90 	vmov	r0, s15
 8005c4e:	f7fa fc93 	bl	8000578 <__aeabi_f2d>
 8005c52:	4605      	mov	r5, r0
 8005c54:	460e      	mov	r6, r1
 8005c56:	488d      	ldr	r0, [pc, #564]	; (8005e8c <cppLoop+0x2ec>)
 8005c58:	f7fc fe4a 	bl	80028f0 <_ZN9LineTrace6getKdVEv>
 8005c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c60:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8005e90 <cppLoop+0x2f0>
 8005c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c68:	ee17 0a90 	vmov	r0, s15
 8005c6c:	f7fa fc84 	bl	8000578 <__aeabi_f2d>
 8005c70:	4603      	mov	r3, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	e9cd 3400 	strd	r3, r4, [sp]
 8005c78:	462a      	mov	r2, r5
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	4886      	ldr	r0, [pc, #536]	; (8005e98 <cppLoop+0x2f8>)
 8005c7e:	f7fb fa49 	bl	8001114 <lcd_printf>

		static double adj_kp_v = line_trace.getKpV();
 8005c82:	4b86      	ldr	r3, [pc, #536]	; (8005e9c <cppLoop+0x2fc>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f3bf 8f5b 	dmb	ish
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01a      	beq.n	8005cd4 <cppLoop+0x134>
 8005c9e:	487f      	ldr	r0, [pc, #508]	; (8005e9c <cppLoop+0x2fc>)
 8005ca0:	f00b fe01 	bl	80118a6 <__cxa_guard_acquire>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf14      	ite	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	2300      	moveq	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <cppLoop+0x134>
 8005cb4:	4875      	ldr	r0, [pc, #468]	; (8005e8c <cppLoop+0x2ec>)
 8005cb6:	f7fc fdfd 	bl	80028b4 <_ZN9LineTrace6getKpVEv>
 8005cba:	ee10 3a10 	vmov	r3, s0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fc5a 	bl	8000578 <__aeabi_f2d>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	4a75      	ldr	r2, [pc, #468]	; (8005ea0 <cppLoop+0x300>)
 8005cca:	e9c2 3400 	strd	r3, r4, [r2]
 8005cce:	4873      	ldr	r0, [pc, #460]	; (8005e9c <cppLoop+0x2fc>)
 8005cd0:	f00b fdf5 	bl	80118be <__cxa_guard_release>
		static double adj_ki_v = line_trace.getKiV();
 8005cd4:	4b73      	ldr	r3, [pc, #460]	; (8005ea4 <cppLoop+0x304>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f3bf 8f5b 	dmb	ish
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01a      	beq.n	8005d26 <cppLoop+0x186>
 8005cf0:	486c      	ldr	r0, [pc, #432]	; (8005ea4 <cppLoop+0x304>)
 8005cf2:	f00b fdd8 	bl	80118a6 <__cxa_guard_acquire>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bf14      	ite	ne
 8005cfc:	2301      	movne	r3, #1
 8005cfe:	2300      	moveq	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <cppLoop+0x186>
 8005d06:	4861      	ldr	r0, [pc, #388]	; (8005e8c <cppLoop+0x2ec>)
 8005d08:	f7fc fde3 	bl	80028d2 <_ZN9LineTrace6getKiVEv>
 8005d0c:	ee10 3a10 	vmov	r3, s0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fc31 	bl	8000578 <__aeabi_f2d>
 8005d16:	4603      	mov	r3, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	4a63      	ldr	r2, [pc, #396]	; (8005ea8 <cppLoop+0x308>)
 8005d1c:	e9c2 3400 	strd	r3, r4, [r2]
 8005d20:	4860      	ldr	r0, [pc, #384]	; (8005ea4 <cppLoop+0x304>)
 8005d22:	f00b fdcc 	bl	80118be <__cxa_guard_release>
		static double adj_kd_v = line_trace.getKdV();
 8005d26:	4b61      	ldr	r3, [pc, #388]	; (8005eac <cppLoop+0x30c>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f3bf 8f5b 	dmb	ish
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01a      	beq.n	8005d78 <cppLoop+0x1d8>
 8005d42:	485a      	ldr	r0, [pc, #360]	; (8005eac <cppLoop+0x30c>)
 8005d44:	f00b fdaf 	bl	80118a6 <__cxa_guard_acquire>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bf14      	ite	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	2300      	moveq	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00f      	beq.n	8005d78 <cppLoop+0x1d8>
 8005d58:	484c      	ldr	r0, [pc, #304]	; (8005e8c <cppLoop+0x2ec>)
 8005d5a:	f7fc fdc9 	bl	80028f0 <_ZN9LineTrace6getKdVEv>
 8005d5e:	ee10 3a10 	vmov	r3, s0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fa fc08 	bl	8000578 <__aeabi_f2d>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4a50      	ldr	r2, [pc, #320]	; (8005eb0 <cppLoop+0x310>)
 8005d6e:	e9c2 3400 	strd	r3, r4, [r2]
 8005d72:	484e      	ldr	r0, [pc, #312]	; (8005eac <cppLoop+0x30c>)
 8005d74:	f00b fda3 	bl	80118be <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005d78:	484e      	ldr	r0, [pc, #312]	; (8005eb4 <cppLoop+0x314>)
 8005d7a:	f7fc f927 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d022      	beq.n	8005dd4 <cppLoop+0x234>
			led.LR(-1, 1);
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f04f 31ff 	mov.w	r1, #4294967295
 8005d94:	4848      	ldr	r0, [pc, #288]	; (8005eb8 <cppLoop+0x318>)
 8005d96:	f7fc fa39 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005d9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d9e:	f001 f885 	bl	8006eac <HAL_Delay>

			selector++;
 8005da2:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <cppLoop+0x31c>)
 8005da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3301      	adds	r3, #1
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	b21a      	sxth	r2, r3
 8005db0:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <cppLoop+0x31c>)
 8005db2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005db4:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <cppLoop+0x31c>)
 8005db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	dd02      	ble.n	8005dc4 <cppLoop+0x224>
 8005dbe:	4b3f      	ldr	r3, [pc, #252]	; (8005ebc <cppLoop+0x31c>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005dca:	483b      	ldr	r0, [pc, #236]	; (8005eb8 <cppLoop+0x318>)
 8005dcc:	f7fc fa1e 	bl	800220c <_ZN3LED2LREaa>
			sd_write_array_double("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);

			led.LR(-1, 0);
		}
		break;
 8005dd0:	f000 bf42 	b.w	8006c58 <cppLoop+0x10b8>
		else if(joy_stick.getValue() == JOY_R){
 8005dd4:	4837      	ldr	r0, [pc, #220]	; (8005eb4 <cppLoop+0x314>)
 8005dd6:	f7fc f8f9 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d06a      	beq.n	8005ec0 <cppLoop+0x320>
			led.LR(-1, 1);
 8005dea:	2201      	movs	r2, #1
 8005dec:	f04f 31ff 	mov.w	r1, #4294967295
 8005df0:	4831      	ldr	r0, [pc, #196]	; (8005eb8 <cppLoop+0x318>)
 8005df2:	f7fc fa0b 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005df6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005dfa:	f001 f857 	bl	8006eac <HAL_Delay>
			if(selector == 0){
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	; (8005ebc <cppLoop+0x31c>)
 8005e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10d      	bne.n	8005e24 <cppLoop+0x284>
				adj_kp_v = adj_kp_v + 0.00001;
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <cppLoop+0x300>)
 8005e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e0e:	a31c      	add	r3, pc, #112	; (adr r3, 8005e80 <cppLoop+0x2e0>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fa52 	bl	80002bc <__adddf3>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <cppLoop+0x300>)
 8005e1e:	e9c2 3400 	strd	r3, r4, [r2]
 8005e22:	e01f      	b.n	8005e64 <cppLoop+0x2c4>
			else if(selector == 1){
 8005e24:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <cppLoop+0x31c>)
 8005e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d10d      	bne.n	8005e4a <cppLoop+0x2aa>
				adj_ki_v = adj_ki_v + 0.00001;
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <cppLoop+0x308>)
 8005e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e34:	a312      	add	r3, pc, #72	; (adr r3, 8005e80 <cppLoop+0x2e0>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fa3f 	bl	80002bc <__adddf3>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <cppLoop+0x308>)
 8005e44:	e9c2 3400 	strd	r3, r4, [r2]
 8005e48:	e00c      	b.n	8005e64 <cppLoop+0x2c4>
				adj_kd_v = adj_kd_v + 0.00001;
 8005e4a:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <cppLoop+0x310>)
 8005e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e50:	a30b      	add	r3, pc, #44	; (adr r3, 8005e80 <cppLoop+0x2e0>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fa31 	bl	80002bc <__adddf3>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <cppLoop+0x310>)
 8005e60:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8005e64:	2152      	movs	r1, #82	; 0x52
 8005e66:	4814      	ldr	r0, [pc, #80]	; (8005eb8 <cppLoop+0x318>)
 8005e68:	f7fc f914 	bl	8002094 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e72:	4811      	ldr	r0, [pc, #68]	; (8005eb8 <cppLoop+0x318>)
 8005e74:	f7fc f9ca 	bl	800220c <_ZN3LED2LREaa>
		break;
 8005e78:	f000 beee 	b.w	8006c58 <cppLoop+0x10b8>
 8005e7c:	f3af 8000 	nop.w
 8005e80:	88e368f1 	.word	0x88e368f1
 8005e84:	3ee4f8b5 	.word	0x3ee4f8b5
 8005e88:	20000548 	.word	0x20000548
 8005e8c:	200136e0 	.word	0x200136e0
 8005e90:	447a0000 	.word	0x447a0000
 8005e94:	08017a98 	.word	0x08017a98
 8005e98:	08017aa4 	.word	0x08017aa4
 8005e9c:	2002b0c8 	.word	0x2002b0c8
 8005ea0:	2002b0c0 	.word	0x2002b0c0
 8005ea4:	2002b0d8 	.word	0x2002b0d8
 8005ea8:	2002b0d0 	.word	0x2002b0d0
 8005eac:	2002b0e8 	.word	0x2002b0e8
 8005eb0:	2002b0e0 	.word	0x2002b0e0
 8005eb4:	20000544 	.word	0x20000544
 8005eb8:	20000550 	.word	0x20000550
 8005ebc:	2002b0b8 	.word	0x2002b0b8
		else if(joy_stick.getValue() == JOY_L){
 8005ec0:	48a9      	ldr	r0, [pc, #676]	; (8006168 <cppLoop+0x5c8>)
 8005ec2:	f7fc f883 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d048      	beq.n	8005f68 <cppLoop+0x3c8>
			led.LR(-1, 1);
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8005edc:	48a3      	ldr	r0, [pc, #652]	; (800616c <cppLoop+0x5cc>)
 8005ede:	f7fc f995 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005ee2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ee6:	f000 ffe1 	bl	8006eac <HAL_Delay>
			if(selector == 0){
 8005eea:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <cppLoop+0x5d0>)
 8005eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <cppLoop+0x370>
				adj_kp_v = adj_kp_v - 0.00001;
 8005ef4:	4b9f      	ldr	r3, [pc, #636]	; (8006174 <cppLoop+0x5d4>)
 8005ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005efa:	a399      	add	r3, pc, #612	; (adr r3, 8006160 <cppLoop+0x5c0>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f9da 	bl	80002b8 <__aeabi_dsub>
 8005f04:	4603      	mov	r3, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	4a9a      	ldr	r2, [pc, #616]	; (8006174 <cppLoop+0x5d4>)
 8005f0a:	e9c2 3400 	strd	r3, r4, [r2]
 8005f0e:	e01f      	b.n	8005f50 <cppLoop+0x3b0>
			else if(selector == 1){
 8005f10:	4b97      	ldr	r3, [pc, #604]	; (8006170 <cppLoop+0x5d0>)
 8005f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10d      	bne.n	8005f36 <cppLoop+0x396>
				adj_ki_v = adj_ki_v - 0.00001;
 8005f1a:	4b97      	ldr	r3, [pc, #604]	; (8006178 <cppLoop+0x5d8>)
 8005f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f20:	a38f      	add	r3, pc, #572	; (adr r3, 8006160 <cppLoop+0x5c0>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa f9c7 	bl	80002b8 <__aeabi_dsub>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4a92      	ldr	r2, [pc, #584]	; (8006178 <cppLoop+0x5d8>)
 8005f30:	e9c2 3400 	strd	r3, r4, [r2]
 8005f34:	e00c      	b.n	8005f50 <cppLoop+0x3b0>
				adj_kd_v = adj_kd_v - 0.00001;
 8005f36:	4b91      	ldr	r3, [pc, #580]	; (800617c <cppLoop+0x5dc>)
 8005f38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f3c:	a388      	add	r3, pc, #544	; (adr r3, 8006160 <cppLoop+0x5c0>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f7fa f9b9 	bl	80002b8 <__aeabi_dsub>
 8005f46:	4603      	mov	r3, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	4a8c      	ldr	r2, [pc, #560]	; (800617c <cppLoop+0x5dc>)
 8005f4c:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8005f50:	2152      	movs	r1, #82	; 0x52
 8005f52:	4886      	ldr	r0, [pc, #536]	; (800616c <cppLoop+0x5cc>)
 8005f54:	f7fc f89e 	bl	8002094 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f5e:	4883      	ldr	r0, [pc, #524]	; (800616c <cppLoop+0x5cc>)
 8005f60:	f7fc f954 	bl	800220c <_ZN3LED2LREaa>
		break;
 8005f64:	f000 be78 	b.w	8006c58 <cppLoop+0x10b8>
		else if(joy_stick.getValue() == JOY_D){
 8005f68:	487f      	ldr	r0, [pc, #508]	; (8006168 <cppLoop+0x5c8>)
 8005f6a:	f7fc f82f 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d053      	beq.n	8006026 <cppLoop+0x486>
			led.LR(-1, 1);
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f04f 31ff 	mov.w	r1, #4294967295
 8005f84:	4879      	ldr	r0, [pc, #484]	; (800616c <cppLoop+0x5cc>)
 8005f86:	f7fc f941 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005f8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005f8e:	f000 ff8d 	bl	8006eac <HAL_Delay>
			sd_read_array_double("Params", "kp_v.txt", 1, &temp_kp_v);
 8005f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f96:	2201      	movs	r2, #1
 8005f98:	4979      	ldr	r1, [pc, #484]	; (8006180 <cppLoop+0x5e0>)
 8005f9a:	487a      	ldr	r0, [pc, #488]	; (8006184 <cppLoop+0x5e4>)
 8005f9c:	f7fb fb90 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "ki_v.txt", 1, &temp_ki_v);
 8005fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4978      	ldr	r1, [pc, #480]	; (8006188 <cppLoop+0x5e8>)
 8005fa8:	4876      	ldr	r0, [pc, #472]	; (8006184 <cppLoop+0x5e4>)
 8005faa:	f7fb fb89 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "kd_v.txt", 1, &temp_kd_v);
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4975      	ldr	r1, [pc, #468]	; (800618c <cppLoop+0x5ec>)
 8005fb6:	4873      	ldr	r0, [pc, #460]	; (8006184 <cppLoop+0x5e4>)
 8005fb8:	f7fb fb82 	bl	80016c0 <sd_read_array_double>
			line_trace.setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 8005fbc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f7fa fe28 	bl	8000c18 <__aeabi_d2f>
 8005fc8:	4605      	mov	r5, r0
 8005fca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f7fa fe21 	bl	8000c18 <__aeabi_d2f>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	4621      	mov	r1, r4
 8005fe0:	f7fa fe1a 	bl	8000c18 <__aeabi_d2f>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	ee01 3a10 	vmov	s2, r3
 8005fea:	ee00 6a90 	vmov	s1, r6
 8005fee:	ee00 5a10 	vmov	s0, r5
 8005ff2:	4867      	ldr	r0, [pc, #412]	; (8006190 <cppLoop+0x5f0>)
 8005ff4:	f7fc fc45 	bl	8002882 <_ZN9LineTrace11setVeloGainEfff>
			adj_kp_v = temp_kp_v;
 8005ff8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005ffc:	4a5d      	ldr	r2, [pc, #372]	; (8006174 <cppLoop+0x5d4>)
 8005ffe:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ki_v = temp_kp_v;
 8006002:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006006:	4a5c      	ldr	r2, [pc, #368]	; (8006178 <cppLoop+0x5d8>)
 8006008:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kd_v = temp_kp_v;
 800600c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006010:	4a5a      	ldr	r2, [pc, #360]	; (800617c <cppLoop+0x5dc>)
 8006012:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8006016:	2200      	movs	r2, #0
 8006018:	f04f 31ff 	mov.w	r1, #4294967295
 800601c:	4853      	ldr	r0, [pc, #332]	; (800616c <cppLoop+0x5cc>)
 800601e:	f7fc f8f5 	bl	800220c <_ZN3LED2LREaa>
		break;
 8006022:	f000 be19 	b.w	8006c58 <cppLoop+0x10b8>
		else if(joy_stick.getValue() == JOY_C){
 8006026:	4850      	ldr	r0, [pc, #320]	; (8006168 <cppLoop+0x5c8>)
 8006028:	f7fb ffd0 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 800602c:	4603      	mov	r3, r0
 800602e:	2b02      	cmp	r3, #2
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 860d 	beq.w	8006c58 <cppLoop+0x10b8>
			led.LR(-1, 1);
 800603e:	2201      	movs	r2, #1
 8006040:	f04f 31ff 	mov.w	r1, #4294967295
 8006044:	4849      	ldr	r0, [pc, #292]	; (800616c <cppLoop+0x5cc>)
 8006046:	f7fc f8e1 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800604a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800604e:	f000 ff2d 	bl	8006eac <HAL_Delay>
			sd_write_array_double("Params", "kp_v.txt", 1, &adj_kp_v, OVER_WRITE);
 8006052:	2300      	movs	r3, #0
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	4b47      	ldr	r3, [pc, #284]	; (8006174 <cppLoop+0x5d4>)
 8006058:	2201      	movs	r2, #1
 800605a:	4949      	ldr	r1, [pc, #292]	; (8006180 <cppLoop+0x5e0>)
 800605c:	4849      	ldr	r0, [pc, #292]	; (8006184 <cppLoop+0x5e4>)
 800605e:	f7fb facd 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "ki_v.txt", 1, &adj_ki_v, OVER_WRITE);
 8006062:	2300      	movs	r3, #0
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4b44      	ldr	r3, [pc, #272]	; (8006178 <cppLoop+0x5d8>)
 8006068:	2201      	movs	r2, #1
 800606a:	4947      	ldr	r1, [pc, #284]	; (8006188 <cppLoop+0x5e8>)
 800606c:	4845      	ldr	r0, [pc, #276]	; (8006184 <cppLoop+0x5e4>)
 800606e:	f7fb fac5 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4b41      	ldr	r3, [pc, #260]	; (800617c <cppLoop+0x5dc>)
 8006078:	2201      	movs	r2, #1
 800607a:	4944      	ldr	r1, [pc, #272]	; (800618c <cppLoop+0x5ec>)
 800607c:	4841      	ldr	r0, [pc, #260]	; (8006184 <cppLoop+0x5e4>)
 800607e:	f7fb fabd 	bl	80015fc <sd_write_array_double>
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);
 8006082:	4b3c      	ldr	r3, [pc, #240]	; (8006174 <cppLoop+0x5d4>)
 8006084:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006088:	4618      	mov	r0, r3
 800608a:	4621      	mov	r1, r4
 800608c:	f7fa fdc4 	bl	8000c18 <__aeabi_d2f>
 8006090:	4605      	mov	r5, r0
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <cppLoop+0x5d8>)
 8006094:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006098:	4618      	mov	r0, r3
 800609a:	4621      	mov	r1, r4
 800609c:	f7fa fdbc 	bl	8000c18 <__aeabi_d2f>
 80060a0:	4606      	mov	r6, r0
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <cppLoop+0x5dc>)
 80060a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060a8:	4618      	mov	r0, r3
 80060aa:	4621      	mov	r1, r4
 80060ac:	f7fa fdb4 	bl	8000c18 <__aeabi_d2f>
 80060b0:	4603      	mov	r3, r0
 80060b2:	ee01 3a10 	vmov	s2, r3
 80060b6:	ee00 6a90 	vmov	s1, r6
 80060ba:	ee00 5a10 	vmov	s0, r5
 80060be:	4834      	ldr	r0, [pc, #208]	; (8006190 <cppLoop+0x5f0>)
 80060c0:	f7fc fbdf 	bl	8002882 <_ZN9LineTrace11setVeloGainEfff>
			led.LR(-1, 0);
 80060c4:	2200      	movs	r2, #0
 80060c6:	f04f 31ff 	mov.w	r1, #4294967295
 80060ca:	4828      	ldr	r0, [pc, #160]	; (800616c <cppLoop+0x5cc>)
 80060cc:	f7fc f89e 	bl	800220c <_ZN3LED2LREaa>
		break;
 80060d0:	f000 bdc2 	b.w	8006c58 <cppLoop+0x10b8>

	case 1:
		lcd_clear();
 80060d4:	f7fa ffe4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80060d8:	2100      	movs	r1, #0
 80060da:	2000      	movs	r0, #0
 80060dc:	f7fa fff0 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 80060e0:	482c      	ldr	r0, [pc, #176]	; (8006194 <cppLoop+0x5f4>)
 80060e2:	f7fb f817 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80060e6:	2101      	movs	r1, #1
 80060e8:	2000      	movs	r0, #0
 80060ea:	f7fa ffe9 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 80060ee:	482a      	ldr	r0, [pc, #168]	; (8006198 <cppLoop+0x5f8>)
 80060f0:	f7fb f810 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80060f4:	481c      	ldr	r0, [pc, #112]	; (8006168 <cppLoop+0x5c8>)
 80060f6:	f7fb ff69 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 85a8 	beq.w	8006c5c <cppLoop+0x10bc>
			HAL_Delay(500);
 800610c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006110:	f000 fecc 	bl	8006eac <HAL_Delay>

			velocity_ctrl.start();
 8006114:	4821      	ldr	r0, [pc, #132]	; (800619c <cppLoop+0x5fc>)
 8006116:	f7fd fd88 	bl	8003c2a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 800611a:	481d      	ldr	r0, [pc, #116]	; (8006190 <cppLoop+0x5f0>)
 800611c:	f7fc fc50 	bl	80029c0 <_ZN9LineTrace5startEv>
			line_trace.setTargetVelocity(0.8);
 8006120:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80061a0 <cppLoop+0x600>
 8006124:	481a      	ldr	r0, [pc, #104]	; (8006190 <cppLoop+0x5f0>)
 8006126:	f7fc fc01 	bl	800292c <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800612a:	f04f 32ff 	mov.w	r2, #4294967295
 800612e:	2101      	movs	r1, #1
 8006130:	480e      	ldr	r0, [pc, #56]	; (800616c <cppLoop+0x5cc>)
 8006132:	f7fc f86b 	bl	800220c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8006136:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800613a:	f000 feb7 	bl	8006eac <HAL_Delay>

			velocity_ctrl.stop();
 800613e:	4817      	ldr	r0, [pc, #92]	; (800619c <cppLoop+0x5fc>)
 8006140:	f7fd fd82 	bl	8003c48 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	2100      	movs	r1, #0
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <cppLoop+0x5cc>)
 800614c:	f7fc f85e 	bl	800220c <_ZN3LED2LREaa>

			logger.stop();
 8006150:	4814      	ldr	r0, [pc, #80]	; (80061a4 <cppLoop+0x604>)
 8006152:	f7fc fd46 	bl	8002be2 <_ZN6Logger4stopEv>
		}

		break;
 8006156:	f000 bd81 	b.w	8006c5c <cppLoop+0x10bc>
 800615a:	bf00      	nop
 800615c:	f3af 8000 	nop.w
 8006160:	88e368f1 	.word	0x88e368f1
 8006164:	3ee4f8b5 	.word	0x3ee4f8b5
 8006168:	20000544 	.word	0x20000544
 800616c:	20000550 	.word	0x20000550
 8006170:	2002b0b8 	.word	0x2002b0b8
 8006174:	2002b0c0 	.word	0x2002b0c0
 8006178:	2002b0d0 	.word	0x2002b0d0
 800617c:	2002b0e0 	.word	0x2002b0e0
 8006180:	08017ab4 	.word	0x08017ab4
 8006184:	08017ac0 	.word	0x08017ac0
 8006188:	08017ac8 	.word	0x08017ac8
 800618c:	08017ad4 	.word	0x08017ad4
 8006190:	200136e0 	.word	0x200136e0
 8006194:	08017ae0 	.word	0x08017ae0
 8006198:	08017aec 	.word	0x08017aec
 800619c:	200136a0 	.word	0x200136a0
 80061a0:	3f4ccccd 	.word	0x3f4ccccd
 80061a4:	200005b4 	.word	0x200005b4

	case 2:
		lcd_clear();
 80061a8:	f7fa ff7a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80061ac:	2100      	movs	r1, #0
 80061ae:	2000      	movs	r0, #0
 80061b0:	f7fa ff86 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80061b4:	48ce      	ldr	r0, [pc, #824]	; (80064f0 <cppLoop+0x950>)
 80061b6:	f7fa ffad 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061ba:	2101      	movs	r1, #1
 80061bc:	2000      	movs	r0, #0
 80061be:	f7fa ff7f 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80061c2:	48cc      	ldr	r0, [pc, #816]	; (80064f4 <cppLoop+0x954>)
 80061c4:	f7fa ffa6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80061c8:	48cb      	ldr	r0, [pc, #812]	; (80064f8 <cppLoop+0x958>)
 80061ca:	f7fb feff 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8540 	beq.w	8006c60 <cppLoop+0x10c0>
			led.LR(-1, 1);
 80061e0:	2201      	movs	r2, #1
 80061e2:	f04f 31ff 	mov.w	r1, #4294967295
 80061e6:	48c5      	ldr	r0, [pc, #788]	; (80064fc <cppLoop+0x95c>)
 80061e8:	f7fc f810 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(1000);
 80061ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061f0:	f000 fe5c 	bl	8006eac <HAL_Delay>

			sys_ident.start();
 80061f4:	48c2      	ldr	r0, [pc, #776]	; (8006500 <cppLoop+0x960>)
 80061f6:	f7fd facf 	bl	8003798 <_ZN20SystemIdentification5startEv>
			HAL_Delay(10000);
 80061fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80061fe:	f000 fe55 	bl	8006eac <HAL_Delay>
			sys_ident.stop();
 8006202:	48bf      	ldr	r0, [pc, #764]	; (8006500 <cppLoop+0x960>)
 8006204:	f7fd fadc 	bl	80037c0 <_ZN20SystemIdentification4stopEv>
			sys_ident.outputSave();
 8006208:	48bd      	ldr	r0, [pc, #756]	; (8006500 <cppLoop+0x960>)
 800620a:	f7fd fa59 	bl	80036c0 <_ZN20SystemIdentification10outputSaveEv>

			led.LR(-1, 0);
 800620e:	2200      	movs	r2, #0
 8006210:	f04f 31ff 	mov.w	r1, #4294967295
 8006214:	48b9      	ldr	r0, [pc, #740]	; (80064fc <cppLoop+0x95c>)
 8006216:	f7fb fff9 	bl	800220c <_ZN3LED2LREaa>
		}
		break;
 800621a:	f000 bd21 	b.w	8006c60 <cppLoop+0x10c0>

	case 3:
		led.fullColor('C');
 800621e:	2143      	movs	r1, #67	; 0x43
 8006220:	48b6      	ldr	r0, [pc, #728]	; (80064fc <cppLoop+0x95c>)
 8006222:	f7fb ff37 	bl	8002094 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006226:	f7fa ff3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800622a:	2100      	movs	r1, #0
 800622c:	2000      	movs	r0, #0
 800622e:	f7fa ff47 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006232:	48b4      	ldr	r0, [pc, #720]	; (8006504 <cppLoop+0x964>)
 8006234:	f7fa ff6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006238:	2101      	movs	r1, #1
 800623a:	2000      	movs	r0, #0
 800623c:	f7fa ff40 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006240:	48b1      	ldr	r0, [pc, #708]	; (8006508 <cppLoop+0x968>)
 8006242:	f7fa ff67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006246:	48ac      	ldr	r0, [pc, #688]	; (80064f8 <cppLoop+0x958>)
 8006248:	f7fb fec0 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 800624c:	4603      	mov	r3, r0
 800624e:	2b02      	cmp	r3, #2
 8006250:	bf0c      	ite	eq
 8006252:	2301      	moveq	r3, #1
 8006254:	2300      	movne	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8503 	beq.w	8006c64 <cppLoop+0x10c4>
			led.LR(-1, 1);
 800625e:	2201      	movs	r2, #1
 8006260:	f04f 31ff 	mov.w	r1, #4294967295
 8006264:	48a5      	ldr	r0, [pc, #660]	; (80064fc <cppLoop+0x95c>)
 8006266:	f7fb ffd1 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800626a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800626e:	f000 fe1d 	bl	8006eac <HAL_Delay>

			logger.start();
 8006272:	48a6      	ldr	r0, [pc, #664]	; (800650c <cppLoop+0x96c>)
 8006274:	f7fc fca5 	bl	8002bc2 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006278:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8006510 <cppLoop+0x970>
 800627c:	48a5      	ldr	r0, [pc, #660]	; (8006514 <cppLoop+0x974>)
 800627e:	f7fc fb46 	bl	800290e <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006282:	48a4      	ldr	r0, [pc, #656]	; (8006514 <cppLoop+0x974>)
 8006284:	f7fc fb9c 	bl	80029c0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006288:	f241 3088 	movw	r0, #5000	; 0x1388
 800628c:	f000 fe0e 	bl	8006eac <HAL_Delay>

			logger.stop();
 8006290:	489e      	ldr	r0, [pc, #632]	; (800650c <cppLoop+0x96c>)
 8006292:	f7fc fca6 	bl	8002be2 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006296:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006510 <cppLoop+0x970>
 800629a:	489e      	ldr	r0, [pc, #632]	; (8006514 <cppLoop+0x974>)
 800629c:	f7fc fb37 	bl	800290e <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80062a0:	489c      	ldr	r0, [pc, #624]	; (8006514 <cppLoop+0x974>)
 80062a2:	f7fc fb9d 	bl	80029e0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80062a6:	f04f 32ff 	mov.w	r2, #4294967295
 80062aa:	2101      	movs	r1, #1
 80062ac:	4893      	ldr	r0, [pc, #588]	; (80064fc <cppLoop+0x95c>)
 80062ae:	f7fb ffad 	bl	800220c <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 80062b2:	4a99      	ldr	r2, [pc, #612]	; (8006518 <cppLoop+0x978>)
 80062b4:	4999      	ldr	r1, [pc, #612]	; (800651c <cppLoop+0x97c>)
 80062b6:	4895      	ldr	r0, [pc, #596]	; (800650c <cppLoop+0x96c>)
 80062b8:	f7fc fc4c 	bl	8002b54 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	2100      	movs	r1, #0
 80062c2:	488e      	ldr	r0, [pc, #568]	; (80064fc <cppLoop+0x95c>)
 80062c4:	f7fb ffa2 	bl	800220c <_ZN3LED2LREaa>

			led.LR(-1, 0);
 80062c8:	2200      	movs	r2, #0
 80062ca:	f04f 31ff 	mov.w	r1, #4294967295
 80062ce:	488b      	ldr	r0, [pc, #556]	; (80064fc <cppLoop+0x95c>)
 80062d0:	f7fb ff9c 	bl	800220c <_ZN3LED2LREaa>
		}

		break;
 80062d4:	f000 bcc6 	b.w	8006c64 <cppLoop+0x10c4>

	case 4:
		led.fullColor('M');
 80062d8:	214d      	movs	r1, #77	; 0x4d
 80062da:	4888      	ldr	r0, [pc, #544]	; (80064fc <cppLoop+0x95c>)
 80062dc:	f7fb feda 	bl	8002094 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062e0:	f7fa fede 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062e4:	2100      	movs	r1, #0
 80062e6:	2000      	movs	r0, #0
 80062e8:	f7fa feea 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80062ec:	488c      	ldr	r0, [pc, #560]	; (8006520 <cppLoop+0x980>)
 80062ee:	f7fa ff11 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062f2:	2101      	movs	r1, #1
 80062f4:	2000      	movs	r0, #0
 80062f6:	f7fa fee3 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80062fa:	4883      	ldr	r0, [pc, #524]	; (8006508 <cppLoop+0x968>)
 80062fc:	f7fa ff0a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006300:	487d      	ldr	r0, [pc, #500]	; (80064f8 <cppLoop+0x958>)
 8006302:	f7fb fe63 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006306:	4603      	mov	r3, r0
 8006308:	2b02      	cmp	r3, #2
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 84a8 	beq.w	8006c68 <cppLoop+0x10c8>
			led.LR(-1, 1);
 8006318:	2201      	movs	r2, #1
 800631a:	f04f 31ff 	mov.w	r1, #4294967295
 800631e:	4877      	ldr	r0, [pc, #476]	; (80064fc <cppLoop+0x95c>)
 8006320:	f7fb ff74 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006328:	f000 fdc0 	bl	8006eac <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 800632c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8006510 <cppLoop+0x970>
 8006330:	4878      	ldr	r0, [pc, #480]	; (8006514 <cppLoop+0x974>)
 8006332:	f7fc fafb 	bl	800292c <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006336:	487b      	ldr	r0, [pc, #492]	; (8006524 <cppLoop+0x984>)
 8006338:	f7fd fc77 	bl	8003c2a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 800633c:	4875      	ldr	r0, [pc, #468]	; (8006514 <cppLoop+0x974>)
 800633e:	f7fc fb3f 	bl	80029c0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006342:	f242 7010 	movw	r0, #10000	; 0x2710
 8006346:	f000 fdb1 	bl	8006eac <HAL_Delay>

			line_trace.stop();
 800634a:	4872      	ldr	r0, [pc, #456]	; (8006514 <cppLoop+0x974>)
 800634c:	f7fc fb48 	bl	80029e0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006350:	4874      	ldr	r0, [pc, #464]	; (8006524 <cppLoop+0x984>)
 8006352:	f7fd fc79 	bl	8003c48 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006356:	2200      	movs	r2, #0
 8006358:	f04f 31ff 	mov.w	r1, #4294967295
 800635c:	4867      	ldr	r0, [pc, #412]	; (80064fc <cppLoop+0x95c>)
 800635e:	f7fb ff55 	bl	800220c <_ZN3LED2LREaa>
		}
		break;
 8006362:	f000 bc81 	b.w	8006c68 <cppLoop+0x10c8>

	case 5:
		led.fullColor('Y');
 8006366:	2159      	movs	r1, #89	; 0x59
 8006368:	4864      	ldr	r0, [pc, #400]	; (80064fc <cppLoop+0x95c>)
 800636a:	f7fb fe93 	bl	8002094 <_ZN3LED9fullColorEc>

		lcd_clear();
 800636e:	f7fa fe97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006372:	2100      	movs	r1, #0
 8006374:	2000      	movs	r0, #0
 8006376:	f7fa fea3 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800637a:	486b      	ldr	r0, [pc, #428]	; (8006528 <cppLoop+0x988>)
 800637c:	f7fa feca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006380:	2101      	movs	r1, #1
 8006382:	2000      	movs	r0, #0
 8006384:	f7fa fe9c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006388:	4868      	ldr	r0, [pc, #416]	; (800652c <cppLoop+0x98c>)
 800638a:	f7fa fec3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800638e:	485a      	ldr	r0, [pc, #360]	; (80064f8 <cppLoop+0x958>)
 8006390:	f7fb fe1c 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006394:	4603      	mov	r3, r0
 8006396:	2b02      	cmp	r3, #2
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8463 	beq.w	8006c6c <cppLoop+0x10cc>
			led.LR(-1, 1);
 80063a6:	2201      	movs	r2, #1
 80063a8:	f04f 31ff 	mov.w	r1, #4294967295
 80063ac:	4853      	ldr	r0, [pc, #332]	; (80064fc <cppLoop+0x95c>)
 80063ae:	f7fb ff2d 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063b6:	f000 fd79 	bl	8006eac <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80063ba:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8006530 <cppLoop+0x990>
 80063be:	4855      	ldr	r0, [pc, #340]	; (8006514 <cppLoop+0x974>)
 80063c0:	f7fc faa5 	bl	800290e <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80063c4:	4853      	ldr	r0, [pc, #332]	; (8006514 <cppLoop+0x974>)
 80063c6:	f7fc fafb 	bl	80029c0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80063ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ce:	f000 fd6d 	bl	8006eac <HAL_Delay>

			led.fullColor('R');
 80063d2:	2152      	movs	r1, #82	; 0x52
 80063d4:	4849      	ldr	r0, [pc, #292]	; (80064fc <cppLoop+0x95c>)
 80063d6:	f7fb fe5d 	bl	8002094 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80063da:	4856      	ldr	r0, [pc, #344]	; (8006534 <cppLoop+0x994>)
 80063dc:	f7fb f816 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80063e0:	4854      	ldr	r0, [pc, #336]	; (8006534 <cppLoop+0x994>)
 80063e2:	f7fa ffd9 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 80063e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80063ea:	f000 fd5f 	bl	8006eac <HAL_Delay>

			line_trace.stop();
 80063ee:	4849      	ldr	r0, [pc, #292]	; (8006514 <cppLoop+0x974>)
 80063f0:	f7fc faf6 	bl	80029e0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80063f4:	4950      	ldr	r1, [pc, #320]	; (8006538 <cppLoop+0x998>)
 80063f6:	4851      	ldr	r0, [pc, #324]	; (800653c <cppLoop+0x99c>)
 80063f8:	f7fb f826 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 80063fc:	484d      	ldr	r0, [pc, #308]	; (8006534 <cppLoop+0x994>)
 80063fe:	f7fa ffba 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8006402:	ec54 3b10 	vmov	r3, r4, d0
 8006406:	4618      	mov	r0, r3
 8006408:	4621      	mov	r1, r4
 800640a:	f7fa fc05 	bl	8000c18 <__aeabi_d2f>
 800640e:	4603      	mov	r3, r0
 8006410:	61fb      	str	r3, [r7, #28]
			sd_write_float(1, &d, ADD_WRITE);
 8006412:	f107 031c 	add.w	r3, r7, #28
 8006416:	2201      	movs	r2, #1
 8006418:	4619      	mov	r1, r3
 800641a:	2001      	movs	r0, #1
 800641c:	f7fb f836 	bl	800148c <sd_write_float>
			user_fclose();
 8006420:	f7fb f824 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 8006424:	2200      	movs	r2, #0
 8006426:	f04f 31ff 	mov.w	r1, #4294967295
 800642a:	4834      	ldr	r0, [pc, #208]	; (80064fc <cppLoop+0x95c>)
 800642c:	f7fb feee 	bl	800220c <_ZN3LED2LREaa>
		}

		break;
 8006430:	f000 bc1c 	b.w	8006c6c <cppLoop+0x10cc>

	case 6:
		led.fullColor('C');
 8006434:	2143      	movs	r1, #67	; 0x43
 8006436:	4831      	ldr	r0, [pc, #196]	; (80064fc <cppLoop+0x95c>)
 8006438:	f7fb fe2c 	bl	8002094 <_ZN3LED9fullColorEc>

		lcd_clear();
 800643c:	f7fa fe30 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006440:	2100      	movs	r1, #0
 8006442:	2000      	movs	r0, #0
 8006444:	f7fa fe3c 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006448:	483d      	ldr	r0, [pc, #244]	; (8006540 <cppLoop+0x9a0>)
 800644a:	f7fa fe63 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800644e:	2101      	movs	r1, #1
 8006450:	2000      	movs	r0, #0
 8006452:	f7fa fe35 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006456:	4827      	ldr	r0, [pc, #156]	; (80064f4 <cppLoop+0x954>)
 8006458:	f7fa fe5c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800645c:	4826      	ldr	r0, [pc, #152]	; (80064f8 <cppLoop+0x958>)
 800645e:	f7fb fdb5 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006462:	4603      	mov	r3, r0
 8006464:	2b02      	cmp	r3, #2
 8006466:	bf0c      	ite	eq
 8006468:	2301      	moveq	r3, #1
 800646a:	2300      	movne	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 83fe 	beq.w	8006c70 <cppLoop+0x10d0>
			HAL_Delay(500);
 8006474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006478:	f000 fd18 	bl	8006eac <HAL_Delay>
			led.LR(-1, 1);
 800647c:	2201      	movs	r2, #1
 800647e:	f04f 31ff 	mov.w	r1, #4294967295
 8006482:	481e      	ldr	r0, [pc, #120]	; (80064fc <cppLoop+0x95c>)
 8006484:	f7fb fec2 	bl	800220c <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006488:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8006544 <cppLoop+0x9a4>
 800648c:	4821      	ldr	r0, [pc, #132]	; (8006514 <cppLoop+0x974>)
 800648e:	f7fc fa3e 	bl	800290e <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006492:	4820      	ldr	r0, [pc, #128]	; (8006514 <cppLoop+0x974>)
 8006494:	f7fc fa94 	bl	80029c0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800649c:	f000 fd06 	bl	8006eac <HAL_Delay>

			led.fullColor('R');
 80064a0:	2152      	movs	r1, #82	; 0x52
 80064a2:	4816      	ldr	r0, [pc, #88]	; (80064fc <cppLoop+0x95c>)
 80064a4:	f7fb fdf6 	bl	8002094 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80064a8:	4822      	ldr	r0, [pc, #136]	; (8006534 <cppLoop+0x994>)
 80064aa:	f7fa ffaf 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80064ae:	4821      	ldr	r0, [pc, #132]	; (8006534 <cppLoop+0x994>)
 80064b0:	f7fa ff72 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80064b4:	4824      	ldr	r0, [pc, #144]	; (8006548 <cppLoop+0x9a8>)
 80064b6:	f7fc fd94 	bl	8002fe2 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80064ba:	4814      	ldr	r0, [pc, #80]	; (800650c <cppLoop+0x96c>)
 80064bc:	f7fc fb81 	bl	8002bc2 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 80064c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80064c4:	f000 fcf2 	bl	8006eac <HAL_Delay>

			line_trace.stop();
 80064c8:	4812      	ldr	r0, [pc, #72]	; (8006514 <cppLoop+0x974>)
 80064ca:	f7fc fa89 	bl	80029e0 <_ZN9LineTrace4stopEv>
			logger.stop();
 80064ce:	480f      	ldr	r0, [pc, #60]	; (800650c <cppLoop+0x96c>)
 80064d0:	f7fc fb87 	bl	8002be2 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <cppLoop+0x9ac>)
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <cppLoop+0x9b0>)
 80064d8:	491e      	ldr	r1, [pc, #120]	; (8006554 <cppLoop+0x9b4>)
 80064da:	480c      	ldr	r0, [pc, #48]	; (800650c <cppLoop+0x96c>)
 80064dc:	f7fc fb4e 	bl	8002b7c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80064e0:	2200      	movs	r2, #0
 80064e2:	f04f 31ff 	mov.w	r1, #4294967295
 80064e6:	4805      	ldr	r0, [pc, #20]	; (80064fc <cppLoop+0x95c>)
 80064e8:	f7fb fe90 	bl	800220c <_ZN3LED2LREaa>
		}

		break;
 80064ec:	e3c0      	b.n	8006c70 <cppLoop+0x10d0>
 80064ee:	bf00      	nop
 80064f0:	08017af4 	.word	0x08017af4
 80064f4:	08017afc 	.word	0x08017afc
 80064f8:	20000544 	.word	0x20000544
 80064fc:	20000550 	.word	0x20000550
 8006500:	20013778 	.word	0x20013778
 8006504:	08017b04 	.word	0x08017b04
 8006508:	08017b0c 	.word	0x08017b0c
 800650c:	200005b4 	.word	0x200005b4
 8006510:	3dcccccd 	.word	0x3dcccccd
 8006514:	200136e0 	.word	0x200136e0
 8006518:	08017b14 	.word	0x08017b14
 800651c:	08017b20 	.word	0x08017b20
 8006520:	08017b30 	.word	0x08017b30
 8006524:	200136a0 	.word	0x200136a0
 8006528:	08017b3c 	.word	0x08017b3c
 800652c:	08017b44 	.word	0x08017b44
 8006530:	00000000 	.word	0x00000000
 8006534:	20013670 	.word	0x20013670
 8006538:	08017b50 	.word	0x08017b50
 800653c:	08017b58 	.word	0x08017b58
 8006540:	08017b64 	.word	0x08017b64
 8006544:	3d8f5c29 	.word	0x3d8f5c29
 8006548:	20013748 	.word	0x20013748
 800654c:	08017b70 	.word	0x08017b70
 8006550:	08017b7c 	.word	0x08017b7c
 8006554:	08017b88 	.word	0x08017b88

	case 7:
		led.fullColor('M');
 8006558:	214d      	movs	r1, #77	; 0x4d
 800655a:	48b9      	ldr	r0, [pc, #740]	; (8006840 <cppLoop+0xca0>)
 800655c:	f7fb fd9a 	bl	8002094 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006560:	f7fa fd9e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006564:	2100      	movs	r1, #0
 8006566:	2000      	movs	r0, #0
 8006568:	f7fa fdaa 	bl	80010c0 <lcd_locate>
		lcd_printf("Path");
 800656c:	48b5      	ldr	r0, [pc, #724]	; (8006844 <cppLoop+0xca4>)
 800656e:	f7fa fdd1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006572:	2101      	movs	r1, #1
 8006574:	2000      	movs	r0, #0
 8006576:	f7fa fda3 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800657a:	48b3      	ldr	r0, [pc, #716]	; (8006848 <cppLoop+0xca8>)
 800657c:	f7fa fdca 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8006580:	48b2      	ldr	r0, [pc, #712]	; (800684c <cppLoop+0xcac>)
 8006582:	f7fb fd23 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006586:	4603      	mov	r3, r0
 8006588:	2b04      	cmp	r3, #4
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00f      	beq.n	80065b6 <cppLoop+0xa16>
			led.LR(-1, 1);
 8006596:	2201      	movs	r2, #1
 8006598:	f04f 31ff 	mov.w	r1, #4294967295
 800659c:	48a8      	ldr	r0, [pc, #672]	; (8006840 <cppLoop+0xca0>)
 800659e:	f7fb fe35 	bl	800220c <_ZN3LED2LREaa>
			path_following.setTargetPathMulti();
 80065a2:	48ab      	ldr	r0, [pc, #684]	; (8006850 <cppLoop+0xcb0>)
 80065a4:	f7fc fe50 	bl	8003248 <_ZN13PathFollowing18setTargetPathMultiEv>
			led.LR(-1, 0);
 80065a8:	2200      	movs	r2, #0
 80065aa:	f04f 31ff 	mov.w	r1, #4294967295
 80065ae:	48a4      	ldr	r0, [pc, #656]	; (8006840 <cppLoop+0xca0>)
 80065b0:	f7fb fe2c 	bl	800220c <_ZN3LED2LREaa>
			path_following.stop();
			velocity_ctrl.stop();

			led.LR(-1, 0);
		}
		break;
 80065b4:	e35e      	b.n	8006c74 <cppLoop+0x10d4>
		else if(joy_stick.getValue() == JOY_C){
 80065b6:	48a5      	ldr	r0, [pc, #660]	; (800684c <cppLoop+0xcac>)
 80065b8:	f7fb fd08 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b02      	cmp	r3, #2
 80065c0:	bf0c      	ite	eq
 80065c2:	2301      	moveq	r3, #1
 80065c4:	2300      	movne	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8353 	beq.w	8006c74 <cppLoop+0x10d4>
			led.LR(-1, 1);
 80065ce:	2201      	movs	r2, #1
 80065d0:	f04f 31ff 	mov.w	r1, #4294967295
 80065d4:	489a      	ldr	r0, [pc, #616]	; (8006840 <cppLoop+0xca0>)
 80065d6:	f7fb fe19 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80065da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065de:	f000 fc65 	bl	8006eac <HAL_Delay>
			led.fullColor('R');
 80065e2:	2152      	movs	r1, #82	; 0x52
 80065e4:	4896      	ldr	r0, [pc, #600]	; (8006840 <cppLoop+0xca0>)
 80065e6:	f7fb fd55 	bl	8002094 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80065ea:	489a      	ldr	r0, [pc, #616]	; (8006854 <cppLoop+0xcb4>)
 80065ec:	f7fa ff0e 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80065f0:	4898      	ldr	r0, [pc, #608]	; (8006854 <cppLoop+0xcb4>)
 80065f2:	f7fa fed1 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80065f6:	4898      	ldr	r0, [pc, #608]	; (8006858 <cppLoop+0xcb8>)
 80065f8:	f7fc fcf3 	bl	8002fe2 <_ZN8Odometry13clearPotitionEv>
			path_following.start();
 80065fc:	4894      	ldr	r0, [pc, #592]	; (8006850 <cppLoop+0xcb0>)
 80065fe:	f7fc fe57 	bl	80032b0 <_ZN13PathFollowing5startEv>
			velocity_ctrl.start();
 8006602:	4896      	ldr	r0, [pc, #600]	; (800685c <cppLoop+0xcbc>)
 8006604:	f7fd fb11 	bl	8003c2a <_ZN12VelocityCtrl5startEv>
			HAL_Delay(4000);
 8006608:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800660c:	f000 fc4e 	bl	8006eac <HAL_Delay>
			path_following.stop();
 8006610:	488f      	ldr	r0, [pc, #572]	; (8006850 <cppLoop+0xcb0>)
 8006612:	f7fc fe5b 	bl	80032cc <_ZN13PathFollowing4stopEv>
			velocity_ctrl.stop();
 8006616:	4891      	ldr	r0, [pc, #580]	; (800685c <cppLoop+0xcbc>)
 8006618:	f7fd fb16 	bl	8003c48 <_ZN12VelocityCtrl4stopEv>
			led.LR(-1, 0);
 800661c:	2200      	movs	r2, #0
 800661e:	f04f 31ff 	mov.w	r1, #4294967295
 8006622:	4887      	ldr	r0, [pc, #540]	; (8006840 <cppLoop+0xca0>)
 8006624:	f7fb fdf2 	bl	800220c <_ZN3LED2LREaa>
		break;
 8006628:	e324      	b.n	8006c74 <cppLoop+0x10d4>

	case 8:
		led.fullColor('M');
 800662a:	214d      	movs	r1, #77	; 0x4d
 800662c:	4884      	ldr	r0, [pc, #528]	; (8006840 <cppLoop+0xca0>)
 800662e:	f7fb fd31 	bl	8002094 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006632:	f7fa fd35 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006636:	2100      	movs	r1, #0
 8006638:	2000      	movs	r0, #0
 800663a:	f7fa fd41 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 800663e:	4884      	ldr	r0, [pc, #528]	; (8006850 <cppLoop+0xcb0>)
 8006640:	f7fc fdc6 	bl	80031d0 <_ZN13PathFollowing8getKxValEv>
 8006644:	ec51 0b10 	vmov	r0, r1, d0
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	4b84      	ldr	r3, [pc, #528]	; (8006860 <cppLoop+0xcc0>)
 800664e:	f7f9 ffeb 	bl	8000628 <__aeabi_dmul>
 8006652:	4603      	mov	r3, r0
 8006654:	460c      	mov	r4, r1
 8006656:	461a      	mov	r2, r3
 8006658:	4623      	mov	r3, r4
 800665a:	4882      	ldr	r0, [pc, #520]	; (8006864 <cppLoop+0xcc4>)
 800665c:	f7fa fd5a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006660:	2101      	movs	r1, #1
 8006662:	2000      	movs	r0, #0
 8006664:	f7fa fd2c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006668:	4879      	ldr	r0, [pc, #484]	; (8006850 <cppLoop+0xcb0>)
 800666a:	f7fc fdc5 	bl	80031f8 <_ZN13PathFollowing8getKyValEv>
 800666e:	ec51 0b10 	vmov	r0, r1, d0
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	4b7a      	ldr	r3, [pc, #488]	; (8006860 <cppLoop+0xcc0>)
 8006678:	f7f9 ffd6 	bl	8000628 <__aeabi_dmul>
 800667c:	4603      	mov	r3, r0
 800667e:	460c      	mov	r4, r1
 8006680:	461d      	mov	r5, r3
 8006682:	4626      	mov	r6, r4
 8006684:	4872      	ldr	r0, [pc, #456]	; (8006850 <cppLoop+0xcb0>)
 8006686:	f7fc fdcb 	bl	8003220 <_ZN13PathFollowing8getKtValEv>
 800668a:	ec51 0b10 	vmov	r0, r1, d0
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	4b73      	ldr	r3, [pc, #460]	; (8006860 <cppLoop+0xcc0>)
 8006694:	f7f9 ffc8 	bl	8000628 <__aeabi_dmul>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	e9cd 3400 	strd	r3, r4, [sp]
 80066a0:	462a      	mov	r2, r5
 80066a2:	4633      	mov	r3, r6
 80066a4:	4870      	ldr	r0, [pc, #448]	; (8006868 <cppLoop+0xcc8>)
 80066a6:	f7fa fd35 	bl	8001114 <lcd_printf>

		static double adj_kx = path_following.getKxVal();
 80066aa:	4b70      	ldr	r3, [pc, #448]	; (800686c <cppLoop+0xccc>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	f3bf 8f5b 	dmb	ish
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf0c      	ite	eq
 80066bc:	2301      	moveq	r3, #1
 80066be:	2300      	movne	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <cppLoop+0xb56>
 80066c6:	4869      	ldr	r0, [pc, #420]	; (800686c <cppLoop+0xccc>)
 80066c8:	f00b f8ed 	bl	80118a6 <__cxa_guard_acquire>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bf14      	ite	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	2300      	moveq	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <cppLoop+0xb56>
 80066dc:	485c      	ldr	r0, [pc, #368]	; (8006850 <cppLoop+0xcb0>)
 80066de:	f7fc fd77 	bl	80031d0 <_ZN13PathFollowing8getKxValEv>
 80066e2:	eeb0 7a40 	vmov.f32	s14, s0
 80066e6:	eef0 7a60 	vmov.f32	s15, s1
 80066ea:	4b61      	ldr	r3, [pc, #388]	; (8006870 <cppLoop+0xcd0>)
 80066ec:	ed83 7b00 	vstr	d7, [r3]
 80066f0:	485e      	ldr	r0, [pc, #376]	; (800686c <cppLoop+0xccc>)
 80066f2:	f00b f8e4 	bl	80118be <__cxa_guard_release>
		static double adj_ky = path_following.getKyVal();
 80066f6:	4b5f      	ldr	r3, [pc, #380]	; (8006874 <cppLoop+0xcd4>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f3bf 8f5b 	dmb	ish
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d017      	beq.n	8006742 <cppLoop+0xba2>
 8006712:	4858      	ldr	r0, [pc, #352]	; (8006874 <cppLoop+0xcd4>)
 8006714:	f00b f8c7 	bl	80118a6 <__cxa_guard_acquire>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00c      	beq.n	8006742 <cppLoop+0xba2>
 8006728:	4849      	ldr	r0, [pc, #292]	; (8006850 <cppLoop+0xcb0>)
 800672a:	f7fc fd65 	bl	80031f8 <_ZN13PathFollowing8getKyValEv>
 800672e:	eeb0 7a40 	vmov.f32	s14, s0
 8006732:	eef0 7a60 	vmov.f32	s15, s1
 8006736:	4b50      	ldr	r3, [pc, #320]	; (8006878 <cppLoop+0xcd8>)
 8006738:	ed83 7b00 	vstr	d7, [r3]
 800673c:	484d      	ldr	r0, [pc, #308]	; (8006874 <cppLoop+0xcd4>)
 800673e:	f00b f8be 	bl	80118be <__cxa_guard_release>
		static double adj_kt = path_following.getKtVal();
 8006742:	4b4e      	ldr	r3, [pc, #312]	; (800687c <cppLoop+0xcdc>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f3bf 8f5b 	dmb	ish
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d017      	beq.n	800678e <cppLoop+0xbee>
 800675e:	4847      	ldr	r0, [pc, #284]	; (800687c <cppLoop+0xcdc>)
 8006760:	f00b f8a1 	bl	80118a6 <__cxa_guard_acquire>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00c      	beq.n	800678e <cppLoop+0xbee>
 8006774:	4836      	ldr	r0, [pc, #216]	; (8006850 <cppLoop+0xcb0>)
 8006776:	f7fc fd53 	bl	8003220 <_ZN13PathFollowing8getKtValEv>
 800677a:	eeb0 7a40 	vmov.f32	s14, s0
 800677e:	eef0 7a60 	vmov.f32	s15, s1
 8006782:	4b3f      	ldr	r3, [pc, #252]	; (8006880 <cppLoop+0xce0>)
 8006784:	ed83 7b00 	vstr	d7, [r3]
 8006788:	483c      	ldr	r0, [pc, #240]	; (800687c <cppLoop+0xcdc>)
 800678a:	f00b f898 	bl	80118be <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 800678e:	482f      	ldr	r0, [pc, #188]	; (800684c <cppLoop+0xcac>)
 8006790:	f7fb fc1c 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006794:	4603      	mov	r3, r0
 8006796:	2b08      	cmp	r3, #8
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d021      	beq.n	80067e8 <cppLoop+0xc48>
			led.LR(-1, 1);
 80067a4:	2201      	movs	r2, #1
 80067a6:	f04f 31ff 	mov.w	r1, #4294967295
 80067aa:	4825      	ldr	r0, [pc, #148]	; (8006840 <cppLoop+0xca0>)
 80067ac:	f7fb fd2e 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80067b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067b4:	f000 fb7a 	bl	8006eac <HAL_Delay>

			selector++;
 80067b8:	4b32      	ldr	r3, [pc, #200]	; (8006884 <cppLoop+0xce4>)
 80067ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3301      	adds	r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	b21a      	sxth	r2, r3
 80067c6:	4b2f      	ldr	r3, [pc, #188]	; (8006884 <cppLoop+0xce4>)
 80067c8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80067ca:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <cppLoop+0xce4>)
 80067cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	dd02      	ble.n	80067da <cppLoop+0xc3a>
 80067d4:	4b2b      	ldr	r3, [pc, #172]	; (8006884 <cppLoop+0xce4>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80067da:	2200      	movs	r2, #0
 80067dc:	f04f 31ff 	mov.w	r1, #4294967295
 80067e0:	4817      	ldr	r0, [pc, #92]	; (8006840 <cppLoop+0xca0>)
 80067e2:	f7fb fd13 	bl	800220c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80067e6:	e247      	b.n	8006c78 <cppLoop+0x10d8>
		else if(joy_stick.getValue() == JOY_R){
 80067e8:	4818      	ldr	r0, [pc, #96]	; (800684c <cppLoop+0xcac>)
 80067ea:	f7fb fbef 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d06f      	beq.n	80068de <cppLoop+0xd3e>
			led.LR(-1, 1);
 80067fe:	2201      	movs	r2, #1
 8006800:	f04f 31ff 	mov.w	r1, #4294967295
 8006804:	480e      	ldr	r0, [pc, #56]	; (8006840 <cppLoop+0xca0>)
 8006806:	f7fb fd01 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800680a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800680e:	f000 fb4d 	bl	8006eac <HAL_Delay>
			if(selector == 0){
 8006812:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <cppLoop+0xce4>)
 8006814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d135      	bne.n	8006888 <cppLoop+0xce8>
				adj_kx = adj_kx + 0.00001;
 800681c:	4b14      	ldr	r3, [pc, #80]	; (8006870 <cppLoop+0xcd0>)
 800681e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006822:	a305      	add	r3, pc, #20	; (adr r3, 8006838 <cppLoop+0xc98>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fd48 	bl	80002bc <__adddf3>
 800682c:	4603      	mov	r3, r0
 800682e:	460c      	mov	r4, r1
 8006830:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <cppLoop+0xcd0>)
 8006832:	e9c2 3400 	strd	r3, r4, [r2]
 8006836:	e047      	b.n	80068c8 <cppLoop+0xd28>
 8006838:	88e368f1 	.word	0x88e368f1
 800683c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006840:	20000550 	.word	0x20000550
 8006844:	08017b8c 	.word	0x08017b8c
 8006848:	08017b44 	.word	0x08017b44
 800684c:	20000544 	.word	0x20000544
 8006850:	20013988 	.word	0x20013988
 8006854:	20013670 	.word	0x20013670
 8006858:	20013748 	.word	0x20013748
 800685c:	200136a0 	.word	0x200136a0
 8006860:	408f4000 	.word	0x408f4000
 8006864:	08017a98 	.word	0x08017a98
 8006868:	08017aa4 	.word	0x08017aa4
 800686c:	2002b0f8 	.word	0x2002b0f8
 8006870:	2002b0f0 	.word	0x2002b0f0
 8006874:	2002b108 	.word	0x2002b108
 8006878:	2002b100 	.word	0x2002b100
 800687c:	2002b118 	.word	0x2002b118
 8006880:	2002b110 	.word	0x2002b110
 8006884:	2002b0b8 	.word	0x2002b0b8
			else if(selector == 1){
 8006888:	4bbd      	ldr	r3, [pc, #756]	; (8006b80 <cppLoop+0xfe0>)
 800688a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10d      	bne.n	80068ae <cppLoop+0xd0e>
				adj_ky = adj_ky + 0.00001;
 8006892:	4bbc      	ldr	r3, [pc, #752]	; (8006b84 <cppLoop+0xfe4>)
 8006894:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006898:	a3b1      	add	r3, pc, #708	; (adr r3, 8006b60 <cppLoop+0xfc0>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f7f9 fd0d 	bl	80002bc <__adddf3>
 80068a2:	4603      	mov	r3, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	4ab7      	ldr	r2, [pc, #732]	; (8006b84 <cppLoop+0xfe4>)
 80068a8:	e9c2 3400 	strd	r3, r4, [r2]
 80068ac:	e00c      	b.n	80068c8 <cppLoop+0xd28>
				adj_kt = adj_kt + 0.00001;
 80068ae:	4bb6      	ldr	r3, [pc, #728]	; (8006b88 <cppLoop+0xfe8>)
 80068b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068b4:	a3aa      	add	r3, pc, #680	; (adr r3, 8006b60 <cppLoop+0xfc0>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fcff 	bl	80002bc <__adddf3>
 80068be:	4603      	mov	r3, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	4ab1      	ldr	r2, [pc, #708]	; (8006b88 <cppLoop+0xfe8>)
 80068c4:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 80068c8:	2152      	movs	r1, #82	; 0x52
 80068ca:	48b0      	ldr	r0, [pc, #704]	; (8006b8c <cppLoop+0xfec>)
 80068cc:	f7fb fbe2 	bl	8002094 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80068d0:	2200      	movs	r2, #0
 80068d2:	f04f 31ff 	mov.w	r1, #4294967295
 80068d6:	48ad      	ldr	r0, [pc, #692]	; (8006b8c <cppLoop+0xfec>)
 80068d8:	f7fb fc98 	bl	800220c <_ZN3LED2LREaa>
		break;
 80068dc:	e1cc      	b.n	8006c78 <cppLoop+0x10d8>
		else if(joy_stick.getValue() == JOY_L){
 80068de:	48ac      	ldr	r0, [pc, #688]	; (8006b90 <cppLoop+0xff0>)
 80068e0:	f7fb fb74 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	bf0c      	ite	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	2300      	movne	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d047      	beq.n	8006984 <cppLoop+0xde4>
			led.LR(-1, 1);
 80068f4:	2201      	movs	r2, #1
 80068f6:	f04f 31ff 	mov.w	r1, #4294967295
 80068fa:	48a4      	ldr	r0, [pc, #656]	; (8006b8c <cppLoop+0xfec>)
 80068fc:	f7fb fc86 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006900:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006904:	f000 fad2 	bl	8006eac <HAL_Delay>
			if(selector == 0){
 8006908:	4b9d      	ldr	r3, [pc, #628]	; (8006b80 <cppLoop+0xfe0>)
 800690a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <cppLoop+0xd8e>
				adj_kx = adj_kx - 0.00001;
 8006912:	4ba0      	ldr	r3, [pc, #640]	; (8006b94 <cppLoop+0xff4>)
 8006914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006918:	a391      	add	r3, pc, #580	; (adr r3, 8006b60 <cppLoop+0xfc0>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fccb 	bl	80002b8 <__aeabi_dsub>
 8006922:	4603      	mov	r3, r0
 8006924:	460c      	mov	r4, r1
 8006926:	4a9b      	ldr	r2, [pc, #620]	; (8006b94 <cppLoop+0xff4>)
 8006928:	e9c2 3400 	strd	r3, r4, [r2]
 800692c:	e01f      	b.n	800696e <cppLoop+0xdce>
			else if(selector == 1){
 800692e:	4b94      	ldr	r3, [pc, #592]	; (8006b80 <cppLoop+0xfe0>)
 8006930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d10d      	bne.n	8006954 <cppLoop+0xdb4>
				adj_ky = adj_ky - 0.00001;
 8006938:	4b92      	ldr	r3, [pc, #584]	; (8006b84 <cppLoop+0xfe4>)
 800693a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800693e:	a388      	add	r3, pc, #544	; (adr r3, 8006b60 <cppLoop+0xfc0>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7f9 fcb8 	bl	80002b8 <__aeabi_dsub>
 8006948:	4603      	mov	r3, r0
 800694a:	460c      	mov	r4, r1
 800694c:	4a8d      	ldr	r2, [pc, #564]	; (8006b84 <cppLoop+0xfe4>)
 800694e:	e9c2 3400 	strd	r3, r4, [r2]
 8006952:	e00c      	b.n	800696e <cppLoop+0xdce>
				adj_kt = adj_kt - 0.00001;
 8006954:	4b8c      	ldr	r3, [pc, #560]	; (8006b88 <cppLoop+0xfe8>)
 8006956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800695a:	a381      	add	r3, pc, #516	; (adr r3, 8006b60 <cppLoop+0xfc0>)
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f7f9 fcaa 	bl	80002b8 <__aeabi_dsub>
 8006964:	4603      	mov	r3, r0
 8006966:	460c      	mov	r4, r1
 8006968:	4a87      	ldr	r2, [pc, #540]	; (8006b88 <cppLoop+0xfe8>)
 800696a:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 800696e:	2152      	movs	r1, #82	; 0x52
 8006970:	4886      	ldr	r0, [pc, #536]	; (8006b8c <cppLoop+0xfec>)
 8006972:	f7fb fb8f 	bl	8002094 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006976:	2200      	movs	r2, #0
 8006978:	f04f 31ff 	mov.w	r1, #4294967295
 800697c:	4883      	ldr	r0, [pc, #524]	; (8006b8c <cppLoop+0xfec>)
 800697e:	f7fb fc45 	bl	800220c <_ZN3LED2LREaa>
		break;
 8006982:	e179      	b.n	8006c78 <cppLoop+0x10d8>
		else if(joy_stick.getValue() == JOY_D){
 8006984:	4882      	ldr	r0, [pc, #520]	; (8006b90 <cppLoop+0xff0>)
 8006986:	f7fb fb21 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 800698a:	4603      	mov	r3, r0
 800698c:	2b04      	cmp	r3, #4
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d048      	beq.n	8006a2c <cppLoop+0xe8c>
			led.LR(-1, 1);
 800699a:	2201      	movs	r2, #1
 800699c:	f04f 31ff 	mov.w	r1, #4294967295
 80069a0:	487a      	ldr	r0, [pc, #488]	; (8006b8c <cppLoop+0xfec>)
 80069a2:	f7fb fc33 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80069a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80069aa:	f000 fa7f 	bl	8006eac <HAL_Delay>
			sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 80069ae:	f107 0310 	add.w	r3, r7, #16
 80069b2:	2201      	movs	r2, #1
 80069b4:	4978      	ldr	r1, [pc, #480]	; (8006b98 <cppLoop+0xff8>)
 80069b6:	4879      	ldr	r0, [pc, #484]	; (8006b9c <cppLoop+0xffc>)
 80069b8:	f7fa fe82 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 80069bc:	f107 0308 	add.w	r3, r7, #8
 80069c0:	2201      	movs	r2, #1
 80069c2:	4977      	ldr	r1, [pc, #476]	; (8006ba0 <cppLoop+0x1000>)
 80069c4:	4875      	ldr	r0, [pc, #468]	; (8006b9c <cppLoop+0xffc>)
 80069c6:	f7fa fe7b 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 80069ca:	463b      	mov	r3, r7
 80069cc:	2201      	movs	r2, #1
 80069ce:	4975      	ldr	r1, [pc, #468]	; (8006ba4 <cppLoop+0x1004>)
 80069d0:	4872      	ldr	r0, [pc, #456]	; (8006b9c <cppLoop+0xffc>)
 80069d2:	f7fa fe75 	bl	80016c0 <sd_read_array_double>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 80069d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80069da:	ed97 6b02 	vldr	d6, [r7, #8]
 80069de:	ed97 5b00 	vldr	d5, [r7]
 80069e2:	eeb0 2a45 	vmov.f32	s4, s10
 80069e6:	eef0 2a65 	vmov.f32	s5, s11
 80069ea:	eeb0 1a46 	vmov.f32	s2, s12
 80069ee:	eef0 1a66 	vmov.f32	s3, s13
 80069f2:	eeb0 0a47 	vmov.f32	s0, s14
 80069f6:	eef0 0a67 	vmov.f32	s1, s15
 80069fa:	486b      	ldr	r0, [pc, #428]	; (8006ba8 <cppLoop+0x1008>)
 80069fc:	f7fc fbc8 	bl	8003190 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006a00:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006a04:	4a63      	ldr	r2, [pc, #396]	; (8006b94 <cppLoop+0xff4>)
 8006a06:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ky = temp_ky;
 8006a0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006a0e:	4a5d      	ldr	r2, [pc, #372]	; (8006b84 <cppLoop+0xfe4>)
 8006a10:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kt = temp_kt;
 8006a14:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006a18:	4a5b      	ldr	r2, [pc, #364]	; (8006b88 <cppLoop+0xfe8>)
 8006a1a:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f04f 31ff 	mov.w	r1, #4294967295
 8006a24:	4859      	ldr	r0, [pc, #356]	; (8006b8c <cppLoop+0xfec>)
 8006a26:	f7fb fbf1 	bl	800220c <_ZN3LED2LREaa>
		break;
 8006a2a:	e125      	b.n	8006c78 <cppLoop+0x10d8>
		else if(joy_stick.getValue() == JOY_C){
 8006a2c:	4858      	ldr	r0, [pc, #352]	; (8006b90 <cppLoop+0xff0>)
 8006a2e:	f7fb facd 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 811a 	beq.w	8006c78 <cppLoop+0x10d8>
			led.LR(-1, 1);
 8006a44:	2201      	movs	r2, #1
 8006a46:	f04f 31ff 	mov.w	r1, #4294967295
 8006a4a:	4850      	ldr	r0, [pc, #320]	; (8006b8c <cppLoop+0xfec>)
 8006a4c:	f7fb fbde 	bl	800220c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006a54:	f000 fa2a 	bl	8006eac <HAL_Delay>
			sd_write_array_double("Params", "kx.txt", 1, &adj_kx, OVER_WRITE);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4b4d      	ldr	r3, [pc, #308]	; (8006b94 <cppLoop+0xff4>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	494d      	ldr	r1, [pc, #308]	; (8006b98 <cppLoop+0xff8>)
 8006a62:	484e      	ldr	r0, [pc, #312]	; (8006b9c <cppLoop+0xffc>)
 8006a64:	f7fa fdca 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "ky.txt", 1, &adj_ky, OVER_WRITE);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4b45      	ldr	r3, [pc, #276]	; (8006b84 <cppLoop+0xfe4>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	494b      	ldr	r1, [pc, #300]	; (8006ba0 <cppLoop+0x1000>)
 8006a72:	484a      	ldr	r0, [pc, #296]	; (8006b9c <cppLoop+0xffc>)
 8006a74:	f7fa fdc2 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "kt.txt", 1, &adj_kt, OVER_WRITE);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4b42      	ldr	r3, [pc, #264]	; (8006b88 <cppLoop+0xfe8>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4948      	ldr	r1, [pc, #288]	; (8006ba4 <cppLoop+0x1004>)
 8006a82:	4846      	ldr	r0, [pc, #280]	; (8006b9c <cppLoop+0xffc>)
 8006a84:	f7fa fdba 	bl	80015fc <sd_write_array_double>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006a88:	4b42      	ldr	r3, [pc, #264]	; (8006b94 <cppLoop+0xff4>)
 8006a8a:	ed93 7b00 	vldr	d7, [r3]
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <cppLoop+0xfe4>)
 8006a90:	ed93 6b00 	vldr	d6, [r3]
 8006a94:	4b3c      	ldr	r3, [pc, #240]	; (8006b88 <cppLoop+0xfe8>)
 8006a96:	ed93 5b00 	vldr	d5, [r3]
 8006a9a:	eeb0 2a45 	vmov.f32	s4, s10
 8006a9e:	eef0 2a65 	vmov.f32	s5, s11
 8006aa2:	eeb0 1a46 	vmov.f32	s2, s12
 8006aa6:	eef0 1a66 	vmov.f32	s3, s13
 8006aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8006aae:	eef0 0a67 	vmov.f32	s1, s15
 8006ab2:	483d      	ldr	r0, [pc, #244]	; (8006ba8 <cppLoop+0x1008>)
 8006ab4:	f7fc fb6c 	bl	8003190 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f04f 31ff 	mov.w	r1, #4294967295
 8006abe:	4833      	ldr	r0, [pc, #204]	; (8006b8c <cppLoop+0xfec>)
 8006ac0:	f7fb fba4 	bl	800220c <_ZN3LED2LREaa>
		break;
 8006ac4:	e0d8      	b.n	8006c78 <cppLoop+0x10d8>

	case 9:
		lcd_clear();
 8006ac6:	f7fa faeb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006aca:	2100      	movs	r1, #0
 8006acc:	2000      	movs	r0, #0
 8006ace:	f7fa faf7 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006ad2:	4836      	ldr	r0, [pc, #216]	; (8006bac <cppLoop+0x100c>)
 8006ad4:	f7fa fb1e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ad8:	2101      	movs	r1, #1
 8006ada:	2000      	movs	r0, #0
 8006adc:	f7fa faf0 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006ae0:	4833      	ldr	r0, [pc, #204]	; (8006bb0 <cppLoop+0x1010>)
 8006ae2:	f7fa fb17 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ae6:	482a      	ldr	r0, [pc, #168]	; (8006b90 <cppLoop+0xff0>)
 8006ae8:	f7fb fa70 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80bf 	beq.w	8006c7c <cppLoop+0x10dc>
			HAL_Delay(500);
 8006afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b02:	f000 f9d3 	bl	8006eac <HAL_Delay>
			led.LR(-1, 1);
 8006b06:	2201      	movs	r2, #1
 8006b08:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0c:	481f      	ldr	r0, [pc, #124]	; (8006b8c <cppLoop+0xfec>)
 8006b0e:	f7fb fb7d 	bl	800220c <_ZN3LED2LREaa>

			logger.start();
 8006b12:	4828      	ldr	r0, [pc, #160]	; (8006bb4 <cppLoop+0x1014>)
 8006b14:	f7fc f855 	bl	8002bc2 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006b18:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8006b68 <cppLoop+0xfc8>
 8006b1c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8006b70 <cppLoop+0xfd0>
 8006b20:	4825      	ldr	r0, [pc, #148]	; (8006bb8 <cppLoop+0x1018>)
 8006b22:	f7fc f8e1 	bl	8002ce8 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b2a:	f000 f9bf 	bl	8006eac <HAL_Delay>

			logger.stop();
 8006b2e:	4821      	ldr	r0, [pc, #132]	; (8006bb4 <cppLoop+0x1014>)
 8006b30:	f7fc f857 	bl	8002be2 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8006b34:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8006b78 <cppLoop+0xfd8>
 8006b38:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8006b78 <cppLoop+0xfd8>
 8006b3c:	481e      	ldr	r0, [pc, #120]	; (8006bb8 <cppLoop+0x1018>)
 8006b3e:	f7fc f8d3 	bl	8002ce8 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8006b42:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <cppLoop+0x101c>)
 8006b44:	491e      	ldr	r1, [pc, #120]	; (8006bc0 <cppLoop+0x1020>)
 8006b46:	481b      	ldr	r0, [pc, #108]	; (8006bb4 <cppLoop+0x1014>)
 8006b48:	f7fc f804 	bl	8002b54 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b52:	480e      	ldr	r0, [pc, #56]	; (8006b8c <cppLoop+0xfec>)
 8006b54:	f7fb fb5a 	bl	800220c <_ZN3LED2LREaa>
		}
		break;
 8006b58:	e090      	b.n	8006c7c <cppLoop+0x10dc>
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w
 8006b60:	88e368f1 	.word	0x88e368f1
 8006b64:	3ee4f8b5 	.word	0x3ee4f8b5
 8006b68:	33333333 	.word	0x33333333
 8006b6c:	bfd33333 	.word	0xbfd33333
 8006b70:	33333333 	.word	0x33333333
 8006b74:	3fd33333 	.word	0x3fd33333
	...
 8006b80:	2002b0b8 	.word	0x2002b0b8
 8006b84:	2002b100 	.word	0x2002b100
 8006b88:	2002b110 	.word	0x2002b110
 8006b8c:	20000550 	.word	0x20000550
 8006b90:	20000544 	.word	0x20000544
 8006b94:	2002b0f0 	.word	0x2002b0f0
 8006b98:	08017b94 	.word	0x08017b94
 8006b9c:	08017ac0 	.word	0x08017ac0
 8006ba0:	08017b9c 	.word	0x08017b9c
 8006ba4:	08017ba4 	.word	0x08017ba4
 8006ba8:	20013988 	.word	0x20013988
 8006bac:	08017bac 	.word	0x08017bac
 8006bb0:	08017afc 	.word	0x08017afc
 8006bb4:	200005b4 	.word	0x200005b4
 8006bb8:	2000054c 	.word	0x2000054c
 8006bbc:	08017bb4 	.word	0x08017bb4
 8006bc0:	08017bc0 	.word	0x08017bc0

	case 10:
		lcd_clear();
 8006bc4:	f7fa fa6c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006bc8:	2100      	movs	r1, #0
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f7fa fa78 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006bd0:	482f      	ldr	r0, [pc, #188]	; (8006c90 <cppLoop+0x10f0>)
 8006bd2:	f7fa fa9f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f7fa fa71 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006bde:	482d      	ldr	r0, [pc, #180]	; (8006c94 <cppLoop+0x10f4>)
 8006be0:	f7fa fa98 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006be4:	482c      	ldr	r0, [pc, #176]	; (8006c98 <cppLoop+0x10f8>)
 8006be6:	f7fb f9f1 	bl	8001fcc <_ZN8JoyStick8getValueEv>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d042      	beq.n	8006c80 <cppLoop+0x10e0>
			HAL_Delay(500);
 8006bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bfe:	f000 f955 	bl	8006eac <HAL_Delay>
			led.LR(-1, 1);
 8006c02:	2201      	movs	r2, #1
 8006c04:	f04f 31ff 	mov.w	r1, #4294967295
 8006c08:	4824      	ldr	r0, [pc, #144]	; (8006c9c <cppLoop+0x10fc>)
 8006c0a:	f7fb faff 	bl	800220c <_ZN3LED2LREaa>

			logger.start();
 8006c0e:	4824      	ldr	r0, [pc, #144]	; (8006ca0 <cppLoop+0x1100>)
 8006c10:	f7fb ffd7 	bl	8002bc2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006c14:	4823      	ldr	r0, [pc, #140]	; (8006ca4 <cppLoop+0x1104>)
 8006c16:	f7fd f808 	bl	8003c2a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 1);
 8006c1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006c1e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8006ca8 <cppLoop+0x1108>
 8006c22:	4820      	ldr	r0, [pc, #128]	; (8006ca4 <cppLoop+0x1104>)
 8006c24:	f7fc ffa8 	bl	8003b78 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c2c:	f000 f93e 	bl	8006eac <HAL_Delay>

			logger.stop();
 8006c30:	481b      	ldr	r0, [pc, #108]	; (8006ca0 <cppLoop+0x1100>)
 8006c32:	f7fb ffd6 	bl	8002be2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006c36:	481b      	ldr	r0, [pc, #108]	; (8006ca4 <cppLoop+0x1104>)
 8006c38:	f7fd f806 	bl	8003c48 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006c3c:	4a1b      	ldr	r2, [pc, #108]	; (8006cac <cppLoop+0x110c>)
 8006c3e:	491c      	ldr	r1, [pc, #112]	; (8006cb0 <cppLoop+0x1110>)
 8006c40:	4817      	ldr	r0, [pc, #92]	; (8006ca0 <cppLoop+0x1100>)
 8006c42:	f7fb ff87 	bl	8002b54 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006c46:	2200      	movs	r2, #0
 8006c48:	f04f 31ff 	mov.w	r1, #4294967295
 8006c4c:	4813      	ldr	r0, [pc, #76]	; (8006c9c <cppLoop+0x10fc>)
 8006c4e:	f7fb fadd 	bl	800220c <_ZN3LED2LREaa>
		}

		break;
 8006c52:	e015      	b.n	8006c80 <cppLoop+0x10e0>
	case 15:

		break;

	default:
		break;
 8006c54:	bf00      	nop
 8006c56:	e014      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c58:	bf00      	nop
 8006c5a:	e012      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c5c:	bf00      	nop
 8006c5e:	e010      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c60:	bf00      	nop
 8006c62:	e00e      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c64:	bf00      	nop
 8006c66:	e00c      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c68:	bf00      	nop
 8006c6a:	e00a      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c6c:	bf00      	nop
 8006c6e:	e008      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c70:	bf00      	nop
 8006c72:	e006      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c74:	bf00      	nop
 8006c76:	e004      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c78:	bf00      	nop
 8006c7a:	e002      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c7c:	bf00      	nop
 8006c7e:	e000      	b.n	8006c82 <cppLoop+0x10e2>
		break;
 8006c80:	bf00      	nop

	}

	HAL_Delay(10);
 8006c82:	200a      	movs	r0, #10
 8006c84:	f000 f912 	bl	8006eac <HAL_Delay>

}
 8006c88:	bf00      	nop
 8006c8a:	373c      	adds	r7, #60	; 0x3c
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c90:	08017bcc 	.word	0x08017bcc
 8006c94:	08017bd0 	.word	0x08017bd0
 8006c98:	20000544 	.word	0x20000544
 8006c9c:	20000550 	.word	0x20000550
 8006ca0:	200005b4 	.word	0x200005b4
 8006ca4:	200136a0 	.word	0x200136a0
 8006ca8:	00000000 	.word	0x00000000
 8006cac:	08017bdc 	.word	0x08017bdc
 8006cb0:	08017bc0 	.word	0x08017bc0

08006cb4 <_Z41__static_initialization_and_destruction_0ii>:
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d133      	bne.n	8006d2c <_Z41__static_initialization_and_destruction_0ii+0x78>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d12e      	bne.n	8006d2c <_Z41__static_initialization_and_destruction_0ii+0x78>
LineSensor line_sensor;
 8006cce:	4819      	ldr	r0, [pc, #100]	; (8006d34 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006cd0:	f7fb fad4 	bl	800227c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006cd4:	4818      	ldr	r0, [pc, #96]	; (8006d38 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006cd6:	f7fc fc43 	bl	8003560 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006cda:	4818      	ldr	r0, [pc, #96]	; (8006d3c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006cdc:	f7fb f96a 	bl	8001fb4 <_ZN8JoyStickC1Ev>
Motor motor;
 8006ce0:	4817      	ldr	r0, [pc, #92]	; (8006d40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006ce2:	f7fb ff8e 	bl	8002c02 <_ZN5MotorC1Ev>
IMU imu;
 8006ce6:	4817      	ldr	r0, [pc, #92]	; (8006d44 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006ce8:	f7fa fefa 	bl	8001ae0 <_ZN3IMUC1Ev>
Logger logger;
 8006cec:	4816      	ldr	r0, [pc, #88]	; (8006d48 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006cee:	f7fb fe93 	bl	8002a18 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006cf2:	4816      	ldr	r0, [pc, #88]	; (8006d4c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006cf4:	f7fa fa2e 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006cf8:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006cfa:	4a14      	ldr	r2, [pc, #80]	; (8006d4c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006cfc:	4910      	ldr	r1, [pc, #64]	; (8006d40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006cfe:	4814      	ldr	r0, [pc, #80]	; (8006d50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006d00:	f7fc fd90 	bl	8003824 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8006d04:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006d06:	4a0b      	ldr	r2, [pc, #44]	; (8006d34 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006d08:	490d      	ldr	r1, [pc, #52]	; (8006d40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006d0a:	4812      	ldr	r0, [pc, #72]	; (8006d54 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006d0c:	f7fb fc4c 	bl	80025a8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006d12:	4a0c      	ldr	r2, [pc, #48]	; (8006d44 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006d14:	490d      	ldr	r1, [pc, #52]	; (8006d4c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006d16:	4810      	ldr	r0, [pc, #64]	; (8006d58 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006d18:	f7fc f858 	bl	8002dcc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006d1c:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006d1e:	490a      	ldr	r1, [pc, #40]	; (8006d48 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006d20:	480e      	ldr	r0, [pc, #56]	; (8006d5c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006d22:	f7fc fc87 	bl	8003634 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006d26:	480e      	ldr	r0, [pc, #56]	; (8006d60 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006d28:	f7fc f97a 	bl	8003020 <_ZN13PathFollowingC1Ev>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000248 	.word	0x20000248
 8006d38:	20000540 	.word	0x20000540
 8006d3c:	20000544 	.word	0x20000544
 8006d40:	2000054c 	.word	0x2000054c
 8006d44:	20000560 	.word	0x20000560
 8006d48:	200005b4 	.word	0x200005b4
 8006d4c:	20013670 	.word	0x20013670
 8006d50:	200136a0 	.word	0x200136a0
 8006d54:	200136e0 	.word	0x200136e0
 8006d58:	20013748 	.word	0x20013748
 8006d5c:	20013778 	.word	0x20013778
 8006d60:	20013988 	.word	0x20013988

08006d64 <_GLOBAL__sub_I_line_sensor>:
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f7ff ffa1 	bl	8006cb4 <_Z41__static_initialization_and_destruction_0ii>
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006d7a:	e003      	b.n	8006d84 <LoopCopyDataInit>

08006d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006d82:	3104      	adds	r1, #4

08006d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006d84:	480b      	ldr	r0, [pc, #44]	; (8006db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006d8c:	d3f6      	bcc.n	8006d7c <CopyDataInit>
  ldr  r2, =_sbss
 8006d8e:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006d90:	e002      	b.n	8006d98 <LoopFillZerobss>

08006d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006d94:	f842 3b04 	str.w	r3, [r2], #4

08006d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006d9c:	d3f9      	bcc.n	8006d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006d9e:	f7fe fd67 	bl	8005870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006da2:	f00b fded 	bl	8012980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006da6:	f7fd f82b 	bl	8003e00 <main>
  bx  lr    
 8006daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006dac:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006db0:	080181e0 	.word	0x080181e0
  ldr  r0, =_sdata
 8006db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006db8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006dbc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006dc0:	2002faf8 	.word	0x2002faf8

08006dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006dc4:	e7fe      	b.n	8006dc4 <ADC_IRQHandler>
	...

08006dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_Init+0x40>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <HAL_Init+0x40>)
 8006dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <HAL_Init+0x40>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <HAL_Init+0x40>)
 8006dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <HAL_Init+0x40>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a07      	ldr	r2, [pc, #28]	; (8006e08 <HAL_Init+0x40>)
 8006dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006df0:	2003      	movs	r0, #3
 8006df2:	f000 fd51 	bl	8007898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006df6:	2000      	movs	r0, #0
 8006df8:	f000 f808 	bl	8006e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dfc:	f7fd ff26 	bl	8004c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	40023c00 	.word	0x40023c00

08006e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <HAL_InitTick+0x54>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <HAL_InitTick+0x58>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fd69 	bl	8007902 <HAL_SYSTICK_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e00e      	b.n	8006e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b0f      	cmp	r3, #15
 8006e3e:	d80a      	bhi.n	8006e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e40:	2200      	movs	r2, #0
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	f000 fd31 	bl	80078ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e4c:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <HAL_InitTick+0x5c>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000000 	.word	0x20000000
 8006e64:	20000008 	.word	0x20000008
 8006e68:	20000004 	.word	0x20000004

08006e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <HAL_IncTick+0x20>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <HAL_IncTick+0x24>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <HAL_IncTick+0x24>)
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000008 	.word	0x20000008
 8006e90:	2002da80 	.word	0x2002da80

08006e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  return uwTick;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <HAL_GetTick+0x14>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	2002da80 	.word	0x2002da80

08006eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006eb4:	f7ff ffee 	bl	8006e94 <HAL_GetTick>
 8006eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d005      	beq.n	8006ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ec6:	4b09      	ldr	r3, [pc, #36]	; (8006eec <HAL_Delay+0x40>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ed2:	bf00      	nop
 8006ed4:	f7ff ffde 	bl	8006e94 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d8f7      	bhi.n	8006ed4 <HAL_Delay+0x28>
  {
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000008 	.word	0x20000008

08006ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e033      	b.n	8006f6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fd fec4 	bl	8004c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d118      	bne.n	8006f60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f36:	f023 0302 	bic.w	r3, r3, #2
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa5a 	bl	80073fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8006f5e:	e001      	b.n	8006f64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_ADC_Start_DMA+0x1e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0cc      	b.n	8007130 <HAL_ADC_Start_DMA+0x1b8>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d018      	beq.n	8006fde <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006fbc:	4b5e      	ldr	r3, [pc, #376]	; (8007138 <HAL_ADC_Start_DMA+0x1c0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a5e      	ldr	r2, [pc, #376]	; (800713c <HAL_ADC_Start_DMA+0x1c4>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	0c9a      	lsrs	r2, r3, #18
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006fd0:	e002      	b.n	8006fd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f9      	bne.n	8006fd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	f040 80a0 	bne.w	800712e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007018:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702c:	d106      	bne.n	800703c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f023 0206 	bic.w	r2, r3, #6
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
 800703a:	e002      	b.n	8007042 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800704a:	4b3d      	ldr	r3, [pc, #244]	; (8007140 <HAL_ADC_Start_DMA+0x1c8>)
 800704c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	4a3c      	ldr	r2, [pc, #240]	; (8007144 <HAL_ADC_Start_DMA+0x1cc>)
 8007054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	4a3b      	ldr	r2, [pc, #236]	; (8007148 <HAL_ADC_Start_DMA+0x1d0>)
 800705c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	4a3a      	ldr	r2, [pc, #232]	; (800714c <HAL_ADC_Start_DMA+0x1d4>)
 8007064:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800706e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800707e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800708e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	334c      	adds	r3, #76	; 0x4c
 800709a:	4619      	mov	r1, r3
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f000 fcea 	bl	8007a78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d12a      	bne.n	8007106 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a26      	ldr	r2, [pc, #152]	; (8007150 <HAL_ADC_Start_DMA+0x1d8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d015      	beq.n	80070e6 <HAL_ADC_Start_DMA+0x16e>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a25      	ldr	r2, [pc, #148]	; (8007154 <HAL_ADC_Start_DMA+0x1dc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d105      	bne.n	80070d0 <HAL_ADC_Start_DMA+0x158>
 80070c4:	4b1e      	ldr	r3, [pc, #120]	; (8007140 <HAL_ADC_Start_DMA+0x1c8>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a20      	ldr	r2, [pc, #128]	; (8007158 <HAL_ADC_Start_DMA+0x1e0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d129      	bne.n	800712e <HAL_ADC_Start_DMA+0x1b6>
 80070da:	4b19      	ldr	r3, [pc, #100]	; (8007140 <HAL_ADC_Start_DMA+0x1c8>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2b0f      	cmp	r3, #15
 80070e4:	d823      	bhi.n	800712e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11c      	bne.n	800712e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	e013      	b.n	800712e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a11      	ldr	r2, [pc, #68]	; (8007150 <HAL_ADC_Start_DMA+0x1d8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10e      	bne.n	800712e <HAL_ADC_Start_DMA+0x1b6>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800712c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000000 	.word	0x20000000
 800713c:	431bde83 	.word	0x431bde83
 8007140:	40012300 	.word	0x40012300
 8007144:	080075f5 	.word	0x080075f5
 8007148:	080076af 	.word	0x080076af
 800714c:	080076cb 	.word	0x080076cb
 8007150:	40012000 	.word	0x40012000
 8007154:	40012100 	.word	0x40012100
 8007158:	40012200 	.word	0x40012200

0800715c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x1c>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e113      	b.n	80073dc <HAL_ADC_ConfigChannel+0x244>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b09      	cmp	r3, #9
 80071c2:	d925      	bls.n	8007210 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68d9      	ldr	r1, [r3, #12]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	4613      	mov	r3, r2
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	3b1e      	subs	r3, #30
 80071da:	2207      	movs	r2, #7
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	43da      	mvns	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	400a      	ands	r2, r1
 80071e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68d9      	ldr	r1, [r3, #12]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4618      	mov	r0, r3
 80071fc:	4603      	mov	r3, r0
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	4403      	add	r3, r0
 8007202:	3b1e      	subs	r3, #30
 8007204:	409a      	lsls	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	e022      	b.n	8007256 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6919      	ldr	r1, [r3, #16]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	4613      	mov	r3, r2
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	4413      	add	r3, r2
 8007224:	2207      	movs	r2, #7
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43da      	mvns	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	400a      	ands	r2, r1
 8007232:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6919      	ldr	r1, [r3, #16]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	4618      	mov	r0, r3
 8007246:	4603      	mov	r3, r0
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4403      	add	r3, r0
 800724c:	409a      	lsls	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b06      	cmp	r3, #6
 800725c:	d824      	bhi.n	80072a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	3b05      	subs	r3, #5
 8007270:	221f      	movs	r2, #31
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43da      	mvns	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	400a      	ands	r2, r1
 800727e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	4618      	mov	r0, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	3b05      	subs	r3, #5
 800729a:	fa00 f203 	lsl.w	r2, r0, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	635a      	str	r2, [r3, #52]	; 0x34
 80072a6:	e04c      	b.n	8007342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2b0c      	cmp	r3, #12
 80072ae:	d824      	bhi.n	80072fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	3b23      	subs	r3, #35	; 0x23
 80072c2:	221f      	movs	r2, #31
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	43da      	mvns	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	400a      	ands	r2, r1
 80072d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4618      	mov	r0, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	3b23      	subs	r3, #35	; 0x23
 80072ec:	fa00 f203 	lsl.w	r2, r0, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
 80072f8:	e023      	b.n	8007342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	3b41      	subs	r3, #65	; 0x41
 800730c:	221f      	movs	r2, #31
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	43da      	mvns	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	400a      	ands	r2, r1
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	4618      	mov	r0, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	3b41      	subs	r3, #65	; 0x41
 8007336:	fa00 f203 	lsl.w	r2, r0, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <HAL_ADC_ConfigChannel+0x250>)
 8007344:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a28      	ldr	r2, [pc, #160]	; (80073ec <HAL_ADC_ConfigChannel+0x254>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10f      	bne.n	8007370 <HAL_ADC_ConfigChannel+0x1d8>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b12      	cmp	r3, #18
 8007356:	d10b      	bne.n	8007370 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <HAL_ADC_ConfigChannel+0x254>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d12b      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x23a>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <HAL_ADC_ConfigChannel+0x258>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <HAL_ADC_ConfigChannel+0x1f4>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b11      	cmp	r3, #17
 800738a:	d122      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <HAL_ADC_ConfigChannel+0x258>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d111      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80073ae:	4b11      	ldr	r3, [pc, #68]	; (80073f4 <HAL_ADC_ConfigChannel+0x25c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <HAL_ADC_ConfigChannel+0x260>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	0c9a      	lsrs	r2, r3, #18
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073c4:	e002      	b.n	80073cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f9      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40012300 	.word	0x40012300
 80073ec:	40012000 	.word	0x40012000
 80073f0:	10000012 	.word	0x10000012
 80073f4:	20000000 	.word	0x20000000
 80073f8:	431bde83 	.word	0x431bde83

080073fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007404:	4b79      	ldr	r3, [pc, #484]	; (80075ec <ADC_Init+0x1f0>)
 8007406:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	021a      	lsls	r2, r3, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6859      	ldr	r1, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6899      	ldr	r1, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	4a58      	ldr	r2, [pc, #352]	; (80075f0 <ADC_Init+0x1f4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d022      	beq.n	80074da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6899      	ldr	r1, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6899      	ldr	r1, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	e00f      	b.n	80074fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0202 	bic.w	r2, r2, #2
 8007508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6899      	ldr	r1, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7e1b      	ldrb	r3, [r3, #24]
 8007514:	005a      	lsls	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007536:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007546:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	3b01      	subs	r3, #1
 8007554:	035a      	lsls	r2, r3, #13
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	e007      	b.n	8007570 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800756e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800757e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	3b01      	subs	r3, #1
 800758c:	051a      	lsls	r2, r3, #20
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6899      	ldr	r1, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b2:	025a      	lsls	r2, r3, #9
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6899      	ldr	r1, [r3, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	029a      	lsls	r2, r3, #10
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	609a      	str	r2, [r3, #8]
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	40012300 	.word	0x40012300
 80075f0:	0f000001 	.word	0x0f000001

080075f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800760a:	2b00      	cmp	r3, #0
 800760c:	d13c      	bne.n	8007688 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d12b      	bne.n	8007680 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800762c:	2b00      	cmp	r3, #0
 800762e:	d127      	bne.n	8007680 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007648:	2b00      	cmp	r3, #0
 800764a:	d119      	bne.n	8007680 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0220 	bic.w	r2, r2, #32
 800765a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7ff fd6b 	bl	800715c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007686:	e00e      	b.n	80076a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fd75 	bl	8007184 <HAL_ADC_ErrorCallback>
}
 800769a:	e004      	b.n	80076a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fd57 	bl	8007170 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2240      	movs	r2, #64	; 0x40
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fd4a 	bl	8007184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <__NVIC_SetPriorityGrouping>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <__NVIC_SetPriorityGrouping+0x44>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007714:	4013      	ands	r3, r2
 8007716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800772a:	4a04      	ldr	r2, [pc, #16]	; (800773c <__NVIC_SetPriorityGrouping+0x44>)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	60d3      	str	r3, [r2, #12]
}
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <__NVIC_GetPriorityGrouping>:
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <__NVIC_GetPriorityGrouping+0x18>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	f003 0307 	and.w	r3, r3, #7
}
 800774e:	4618      	mov	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	e000ed00 	.word	0xe000ed00

0800775c <__NVIC_EnableIRQ>:
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776a:	2b00      	cmp	r3, #0
 800776c:	db0b      	blt.n	8007786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	f003 021f 	and.w	r2, r3, #31
 8007774:	4907      	ldr	r1, [pc, #28]	; (8007794 <__NVIC_EnableIRQ+0x38>)
 8007776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	2001      	movs	r0, #1
 800777e:	fa00 f202 	lsl.w	r2, r0, r2
 8007782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	e000e100 	.word	0xe000e100

08007798 <__NVIC_SetPriority>:
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	db0a      	blt.n	80077c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	490c      	ldr	r1, [pc, #48]	; (80077e4 <__NVIC_SetPriority+0x4c>)
 80077b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b6:	0112      	lsls	r2, r2, #4
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	440b      	add	r3, r1
 80077bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077c0:	e00a      	b.n	80077d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	4908      	ldr	r1, [pc, #32]	; (80077e8 <__NVIC_SetPriority+0x50>)
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	3b04      	subs	r3, #4
 80077d0:	0112      	lsls	r2, r2, #4
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	440b      	add	r3, r1
 80077d6:	761a      	strb	r2, [r3, #24]
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	e000e100 	.word	0xe000e100
 80077e8:	e000ed00 	.word	0xe000ed00

080077ec <NVIC_EncodePriority>:
{
 80077ec:	b480      	push	{r7}
 80077ee:	b089      	sub	sp, #36	; 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f1c3 0307 	rsb	r3, r3, #7
 8007806:	2b04      	cmp	r3, #4
 8007808:	bf28      	it	cs
 800780a:	2304      	movcs	r3, #4
 800780c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3304      	adds	r3, #4
 8007812:	2b06      	cmp	r3, #6
 8007814:	d902      	bls.n	800781c <NVIC_EncodePriority+0x30>
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	3b03      	subs	r3, #3
 800781a:	e000      	b.n	800781e <NVIC_EncodePriority+0x32>
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007820:	f04f 32ff 	mov.w	r2, #4294967295
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	43da      	mvns	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	401a      	ands	r2, r3
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007834:	f04f 31ff 	mov.w	r1, #4294967295
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	fa01 f303 	lsl.w	r3, r1, r3
 800783e:	43d9      	mvns	r1, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007844:	4313      	orrs	r3, r2
}
 8007846:	4618      	mov	r0, r3
 8007848:	3724      	adds	r7, #36	; 0x24
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <SysTick_Config>:
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3b01      	subs	r3, #1
 8007860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007864:	d301      	bcc.n	800786a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007866:	2301      	movs	r3, #1
 8007868:	e00f      	b.n	800788a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800786a:	4a0a      	ldr	r2, [pc, #40]	; (8007894 <SysTick_Config+0x40>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3b01      	subs	r3, #1
 8007870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007872:	210f      	movs	r1, #15
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	f7ff ff8e 	bl	8007798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <SysTick_Config+0x40>)
 800787e:	2200      	movs	r2, #0
 8007880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007882:	4b04      	ldr	r3, [pc, #16]	; (8007894 <SysTick_Config+0x40>)
 8007884:	2207      	movs	r2, #7
 8007886:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	e000e010 	.word	0xe000e010

08007898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ff29 	bl	80076f8 <__NVIC_SetPriorityGrouping>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	4603      	mov	r3, r0
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80078c0:	f7ff ff3e 	bl	8007740 <__NVIC_GetPriorityGrouping>
 80078c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	6978      	ldr	r0, [r7, #20]
 80078cc:	f7ff ff8e 	bl	80077ec <NVIC_EncodePriority>
 80078d0:	4602      	mov	r2, r0
 80078d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d6:	4611      	mov	r1, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff ff5d 	bl	8007798 <__NVIC_SetPriority>
}
 80078de:	bf00      	nop
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	4603      	mov	r3, r0
 80078ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff ff31 	bl	800775c <__NVIC_EnableIRQ>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ffa2 	bl	8007854 <SysTick_Config>
 8007910:	4603      	mov	r3, r0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007928:	f7ff fab4 	bl	8006e94 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e099      	b.n	8007a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007958:	e00f      	b.n	800797a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800795a:	f7ff fa9b 	bl	8006e94 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b05      	cmp	r3, #5
 8007966:	d908      	bls.n	800797a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2203      	movs	r2, #3
 8007972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e078      	b.n	8007a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e8      	bne.n	800795a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4b38      	ldr	r3, [pc, #224]	; (8007a74 <HAL_DMA_Init+0x158>)
 8007994:	4013      	ands	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d107      	bne.n	80079e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079dc:	4313      	orrs	r3, r2
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d117      	bne.n	8007a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa9d 	bl	8007f60 <DMA_CheckFifoParam>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2240      	movs	r2, #64	; 0x40
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e016      	b.n	8007a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa54 	bl	8007ef4 <DMA_CalcBaseAndBitshift>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a54:	223f      	movs	r2, #63	; 0x3f
 8007a56:	409a      	lsls	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	f010803f 	.word	0xf010803f

08007a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_DMA_Start_IT+0x26>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e040      	b.n	8007b20 <HAL_DMA_Start_IT+0xa8>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d12f      	bne.n	8007b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 f9e6 	bl	8007e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad0:	223f      	movs	r2, #63	; 0x3f
 8007ad2:	409a      	lsls	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0216 	orr.w	r2, r2, #22
 8007ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0201 	orr.w	r2, r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e005      	b.n	8007b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d004      	beq.n	8007b46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e00c      	b.n	8007b60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0201 	bic.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007b78:	4b92      	ldr	r3, [pc, #584]	; (8007dc4 <HAL_DMA_IRQHandler+0x258>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a92      	ldr	r2, [pc, #584]	; (8007dc8 <HAL_DMA_IRQHandler+0x25c>)
 8007b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b82:	0a9b      	lsrs	r3, r3, #10
 8007b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b96:	2208      	movs	r2, #8
 8007b98:	409a      	lsls	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01a      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0204 	bic.w	r2, r2, #4
 8007bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	409a      	lsls	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd0:	f043 0201 	orr.w	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bdc:	2201      	movs	r2, #1
 8007bde:	409a      	lsls	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d012      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	409a      	lsls	r2, r3
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c06:	f043 0202 	orr.w	r2, r3, #2
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c12:	2204      	movs	r2, #4
 8007c14:	409a      	lsls	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d012      	beq.n	8007c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c30:	2204      	movs	r2, #4
 8007c32:	409a      	lsls	r2, r3
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	f043 0204 	orr.w	r2, r3, #4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	2210      	movs	r2, #16
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d043      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d03c      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c66:	2210      	movs	r2, #16
 8007c68:	409a      	lsls	r2, r3
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d018      	beq.n	8007cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d108      	bne.n	8007c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d024      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
 8007c9a:	e01f      	b.n	8007cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01b      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	4798      	blx	r3
 8007cac:	e016      	b.n	8007cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d107      	bne.n	8007ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0208 	bic.w	r2, r2, #8
 8007cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	409a      	lsls	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 808e 	beq.w	8007e0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8086 	beq.w	8007e0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d02:	2220      	movs	r2, #32
 8007d04:	409a      	lsls	r2, r3
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d136      	bne.n	8007d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0216 	bic.w	r2, r2, #22
 8007d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	695a      	ldr	r2, [r3, #20]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d103      	bne.n	8007d46 <HAL_DMA_IRQHandler+0x1da>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0208 	bic.w	r2, r2, #8
 8007d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5a:	223f      	movs	r2, #63	; 0x3f
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d07d      	beq.n	8007e76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
        }
        return;
 8007d82:	e078      	b.n	8007e76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01c      	beq.n	8007dcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d030      	beq.n	8007e0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
 8007db0:	e02b      	b.n	8007e0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d027      	beq.n	8007e0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
 8007dc2:	e022      	b.n	8007e0a <HAL_DMA_IRQHandler+0x29e>
 8007dc4:	20000000 	.word	0x20000000
 8007dc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10f      	bne.n	8007dfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0210 	bic.w	r2, r2, #16
 8007de8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d032      	beq.n	8007e78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d022      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2205      	movs	r2, #5
 8007e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60bb      	str	r3, [r7, #8]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d307      	bcc.n	8007e52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1f2      	bne.n	8007e36 <HAL_DMA_IRQHandler+0x2ca>
 8007e50:	e000      	b.n	8007e54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007e52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	4798      	blx	r3
 8007e74:	e000      	b.n	8007e78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007e76:	bf00      	nop
    }
  }
}
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop

08007e80 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d108      	bne.n	8007ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007ed6:	e007      	b.n	8007ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	60da      	str	r2, [r3, #12]
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	3b10      	subs	r3, #16
 8007f04:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <DMA_CalcBaseAndBitshift+0x64>)
 8007f06:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007f0e:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <DMA_CalcBaseAndBitshift+0x68>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d909      	bls.n	8007f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	1d1a      	adds	r2, r3, #4
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	659a      	str	r2, [r3, #88]	; 0x58
 8007f34:	e007      	b.n	8007f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f3e:	f023 0303 	bic.w	r3, r3, #3
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	aaaaaaab 	.word	0xaaaaaaab
 8007f5c:	08017c1c 	.word	0x08017c1c

08007f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d11f      	bne.n	8007fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d855      	bhi.n	800802c <DMA_CheckFifoParam+0xcc>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <DMA_CheckFifoParam+0x28>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007fab 	.word	0x08007fab
 8007f90:	08007f99 	.word	0x08007f99
 8007f94:	0800802d 	.word	0x0800802d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d045      	beq.n	8008030 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fa8:	e042      	b.n	8008030 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fb2:	d13f      	bne.n	8008034 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fb8:	e03c      	b.n	8008034 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc2:	d121      	bne.n	8008008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d836      	bhi.n	8008038 <DMA_CheckFifoParam+0xd8>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <DMA_CheckFifoParam+0x70>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08007fe7 	.word	0x08007fe7
 8007fd8:	08007fe1 	.word	0x08007fe1
 8007fdc:	08007ff9 	.word	0x08007ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe4:	e02f      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d024      	beq.n	800803c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ff6:	e021      	b.n	800803c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008000:	d11e      	bne.n	8008040 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008006:	e01b      	b.n	8008040 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d902      	bls.n	8008014 <DMA_CheckFifoParam+0xb4>
 800800e:	2b03      	cmp	r3, #3
 8008010:	d003      	beq.n	800801a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008012:	e018      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e015      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	73fb      	strb	r3, [r7, #15]
      break;
 800802a:	e00b      	b.n	8008044 <DMA_CheckFifoParam+0xe4>
      break;
 800802c:	bf00      	nop
 800802e:	e00a      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      break;
 8008030:	bf00      	nop
 8008032:	e008      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      break;
 8008034:	bf00      	nop
 8008036:	e006      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      break;
 8008038:	bf00      	nop
 800803a:	e004      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      break;
 800803c:	bf00      	nop
 800803e:	e002      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      break;   
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <DMA_CheckFifoParam+0xe6>
      break;
 8008044:	bf00      	nop
    }
  } 
  
  return status; 
 8008046:	7bfb      	ldrb	r3, [r7, #15]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	; 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008062:	2300      	movs	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800806a:	2300      	movs	r3, #0
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	e177      	b.n	8008360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008070:	2201      	movs	r2, #1
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4013      	ands	r3, r2
 8008082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	429a      	cmp	r2, r3
 800808a:	f040 8166 	bne.w	800835a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d00b      	beq.n	80080ae <HAL_GPIO_Init+0x5a>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d007      	beq.n	80080ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080a2:	2b11      	cmp	r3, #17
 80080a4:	d003      	beq.n	80080ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b12      	cmp	r3, #18
 80080ac:	d130      	bne.n	8008110 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	2203      	movs	r2, #3
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	43db      	mvns	r3, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4013      	ands	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80080e4:	2201      	movs	r2, #1
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	43db      	mvns	r3, r3
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	4013      	ands	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	091b      	lsrs	r3, r3, #4
 80080fa:	f003 0201 	and.w	r2, r3, #1
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	4313      	orrs	r3, r2
 8008108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	2203      	movs	r2, #3
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4013      	ands	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4313      	orrs	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d003      	beq.n	8008150 <HAL_GPIO_Init+0xfc>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b12      	cmp	r3, #18
 800814e:	d123      	bne.n	8008198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	08da      	lsrs	r2, r3, #3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3208      	adds	r2, #8
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	220f      	movs	r2, #15
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	43db      	mvns	r3, r3
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	4013      	ands	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	4313      	orrs	r3, r2
 8008188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	08da      	lsrs	r2, r3, #3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3208      	adds	r2, #8
 8008192:	69b9      	ldr	r1, [r7, #24]
 8008194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	2203      	movs	r2, #3
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	43db      	mvns	r3, r3
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	4013      	ands	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f003 0203 	and.w	r2, r3, #3
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80c0 	beq.w	800835a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	4b65      	ldr	r3, [pc, #404]	; (8008374 <HAL_GPIO_Init+0x320>)
 80081e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e2:	4a64      	ldr	r2, [pc, #400]	; (8008374 <HAL_GPIO_Init+0x320>)
 80081e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081e8:	6453      	str	r3, [r2, #68]	; 0x44
 80081ea:	4b62      	ldr	r3, [pc, #392]	; (8008374 <HAL_GPIO_Init+0x320>)
 80081ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081f6:	4a60      	ldr	r2, [pc, #384]	; (8008378 <HAL_GPIO_Init+0x324>)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	089b      	lsrs	r3, r3, #2
 80081fc:	3302      	adds	r3, #2
 80081fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	220f      	movs	r2, #15
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a57      	ldr	r2, [pc, #348]	; (800837c <HAL_GPIO_Init+0x328>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d037      	beq.n	8008292 <HAL_GPIO_Init+0x23e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a56      	ldr	r2, [pc, #344]	; (8008380 <HAL_GPIO_Init+0x32c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d031      	beq.n	800828e <HAL_GPIO_Init+0x23a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a55      	ldr	r2, [pc, #340]	; (8008384 <HAL_GPIO_Init+0x330>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d02b      	beq.n	800828a <HAL_GPIO_Init+0x236>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a54      	ldr	r2, [pc, #336]	; (8008388 <HAL_GPIO_Init+0x334>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d025      	beq.n	8008286 <HAL_GPIO_Init+0x232>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a53      	ldr	r2, [pc, #332]	; (800838c <HAL_GPIO_Init+0x338>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01f      	beq.n	8008282 <HAL_GPIO_Init+0x22e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a52      	ldr	r2, [pc, #328]	; (8008390 <HAL_GPIO_Init+0x33c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d019      	beq.n	800827e <HAL_GPIO_Init+0x22a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a51      	ldr	r2, [pc, #324]	; (8008394 <HAL_GPIO_Init+0x340>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <HAL_GPIO_Init+0x226>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a50      	ldr	r2, [pc, #320]	; (8008398 <HAL_GPIO_Init+0x344>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00d      	beq.n	8008276 <HAL_GPIO_Init+0x222>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a4f      	ldr	r2, [pc, #316]	; (800839c <HAL_GPIO_Init+0x348>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d007      	beq.n	8008272 <HAL_GPIO_Init+0x21e>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a4e      	ldr	r2, [pc, #312]	; (80083a0 <HAL_GPIO_Init+0x34c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d101      	bne.n	800826e <HAL_GPIO_Init+0x21a>
 800826a:	2309      	movs	r3, #9
 800826c:	e012      	b.n	8008294 <HAL_GPIO_Init+0x240>
 800826e:	230a      	movs	r3, #10
 8008270:	e010      	b.n	8008294 <HAL_GPIO_Init+0x240>
 8008272:	2308      	movs	r3, #8
 8008274:	e00e      	b.n	8008294 <HAL_GPIO_Init+0x240>
 8008276:	2307      	movs	r3, #7
 8008278:	e00c      	b.n	8008294 <HAL_GPIO_Init+0x240>
 800827a:	2306      	movs	r3, #6
 800827c:	e00a      	b.n	8008294 <HAL_GPIO_Init+0x240>
 800827e:	2305      	movs	r3, #5
 8008280:	e008      	b.n	8008294 <HAL_GPIO_Init+0x240>
 8008282:	2304      	movs	r3, #4
 8008284:	e006      	b.n	8008294 <HAL_GPIO_Init+0x240>
 8008286:	2303      	movs	r3, #3
 8008288:	e004      	b.n	8008294 <HAL_GPIO_Init+0x240>
 800828a:	2302      	movs	r3, #2
 800828c:	e002      	b.n	8008294 <HAL_GPIO_Init+0x240>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <HAL_GPIO_Init+0x240>
 8008292:	2300      	movs	r3, #0
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	f002 0203 	and.w	r2, r2, #3
 800829a:	0092      	lsls	r2, r2, #2
 800829c:	4093      	lsls	r3, r2
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082a4:	4934      	ldr	r1, [pc, #208]	; (8008378 <HAL_GPIO_Init+0x324>)
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	089b      	lsrs	r3, r3, #2
 80082aa:	3302      	adds	r3, #2
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082b2:	4b3c      	ldr	r3, [pc, #240]	; (80083a4 <HAL_GPIO_Init+0x350>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	43db      	mvns	r3, r3
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	4013      	ands	r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082d6:	4a33      	ldr	r2, [pc, #204]	; (80083a4 <HAL_GPIO_Init+0x350>)
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80082dc:	4b31      	ldr	r3, [pc, #196]	; (80083a4 <HAL_GPIO_Init+0x350>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	43db      	mvns	r3, r3
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	4013      	ands	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008300:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <HAL_GPIO_Init+0x350>)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008306:	4b27      	ldr	r3, [pc, #156]	; (80083a4 <HAL_GPIO_Init+0x350>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	43db      	mvns	r3, r3
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	4013      	ands	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800832a:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <HAL_GPIO_Init+0x350>)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <HAL_GPIO_Init+0x350>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	43db      	mvns	r3, r3
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	4013      	ands	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008354:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <HAL_GPIO_Init+0x350>)
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	3301      	adds	r3, #1
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2b0f      	cmp	r3, #15
 8008364:	f67f ae84 	bls.w	8008070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008368:	bf00      	nop
 800836a:	3724      	adds	r7, #36	; 0x24
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40023800 	.word	0x40023800
 8008378:	40013800 	.word	0x40013800
 800837c:	40020000 	.word	0x40020000
 8008380:	40020400 	.word	0x40020400
 8008384:	40020800 	.word	0x40020800
 8008388:	40020c00 	.word	0x40020c00
 800838c:	40021000 	.word	0x40021000
 8008390:	40021400 	.word	0x40021400
 8008394:	40021800 	.word	0x40021800
 8008398:	40021c00 	.word	0x40021c00
 800839c:	40022000 	.word	0x40022000
 80083a0:	40022400 	.word	0x40022400
 80083a4:	40013c00 	.word	0x40013c00

080083a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691a      	ldr	r2, [r3, #16]
 80083b8:	887b      	ldrh	r3, [r7, #2]
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
 80083c4:	e001      	b.n	80083ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	807b      	strh	r3, [r7, #2]
 80083e4:	4613      	mov	r3, r2
 80083e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083e8:	787b      	ldrb	r3, [r7, #1]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083ee:	887a      	ldrh	r2, [r7, #2]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80083f4:	e003      	b.n	80083fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	041a      	lsls	r2, r3, #16
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	619a      	str	r2, [r3, #24]
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008416:	4b08      	ldr	r3, [pc, #32]	; (8008438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008418:	695a      	ldr	r2, [r3, #20]
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	4013      	ands	r3, r2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d006      	beq.n	8008430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	4618      	mov	r0, r3
 800842c:	f7fb fc6b 	bl	8003d06 <HAL_GPIO_EXTI_Callback>
  }
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40013c00 	.word	0x40013c00

0800843c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e11f      	b.n	800868e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fc fccc 	bl	8004e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2224      	movs	r2, #36	; 0x24
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800848e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800849e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80084a0:	f001 f96e 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 80084a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4a7b      	ldr	r2, [pc, #492]	; (8008698 <HAL_I2C_Init+0x25c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d807      	bhi.n	80084c0 <HAL_I2C_Init+0x84>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4a7a      	ldr	r2, [pc, #488]	; (800869c <HAL_I2C_Init+0x260>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bf94      	ite	ls
 80084b8:	2301      	movls	r3, #1
 80084ba:	2300      	movhi	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	e006      	b.n	80084ce <HAL_I2C_Init+0x92>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a77      	ldr	r2, [pc, #476]	; (80086a0 <HAL_I2C_Init+0x264>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	bf94      	ite	ls
 80084c8:	2301      	movls	r3, #1
 80084ca:	2300      	movhi	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e0db      	b.n	800868e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4a72      	ldr	r2, [pc, #456]	; (80086a4 <HAL_I2C_Init+0x268>)
 80084da:	fba2 2303 	umull	r2, r3, r2, r3
 80084de:	0c9b      	lsrs	r3, r3, #18
 80084e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	4a64      	ldr	r2, [pc, #400]	; (8008698 <HAL_I2C_Init+0x25c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d802      	bhi.n	8008510 <HAL_I2C_Init+0xd4>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	3301      	adds	r3, #1
 800850e:	e009      	b.n	8008524 <HAL_I2C_Init+0xe8>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	4a63      	ldr	r2, [pc, #396]	; (80086a8 <HAL_I2C_Init+0x26c>)
 800851c:	fba2 2303 	umull	r2, r3, r2, r3
 8008520:	099b      	lsrs	r3, r3, #6
 8008522:	3301      	adds	r3, #1
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	430b      	orrs	r3, r1
 800852a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	4956      	ldr	r1, [pc, #344]	; (8008698 <HAL_I2C_Init+0x25c>)
 8008540:	428b      	cmp	r3, r1
 8008542:	d80d      	bhi.n	8008560 <HAL_I2C_Init+0x124>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	1e59      	subs	r1, r3, #1
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008552:	3301      	adds	r3, #1
 8008554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008558:	2b04      	cmp	r3, #4
 800855a:	bf38      	it	cc
 800855c:	2304      	movcc	r3, #4
 800855e:	e04f      	b.n	8008600 <HAL_I2C_Init+0x1c4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d111      	bne.n	800858c <HAL_I2C_Init+0x150>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1e58      	subs	r0, r3, #1
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6859      	ldr	r1, [r3, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	440b      	add	r3, r1
 8008576:	fbb0 f3f3 	udiv	r3, r0, r3
 800857a:	3301      	adds	r3, #1
 800857c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008580:	2b00      	cmp	r3, #0
 8008582:	bf0c      	ite	eq
 8008584:	2301      	moveq	r3, #1
 8008586:	2300      	movne	r3, #0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	e012      	b.n	80085b2 <HAL_I2C_Init+0x176>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	1e58      	subs	r0, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6859      	ldr	r1, [r3, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	0099      	lsls	r1, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	fbb0 f3f3 	udiv	r3, r0, r3
 80085a2:	3301      	adds	r3, #1
 80085a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_I2C_Init+0x17e>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e022      	b.n	8008600 <HAL_I2C_Init+0x1c4>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10e      	bne.n	80085e0 <HAL_I2C_Init+0x1a4>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1e58      	subs	r0, r3, #1
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6859      	ldr	r1, [r3, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	440b      	add	r3, r1
 80085d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80085d4:	3301      	adds	r3, #1
 80085d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085de:	e00f      	b.n	8008600 <HAL_I2C_Init+0x1c4>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	1e58      	subs	r0, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6859      	ldr	r1, [r3, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	0099      	lsls	r1, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80085f6:	3301      	adds	r3, #1
 80085f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	6809      	ldr	r1, [r1, #0]
 8008604:	4313      	orrs	r3, r2
 8008606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69da      	ldr	r2, [r3, #28]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800862e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6911      	ldr	r1, [r2, #16]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68d2      	ldr	r2, [r2, #12]
 800863a:	4311      	orrs	r1, r2
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	430b      	orrs	r3, r1
 8008642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	431a      	orrs	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	000186a0 	.word	0x000186a0
 800869c:	001e847f 	.word	0x001e847f
 80086a0:	003d08ff 	.word	0x003d08ff
 80086a4:	431bde83 	.word	0x431bde83
 80086a8:	10624dd3 	.word	0x10624dd3

080086ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	461a      	mov	r2, r3
 80086b8:	460b      	mov	r3, r1
 80086ba:	817b      	strh	r3, [r7, #10]
 80086bc:	4613      	mov	r3, r2
 80086be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086c0:	f7fe fbe8 	bl	8006e94 <HAL_GetTick>
 80086c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	f040 80e0 	bne.w	8008894 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2319      	movs	r3, #25
 80086da:	2201      	movs	r2, #1
 80086dc:	4970      	ldr	r1, [pc, #448]	; (80088a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fc58 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80086ea:	2302      	movs	r3, #2
 80086ec:	e0d3      	b.n	8008896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_I2C_Master_Transmit+0x50>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e0cc      	b.n	8008896 <HAL_I2C_Master_Transmit+0x1ea>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d007      	beq.n	8008722 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0201 	orr.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2221      	movs	r2, #33	; 0x21
 8008736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2210      	movs	r2, #16
 800873e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	893a      	ldrh	r2, [r7, #8]
 8008752:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4a50      	ldr	r2, [pc, #320]	; (80088a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008764:	8979      	ldrh	r1, [r7, #10]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a3a      	ldr	r2, [r7, #32]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fac2 	bl	8008cf4 <I2C_MasterRequestWrite>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e08d      	b.n	8008896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008790:	e066      	b.n	8008860 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	6a39      	ldr	r1, [r7, #32]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fcd2 	bl	8009140 <I2C_WaitOnTXEFlagUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00d      	beq.n	80087be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d107      	bne.n	80087ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e06b      	b.n	8008896 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d11b      	bne.n	8008834 <HAL_I2C_Master_Transmit+0x188>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	6a39      	ldr	r1, [r7, #32]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fcc2 	bl	80091c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00d      	beq.n	8008860 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	2b04      	cmp	r3, #4
 800884a:	d107      	bne.n	800885c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800885a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e01a      	b.n	8008896 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	d194      	bne.n	8008792 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	e000      	b.n	8008896 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008894:	2302      	movs	r3, #2
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	00100002 	.word	0x00100002
 80088a4:	ffff0000 	.word	0xffff0000

080088a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	; 0x30
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	461a      	mov	r2, r3
 80088b4:	460b      	mov	r3, r1
 80088b6:	817b      	strh	r3, [r7, #10]
 80088b8:	4613      	mov	r3, r2
 80088ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088bc:	f7fe faea 	bl	8006e94 <HAL_GetTick>
 80088c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	f040 820b 	bne.w	8008ce6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	2319      	movs	r3, #25
 80088d6:	2201      	movs	r2, #1
 80088d8:	497c      	ldr	r1, [pc, #496]	; (8008acc <HAL_I2C_Master_Receive+0x224>)
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 fb5a 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80088e6:	2302      	movs	r3, #2
 80088e8:	e1fe      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_I2C_Master_Receive+0x50>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e1f7      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b01      	cmp	r3, #1
 800890c:	d007      	beq.n	800891e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0201 	orr.w	r2, r2, #1
 800891c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800892c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2222      	movs	r2, #34	; 0x22
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2210      	movs	r2, #16
 800893a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	893a      	ldrh	r2, [r7, #8]
 800894e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4a5c      	ldr	r2, [pc, #368]	; (8008ad0 <HAL_I2C_Master_Receive+0x228>)
 800895e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008960:	8979      	ldrh	r1, [r7, #10]
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 fa46 	bl	8008df8 <I2C_MasterRequestRead>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e1b8      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d113      	bne.n	80089a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800897e:	2300      	movs	r3, #0
 8008980:	623b      	str	r3, [r7, #32]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	623b      	str	r3, [r7, #32]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	e18c      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d11b      	bne.n	80089e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	61fb      	str	r3, [r7, #28]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e16c      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d11b      	bne.n	8008a26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	e14c      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008a4c:	e138      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	f200 80f1 	bhi.w	8008c3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d123      	bne.n	8008aa8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fbed 	bl	8009244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e139      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008aa6:	e10b      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d14e      	bne.n	8008b4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4906      	ldr	r1, [pc, #24]	; (8008ad4 <HAL_I2C_Master_Receive+0x22c>)
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 fa6a 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e10e      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
 8008aca:	bf00      	nop
 8008acc:	00100002 	.word	0x00100002
 8008ad0:	ffff0000 	.word	0xffff0000
 8008ad4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691a      	ldr	r2, [r3, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	b2d2      	uxtb	r2, r2
 8008b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b4c:	e0b8      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	2200      	movs	r2, #0
 8008b56:	4966      	ldr	r1, [pc, #408]	; (8008cf0 <HAL_I2C_Master_Receive+0x448>)
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fa1b 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e0bf      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	494f      	ldr	r1, [pc, #316]	; (8008cf0 <HAL_I2C_Master_Receive+0x448>)
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f9ed 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e091      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c38:	e042      	b.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fb00 	bl	8009244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e04c      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	d118      	bne.n	8008cc0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	691a      	ldr	r2, [r3, #16]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f47f aec2 	bne.w	8008a4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e000      	b.n	8008ce8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008ce6:	2302      	movs	r3, #2
  }
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3728      	adds	r7, #40	; 0x28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	00010004 	.word	0x00010004

08008cf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	460b      	mov	r3, r1
 8008d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	d006      	beq.n	8008d1e <I2C_MasterRequestWrite+0x2a>
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d003      	beq.n	8008d1e <I2C_MasterRequestWrite+0x2a>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d1c:	d108      	bne.n	8008d30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e00b      	b.n	8008d48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	2b12      	cmp	r3, #18
 8008d36:	d107      	bne.n	8008d48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f91d 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6e:	d103      	bne.n	8008d78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e035      	b.n	8008de8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d84:	d108      	bne.n	8008d98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d86:	897b      	ldrh	r3, [r7, #10]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d94:	611a      	str	r2, [r3, #16]
 8008d96:	e01b      	b.n	8008dd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d98:	897b      	ldrh	r3, [r7, #10]
 8008d9a:	11db      	asrs	r3, r3, #7
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0306 	and.w	r3, r3, #6
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f063 030f 	orn	r3, r3, #15
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	490e      	ldr	r1, [pc, #56]	; (8008df0 <I2C_MasterRequestWrite+0xfc>)
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f943 	bl	8009042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e010      	b.n	8008de8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008dc6:	897b      	ldrh	r3, [r7, #10]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4907      	ldr	r1, [pc, #28]	; (8008df4 <I2C_MasterRequestWrite+0x100>)
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f933 	bl	8009042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	00010008 	.word	0x00010008
 8008df4:	00010002 	.word	0x00010002

08008df8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	460b      	mov	r3, r1
 8008e06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d006      	beq.n	8008e32 <I2C_MasterRequestRead+0x3a>
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d003      	beq.n	8008e32 <I2C_MasterRequestRead+0x3a>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e30:	d108      	bne.n	8008e44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e00b      	b.n	8008e5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	2b11      	cmp	r3, #17
 8008e4a:	d107      	bne.n	8008e5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 f893 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e82:	d103      	bne.n	8008e8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e079      	b.n	8008f84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e98:	d108      	bne.n	8008eac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008e9a:	897b      	ldrh	r3, [r7, #10]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	611a      	str	r2, [r3, #16]
 8008eaa:	e05f      	b.n	8008f6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008eac:	897b      	ldrh	r3, [r7, #10]
 8008eae:	11db      	asrs	r3, r3, #7
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 0306 	and.w	r3, r3, #6
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f063 030f 	orn	r3, r3, #15
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	4930      	ldr	r1, [pc, #192]	; (8008f8c <I2C_MasterRequestRead+0x194>)
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f8b9 	bl	8009042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e054      	b.n	8008f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008eda:	897b      	ldrh	r3, [r7, #10]
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	4929      	ldr	r1, [pc, #164]	; (8008f90 <I2C_MasterRequestRead+0x198>)
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f8a9 	bl	8009042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e044      	b.n	8008f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008efa:	2300      	movs	r3, #0
 8008efc:	613b      	str	r3, [r7, #16]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	613b      	str	r3, [r7, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f831 	bl	8008f94 <I2C_WaitOnFlagUntilTimeout>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00d      	beq.n	8008f54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f46:	d103      	bne.n	8008f50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e017      	b.n	8008f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008f54:	897b      	ldrh	r3, [r7, #10]
 8008f56:	11db      	asrs	r3, r3, #7
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f003 0306 	and.w	r3, r3, #6
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f063 030e 	orn	r3, r3, #14
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4907      	ldr	r1, [pc, #28]	; (8008f90 <I2C_MasterRequestRead+0x198>)
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f865 	bl	8009042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	00010008 	.word	0x00010008
 8008f90:	00010002 	.word	0x00010002

08008f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fa4:	e025      	b.n	8008ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fac:	d021      	beq.n	8008ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fae:	f7fd ff71 	bl	8006e94 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d302      	bcc.n	8008fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d116      	bne.n	8008ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	f043 0220 	orr.w	r2, r3, #32
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e023      	b.n	800903a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	0c1b      	lsrs	r3, r3, #16
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d10d      	bne.n	8009018 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	43da      	mvns	r2, r3
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4013      	ands	r3, r2
 8009008:	b29b      	uxth	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	bf0c      	ite	eq
 800900e:	2301      	moveq	r3, #1
 8009010:	2300      	movne	r3, #0
 8009012:	b2db      	uxtb	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	e00c      	b.n	8009032 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	43da      	mvns	r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4013      	ands	r3, r2
 8009024:	b29b      	uxth	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	bf0c      	ite	eq
 800902a:	2301      	moveq	r3, #1
 800902c:	2300      	movne	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	429a      	cmp	r2, r3
 8009036:	d0b6      	beq.n	8008fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009050:	e051      	b.n	80090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800905c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009060:	d123      	bne.n	80090aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009070:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800907a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2220      	movs	r2, #32
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	f043 0204 	orr.w	r2, r3, #4
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e046      	b.n	8009138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d021      	beq.n	80090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b2:	f7fd feef 	bl	8006e94 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d302      	bcc.n	80090c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d116      	bne.n	80090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	f043 0220 	orr.w	r2, r3, #32
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e020      	b.n	8009138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	0c1b      	lsrs	r3, r3, #16
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d10c      	bne.n	800911a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	43da      	mvns	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4013      	ands	r3, r2
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	bf14      	ite	ne
 8009112:	2301      	movne	r3, #1
 8009114:	2300      	moveq	r3, #0
 8009116:	b2db      	uxtb	r3, r3
 8009118:	e00b      	b.n	8009132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	43da      	mvns	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4013      	ands	r3, r2
 8009126:	b29b      	uxth	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	bf14      	ite	ne
 800912c:	2301      	movne	r3, #1
 800912e:	2300      	moveq	r3, #0
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d18d      	bne.n	8009052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800914c:	e02d      	b.n	80091aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f8ce 	bl	80092f0 <I2C_IsAcknowledgeFailed>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e02d      	b.n	80091ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009164:	d021      	beq.n	80091aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009166:	f7fd fe95 	bl	8006e94 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	d302      	bcc.n	800917c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d116      	bne.n	80091aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e007      	b.n	80091ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b4:	2b80      	cmp	r3, #128	; 0x80
 80091b6:	d1ca      	bne.n	800914e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	60b9      	str	r1, [r7, #8]
 80091cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091ce:	e02d      	b.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 f88d 	bl	80092f0 <I2C_IsAcknowledgeFailed>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e02d      	b.n	800923c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d021      	beq.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091e8:	f7fd fe54 	bl	8006e94 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d302      	bcc.n	80091fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d116      	bne.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	f043 0220 	orr.w	r2, r3, #32
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e007      	b.n	800923c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b04      	cmp	r3, #4
 8009238:	d1ca      	bne.n	80091d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009250:	e042      	b.n	80092d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b10      	cmp	r3, #16
 800925e:	d119      	bne.n	8009294 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0210 	mvn.w	r2, #16
 8009268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e029      	b.n	80092e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009294:	f7fd fdfe 	bl	8006e94 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d116      	bne.n	80092d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c4:	f043 0220 	orr.w	r2, r3, #32
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e007      	b.n	80092e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b40      	cmp	r3, #64	; 0x40
 80092e4:	d1b5      	bne.n	8009252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009306:	d11b      	bne.n	8009340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932c:	f043 0204 	orr.w	r2, r3, #4
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
	...

08009350 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800935a:	2300      	movs	r3, #0
 800935c:	603b      	str	r3, [r7, #0]
 800935e:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009368:	6413      	str	r3, [r2, #64]	; 0x40
 800936a:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009376:	4b1b      	ldr	r3, [pc, #108]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800937c:	f7fd fd8a 	bl	8006e94 <HAL_GetTick>
 8009380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009382:	e009      	b.n	8009398 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009384:	f7fd fd86 	bl	8006e94 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009392:	d901      	bls.n	8009398 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e01f      	b.n	80093d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a4:	d1ee      	bne.n	8009384 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80093a8:	2201      	movs	r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80093ac:	f7fd fd72 	bl	8006e94 <HAL_GetTick>
 80093b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80093b2:	e009      	b.n	80093c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80093b4:	f7fd fd6e 	bl	8006e94 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093c2:	d901      	bls.n	80093c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e007      	b.n	80093d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d4:	d1ee      	bne.n	80093b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40023800 	.word	0x40023800
 80093e4:	420e0040 	.word	0x420e0040
 80093e8:	40007000 	.word	0x40007000
 80093ec:	420e0044 	.word	0x420e0044

080093f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0cc      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009404:	4b68      	ldr	r3, [pc, #416]	; (80095a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d90c      	bls.n	800942c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009412:	4b65      	ldr	r3, [pc, #404]	; (80095a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800941a:	4b63      	ldr	r3, [pc, #396]	; (80095a8 <HAL_RCC_ClockConfig+0x1b8>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d001      	beq.n	800942c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e0b8      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d020      	beq.n	800947a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009444:	4b59      	ldr	r3, [pc, #356]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	4a58      	ldr	r2, [pc, #352]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 800944a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800944e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0308 	and.w	r3, r3, #8
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800945c:	4b53      	ldr	r3, [pc, #332]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	4a52      	ldr	r2, [pc, #328]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009468:	4b50      	ldr	r3, [pc, #320]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	494d      	ldr	r1, [pc, #308]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009476:	4313      	orrs	r3, r2
 8009478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d044      	beq.n	8009510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d107      	bne.n	800949e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800948e:	4b47      	ldr	r3, [pc, #284]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d119      	bne.n	80094ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e07f      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d003      	beq.n	80094ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d107      	bne.n	80094be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094ae:	4b3f      	ldr	r3, [pc, #252]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e06f      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094be:	4b3b      	ldr	r3, [pc, #236]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e067      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ce:	4b37      	ldr	r3, [pc, #220]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f023 0203 	bic.w	r2, r3, #3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4934      	ldr	r1, [pc, #208]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094e0:	f7fd fcd8 	bl	8006e94 <HAL_GetTick>
 80094e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094e6:	e00a      	b.n	80094fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094e8:	f7fd fcd4 	bl	8006e94 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e04f      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094fe:	4b2b      	ldr	r3, [pc, #172]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f003 020c 	and.w	r2, r3, #12
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	429a      	cmp	r2, r3
 800950e:	d1eb      	bne.n	80094e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009510:	4b25      	ldr	r3, [pc, #148]	; (80095a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d20c      	bcs.n	8009538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800951e:	4b22      	ldr	r3, [pc, #136]	; (80095a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009526:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d001      	beq.n	8009538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e032      	b.n	800959e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009544:	4b19      	ldr	r3, [pc, #100]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4916      	ldr	r1, [pc, #88]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009552:	4313      	orrs	r3, r2
 8009554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0308 	and.w	r3, r3, #8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d009      	beq.n	8009576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009562:	4b12      	ldr	r3, [pc, #72]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	490e      	ldr	r1, [pc, #56]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 8009572:	4313      	orrs	r3, r2
 8009574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009576:	f000 f821 	bl	80095bc <HAL_RCC_GetSysClockFreq>
 800957a:	4601      	mov	r1, r0
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <HAL_RCC_ClockConfig+0x1bc>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	091b      	lsrs	r3, r3, #4
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	4a0a      	ldr	r2, [pc, #40]	; (80095b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009588:	5cd3      	ldrb	r3, [r2, r3]
 800958a:	fa21 f303 	lsr.w	r3, r1, r3
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	f7fd fc38 	bl	8006e0c <HAL_InitTick>

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40023c00 	.word	0x40023c00
 80095ac:	40023800 	.word	0x40023800
 80095b0:	08017c04 	.word	0x08017c04
 80095b4:	20000000 	.word	0x20000000
 80095b8:	20000004 	.word	0x20000004

080095bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	2300      	movs	r3, #0
 80095cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095d2:	4b63      	ldr	r3, [pc, #396]	; (8009760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f003 030c 	and.w	r3, r3, #12
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d007      	beq.n	80095ee <HAL_RCC_GetSysClockFreq+0x32>
 80095de:	2b08      	cmp	r3, #8
 80095e0:	d008      	beq.n	80095f4 <HAL_RCC_GetSysClockFreq+0x38>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 80b4 	bne.w	8009750 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095e8:	4b5e      	ldr	r3, [pc, #376]	; (8009764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80095ea:	60bb      	str	r3, [r7, #8]
       break;
 80095ec:	e0b3      	b.n	8009756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80095ee:	4b5d      	ldr	r3, [pc, #372]	; (8009764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80095f0:	60bb      	str	r3, [r7, #8]
      break;
 80095f2:	e0b0      	b.n	8009756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095f4:	4b5a      	ldr	r3, [pc, #360]	; (8009760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095fe:	4b58      	ldr	r3, [pc, #352]	; (8009760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d04a      	beq.n	80096a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800960a:	4b55      	ldr	r3, [pc, #340]	; (8009760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	099b      	lsrs	r3, r3, #6
 8009610:	f04f 0400 	mov.w	r4, #0
 8009614:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	ea03 0501 	and.w	r5, r3, r1
 8009620:	ea04 0602 	and.w	r6, r4, r2
 8009624:	4629      	mov	r1, r5
 8009626:	4632      	mov	r2, r6
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	f04f 0400 	mov.w	r4, #0
 8009630:	0154      	lsls	r4, r2, #5
 8009632:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009636:	014b      	lsls	r3, r1, #5
 8009638:	4619      	mov	r1, r3
 800963a:	4622      	mov	r2, r4
 800963c:	1b49      	subs	r1, r1, r5
 800963e:	eb62 0206 	sbc.w	r2, r2, r6
 8009642:	f04f 0300 	mov.w	r3, #0
 8009646:	f04f 0400 	mov.w	r4, #0
 800964a:	0194      	lsls	r4, r2, #6
 800964c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009650:	018b      	lsls	r3, r1, #6
 8009652:	1a5b      	subs	r3, r3, r1
 8009654:	eb64 0402 	sbc.w	r4, r4, r2
 8009658:	f04f 0100 	mov.w	r1, #0
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	00e2      	lsls	r2, r4, #3
 8009662:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009666:	00d9      	lsls	r1, r3, #3
 8009668:	460b      	mov	r3, r1
 800966a:	4614      	mov	r4, r2
 800966c:	195b      	adds	r3, r3, r5
 800966e:	eb44 0406 	adc.w	r4, r4, r6
 8009672:	f04f 0100 	mov.w	r1, #0
 8009676:	f04f 0200 	mov.w	r2, #0
 800967a:	02a2      	lsls	r2, r4, #10
 800967c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009680:	0299      	lsls	r1, r3, #10
 8009682:	460b      	mov	r3, r1
 8009684:	4614      	mov	r4, r2
 8009686:	4618      	mov	r0, r3
 8009688:	4621      	mov	r1, r4
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f04f 0400 	mov.w	r4, #0
 8009690:	461a      	mov	r2, r3
 8009692:	4623      	mov	r3, r4
 8009694:	f7f7 fb10 	bl	8000cb8 <__aeabi_uldivmod>
 8009698:	4603      	mov	r3, r0
 800969a:	460c      	mov	r4, r1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	e049      	b.n	8009734 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096a0:	4b2f      	ldr	r3, [pc, #188]	; (8009760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	099b      	lsrs	r3, r3, #6
 80096a6:	f04f 0400 	mov.w	r4, #0
 80096aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	ea03 0501 	and.w	r5, r3, r1
 80096b6:	ea04 0602 	and.w	r6, r4, r2
 80096ba:	4629      	mov	r1, r5
 80096bc:	4632      	mov	r2, r6
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	f04f 0400 	mov.w	r4, #0
 80096c6:	0154      	lsls	r4, r2, #5
 80096c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80096cc:	014b      	lsls	r3, r1, #5
 80096ce:	4619      	mov	r1, r3
 80096d0:	4622      	mov	r2, r4
 80096d2:	1b49      	subs	r1, r1, r5
 80096d4:	eb62 0206 	sbc.w	r2, r2, r6
 80096d8:	f04f 0300 	mov.w	r3, #0
 80096dc:	f04f 0400 	mov.w	r4, #0
 80096e0:	0194      	lsls	r4, r2, #6
 80096e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80096e6:	018b      	lsls	r3, r1, #6
 80096e8:	1a5b      	subs	r3, r3, r1
 80096ea:	eb64 0402 	sbc.w	r4, r4, r2
 80096ee:	f04f 0100 	mov.w	r1, #0
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	00e2      	lsls	r2, r4, #3
 80096f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80096fc:	00d9      	lsls	r1, r3, #3
 80096fe:	460b      	mov	r3, r1
 8009700:	4614      	mov	r4, r2
 8009702:	195b      	adds	r3, r3, r5
 8009704:	eb44 0406 	adc.w	r4, r4, r6
 8009708:	f04f 0100 	mov.w	r1, #0
 800970c:	f04f 0200 	mov.w	r2, #0
 8009710:	02a2      	lsls	r2, r4, #10
 8009712:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009716:	0299      	lsls	r1, r3, #10
 8009718:	460b      	mov	r3, r1
 800971a:	4614      	mov	r4, r2
 800971c:	4618      	mov	r0, r3
 800971e:	4621      	mov	r1, r4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f04f 0400 	mov.w	r4, #0
 8009726:	461a      	mov	r2, r3
 8009728:	4623      	mov	r3, r4
 800972a:	f7f7 fac5 	bl	8000cb8 <__aeabi_uldivmod>
 800972e:	4603      	mov	r3, r0
 8009730:	460c      	mov	r4, r1
 8009732:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009734:	4b0a      	ldr	r3, [pc, #40]	; (8009760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	0c1b      	lsrs	r3, r3, #16
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	3301      	adds	r3, #1
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	fbb2 f3f3 	udiv	r3, r2, r3
 800974c:	60bb      	str	r3, [r7, #8]
      break;
 800974e:	e002      	b.n	8009756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009750:	4b04      	ldr	r3, [pc, #16]	; (8009764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009752:	60bb      	str	r3, [r7, #8]
      break;
 8009754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009756:	68bb      	ldr	r3, [r7, #8]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009760:	40023800 	.word	0x40023800
 8009764:	00f42400 	.word	0x00f42400

08009768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <HAL_RCC_GetHCLKFreq+0x14>)
 800976e:	681b      	ldr	r3, [r3, #0]
}
 8009770:	4618      	mov	r0, r3
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000000 	.word	0x20000000

08009780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009784:	f7ff fff0 	bl	8009768 <HAL_RCC_GetHCLKFreq>
 8009788:	4601      	mov	r1, r0
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	0a9b      	lsrs	r3, r3, #10
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	4a03      	ldr	r2, [pc, #12]	; (80097a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009796:	5cd3      	ldrb	r3, [r2, r3]
 8009798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800979c:	4618      	mov	r0, r3
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	40023800 	.word	0x40023800
 80097a4:	08017c14 	.word	0x08017c14

080097a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80097ac:	f7ff ffdc 	bl	8009768 <HAL_RCC_GetHCLKFreq>
 80097b0:	4601      	mov	r1, r0
 80097b2:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	0b5b      	lsrs	r3, r3, #13
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	4a03      	ldr	r2, [pc, #12]	; (80097cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80097be:	5cd3      	ldrb	r3, [r2, r3]
 80097c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	40023800 	.word	0x40023800
 80097cc:	08017c14 	.word	0x08017c14

080097d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80097f8:	4b66      	ldr	r3, [pc, #408]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80097fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009806:	4963      	ldr	r1, [pc, #396]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800981a:	4b5e      	ldr	r3, [pc, #376]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800981c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009820:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	495a      	ldr	r1, [pc, #360]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10b      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009844:	2b00      	cmp	r3, #0
 8009846:	d105      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009850:	2b00      	cmp	r3, #0
 8009852:	d075      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009854:	4b50      	ldr	r3, [pc, #320]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800985a:	f7fd fb1b 	bl	8006e94 <HAL_GetTick>
 800985e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009860:	e008      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009862:	f7fd fb17 	bl	8006e94 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d901      	bls.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e1dc      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009874:	4b47      	ldr	r3, [pc, #284]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f0      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	019a      	lsls	r2, r3, #6
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	071b      	lsls	r3, r3, #28
 8009898:	493e      	ldr	r1, [pc, #248]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800989a:	4313      	orrs	r3, r2
 800989c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01f      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80098ac:	4b39      	ldr	r3, [pc, #228]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80098ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098b2:	0f1b      	lsrs	r3, r3, #28
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	019a      	lsls	r2, r3, #6
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	061b      	lsls	r3, r3, #24
 80098c6:	431a      	orrs	r2, r3
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	071b      	lsls	r3, r3, #28
 80098cc:	4931      	ldr	r1, [pc, #196]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80098d4:	4b2f      	ldr	r3, [pc, #188]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80098d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098da:	f023 021f 	bic.w	r2, r3, #31
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	492b      	ldr	r1, [pc, #172]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00d      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	019a      	lsls	r2, r3, #6
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	061b      	lsls	r3, r3, #24
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	071b      	lsls	r3, r3, #28
 800990c:	4921      	ldr	r1, [pc, #132]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800990e:	4313      	orrs	r3, r2
 8009910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009914:	4b20      	ldr	r3, [pc, #128]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009916:	2201      	movs	r2, #1
 8009918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800991a:	f7fd fabb 	bl	8006e94 <HAL_GetTick>
 800991e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009920:	e008      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009922:	f7fd fab7 	bl	8006e94 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e17c      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009934:	4b17      	ldr	r3, [pc, #92]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0f0      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d112      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10c      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80ce 	beq.w	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800996a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800996e:	f040 80c8 	bne.w	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009972:	4b0a      	ldr	r3, [pc, #40]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009978:	f7fd fa8c 	bl	8006e94 <HAL_GetTick>
 800997c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800997e:	e00f      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009980:	f7fd fa88 	bl	8006e94 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d908      	bls.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e14d      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009992:	bf00      	nop
 8009994:	40023800 	.word	0x40023800
 8009998:	42470068 	.word	0x42470068
 800999c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80099a0:	4ba5      	ldr	r3, [pc, #660]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ac:	d0e8      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d02e      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80099ba:	4b9f      	ldr	r3, [pc, #636]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c0:	0c1b      	lsrs	r3, r3, #16
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	3301      	adds	r3, #1
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80099cc:	4b9a      	ldr	r3, [pc, #616]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d2:	0f1b      	lsrs	r3, r3, #28
 80099d4:	f003 0307 	and.w	r3, r3, #7
 80099d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	019a      	lsls	r2, r3, #6
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	085b      	lsrs	r3, r3, #1
 80099e4:	3b01      	subs	r3, #1
 80099e6:	041b      	lsls	r3, r3, #16
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	061b      	lsls	r3, r3, #24
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	071b      	lsls	r3, r3, #28
 80099f6:	4990      	ldr	r1, [pc, #576]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80099fe:	4b8e      	ldr	r3, [pc, #568]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	021b      	lsls	r3, r3, #8
 8009a10:	4989      	ldr	r1, [pc, #548]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0308 	and.w	r3, r3, #8
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d02c      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009a24:	4b84      	ldr	r3, [pc, #528]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2a:	0c1b      	lsrs	r3, r3, #16
 8009a2c:	f003 0303 	and.w	r3, r3, #3
 8009a30:	3301      	adds	r3, #1
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a36:	4b80      	ldr	r3, [pc, #512]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3c:	0e1b      	lsrs	r3, r3, #24
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	019a      	lsls	r2, r3, #6
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	085b      	lsrs	r3, r3, #1
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	431a      	orrs	r2, r3
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	061b      	lsls	r3, r3, #24
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	071b      	lsls	r3, r3, #28
 8009a60:	4975      	ldr	r1, [pc, #468]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009a68:	4b73      	ldr	r3, [pc, #460]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	4970      	ldr	r1, [pc, #448]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d024      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a92:	d11f      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a94:	4b68      	ldr	r3, [pc, #416]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9a:	0e1b      	lsrs	r3, r3, #24
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009aa2:	4b65      	ldr	r3, [pc, #404]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa8:	0f1b      	lsrs	r3, r3, #28
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	019a      	lsls	r2, r3, #6
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	085b      	lsrs	r3, r3, #1
 8009abc:	3b01      	subs	r3, #1
 8009abe:	041b      	lsls	r3, r3, #16
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	061b      	lsls	r3, r3, #24
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	071b      	lsls	r3, r3, #28
 8009acc:	495a      	ldr	r1, [pc, #360]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009ad4:	4b59      	ldr	r3, [pc, #356]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ada:	f7fd f9db 	bl	8006e94 <HAL_GetTick>
 8009ade:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ae0:	e008      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009ae2:	f7fd f9d7 	bl	8006e94 <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d901      	bls.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e09c      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009af4:	4b50      	ldr	r3, [pc, #320]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b00:	d1ef      	bne.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8083 	beq.w	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b10:	2300      	movs	r3, #0
 8009b12:	60bb      	str	r3, [r7, #8]
 8009b14:	4b48      	ldr	r3, [pc, #288]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	4a47      	ldr	r2, [pc, #284]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8009b20:	4b45      	ldr	r3, [pc, #276]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b28:	60bb      	str	r3, [r7, #8]
 8009b2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009b2c:	4b44      	ldr	r3, [pc, #272]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a43      	ldr	r2, [pc, #268]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b36:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b38:	f7fd f9ac 	bl	8006e94 <HAL_GetTick>
 8009b3c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b3e:	e008      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009b40:	f7fd f9a8 	bl	8006e94 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e06d      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b52:	4b3b      	ldr	r3, [pc, #236]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0f0      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b5e:	4b36      	ldr	r3, [pc, #216]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b66:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d02f      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d028      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b7c:	4b2e      	ldr	r3, [pc, #184]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b84:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b86:	4b2f      	ldr	r3, [pc, #188]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009b88:	2201      	movs	r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b8c:	4b2d      	ldr	r3, [pc, #180]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009b92:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b98:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d114      	bne.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ba4:	f7fd f976 	bl	8006e94 <HAL_GetTick>
 8009ba8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009baa:	e00a      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bac:	f7fd f972 	bl	8006e94 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d901      	bls.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e035      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bc2:	4b1d      	ldr	r3, [pc, #116]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0ee      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bda:	d10d      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf0:	4911      	ldr	r1, [pc, #68]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	608b      	str	r3, [r1, #8]
 8009bf6:	e005      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	4a0e      	ldr	r2, [pc, #56]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009bfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c02:	6093      	str	r3, [r2, #8]
 8009c04:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c10:	4909      	ldr	r1, [pc, #36]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0310 	and.w	r3, r3, #16
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009c2a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40023800 	.word	0x40023800
 8009c3c:	42470070 	.word	0x42470070
 8009c40:	40007000 	.word	0x40007000
 8009c44:	42470e40 	.word	0x42470e40
 8009c48:	424711e0 	.word	0x424711e0

08009c4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d075      	beq.n	8009d50 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009c64:	4ba2      	ldr	r3, [pc, #648]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f003 030c 	and.w	r3, r3, #12
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d00c      	beq.n	8009c8a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c70:	4b9f      	ldr	r3, [pc, #636]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d112      	bne.n	8009ca2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c7c:	4b9c      	ldr	r3, [pc, #624]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c88:	d10b      	bne.n	8009ca2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c8a:	4b99      	ldr	r3, [pc, #612]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d05b      	beq.n	8009d4e <HAL_RCC_OscConfig+0x102>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d157      	bne.n	8009d4e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e20b      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009caa:	d106      	bne.n	8009cba <HAL_RCC_OscConfig+0x6e>
 8009cac:	4b90      	ldr	r3, [pc, #576]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a8f      	ldr	r2, [pc, #572]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	e01d      	b.n	8009cf6 <HAL_RCC_OscConfig+0xaa>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cc2:	d10c      	bne.n	8009cde <HAL_RCC_OscConfig+0x92>
 8009cc4:	4b8a      	ldr	r3, [pc, #552]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a89      	ldr	r2, [pc, #548]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	4b87      	ldr	r3, [pc, #540]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a86      	ldr	r2, [pc, #536]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	e00b      	b.n	8009cf6 <HAL_RCC_OscConfig+0xaa>
 8009cde:	4b84      	ldr	r3, [pc, #528]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a83      	ldr	r2, [pc, #524]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	4b81      	ldr	r3, [pc, #516]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a80      	ldr	r2, [pc, #512]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d013      	beq.n	8009d26 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cfe:	f7fd f8c9 	bl	8006e94 <HAL_GetTick>
 8009d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d04:	e008      	b.n	8009d18 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d06:	f7fd f8c5 	bl	8006e94 <HAL_GetTick>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	2b64      	cmp	r3, #100	; 0x64
 8009d12:	d901      	bls.n	8009d18 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e1d0      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d18:	4b75      	ldr	r3, [pc, #468]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0f0      	beq.n	8009d06 <HAL_RCC_OscConfig+0xba>
 8009d24:	e014      	b.n	8009d50 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d26:	f7fd f8b5 	bl	8006e94 <HAL_GetTick>
 8009d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d2c:	e008      	b.n	8009d40 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d2e:	f7fd f8b1 	bl	8006e94 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b64      	cmp	r3, #100	; 0x64
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e1bc      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d40:	4b6b      	ldr	r3, [pc, #428]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f0      	bne.n	8009d2e <HAL_RCC_OscConfig+0xe2>
 8009d4c:	e000      	b.n	8009d50 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d063      	beq.n	8009e24 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009d5c:	4b64      	ldr	r3, [pc, #400]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 030c 	and.w	r3, r3, #12
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00b      	beq.n	8009d80 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d68:	4b61      	ldr	r3, [pc, #388]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d11c      	bne.n	8009dae <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d74:	4b5e      	ldr	r3, [pc, #376]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d116      	bne.n	8009dae <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d80:	4b5b      	ldr	r3, [pc, #364]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <HAL_RCC_OscConfig+0x14c>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d001      	beq.n	8009d98 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e190      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d98:	4b55      	ldr	r3, [pc, #340]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	4952      	ldr	r1, [pc, #328]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dac:	e03a      	b.n	8009e24 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d020      	beq.n	8009df8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009db6:	4b4f      	ldr	r3, [pc, #316]	; (8009ef4 <HAL_RCC_OscConfig+0x2a8>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dbc:	f7fd f86a 	bl	8006e94 <HAL_GetTick>
 8009dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dc2:	e008      	b.n	8009dd6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dc4:	f7fd f866 	bl	8006e94 <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d901      	bls.n	8009dd6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e171      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dd6:	4b46      	ldr	r3, [pc, #280]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0f0      	beq.n	8009dc4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009de2:	4b43      	ldr	r3, [pc, #268]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	493f      	ldr	r1, [pc, #252]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	600b      	str	r3, [r1, #0]
 8009df6:	e015      	b.n	8009e24 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009df8:	4b3e      	ldr	r3, [pc, #248]	; (8009ef4 <HAL_RCC_OscConfig+0x2a8>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dfe:	f7fd f849 	bl	8006e94 <HAL_GetTick>
 8009e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e06:	f7fd f845 	bl	8006e94 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e150      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e18:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1f0      	bne.n	8009e06 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d030      	beq.n	8009e92 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d016      	beq.n	8009e66 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e38:	4b2f      	ldr	r3, [pc, #188]	; (8009ef8 <HAL_RCC_OscConfig+0x2ac>)
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e3e:	f7fd f829 	bl	8006e94 <HAL_GetTick>
 8009e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e44:	e008      	b.n	8009e58 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e46:	f7fd f825 	bl	8006e94 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d901      	bls.n	8009e58 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e130      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e58:	4b25      	ldr	r3, [pc, #148]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0f0      	beq.n	8009e46 <HAL_RCC_OscConfig+0x1fa>
 8009e64:	e015      	b.n	8009e92 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e66:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <HAL_RCC_OscConfig+0x2ac>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6c:	f7fd f812 	bl	8006e94 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e74:	f7fd f80e 	bl	8006e94 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e119      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f0      	bne.n	8009e74 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 809f 	beq.w	8009fde <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ea4:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10f      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	4a0d      	ldr	r2, [pc, #52]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <HAL_RCC_OscConfig+0x2a4>)
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ec8:	60fb      	str	r3, [r7, #12]
 8009eca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <HAL_RCC_OscConfig+0x2b0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d120      	bne.n	8009f1e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009edc:	4b07      	ldr	r3, [pc, #28]	; (8009efc <HAL_RCC_OscConfig+0x2b0>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a06      	ldr	r2, [pc, #24]	; (8009efc <HAL_RCC_OscConfig+0x2b0>)
 8009ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ee6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ee8:	f7fc ffd4 	bl	8006e94 <HAL_GetTick>
 8009eec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009eee:	e010      	b.n	8009f12 <HAL_RCC_OscConfig+0x2c6>
 8009ef0:	40023800 	.word	0x40023800
 8009ef4:	42470000 	.word	0x42470000
 8009ef8:	42470e80 	.word	0x42470e80
 8009efc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f00:	f7fc ffc8 	bl	8006e94 <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e0d3      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f12:	4b6c      	ldr	r3, [pc, #432]	; (800a0c4 <HAL_RCC_OscConfig+0x478>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0f0      	beq.n	8009f00 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d106      	bne.n	8009f34 <HAL_RCC_OscConfig+0x2e8>
 8009f26:	4b68      	ldr	r3, [pc, #416]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2a:	4a67      	ldr	r2, [pc, #412]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f2c:	f043 0301 	orr.w	r3, r3, #1
 8009f30:	6713      	str	r3, [r2, #112]	; 0x70
 8009f32:	e01c      	b.n	8009f6e <HAL_RCC_OscConfig+0x322>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b05      	cmp	r3, #5
 8009f3a:	d10c      	bne.n	8009f56 <HAL_RCC_OscConfig+0x30a>
 8009f3c:	4b62      	ldr	r3, [pc, #392]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f40:	4a61      	ldr	r2, [pc, #388]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f42:	f043 0304 	orr.w	r3, r3, #4
 8009f46:	6713      	str	r3, [r2, #112]	; 0x70
 8009f48:	4b5f      	ldr	r3, [pc, #380]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4c:	4a5e      	ldr	r2, [pc, #376]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	6713      	str	r3, [r2, #112]	; 0x70
 8009f54:	e00b      	b.n	8009f6e <HAL_RCC_OscConfig+0x322>
 8009f56:	4b5c      	ldr	r3, [pc, #368]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	4a5b      	ldr	r2, [pc, #364]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	6713      	str	r3, [r2, #112]	; 0x70
 8009f62:	4b59      	ldr	r3, [pc, #356]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f66:	4a58      	ldr	r2, [pc, #352]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f68:	f023 0304 	bic.w	r3, r3, #4
 8009f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d015      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f76:	f7fc ff8d 	bl	8006e94 <HAL_GetTick>
 8009f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f7c:	e00a      	b.n	8009f94 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f7e:	f7fc ff89 	bl	8006e94 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d901      	bls.n	8009f94 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e092      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f94:	4b4c      	ldr	r3, [pc, #304]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0ee      	beq.n	8009f7e <HAL_RCC_OscConfig+0x332>
 8009fa0:	e014      	b.n	8009fcc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fa2:	f7fc ff77 	bl	8006e94 <HAL_GetTick>
 8009fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fa8:	e00a      	b.n	8009fc0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009faa:	f7fc ff73 	bl	8006e94 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d901      	bls.n	8009fc0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e07c      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fc0:	4b41      	ldr	r3, [pc, #260]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1ee      	bne.n	8009faa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d105      	bne.n	8009fde <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fd2:	4b3d      	ldr	r3, [pc, #244]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	4a3c      	ldr	r2, [pc, #240]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d068      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009fe6:	4b38      	ldr	r3, [pc, #224]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f003 030c 	and.w	r3, r3, #12
 8009fee:	2b08      	cmp	r3, #8
 8009ff0:	d060      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d145      	bne.n	800a086 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ffa:	4b34      	ldr	r3, [pc, #208]	; (800a0cc <HAL_RCC_OscConfig+0x480>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a000:	f7fc ff48 	bl	8006e94 <HAL_GetTick>
 800a004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a006:	e008      	b.n	800a01a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a008:	f7fc ff44 	bl	8006e94 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	2b02      	cmp	r3, #2
 800a014:	d901      	bls.n	800a01a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e04f      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a01a:	4b2b      	ldr	r3, [pc, #172]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1f0      	bne.n	800a008 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69da      	ldr	r2, [r3, #28]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	019b      	lsls	r3, r3, #6
 800a036:	431a      	orrs	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	085b      	lsrs	r3, r3, #1
 800a03e:	3b01      	subs	r3, #1
 800a040:	041b      	lsls	r3, r3, #16
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	061b      	lsls	r3, r3, #24
 800a04a:	431a      	orrs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a050:	071b      	lsls	r3, r3, #28
 800a052:	491d      	ldr	r1, [pc, #116]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 800a054:	4313      	orrs	r3, r2
 800a056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a058:	4b1c      	ldr	r3, [pc, #112]	; (800a0cc <HAL_RCC_OscConfig+0x480>)
 800a05a:	2201      	movs	r2, #1
 800a05c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a05e:	f7fc ff19 	bl	8006e94 <HAL_GetTick>
 800a062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a064:	e008      	b.n	800a078 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a066:	f7fc ff15 	bl	8006e94 <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	2b02      	cmp	r3, #2
 800a072:	d901      	bls.n	800a078 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e020      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a078:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0f0      	beq.n	800a066 <HAL_RCC_OscConfig+0x41a>
 800a084:	e018      	b.n	800a0b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a086:	4b11      	ldr	r3, [pc, #68]	; (800a0cc <HAL_RCC_OscConfig+0x480>)
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08c:	f7fc ff02 	bl	8006e94 <HAL_GetTick>
 800a090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a094:	f7fc fefe 	bl	8006e94 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e009      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0a6:	4b08      	ldr	r3, [pc, #32]	; (800a0c8 <HAL_RCC_OscConfig+0x47c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f0      	bne.n	800a094 <HAL_RCC_OscConfig+0x448>
 800a0b2:	e001      	b.n	800a0b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e000      	b.n	800a0ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	40007000 	.word	0x40007000
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	42470060 	.word	0x42470060

0800a0d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e022      	b.n	800a128 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d105      	bne.n	800a0fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7fa feff 	bl	8004ef8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2203      	movs	r2, #3
 800a0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f814 	bl	800a130 <HAL_SD_InitCard>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e00a      	b.n	800a128 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a130:	b5b0      	push	{r4, r5, r7, lr}
 800a132:	b08e      	sub	sp, #56	; 0x38
 800a134:	af04      	add	r7, sp, #16
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a138:	2300      	movs	r3, #0
 800a13a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a140:	2300      	movs	r3, #0
 800a142:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a148:	2300      	movs	r3, #0
 800a14a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a14c:	2376      	movs	r3, #118	; 0x76
 800a14e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681d      	ldr	r5, [r3, #0]
 800a154:	466c      	mov	r4, sp
 800a156:	f107 0314 	add.w	r3, r7, #20
 800a15a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a15e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a162:	f107 0308 	add.w	r3, r7, #8
 800a166:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a168:	4628      	mov	r0, r5
 800a16a:	f003 fa87 	bl	800d67c <SDIO_Init>
 800a16e:	4603      	mov	r3, r0
 800a170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e031      	b.n	800a1e4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a180:	4b1a      	ldr	r3, [pc, #104]	; (800a1ec <HAL_SD_InitCard+0xbc>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f003 fabf 	bl	800d70e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a190:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <HAL_SD_InitCard+0xbc>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 ffc6 	bl	800b128 <SD_PowerON>
 800a19c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00b      	beq.n	800a1bc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e013      	b.n	800a1e4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fee5 	bl	800af8c <SD_InitCard>
 800a1c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00b      	beq.n	800a1e2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3728      	adds	r7, #40	; 0x28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ec:	422580a0 	.word	0x422580a0

0800a1f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08c      	sub	sp, #48	; 0x30
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d107      	bne.n	800a218 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e0c7      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b01      	cmp	r3, #1
 800a222:	f040 80c0 	bne.w	800a3a6 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a236:	429a      	cmp	r2, r3
 800a238:	d907      	bls.n	800a24a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e0ae      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2203      	movs	r2, #3
 800a24e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2200      	movs	r2, #0
 800a258:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a268:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	4a50      	ldr	r2, [pc, #320]	; (800a3b0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a276:	4a4f      	ldr	r2, [pc, #316]	; (800a3b4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a278:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	2200      	movs	r2, #0
 800a280:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3380      	adds	r3, #128	; 0x80
 800a28c:	4619      	mov	r1, r3
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	025b      	lsls	r3, r3, #9
 800a294:	089b      	lsrs	r3, r3, #2
 800a296:	f7fd fbef 	bl	8007a78 <HAL_DMA_Start_IT>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d017      	beq.n	800a2d0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a2ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a40      	ldr	r2, [pc, #256]	; (800a3b8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e06b      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a2d0:	4b3a      	ldr	r3, [pc, #232]	; (800a3bc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d002      	beq.n	800a2e4 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	025b      	lsls	r3, r3, #9
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f003 faa1 	bl	800d834 <SDMMC_CmdBlockLength>
 800a2f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00f      	beq.n	800a31a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a2e      	ldr	r2, [pc, #184]	; (800a3b8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a300:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	431a      	orrs	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e046      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	025b      	lsls	r3, r3, #9
 800a324:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a326:	2390      	movs	r3, #144	; 0x90
 800a328:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a32a:	2302      	movs	r3, #2
 800a32c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a32e:	2300      	movs	r3, #0
 800a330:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a332:	2301      	movs	r3, #1
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f107 0210 	add.w	r2, r7, #16
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f003 fa4b 	bl	800d7dc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d90a      	bls.n	800a362 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2282      	movs	r2, #130	; 0x82
 800a350:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a358:	4618      	mov	r0, r3
 800a35a:	f003 faaf 	bl	800d8bc <SDMMC_CmdReadMultiBlock>
 800a35e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a360:	e009      	b.n	800a376 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2281      	movs	r2, #129	; 0x81
 800a366:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a36e:	4618      	mov	r0, r3
 800a370:	f003 fa82 	bl	800d878 <SDMMC_CmdReadSingleBlock>
 800a374:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d012      	beq.n	800a3a2 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0d      	ldr	r2, [pc, #52]	; (800a3b8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a382:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	431a      	orrs	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e002      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e000      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a3a6:	2302      	movs	r3, #2
  }
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3730      	adds	r7, #48	; 0x30
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	0800ad9b 	.word	0x0800ad9b
 800a3b4:	0800ae0d 	.word	0x0800ae0d
 800a3b8:	004005ff 	.word	0x004005ff
 800a3bc:	4225858c 	.word	0x4225858c

0800a3c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08c      	sub	sp, #48	; 0x30
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d107      	bne.n	800a3e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e0ca      	b.n	800a57e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	f040 80c3 	bne.w	800a57c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	441a      	add	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a406:	429a      	cmp	r2, r3
 800a408:	d907      	bls.n	800a41a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e0b1      	b.n	800a57e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2203      	movs	r2, #3
 800a41e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2200      	movs	r2, #0
 800a428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f042 021a 	orr.w	r2, r2, #26
 800a438:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43e:	4a52      	ldr	r2, [pc, #328]	; (800a588 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	4a51      	ldr	r2, [pc, #324]	; (800a58c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a448:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44e:	2200      	movs	r2, #0
 800a450:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a456:	2b01      	cmp	r3, #1
 800a458:	d002      	beq.n	800a460 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	025b      	lsls	r3, r3, #9
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a468:	4618      	mov	r0, r3
 800a46a:	f003 f9e3 	bl	800d834 <SDMMC_CmdBlockLength>
 800a46e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00f      	beq.n	800a496 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a45      	ldr	r2, [pc, #276]	; (800a590 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a47c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	431a      	orrs	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e073      	b.n	800a57e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d90a      	bls.n	800a4b2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	22a0      	movs	r2, #160	; 0xa0
 800a4a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f003 fa4b 	bl	800d944 <SDMMC_CmdWriteMultiBlock>
 800a4ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a4b0:	e009      	b.n	800a4c6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2290      	movs	r2, #144	; 0x90
 800a4b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f003 fa1e 	bl	800d900 <SDMMC_CmdWriteSingleBlock>
 800a4c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d012      	beq.n	800a4f2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a2f      	ldr	r2, [pc, #188]	; (800a590 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e045      	b.n	800a57e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a4f2:	4b28      	ldr	r3, [pc, #160]	; (800a594 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3380      	adds	r3, #128	; 0x80
 800a504:	461a      	mov	r2, r3
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	025b      	lsls	r3, r3, #9
 800a50a:	089b      	lsrs	r3, r3, #2
 800a50c:	f7fd fab4 	bl	8007a78 <HAL_DMA_Start_IT>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01a      	beq.n	800a54c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 021a 	bic.w	r2, r2, #26
 800a524:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a19      	ldr	r2, [pc, #100]	; (800a590 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a532:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e018      	b.n	800a57e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a54c:	f04f 33ff 	mov.w	r3, #4294967295
 800a550:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	025b      	lsls	r3, r3, #9
 800a556:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a558:	2390      	movs	r3, #144	; 0x90
 800a55a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a55c:	2300      	movs	r3, #0
 800a55e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a560:	2300      	movs	r3, #0
 800a562:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a564:	2301      	movs	r3, #1
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f107 0210 	add.w	r2, r7, #16
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f003 f932 	bl	800d7dc <SDIO_ConfigData>

      return HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	e000      	b.n	800a57e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a57c:	2302      	movs	r3, #2
  }
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3730      	adds	r7, #48	; 0x30
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	0800ad71 	.word	0x0800ad71
 800a58c:	0800ae0d 	.word	0x0800ae0d
 800a590:	004005ff 	.word	0x004005ff
 800a594:	4225858c 	.word	0x4225858c

0800a598 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d008      	beq.n	800a5c6 <HAL_SD_IRQHandler+0x2e>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 ffc8 	bl	800b554 <SD_Read_IT>
 800a5c4:	e155      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 808f 	beq.w	800a6f4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	6812      	ldr	r2, [r2, #0]
 800a5ea:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a5ee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a5f2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0201 	bic.w	r2, r2, #1
 800a602:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d039      	beq.n	800a682 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <HAL_SD_IRQHandler+0x8a>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d011      	beq.n	800a646 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f003 f9ae 	bl	800d988 <SDMMC_CmdStopTransfer>
 800a62c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f91f 	bl	800a884 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a64e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <HAL_SD_IRQHandler+0xda>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f003 fe04 	bl	800e280 <HAL_SD_RxCpltCallback>
 800a678:	e0fb      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f003 fdf6 	bl	800e26c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a680:	e0f7      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 80f2 	beq.w	800a872 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	d011      	beq.n	800a6bc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f003 f973 	bl	800d988 <SDMMC_CmdStopTransfer>
 800a6a2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d008      	beq.n	800a6bc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8e4 	bl	800a884 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f040 80d5 	bne.w	800a872 <HAL_SD_IRQHandler+0x2da>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f040 80cf 	bne.w	800a872 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0208 	bic.w	r2, r2, #8
 800a6e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f003 fdbd 	bl	800e26c <HAL_SD_TxCpltCallback>
}
 800a6f2:	e0be      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d008      	beq.n	800a714 <HAL_SD_IRQHandler+0x17c>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 ff72 	bl	800b5f6 <SD_Write_IT>
 800a712:	e0ae      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 80a7 	beq.w	800a872 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a736:	f043 0202 	orr.w	r2, r3, #2
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a744:	f003 0308 	and.w	r3, r3, #8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a750:	f043 0208 	orr.w	r2, r3, #8
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	f043 0220 	orr.w	r2, r3, #32
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a778:	f003 0310 	and.w	r3, r3, #16
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	f043 0210 	orr.w	r2, r3, #16
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f240 523a 	movw	r2, #1338	; 0x53a
 800a794:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a7a4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f003 f8ec 	bl	800d988 <SDMMC_CmdStopTransfer>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00a      	beq.n	800a7dc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f855 	bl	800a884 <HAL_SD_ErrorCallback>
}
 800a7da:	e04a      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d045      	beq.n	800a872 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f003 0310 	and.w	r3, r3, #16
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d104      	bne.n	800a7fa <HAL_SD_IRQHandler+0x262>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d011      	beq.n	800a81e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	4a1f      	ldr	r2, [pc, #124]	; (800a87c <HAL_SD_IRQHandler+0x2e4>)
 800a800:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a806:	4618      	mov	r0, r3
 800a808:	f7fd f98e 	bl	8007b28 <HAL_DMA_Abort_IT>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d02f      	beq.n	800a872 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	4618      	mov	r0, r3
 800a818:	f000 fb4a 	bl	800aeb0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a81c:	e029      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <HAL_SD_IRQHandler+0x29a>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d011      	beq.n	800a856 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	4a12      	ldr	r2, [pc, #72]	; (800a880 <HAL_SD_IRQHandler+0x2e8>)
 800a838:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd f972 	bl	8007b28 <HAL_DMA_Abort_IT>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d013      	beq.n	800a872 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fb65 	bl	800af1e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a854:	e00d      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f003 fcf4 	bl	800e258 <HAL_SD_AbortCallback>
}
 800a870:	e7ff      	b.n	800a872 <HAL_SD_IRQHandler+0x2da>
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	0800aeb1 	.word	0x0800aeb1
 800a880:	0800af1f 	.word	0x0800af1f

0800a884 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8a6:	0f9b      	lsrs	r3, r3, #30
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b2:	0e9b      	lsrs	r3, r3, #26
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c4:	0e1b      	lsrs	r3, r3, #24
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 0303 	and.w	r3, r3, #3
 800a8cc:	b2da      	uxtb	r2, r3
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d6:	0c1b      	lsrs	r3, r3, #16
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8e2:	0a1b      	lsrs	r3, r3, #8
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8f8:	0d1b      	lsrs	r3, r3, #20
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a904:	0c1b      	lsrs	r3, r3, #16
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f003 030f 	and.w	r3, r3, #15
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a916:	0bdb      	lsrs	r3, r3, #15
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a928:	0b9b      	lsrs	r3, r3, #14
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	b2da      	uxtb	r2, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a93a:	0b5b      	lsrs	r3, r3, #13
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a94c:	0b1b      	lsrs	r3, r3, #12
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2200      	movs	r2, #0
 800a95e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a964:	2b00      	cmp	r3, #0
 800a966:	d163      	bne.n	800aa30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a96c:	009a      	lsls	r2, r3, #2
 800a96e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a972:	4013      	ands	r3, r2
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a978:	0f92      	lsrs	r2, r2, #30
 800a97a:	431a      	orrs	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a984:	0edb      	lsrs	r3, r3, #27
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a996:	0e1b      	lsrs	r3, r3, #24
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0307 	and.w	r3, r3, #7
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a8:	0d5b      	lsrs	r3, r3, #21
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ba:	0c9b      	lsrs	r3, r3, #18
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9cc:	0bdb      	lsrs	r3, r3, #15
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	7e1b      	ldrb	r3, [r3, #24]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	3302      	adds	r3, #2
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a9fa:	fb02 f203 	mul.w	r2, r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	7a1b      	ldrb	r3, [r3, #8]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 030f 	and.w	r3, r3, #15
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	409a      	lsls	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800aa1c:	0a52      	lsrs	r2, r2, #9
 800aa1e:	fb02 f203 	mul.w	r2, r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa2c:	661a      	str	r2, [r3, #96]	; 0x60
 800aa2e:	e031      	b.n	800aa94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d11d      	bne.n	800aa74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa3c:	041b      	lsls	r3, r3, #16
 800aa3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	3301      	adds	r3, #1
 800aa54:	029a      	lsls	r2, r3, #10
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	661a      	str	r2, [r3, #96]	; 0x60
 800aa72:	e00f      	b.n	800aa94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a58      	ldr	r2, [pc, #352]	; (800abdc <HAL_SD_GetCardCSD+0x344>)
 800aa7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e09d      	b.n	800abd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa98:	0b9b      	lsrs	r3, r3, #14
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaaa:	09db      	lsrs	r3, r3, #7
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aacc:	0fdb      	lsrs	r3, r3, #31
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad8:	0f5b      	lsrs	r3, r3, #29
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	f003 0303 	and.w	r3, r3, #3
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaea:	0e9b      	lsrs	r3, r3, #26
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafc:	0d9b      	lsrs	r3, r3, #22
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	f003 030f 	and.w	r3, r3, #15
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0e:	0d5b      	lsrs	r3, r3, #21
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2a:	0c1b      	lsrs	r3, r3, #16
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3e:	0bdb      	lsrs	r3, r3, #15
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab52:	0b9b      	lsrs	r3, r3, #14
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab66:	0b5b      	lsrs	r3, r3, #13
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7a:	0b1b      	lsrs	r3, r3, #12
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8e:	0a9b      	lsrs	r3, r3, #10
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	f003 0303 	and.w	r3, r3, #3
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb6:	085b      	lsrs	r3, r3, #1
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	004005ff 	.word	0x004005ff

0800abe0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ac38:	b5b0      	push	{r4, r5, r7, lr}
 800ac3a:	b08e      	sub	sp, #56	; 0x38
 800ac3c:	af04      	add	r7, sp, #16
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2203      	movs	r2, #3
 800ac46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d02e      	beq.n	800acb0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac58:	d106      	bne.n	800ac68 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	639a      	str	r2, [r3, #56]	; 0x38
 800ac66:	e029      	b.n	800acbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac6e:	d10a      	bne.n	800ac86 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fb0f 	bl	800b294 <SD_WideBus_Enable>
 800ac76:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	639a      	str	r2, [r3, #56]	; 0x38
 800ac84:	e01a      	b.n	800acbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fb4c 	bl	800b32a <SD_WideBus_Disable>
 800ac92:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	639a      	str	r2, [r3, #56]	; 0x38
 800aca0:	e00c      	b.n	800acbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	639a      	str	r2, [r3, #56]	; 0x38
 800acae:	e005      	b.n	800acbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d009      	beq.n	800acd8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a18      	ldr	r2, [pc, #96]	; (800ad2c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800acca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e024      	b.n	800ad22 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681d      	ldr	r5, [r3, #0]
 800acfe:	466c      	mov	r4, sp
 800ad00:	f107 0318 	add.w	r3, r7, #24
 800ad04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad0c:	f107 030c 	add.w	r3, r7, #12
 800ad10:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad12:	4628      	mov	r0, r5
 800ad14:	f002 fcb2 	bl	800d67c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3728      	adds	r7, #40	; 0x28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bdb0      	pop	{r4, r5, r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	004005ff 	.word	0x004005ff

0800ad30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ad3c:	f107 030c 	add.w	r3, r7, #12
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa7e 	bl	800b244 <SD_SendStatus>
 800ad48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d005      	beq.n	800ad5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	431a      	orrs	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	0a5b      	lsrs	r3, r3, #9
 800ad60:	f003 030f 	and.w	r3, r3, #15
 800ad64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad66:	693b      	ldr	r3, [r7, #16]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ad8e:	bf00      	nop
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adac:	2b82      	cmp	r3, #130	; 0x82
 800adae:	d111      	bne.n	800add4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f002 fde7 	bl	800d988 <SDMMC_CmdStopTransfer>
 800adba:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d008      	beq.n	800add4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	431a      	orrs	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7ff fd58 	bl	800a884 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0208 	bic.w	r2, r2, #8
 800ade2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f240 523a 	movw	r2, #1338	; 0x53a
 800adec:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f003 fa3f 	bl	800e280 <HAL_SD_RxCpltCallback>
#endif
}
 800ae02:	bf00      	nop
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae18:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7fd f830 	bl	8007e80 <HAL_DMA_GetError>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d03e      	beq.n	800aea4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae34:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d002      	beq.n	800ae42 <SD_DMAError+0x36>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d12d      	bne.n	800ae9e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a19      	ldr	r2, [pc, #100]	; (800aeac <SD_DMAError+0xa0>)
 800ae48:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ae58:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ae66:	6978      	ldr	r0, [r7, #20]
 800ae68:	f7ff ff62 	bl	800ad30 <HAL_SD_GetCardState>
 800ae6c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b06      	cmp	r3, #6
 800ae72:	d002      	beq.n	800ae7a <SD_DMAError+0x6e>
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b05      	cmp	r3, #5
 800ae78:	d10a      	bne.n	800ae90 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f002 fd82 	bl	800d988 <SDMMC_CmdStopTransfer>
 800ae84:	4602      	mov	r2, r0
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ae9e:	6978      	ldr	r0, [r7, #20]
 800aea0:	f7ff fcf0 	bl	800a884 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aea4:	bf00      	nop
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	004005ff 	.word	0x004005ff

0800aeb0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f240 523a 	movw	r2, #1338	; 0x53a
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff ff31 	bl	800ad30 <HAL_SD_GetCardState>
 800aece:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b06      	cmp	r3, #6
 800aee2:	d002      	beq.n	800aeea <SD_DMATxAbort+0x3a>
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b05      	cmp	r3, #5
 800aee8:	d10a      	bne.n	800af00 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f002 fd4a 	bl	800d988 <SDMMC_CmdStopTransfer>
 800aef4:	4602      	mov	r2, r0
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	431a      	orrs	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af04:	2b00      	cmp	r3, #0
 800af06:	d103      	bne.n	800af10 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f003 f9a5 	bl	800e258 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800af0e:	e002      	b.n	800af16 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff fcb7 	bl	800a884 <HAL_SD_ErrorCallback>
}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f240 523a 	movw	r2, #1338	; 0x53a
 800af34:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f7ff fefa 	bl	800ad30 <HAL_SD_GetCardState>
 800af3c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b06      	cmp	r3, #6
 800af50:	d002      	beq.n	800af58 <SD_DMARxAbort+0x3a>
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b05      	cmp	r3, #5
 800af56:	d10a      	bne.n	800af6e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 fd13 	bl	800d988 <SDMMC_CmdStopTransfer>
 800af62:	4602      	mov	r2, r0
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	431a      	orrs	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	2b00      	cmp	r3, #0
 800af74:	d103      	bne.n	800af7e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f003 f96e 	bl	800e258 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800af7c:	e002      	b.n	800af84 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff fc80 	bl	800a884 <HAL_SD_ErrorCallback>
}
 800af84:	bf00      	nop
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af8c:	b5b0      	push	{r4, r5, r7, lr}
 800af8e:	b094      	sub	sp, #80	; 0x50
 800af90:	af04      	add	r7, sp, #16
 800af92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800af94:	2301      	movs	r3, #1
 800af96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f002 fbc5 	bl	800d72c <SDIO_GetPowerState>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d102      	bne.n	800afae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afac:	e0b7      	b.n	800b11e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d02f      	beq.n	800b016 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4618      	mov	r0, r3
 800afbc:	f002 fdee 	bl	800db9c <SDMMC_CmdSendCID>
 800afc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <SD_InitCard+0x40>
    {
      return errorstate;
 800afc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afca:	e0a8      	b.n	800b11e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2100      	movs	r1, #0
 800afd2:	4618      	mov	r0, r3
 800afd4:	f002 fbef 	bl	800d7b6 <SDIO_GetResponse>
 800afd8:	4602      	mov	r2, r0
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2104      	movs	r1, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f002 fbe6 	bl	800d7b6 <SDIO_GetResponse>
 800afea:	4602      	mov	r2, r0
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2108      	movs	r1, #8
 800aff6:	4618      	mov	r0, r3
 800aff8:	f002 fbdd 	bl	800d7b6 <SDIO_GetResponse>
 800affc:	4602      	mov	r2, r0
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	210c      	movs	r1, #12
 800b008:	4618      	mov	r0, r3
 800b00a:	f002 fbd4 	bl	800d7b6 <SDIO_GetResponse>
 800b00e:	4602      	mov	r2, r0
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d00d      	beq.n	800b03a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f107 020e 	add.w	r2, r7, #14
 800b026:	4611      	mov	r1, r2
 800b028:	4618      	mov	r0, r3
 800b02a:	f002 fdf4 	bl	800dc16 <SDMMC_CmdSetRelAdd>
 800b02e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <SD_InitCard+0xae>
    {
      return errorstate;
 800b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b038:	e071      	b.n	800b11e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d036      	beq.n	800b0b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b042:	89fb      	ldrh	r3, [r7, #14]
 800b044:	461a      	mov	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b052:	041b      	lsls	r3, r3, #16
 800b054:	4619      	mov	r1, r3
 800b056:	4610      	mov	r0, r2
 800b058:	f002 fdbe 	bl	800dbd8 <SDMMC_CmdSendCSD>
 800b05c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b066:	e05a      	b.n	800b11e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f002 fba1 	bl	800d7b6 <SDIO_GetResponse>
 800b074:	4602      	mov	r2, r0
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2104      	movs	r1, #4
 800b080:	4618      	mov	r0, r3
 800b082:	f002 fb98 	bl	800d7b6 <SDIO_GetResponse>
 800b086:	4602      	mov	r2, r0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2108      	movs	r1, #8
 800b092:	4618      	mov	r0, r3
 800b094:	f002 fb8f 	bl	800d7b6 <SDIO_GetResponse>
 800b098:	4602      	mov	r2, r0
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	210c      	movs	r1, #12
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f002 fb86 	bl	800d7b6 <SDIO_GetResponse>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2104      	movs	r1, #4
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f002 fb7d 	bl	800d7b6 <SDIO_GetResponse>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	0d1a      	lsrs	r2, r3, #20
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b0c4:	f107 0310 	add.w	r3, r7, #16
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff fbe4 	bl	800a898 <HAL_SD_GetCardCSD>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0da:	e020      	b.n	800b11e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6819      	ldr	r1, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	f04f 0400 	mov.w	r4, #0
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	4608      	mov	r0, r1
 800b0f0:	f002 fc6c 	bl	800d9cc <SDMMC_CmdSelDesel>
 800b0f4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <SD_InitCard+0x174>
  {
    return errorstate;
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fe:	e00e      	b.n	800b11e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681d      	ldr	r5, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	466c      	mov	r4, sp
 800b108:	f103 0210 	add.w	r2, r3, #16
 800b10c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b10e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b112:	3304      	adds	r3, #4
 800b114:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b116:	4628      	mov	r0, r5
 800b118:	f002 fab0 	bl	800d67c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3740      	adds	r7, #64	; 0x40
 800b122:	46bd      	mov	sp, r7
 800b124:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b128 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	2300      	movs	r3, #0
 800b13a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4618      	mov	r0, r3
 800b142:	f002 fc66 	bl	800da12 <SDMMC_CmdGoIdleState>
 800b146:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	e072      	b.n	800b238 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	f002 fc79 	bl	800da4e <SDMMC_CmdOperCond>
 800b15c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00d      	beq.n	800b180 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4618      	mov	r0, r3
 800b170:	f002 fc4f 	bl	800da12 <SDMMC_CmdGoIdleState>
 800b174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	e05b      	b.n	800b238 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d137      	bne.n	800b1fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f002 fc79 	bl	800da8c <SDMMC_CmdAppCommand>
 800b19a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d02d      	beq.n	800b1fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1a6:	e047      	b.n	800b238 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f002 fc6c 	bl	800da8c <SDMMC_CmdAppCommand>
 800b1b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <SD_PowerON+0x98>
    {
      return errorstate;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	e03b      	b.n	800b238 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	491e      	ldr	r1, [pc, #120]	; (800b240 <SD_PowerON+0x118>)
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f002 fc82 	bl	800dad0 <SDMMC_CmdAppOperCommand>
 800b1cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1d8:	e02e      	b.n	800b238 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f002 fae8 	bl	800d7b6 <SDIO_GetResponse>
 800b1e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	0fdb      	lsrs	r3, r3, #31
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <SD_PowerON+0xcc>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e000      	b.n	800b1f6 <SD_PowerON+0xce>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]

    count++;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b204:	4293      	cmp	r3, r2
 800b206:	d802      	bhi.n	800b20e <SD_PowerON+0xe6>
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0cc      	beq.n	800b1a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b214:	4293      	cmp	r3, r2
 800b216:	d902      	bls.n	800b21e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b21c:	e00c      	b.n	800b238 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	645a      	str	r2, [r3, #68]	; 0x44
 800b22e:	e002      	b.n	800b236 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	c1100000 	.word	0xc1100000

0800b244 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d102      	bne.n	800b25a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b258:	e018      	b.n	800b28c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b262:	041b      	lsls	r3, r3, #16
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f002 fcf6 	bl	800dc58 <SDMMC_CmdSendStatus>
 800b26c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	e009      	b.n	800b28c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f002 fa99 	bl	800d7b6 <SDIO_GetResponse>
 800b284:	4602      	mov	r2, r0
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 fa83 	bl	800d7b6 <SDIO_GetResponse>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2ba:	d102      	bne.n	800b2c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2c0:	e02f      	b.n	800b322 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b2c2:	f107 030c 	add.w	r3, r7, #12
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f879 	bl	800b3c0 <SD_FindSCR>
 800b2ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	e023      	b.n	800b322 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01c      	beq.n	800b31e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ec:	041b      	lsls	r3, r3, #16
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f002 fbcb 	bl	800da8c <SDMMC_CmdAppCommand>
 800b2f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	e00f      	b.n	800b322 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2102      	movs	r1, #2
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 fc04 	bl	800db16 <SDMMC_CmdBusWidth>
 800b30e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	e003      	b.n	800b322 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	e001      	b.n	800b322 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b31e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b086      	sub	sp, #24
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b332:	2300      	movs	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	2300      	movs	r3, #0
 800b338:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2100      	movs	r1, #0
 800b340:	4618      	mov	r0, r3
 800b342:	f002 fa38 	bl	800d7b6 <SDIO_GetResponse>
 800b346:	4603      	mov	r3, r0
 800b348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b34c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b350:	d102      	bne.n	800b358 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b356:	e02f      	b.n	800b3b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b358:	f107 030c 	add.w	r3, r7, #12
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f82e 	bl	800b3c0 <SD_FindSCR>
 800b364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	e023      	b.n	800b3b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d01c      	beq.n	800b3b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b382:	041b      	lsls	r3, r3, #16
 800b384:	4619      	mov	r1, r3
 800b386:	4610      	mov	r0, r2
 800b388:	f002 fb80 	bl	800da8c <SDMMC_CmdAppCommand>
 800b38c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	e00f      	b.n	800b3b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2100      	movs	r1, #0
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f002 fbb9 	bl	800db16 <SDMMC_CmdBusWidth>
 800b3a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	e003      	b.n	800b3b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e001      	b.n	800b3b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b08f      	sub	sp, #60	; 0x3c
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b3ca:	f7fb fd63 	bl	8006e94 <HAL_GetTick>
 800b3ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60bb      	str	r3, [r7, #8]
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2108      	movs	r1, #8
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f002 fa24 	bl	800d834 <SDMMC_CmdBlockLength>
 800b3ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	e0a9      	b.n	800b54c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f002 fb41 	bl	800da8c <SDMMC_CmdAppCommand>
 800b40a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	e09a      	b.n	800b54c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b416:	f04f 33ff 	mov.w	r3, #4294967295
 800b41a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b41c:	2308      	movs	r3, #8
 800b41e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b420:	2330      	movs	r3, #48	; 0x30
 800b422:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b424:	2302      	movs	r3, #2
 800b426:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b428:	2300      	movs	r3, #0
 800b42a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f107 0210 	add.w	r2, r7, #16
 800b438:	4611      	mov	r1, r2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f002 f9ce 	bl	800d7dc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4618      	mov	r0, r3
 800b446:	f002 fb88 	bl	800db5a <SDMMC_CmdSendSCR>
 800b44a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d022      	beq.n	800b498 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	e07a      	b.n	800b54c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00e      	beq.n	800b482 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6819      	ldr	r1, [r3, #0]
 800b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	f107 0208 	add.w	r2, r7, #8
 800b470:	18d4      	adds	r4, r2, r3
 800b472:	4608      	mov	r0, r1
 800b474:	f002 f92d 	bl	800d6d2 <SDIO_ReadFIFO>
 800b478:	4603      	mov	r3, r0
 800b47a:	6023      	str	r3, [r4, #0]
      index++;
 800b47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47e:	3301      	adds	r3, #1
 800b480:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b482:	f7fb fd07 	bl	8006e94 <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b490:	d102      	bne.n	800b498 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b496:	e059      	b.n	800b54c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b49e:	f240 432a 	movw	r3, #1066	; 0x42a
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0d6      	beq.n	800b456 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ae:	f003 0308 	and.w	r3, r3, #8
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b4be:	2308      	movs	r3, #8
 800b4c0:	e044      	b.n	800b54c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d005      	beq.n	800b4dc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e037      	b.n	800b54c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	f003 0320 	and.w	r3, r3, #32
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b4f2:	2320      	movs	r3, #32
 800b4f4:	e02a      	b.n	800b54c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f240 523a 	movw	r2, #1338	; 0x53a
 800b4fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	061a      	lsls	r2, r3, #24
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	021b      	lsls	r3, r3, #8
 800b508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b50c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	0a1b      	lsrs	r3, r3, #8
 800b512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b516:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	0e1b      	lsrs	r3, r3, #24
 800b51c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	601a      	str	r2, [r3, #0]
    scr++;
 800b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b524:	3304      	adds	r3, #4
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	061a      	lsls	r2, r3, #24
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	021b      	lsls	r3, r3, #8
 800b530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b534:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b53e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	0e1b      	lsrs	r3, r3, #24
 800b544:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	373c      	adds	r7, #60	; 0x3c
 800b550:	46bd      	mov	sp, r7
 800b552:	bd90      	pop	{r4, r7, pc}

0800b554 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b560:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d03f      	beq.n	800b5ee <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]
 800b572:	e033      	b.n	800b5dc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f002 f8aa 	bl	800d6d2 <SDIO_ReadFIFO>
 800b57e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	b2da      	uxtb	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	3b01      	subs	r3, #1
 800b592:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	0a1b      	lsrs	r3, r3, #8
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	0c1b      	lsrs	r3, r3, #16
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	0e1b      	lsrs	r3, r3, #24
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2b07      	cmp	r3, #7
 800b5e0:	d9c8      	bls.n	800b574 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b5ee:	bf00      	nop
 800b5f0:	3718      	adds	r7, #24
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b086      	sub	sp, #24
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d043      	beq.n	800b698 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b610:	2300      	movs	r3, #0
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e037      	b.n	800b686 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3301      	adds	r3, #1
 800b620:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	3b01      	subs	r3, #1
 800b626:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	021a      	lsls	r2, r3, #8
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	4313      	orrs	r3, r2
 800b632:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3301      	adds	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	041a      	lsls	r2, r3, #16
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	4313      	orrs	r3, r2
 800b64a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3301      	adds	r3, #1
 800b650:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3b01      	subs	r3, #1
 800b656:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	061a      	lsls	r2, r3, #24
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	4313      	orrs	r3, r2
 800b662:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3301      	adds	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f107 0208 	add.w	r2, r7, #8
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f002 f836 	bl	800d6ec <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	3301      	adds	r3, #1
 800b684:	617b      	str	r3, [r7, #20]
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b07      	cmp	r3, #7
 800b68a:	d9c4      	bls.n	800b616 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b698:	bf00      	nop
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e056      	b.n	800b760 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7f9 fd05 	bl	80050dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	431a      	orrs	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	431a      	orrs	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	431a      	orrs	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b70e:	431a      	orrs	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	ea42 0103 	orr.w	r1, r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	0c1b      	lsrs	r3, r3, #16
 800b730:	f003 0104 	and.w	r1, r3, #4
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	430a      	orrs	r2, r1
 800b73e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69da      	ldr	r2, [r3, #28]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b74e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b782:	2b01      	cmp	r3, #1
 800b784:	d101      	bne.n	800b78a <HAL_SPI_Transmit+0x22>
 800b786:	2302      	movs	r3, #2
 800b788:	e11e      	b.n	800b9c8 <HAL_SPI_Transmit+0x260>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b792:	f7fb fb7f 	bl	8006e94 <HAL_GetTick>
 800b796:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b798:	88fb      	ldrh	r3, [r7, #6]
 800b79a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d002      	beq.n	800b7ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b7ac:	e103      	b.n	800b9b6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <HAL_SPI_Transmit+0x52>
 800b7b4:	88fb      	ldrh	r3, [r7, #6]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d102      	bne.n	800b7c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b7be:	e0fa      	b.n	800b9b6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2203      	movs	r2, #3
 800b7c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	88fa      	ldrh	r2, [r7, #6]
 800b7d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	88fa      	ldrh	r2, [r7, #6]
 800b7de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b806:	d107      	bne.n	800b818 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b816:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b822:	2b40      	cmp	r3, #64	; 0x40
 800b824:	d007      	beq.n	800b836 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b83e:	d14b      	bne.n	800b8d8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <HAL_SPI_Transmit+0xe6>
 800b848:	8afb      	ldrh	r3, [r7, #22]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d13e      	bne.n	800b8cc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b852:	881a      	ldrh	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85e:	1c9a      	adds	r2, r3, #2
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b868:	b29b      	uxth	r3, r3
 800b86a:	3b01      	subs	r3, #1
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b872:	e02b      	b.n	800b8cc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d112      	bne.n	800b8a8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b886:	881a      	ldrh	r2, [r3, #0]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b892:	1c9a      	adds	r2, r3, #2
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	86da      	strh	r2, [r3, #54]	; 0x36
 800b8a6:	e011      	b.n	800b8cc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8a8:	f7fb faf4 	bl	8006e94 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d803      	bhi.n	800b8c0 <HAL_SPI_Transmit+0x158>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8be:	d102      	bne.n	800b8c6 <HAL_SPI_Transmit+0x15e>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b8ca:	e074      	b.n	800b9b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1ce      	bne.n	800b874 <HAL_SPI_Transmit+0x10c>
 800b8d6:	e04c      	b.n	800b972 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <HAL_SPI_Transmit+0x17e>
 800b8e0:	8afb      	ldrh	r3, [r7, #22]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d140      	bne.n	800b968 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	330c      	adds	r3, #12
 800b8f0:	7812      	ldrb	r2, [r2, #0]
 800b8f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b902:	b29b      	uxth	r3, r3
 800b904:	3b01      	subs	r3, #1
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b90c:	e02c      	b.n	800b968 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	f003 0302 	and.w	r3, r3, #2
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d113      	bne.n	800b944 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	330c      	adds	r3, #12
 800b926:	7812      	ldrb	r2, [r2, #0]
 800b928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b938:	b29b      	uxth	r3, r3
 800b93a:	3b01      	subs	r3, #1
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	86da      	strh	r2, [r3, #54]	; 0x36
 800b942:	e011      	b.n	800b968 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b944:	f7fb faa6 	bl	8006e94 <HAL_GetTick>
 800b948:	4602      	mov	r2, r0
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d803      	bhi.n	800b95c <HAL_SPI_Transmit+0x1f4>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95a:	d102      	bne.n	800b962 <HAL_SPI_Transmit+0x1fa>
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d102      	bne.n	800b968 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b966:	e026      	b.n	800b9b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1cd      	bne.n	800b90e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f000 fba4 	bl	800c0c4 <SPI_EndRxTxTransaction>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2220      	movs	r2, #32
 800b986:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b990:	2300      	movs	r3, #0
 800b992:	613b      	str	r3, [r7, #16]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	613b      	str	r3, [r7, #16]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	613b      	str	r3, [r7, #16]
 800b9a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	77fb      	strb	r3, [r7, #31]
 800b9b2:	e000      	b.n	800b9b6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b9b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b9c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3720      	adds	r7, #32
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af02      	add	r7, sp, #8
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9ec:	d112      	bne.n	800ba14 <HAL_SPI_Receive+0x44>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10e      	bne.n	800ba14 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b9fe:	88fa      	ldrh	r2, [r7, #6]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4613      	mov	r3, r2
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 f8e9 	bl	800bbe2 <HAL_SPI_TransmitReceive>
 800ba10:	4603      	mov	r3, r0
 800ba12:	e0e2      	b.n	800bbda <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d101      	bne.n	800ba22 <HAL_SPI_Receive+0x52>
 800ba1e:	2302      	movs	r3, #2
 800ba20:	e0db      	b.n	800bbda <HAL_SPI_Receive+0x20a>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba2a:	f7fb fa33 	bl	8006e94 <HAL_GetTick>
 800ba2e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d002      	beq.n	800ba42 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba40:	e0c2      	b.n	800bbc8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <HAL_SPI_Receive+0x7e>
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d102      	bne.n	800ba54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba52:	e0b9      	b.n	800bbc8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2204      	movs	r2, #4
 800ba58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	88fa      	ldrh	r2, [r7, #6]
 800ba72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba9a:	d107      	bne.n	800baac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800baaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab6:	2b40      	cmp	r3, #64	; 0x40
 800bab8:	d007      	beq.n	800baca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bac8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d162      	bne.n	800bb98 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bad2:	e02e      	b.n	800bb32 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d115      	bne.n	800bb0e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f103 020c 	add.w	r2, r3, #12
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baee:	7812      	ldrb	r2, [r2, #0]
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	3b01      	subs	r3, #1
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb0c:	e011      	b.n	800bb32 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb0e:	f7fb f9c1 	bl	8006e94 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d803      	bhi.n	800bb26 <HAL_SPI_Receive+0x156>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb24:	d102      	bne.n	800bb2c <HAL_SPI_Receive+0x15c>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bb30:	e04a      	b.n	800bbc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1cb      	bne.n	800bad4 <HAL_SPI_Receive+0x104>
 800bb3c:	e031      	b.n	800bba2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d113      	bne.n	800bb74 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb56:	b292      	uxth	r2, r2
 800bb58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5e:	1c9a      	adds	r2, r3, #2
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb72:	e011      	b.n	800bb98 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb74:	f7fb f98e 	bl	8006e94 <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d803      	bhi.n	800bb8c <HAL_SPI_Receive+0x1bc>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8a:	d102      	bne.n	800bb92 <HAL_SPI_Receive+0x1c2>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d102      	bne.n	800bb98 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bb92:	2303      	movs	r3, #3
 800bb94:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bb96:	e017      	b.n	800bbc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1cd      	bne.n	800bb3e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 fa27 	bl	800bffa <SPI_EndRxTransaction>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	75fb      	strb	r3, [r7, #23]
 800bbc4:	e000      	b.n	800bbc8 <HAL_SPI_Receive+0x1f8>
  }

error :
 800bbc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b08c      	sub	sp, #48	; 0x30
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
 800bbee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d101      	bne.n	800bc08 <HAL_SPI_TransmitReceive+0x26>
 800bc04:	2302      	movs	r3, #2
 800bc06:	e18a      	b.n	800bf1e <HAL_SPI_TransmitReceive+0x33c>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc10:	f7fb f940 	bl	8006e94 <HAL_GetTick>
 800bc14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bc26:	887b      	ldrh	r3, [r7, #2]
 800bc28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bc2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d00f      	beq.n	800bc52 <HAL_SPI_TransmitReceive+0x70>
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc38:	d107      	bne.n	800bc4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d103      	bne.n	800bc4a <HAL_SPI_TransmitReceive+0x68>
 800bc42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc46:	2b04      	cmp	r3, #4
 800bc48:	d003      	beq.n	800bc52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bc50:	e15b      	b.n	800bf0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d005      	beq.n	800bc64 <HAL_SPI_TransmitReceive+0x82>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_SPI_TransmitReceive+0x82>
 800bc5e:	887b      	ldrh	r3, [r7, #2]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d103      	bne.n	800bc6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bc6a:	e14e      	b.n	800bf0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d003      	beq.n	800bc80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2205      	movs	r2, #5
 800bc7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	887a      	ldrh	r2, [r7, #2]
 800bc90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	887a      	ldrh	r2, [r7, #2]
 800bc96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	887a      	ldrh	r2, [r7, #2]
 800bca2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	887a      	ldrh	r2, [r7, #2]
 800bca8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b40      	cmp	r3, #64	; 0x40
 800bcc2:	d007      	beq.n	800bcd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcdc:	d178      	bne.n	800bdd0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <HAL_SPI_TransmitReceive+0x10a>
 800bce6:	8b7b      	ldrh	r3, [r7, #26]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d166      	bne.n	800bdba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf0:	881a      	ldrh	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfc:	1c9a      	adds	r2, r3, #2
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd10:	e053      	b.n	800bdba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d11b      	bne.n	800bd58 <HAL_SPI_TransmitReceive+0x176>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d016      	beq.n	800bd58 <HAL_SPI_TransmitReceive+0x176>
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d113      	bne.n	800bd58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd34:	881a      	ldrh	r2, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd40:	1c9a      	adds	r2, r3, #2
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd54:	2300      	movs	r3, #0
 800bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d119      	bne.n	800bd9a <HAL_SPI_TransmitReceive+0x1b8>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d014      	beq.n	800bd9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7a:	b292      	uxth	r2, r2
 800bd7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	1c9a      	adds	r2, r3, #2
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bd96:	2301      	movs	r3, #1
 800bd98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bd9a:	f7fb f87b 	bl	8006e94 <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d807      	bhi.n	800bdba <HAL_SPI_TransmitReceive+0x1d8>
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb0:	d003      	beq.n	800bdba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bdb8:	e0a7      	b.n	800bf0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1a6      	bne.n	800bd12 <HAL_SPI_TransmitReceive+0x130>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1a1      	bne.n	800bd12 <HAL_SPI_TransmitReceive+0x130>
 800bdce:	e07c      	b.n	800beca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <HAL_SPI_TransmitReceive+0x1fc>
 800bdd8:	8b7b      	ldrh	r3, [r7, #26]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d16b      	bne.n	800beb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	330c      	adds	r3, #12
 800bde8:	7812      	ldrb	r2, [r2, #0]
 800bdea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be04:	e057      	b.n	800beb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b02      	cmp	r3, #2
 800be12:	d11c      	bne.n	800be4e <HAL_SPI_TransmitReceive+0x26c>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be18:	b29b      	uxth	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d017      	beq.n	800be4e <HAL_SPI_TransmitReceive+0x26c>
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	2b01      	cmp	r3, #1
 800be22:	d114      	bne.n	800be4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	330c      	adds	r3, #12
 800be2e:	7812      	ldrb	r2, [r2, #0]
 800be30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be40:	b29b      	uxth	r3, r3
 800be42:	3b01      	subs	r3, #1
 800be44:	b29a      	uxth	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d119      	bne.n	800be90 <HAL_SPI_TransmitReceive+0x2ae>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be60:	b29b      	uxth	r3, r3
 800be62:	2b00      	cmp	r3, #0
 800be64:	d014      	beq.n	800be90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	b2d2      	uxtb	r2, r2
 800be72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be82:	b29b      	uxth	r3, r3
 800be84:	3b01      	subs	r3, #1
 800be86:	b29a      	uxth	r2, r3
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be8c:	2301      	movs	r3, #1
 800be8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800be90:	f7fb f800 	bl	8006e94 <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d803      	bhi.n	800bea8 <HAL_SPI_TransmitReceive+0x2c6>
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea6:	d102      	bne.n	800beae <HAL_SPI_TransmitReceive+0x2cc>
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d103      	bne.n	800beb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800beb4:	e029      	b.n	800bf0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beba:	b29b      	uxth	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1a2      	bne.n	800be06 <HAL_SPI_TransmitReceive+0x224>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d19d      	bne.n	800be06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800beca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800becc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f000 f8f8 	bl	800c0c4 <SPI_EndRxTxTransaction>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d006      	beq.n	800bee8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2220      	movs	r2, #32
 800bee4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bee6:	e010      	b.n	800bf0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10b      	bne.n	800bf08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	e000      	b.n	800bf0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bf08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bf1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3730      	adds	r7, #48	; 0x30
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	603b      	str	r3, [r7, #0]
 800bf32:	4613      	mov	r3, r2
 800bf34:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf36:	e04c      	b.n	800bfd2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3e:	d048      	beq.n	800bfd2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bf40:	f7fa ffa8 	bl	8006e94 <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d902      	bls.n	800bf56 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d13d      	bne.n	800bfd2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf6e:	d111      	bne.n	800bf94 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf78:	d004      	beq.n	800bf84 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf82:	d107      	bne.n	800bf94 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf9c:	d10f      	bne.n	800bfbe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e00f      	b.n	800bff2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	bf0c      	ite	eq
 800bfe2:	2301      	moveq	r3, #1
 800bfe4:	2300      	movne	r3, #0
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	461a      	mov	r2, r3
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d1a3      	bne.n	800bf38 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b086      	sub	sp, #24
 800bffe:	af02      	add	r7, sp, #8
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	60b9      	str	r1, [r7, #8]
 800c004:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c00e:	d111      	bne.n	800c034 <SPI_EndRxTransaction+0x3a>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c018:	d004      	beq.n	800c024 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c022:	d107      	bne.n	800c034 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c032:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c03c:	d12a      	bne.n	800c094 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c046:	d012      	beq.n	800c06e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2200      	movs	r2, #0
 800c050:	2180      	movs	r1, #128	; 0x80
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7ff ff67 	bl	800bf26 <SPI_WaitFlagStateUntilTimeout>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d02d      	beq.n	800c0ba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c062:	f043 0220 	orr.w	r2, r3, #32
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e026      	b.n	800c0bc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2200      	movs	r2, #0
 800c076:	2101      	movs	r1, #1
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff ff54 	bl	800bf26 <SPI_WaitFlagStateUntilTimeout>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d01a      	beq.n	800c0ba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c088:	f043 0220 	orr.w	r2, r3, #32
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e013      	b.n	800c0bc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2200      	movs	r2, #0
 800c09c:	2101      	movs	r1, #1
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f7ff ff41 	bl	800bf26 <SPI_WaitFlagStateUntilTimeout>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d007      	beq.n	800c0ba <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ae:	f043 0220 	orr.w	r2, r3, #32
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e000      	b.n	800c0bc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c0d0:	4b1b      	ldr	r3, [pc, #108]	; (800c140 <SPI_EndRxTxTransaction+0x7c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a1b      	ldr	r2, [pc, #108]	; (800c144 <SPI_EndRxTxTransaction+0x80>)
 800c0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0da:	0d5b      	lsrs	r3, r3, #21
 800c0dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0e0:	fb02 f303 	mul.w	r3, r2, r3
 800c0e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0ee:	d112      	bne.n	800c116 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	2180      	movs	r1, #128	; 0x80
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f7ff ff13 	bl	800bf26 <SPI_WaitFlagStateUntilTimeout>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d016      	beq.n	800c134 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10a:	f043 0220 	orr.w	r2, r3, #32
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e00f      	b.n	800c136 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00a      	beq.n	800c132 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	3b01      	subs	r3, #1
 800c120:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c12c:	2b80      	cmp	r3, #128	; 0x80
 800c12e:	d0f2      	beq.n	800c116 <SPI_EndRxTxTransaction+0x52>
 800c130:	e000      	b.n	800c134 <SPI_EndRxTxTransaction+0x70>
        break;
 800c132:	bf00      	nop
  }

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	20000000 	.word	0x20000000
 800c144:	165e9f81 	.word	0x165e9f81

0800c148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e01d      	b.n	800c196 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d106      	bne.n	800c174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7f9 f870 	bl	8005254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3304      	adds	r3, #4
 800c184:	4619      	mov	r1, r3
 800c186:	4610      	mov	r0, r2
 800c188:	f000 fb56 	bl	800c838 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b085      	sub	sp, #20
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68da      	ldr	r2, [r3, #12]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f042 0201 	orr.w	r2, r2, #1
 800c1b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b06      	cmp	r3, #6
 800c1c6:	d007      	beq.n	800c1d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f042 0201 	orr.w	r2, r2, #1
 800c1d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e01d      	b.n	800c234 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7f8 ffad 	bl	800516c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3304      	adds	r3, #4
 800c222:	4619      	mov	r1, r3
 800c224:	4610      	mov	r0, r2
 800c226:	f000 fb07 	bl	800c838 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2201      	movs	r2, #1
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fd42 	bl	800ccd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a15      	ldr	r2, [pc, #84]	; (800c2b0 <HAL_TIM_PWM_Start+0x74>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d004      	beq.n	800c268 <HAL_TIM_PWM_Start+0x2c>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a14      	ldr	r2, [pc, #80]	; (800c2b4 <HAL_TIM_PWM_Start+0x78>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d101      	bne.n	800c26c <HAL_TIM_PWM_Start+0x30>
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <HAL_TIM_PWM_Start+0x32>
 800c26c:	2300      	movs	r3, #0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	f003 0307 	and.w	r3, r3, #7
 800c28c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b06      	cmp	r3, #6
 800c292:	d007      	beq.n	800c2a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f042 0201 	orr.w	r2, r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	40010000 	.word	0x40010000
 800c2b4:	40010400 	.word	0x40010400

0800c2b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e083      	b.n	800c3d4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d106      	bne.n	800c2e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7f9 f847 	bl	8005374 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	6812      	ldr	r2, [r2, #0]
 800c2f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2fc:	f023 0307 	bic.w	r3, r3, #7
 800c300:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3304      	adds	r3, #4
 800c30a:	4619      	mov	r1, r3
 800c30c:	4610      	mov	r0, r2
 800c30e:	f000 fa93 	bl	800c838 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6a1b      	ldr	r3, [r3, #32]
 800c328:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	4313      	orrs	r3, r2
 800c332:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33a:	f023 0303 	bic.w	r3, r3, #3
 800c33e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	4313      	orrs	r3, r2
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	4313      	orrs	r3, r2
 800c350:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c358:	f023 030c 	bic.w	r3, r3, #12
 800c35c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	68da      	ldr	r2, [r3, #12]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	69db      	ldr	r3, [r3, #28]
 800c372:	021b      	lsls	r3, r3, #8
 800c374:	4313      	orrs	r3, r2
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	4313      	orrs	r3, r2
 800c37a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	011a      	lsls	r2, r3, #4
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	031b      	lsls	r3, r3, #12
 800c388:	4313      	orrs	r3, r2
 800c38a:	693a      	ldr	r2, [r7, #16]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c396:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c39e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	685a      	ldr	r2, [r3, #4]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	011b      	lsls	r3, r3, #4
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <HAL_TIM_Encoder_Start+0x16>
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d008      	beq.n	800c402 <HAL_TIM_Encoder_Start+0x26>
 800c3f0:	e00f      	b.n	800c412 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fc6c 	bl	800ccd8 <TIM_CCxChannelCmd>
      break;
 800c400:	e016      	b.n	800c430 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2201      	movs	r2, #1
 800c408:	2104      	movs	r1, #4
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fc64 	bl	800ccd8 <TIM_CCxChannelCmd>
      break;
 800c410:	e00e      	b.n	800c430 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2201      	movs	r2, #1
 800c418:	2100      	movs	r1, #0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fc5c 	bl	800ccd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2201      	movs	r2, #1
 800c426:	2104      	movs	r1, #4
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fc55 	bl	800ccd8 <TIM_CCxChannelCmd>
      break;
 800c42e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d122      	bne.n	800c4a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f003 0302 	and.w	r3, r3, #2
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d11b      	bne.n	800c4a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f06f 0202 	mvn.w	r2, #2
 800c476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	f003 0303 	and.w	r3, r3, #3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d003      	beq.n	800c494 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f9b5 	bl	800c7fc <HAL_TIM_IC_CaptureCallback>
 800c492:	e005      	b.n	800c4a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 f9a7 	bl	800c7e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f9b8 	bl	800c810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b04      	cmp	r3, #4
 800c4b2:	d122      	bne.n	800c4fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	f003 0304 	and.w	r3, r3, #4
 800c4be:	2b04      	cmp	r3, #4
 800c4c0:	d11b      	bne.n	800c4fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f06f 0204 	mvn.w	r2, #4
 800c4ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d003      	beq.n	800c4e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f98b 	bl	800c7fc <HAL_TIM_IC_CaptureCallback>
 800c4e6:	e005      	b.n	800c4f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f97d 	bl	800c7e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f98e 	bl	800c810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	f003 0308 	and.w	r3, r3, #8
 800c504:	2b08      	cmp	r3, #8
 800c506:	d122      	bne.n	800c54e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	f003 0308 	and.w	r3, r3, #8
 800c512:	2b08      	cmp	r3, #8
 800c514:	d11b      	bne.n	800c54e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f06f 0208 	mvn.w	r2, #8
 800c51e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2204      	movs	r2, #4
 800c524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	f003 0303 	and.w	r3, r3, #3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f961 	bl	800c7fc <HAL_TIM_IC_CaptureCallback>
 800c53a:	e005      	b.n	800c548 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f953 	bl	800c7e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 f964 	bl	800c810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	f003 0310 	and.w	r3, r3, #16
 800c558:	2b10      	cmp	r3, #16
 800c55a:	d122      	bne.n	800c5a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f003 0310 	and.w	r3, r3, #16
 800c566:	2b10      	cmp	r3, #16
 800c568:	d11b      	bne.n	800c5a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f06f 0210 	mvn.w	r2, #16
 800c572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2208      	movs	r2, #8
 800c578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c584:	2b00      	cmp	r3, #0
 800c586:	d003      	beq.n	800c590 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f937 	bl	800c7fc <HAL_TIM_IC_CaptureCallback>
 800c58e:	e005      	b.n	800c59c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f929 	bl	800c7e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f93a 	bl	800c810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d10e      	bne.n	800c5ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d107      	bne.n	800c5ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f06f 0201 	mvn.w	r2, #1
 800c5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7f7 fba9 	bl	8003d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d8:	2b80      	cmp	r3, #128	; 0x80
 800c5da:	d10e      	bne.n	800c5fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5e6:	2b80      	cmp	r3, #128	; 0x80
 800c5e8:	d107      	bne.n	800c5fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fc6d 	bl	800ced4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c604:	2b40      	cmp	r3, #64	; 0x40
 800c606:	d10e      	bne.n	800c626 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c612:	2b40      	cmp	r3, #64	; 0x40
 800c614:	d107      	bne.n	800c626 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f8ff 	bl	800c824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	f003 0320 	and.w	r3, r3, #32
 800c630:	2b20      	cmp	r3, #32
 800c632:	d10e      	bne.n	800c652 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f003 0320 	and.w	r3, r3, #32
 800c63e:	2b20      	cmp	r3, #32
 800c640:	d107      	bne.n	800c652 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f06f 0220 	mvn.w	r2, #32
 800c64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fc37 	bl	800cec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c652:	bf00      	nop
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
	...

0800c65c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d101      	bne.n	800c676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c672:	2302      	movs	r3, #2
 800c674:	e0b4      	b.n	800c7e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2202      	movs	r2, #2
 800c682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b0c      	cmp	r3, #12
 800c68a:	f200 809f 	bhi.w	800c7cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800c68e:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6c9 	.word	0x0800c6c9
 800c698:	0800c7cd 	.word	0x0800c7cd
 800c69c:	0800c7cd 	.word	0x0800c7cd
 800c6a0:	0800c7cd 	.word	0x0800c7cd
 800c6a4:	0800c709 	.word	0x0800c709
 800c6a8:	0800c7cd 	.word	0x0800c7cd
 800c6ac:	0800c7cd 	.word	0x0800c7cd
 800c6b0:	0800c7cd 	.word	0x0800c7cd
 800c6b4:	0800c74b 	.word	0x0800c74b
 800c6b8:	0800c7cd 	.word	0x0800c7cd
 800c6bc:	0800c7cd 	.word	0x0800c7cd
 800c6c0:	0800c7cd 	.word	0x0800c7cd
 800c6c4:	0800c78b 	.word	0x0800c78b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 f952 	bl	800c978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	699a      	ldr	r2, [r3, #24]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0208 	orr.w	r2, r2, #8
 800c6e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f022 0204 	bic.w	r2, r2, #4
 800c6f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6999      	ldr	r1, [r3, #24]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	691a      	ldr	r2, [r3, #16]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	430a      	orrs	r2, r1
 800c704:	619a      	str	r2, [r3, #24]
      break;
 800c706:	e062      	b.n	800c7ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f9a2 	bl	800ca58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6999      	ldr	r1, [r3, #24]
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	021a      	lsls	r2, r3, #8
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	430a      	orrs	r2, r1
 800c746:	619a      	str	r2, [r3, #24]
      break;
 800c748:	e041      	b.n	800c7ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68b9      	ldr	r1, [r7, #8]
 800c750:	4618      	mov	r0, r3
 800c752:	f000 f9f7 	bl	800cb44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	69da      	ldr	r2, [r3, #28]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f042 0208 	orr.w	r2, r2, #8
 800c764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	69da      	ldr	r2, [r3, #28]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f022 0204 	bic.w	r2, r2, #4
 800c774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	69d9      	ldr	r1, [r3, #28]
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	691a      	ldr	r2, [r3, #16]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	430a      	orrs	r2, r1
 800c786:	61da      	str	r2, [r3, #28]
      break;
 800c788:	e021      	b.n	800c7ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68b9      	ldr	r1, [r7, #8]
 800c790:	4618      	mov	r0, r3
 800c792:	f000 fa4b 	bl	800cc2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	69da      	ldr	r2, [r3, #28]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	69da      	ldr	r2, [r3, #28]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	69d9      	ldr	r1, [r3, #28]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	021a      	lsls	r2, r3, #8
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	430a      	orrs	r2, r1
 800c7c8:	61da      	str	r2, [r3, #28]
      break;
 800c7ca:	e000      	b.n	800c7ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c7cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a40      	ldr	r2, [pc, #256]	; (800c94c <TIM_Base_SetConfig+0x114>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d013      	beq.n	800c878 <TIM_Base_SetConfig+0x40>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c856:	d00f      	beq.n	800c878 <TIM_Base_SetConfig+0x40>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a3d      	ldr	r2, [pc, #244]	; (800c950 <TIM_Base_SetConfig+0x118>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d00b      	beq.n	800c878 <TIM_Base_SetConfig+0x40>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a3c      	ldr	r2, [pc, #240]	; (800c954 <TIM_Base_SetConfig+0x11c>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d007      	beq.n	800c878 <TIM_Base_SetConfig+0x40>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a3b      	ldr	r2, [pc, #236]	; (800c958 <TIM_Base_SetConfig+0x120>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d003      	beq.n	800c878 <TIM_Base_SetConfig+0x40>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a3a      	ldr	r2, [pc, #232]	; (800c95c <TIM_Base_SetConfig+0x124>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d108      	bne.n	800c88a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c87e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a2f      	ldr	r2, [pc, #188]	; (800c94c <TIM_Base_SetConfig+0x114>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d02b      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c898:	d027      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a2c      	ldr	r2, [pc, #176]	; (800c950 <TIM_Base_SetConfig+0x118>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d023      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a2b      	ldr	r2, [pc, #172]	; (800c954 <TIM_Base_SetConfig+0x11c>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d01f      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4a2a      	ldr	r2, [pc, #168]	; (800c958 <TIM_Base_SetConfig+0x120>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d01b      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4a29      	ldr	r2, [pc, #164]	; (800c95c <TIM_Base_SetConfig+0x124>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d017      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a28      	ldr	r2, [pc, #160]	; (800c960 <TIM_Base_SetConfig+0x128>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d013      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a27      	ldr	r2, [pc, #156]	; (800c964 <TIM_Base_SetConfig+0x12c>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d00f      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a26      	ldr	r2, [pc, #152]	; (800c968 <TIM_Base_SetConfig+0x130>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d00b      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a25      	ldr	r2, [pc, #148]	; (800c96c <TIM_Base_SetConfig+0x134>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d007      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a24      	ldr	r2, [pc, #144]	; (800c970 <TIM_Base_SetConfig+0x138>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d003      	beq.n	800c8ea <TIM_Base_SetConfig+0xb2>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a23      	ldr	r2, [pc, #140]	; (800c974 <TIM_Base_SetConfig+0x13c>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d108      	bne.n	800c8fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	695b      	ldr	r3, [r3, #20]
 800c906:	4313      	orrs	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	689a      	ldr	r2, [r3, #8]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a0a      	ldr	r2, [pc, #40]	; (800c94c <TIM_Base_SetConfig+0x114>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d003      	beq.n	800c930 <TIM_Base_SetConfig+0xf8>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a0c      	ldr	r2, [pc, #48]	; (800c95c <TIM_Base_SetConfig+0x124>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d103      	bne.n	800c938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	691a      	ldr	r2, [r3, #16]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	615a      	str	r2, [r3, #20]
}
 800c93e:	bf00      	nop
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	40010000 	.word	0x40010000
 800c950:	40000400 	.word	0x40000400
 800c954:	40000800 	.word	0x40000800
 800c958:	40000c00 	.word	0x40000c00
 800c95c:	40010400 	.word	0x40010400
 800c960:	40014000 	.word	0x40014000
 800c964:	40014400 	.word	0x40014400
 800c968:	40014800 	.word	0x40014800
 800c96c:	40001800 	.word	0x40001800
 800c970:	40001c00 	.word	0x40001c00
 800c974:	40002000 	.word	0x40002000

0800c978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	f023 0201 	bic.w	r2, r3, #1
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f023 0302 	bic.w	r3, r3, #2
 800c9c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a20      	ldr	r2, [pc, #128]	; (800ca50 <TIM_OC1_SetConfig+0xd8>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d003      	beq.n	800c9dc <TIM_OC1_SetConfig+0x64>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a1f      	ldr	r2, [pc, #124]	; (800ca54 <TIM_OC1_SetConfig+0xdc>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d10c      	bne.n	800c9f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f023 0308 	bic.w	r3, r3, #8
 800c9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f023 0304 	bic.w	r3, r3, #4
 800c9f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a15      	ldr	r2, [pc, #84]	; (800ca50 <TIM_OC1_SetConfig+0xd8>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d003      	beq.n	800ca06 <TIM_OC1_SetConfig+0x8e>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a14      	ldr	r2, [pc, #80]	; (800ca54 <TIM_OC1_SetConfig+0xdc>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d111      	bne.n	800ca2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	699b      	ldr	r3, [r3, #24]
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	621a      	str	r2, [r3, #32]
}
 800ca44:	bf00      	nop
 800ca46:	371c      	adds	r7, #28
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr
 800ca50:	40010000 	.word	0x40010000
 800ca54:	40010400 	.word	0x40010400

0800ca58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	f023 0210 	bic.w	r2, r3, #16
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	021b      	lsls	r3, r3, #8
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	f023 0320 	bic.w	r3, r3, #32
 800caa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	011b      	lsls	r3, r3, #4
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	4313      	orrs	r3, r2
 800caae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a22      	ldr	r2, [pc, #136]	; (800cb3c <TIM_OC2_SetConfig+0xe4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d003      	beq.n	800cac0 <TIM_OC2_SetConfig+0x68>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a21      	ldr	r2, [pc, #132]	; (800cb40 <TIM_OC2_SetConfig+0xe8>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d10d      	bne.n	800cadc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	011b      	lsls	r3, r3, #4
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a17      	ldr	r2, [pc, #92]	; (800cb3c <TIM_OC2_SetConfig+0xe4>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d003      	beq.n	800caec <TIM_OC2_SetConfig+0x94>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a16      	ldr	r2, [pc, #88]	; (800cb40 <TIM_OC2_SetConfig+0xe8>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d113      	bne.n	800cb14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800caf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cafa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	621a      	str	r2, [r3, #32]
}
 800cb2e:	bf00      	nop
 800cb30:	371c      	adds	r7, #28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	40010000 	.word	0x40010000
 800cb40:	40010400 	.word	0x40010400

0800cb44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0303 	bic.w	r3, r3, #3
 800cb7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a21      	ldr	r2, [pc, #132]	; (800cc24 <TIM_OC3_SetConfig+0xe0>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d003      	beq.n	800cbaa <TIM_OC3_SetConfig+0x66>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a20      	ldr	r2, [pc, #128]	; (800cc28 <TIM_OC3_SetConfig+0xe4>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d10d      	bne.n	800cbc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	021b      	lsls	r3, r3, #8
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cbc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a16      	ldr	r2, [pc, #88]	; (800cc24 <TIM_OC3_SetConfig+0xe0>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d003      	beq.n	800cbd6 <TIM_OC3_SetConfig+0x92>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a15      	ldr	r2, [pc, #84]	; (800cc28 <TIM_OC3_SetConfig+0xe4>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d113      	bne.n	800cbfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	011b      	lsls	r3, r3, #4
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	621a      	str	r2, [r3, #32]
}
 800cc18:	bf00      	nop
 800cc1a:	371c      	adds	r7, #28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	40010000 	.word	0x40010000
 800cc28:	40010400 	.word	0x40010400

0800cc2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	021b      	lsls	r3, r3, #8
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	031b      	lsls	r3, r3, #12
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a12      	ldr	r2, [pc, #72]	; (800ccd0 <TIM_OC4_SetConfig+0xa4>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d003      	beq.n	800cc94 <TIM_OC4_SetConfig+0x68>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a11      	ldr	r2, [pc, #68]	; (800ccd4 <TIM_OC4_SetConfig+0xa8>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d109      	bne.n	800cca8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	019b      	lsls	r3, r3, #6
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	693a      	ldr	r2, [r7, #16]
 800ccc0:	621a      	str	r2, [r3, #32]
}
 800ccc2:	bf00      	nop
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	40010000 	.word	0x40010000
 800ccd4:	40010400 	.word	0x40010400

0800ccd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b087      	sub	sp, #28
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f003 031f 	and.w	r3, r3, #31
 800ccea:	2201      	movs	r2, #1
 800ccec:	fa02 f303 	lsl.w	r3, r2, r3
 800ccf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6a1a      	ldr	r2, [r3, #32]
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	43db      	mvns	r3, r3
 800ccfa:	401a      	ands	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6a1a      	ldr	r2, [r3, #32]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	f003 031f 	and.w	r3, r3, #31
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd10:	431a      	orrs	r2, r3
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	621a      	str	r2, [r3, #32]
}
 800cd16:	bf00      	nop
 800cd18:	371c      	adds	r7, #28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
	...

0800cd24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d101      	bne.n	800cd3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd38:	2302      	movs	r3, #2
 800cd3a:	e05a      	b.n	800cdf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2202      	movs	r2, #2
 800cd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a21      	ldr	r2, [pc, #132]	; (800ce00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d022      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd88:	d01d      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a1d      	ldr	r2, [pc, #116]	; (800ce04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d018      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a1b      	ldr	r2, [pc, #108]	; (800ce08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d013      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a1a      	ldr	r2, [pc, #104]	; (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d00e      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a18      	ldr	r2, [pc, #96]	; (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d009      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a17      	ldr	r2, [pc, #92]	; (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d004      	beq.n	800cdc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a15      	ldr	r2, [pc, #84]	; (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d10c      	bne.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3714      	adds	r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	40010000 	.word	0x40010000
 800ce04:	40000400 	.word	0x40000400
 800ce08:	40000800 	.word	0x40000800
 800ce0c:	40000c00 	.word	0x40000c00
 800ce10:	40010400 	.word	0x40010400
 800ce14:	40014000 	.word	0x40014000
 800ce18:	40001800 	.word	0x40001800

0800ce1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d101      	bne.n	800ce38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce34:	2302      	movs	r3, #2
 800ce36:	e03d      	b.n	800ceb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	e03f      	b.n	800cf7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d106      	bne.n	800cf14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7f8 fb5a 	bl	80055c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2224      	movs	r2, #36	; 0x24
 800cf18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68da      	ldr	r2, [r3, #12]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f829 	bl	800cf84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	691a      	ldr	r2, [r3, #16]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	695a      	ldr	r2, [r3, #20]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68da      	ldr	r2, [r3, #12]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2220      	movs	r2, #32
 800cf74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
	...

0800cf84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	b085      	sub	sp, #20
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	430a      	orrs	r2, r1
 800cfa2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	431a      	orrs	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	695b      	ldr	r3, [r3, #20]
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	69db      	ldr	r3, [r3, #28]
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cfc6:	f023 030c 	bic.w	r3, r3, #12
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	6812      	ldr	r2, [r2, #0]
 800cfce:	68f9      	ldr	r1, [r7, #12]
 800cfd0:	430b      	orrs	r3, r1
 800cfd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	699a      	ldr	r2, [r3, #24]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cff2:	f040 818b 	bne.w	800d30c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4ac1      	ldr	r2, [pc, #772]	; (800d300 <UART_SetConfig+0x37c>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d005      	beq.n	800d00c <UART_SetConfig+0x88>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4abf      	ldr	r2, [pc, #764]	; (800d304 <UART_SetConfig+0x380>)
 800d006:	4293      	cmp	r3, r2
 800d008:	f040 80bd 	bne.w	800d186 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d00c:	f7fc fbcc 	bl	80097a8 <HAL_RCC_GetPCLK2Freq>
 800d010:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	461d      	mov	r5, r3
 800d016:	f04f 0600 	mov.w	r6, #0
 800d01a:	46a8      	mov	r8, r5
 800d01c:	46b1      	mov	r9, r6
 800d01e:	eb18 0308 	adds.w	r3, r8, r8
 800d022:	eb49 0409 	adc.w	r4, r9, r9
 800d026:	4698      	mov	r8, r3
 800d028:	46a1      	mov	r9, r4
 800d02a:	eb18 0805 	adds.w	r8, r8, r5
 800d02e:	eb49 0906 	adc.w	r9, r9, r6
 800d032:	f04f 0100 	mov.w	r1, #0
 800d036:	f04f 0200 	mov.w	r2, #0
 800d03a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d03e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d042:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d046:	4688      	mov	r8, r1
 800d048:	4691      	mov	r9, r2
 800d04a:	eb18 0005 	adds.w	r0, r8, r5
 800d04e:	eb49 0106 	adc.w	r1, r9, r6
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	461d      	mov	r5, r3
 800d058:	f04f 0600 	mov.w	r6, #0
 800d05c:	196b      	adds	r3, r5, r5
 800d05e:	eb46 0406 	adc.w	r4, r6, r6
 800d062:	461a      	mov	r2, r3
 800d064:	4623      	mov	r3, r4
 800d066:	f7f3 fe27 	bl	8000cb8 <__aeabi_uldivmod>
 800d06a:	4603      	mov	r3, r0
 800d06c:	460c      	mov	r4, r1
 800d06e:	461a      	mov	r2, r3
 800d070:	4ba5      	ldr	r3, [pc, #660]	; (800d308 <UART_SetConfig+0x384>)
 800d072:	fba3 2302 	umull	r2, r3, r3, r2
 800d076:	095b      	lsrs	r3, r3, #5
 800d078:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	461d      	mov	r5, r3
 800d080:	f04f 0600 	mov.w	r6, #0
 800d084:	46a9      	mov	r9, r5
 800d086:	46b2      	mov	sl, r6
 800d088:	eb19 0309 	adds.w	r3, r9, r9
 800d08c:	eb4a 040a 	adc.w	r4, sl, sl
 800d090:	4699      	mov	r9, r3
 800d092:	46a2      	mov	sl, r4
 800d094:	eb19 0905 	adds.w	r9, r9, r5
 800d098:	eb4a 0a06 	adc.w	sl, sl, r6
 800d09c:	f04f 0100 	mov.w	r1, #0
 800d0a0:	f04f 0200 	mov.w	r2, #0
 800d0a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d0ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	4692      	mov	sl, r2
 800d0b4:	eb19 0005 	adds.w	r0, r9, r5
 800d0b8:	eb4a 0106 	adc.w	r1, sl, r6
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	461d      	mov	r5, r3
 800d0c2:	f04f 0600 	mov.w	r6, #0
 800d0c6:	196b      	adds	r3, r5, r5
 800d0c8:	eb46 0406 	adc.w	r4, r6, r6
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	4623      	mov	r3, r4
 800d0d0:	f7f3 fdf2 	bl	8000cb8 <__aeabi_uldivmod>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b8b      	ldr	r3, [pc, #556]	; (800d308 <UART_SetConfig+0x384>)
 800d0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d0e0:	095b      	lsrs	r3, r3, #5
 800d0e2:	2164      	movs	r1, #100	; 0x64
 800d0e4:	fb01 f303 	mul.w	r3, r1, r3
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	3332      	adds	r3, #50	; 0x32
 800d0ee:	4a86      	ldr	r2, [pc, #536]	; (800d308 <UART_SetConfig+0x384>)
 800d0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f4:	095b      	lsrs	r3, r3, #5
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d0fc:	4498      	add	r8, r3
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	461d      	mov	r5, r3
 800d102:	f04f 0600 	mov.w	r6, #0
 800d106:	46a9      	mov	r9, r5
 800d108:	46b2      	mov	sl, r6
 800d10a:	eb19 0309 	adds.w	r3, r9, r9
 800d10e:	eb4a 040a 	adc.w	r4, sl, sl
 800d112:	4699      	mov	r9, r3
 800d114:	46a2      	mov	sl, r4
 800d116:	eb19 0905 	adds.w	r9, r9, r5
 800d11a:	eb4a 0a06 	adc.w	sl, sl, r6
 800d11e:	f04f 0100 	mov.w	r1, #0
 800d122:	f04f 0200 	mov.w	r2, #0
 800d126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d12a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d12e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d132:	4689      	mov	r9, r1
 800d134:	4692      	mov	sl, r2
 800d136:	eb19 0005 	adds.w	r0, r9, r5
 800d13a:	eb4a 0106 	adc.w	r1, sl, r6
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	461d      	mov	r5, r3
 800d144:	f04f 0600 	mov.w	r6, #0
 800d148:	196b      	adds	r3, r5, r5
 800d14a:	eb46 0406 	adc.w	r4, r6, r6
 800d14e:	461a      	mov	r2, r3
 800d150:	4623      	mov	r3, r4
 800d152:	f7f3 fdb1 	bl	8000cb8 <__aeabi_uldivmod>
 800d156:	4603      	mov	r3, r0
 800d158:	460c      	mov	r4, r1
 800d15a:	461a      	mov	r2, r3
 800d15c:	4b6a      	ldr	r3, [pc, #424]	; (800d308 <UART_SetConfig+0x384>)
 800d15e:	fba3 1302 	umull	r1, r3, r3, r2
 800d162:	095b      	lsrs	r3, r3, #5
 800d164:	2164      	movs	r1, #100	; 0x64
 800d166:	fb01 f303 	mul.w	r3, r1, r3
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	3332      	adds	r3, #50	; 0x32
 800d170:	4a65      	ldr	r2, [pc, #404]	; (800d308 <UART_SetConfig+0x384>)
 800d172:	fba2 2303 	umull	r2, r3, r2, r3
 800d176:	095b      	lsrs	r3, r3, #5
 800d178:	f003 0207 	and.w	r2, r3, #7
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4442      	add	r2, r8
 800d182:	609a      	str	r2, [r3, #8]
 800d184:	e26f      	b.n	800d666 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d186:	f7fc fafb 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800d18a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	461d      	mov	r5, r3
 800d190:	f04f 0600 	mov.w	r6, #0
 800d194:	46a8      	mov	r8, r5
 800d196:	46b1      	mov	r9, r6
 800d198:	eb18 0308 	adds.w	r3, r8, r8
 800d19c:	eb49 0409 	adc.w	r4, r9, r9
 800d1a0:	4698      	mov	r8, r3
 800d1a2:	46a1      	mov	r9, r4
 800d1a4:	eb18 0805 	adds.w	r8, r8, r5
 800d1a8:	eb49 0906 	adc.w	r9, r9, r6
 800d1ac:	f04f 0100 	mov.w	r1, #0
 800d1b0:	f04f 0200 	mov.w	r2, #0
 800d1b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d1b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d1bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d1c0:	4688      	mov	r8, r1
 800d1c2:	4691      	mov	r9, r2
 800d1c4:	eb18 0005 	adds.w	r0, r8, r5
 800d1c8:	eb49 0106 	adc.w	r1, r9, r6
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	461d      	mov	r5, r3
 800d1d2:	f04f 0600 	mov.w	r6, #0
 800d1d6:	196b      	adds	r3, r5, r5
 800d1d8:	eb46 0406 	adc.w	r4, r6, r6
 800d1dc:	461a      	mov	r2, r3
 800d1de:	4623      	mov	r3, r4
 800d1e0:	f7f3 fd6a 	bl	8000cb8 <__aeabi_uldivmod>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	4b47      	ldr	r3, [pc, #284]	; (800d308 <UART_SetConfig+0x384>)
 800d1ec:	fba3 2302 	umull	r2, r3, r3, r2
 800d1f0:	095b      	lsrs	r3, r3, #5
 800d1f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	461d      	mov	r5, r3
 800d1fa:	f04f 0600 	mov.w	r6, #0
 800d1fe:	46a9      	mov	r9, r5
 800d200:	46b2      	mov	sl, r6
 800d202:	eb19 0309 	adds.w	r3, r9, r9
 800d206:	eb4a 040a 	adc.w	r4, sl, sl
 800d20a:	4699      	mov	r9, r3
 800d20c:	46a2      	mov	sl, r4
 800d20e:	eb19 0905 	adds.w	r9, r9, r5
 800d212:	eb4a 0a06 	adc.w	sl, sl, r6
 800d216:	f04f 0100 	mov.w	r1, #0
 800d21a:	f04f 0200 	mov.w	r2, #0
 800d21e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d222:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d226:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d22a:	4689      	mov	r9, r1
 800d22c:	4692      	mov	sl, r2
 800d22e:	eb19 0005 	adds.w	r0, r9, r5
 800d232:	eb4a 0106 	adc.w	r1, sl, r6
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	461d      	mov	r5, r3
 800d23c:	f04f 0600 	mov.w	r6, #0
 800d240:	196b      	adds	r3, r5, r5
 800d242:	eb46 0406 	adc.w	r4, r6, r6
 800d246:	461a      	mov	r2, r3
 800d248:	4623      	mov	r3, r4
 800d24a:	f7f3 fd35 	bl	8000cb8 <__aeabi_uldivmod>
 800d24e:	4603      	mov	r3, r0
 800d250:	460c      	mov	r4, r1
 800d252:	461a      	mov	r2, r3
 800d254:	4b2c      	ldr	r3, [pc, #176]	; (800d308 <UART_SetConfig+0x384>)
 800d256:	fba3 1302 	umull	r1, r3, r3, r2
 800d25a:	095b      	lsrs	r3, r3, #5
 800d25c:	2164      	movs	r1, #100	; 0x64
 800d25e:	fb01 f303 	mul.w	r3, r1, r3
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	3332      	adds	r3, #50	; 0x32
 800d268:	4a27      	ldr	r2, [pc, #156]	; (800d308 <UART_SetConfig+0x384>)
 800d26a:	fba2 2303 	umull	r2, r3, r2, r3
 800d26e:	095b      	lsrs	r3, r3, #5
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d276:	4498      	add	r8, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	461d      	mov	r5, r3
 800d27c:	f04f 0600 	mov.w	r6, #0
 800d280:	46a9      	mov	r9, r5
 800d282:	46b2      	mov	sl, r6
 800d284:	eb19 0309 	adds.w	r3, r9, r9
 800d288:	eb4a 040a 	adc.w	r4, sl, sl
 800d28c:	4699      	mov	r9, r3
 800d28e:	46a2      	mov	sl, r4
 800d290:	eb19 0905 	adds.w	r9, r9, r5
 800d294:	eb4a 0a06 	adc.w	sl, sl, r6
 800d298:	f04f 0100 	mov.w	r1, #0
 800d29c:	f04f 0200 	mov.w	r2, #0
 800d2a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2ac:	4689      	mov	r9, r1
 800d2ae:	4692      	mov	sl, r2
 800d2b0:	eb19 0005 	adds.w	r0, r9, r5
 800d2b4:	eb4a 0106 	adc.w	r1, sl, r6
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	461d      	mov	r5, r3
 800d2be:	f04f 0600 	mov.w	r6, #0
 800d2c2:	196b      	adds	r3, r5, r5
 800d2c4:	eb46 0406 	adc.w	r4, r6, r6
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4623      	mov	r3, r4
 800d2cc:	f7f3 fcf4 	bl	8000cb8 <__aeabi_uldivmod>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	; (800d308 <UART_SetConfig+0x384>)
 800d2d8:	fba3 1302 	umull	r1, r3, r3, r2
 800d2dc:	095b      	lsrs	r3, r3, #5
 800d2de:	2164      	movs	r1, #100	; 0x64
 800d2e0:	fb01 f303 	mul.w	r3, r1, r3
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	00db      	lsls	r3, r3, #3
 800d2e8:	3332      	adds	r3, #50	; 0x32
 800d2ea:	4a07      	ldr	r2, [pc, #28]	; (800d308 <UART_SetConfig+0x384>)
 800d2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f0:	095b      	lsrs	r3, r3, #5
 800d2f2:	f003 0207 	and.w	r2, r3, #7
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4442      	add	r2, r8
 800d2fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d2fe:	e1b2      	b.n	800d666 <UART_SetConfig+0x6e2>
 800d300:	40011000 	.word	0x40011000
 800d304:	40011400 	.word	0x40011400
 800d308:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4ad7      	ldr	r2, [pc, #860]	; (800d670 <UART_SetConfig+0x6ec>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d005      	beq.n	800d322 <UART_SetConfig+0x39e>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4ad6      	ldr	r2, [pc, #856]	; (800d674 <UART_SetConfig+0x6f0>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	f040 80d1 	bne.w	800d4c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d322:	f7fc fa41 	bl	80097a8 <HAL_RCC_GetPCLK2Freq>
 800d326:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	469a      	mov	sl, r3
 800d32c:	f04f 0b00 	mov.w	fp, #0
 800d330:	46d0      	mov	r8, sl
 800d332:	46d9      	mov	r9, fp
 800d334:	eb18 0308 	adds.w	r3, r8, r8
 800d338:	eb49 0409 	adc.w	r4, r9, r9
 800d33c:	4698      	mov	r8, r3
 800d33e:	46a1      	mov	r9, r4
 800d340:	eb18 080a 	adds.w	r8, r8, sl
 800d344:	eb49 090b 	adc.w	r9, r9, fp
 800d348:	f04f 0100 	mov.w	r1, #0
 800d34c:	f04f 0200 	mov.w	r2, #0
 800d350:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d354:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d358:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d35c:	4688      	mov	r8, r1
 800d35e:	4691      	mov	r9, r2
 800d360:	eb1a 0508 	adds.w	r5, sl, r8
 800d364:	eb4b 0609 	adc.w	r6, fp, r9
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	4619      	mov	r1, r3
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	f04f 0300 	mov.w	r3, #0
 800d376:	f04f 0400 	mov.w	r4, #0
 800d37a:	0094      	lsls	r4, r2, #2
 800d37c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d380:	008b      	lsls	r3, r1, #2
 800d382:	461a      	mov	r2, r3
 800d384:	4623      	mov	r3, r4
 800d386:	4628      	mov	r0, r5
 800d388:	4631      	mov	r1, r6
 800d38a:	f7f3 fc95 	bl	8000cb8 <__aeabi_uldivmod>
 800d38e:	4603      	mov	r3, r0
 800d390:	460c      	mov	r4, r1
 800d392:	461a      	mov	r2, r3
 800d394:	4bb8      	ldr	r3, [pc, #736]	; (800d678 <UART_SetConfig+0x6f4>)
 800d396:	fba3 2302 	umull	r2, r3, r3, r2
 800d39a:	095b      	lsrs	r3, r3, #5
 800d39c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	469b      	mov	fp, r3
 800d3a4:	f04f 0c00 	mov.w	ip, #0
 800d3a8:	46d9      	mov	r9, fp
 800d3aa:	46e2      	mov	sl, ip
 800d3ac:	eb19 0309 	adds.w	r3, r9, r9
 800d3b0:	eb4a 040a 	adc.w	r4, sl, sl
 800d3b4:	4699      	mov	r9, r3
 800d3b6:	46a2      	mov	sl, r4
 800d3b8:	eb19 090b 	adds.w	r9, r9, fp
 800d3bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d3c0:	f04f 0100 	mov.w	r1, #0
 800d3c4:	f04f 0200 	mov.w	r2, #0
 800d3c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d3cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d3d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d3d4:	4689      	mov	r9, r1
 800d3d6:	4692      	mov	sl, r2
 800d3d8:	eb1b 0509 	adds.w	r5, fp, r9
 800d3dc:	eb4c 060a 	adc.w	r6, ip, sl
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	f04f 0200 	mov.w	r2, #0
 800d3ea:	f04f 0300 	mov.w	r3, #0
 800d3ee:	f04f 0400 	mov.w	r4, #0
 800d3f2:	0094      	lsls	r4, r2, #2
 800d3f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d3f8:	008b      	lsls	r3, r1, #2
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	4628      	mov	r0, r5
 800d400:	4631      	mov	r1, r6
 800d402:	f7f3 fc59 	bl	8000cb8 <__aeabi_uldivmod>
 800d406:	4603      	mov	r3, r0
 800d408:	460c      	mov	r4, r1
 800d40a:	461a      	mov	r2, r3
 800d40c:	4b9a      	ldr	r3, [pc, #616]	; (800d678 <UART_SetConfig+0x6f4>)
 800d40e:	fba3 1302 	umull	r1, r3, r3, r2
 800d412:	095b      	lsrs	r3, r3, #5
 800d414:	2164      	movs	r1, #100	; 0x64
 800d416:	fb01 f303 	mul.w	r3, r1, r3
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	011b      	lsls	r3, r3, #4
 800d41e:	3332      	adds	r3, #50	; 0x32
 800d420:	4a95      	ldr	r2, [pc, #596]	; (800d678 <UART_SetConfig+0x6f4>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	095b      	lsrs	r3, r3, #5
 800d428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d42c:	4498      	add	r8, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	469b      	mov	fp, r3
 800d432:	f04f 0c00 	mov.w	ip, #0
 800d436:	46d9      	mov	r9, fp
 800d438:	46e2      	mov	sl, ip
 800d43a:	eb19 0309 	adds.w	r3, r9, r9
 800d43e:	eb4a 040a 	adc.w	r4, sl, sl
 800d442:	4699      	mov	r9, r3
 800d444:	46a2      	mov	sl, r4
 800d446:	eb19 090b 	adds.w	r9, r9, fp
 800d44a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d44e:	f04f 0100 	mov.w	r1, #0
 800d452:	f04f 0200 	mov.w	r2, #0
 800d456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d45a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d45e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d462:	4689      	mov	r9, r1
 800d464:	4692      	mov	sl, r2
 800d466:	eb1b 0509 	adds.w	r5, fp, r9
 800d46a:	eb4c 060a 	adc.w	r6, ip, sl
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	4619      	mov	r1, r3
 800d474:	f04f 0200 	mov.w	r2, #0
 800d478:	f04f 0300 	mov.w	r3, #0
 800d47c:	f04f 0400 	mov.w	r4, #0
 800d480:	0094      	lsls	r4, r2, #2
 800d482:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d486:	008b      	lsls	r3, r1, #2
 800d488:	461a      	mov	r2, r3
 800d48a:	4623      	mov	r3, r4
 800d48c:	4628      	mov	r0, r5
 800d48e:	4631      	mov	r1, r6
 800d490:	f7f3 fc12 	bl	8000cb8 <__aeabi_uldivmod>
 800d494:	4603      	mov	r3, r0
 800d496:	460c      	mov	r4, r1
 800d498:	461a      	mov	r2, r3
 800d49a:	4b77      	ldr	r3, [pc, #476]	; (800d678 <UART_SetConfig+0x6f4>)
 800d49c:	fba3 1302 	umull	r1, r3, r3, r2
 800d4a0:	095b      	lsrs	r3, r3, #5
 800d4a2:	2164      	movs	r1, #100	; 0x64
 800d4a4:	fb01 f303 	mul.w	r3, r1, r3
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	3332      	adds	r3, #50	; 0x32
 800d4ae:	4a72      	ldr	r2, [pc, #456]	; (800d678 <UART_SetConfig+0x6f4>)
 800d4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b4:	095b      	lsrs	r3, r3, #5
 800d4b6:	f003 020f 	and.w	r2, r3, #15
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4442      	add	r2, r8
 800d4c0:	609a      	str	r2, [r3, #8]
 800d4c2:	e0d0      	b.n	800d666 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d4c4:	f7fc f95c 	bl	8009780 <HAL_RCC_GetPCLK1Freq>
 800d4c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	469a      	mov	sl, r3
 800d4ce:	f04f 0b00 	mov.w	fp, #0
 800d4d2:	46d0      	mov	r8, sl
 800d4d4:	46d9      	mov	r9, fp
 800d4d6:	eb18 0308 	adds.w	r3, r8, r8
 800d4da:	eb49 0409 	adc.w	r4, r9, r9
 800d4de:	4698      	mov	r8, r3
 800d4e0:	46a1      	mov	r9, r4
 800d4e2:	eb18 080a 	adds.w	r8, r8, sl
 800d4e6:	eb49 090b 	adc.w	r9, r9, fp
 800d4ea:	f04f 0100 	mov.w	r1, #0
 800d4ee:	f04f 0200 	mov.w	r2, #0
 800d4f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d4f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d4fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d4fe:	4688      	mov	r8, r1
 800d500:	4691      	mov	r9, r2
 800d502:	eb1a 0508 	adds.w	r5, sl, r8
 800d506:	eb4b 0609 	adc.w	r6, fp, r9
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	4619      	mov	r1, r3
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	f04f 0300 	mov.w	r3, #0
 800d518:	f04f 0400 	mov.w	r4, #0
 800d51c:	0094      	lsls	r4, r2, #2
 800d51e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d522:	008b      	lsls	r3, r1, #2
 800d524:	461a      	mov	r2, r3
 800d526:	4623      	mov	r3, r4
 800d528:	4628      	mov	r0, r5
 800d52a:	4631      	mov	r1, r6
 800d52c:	f7f3 fbc4 	bl	8000cb8 <__aeabi_uldivmod>
 800d530:	4603      	mov	r3, r0
 800d532:	460c      	mov	r4, r1
 800d534:	461a      	mov	r2, r3
 800d536:	4b50      	ldr	r3, [pc, #320]	; (800d678 <UART_SetConfig+0x6f4>)
 800d538:	fba3 2302 	umull	r2, r3, r3, r2
 800d53c:	095b      	lsrs	r3, r3, #5
 800d53e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	469b      	mov	fp, r3
 800d546:	f04f 0c00 	mov.w	ip, #0
 800d54a:	46d9      	mov	r9, fp
 800d54c:	46e2      	mov	sl, ip
 800d54e:	eb19 0309 	adds.w	r3, r9, r9
 800d552:	eb4a 040a 	adc.w	r4, sl, sl
 800d556:	4699      	mov	r9, r3
 800d558:	46a2      	mov	sl, r4
 800d55a:	eb19 090b 	adds.w	r9, r9, fp
 800d55e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d562:	f04f 0100 	mov.w	r1, #0
 800d566:	f04f 0200 	mov.w	r2, #0
 800d56a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d56e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d572:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d576:	4689      	mov	r9, r1
 800d578:	4692      	mov	sl, r2
 800d57a:	eb1b 0509 	adds.w	r5, fp, r9
 800d57e:	eb4c 060a 	adc.w	r6, ip, sl
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	4619      	mov	r1, r3
 800d588:	f04f 0200 	mov.w	r2, #0
 800d58c:	f04f 0300 	mov.w	r3, #0
 800d590:	f04f 0400 	mov.w	r4, #0
 800d594:	0094      	lsls	r4, r2, #2
 800d596:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d59a:	008b      	lsls	r3, r1, #2
 800d59c:	461a      	mov	r2, r3
 800d59e:	4623      	mov	r3, r4
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	f7f3 fb88 	bl	8000cb8 <__aeabi_uldivmod>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b32      	ldr	r3, [pc, #200]	; (800d678 <UART_SetConfig+0x6f4>)
 800d5b0:	fba3 1302 	umull	r1, r3, r3, r2
 800d5b4:	095b      	lsrs	r3, r3, #5
 800d5b6:	2164      	movs	r1, #100	; 0x64
 800d5b8:	fb01 f303 	mul.w	r3, r1, r3
 800d5bc:	1ad3      	subs	r3, r2, r3
 800d5be:	011b      	lsls	r3, r3, #4
 800d5c0:	3332      	adds	r3, #50	; 0x32
 800d5c2:	4a2d      	ldr	r2, [pc, #180]	; (800d678 <UART_SetConfig+0x6f4>)
 800d5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5c8:	095b      	lsrs	r3, r3, #5
 800d5ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5ce:	4498      	add	r8, r3
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	469b      	mov	fp, r3
 800d5d4:	f04f 0c00 	mov.w	ip, #0
 800d5d8:	46d9      	mov	r9, fp
 800d5da:	46e2      	mov	sl, ip
 800d5dc:	eb19 0309 	adds.w	r3, r9, r9
 800d5e0:	eb4a 040a 	adc.w	r4, sl, sl
 800d5e4:	4699      	mov	r9, r3
 800d5e6:	46a2      	mov	sl, r4
 800d5e8:	eb19 090b 	adds.w	r9, r9, fp
 800d5ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d5f0:	f04f 0100 	mov.w	r1, #0
 800d5f4:	f04f 0200 	mov.w	r2, #0
 800d5f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d600:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d604:	4689      	mov	r9, r1
 800d606:	4692      	mov	sl, r2
 800d608:	eb1b 0509 	adds.w	r5, fp, r9
 800d60c:	eb4c 060a 	adc.w	r6, ip, sl
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	4619      	mov	r1, r3
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	f04f 0300 	mov.w	r3, #0
 800d61e:	f04f 0400 	mov.w	r4, #0
 800d622:	0094      	lsls	r4, r2, #2
 800d624:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d628:	008b      	lsls	r3, r1, #2
 800d62a:	461a      	mov	r2, r3
 800d62c:	4623      	mov	r3, r4
 800d62e:	4628      	mov	r0, r5
 800d630:	4631      	mov	r1, r6
 800d632:	f7f3 fb41 	bl	8000cb8 <__aeabi_uldivmod>
 800d636:	4603      	mov	r3, r0
 800d638:	460c      	mov	r4, r1
 800d63a:	461a      	mov	r2, r3
 800d63c:	4b0e      	ldr	r3, [pc, #56]	; (800d678 <UART_SetConfig+0x6f4>)
 800d63e:	fba3 1302 	umull	r1, r3, r3, r2
 800d642:	095b      	lsrs	r3, r3, #5
 800d644:	2164      	movs	r1, #100	; 0x64
 800d646:	fb01 f303 	mul.w	r3, r1, r3
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	011b      	lsls	r3, r3, #4
 800d64e:	3332      	adds	r3, #50	; 0x32
 800d650:	4a09      	ldr	r2, [pc, #36]	; (800d678 <UART_SetConfig+0x6f4>)
 800d652:	fba2 2303 	umull	r2, r3, r2, r3
 800d656:	095b      	lsrs	r3, r3, #5
 800d658:	f003 020f 	and.w	r2, r3, #15
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4442      	add	r2, r8
 800d662:	609a      	str	r2, [r3, #8]
}
 800d664:	e7ff      	b.n	800d666 <UART_SetConfig+0x6e2>
 800d666:	bf00      	nop
 800d668:	3714      	adds	r7, #20
 800d66a:	46bd      	mov	sp, r7
 800d66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d670:	40011000 	.word	0x40011000
 800d674:	40011400 	.word	0x40011400
 800d678:	51eb851f 	.word	0x51eb851f

0800d67c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d67c:	b084      	sub	sp, #16
 800d67e:	b480      	push	{r7}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	f107 001c 	add.w	r0, r7, #28
 800d68a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d692:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d694:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d696:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d69a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d69e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d6a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d6a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d6b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	b004      	add	sp, #16
 800d6d0:	4770      	bx	lr

0800d6d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2203      	movs	r2, #3
 800d71a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d71c:	2002      	movs	r0, #2
 800d71e:	f7f9 fbc5 	bl	8006eac <HAL_Delay>
  
  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 0303 	and.w	r3, r3, #3
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d766:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d76c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d772:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4313      	orrs	r3, r2
 800d778:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d782:	f023 030f 	bic.w	r3, r3, #15
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	431a      	orrs	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	b2db      	uxtb	r3, r3
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b085      	sub	sp, #20
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	3314      	adds	r3, #20
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
}  
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d802:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d808:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d80e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4313      	orrs	r3, r2
 800d814:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	431a      	orrs	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d826:	2300      	movs	r3, #0

}
 800d828:	4618      	mov	r0, r3
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d842:	2310      	movs	r3, #16
 800d844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d846:	2340      	movs	r3, #64	; 0x40
 800d848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d854:	f107 0308 	add.w	r3, r7, #8
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7ff ff74 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d860:	f241 3288 	movw	r2, #5000	; 0x1388
 800d864:	2110      	movs	r1, #16
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fa40 	bl	800dcec <SDMMC_GetCmdResp1>
 800d86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d86e:	69fb      	ldr	r3, [r7, #28]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3720      	adds	r7, #32
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d886:	2311      	movs	r3, #17
 800d888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d88a:	2340      	movs	r3, #64	; 0x40
 800d88c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d88e:	2300      	movs	r3, #0
 800d890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d898:	f107 0308 	add.w	r3, r7, #8
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff ff52 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a8:	2111      	movs	r1, #17
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fa1e 	bl	800dcec <SDMMC_GetCmdResp1>
 800d8b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3720      	adds	r7, #32
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d8ca:	2312      	movs	r3, #18
 800d8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8ce:	2340      	movs	r3, #64	; 0x40
 800d8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8dc:	f107 0308 	add.w	r3, r7, #8
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff ff30 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8ec:	2112      	movs	r1, #18
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f9fc 	bl	800dcec <SDMMC_GetCmdResp1>
 800d8f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3720      	adds	r7, #32
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b088      	sub	sp, #32
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d90e:	2318      	movs	r3, #24
 800d910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d912:	2340      	movs	r3, #64	; 0x40
 800d914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d916:	2300      	movs	r3, #0
 800d918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d91e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d920:	f107 0308 	add.w	r3, r7, #8
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7ff ff0e 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d930:	2118      	movs	r1, #24
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f9da 	bl	800dcec <SDMMC_GetCmdResp1>
 800d938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d93a:	69fb      	ldr	r3, [r7, #28]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3720      	adds	r7, #32
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d952:	2319      	movs	r3, #25
 800d954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d956:	2340      	movs	r3, #64	; 0x40
 800d958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d95a:	2300      	movs	r3, #0
 800d95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d964:	f107 0308 	add.w	r3, r7, #8
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff feec 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d970:	f241 3288 	movw	r2, #5000	; 0x1388
 800d974:	2119      	movs	r1, #25
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f9b8 	bl	800dcec <SDMMC_GetCmdResp1>
 800d97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d97e:	69fb      	ldr	r3, [r7, #28]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3720      	adds	r7, #32
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b088      	sub	sp, #32
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d990:	2300      	movs	r3, #0
 800d992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d994:	230c      	movs	r3, #12
 800d996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d998:	2340      	movs	r3, #64	; 0x40
 800d99a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d99c:	2300      	movs	r3, #0
 800d99e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9a6:	f107 0308 	add.w	r3, r7, #8
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f7ff fecb 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d9b2:	4a05      	ldr	r2, [pc, #20]	; (800d9c8 <SDMMC_CmdStopTransfer+0x40>)
 800d9b4:	210c      	movs	r1, #12
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f998 	bl	800dcec <SDMMC_GetCmdResp1>
 800d9bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9be:	69fb      	ldr	r3, [r7, #28]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3720      	adds	r7, #32
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	05f5e100 	.word	0x05f5e100

0800d9cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b08a      	sub	sp, #40	; 0x28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d9dc:	2307      	movs	r3, #7
 800d9de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9e0:	2340      	movs	r3, #64	; 0x40
 800d9e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9ee:	f107 0310 	add.w	r3, r7, #16
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7ff fea7 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d9fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9fe:	2107      	movs	r1, #7
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f000 f973 	bl	800dcec <SDMMC_GetCmdResp1>
 800da06:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3728      	adds	r7, #40	; 0x28
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b088      	sub	sp, #32
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800da1a:	2300      	movs	r3, #0
 800da1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800da1e:	2300      	movs	r3, #0
 800da20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800da22:	2300      	movs	r3, #0
 800da24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da26:	2300      	movs	r3, #0
 800da28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da30:	f107 0308 	add.w	r3, r7, #8
 800da34:	4619      	mov	r1, r3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff fe86 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f92d 	bl	800dc9c <SDMMC_GetCmdError>
 800da42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da44:	69fb      	ldr	r3, [r7, #28]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3720      	adds	r7, #32
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b088      	sub	sp, #32
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800da56:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800da5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800da5c:	2308      	movs	r3, #8
 800da5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da60:	2340      	movs	r3, #64	; 0x40
 800da62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da64:	2300      	movs	r3, #0
 800da66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da6e:	f107 0308 	add.w	r3, r7, #8
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff fe67 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fb16 	bl	800e0ac <SDMMC_GetCmdResp7>
 800da80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da82:	69fb      	ldr	r3, [r7, #28]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3720      	adds	r7, #32
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b088      	sub	sp, #32
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800da9a:	2337      	movs	r3, #55	; 0x37
 800da9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da9e:	2340      	movs	r3, #64	; 0x40
 800daa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daa2:	2300      	movs	r3, #0
 800daa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daac:	f107 0308 	add.w	r3, r7, #8
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff fe48 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dabc:	2137      	movs	r1, #55	; 0x37
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f914 	bl	800dcec <SDMMC_GetCmdResp1>
 800dac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dac6:	69fb      	ldr	r3, [r7, #28]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3720      	adds	r7, #32
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dae6:	2329      	movs	r3, #41	; 0x29
 800dae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800daea:	2340      	movs	r3, #64	; 0x40
 800daec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daee:	2300      	movs	r3, #0
 800daf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daf8:	f107 0308 	add.w	r3, r7, #8
 800dafc:	4619      	mov	r1, r3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f7ff fe22 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 fa23 	bl	800df50 <SDMMC_GetCmdResp3>
 800db0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db0c:	69fb      	ldr	r3, [r7, #28]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3720      	adds	r7, #32
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b088      	sub	sp, #32
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800db24:	2306      	movs	r3, #6
 800db26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db28:	2340      	movs	r3, #64	; 0x40
 800db2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db2c:	2300      	movs	r3, #0
 800db2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db36:	f107 0308 	add.w	r3, r7, #8
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff fe03 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800db42:	f241 3288 	movw	r2, #5000	; 0x1388
 800db46:	2106      	movs	r1, #6
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f8cf 	bl	800dcec <SDMMC_GetCmdResp1>
 800db4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db50:	69fb      	ldr	r3, [r7, #28]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3720      	adds	r7, #32
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b088      	sub	sp, #32
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800db62:	2300      	movs	r3, #0
 800db64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800db66:	2333      	movs	r3, #51	; 0x33
 800db68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db6a:	2340      	movs	r3, #64	; 0x40
 800db6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db6e:	2300      	movs	r3, #0
 800db70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db78:	f107 0308 	add.w	r3, r7, #8
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff fde2 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800db84:	f241 3288 	movw	r2, #5000	; 0x1388
 800db88:	2133      	movs	r1, #51	; 0x33
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f8ae 	bl	800dcec <SDMMC_GetCmdResp1>
 800db90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db92:	69fb      	ldr	r3, [r7, #28]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3720      	adds	r7, #32
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dba4:	2300      	movs	r3, #0
 800dba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dba8:	2302      	movs	r3, #2
 800dbaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dbac:	23c0      	movs	r3, #192	; 0xc0
 800dbae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbba:	f107 0308 	add.w	r3, r7, #8
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7ff fdc1 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f97c 	bl	800dec4 <SDMMC_GetCmdResp2>
 800dbcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbce:	69fb      	ldr	r3, [r7, #28]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3720      	adds	r7, #32
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b088      	sub	sp, #32
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dbe6:	2309      	movs	r3, #9
 800dbe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dbea:	23c0      	movs	r3, #192	; 0xc0
 800dbec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff fda2 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 f95d 	bl	800dec4 <SDMMC_GetCmdResp2>
 800dc0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc0c:	69fb      	ldr	r3, [r7, #28]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b088      	sub	sp, #32
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc20:	2300      	movs	r3, #0
 800dc22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dc24:	2303      	movs	r3, #3
 800dc26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc28:	2340      	movs	r3, #64	; 0x40
 800dc2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc36:	f107 0308 	add.w	r3, r7, #8
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff fd83 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	2103      	movs	r1, #3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f9bc 	bl	800dfc4 <SDMMC_GetCmdResp6>
 800dc4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc4e:	69fb      	ldr	r3, [r7, #28]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3720      	adds	r7, #32
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dc66:	230d      	movs	r3, #13
 800dc68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc6a:	2340      	movs	r3, #64	; 0x40
 800dc6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc78:	f107 0308 	add.w	r3, r7, #8
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff fd62 	bl	800d748 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dc84:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc88:	210d      	movs	r1, #13
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f82e 	bl	800dcec <SDMMC_GetCmdResp1>
 800dc90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc92:	69fb      	ldr	r3, [r7, #28]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dc9c:	b490      	push	{r4, r7}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <SDMMC_GetCmdError+0x48>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a0f      	ldr	r2, [pc, #60]	; (800dce8 <SDMMC_GetCmdError+0x4c>)
 800dcaa:	fba2 2303 	umull	r2, r3, r2, r3
 800dcae:	0a5b      	lsrs	r3, r3, #9
 800dcb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dcb8:	4623      	mov	r3, r4
 800dcba:	1e5c      	subs	r4, r3, #1
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcc4:	e009      	b.n	800dcda <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0f2      	beq.n	800dcb8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	22c5      	movs	r2, #197	; 0xc5
 800dcd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bc90      	pop	{r4, r7}
 800dce2:	4770      	bx	lr
 800dce4:	20000000 	.word	0x20000000
 800dce8:	10624dd3 	.word	0x10624dd3

0800dcec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dcec:	b590      	push	{r4, r7, lr}
 800dcee:	b087      	sub	sp, #28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dcfa:	4b6f      	ldr	r3, [pc, #444]	; (800deb8 <SDMMC_GetCmdResp1+0x1cc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a6f      	ldr	r2, [pc, #444]	; (800debc <SDMMC_GetCmdResp1+0x1d0>)
 800dd00:	fba2 2303 	umull	r2, r3, r2, r3
 800dd04:	0a5b      	lsrs	r3, r3, #9
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	1e5c      	subs	r4, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d102      	bne.n	800dd1a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd18:	e0c9      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f0      	beq.n	800dd0c <SDMMC_GetCmdResp1+0x20>
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1eb      	bne.n	800dd0c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d004      	beq.n	800dd4a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2204      	movs	r2, #4
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd46:	2304      	movs	r3, #4
 800dd48:	e0b1      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d004      	beq.n	800dd60 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e0a6      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	22c5      	movs	r2, #197	; 0xc5
 800dd64:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f7ff fd18 	bl	800d79c <SDIO_GetCommandResponse>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	461a      	mov	r2, r3
 800dd70:	7afb      	ldrb	r3, [r7, #11]
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d001      	beq.n	800dd7a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd76:	2301      	movs	r3, #1
 800dd78:	e099      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fd1a 	bl	800d7b6 <SDIO_GetResponse>
 800dd82:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	4b4e      	ldr	r3, [pc, #312]	; (800dec0 <SDMMC_GetCmdResp1+0x1d4>)
 800dd88:	4013      	ands	r3, r2
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e08d      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	da02      	bge.n	800dd9e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dd98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd9c:	e087      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dda8:	2340      	movs	r3, #64	; 0x40
 800ddaa:	e080      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ddb6:	2380      	movs	r3, #128	; 0x80
 800ddb8:	e079      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ddc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddc8:	e071      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ddd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddd8:	e069      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dde4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde8:	e061      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ddf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddf8:	e059      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de00:	2b00      	cmp	r3, #0
 800de02:	d002      	beq.n	800de0a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de08:	e051      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de18:	e049      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d002      	beq.n	800de2a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de28:	e041      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800de34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de38:	e039      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d002      	beq.n	800de4a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de48:	e031      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de58:	e029      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de60:	2b00      	cmp	r3, #0
 800de62:	d002      	beq.n	800de6a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800de68:	e021      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de70:	2b00      	cmp	r3, #0
 800de72:	d002      	beq.n	800de7a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de78:	e019      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800de88:	e011      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800de94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de98:	e009      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	f003 0308 	and.w	r3, r3, #8
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dea4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dea8:	e001      	b.n	800deae <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800deaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800deae:	4618      	mov	r0, r3
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd90      	pop	{r4, r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20000000 	.word	0x20000000
 800debc:	10624dd3 	.word	0x10624dd3
 800dec0:	fdffe008 	.word	0xfdffe008

0800dec4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dec4:	b490      	push	{r4, r7}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800decc:	4b1e      	ldr	r3, [pc, #120]	; (800df48 <SDMMC_GetCmdResp2+0x84>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a1e      	ldr	r2, [pc, #120]	; (800df4c <SDMMC_GetCmdResp2+0x88>)
 800ded2:	fba2 2303 	umull	r2, r3, r2, r3
 800ded6:	0a5b      	lsrs	r3, r3, #9
 800ded8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dedc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dee0:	4623      	mov	r3, r4
 800dee2:	1e5c      	subs	r4, r3, #1
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dee8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800deec:	e026      	b.n	800df3c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0f0      	beq.n	800dee0 <SDMMC_GetCmdResp2+0x1c>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1eb      	bne.n	800dee0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0c:	f003 0304 	and.w	r3, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2204      	movs	r2, #4
 800df18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df1a:	2304      	movs	r3, #4
 800df1c:	e00e      	b.n	800df3c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	d004      	beq.n	800df34 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2201      	movs	r2, #1
 800df2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df30:	2301      	movs	r3, #1
 800df32:	e003      	b.n	800df3c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	22c5      	movs	r2, #197	; 0xc5
 800df38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bc90      	pop	{r4, r7}
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop
 800df48:	20000000 	.word	0x20000000
 800df4c:	10624dd3 	.word	0x10624dd3

0800df50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800df50:	b490      	push	{r4, r7}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df58:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <SDMMC_GetCmdResp3+0x6c>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a18      	ldr	r2, [pc, #96]	; (800dfc0 <SDMMC_GetCmdResp3+0x70>)
 800df5e:	fba2 2303 	umull	r2, r3, r2, r3
 800df62:	0a5b      	lsrs	r3, r3, #9
 800df64:	f241 3288 	movw	r2, #5000	; 0x1388
 800df68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df6c:	4623      	mov	r3, r4
 800df6e:	1e5c      	subs	r4, r3, #1
 800df70:	2b00      	cmp	r3, #0
 800df72:	d102      	bne.n	800df7a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df78:	e01b      	b.n	800dfb2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0f0      	beq.n	800df6c <SDMMC_GetCmdResp3+0x1c>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1eb      	bne.n	800df6c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df98:	f003 0304 	and.w	r3, r3, #4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d004      	beq.n	800dfaa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2204      	movs	r2, #4
 800dfa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfa6:	2304      	movs	r3, #4
 800dfa8:	e003      	b.n	800dfb2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	22c5      	movs	r2, #197	; 0xc5
 800dfae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bc90      	pop	{r4, r7}
 800dfba:	4770      	bx	lr
 800dfbc:	20000000 	.word	0x20000000
 800dfc0:	10624dd3 	.word	0x10624dd3

0800dfc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dfc4:	b590      	push	{r4, r7, lr}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	607a      	str	r2, [r7, #4]
 800dfd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfd2:	4b34      	ldr	r3, [pc, #208]	; (800e0a4 <SDMMC_GetCmdResp6+0xe0>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a34      	ldr	r2, [pc, #208]	; (800e0a8 <SDMMC_GetCmdResp6+0xe4>)
 800dfd8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfdc:	0a5b      	lsrs	r3, r3, #9
 800dfde:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dfe6:	4623      	mov	r3, r4
 800dfe8:	1e5c      	subs	r4, r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dff2:	e052      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e000:	2b00      	cmp	r3, #0
 800e002:	d0f0      	beq.n	800dfe6 <SDMMC_GetCmdResp6+0x22>
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1eb      	bne.n	800dfe6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e012:	f003 0304 	and.w	r3, r3, #4
 800e016:	2b00      	cmp	r3, #0
 800e018:	d004      	beq.n	800e024 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2204      	movs	r2, #4
 800e01e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e020:	2304      	movs	r3, #4
 800e022:	e03a      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d004      	beq.n	800e03a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2201      	movs	r2, #1
 800e034:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e036:	2301      	movs	r3, #1
 800e038:	e02f      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff fbae 	bl	800d79c <SDIO_GetCommandResponse>
 800e040:	4603      	mov	r3, r0
 800e042:	461a      	mov	r2, r3
 800e044:	7afb      	ldrb	r3, [r7, #11]
 800e046:	4293      	cmp	r3, r2
 800e048:	d001      	beq.n	800e04e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e025      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	22c5      	movs	r2, #197	; 0xc5
 800e052:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e054:	2100      	movs	r1, #0
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff fbad 	bl	800d7b6 <SDIO_GetResponse>
 800e05c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d106      	bne.n	800e076 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	0c1b      	lsrs	r3, r3, #16
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e072:	2300      	movs	r3, #0
 800e074:	e011      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e084:	e009      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e094:	e001      	b.n	800e09a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	371c      	adds	r7, #28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd90      	pop	{r4, r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	20000000 	.word	0x20000000
 800e0a8:	10624dd3 	.word	0x10624dd3

0800e0ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e0ac:	b490      	push	{r4, r7}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0b4:	4b21      	ldr	r3, [pc, #132]	; (800e13c <SDMMC_GetCmdResp7+0x90>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a21      	ldr	r2, [pc, #132]	; (800e140 <SDMMC_GetCmdResp7+0x94>)
 800e0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e0be:	0a5b      	lsrs	r3, r3, #9
 800e0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e0c8:	4623      	mov	r3, r4
 800e0ca:	1e5c      	subs	r4, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d102      	bne.n	800e0d6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0d4:	e02c      	b.n	800e130 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0da:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d0f0      	beq.n	800e0c8 <SDMMC_GetCmdResp7+0x1c>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1eb      	bne.n	800e0c8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f4:	f003 0304 	and.w	r3, r3, #4
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2204      	movs	r2, #4
 800e100:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e102:	2304      	movs	r3, #4
 800e104:	e014      	b.n	800e130 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d004      	beq.n	800e11c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e118:	2301      	movs	r3, #1
 800e11a:	e009      	b.n	800e130 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2240      	movs	r2, #64	; 0x40
 800e12c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e12e:	2300      	movs	r3, #0
  
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bc90      	pop	{r4, r7}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20000000 	.word	0x20000000
 800e140:	10624dd3 	.word	0x10624dd3

0800e144 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e148:	4904      	ldr	r1, [pc, #16]	; (800e15c <MX_FATFS_Init+0x18>)
 800e14a:	4805      	ldr	r0, [pc, #20]	; (800e160 <MX_FATFS_Init+0x1c>)
 800e14c:	f003 fb9c 	bl	8011888 <FATFS_LinkDriver>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	4b03      	ldr	r3, [pc, #12]	; (800e164 <MX_FATFS_Init+0x20>)
 800e156:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e158:	bf00      	nop
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	2002da88 	.word	0x2002da88
 800e160:	08017c24 	.word	0x08017c24
 800e164:	2002da84 	.word	0x2002da84

0800e168 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e16e:	2300      	movs	r3, #0
 800e170:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e172:	f000 f896 	bl	800e2a2 <BSP_SD_IsDetected>
 800e176:	4603      	mov	r3, r0
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d001      	beq.n	800e180 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e012      	b.n	800e1a6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e180:	480b      	ldr	r0, [pc, #44]	; (800e1b0 <BSP_SD_Init+0x48>)
 800e182:	f7fb ffa5 	bl	800a0d0 <HAL_SD_Init>
 800e186:	4603      	mov	r3, r0
 800e188:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e18a:	79fb      	ldrb	r3, [r7, #7]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d109      	bne.n	800e1a4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e194:	4806      	ldr	r0, [pc, #24]	; (800e1b0 <BSP_SD_Init+0x48>)
 800e196:	f7fc fd4f 	bl	800ac38 <HAL_SD_ConfigWideBusOperation>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	2002d884 	.word	0x2002d884

0800e1b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	68f9      	ldr	r1, [r7, #12]
 800e1ca:	4806      	ldr	r0, [pc, #24]	; (800e1e4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e1cc:	f7fc f810 	bl	800a1f0 <HAL_SD_ReadBlocks_DMA>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	2002d884 	.word	0x2002d884

0800e1e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	68f9      	ldr	r1, [r7, #12]
 800e1fe:	4806      	ldr	r0, [pc, #24]	; (800e218 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e200:	f7fc f8de 	bl	800a3c0 <HAL_SD_WriteBlocks_DMA>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	2002d884 	.word	0x2002d884

0800e21c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e220:	4805      	ldr	r0, [pc, #20]	; (800e238 <BSP_SD_GetCardState+0x1c>)
 800e222:	f7fc fd85 	bl	800ad30 <HAL_SD_GetCardState>
 800e226:	4603      	mov	r3, r0
 800e228:	2b04      	cmp	r3, #4
 800e22a:	bf14      	ite	ne
 800e22c:	2301      	movne	r3, #1
 800e22e:	2300      	moveq	r3, #0
 800e230:	b2db      	uxtb	r3, r3
}
 800e232:	4618      	mov	r0, r3
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	2002d884 	.word	0x2002d884

0800e23c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e244:	6879      	ldr	r1, [r7, #4]
 800e246:	4803      	ldr	r0, [pc, #12]	; (800e254 <BSP_SD_GetCardInfo+0x18>)
 800e248:	f7fc fcca 	bl	800abe0 <HAL_SD_GetCardInfo>
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	2002d884 	.word	0x2002d884

0800e258 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e260:	f000 f818 	bl	800e294 <BSP_SD_AbortCallback>
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e274:	f000 f9a8 	bl	800e5c8 <BSP_SD_WriteCpltCallback>
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e288:	f000 f9aa 	bl	800e5e0 <BSP_SD_ReadCpltCallback>
}
 800e28c:	bf00      	nop
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e294:	b480      	push	{r7}
 800e296:	af00      	add	r7, sp, #0

}
 800e298:	bf00      	nop
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e2ac:	f000 f80c 	bl	800e2c8 <BSP_PlatformIsDetected>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	b2db      	uxtb	r3, r3
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
	...

0800e2c8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e2d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e2d6:	4806      	ldr	r0, [pc, #24]	; (800e2f0 <BSP_PlatformIsDetected+0x28>)
 800e2d8:	f7fa f866 	bl	80083a8 <HAL_GPIO_ReadPin>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d001      	beq.n	800e2e6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	40020000 	.word	0x40020000

0800e2f4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e2fc:	f7f8 fdca 	bl	8006e94 <HAL_GetTick>
 800e300:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e302:	e006      	b.n	800e312 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e304:	f7ff ff8a 	bl	800e21c <BSP_SD_GetCardState>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	e009      	b.n	800e326 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e312:	f7f8 fdbf 	bl	8006e94 <HAL_GetTick>
 800e316:	4602      	mov	r2, r0
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d8f0      	bhi.n	800e304 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e322:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
	...

0800e330 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	4603      	mov	r3, r0
 800e338:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e33a:	4b0b      	ldr	r3, [pc, #44]	; (800e368 <SD_CheckStatus+0x38>)
 800e33c:	2201      	movs	r2, #1
 800e33e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e340:	f7ff ff6c 	bl	800e21c <BSP_SD_GetCardState>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d107      	bne.n	800e35a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e34a:	4b07      	ldr	r3, [pc, #28]	; (800e368 <SD_CheckStatus+0x38>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	f023 0301 	bic.w	r3, r3, #1
 800e354:	b2da      	uxtb	r2, r3
 800e356:	4b04      	ldr	r3, [pc, #16]	; (800e368 <SD_CheckStatus+0x38>)
 800e358:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e35a:	4b03      	ldr	r3, [pc, #12]	; (800e368 <SD_CheckStatus+0x38>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	b2db      	uxtb	r3, r3
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000009 	.word	0x20000009

0800e36c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e376:	f7ff fef7 	bl	800e168 <BSP_SD_Init>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d107      	bne.n	800e390 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff ffd4 	bl	800e330 <SD_CheckStatus>
 800e388:	4603      	mov	r3, r0
 800e38a:	461a      	mov	r2, r3
 800e38c:	4b04      	ldr	r3, [pc, #16]	; (800e3a0 <SD_initialize+0x34>)
 800e38e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e390:	4b03      	ldr	r3, [pc, #12]	; (800e3a0 <SD_initialize+0x34>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	b2db      	uxtb	r3, r3
}
 800e396:	4618      	mov	r0, r3
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	20000009 	.word	0x20000009

0800e3a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff ffbd 	bl	800e330 <SD_CheckStatus>
 800e3b6:	4603      	mov	r3, r0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60b9      	str	r1, [r7, #8]
 800e3c8:	607a      	str	r2, [r7, #4]
 800e3ca:	603b      	str	r3, [r7, #0]
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e3d4:	f247 5030 	movw	r0, #30000	; 0x7530
 800e3d8:	f7ff ff8c 	bl	800e2f4 <SD_CheckStatusWithTimeout>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	da01      	bge.n	800e3e6 <SD_read+0x26>
  {
    return res;
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
 800e3e4:	e03b      	b.n	800e45e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e3e6:	683a      	ldr	r2, [r7, #0]
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	68b8      	ldr	r0, [r7, #8]
 800e3ec:	f7ff fee2 	bl	800e1b4 <BSP_SD_ReadBlocks_DMA>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d132      	bne.n	800e45c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e3f6:	4b1c      	ldr	r3, [pc, #112]	; (800e468 <SD_read+0xa8>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e3fc:	f7f8 fd4a 	bl	8006e94 <HAL_GetTick>
 800e400:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e402:	bf00      	nop
 800e404:	4b18      	ldr	r3, [pc, #96]	; (800e468 <SD_read+0xa8>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d108      	bne.n	800e41e <SD_read+0x5e>
 800e40c:	f7f8 fd42 	bl	8006e94 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	f247 522f 	movw	r2, #29999	; 0x752f
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d9f2      	bls.n	800e404 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e41e:	4b12      	ldr	r3, [pc, #72]	; (800e468 <SD_read+0xa8>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d102      	bne.n	800e42c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e426:	2301      	movs	r3, #1
 800e428:	75fb      	strb	r3, [r7, #23]
 800e42a:	e017      	b.n	800e45c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e42c:	4b0e      	ldr	r3, [pc, #56]	; (800e468 <SD_read+0xa8>)
 800e42e:	2200      	movs	r2, #0
 800e430:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e432:	f7f8 fd2f 	bl	8006e94 <HAL_GetTick>
 800e436:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e438:	e007      	b.n	800e44a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e43a:	f7ff feef 	bl	800e21c <BSP_SD_GetCardState>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d102      	bne.n	800e44a <SD_read+0x8a>
          {
            res = RES_OK;
 800e444:	2300      	movs	r3, #0
 800e446:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e448:	e008      	b.n	800e45c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e44a:	f7f8 fd23 	bl	8006e94 <HAL_GetTick>
 800e44e:	4602      	mov	r2, r0
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	f247 522f 	movw	r2, #29999	; 0x752f
 800e458:	4293      	cmp	r3, r2
 800e45a:	d9ee      	bls.n	800e43a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3718      	adds	r7, #24
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	2002b120 	.word	0x2002b120

0800e46c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	60b9      	str	r1, [r7, #8]
 800e474:	607a      	str	r2, [r7, #4]
 800e476:	603b      	str	r3, [r7, #0]
 800e478:	4603      	mov	r3, r0
 800e47a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e480:	4b24      	ldr	r3, [pc, #144]	; (800e514 <SD_write+0xa8>)
 800e482:	2200      	movs	r2, #0
 800e484:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e486:	f247 5030 	movw	r0, #30000	; 0x7530
 800e48a:	f7ff ff33 	bl	800e2f4 <SD_CheckStatusWithTimeout>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	da01      	bge.n	800e498 <SD_write+0x2c>
  {
    return res;
 800e494:	7dfb      	ldrb	r3, [r7, #23]
 800e496:	e038      	b.n	800e50a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	68b8      	ldr	r0, [r7, #8]
 800e49e:	f7ff fea3 	bl	800e1e8 <BSP_SD_WriteBlocks_DMA>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d12f      	bne.n	800e508 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e4a8:	f7f8 fcf4 	bl	8006e94 <HAL_GetTick>
 800e4ac:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e4ae:	bf00      	nop
 800e4b0:	4b18      	ldr	r3, [pc, #96]	; (800e514 <SD_write+0xa8>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d108      	bne.n	800e4ca <SD_write+0x5e>
 800e4b8:	f7f8 fcec 	bl	8006e94 <HAL_GetTick>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	f247 522f 	movw	r2, #29999	; 0x752f
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d9f2      	bls.n	800e4b0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e4ca:	4b12      	ldr	r3, [pc, #72]	; (800e514 <SD_write+0xa8>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	75fb      	strb	r3, [r7, #23]
 800e4d6:	e017      	b.n	800e508 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e4d8:	4b0e      	ldr	r3, [pc, #56]	; (800e514 <SD_write+0xa8>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e4de:	f7f8 fcd9 	bl	8006e94 <HAL_GetTick>
 800e4e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e4e4:	e007      	b.n	800e4f6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4e6:	f7ff fe99 	bl	800e21c <BSP_SD_GetCardState>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d102      	bne.n	800e4f6 <SD_write+0x8a>
          {
            res = RES_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	75fb      	strb	r3, [r7, #23]
            break;
 800e4f4:	e008      	b.n	800e508 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e4f6:	f7f8 fccd 	bl	8006e94 <HAL_GetTick>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	f247 522f 	movw	r2, #29999	; 0x752f
 800e504:	4293      	cmp	r3, r2
 800e506:	d9ee      	bls.n	800e4e6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e508:	7dfb      	ldrb	r3, [r7, #23]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	2002b11c 	.word	0x2002b11c

0800e518 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b08c      	sub	sp, #48	; 0x30
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	4603      	mov	r3, r0
 800e520:	603a      	str	r2, [r7, #0]
 800e522:	71fb      	strb	r3, [r7, #7]
 800e524:	460b      	mov	r3, r1
 800e526:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e528:	2301      	movs	r3, #1
 800e52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e52e:	4b25      	ldr	r3, [pc, #148]	; (800e5c4 <SD_ioctl+0xac>)
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	f003 0301 	and.w	r3, r3, #1
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <SD_ioctl+0x28>
 800e53c:	2303      	movs	r3, #3
 800e53e:	e03c      	b.n	800e5ba <SD_ioctl+0xa2>

  switch (cmd)
 800e540:	79bb      	ldrb	r3, [r7, #6]
 800e542:	2b03      	cmp	r3, #3
 800e544:	d834      	bhi.n	800e5b0 <SD_ioctl+0x98>
 800e546:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <SD_ioctl+0x34>)
 800e548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54c:	0800e55d 	.word	0x0800e55d
 800e550:	0800e565 	.word	0x0800e565
 800e554:	0800e57d 	.word	0x0800e57d
 800e558:	0800e597 	.word	0x0800e597
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e562:	e028      	b.n	800e5b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e564:	f107 030c 	add.w	r3, r7, #12
 800e568:	4618      	mov	r0, r3
 800e56a:	f7ff fe67 	bl	800e23c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e57a:	e01c      	b.n	800e5b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e57c:	f107 030c 	add.w	r3, r7, #12
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff fe5b 	bl	800e23c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e588:	b29a      	uxth	r2, r3
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e594:	e00f      	b.n	800e5b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e596:	f107 030c 	add.w	r3, r7, #12
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fe4e 	bl	800e23c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a2:	0a5a      	lsrs	r2, r3, #9
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5ae:	e002      	b.n	800e5b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e5b0:	2304      	movs	r3, #4
 800e5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e5b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3730      	adds	r7, #48	; 0x30
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000009 	.word	0x20000009

0800e5c8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e5cc:	4b03      	ldr	r3, [pc, #12]	; (800e5dc <BSP_SD_WriteCpltCallback+0x14>)
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	601a      	str	r2, [r3, #0]
}
 800e5d2:	bf00      	nop
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	2002b11c 	.word	0x2002b11c

0800e5e0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e5e4:	4b03      	ldr	r3, [pc, #12]	; (800e5f4 <BSP_SD_ReadCpltCallback+0x14>)
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	601a      	str	r2, [r3, #0]
}
 800e5ea:	bf00      	nop
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	2002b120 	.word	0x2002b120

0800e5f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	4603      	mov	r3, r0
 800e600:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e602:	79fb      	ldrb	r3, [r7, #7]
 800e604:	4a08      	ldr	r2, [pc, #32]	; (800e628 <disk_status+0x30>)
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	79fa      	ldrb	r2, [r7, #7]
 800e610:	4905      	ldr	r1, [pc, #20]	; (800e628 <disk_status+0x30>)
 800e612:	440a      	add	r2, r1
 800e614:	7a12      	ldrb	r2, [r2, #8]
 800e616:	4610      	mov	r0, r2
 800e618:	4798      	blx	r3
 800e61a:	4603      	mov	r3, r0
 800e61c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	2002b14c 	.word	0x2002b14c

0800e62c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	4a0d      	ldr	r2, [pc, #52]	; (800e674 <disk_initialize+0x48>)
 800e63e:	5cd3      	ldrb	r3, [r2, r3]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d111      	bne.n	800e668 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	4a0b      	ldr	r2, [pc, #44]	; (800e674 <disk_initialize+0x48>)
 800e648:	2101      	movs	r1, #1
 800e64a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e64c:	79fb      	ldrb	r3, [r7, #7]
 800e64e:	4a09      	ldr	r2, [pc, #36]	; (800e674 <disk_initialize+0x48>)
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	4413      	add	r3, r2
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	79fa      	ldrb	r2, [r7, #7]
 800e65a:	4906      	ldr	r1, [pc, #24]	; (800e674 <disk_initialize+0x48>)
 800e65c:	440a      	add	r2, r1
 800e65e:	7a12      	ldrb	r2, [r2, #8]
 800e660:	4610      	mov	r0, r2
 800e662:	4798      	blx	r3
 800e664:	4603      	mov	r3, r0
 800e666:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	2002b14c 	.word	0x2002b14c

0800e678 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e678:	b590      	push	{r4, r7, lr}
 800e67a:	b087      	sub	sp, #28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60b9      	str	r1, [r7, #8]
 800e680:	607a      	str	r2, [r7, #4]
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	4603      	mov	r3, r0
 800e686:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e688:	7bfb      	ldrb	r3, [r7, #15]
 800e68a:	4a0a      	ldr	r2, [pc, #40]	; (800e6b4 <disk_read+0x3c>)
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	689c      	ldr	r4, [r3, #8]
 800e694:	7bfb      	ldrb	r3, [r7, #15]
 800e696:	4a07      	ldr	r2, [pc, #28]	; (800e6b4 <disk_read+0x3c>)
 800e698:	4413      	add	r3, r2
 800e69a:	7a18      	ldrb	r0, [r3, #8]
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	47a0      	blx	r4
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	371c      	adds	r7, #28
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd90      	pop	{r4, r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	2002b14c 	.word	0x2002b14c

0800e6b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
 800e6c2:	603b      	str	r3, [r7, #0]
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	4a0a      	ldr	r2, [pc, #40]	; (800e6f4 <disk_write+0x3c>)
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	68dc      	ldr	r4, [r3, #12]
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
 800e6d6:	4a07      	ldr	r2, [pc, #28]	; (800e6f4 <disk_write+0x3c>)
 800e6d8:	4413      	add	r3, r2
 800e6da:	7a18      	ldrb	r0, [r3, #8]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	68b9      	ldr	r1, [r7, #8]
 800e6e2:	47a0      	blx	r4
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	371c      	adds	r7, #28
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd90      	pop	{r4, r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	2002b14c 	.word	0x2002b14c

0800e6f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	603a      	str	r2, [r7, #0]
 800e702:	71fb      	strb	r3, [r7, #7]
 800e704:	460b      	mov	r3, r1
 800e706:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	4a09      	ldr	r2, [pc, #36]	; (800e730 <disk_ioctl+0x38>)
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	79fa      	ldrb	r2, [r7, #7]
 800e716:	4906      	ldr	r1, [pc, #24]	; (800e730 <disk_ioctl+0x38>)
 800e718:	440a      	add	r2, r1
 800e71a:	7a10      	ldrb	r0, [r2, #8]
 800e71c:	79b9      	ldrb	r1, [r7, #6]
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	4798      	blx	r3
 800e722:	4603      	mov	r3, r0
 800e724:	73fb      	strb	r3, [r7, #15]
  return res;
 800e726:	7bfb      	ldrb	r3, [r7, #15]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	2002b14c 	.word	0x2002b14c

0800e734 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	3301      	adds	r3, #1
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e744:	89fb      	ldrh	r3, [r7, #14]
 800e746:	021b      	lsls	r3, r3, #8
 800e748:	b21a      	sxth	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	b21b      	sxth	r3, r3
 800e750:	4313      	orrs	r3, r2
 800e752:	b21b      	sxth	r3, r3
 800e754:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e756:	89fb      	ldrh	r3, [r7, #14]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e764:	b480      	push	{r7}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	3303      	adds	r3, #3
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	021b      	lsls	r3, r3, #8
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	3202      	adds	r2, #2
 800e77c:	7812      	ldrb	r2, [r2, #0]
 800e77e:	4313      	orrs	r3, r2
 800e780:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	021b      	lsls	r3, r3, #8
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	3201      	adds	r2, #1
 800e78a:	7812      	ldrb	r2, [r2, #0]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	021b      	lsls	r3, r3, #8
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	7812      	ldrb	r2, [r2, #0]
 800e798:	4313      	orrs	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]
	return rv;
 800e79c:	68fb      	ldr	r3, [r7, #12]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3714      	adds	r7, #20
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	1c5a      	adds	r2, r3, #1
 800e7ba:	607a      	str	r2, [r7, #4]
 800e7bc:	887a      	ldrh	r2, [r7, #2]
 800e7be:	b2d2      	uxtb	r2, r2
 800e7c0:	701a      	strb	r2, [r3, #0]
 800e7c2:	887b      	ldrh	r3, [r7, #2]
 800e7c4:	0a1b      	lsrs	r3, r3, #8
 800e7c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	607a      	str	r2, [r7, #4]
 800e7ce:	887a      	ldrh	r2, [r7, #2]
 800e7d0:	b2d2      	uxtb	r2, r2
 800e7d2:	701a      	strb	r2, [r3, #0]
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	607a      	str	r2, [r7, #4]
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	b2d2      	uxtb	r2, r2
 800e7f4:	701a      	strb	r2, [r3, #0]
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	607a      	str	r2, [r7, #4]
 800e802:	683a      	ldr	r2, [r7, #0]
 800e804:	b2d2      	uxtb	r2, r2
 800e806:	701a      	strb	r2, [r3, #0]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	0a1b      	lsrs	r3, r3, #8
 800e80c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	683a      	ldr	r2, [r7, #0]
 800e816:	b2d2      	uxtb	r2, r2
 800e818:	701a      	strb	r2, [r3, #0]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	0a1b      	lsrs	r3, r3, #8
 800e81e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	1c5a      	adds	r2, r3, #1
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	b2d2      	uxtb	r2, r2
 800e82a:	701a      	strb	r2, [r3, #0]
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e838:	b480      	push	{r7}
 800e83a:	b087      	sub	sp, #28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00d      	beq.n	800e86e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	1c53      	adds	r3, r2, #1
 800e856:	613b      	str	r3, [r7, #16]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	1c59      	adds	r1, r3, #1
 800e85c:	6179      	str	r1, [r7, #20]
 800e85e:	7812      	ldrb	r2, [r2, #0]
 800e860:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	3b01      	subs	r3, #1
 800e866:	607b      	str	r3, [r7, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1f1      	bne.n	800e852 <mem_cpy+0x1a>
	}
}
 800e86e:	bf00      	nop
 800e870:	371c      	adds	r7, #28
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e87a:	b480      	push	{r7}
 800e87c:	b087      	sub	sp, #28
 800e87e:	af00      	add	r7, sp, #0
 800e880:	60f8      	str	r0, [r7, #12]
 800e882:	60b9      	str	r1, [r7, #8]
 800e884:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	1c5a      	adds	r2, r3, #1
 800e88e:	617a      	str	r2, [r7, #20]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	b2d2      	uxtb	r2, r2
 800e894:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	3b01      	subs	r3, #1
 800e89a:	607b      	str	r3, [r7, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1f3      	bne.n	800e88a <mem_set+0x10>
}
 800e8a2:	bf00      	nop
 800e8a4:	371c      	adds	r7, #28
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e8ae:	b480      	push	{r7}
 800e8b0:	b089      	sub	sp, #36	; 0x24
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	60b9      	str	r1, [r7, #8]
 800e8b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	61fb      	str	r3, [r7, #28]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	1c5a      	adds	r2, r3, #1
 800e8ca:	61fa      	str	r2, [r7, #28]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	61ba      	str	r2, [r7, #24]
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	1acb      	subs	r3, r1, r3
 800e8da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	607b      	str	r3, [r7, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <mem_cmp+0x40>
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0eb      	beq.n	800e8c6 <mem_cmp+0x18>

	return r;
 800e8ee:	697b      	ldr	r3, [r7, #20]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3724      	adds	r7, #36	; 0x24
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e906:	e002      	b.n	800e90e <chk_chr+0x12>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3301      	adds	r3, #1
 800e90c:	607b      	str	r3, [r7, #4]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d005      	beq.n	800e922 <chk_chr+0x26>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	4293      	cmp	r3, r2
 800e920:	d1f2      	bne.n	800e908 <chk_chr+0xc>
	return *str;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	781b      	ldrb	r3, [r3, #0]
}
 800e926:	4618      	mov	r0, r3
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
	...

0800e934 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e93e:	2300      	movs	r3, #0
 800e940:	60bb      	str	r3, [r7, #8]
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	60fb      	str	r3, [r7, #12]
 800e946:	e029      	b.n	800e99c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e948:	4a27      	ldr	r2, [pc, #156]	; (800e9e8 <chk_lock+0xb4>)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	011b      	lsls	r3, r3, #4
 800e94e:	4413      	add	r3, r2
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d01d      	beq.n	800e992 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e956:	4a24      	ldr	r2, [pc, #144]	; (800e9e8 <chk_lock+0xb4>)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	011b      	lsls	r3, r3, #4
 800e95c:	4413      	add	r3, r2
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d116      	bne.n	800e996 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e968:	4a1f      	ldr	r2, [pc, #124]	; (800e9e8 <chk_lock+0xb4>)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	4413      	add	r3, r2
 800e970:	3304      	adds	r3, #4
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e978:	429a      	cmp	r2, r3
 800e97a:	d10c      	bne.n	800e996 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e97c:	4a1a      	ldr	r2, [pc, #104]	; (800e9e8 <chk_lock+0xb4>)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	011b      	lsls	r3, r3, #4
 800e982:	4413      	add	r3, r2
 800e984:	3308      	adds	r3, #8
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d102      	bne.n	800e996 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e990:	e007      	b.n	800e9a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e992:	2301      	movs	r3, #1
 800e994:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	3301      	adds	r3, #1
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d9d2      	bls.n	800e948 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d109      	bne.n	800e9bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d102      	bne.n	800e9b4 <chk_lock+0x80>
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d101      	bne.n	800e9b8 <chk_lock+0x84>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	e010      	b.n	800e9da <chk_lock+0xa6>
 800e9b8:	2312      	movs	r3, #18
 800e9ba:	e00e      	b.n	800e9da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d108      	bne.n	800e9d4 <chk_lock+0xa0>
 800e9c2:	4a09      	ldr	r2, [pc, #36]	; (800e9e8 <chk_lock+0xb4>)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	011b      	lsls	r3, r3, #4
 800e9c8:	4413      	add	r3, r2
 800e9ca:	330c      	adds	r3, #12
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9d2:	d101      	bne.n	800e9d8 <chk_lock+0xa4>
 800e9d4:	2310      	movs	r3, #16
 800e9d6:	e000      	b.n	800e9da <chk_lock+0xa6>
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3714      	adds	r7, #20
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	2002b12c 	.word	0x2002b12c

0800e9ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	607b      	str	r3, [r7, #4]
 800e9f6:	e002      	b.n	800e9fe <enq_lock+0x12>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	607b      	str	r3, [r7, #4]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d806      	bhi.n	800ea12 <enq_lock+0x26>
 800ea04:	4a09      	ldr	r2, [pc, #36]	; (800ea2c <enq_lock+0x40>)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	011b      	lsls	r3, r3, #4
 800ea0a:	4413      	add	r3, r2
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f2      	bne.n	800e9f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	bf14      	ite	ne
 800ea18:	2301      	movne	r3, #1
 800ea1a:	2300      	moveq	r3, #0
 800ea1c:	b2db      	uxtb	r3, r3
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	2002b12c 	.word	0x2002b12c

0800ea30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60fb      	str	r3, [r7, #12]
 800ea3e:	e01f      	b.n	800ea80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ea40:	4a41      	ldr	r2, [pc, #260]	; (800eb48 <inc_lock+0x118>)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	011b      	lsls	r3, r3, #4
 800ea46:	4413      	add	r3, r2
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d113      	bne.n	800ea7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ea52:	4a3d      	ldr	r2, [pc, #244]	; (800eb48 <inc_lock+0x118>)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	4413      	add	r3, r2
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d109      	bne.n	800ea7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ea66:	4a38      	ldr	r2, [pc, #224]	; (800eb48 <inc_lock+0x118>)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	011b      	lsls	r3, r3, #4
 800ea6c:	4413      	add	r3, r2
 800ea6e:	3308      	adds	r3, #8
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d006      	beq.n	800ea88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d9dc      	bls.n	800ea40 <inc_lock+0x10>
 800ea86:	e000      	b.n	800ea8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ea88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d132      	bne.n	800eaf6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea90:	2300      	movs	r3, #0
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e002      	b.n	800ea9c <inc_lock+0x6c>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	60fb      	str	r3, [r7, #12]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d806      	bhi.n	800eab0 <inc_lock+0x80>
 800eaa2:	4a29      	ldr	r2, [pc, #164]	; (800eb48 <inc_lock+0x118>)
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	011b      	lsls	r3, r3, #4
 800eaa8:	4413      	add	r3, r2
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1f2      	bne.n	800ea96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d101      	bne.n	800eaba <inc_lock+0x8a>
 800eab6:	2300      	movs	r3, #0
 800eab8:	e040      	b.n	800eb3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	4922      	ldr	r1, [pc, #136]	; (800eb48 <inc_lock+0x118>)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	011b      	lsls	r3, r3, #4
 800eac4:	440b      	add	r3, r1
 800eac6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	689a      	ldr	r2, [r3, #8]
 800eacc:	491e      	ldr	r1, [pc, #120]	; (800eb48 <inc_lock+0x118>)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	011b      	lsls	r3, r3, #4
 800ead2:	440b      	add	r3, r1
 800ead4:	3304      	adds	r3, #4
 800ead6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	695a      	ldr	r2, [r3, #20]
 800eadc:	491a      	ldr	r1, [pc, #104]	; (800eb48 <inc_lock+0x118>)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	011b      	lsls	r3, r3, #4
 800eae2:	440b      	add	r3, r1
 800eae4:	3308      	adds	r3, #8
 800eae6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eae8:	4a17      	ldr	r2, [pc, #92]	; (800eb48 <inc_lock+0x118>)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	011b      	lsls	r3, r3, #4
 800eaee:	4413      	add	r3, r2
 800eaf0:	330c      	adds	r3, #12
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d009      	beq.n	800eb10 <inc_lock+0xe0>
 800eafc:	4a12      	ldr	r2, [pc, #72]	; (800eb48 <inc_lock+0x118>)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	011b      	lsls	r3, r3, #4
 800eb02:	4413      	add	r3, r2
 800eb04:	330c      	adds	r3, #12
 800eb06:	881b      	ldrh	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d001      	beq.n	800eb10 <inc_lock+0xe0>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	e015      	b.n	800eb3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d108      	bne.n	800eb28 <inc_lock+0xf8>
 800eb16:	4a0c      	ldr	r2, [pc, #48]	; (800eb48 <inc_lock+0x118>)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	011b      	lsls	r3, r3, #4
 800eb1c:	4413      	add	r3, r2
 800eb1e:	330c      	adds	r3, #12
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	3301      	adds	r3, #1
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	e001      	b.n	800eb2c <inc_lock+0xfc>
 800eb28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb2c:	4906      	ldr	r1, [pc, #24]	; (800eb48 <inc_lock+0x118>)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	011b      	lsls	r3, r3, #4
 800eb32:	440b      	add	r3, r1
 800eb34:	330c      	adds	r3, #12
 800eb36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3301      	adds	r3, #1
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	2002b12c 	.word	0x2002b12c

0800eb4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3b01      	subs	r3, #1
 800eb58:	607b      	str	r3, [r7, #4]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d825      	bhi.n	800ebac <dec_lock+0x60>
		n = Files[i].ctr;
 800eb60:	4a17      	ldr	r2, [pc, #92]	; (800ebc0 <dec_lock+0x74>)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	011b      	lsls	r3, r3, #4
 800eb66:	4413      	add	r3, r2
 800eb68:	330c      	adds	r3, #12
 800eb6a:	881b      	ldrh	r3, [r3, #0]
 800eb6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800eb6e:	89fb      	ldrh	r3, [r7, #14]
 800eb70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb74:	d101      	bne.n	800eb7a <dec_lock+0x2e>
 800eb76:	2300      	movs	r3, #0
 800eb78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800eb7a:	89fb      	ldrh	r3, [r7, #14]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <dec_lock+0x3a>
 800eb80:	89fb      	ldrh	r3, [r7, #14]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800eb86:	4a0e      	ldr	r2, [pc, #56]	; (800ebc0 <dec_lock+0x74>)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	011b      	lsls	r3, r3, #4
 800eb8c:	4413      	add	r3, r2
 800eb8e:	330c      	adds	r3, #12
 800eb90:	89fa      	ldrh	r2, [r7, #14]
 800eb92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800eb94:	89fb      	ldrh	r3, [r7, #14]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d105      	bne.n	800eba6 <dec_lock+0x5a>
 800eb9a:	4a09      	ldr	r2, [pc, #36]	; (800ebc0 <dec_lock+0x74>)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	011b      	lsls	r3, r3, #4
 800eba0:	4413      	add	r3, r2
 800eba2:	2200      	movs	r2, #0
 800eba4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800eba6:	2300      	movs	r3, #0
 800eba8:	737b      	strb	r3, [r7, #13]
 800ebaa:	e001      	b.n	800ebb0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ebac:	2302      	movs	r3, #2
 800ebae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ebb0:	7b7b      	ldrb	r3, [r7, #13]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3714      	adds	r7, #20
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	2002b12c 	.word	0x2002b12c

0800ebc4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ebcc:	2300      	movs	r3, #0
 800ebce:	60fb      	str	r3, [r7, #12]
 800ebd0:	e010      	b.n	800ebf4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ebd2:	4a0d      	ldr	r2, [pc, #52]	; (800ec08 <clear_lock+0x44>)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	011b      	lsls	r3, r3, #4
 800ebd8:	4413      	add	r3, r2
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d105      	bne.n	800ebee <clear_lock+0x2a>
 800ebe2:	4a09      	ldr	r2, [pc, #36]	; (800ec08 <clear_lock+0x44>)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	011b      	lsls	r3, r3, #4
 800ebe8:	4413      	add	r3, r2
 800ebea:	2200      	movs	r2, #0
 800ebec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d9eb      	bls.n	800ebd2 <clear_lock+0xe>
	}
}
 800ebfa:	bf00      	nop
 800ebfc:	3714      	adds	r7, #20
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	2002b12c 	.word	0x2002b12c

0800ec0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	78db      	ldrb	r3, [r3, #3]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d034      	beq.n	800ec8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7858      	ldrb	r0, [r3, #1]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec30:	2301      	movs	r3, #1
 800ec32:	697a      	ldr	r2, [r7, #20]
 800ec34:	f7ff fd40 	bl	800e6b8 <disk_write>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	73fb      	strb	r3, [r7, #15]
 800ec42:	e022      	b.n	800ec8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4e:	697a      	ldr	r2, [r7, #20]
 800ec50:	1ad2      	subs	r2, r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a1b      	ldr	r3, [r3, #32]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d217      	bcs.n	800ec8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	789b      	ldrb	r3, [r3, #2]
 800ec5e:	613b      	str	r3, [r7, #16]
 800ec60:	e010      	b.n	800ec84 <sync_window+0x78>
					wsect += fs->fsize;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	4413      	add	r3, r2
 800ec6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7858      	ldrb	r0, [r3, #1]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec76:	2301      	movs	r3, #1
 800ec78:	697a      	ldr	r2, [r7, #20]
 800ec7a:	f7ff fd1d 	bl	800e6b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	613b      	str	r3, [r7, #16]
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d8eb      	bhi.n	800ec62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d01b      	beq.n	800ece4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f7ff ffad 	bl	800ec0c <sync_window>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ecb6:	7bfb      	ldrb	r3, [r7, #15]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d113      	bne.n	800ece4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	7858      	ldrb	r0, [r3, #1]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	f7ff fcd5 	bl	800e678 <disk_read>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d004      	beq.n	800ecde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ecd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
	...

0800ecf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff ff87 	bl	800ec0c <sync_window>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ed02:	7bfb      	ldrb	r3, [r7, #15]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d159      	bne.n	800edbc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	2b03      	cmp	r3, #3
 800ed0e:	d149      	bne.n	800eda4 <sync_fs+0xb4>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	791b      	ldrb	r3, [r3, #4]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d145      	bne.n	800eda4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	899b      	ldrh	r3, [r3, #12]
 800ed22:	461a      	mov	r2, r3
 800ed24:	2100      	movs	r1, #0
 800ed26:	f7ff fda8 	bl	800e87a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	3338      	adds	r3, #56	; 0x38
 800ed2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed32:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff fd37 	bl	800e7aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3338      	adds	r3, #56	; 0x38
 800ed40:	4921      	ldr	r1, [pc, #132]	; (800edc8 <sync_fs+0xd8>)
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff fd4c 	bl	800e7e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3338      	adds	r3, #56	; 0x38
 800ed4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ed50:	491e      	ldr	r1, [pc, #120]	; (800edcc <sync_fs+0xdc>)
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fd44 	bl	800e7e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3338      	adds	r3, #56	; 0x38
 800ed5c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	4619      	mov	r1, r3
 800ed66:	4610      	mov	r0, r2
 800ed68:	f7ff fd3a 	bl	800e7e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3338      	adds	r3, #56	; 0x38
 800ed70:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	f7ff fd30 	bl	800e7e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7858      	ldrb	r0, [r3, #1]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed98:	2301      	movs	r3, #1
 800ed9a:	f7ff fc8d 	bl	800e6b8 <disk_write>
			fs->fsi_flag = 0;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	2200      	movs	r2, #0
 800edaa:	2100      	movs	r1, #0
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff fca3 	bl	800e6f8 <disk_ioctl>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d001      	beq.n	800edbc <sync_fs+0xcc>
 800edb8:	2301      	movs	r3, #1
 800edba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	41615252 	.word	0x41615252
 800edcc:	61417272 	.word	0x61417272

0800edd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	3b02      	subs	r3, #2
 800edde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	69db      	ldr	r3, [r3, #28]
 800ede4:	3b02      	subs	r3, #2
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d301      	bcc.n	800edf0 <clust2sect+0x20>
 800edec:	2300      	movs	r3, #0
 800edee:	e008      	b.n	800ee02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	895b      	ldrh	r3, [r3, #10]
 800edf4:	461a      	mov	r2, r3
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	fb03 f202 	mul.w	r2, r3, r2
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee00:	4413      	add	r3, r2
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b086      	sub	sp, #24
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d904      	bls.n	800ee2e <get_fat+0x20>
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d302      	bcc.n	800ee34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ee2e:	2301      	movs	r3, #1
 800ee30:	617b      	str	r3, [r7, #20]
 800ee32:	e0b7      	b.n	800efa4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ee34:	f04f 33ff 	mov.w	r3, #4294967295
 800ee38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	d05a      	beq.n	800eef8 <get_fat+0xea>
 800ee42:	2b03      	cmp	r3, #3
 800ee44:	d07d      	beq.n	800ef42 <get_fat+0x134>
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	f040 80a2 	bne.w	800ef90 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	085b      	lsrs	r3, r3, #1
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	4413      	add	r3, r2
 800ee58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	899b      	ldrh	r3, [r3, #12]
 800ee62:	4619      	mov	r1, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee6a:	4413      	add	r3, r2
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	6938      	ldr	r0, [r7, #16]
 800ee70:	f7ff ff10 	bl	800ec94 <move_window>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f040 808d 	bne.w	800ef96 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	1c5a      	adds	r2, r3, #1
 800ee80:	60fa      	str	r2, [r7, #12]
 800ee82:	693a      	ldr	r2, [r7, #16]
 800ee84:	8992      	ldrh	r2, [r2, #12]
 800ee86:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee8a:	fb02 f201 	mul.w	r2, r2, r1
 800ee8e:	1a9b      	subs	r3, r3, r2
 800ee90:	693a      	ldr	r2, [r7, #16]
 800ee92:	4413      	add	r3, r2
 800ee94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ee98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	899b      	ldrh	r3, [r3, #12]
 800eea2:	4619      	mov	r1, r3
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeaa:	4413      	add	r3, r2
 800eeac:	4619      	mov	r1, r3
 800eeae:	6938      	ldr	r0, [r7, #16]
 800eeb0:	f7ff fef0 	bl	800ec94 <move_window>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d16f      	bne.n	800ef9a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	899b      	ldrh	r3, [r3, #12]
 800eebe:	461a      	mov	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	fbb3 f1f2 	udiv	r1, r3, r2
 800eec6:	fb02 f201 	mul.w	r2, r2, r1
 800eeca:	1a9b      	subs	r3, r3, r2
 800eecc:	693a      	ldr	r2, [r7, #16]
 800eece:	4413      	add	r3, r2
 800eed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eed4:	021b      	lsls	r3, r3, #8
 800eed6:	461a      	mov	r2, r3
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	4313      	orrs	r3, r2
 800eedc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <get_fat+0xe0>
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	091b      	lsrs	r3, r3, #4
 800eeec:	e002      	b.n	800eef4 <get_fat+0xe6>
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eef4:	617b      	str	r3, [r7, #20]
			break;
 800eef6:	e055      	b.n	800efa4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	899b      	ldrh	r3, [r3, #12]
 800ef00:	085b      	lsrs	r3, r3, #1
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	4619      	mov	r1, r3
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef0c:	4413      	add	r3, r2
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6938      	ldr	r0, [r7, #16]
 800ef12:	f7ff febf 	bl	800ec94 <move_window>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d140      	bne.n	800ef9e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	693a      	ldr	r2, [r7, #16]
 800ef28:	8992      	ldrh	r2, [r2, #12]
 800ef2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef2e:	fb02 f200 	mul.w	r2, r2, r0
 800ef32:	1a9b      	subs	r3, r3, r2
 800ef34:	440b      	add	r3, r1
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff fbfc 	bl	800e734 <ld_word>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	617b      	str	r3, [r7, #20]
			break;
 800ef40:	e030      	b.n	800efa4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	899b      	ldrh	r3, [r3, #12]
 800ef4a:	089b      	lsrs	r3, r3, #2
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	4619      	mov	r1, r3
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef56:	4413      	add	r3, r2
 800ef58:	4619      	mov	r1, r3
 800ef5a:	6938      	ldr	r0, [r7, #16]
 800ef5c:	f7ff fe9a 	bl	800ec94 <move_window>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d11d      	bne.n	800efa2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	693a      	ldr	r2, [r7, #16]
 800ef72:	8992      	ldrh	r2, [r2, #12]
 800ef74:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef78:	fb02 f200 	mul.w	r2, r2, r0
 800ef7c:	1a9b      	subs	r3, r3, r2
 800ef7e:	440b      	add	r3, r1
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fbef 	bl	800e764 <ld_dword>
 800ef86:	4603      	mov	r3, r0
 800ef88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ef8c:	617b      	str	r3, [r7, #20]
			break;
 800ef8e:	e009      	b.n	800efa4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ef90:	2301      	movs	r3, #1
 800ef92:	617b      	str	r3, [r7, #20]
 800ef94:	e006      	b.n	800efa4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef96:	bf00      	nop
 800ef98:	e004      	b.n	800efa4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef9a:	bf00      	nop
 800ef9c:	e002      	b.n	800efa4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef9e:	bf00      	nop
 800efa0:	e000      	b.n	800efa4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efa2:	bf00      	nop
		}
	}

	return val;
 800efa4:	697b      	ldr	r3, [r7, #20]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800efae:	b590      	push	{r4, r7, lr}
 800efb0:	b089      	sub	sp, #36	; 0x24
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	60f8      	str	r0, [r7, #12]
 800efb6:	60b9      	str	r1, [r7, #8]
 800efb8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800efba:	2302      	movs	r3, #2
 800efbc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	f240 8106 	bls.w	800f1d2 <put_fat+0x224>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	429a      	cmp	r2, r3
 800efce:	f080 8100 	bcs.w	800f1d2 <put_fat+0x224>
		switch (fs->fs_type) {
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	f000 8088 	beq.w	800f0ec <put_fat+0x13e>
 800efdc:	2b03      	cmp	r3, #3
 800efde:	f000 80b0 	beq.w	800f142 <put_fat+0x194>
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	f040 80f5 	bne.w	800f1d2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	61bb      	str	r3, [r7, #24]
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	085b      	lsrs	r3, r3, #1
 800eff0:	69ba      	ldr	r2, [r7, #24]
 800eff2:	4413      	add	r3, r2
 800eff4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	899b      	ldrh	r3, [r3, #12]
 800effe:	4619      	mov	r1, r3
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	fbb3 f3f1 	udiv	r3, r3, r1
 800f006:	4413      	add	r3, r2
 800f008:	4619      	mov	r1, r3
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f7ff fe42 	bl	800ec94 <move_window>
 800f010:	4603      	mov	r3, r0
 800f012:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f014:	7ffb      	ldrb	r3, [r7, #31]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f040 80d4 	bne.w	800f1c4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	61ba      	str	r2, [r7, #24]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	8992      	ldrh	r2, [r2, #12]
 800f02c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f030:	fb02 f200 	mul.w	r2, r2, r0
 800f034:	1a9b      	subs	r3, r3, r2
 800f036:	440b      	add	r3, r1
 800f038:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00d      	beq.n	800f060 <put_fat+0xb2>
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	b25b      	sxtb	r3, r3
 800f04a:	f003 030f 	and.w	r3, r3, #15
 800f04e:	b25a      	sxtb	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	b2db      	uxtb	r3, r3
 800f054:	011b      	lsls	r3, r3, #4
 800f056:	b25b      	sxtb	r3, r3
 800f058:	4313      	orrs	r3, r2
 800f05a:	b25b      	sxtb	r3, r3
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	e001      	b.n	800f064 <put_fat+0xb6>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	697a      	ldr	r2, [r7, #20]
 800f066:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2201      	movs	r2, #1
 800f06c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	899b      	ldrh	r3, [r3, #12]
 800f076:	4619      	mov	r1, r3
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f07e:	4413      	add	r3, r2
 800f080:	4619      	mov	r1, r3
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f7ff fe06 	bl	800ec94 <move_window>
 800f088:	4603      	mov	r3, r0
 800f08a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f08c:	7ffb      	ldrb	r3, [r7, #31]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f040 809a 	bne.w	800f1c8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	899b      	ldrh	r3, [r3, #12]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0a6:	fb02 f200 	mul.w	r2, r2, r0
 800f0aa:	1a9b      	subs	r3, r3, r2
 800f0ac:	440b      	add	r3, r1
 800f0ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	f003 0301 	and.w	r3, r3, #1
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <put_fat+0x114>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	091b      	lsrs	r3, r3, #4
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	e00e      	b.n	800f0e0 <put_fat+0x132>
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	b25b      	sxtb	r3, r3
 800f0c8:	f023 030f 	bic.w	r3, r3, #15
 800f0cc:	b25a      	sxtb	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	0a1b      	lsrs	r3, r3, #8
 800f0d2:	b25b      	sxtb	r3, r3
 800f0d4:	f003 030f 	and.w	r3, r3, #15
 800f0d8:	b25b      	sxtb	r3, r3
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	b25b      	sxtb	r3, r3
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	697a      	ldr	r2, [r7, #20]
 800f0e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	70da      	strb	r2, [r3, #3]
			break;
 800f0ea:	e072      	b.n	800f1d2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	899b      	ldrh	r3, [r3, #12]
 800f0f4:	085b      	lsrs	r3, r3, #1
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f100:	4413      	add	r3, r2
 800f102:	4619      	mov	r1, r3
 800f104:	68f8      	ldr	r0, [r7, #12]
 800f106:	f7ff fdc5 	bl	800ec94 <move_window>
 800f10a:	4603      	mov	r3, r0
 800f10c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f10e:	7ffb      	ldrb	r3, [r7, #31]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d15b      	bne.n	800f1cc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	005b      	lsls	r3, r3, #1
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	8992      	ldrh	r2, [r2, #12]
 800f122:	fbb3 f0f2 	udiv	r0, r3, r2
 800f126:	fb02 f200 	mul.w	r2, r2, r0
 800f12a:	1a9b      	subs	r3, r3, r2
 800f12c:	440b      	add	r3, r1
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	b292      	uxth	r2, r2
 800f132:	4611      	mov	r1, r2
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff fb38 	bl	800e7aa <st_word>
			fs->wflag = 1;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2201      	movs	r2, #1
 800f13e:	70da      	strb	r2, [r3, #3]
			break;
 800f140:	e047      	b.n	800f1d2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	899b      	ldrh	r3, [r3, #12]
 800f14a:	089b      	lsrs	r3, r3, #2
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	4619      	mov	r1, r3
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	fbb3 f3f1 	udiv	r3, r3, r1
 800f156:	4413      	add	r3, r2
 800f158:	4619      	mov	r1, r3
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f7ff fd9a 	bl	800ec94 <move_window>
 800f160:	4603      	mov	r3, r0
 800f162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f164:	7ffb      	ldrb	r3, [r7, #31]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d132      	bne.n	800f1d0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	8992      	ldrh	r2, [r2, #12]
 800f17e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f182:	fb02 f200 	mul.w	r2, r2, r0
 800f186:	1a9b      	subs	r3, r3, r2
 800f188:	440b      	add	r3, r1
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff faea 	bl	800e764 <ld_dword>
 800f190:	4603      	mov	r3, r0
 800f192:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f196:	4323      	orrs	r3, r4
 800f198:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	8992      	ldrh	r2, [r2, #12]
 800f1a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1ac:	fb02 f200 	mul.w	r2, r2, r0
 800f1b0:	1a9b      	subs	r3, r3, r2
 800f1b2:	440b      	add	r3, r1
 800f1b4:	6879      	ldr	r1, [r7, #4]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff fb12 	bl	800e7e0 <st_dword>
			fs->wflag = 1;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	70da      	strb	r2, [r3, #3]
			break;
 800f1c2:	e006      	b.n	800f1d2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1c4:	bf00      	nop
 800f1c6:	e004      	b.n	800f1d2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1c8:	bf00      	nop
 800f1ca:	e002      	b.n	800f1d2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1cc:	bf00      	nop
 800f1ce:	e000      	b.n	800f1d2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f1d0:	bf00      	nop
		}
	}
	return res;
 800f1d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3724      	adds	r7, #36	; 0x24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd90      	pop	{r4, r7, pc}

0800f1dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d904      	bls.n	800f202 <remove_chain+0x26>
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	69db      	ldr	r3, [r3, #28]
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d301      	bcc.n	800f206 <remove_chain+0x2a>
 800f202:	2302      	movs	r3, #2
 800f204:	e04b      	b.n	800f29e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00c      	beq.n	800f226 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f20c:	f04f 32ff 	mov.w	r2, #4294967295
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	69b8      	ldr	r0, [r7, #24]
 800f214:	f7ff fecb 	bl	800efae <put_fat>
 800f218:	4603      	mov	r3, r0
 800f21a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f21c:	7ffb      	ldrb	r3, [r7, #31]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <remove_chain+0x4a>
 800f222:	7ffb      	ldrb	r3, [r7, #31]
 800f224:	e03b      	b.n	800f29e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f226:	68b9      	ldr	r1, [r7, #8]
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f7ff fdf0 	bl	800ee0e <get_fat>
 800f22e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d031      	beq.n	800f29a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d101      	bne.n	800f240 <remove_chain+0x64>
 800f23c:	2302      	movs	r3, #2
 800f23e:	e02e      	b.n	800f29e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f246:	d101      	bne.n	800f24c <remove_chain+0x70>
 800f248:	2301      	movs	r3, #1
 800f24a:	e028      	b.n	800f29e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f24c:	2200      	movs	r2, #0
 800f24e:	68b9      	ldr	r1, [r7, #8]
 800f250:	69b8      	ldr	r0, [r7, #24]
 800f252:	f7ff feac 	bl	800efae <put_fat>
 800f256:	4603      	mov	r3, r0
 800f258:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f25a:	7ffb      	ldrb	r3, [r7, #31]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d001      	beq.n	800f264 <remove_chain+0x88>
 800f260:	7ffb      	ldrb	r3, [r7, #31]
 800f262:	e01c      	b.n	800f29e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	695a      	ldr	r2, [r3, #20]
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	3b02      	subs	r3, #2
 800f26e:	429a      	cmp	r2, r3
 800f270:	d20b      	bcs.n	800f28a <remove_chain+0xae>
			fs->free_clst++;
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	695b      	ldr	r3, [r3, #20]
 800f276:	1c5a      	adds	r2, r3, #1
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	791b      	ldrb	r3, [r3, #4]
 800f280:	f043 0301 	orr.w	r3, r3, #1
 800f284:	b2da      	uxtb	r2, r3
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	69db      	ldr	r3, [r3, #28]
 800f292:	68ba      	ldr	r2, [r7, #8]
 800f294:	429a      	cmp	r2, r3
 800f296:	d3c6      	bcc.n	800f226 <remove_chain+0x4a>
 800f298:	e000      	b.n	800f29c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f29a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3720      	adds	r7, #32
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b088      	sub	sp, #32
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
 800f2ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10d      	bne.n	800f2d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d004      	beq.n	800f2d2 <create_chain+0x2c>
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	69db      	ldr	r3, [r3, #28]
 800f2cc:	69ba      	ldr	r2, [r7, #24]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d31b      	bcc.n	800f30a <create_chain+0x64>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	61bb      	str	r3, [r7, #24]
 800f2d6:	e018      	b.n	800f30a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff fd97 	bl	800ee0e <get_fat>
 800f2e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d801      	bhi.n	800f2ec <create_chain+0x46>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e070      	b.n	800f3ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f2:	d101      	bne.n	800f2f8 <create_chain+0x52>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	e06a      	b.n	800f3ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	69db      	ldr	r3, [r3, #28]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d201      	bcs.n	800f306 <create_chain+0x60>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	e063      	b.n	800f3ce <create_chain+0x128>
		scl = clst;
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	3301      	adds	r3, #1
 800f312:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	69db      	ldr	r3, [r3, #28]
 800f318:	69fa      	ldr	r2, [r7, #28]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d307      	bcc.n	800f32e <create_chain+0x88>
				ncl = 2;
 800f31e:	2302      	movs	r3, #2
 800f320:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f322:	69fa      	ldr	r2, [r7, #28]
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	429a      	cmp	r2, r3
 800f328:	d901      	bls.n	800f32e <create_chain+0x88>
 800f32a:	2300      	movs	r3, #0
 800f32c:	e04f      	b.n	800f3ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f32e:	69f9      	ldr	r1, [r7, #28]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7ff fd6c 	bl	800ee0e <get_fat>
 800f336:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00e      	beq.n	800f35c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2b01      	cmp	r3, #1
 800f342:	d003      	beq.n	800f34c <create_chain+0xa6>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34a:	d101      	bne.n	800f350 <create_chain+0xaa>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	e03e      	b.n	800f3ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f350:	69fa      	ldr	r2, [r7, #28]
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	429a      	cmp	r2, r3
 800f356:	d1da      	bne.n	800f30e <create_chain+0x68>
 800f358:	2300      	movs	r3, #0
 800f35a:	e038      	b.n	800f3ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f35c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f35e:	f04f 32ff 	mov.w	r2, #4294967295
 800f362:	69f9      	ldr	r1, [r7, #28]
 800f364:	6938      	ldr	r0, [r7, #16]
 800f366:	f7ff fe22 	bl	800efae <put_fat>
 800f36a:	4603      	mov	r3, r0
 800f36c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f36e:	7dfb      	ldrb	r3, [r7, #23]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d109      	bne.n	800f388 <create_chain+0xe2>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d006      	beq.n	800f388 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f37a:	69fa      	ldr	r2, [r7, #28]
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	6938      	ldr	r0, [r7, #16]
 800f380:	f7ff fe15 	bl	800efae <put_fat>
 800f384:	4603      	mov	r3, r0
 800f386:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f388:	7dfb      	ldrb	r3, [r7, #23]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d116      	bne.n	800f3bc <create_chain+0x116>
		fs->last_clst = ncl;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	695a      	ldr	r2, [r3, #20]
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	3b02      	subs	r3, #2
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d804      	bhi.n	800f3ac <create_chain+0x106>
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	1e5a      	subs	r2, r3, #1
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	791b      	ldrb	r3, [r3, #4]
 800f3b0:	f043 0301 	orr.w	r3, r3, #1
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	711a      	strb	r2, [r3, #4]
 800f3ba:	e007      	b.n	800f3cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d102      	bne.n	800f3c8 <create_chain+0x122>
 800f3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c6:	e000      	b.n	800f3ca <create_chain+0x124>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f3cc:	69fb      	ldr	r3, [r7, #28]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3720      	adds	r7, #32
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f3d6:	b480      	push	{r7}
 800f3d8:	b087      	sub	sp, #28
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	8952      	ldrh	r2, [r2, #10]
 800f3fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800f402:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	1d1a      	adds	r2, r3, #4
 800f408:	613a      	str	r2, [r7, #16]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <clmt_clust+0x42>
 800f414:	2300      	movs	r3, #0
 800f416:	e010      	b.n	800f43a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f418:	697a      	ldr	r2, [r7, #20]
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d307      	bcc.n	800f430 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	617b      	str	r3, [r7, #20]
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	3304      	adds	r3, #4
 800f42c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f42e:	e7e9      	b.n	800f404 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f430:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	4413      	add	r3, r2
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	371c      	adds	r7, #28
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b086      	sub	sp, #24
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f45c:	d204      	bcs.n	800f468 <dir_sdi+0x22>
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	f003 031f 	and.w	r3, r3, #31
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <dir_sdi+0x26>
		return FR_INT_ERR;
 800f468:	2302      	movs	r3, #2
 800f46a:	e071      	b.n	800f550 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	689b      	ldr	r3, [r3, #8]
 800f476:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d106      	bne.n	800f48c <dir_sdi+0x46>
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b02      	cmp	r3, #2
 800f484:	d902      	bls.n	800f48c <dir_sdi+0x46>
		clst = fs->dirbase;
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d10c      	bne.n	800f4ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	095b      	lsrs	r3, r3, #5
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	8912      	ldrh	r2, [r2, #8]
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d301      	bcc.n	800f4a2 <dir_sdi+0x5c>
 800f49e:	2302      	movs	r3, #2
 800f4a0:	e056      	b.n	800f550 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	61da      	str	r2, [r3, #28]
 800f4aa:	e02d      	b.n	800f508 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	895b      	ldrh	r3, [r3, #10]
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	899b      	ldrh	r3, [r3, #12]
 800f4b6:	fb03 f302 	mul.w	r3, r3, r2
 800f4ba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f4bc:	e019      	b.n	800f4f2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6979      	ldr	r1, [r7, #20]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff fca3 	bl	800ee0e <get_fat>
 800f4c8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d0:	d101      	bne.n	800f4d6 <dir_sdi+0x90>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	e03c      	b.n	800f550 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d904      	bls.n	800f4e6 <dir_sdi+0xa0>
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	69db      	ldr	r3, [r3, #28]
 800f4e0:	697a      	ldr	r2, [r7, #20]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d301      	bcc.n	800f4ea <dir_sdi+0xa4>
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	e032      	b.n	800f550 <dir_sdi+0x10a>
			ofs -= csz;
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d2e1      	bcs.n	800f4be <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f4fa:	6979      	ldr	r1, [r7, #20]
 800f4fc:	6938      	ldr	r0, [r7, #16]
 800f4fe:	f7ff fc67 	bl	800edd0 <clust2sect>
 800f502:	4602      	mov	r2, r0
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	69db      	ldr	r3, [r3, #28]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <dir_sdi+0xd4>
 800f516:	2302      	movs	r3, #2
 800f518:	e01a      	b.n	800f550 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	69da      	ldr	r2, [r3, #28]
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	899b      	ldrh	r3, [r3, #12]
 800f522:	4619      	mov	r1, r3
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	fbb3 f3f1 	udiv	r3, r3, r1
 800f52a:	441a      	add	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	461a      	mov	r2, r3
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f542:	fb02 f200 	mul.w	r2, r2, r0
 800f546:	1a9b      	subs	r3, r3, r2
 800f548:	18ca      	adds	r2, r1, r3
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	4618      	mov	r0, r3
 800f552:	3718      	adds	r7, #24
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	695b      	ldr	r3, [r3, #20]
 800f56c:	3320      	adds	r3, #32
 800f56e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	69db      	ldr	r3, [r3, #28]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d003      	beq.n	800f580 <dir_next+0x28>
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f57e:	d301      	bcc.n	800f584 <dir_next+0x2c>
 800f580:	2304      	movs	r3, #4
 800f582:	e0bb      	b.n	800f6fc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	899b      	ldrh	r3, [r3, #12]
 800f588:	461a      	mov	r2, r3
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f590:	fb02 f201 	mul.w	r2, r2, r1
 800f594:	1a9b      	subs	r3, r3, r2
 800f596:	2b00      	cmp	r3, #0
 800f598:	f040 809d 	bne.w	800f6d6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	69db      	ldr	r3, [r3, #28]
 800f5a0:	1c5a      	adds	r2, r3, #1
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	699b      	ldr	r3, [r3, #24]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d10b      	bne.n	800f5c6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	095b      	lsrs	r3, r3, #5
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	8912      	ldrh	r2, [r2, #8]
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	f0c0 808d 	bcc.w	800f6d6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	61da      	str	r2, [r3, #28]
 800f5c2:	2304      	movs	r3, #4
 800f5c4:	e09a      	b.n	800f6fc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	899b      	ldrh	r3, [r3, #12]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	8952      	ldrh	r2, [r2, #10]
 800f5d6:	3a01      	subs	r2, #1
 800f5d8:	4013      	ands	r3, r2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d17b      	bne.n	800f6d6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	4610      	mov	r0, r2
 800f5e8:	f7ff fc11 	bl	800ee0e <get_fat>
 800f5ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d801      	bhi.n	800f5f8 <dir_next+0xa0>
 800f5f4:	2302      	movs	r3, #2
 800f5f6:	e081      	b.n	800f6fc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5fe:	d101      	bne.n	800f604 <dir_next+0xac>
 800f600:	2301      	movs	r3, #1
 800f602:	e07b      	b.n	800f6fc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d359      	bcc.n	800f6c2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d104      	bne.n	800f61e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	61da      	str	r2, [r3, #28]
 800f61a:	2304      	movs	r3, #4
 800f61c:	e06e      	b.n	800f6fc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	699b      	ldr	r3, [r3, #24]
 800f624:	4619      	mov	r1, r3
 800f626:	4610      	mov	r0, r2
 800f628:	f7ff fe3d 	bl	800f2a6 <create_chain>
 800f62c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <dir_next+0xe0>
 800f634:	2307      	movs	r3, #7
 800f636:	e061      	b.n	800f6fc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d101      	bne.n	800f642 <dir_next+0xea>
 800f63e:	2302      	movs	r3, #2
 800f640:	e05c      	b.n	800f6fc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f648:	d101      	bne.n	800f64e <dir_next+0xf6>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e056      	b.n	800f6fc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f7ff fadc 	bl	800ec0c <sync_window>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d001      	beq.n	800f65e <dir_next+0x106>
 800f65a:	2301      	movs	r3, #1
 800f65c:	e04e      	b.n	800f6fc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	899b      	ldrh	r3, [r3, #12]
 800f668:	461a      	mov	r2, r3
 800f66a:	2100      	movs	r1, #0
 800f66c:	f7ff f905 	bl	800e87a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f670:	2300      	movs	r3, #0
 800f672:	613b      	str	r3, [r7, #16]
 800f674:	6979      	ldr	r1, [r7, #20]
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f7ff fbaa 	bl	800edd0 <clust2sect>
 800f67c:	4602      	mov	r2, r0
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	635a      	str	r2, [r3, #52]	; 0x34
 800f682:	e012      	b.n	800f6aa <dir_next+0x152>
						fs->wflag = 1;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2201      	movs	r2, #1
 800f688:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f68a:	68f8      	ldr	r0, [r7, #12]
 800f68c:	f7ff fabe 	bl	800ec0c <sync_window>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <dir_next+0x142>
 800f696:	2301      	movs	r3, #1
 800f698:	e030      	b.n	800f6fc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	3301      	adds	r3, #1
 800f69e:	613b      	str	r3, [r7, #16]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6a4:	1c5a      	adds	r2, r3, #1
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	635a      	str	r2, [r3, #52]	; 0x34
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	895b      	ldrh	r3, [r3, #10]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d3e6      	bcc.n	800f684 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	1ad2      	subs	r2, r2, r3
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f6c8:	6979      	ldr	r1, [r7, #20]
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	f7ff fb80 	bl	800edd0 <clust2sect>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	899b      	ldrh	r3, [r3, #12]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6ee:	fb02 f200 	mul.w	r2, r2, r0
 800f6f2:	1a9b      	subs	r3, r3, r2
 800f6f4:	18ca      	adds	r2, r1, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f6fa:	2300      	movs	r3, #0
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3718      	adds	r7, #24
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f714:	2100      	movs	r1, #0
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff fe95 	bl	800f446 <dir_sdi>
 800f71c:	4603      	mov	r3, r0
 800f71e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f720:	7dfb      	ldrb	r3, [r7, #23]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d12b      	bne.n	800f77e <dir_alloc+0x7a>
		n = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	69db      	ldr	r3, [r3, #28]
 800f72e:	4619      	mov	r1, r3
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7ff faaf 	bl	800ec94 <move_window>
 800f736:	4603      	mov	r3, r0
 800f738:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f73a:	7dfb      	ldrb	r3, [r7, #23]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d11d      	bne.n	800f77c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a1b      	ldr	r3, [r3, #32]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	2be5      	cmp	r3, #229	; 0xe5
 800f748:	d004      	beq.n	800f754 <dir_alloc+0x50>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a1b      	ldr	r3, [r3, #32]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d107      	bne.n	800f764 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	3301      	adds	r3, #1
 800f758:	613b      	str	r3, [r7, #16]
 800f75a:	693a      	ldr	r2, [r7, #16]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d102      	bne.n	800f768 <dir_alloc+0x64>
 800f762:	e00c      	b.n	800f77e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f764:	2300      	movs	r3, #0
 800f766:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f768:	2101      	movs	r1, #1
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff fef4 	bl	800f558 <dir_next>
 800f770:	4603      	mov	r3, r0
 800f772:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f774:	7dfb      	ldrb	r3, [r7, #23]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0d7      	beq.n	800f72a <dir_alloc+0x26>
 800f77a:	e000      	b.n	800f77e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f77c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	2b04      	cmp	r3, #4
 800f782:	d101      	bne.n	800f788 <dir_alloc+0x84>
 800f784:	2307      	movs	r3, #7
 800f786:	75fb      	strb	r3, [r7, #23]
	return res;
 800f788:	7dfb      	ldrb	r3, [r7, #23]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f792:	b580      	push	{r7, lr}
 800f794:	b084      	sub	sp, #16
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
 800f79a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	331a      	adds	r3, #26
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fe ffc7 	bl	800e734 <ld_word>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	d109      	bne.n	800f7c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	3314      	adds	r3, #20
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fe ffbc 	bl	800e734 <ld_word>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	041b      	lsls	r3, r3, #16
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	331a      	adds	r3, #26
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	b292      	uxth	r2, r2
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fe ffdf 	bl	800e7aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b03      	cmp	r3, #3
 800f7f2:	d109      	bne.n	800f808 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f103 0214 	add.w	r2, r3, #20
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	0c1b      	lsrs	r3, r3, #16
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	4619      	mov	r1, r3
 800f802:	4610      	mov	r0, r2
 800f804:	f7fe ffd1 	bl	800e7aa <st_word>
	}
}
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f81a:	2304      	movs	r3, #4
 800f81c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f824:	e03c      	b.n	800f8a0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	69db      	ldr	r3, [r3, #28]
 800f82a:	4619      	mov	r1, r3
 800f82c:	6938      	ldr	r0, [r7, #16]
 800f82e:	f7ff fa31 	bl	800ec94 <move_window>
 800f832:	4603      	mov	r3, r0
 800f834:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d136      	bne.n	800f8aa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a1b      	ldr	r3, [r3, #32]
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f844:	7bfb      	ldrb	r3, [r7, #15]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d102      	bne.n	800f850 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f84a:	2304      	movs	r3, #4
 800f84c:	75fb      	strb	r3, [r7, #23]
 800f84e:	e031      	b.n	800f8b4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a1b      	ldr	r3, [r3, #32]
 800f854:	330b      	adds	r3, #11
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f85c:	73bb      	strb	r3, [r7, #14]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7bba      	ldrb	r2, [r7, #14]
 800f862:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f864:	7bfb      	ldrb	r3, [r7, #15]
 800f866:	2be5      	cmp	r3, #229	; 0xe5
 800f868:	d011      	beq.n	800f88e <dir_read+0x7e>
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
 800f86c:	2b2e      	cmp	r3, #46	; 0x2e
 800f86e:	d00e      	beq.n	800f88e <dir_read+0x7e>
 800f870:	7bbb      	ldrb	r3, [r7, #14]
 800f872:	2b0f      	cmp	r3, #15
 800f874:	d00b      	beq.n	800f88e <dir_read+0x7e>
 800f876:	7bbb      	ldrb	r3, [r7, #14]
 800f878:	f023 0320 	bic.w	r3, r3, #32
 800f87c:	2b08      	cmp	r3, #8
 800f87e:	bf0c      	ite	eq
 800f880:	2301      	moveq	r3, #1
 800f882:	2300      	movne	r3, #0
 800f884:	b2db      	uxtb	r3, r3
 800f886:	461a      	mov	r2, r3
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d00f      	beq.n	800f8ae <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f88e:	2100      	movs	r1, #0
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff fe61 	bl	800f558 <dir_next>
 800f896:	4603      	mov	r3, r0
 800f898:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d108      	bne.n	800f8b2 <dir_read+0xa2>
	while (dp->sect) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	69db      	ldr	r3, [r3, #28]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1be      	bne.n	800f826 <dir_read+0x16>
 800f8a8:	e004      	b.n	800f8b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f8aa:	bf00      	nop
 800f8ac:	e002      	b.n	800f8b4 <dir_read+0xa4>
				break;
 800f8ae:	bf00      	nop
 800f8b0:	e000      	b.n	800f8b4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f8b2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <dir_read+0xb0>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	61da      	str	r2, [r3, #28]
	return res;
 800f8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b086      	sub	sp, #24
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f8d8:	2100      	movs	r1, #0
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff fdb3 	bl	800f446 <dir_sdi>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <dir_find+0x24>
 800f8ea:	7dfb      	ldrb	r3, [r7, #23]
 800f8ec:	e03e      	b.n	800f96c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	69db      	ldr	r3, [r3, #28]
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6938      	ldr	r0, [r7, #16]
 800f8f6:	f7ff f9cd 	bl	800ec94 <move_window>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f8fe:	7dfb      	ldrb	r3, [r7, #23]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d12f      	bne.n	800f964 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a1b      	ldr	r3, [r3, #32]
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d102      	bne.n	800f918 <dir_find+0x4e>
 800f912:	2304      	movs	r3, #4
 800f914:	75fb      	strb	r3, [r7, #23]
 800f916:	e028      	b.n	800f96a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a1b      	ldr	r3, [r3, #32]
 800f91c:	330b      	adds	r3, #11
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f924:	b2da      	uxtb	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a1b      	ldr	r3, [r3, #32]
 800f92e:	330b      	adds	r3, #11
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	f003 0308 	and.w	r3, r3, #8
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10a      	bne.n	800f950 <dir_find+0x86>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a18      	ldr	r0, [r3, #32]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3324      	adds	r3, #36	; 0x24
 800f942:	220b      	movs	r2, #11
 800f944:	4619      	mov	r1, r3
 800f946:	f7fe ffb2 	bl	800e8ae <mem_cmp>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00b      	beq.n	800f968 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f950:	2100      	movs	r1, #0
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff fe00 	bl	800f558 <dir_next>
 800f958:	4603      	mov	r3, r0
 800f95a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f95c:	7dfb      	ldrb	r3, [r7, #23]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d0c5      	beq.n	800f8ee <dir_find+0x24>
 800f962:	e002      	b.n	800f96a <dir_find+0xa0>
		if (res != FR_OK) break;
 800f964:	bf00      	nop
 800f966:	e000      	b.n	800f96a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f968:	bf00      	nop

	return res;
 800f96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f982:	2101      	movs	r1, #1
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff febd 	bl	800f704 <dir_alloc>
 800f98a:	4603      	mov	r3, r0
 800f98c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f98e:	7bfb      	ldrb	r3, [r7, #15]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d11c      	bne.n	800f9ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	69db      	ldr	r3, [r3, #28]
 800f998:	4619      	mov	r1, r3
 800f99a:	68b8      	ldr	r0, [r7, #8]
 800f99c:	f7ff f97a 	bl	800ec94 <move_window>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d111      	bne.n	800f9ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	2220      	movs	r2, #32
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fe ff61 	bl	800e87a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6a18      	ldr	r0, [r3, #32]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3324      	adds	r3, #36	; 0x24
 800f9c0:	220b      	movs	r2, #11
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	f7fe ff38 	bl	800e838 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	69db      	ldr	r3, [r3, #28]
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	68f8      	ldr	r0, [r7, #12]
 800f9ee:	f7ff f951 	bl	800ec94 <move_window>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f9f6:	7afb      	ldrb	r3, [r7, #11]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d106      	bne.n	800fa0a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a1b      	ldr	r3, [r3, #32]
 800fa00:	22e5      	movs	r2, #229	; 0xe5
 800fa02:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2201      	movs	r2, #1
 800fa08:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800fa0a:	7afb      	ldrb	r3, [r7, #11]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b088      	sub	sp, #32
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	3324      	adds	r3, #36	; 0x24
 800fa28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fa2a:	220b      	movs	r2, #11
 800fa2c:	2120      	movs	r1, #32
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	f7fe ff23 	bl	800e87a <mem_set>
	si = i = 0; ni = 8;
 800fa34:	2300      	movs	r3, #0
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	2308      	movs	r3, #8
 800fa3e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	4413      	add	r3, r2
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	2b2e      	cmp	r3, #46	; 0x2e
 800fa4a:	d12f      	bne.n	800faac <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	617a      	str	r2, [r7, #20]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	4413      	add	r3, r2
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800fa5a:	7ffb      	ldrb	r3, [r7, #31]
 800fa5c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa5e:	d10a      	bne.n	800fa76 <create_name+0x62>
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2b02      	cmp	r3, #2
 800fa64:	d807      	bhi.n	800fa76 <create_name+0x62>
			sfn[i++] = c;
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	1c5a      	adds	r2, r3, #1
 800fa6a:	613a      	str	r2, [r7, #16]
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	4413      	add	r3, r2
 800fa70:	7ffa      	ldrb	r2, [r7, #31]
 800fa72:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800fa74:	e7ea      	b.n	800fa4c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800fa76:	7ffb      	ldrb	r3, [r7, #31]
 800fa78:	2b2f      	cmp	r3, #47	; 0x2f
 800fa7a:	d007      	beq.n	800fa8c <create_name+0x78>
 800fa7c:	7ffb      	ldrb	r3, [r7, #31]
 800fa7e:	2b5c      	cmp	r3, #92	; 0x5c
 800fa80:	d004      	beq.n	800fa8c <create_name+0x78>
 800fa82:	7ffb      	ldrb	r3, [r7, #31]
 800fa84:	2b20      	cmp	r3, #32
 800fa86:	d901      	bls.n	800fa8c <create_name+0x78>
 800fa88:	2306      	movs	r3, #6
 800fa8a:	e084      	b.n	800fb96 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	441a      	add	r2, r3
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800fa96:	7ffb      	ldrb	r3, [r7, #31]
 800fa98:	2b20      	cmp	r3, #32
 800fa9a:	d801      	bhi.n	800faa0 <create_name+0x8c>
 800fa9c:	2224      	movs	r2, #36	; 0x24
 800fa9e:	e000      	b.n	800faa2 <create_name+0x8e>
 800faa0:	2220      	movs	r2, #32
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	330b      	adds	r3, #11
 800faa6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	e074      	b.n	800fb96 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	617a      	str	r2, [r7, #20]
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	4413      	add	r3, r2
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800faba:	7ffb      	ldrb	r3, [r7, #31]
 800fabc:	2b20      	cmp	r3, #32
 800fabe:	d94e      	bls.n	800fb5e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fac0:	7ffb      	ldrb	r3, [r7, #31]
 800fac2:	2b2f      	cmp	r3, #47	; 0x2f
 800fac4:	d006      	beq.n	800fad4 <create_name+0xc0>
 800fac6:	7ffb      	ldrb	r3, [r7, #31]
 800fac8:	2b5c      	cmp	r3, #92	; 0x5c
 800faca:	d110      	bne.n	800faee <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800facc:	e002      	b.n	800fad4 <create_name+0xc0>
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	3301      	adds	r3, #1
 800fad2:	617b      	str	r3, [r7, #20]
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	4413      	add	r3, r2
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b2f      	cmp	r3, #47	; 0x2f
 800fade:	d0f6      	beq.n	800face <create_name+0xba>
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	4413      	add	r3, r2
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2b5c      	cmp	r3, #92	; 0x5c
 800faea:	d0f0      	beq.n	800face <create_name+0xba>
			break;
 800faec:	e038      	b.n	800fb60 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800faee:	7ffb      	ldrb	r3, [r7, #31]
 800faf0:	2b2e      	cmp	r3, #46	; 0x2e
 800faf2:	d003      	beq.n	800fafc <create_name+0xe8>
 800faf4:	693a      	ldr	r2, [r7, #16]
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d30c      	bcc.n	800fb16 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	2b0b      	cmp	r3, #11
 800fb00:	d002      	beq.n	800fb08 <create_name+0xf4>
 800fb02:	7ffb      	ldrb	r3, [r7, #31]
 800fb04:	2b2e      	cmp	r3, #46	; 0x2e
 800fb06:	d001      	beq.n	800fb0c <create_name+0xf8>
 800fb08:	2306      	movs	r3, #6
 800fb0a:	e044      	b.n	800fb96 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800fb0c:	2308      	movs	r3, #8
 800fb0e:	613b      	str	r3, [r7, #16]
 800fb10:	230b      	movs	r3, #11
 800fb12:	61bb      	str	r3, [r7, #24]
			continue;
 800fb14:	e022      	b.n	800fb5c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fb16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	da04      	bge.n	800fb28 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fb1e:	7ffb      	ldrb	r3, [r7, #31]
 800fb20:	3b80      	subs	r3, #128	; 0x80
 800fb22:	4a1f      	ldr	r2, [pc, #124]	; (800fba0 <create_name+0x18c>)
 800fb24:	5cd3      	ldrb	r3, [r2, r3]
 800fb26:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fb28:	7ffb      	ldrb	r3, [r7, #31]
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	481d      	ldr	r0, [pc, #116]	; (800fba4 <create_name+0x190>)
 800fb2e:	f7fe fee5 	bl	800e8fc <chk_chr>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d001      	beq.n	800fb3c <create_name+0x128>
 800fb38:	2306      	movs	r3, #6
 800fb3a:	e02c      	b.n	800fb96 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fb3c:	7ffb      	ldrb	r3, [r7, #31]
 800fb3e:	2b60      	cmp	r3, #96	; 0x60
 800fb40:	d905      	bls.n	800fb4e <create_name+0x13a>
 800fb42:	7ffb      	ldrb	r3, [r7, #31]
 800fb44:	2b7a      	cmp	r3, #122	; 0x7a
 800fb46:	d802      	bhi.n	800fb4e <create_name+0x13a>
 800fb48:	7ffb      	ldrb	r3, [r7, #31]
 800fb4a:	3b20      	subs	r3, #32
 800fb4c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	1c5a      	adds	r2, r3, #1
 800fb52:	613a      	str	r2, [r7, #16]
 800fb54:	68ba      	ldr	r2, [r7, #8]
 800fb56:	4413      	add	r3, r2
 800fb58:	7ffa      	ldrb	r2, [r7, #31]
 800fb5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fb5c:	e7a6      	b.n	800faac <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fb5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	441a      	add	r2, r3
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <create_name+0x160>
 800fb70:	2306      	movs	r3, #6
 800fb72:	e010      	b.n	800fb96 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2be5      	cmp	r3, #229	; 0xe5
 800fb7a:	d102      	bne.n	800fb82 <create_name+0x16e>
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2205      	movs	r2, #5
 800fb80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fb82:	7ffb      	ldrb	r3, [r7, #31]
 800fb84:	2b20      	cmp	r3, #32
 800fb86:	d801      	bhi.n	800fb8c <create_name+0x178>
 800fb88:	2204      	movs	r2, #4
 800fb8a:	e000      	b.n	800fb8e <create_name+0x17a>
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	330b      	adds	r3, #11
 800fb92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fb94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3720      	adds	r7, #32
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	08017c38 	.word	0x08017c38
 800fba4:	08017be8 	.word	0x08017be8

0800fba8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2b2f      	cmp	r3, #47	; 0x2f
 800fbc2:	d00b      	beq.n	800fbdc <follow_path+0x34>
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b5c      	cmp	r3, #92	; 0x5c
 800fbca:	d007      	beq.n	800fbdc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	699a      	ldr	r2, [r3, #24]
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	609a      	str	r2, [r3, #8]
 800fbd4:	e00d      	b.n	800fbf2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	603b      	str	r3, [r7, #0]
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b2f      	cmp	r3, #47	; 0x2f
 800fbe2:	d0f8      	beq.n	800fbd6 <follow_path+0x2e>
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	2b5c      	cmp	r3, #92	; 0x5c
 800fbea:	d0f4      	beq.n	800fbd6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	2b1f      	cmp	r3, #31
 800fbf8:	d80a      	bhi.n	800fc10 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2280      	movs	r2, #128	; 0x80
 800fbfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc02:	2100      	movs	r1, #0
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7ff fc1e 	bl	800f446 <dir_sdi>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	75fb      	strb	r3, [r7, #23]
 800fc0e:	e05b      	b.n	800fcc8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc10:	463b      	mov	r3, r7
 800fc12:	4619      	mov	r1, r3
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f7ff fefd 	bl	800fa14 <create_name>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d14c      	bne.n	800fcbe <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff fe50 	bl	800f8ca <dir_find>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d01b      	beq.n	800fc74 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	2b04      	cmp	r3, #4
 800fc40:	d13f      	bne.n	800fcc2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fc42:	7afb      	ldrb	r3, [r7, #11]
 800fc44:	f003 0320 	and.w	r3, r3, #32
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00b      	beq.n	800fc64 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fc4c:	7afb      	ldrb	r3, [r7, #11]
 800fc4e:	f003 0304 	and.w	r3, r3, #4
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d031      	beq.n	800fcba <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2280      	movs	r2, #128	; 0x80
 800fc5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fc62:	e02e      	b.n	800fcc2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fc64:	7afb      	ldrb	r3, [r7, #11]
 800fc66:	f003 0304 	and.w	r3, r3, #4
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d129      	bne.n	800fcc2 <follow_path+0x11a>
 800fc6e:	2305      	movs	r3, #5
 800fc70:	75fb      	strb	r3, [r7, #23]
				break;
 800fc72:	e026      	b.n	800fcc2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fc74:	7afb      	ldrb	r3, [r7, #11]
 800fc76:	f003 0304 	and.w	r3, r3, #4
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d123      	bne.n	800fcc6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	799b      	ldrb	r3, [r3, #6]
 800fc82:	f003 0310 	and.w	r3, r3, #16
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d102      	bne.n	800fc90 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fc8a:	2305      	movs	r3, #5
 800fc8c:	75fb      	strb	r3, [r7, #23]
 800fc8e:	e01b      	b.n	800fcc8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	695b      	ldr	r3, [r3, #20]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	8992      	ldrh	r2, [r2, #12]
 800fc9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fca2:	fb02 f200 	mul.w	r2, r2, r0
 800fca6:	1a9b      	subs	r3, r3, r2
 800fca8:	440b      	add	r3, r1
 800fcaa:	4619      	mov	r1, r3
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	f7ff fd70 	bl	800f792 <ld_clust>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	609a      	str	r2, [r3, #8]
 800fcb8:	e7aa      	b.n	800fc10 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fcba:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fcbc:	e7a8      	b.n	800fc10 <follow_path+0x68>
			if (res != FR_OK) break;
 800fcbe:	bf00      	nop
 800fcc0:	e002      	b.n	800fcc8 <follow_path+0x120>
				break;
 800fcc2:	bf00      	nop
 800fcc4:	e000      	b.n	800fcc8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcc6:	bf00      	nop
			}
		}
	}

	return res;
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b087      	sub	sp, #28
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fcda:	f04f 33ff 	mov.w	r3, #4294967295
 800fcde:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d031      	beq.n	800fd4c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	617b      	str	r3, [r7, #20]
 800fcee:	e002      	b.n	800fcf6 <get_ldnumber+0x24>
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	617b      	str	r3, [r7, #20]
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	2b20      	cmp	r3, #32
 800fcfc:	d903      	bls.n	800fd06 <get_ldnumber+0x34>
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	2b3a      	cmp	r3, #58	; 0x3a
 800fd04:	d1f4      	bne.n	800fcf0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	2b3a      	cmp	r3, #58	; 0x3a
 800fd0c:	d11c      	bne.n	800fd48 <get_ldnumber+0x76>
			tp = *path;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	60fa      	str	r2, [r7, #12]
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	3b30      	subs	r3, #48	; 0x30
 800fd1e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	2b09      	cmp	r3, #9
 800fd24:	d80e      	bhi.n	800fd44 <get_ldnumber+0x72>
 800fd26:	68fa      	ldr	r2, [r7, #12]
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d10a      	bne.n	800fd44 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d107      	bne.n	800fd44 <get_ldnumber+0x72>
					vol = (int)i;
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	617b      	str	r3, [r7, #20]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	697a      	ldr	r2, [r7, #20]
 800fd42:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	e002      	b.n	800fd4e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fd48:	2300      	movs	r3, #0
 800fd4a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fd4c:	693b      	ldr	r3, [r7, #16]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	371c      	adds	r7, #28
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
	...

0800fd5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	70da      	strb	r2, [r3, #3]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd72:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7fe ff8c 	bl	800ec94 <move_window>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d001      	beq.n	800fd86 <check_fs+0x2a>
 800fd82:	2304      	movs	r3, #4
 800fd84:	e038      	b.n	800fdf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	3338      	adds	r3, #56	; 0x38
 800fd8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe fcd0 	bl	800e734 <ld_word>
 800fd94:	4603      	mov	r3, r0
 800fd96:	461a      	mov	r2, r3
 800fd98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d001      	beq.n	800fda4 <check_fs+0x48>
 800fda0:	2303      	movs	r3, #3
 800fda2:	e029      	b.n	800fdf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fdaa:	2be9      	cmp	r3, #233	; 0xe9
 800fdac:	d009      	beq.n	800fdc2 <check_fs+0x66>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fdb4:	2beb      	cmp	r3, #235	; 0xeb
 800fdb6:	d11e      	bne.n	800fdf6 <check_fs+0x9a>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fdbe:	2b90      	cmp	r3, #144	; 0x90
 800fdc0:	d119      	bne.n	800fdf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	3338      	adds	r3, #56	; 0x38
 800fdc6:	3336      	adds	r3, #54	; 0x36
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fe fccb 	bl	800e764 <ld_dword>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fdd4:	4a0a      	ldr	r2, [pc, #40]	; (800fe00 <check_fs+0xa4>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d101      	bne.n	800fdde <check_fs+0x82>
 800fdda:	2300      	movs	r3, #0
 800fddc:	e00c      	b.n	800fdf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	3338      	adds	r3, #56	; 0x38
 800fde2:	3352      	adds	r3, #82	; 0x52
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fe fcbd 	bl	800e764 <ld_dword>
 800fdea:	4602      	mov	r2, r0
 800fdec:	4b05      	ldr	r3, [pc, #20]	; (800fe04 <check_fs+0xa8>)
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d101      	bne.n	800fdf6 <check_fs+0x9a>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e000      	b.n	800fdf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fdf6:	2302      	movs	r3, #2
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	00544146 	.word	0x00544146
 800fe04:	33544146 	.word	0x33544146

0800fe08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b096      	sub	sp, #88	; 0x58
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	4613      	mov	r3, r2
 800fe14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff ff58 	bl	800fcd2 <get_ldnumber>
 800fe22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	da01      	bge.n	800fe2e <find_volume+0x26>
 800fe2a:	230b      	movs	r3, #11
 800fe2c:	e268      	b.n	8010300 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe2e:	4ab0      	ldr	r2, [pc, #704]	; (80100f0 <find_volume+0x2e8>)
 800fe30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d101      	bne.n	800fe42 <find_volume+0x3a>
 800fe3e:	230c      	movs	r3, #12
 800fe40:	e25e      	b.n	8010300 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	f023 0301 	bic.w	r3, r3, #1
 800fe4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d01a      	beq.n	800fe8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fe58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5a:	785b      	ldrb	r3, [r3, #1]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7fe fbcb 	bl	800e5f8 <disk_status>
 800fe62:	4603      	mov	r3, r0
 800fe64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fe68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d10c      	bne.n	800fe8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fe74:	79fb      	ldrb	r3, [r7, #7]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d007      	beq.n	800fe8a <find_volume+0x82>
 800fe7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe7e:	f003 0304 	and.w	r3, r3, #4
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fe86:	230a      	movs	r3, #10
 800fe88:	e23a      	b.n	8010300 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e238      	b.n	8010300 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	2200      	movs	r2, #0
 800fe92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fe94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9e:	785b      	ldrb	r3, [r3, #1]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe fbc3 	bl	800e62c <disk_initialize>
 800fea6:	4603      	mov	r3, r0
 800fea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800feac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feb0:	f003 0301 	and.w	r3, r3, #1
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800feb8:	2303      	movs	r3, #3
 800feba:	e221      	b.n	8010300 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800febc:	79fb      	ldrb	r3, [r7, #7]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d007      	beq.n	800fed2 <find_volume+0xca>
 800fec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fec6:	f003 0304 	and.w	r3, r3, #4
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fece:	230a      	movs	r3, #10
 800fed0:	e216      	b.n	8010300 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	7858      	ldrb	r0, [r3, #1]
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	330c      	adds	r3, #12
 800feda:	461a      	mov	r2, r3
 800fedc:	2102      	movs	r1, #2
 800fede:	f7fe fc0b 	bl	800e6f8 <disk_ioctl>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d001      	beq.n	800feec <find_volume+0xe4>
 800fee8:	2301      	movs	r3, #1
 800feea:	e209      	b.n	8010300 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	899b      	ldrh	r3, [r3, #12]
 800fef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fef4:	d80d      	bhi.n	800ff12 <find_volume+0x10a>
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	899b      	ldrh	r3, [r3, #12]
 800fefa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fefe:	d308      	bcc.n	800ff12 <find_volume+0x10a>
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	899b      	ldrh	r3, [r3, #12]
 800ff04:	461a      	mov	r2, r3
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	899b      	ldrh	r3, [r3, #12]
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d001      	beq.n	800ff16 <find_volume+0x10e>
 800ff12:	2301      	movs	r3, #1
 800ff14:	e1f4      	b.n	8010300 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff1e:	f7ff ff1d 	bl	800fd5c <check_fs>
 800ff22:	4603      	mov	r3, r0
 800ff24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	d14b      	bne.n	800ffc8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff30:	2300      	movs	r3, #0
 800ff32:	643b      	str	r3, [r7, #64]	; 0x40
 800ff34:	e01f      	b.n	800ff76 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff38:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ff3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff3e:	011b      	lsls	r3, r3, #4
 800ff40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ff44:	4413      	add	r3, r2
 800ff46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ff48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d006      	beq.n	800ff60 <find_volume+0x158>
 800ff52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff54:	3308      	adds	r3, #8
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe fc04 	bl	800e764 <ld_dword>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	e000      	b.n	800ff62 <find_volume+0x15a>
 800ff60:	2200      	movs	r2, #0
 800ff62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ff6a:	440b      	add	r3, r1
 800ff6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff72:	3301      	adds	r3, #1
 800ff74:	643b      	str	r3, [r7, #64]	; 0x40
 800ff76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d9dc      	bls.n	800ff36 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ff80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d002      	beq.n	800ff8c <find_volume+0x184>
 800ff86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ff8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ff94:	4413      	add	r3, r2
 800ff96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ff9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ff9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d005      	beq.n	800ffae <find_volume+0x1a6>
 800ffa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffa6:	f7ff fed9 	bl	800fd5c <check_fs>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	e000      	b.n	800ffb0 <find_volume+0x1a8>
 800ffae:	2303      	movs	r3, #3
 800ffb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ffb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d905      	bls.n	800ffc8 <find_volume+0x1c0>
 800ffbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	643b      	str	r3, [r7, #64]	; 0x40
 800ffc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	d9e1      	bls.n	800ff8c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffcc:	2b04      	cmp	r3, #4
 800ffce:	d101      	bne.n	800ffd4 <find_volume+0x1cc>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e195      	b.n	8010300 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ffd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d901      	bls.n	800ffe0 <find_volume+0x1d8>
 800ffdc:	230d      	movs	r3, #13
 800ffde:	e18f      	b.n	8010300 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe2:	3338      	adds	r3, #56	; 0x38
 800ffe4:	330b      	adds	r3, #11
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fe fba4 	bl	800e734 <ld_word>
 800ffec:	4603      	mov	r3, r0
 800ffee:	461a      	mov	r2, r3
 800fff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff2:	899b      	ldrh	r3, [r3, #12]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d001      	beq.n	800fffc <find_volume+0x1f4>
 800fff8:	230d      	movs	r3, #13
 800fffa:	e181      	b.n	8010300 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffe:	3338      	adds	r3, #56	; 0x38
 8010000:	3316      	adds	r3, #22
 8010002:	4618      	mov	r0, r3
 8010004:	f7fe fb96 	bl	800e734 <ld_word>
 8010008:	4603      	mov	r3, r0
 801000a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801000c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801000e:	2b00      	cmp	r3, #0
 8010010:	d106      	bne.n	8010020 <find_volume+0x218>
 8010012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010014:	3338      	adds	r3, #56	; 0x38
 8010016:	3324      	adds	r3, #36	; 0x24
 8010018:	4618      	mov	r0, r3
 801001a:	f7fe fba3 	bl	800e764 <ld_dword>
 801001e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010024:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010032:	789b      	ldrb	r3, [r3, #2]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d005      	beq.n	8010044 <find_volume+0x23c>
 8010038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003a:	789b      	ldrb	r3, [r3, #2]
 801003c:	2b02      	cmp	r3, #2
 801003e:	d001      	beq.n	8010044 <find_volume+0x23c>
 8010040:	230d      	movs	r3, #13
 8010042:	e15d      	b.n	8010300 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010046:	789b      	ldrb	r3, [r3, #2]
 8010048:	461a      	mov	r2, r3
 801004a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801004c:	fb02 f303 	mul.w	r3, r2, r3
 8010050:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010058:	b29a      	uxth	r2, r3
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801005e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010060:	895b      	ldrh	r3, [r3, #10]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d008      	beq.n	8010078 <find_volume+0x270>
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	895b      	ldrh	r3, [r3, #10]
 801006a:	461a      	mov	r2, r3
 801006c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006e:	895b      	ldrh	r3, [r3, #10]
 8010070:	3b01      	subs	r3, #1
 8010072:	4013      	ands	r3, r2
 8010074:	2b00      	cmp	r3, #0
 8010076:	d001      	beq.n	801007c <find_volume+0x274>
 8010078:	230d      	movs	r3, #13
 801007a:	e141      	b.n	8010300 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007e:	3338      	adds	r3, #56	; 0x38
 8010080:	3311      	adds	r3, #17
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fb56 	bl	800e734 <ld_word>
 8010088:	4603      	mov	r3, r0
 801008a:	461a      	mov	r2, r3
 801008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	891b      	ldrh	r3, [r3, #8]
 8010094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010096:	8992      	ldrh	r2, [r2, #12]
 8010098:	0952      	lsrs	r2, r2, #5
 801009a:	b292      	uxth	r2, r2
 801009c:	fbb3 f1f2 	udiv	r1, r3, r2
 80100a0:	fb02 f201 	mul.w	r2, r2, r1
 80100a4:	1a9b      	subs	r3, r3, r2
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <find_volume+0x2a8>
 80100ac:	230d      	movs	r3, #13
 80100ae:	e127      	b.n	8010300 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	3338      	adds	r3, #56	; 0x38
 80100b4:	3313      	adds	r3, #19
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fe fb3c 	bl	800e734 <ld_word>
 80100bc:	4603      	mov	r3, r0
 80100be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80100c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <find_volume+0x2cc>
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	3338      	adds	r3, #56	; 0x38
 80100ca:	3320      	adds	r3, #32
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7fe fb49 	bl	800e764 <ld_dword>
 80100d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80100d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d6:	3338      	adds	r3, #56	; 0x38
 80100d8:	330e      	adds	r3, #14
 80100da:	4618      	mov	r0, r3
 80100dc:	f7fe fb2a 	bl	800e734 <ld_word>
 80100e0:	4603      	mov	r3, r0
 80100e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80100e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d104      	bne.n	80100f4 <find_volume+0x2ec>
 80100ea:	230d      	movs	r3, #13
 80100ec:	e108      	b.n	8010300 <find_volume+0x4f8>
 80100ee:	bf00      	nop
 80100f0:	2002b124 	.word	0x2002b124

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80100f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f8:	4413      	add	r3, r2
 80100fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100fc:	8911      	ldrh	r1, [r2, #8]
 80100fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010100:	8992      	ldrh	r2, [r2, #12]
 8010102:	0952      	lsrs	r2, r2, #5
 8010104:	b292      	uxth	r2, r2
 8010106:	fbb1 f2f2 	udiv	r2, r1, r2
 801010a:	b292      	uxth	r2, r2
 801010c:	4413      	add	r3, r2
 801010e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010114:	429a      	cmp	r2, r3
 8010116:	d201      	bcs.n	801011c <find_volume+0x314>
 8010118:	230d      	movs	r3, #13
 801011a:	e0f1      	b.n	8010300 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801011c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801011e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010124:	8952      	ldrh	r2, [r2, #10]
 8010126:	fbb3 f3f2 	udiv	r3, r3, r2
 801012a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	2b00      	cmp	r3, #0
 8010130:	d101      	bne.n	8010136 <find_volume+0x32e>
 8010132:	230d      	movs	r3, #13
 8010134:	e0e4      	b.n	8010300 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010136:	2303      	movs	r3, #3
 8010138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010142:	4293      	cmp	r3, r2
 8010144:	d802      	bhi.n	801014c <find_volume+0x344>
 8010146:	2302      	movs	r3, #2
 8010148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010152:	4293      	cmp	r3, r2
 8010154:	d802      	bhi.n	801015c <find_volume+0x354>
 8010156:	2301      	movs	r3, #1
 8010158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	1c9a      	adds	r2, r3, #2
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010168:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801016a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801016c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801016e:	441a      	add	r2, r3
 8010170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010172:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010174:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010178:	441a      	add	r2, r3
 801017a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801017e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010182:	2b03      	cmp	r3, #3
 8010184:	d11e      	bne.n	80101c4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	3338      	adds	r3, #56	; 0x38
 801018a:	332a      	adds	r3, #42	; 0x2a
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fad1 	bl	800e734 <ld_word>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d001      	beq.n	801019c <find_volume+0x394>
 8010198:	230d      	movs	r3, #13
 801019a:	e0b1      	b.n	8010300 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	891b      	ldrh	r3, [r3, #8]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d001      	beq.n	80101a8 <find_volume+0x3a0>
 80101a4:	230d      	movs	r3, #13
 80101a6:	e0ab      	b.n	8010300 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80101a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101aa:	3338      	adds	r3, #56	; 0x38
 80101ac:	332c      	adds	r3, #44	; 0x2c
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fad8 	bl	800e764 <ld_dword>
 80101b4:	4602      	mov	r2, r0
 80101b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80101ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	647b      	str	r3, [r7, #68]	; 0x44
 80101c2:	e01f      	b.n	8010204 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80101c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c6:	891b      	ldrh	r3, [r3, #8]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <find_volume+0x3c8>
 80101cc:	230d      	movs	r3, #13
 80101ce:	e097      	b.n	8010300 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80101d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80101d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d6:	441a      	add	r2, r3
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80101dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101e0:	2b02      	cmp	r3, #2
 80101e2:	d103      	bne.n	80101ec <find_volume+0x3e4>
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	69db      	ldr	r3, [r3, #28]
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	e00a      	b.n	8010202 <find_volume+0x3fa>
 80101ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ee:	69da      	ldr	r2, [r3, #28]
 80101f0:	4613      	mov	r3, r2
 80101f2:	005b      	lsls	r3, r3, #1
 80101f4:	4413      	add	r3, r2
 80101f6:	085a      	lsrs	r2, r3, #1
 80101f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fa:	69db      	ldr	r3, [r3, #28]
 80101fc:	f003 0301 	and.w	r3, r3, #1
 8010200:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010202:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010206:	6a1a      	ldr	r2, [r3, #32]
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	899b      	ldrh	r3, [r3, #12]
 801020c:	4619      	mov	r1, r3
 801020e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010210:	440b      	add	r3, r1
 8010212:	3b01      	subs	r3, #1
 8010214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010216:	8989      	ldrh	r1, [r1, #12]
 8010218:	fbb3 f3f1 	udiv	r3, r3, r1
 801021c:	429a      	cmp	r2, r3
 801021e:	d201      	bcs.n	8010224 <find_volume+0x41c>
 8010220:	230d      	movs	r3, #13
 8010222:	e06d      	b.n	8010300 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	f04f 32ff 	mov.w	r2, #4294967295
 801022a:	615a      	str	r2, [r3, #20]
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	695a      	ldr	r2, [r3, #20]
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	2280      	movs	r2, #128	; 0x80
 8010238:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801023a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801023e:	2b03      	cmp	r3, #3
 8010240:	d149      	bne.n	80102d6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010244:	3338      	adds	r3, #56	; 0x38
 8010246:	3330      	adds	r3, #48	; 0x30
 8010248:	4618      	mov	r0, r3
 801024a:	f7fe fa73 	bl	800e734 <ld_word>
 801024e:	4603      	mov	r3, r0
 8010250:	2b01      	cmp	r3, #1
 8010252:	d140      	bne.n	80102d6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010256:	3301      	adds	r3, #1
 8010258:	4619      	mov	r1, r3
 801025a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801025c:	f7fe fd1a 	bl	800ec94 <move_window>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d137      	bne.n	80102d6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	2200      	movs	r2, #0
 801026a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026e:	3338      	adds	r3, #56	; 0x38
 8010270:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010274:	4618      	mov	r0, r3
 8010276:	f7fe fa5d 	bl	800e734 <ld_word>
 801027a:	4603      	mov	r3, r0
 801027c:	461a      	mov	r2, r3
 801027e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010282:	429a      	cmp	r2, r3
 8010284:	d127      	bne.n	80102d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010288:	3338      	adds	r3, #56	; 0x38
 801028a:	4618      	mov	r0, r3
 801028c:	f7fe fa6a 	bl	800e764 <ld_dword>
 8010290:	4602      	mov	r2, r0
 8010292:	4b1d      	ldr	r3, [pc, #116]	; (8010308 <find_volume+0x500>)
 8010294:	429a      	cmp	r2, r3
 8010296:	d11e      	bne.n	80102d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	3338      	adds	r3, #56	; 0x38
 801029c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fe fa5f 	bl	800e764 <ld_dword>
 80102a6:	4602      	mov	r2, r0
 80102a8:	4b18      	ldr	r3, [pc, #96]	; (801030c <find_volume+0x504>)
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d113      	bne.n	80102d6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80102ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b0:	3338      	adds	r3, #56	; 0x38
 80102b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fe fa54 	bl	800e764 <ld_dword>
 80102bc:	4602      	mov	r2, r0
 80102be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	3338      	adds	r3, #56	; 0x38
 80102c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fe fa4a 	bl	800e764 <ld_dword>
 80102d0:	4602      	mov	r2, r0
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80102d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80102dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80102de:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <find_volume+0x508>)
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	3301      	adds	r3, #1
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	4b0a      	ldr	r3, [pc, #40]	; (8010310 <find_volume+0x508>)
 80102e8:	801a      	strh	r2, [r3, #0]
 80102ea:	4b09      	ldr	r3, [pc, #36]	; (8010310 <find_volume+0x508>)
 80102ec:	881a      	ldrh	r2, [r3, #0]
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80102f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f4:	2200      	movs	r2, #0
 80102f6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80102f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102fa:	f7fe fc63 	bl	800ebc4 <clear_lock>
#endif
	return FR_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	3758      	adds	r7, #88	; 0x58
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	41615252 	.word	0x41615252
 801030c:	61417272 	.word	0x61417272
 8010310:	2002b128 	.word	0x2002b128

08010314 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801031e:	2309      	movs	r3, #9
 8010320:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d01c      	beq.n	8010362 <validate+0x4e>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d018      	beq.n	8010362 <validate+0x4e>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d013      	beq.n	8010362 <validate+0x4e>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	889a      	ldrh	r2, [r3, #4]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	88db      	ldrh	r3, [r3, #6]
 8010344:	429a      	cmp	r2, r3
 8010346:	d10c      	bne.n	8010362 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	785b      	ldrb	r3, [r3, #1]
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe f952 	bl	800e5f8 <disk_status>
 8010354:	4603      	mov	r3, r0
 8010356:	f003 0301 	and.w	r3, r3, #1
 801035a:	2b00      	cmp	r3, #0
 801035c:	d101      	bne.n	8010362 <validate+0x4e>
			res = FR_OK;
 801035e:	2300      	movs	r3, #0
 8010360:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010362:	7bfb      	ldrb	r3, [r7, #15]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d102      	bne.n	801036e <validate+0x5a>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	e000      	b.n	8010370 <validate+0x5c>
 801036e:	2300      	movs	r3, #0
 8010370:	683a      	ldr	r2, [r7, #0]
 8010372:	6013      	str	r3, [r2, #0]
	return res;
 8010374:	7bfb      	ldrb	r3, [r7, #15]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
	...

08010380 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b088      	sub	sp, #32
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	4613      	mov	r3, r2
 801038c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010392:	f107 0310 	add.w	r3, r7, #16
 8010396:	4618      	mov	r0, r3
 8010398:	f7ff fc9b 	bl	800fcd2 <get_ldnumber>
 801039c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	da01      	bge.n	80103a8 <f_mount+0x28>
 80103a4:	230b      	movs	r3, #11
 80103a6:	e02b      	b.n	8010400 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80103a8:	4a17      	ldr	r2, [pc, #92]	; (8010408 <f_mount+0x88>)
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d005      	beq.n	80103c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80103b8:	69b8      	ldr	r0, [r7, #24]
 80103ba:	f7fe fc03 	bl	800ebc4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	2200      	movs	r2, #0
 80103c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2200      	movs	r2, #0
 80103ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	490d      	ldr	r1, [pc, #52]	; (8010408 <f_mount+0x88>)
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <f_mount+0x66>
 80103e0:	79fb      	ldrb	r3, [r7, #7]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d001      	beq.n	80103ea <f_mount+0x6a>
 80103e6:	2300      	movs	r3, #0
 80103e8:	e00a      	b.n	8010400 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80103ea:	f107 010c 	add.w	r1, r7, #12
 80103ee:	f107 0308 	add.w	r3, r7, #8
 80103f2:	2200      	movs	r2, #0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7ff fd07 	bl	800fe08 <find_volume>
 80103fa:	4603      	mov	r3, r0
 80103fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80103fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3720      	adds	r7, #32
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	2002b124 	.word	0x2002b124

0801040c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b098      	sub	sp, #96	; 0x60
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	4613      	mov	r3, r2
 8010418:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <f_open+0x18>
 8010420:	2309      	movs	r3, #9
 8010422:	e1ba      	b.n	801079a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010424:	79fb      	ldrb	r3, [r7, #7]
 8010426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801042a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801042c:	79fa      	ldrb	r2, [r7, #7]
 801042e:	f107 0110 	add.w	r1, r7, #16
 8010432:	f107 0308 	add.w	r3, r7, #8
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff fce6 	bl	800fe08 <find_volume>
 801043c:	4603      	mov	r3, r0
 801043e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010446:	2b00      	cmp	r3, #0
 8010448:	f040 819e 	bne.w	8010788 <f_open+0x37c>
		dj.obj.fs = fs;
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010450:	68ba      	ldr	r2, [r7, #8]
 8010452:	f107 0314 	add.w	r3, r7, #20
 8010456:	4611      	mov	r1, r2
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff fba5 	bl	800fba8 <follow_path>
 801045e:	4603      	mov	r3, r0
 8010460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010468:	2b00      	cmp	r3, #0
 801046a:	d11a      	bne.n	80104a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801046c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010470:	b25b      	sxtb	r3, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	da03      	bge.n	801047e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010476:	2306      	movs	r3, #6
 8010478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801047c:	e011      	b.n	80104a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801047e:	79fb      	ldrb	r3, [r7, #7]
 8010480:	f023 0301 	bic.w	r3, r3, #1
 8010484:	2b00      	cmp	r3, #0
 8010486:	bf14      	ite	ne
 8010488:	2301      	movne	r3, #1
 801048a:	2300      	moveq	r3, #0
 801048c:	b2db      	uxtb	r3, r3
 801048e:	461a      	mov	r2, r3
 8010490:	f107 0314 	add.w	r3, r7, #20
 8010494:	4611      	mov	r1, r2
 8010496:	4618      	mov	r0, r3
 8010498:	f7fe fa4c 	bl	800e934 <chk_lock>
 801049c:	4603      	mov	r3, r0
 801049e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80104a2:	79fb      	ldrb	r3, [r7, #7]
 80104a4:	f003 031c 	and.w	r3, r3, #28
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d07e      	beq.n	80105aa <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80104ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d017      	beq.n	80104e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80104b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104b8:	2b04      	cmp	r3, #4
 80104ba:	d10e      	bne.n	80104da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80104bc:	f7fe fa96 	bl	800e9ec <enq_lock>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d006      	beq.n	80104d4 <f_open+0xc8>
 80104c6:	f107 0314 	add.w	r3, r7, #20
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7ff fa52 	bl	800f974 <dir_register>
 80104d0:	4603      	mov	r3, r0
 80104d2:	e000      	b.n	80104d6 <f_open+0xca>
 80104d4:	2312      	movs	r3, #18
 80104d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	f043 0308 	orr.w	r3, r3, #8
 80104e0:	71fb      	strb	r3, [r7, #7]
 80104e2:	e010      	b.n	8010506 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80104e4:	7ebb      	ldrb	r3, [r7, #26]
 80104e6:	f003 0311 	and.w	r3, r3, #17
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d003      	beq.n	80104f6 <f_open+0xea>
					res = FR_DENIED;
 80104ee:	2307      	movs	r3, #7
 80104f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104f4:	e007      	b.n	8010506 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	f003 0304 	and.w	r3, r3, #4
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <f_open+0xfa>
 8010500:	2308      	movs	r3, #8
 8010502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801050a:	2b00      	cmp	r3, #0
 801050c:	d167      	bne.n	80105de <f_open+0x1d2>
 801050e:	79fb      	ldrb	r3, [r7, #7]
 8010510:	f003 0308 	and.w	r3, r3, #8
 8010514:	2b00      	cmp	r3, #0
 8010516:	d062      	beq.n	80105de <f_open+0x1d2>
				dw = GET_FATTIME();
 8010518:	4ba2      	ldr	r3, [pc, #648]	; (80107a4 <f_open+0x398>)
 801051a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051e:	330e      	adds	r3, #14
 8010520:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010522:	4618      	mov	r0, r3
 8010524:	f7fe f95c 	bl	800e7e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052a:	3316      	adds	r3, #22
 801052c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe f956 	bl	800e7e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010536:	330b      	adds	r3, #11
 8010538:	2220      	movs	r2, #32
 801053a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010540:	4611      	mov	r1, r2
 8010542:	4618      	mov	r0, r3
 8010544:	f7ff f925 	bl	800f792 <ld_clust>
 8010548:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801054e:	2200      	movs	r2, #0
 8010550:	4618      	mov	r0, r3
 8010552:	f7ff f93d 	bl	800f7d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010558:	331c      	adds	r3, #28
 801055a:	2100      	movs	r1, #0
 801055c:	4618      	mov	r0, r3
 801055e:	f7fe f93f 	bl	800e7e0 <st_dword>
					fs->wflag = 1;
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	2201      	movs	r2, #1
 8010566:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801056a:	2b00      	cmp	r3, #0
 801056c:	d037      	beq.n	80105de <f_open+0x1d2>
						dw = fs->winsect;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010572:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010574:	f107 0314 	add.w	r3, r7, #20
 8010578:	2200      	movs	r2, #0
 801057a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801057c:	4618      	mov	r0, r3
 801057e:	f7fe fe2d 	bl	800f1dc <remove_chain>
 8010582:	4603      	mov	r3, r0
 8010584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801058c:	2b00      	cmp	r3, #0
 801058e:	d126      	bne.n	80105de <f_open+0x1d2>
							res = move_window(fs, dw);
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010594:	4618      	mov	r0, r3
 8010596:	f7fe fb7d 	bl	800ec94 <move_window>
 801059a:	4603      	mov	r3, r0
 801059c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105a4:	3a01      	subs	r2, #1
 80105a6:	611a      	str	r2, [r3, #16]
 80105a8:	e019      	b.n	80105de <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80105aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d115      	bne.n	80105de <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80105b2:	7ebb      	ldrb	r3, [r7, #26]
 80105b4:	f003 0310 	and.w	r3, r3, #16
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <f_open+0x1b8>
					res = FR_NO_FILE;
 80105bc:	2304      	movs	r3, #4
 80105be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105c2:	e00c      	b.n	80105de <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80105c4:	79fb      	ldrb	r3, [r7, #7]
 80105c6:	f003 0302 	and.w	r3, r3, #2
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d007      	beq.n	80105de <f_open+0x1d2>
 80105ce:	7ebb      	ldrb	r3, [r7, #26]
 80105d0:	f003 0301 	and.w	r3, r3, #1
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d002      	beq.n	80105de <f_open+0x1d2>
						res = FR_DENIED;
 80105d8:	2307      	movs	r3, #7
 80105da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80105de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d128      	bne.n	8010638 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80105e6:	79fb      	ldrb	r3, [r7, #7]
 80105e8:	f003 0308 	and.w	r3, r3, #8
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d003      	beq.n	80105f8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105f6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010606:	79fb      	ldrb	r3, [r7, #7]
 8010608:	f023 0301 	bic.w	r3, r3, #1
 801060c:	2b00      	cmp	r3, #0
 801060e:	bf14      	ite	ne
 8010610:	2301      	movne	r3, #1
 8010612:	2300      	moveq	r3, #0
 8010614:	b2db      	uxtb	r3, r3
 8010616:	461a      	mov	r2, r3
 8010618:	f107 0314 	add.w	r3, r7, #20
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f7fe fa06 	bl	800ea30 <inc_lock>
 8010624:	4602      	mov	r2, r0
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	691b      	ldr	r3, [r3, #16]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d102      	bne.n	8010638 <f_open+0x22c>
 8010632:	2302      	movs	r3, #2
 8010634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 80a3 	bne.w	8010788 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010646:	4611      	mov	r1, r2
 8010648:	4618      	mov	r0, r3
 801064a:	f7ff f8a2 	bl	800f792 <ld_clust>
 801064e:	4602      	mov	r2, r0
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010656:	331c      	adds	r3, #28
 8010658:	4618      	mov	r0, r3
 801065a:	f7fe f883 	bl	800e764 <ld_dword>
 801065e:	4602      	mov	r2, r0
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2200      	movs	r2, #0
 8010668:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801066a:	693a      	ldr	r2, [r7, #16]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	88da      	ldrh	r2, [r3, #6]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	79fa      	ldrb	r2, [r7, #7]
 801067c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2200      	movs	r2, #0
 8010682:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2200      	movs	r2, #0
 8010688:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	3330      	adds	r3, #48	; 0x30
 8010694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010698:	2100      	movs	r1, #0
 801069a:	4618      	mov	r0, r3
 801069c:	f7fe f8ed 	bl	800e87a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80106a0:	79fb      	ldrb	r3, [r7, #7]
 80106a2:	f003 0320 	and.w	r3, r3, #32
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d06e      	beq.n	8010788 <f_open+0x37c>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d06a      	beq.n	8010788 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	68da      	ldr	r2, [r3, #12]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	895b      	ldrh	r3, [r3, #10]
 80106be:	461a      	mov	r2, r3
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	899b      	ldrh	r3, [r3, #12]
 80106c4:	fb03 f302 	mul.w	r3, r3, r2
 80106c8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	657b      	str	r3, [r7, #84]	; 0x54
 80106d6:	e016      	b.n	8010706 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fe fb96 	bl	800ee0e <get_fat>
 80106e2:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80106e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d802      	bhi.n	80106f0 <f_open+0x2e4>
 80106ea:	2302      	movs	r3, #2
 80106ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80106f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f6:	d102      	bne.n	80106fe <f_open+0x2f2>
 80106f8:	2301      	movs	r3, #1
 80106fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	657b      	str	r3, [r7, #84]	; 0x54
 8010706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801070a:	2b00      	cmp	r3, #0
 801070c:	d103      	bne.n	8010716 <f_open+0x30a>
 801070e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010712:	429a      	cmp	r2, r3
 8010714:	d8e0      	bhi.n	80106d8 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801071a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801071c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010720:	2b00      	cmp	r3, #0
 8010722:	d131      	bne.n	8010788 <f_open+0x37c>
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	899b      	ldrh	r3, [r3, #12]
 8010728:	461a      	mov	r2, r3
 801072a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801072c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010730:	fb02 f201 	mul.w	r2, r2, r1
 8010734:	1a9b      	subs	r3, r3, r2
 8010736:	2b00      	cmp	r3, #0
 8010738:	d026      	beq.n	8010788 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801073e:	4618      	mov	r0, r3
 8010740:	f7fe fb46 	bl	800edd0 <clust2sect>
 8010744:	6478      	str	r0, [r7, #68]	; 0x44
 8010746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010748:	2b00      	cmp	r3, #0
 801074a:	d103      	bne.n	8010754 <f_open+0x348>
						res = FR_INT_ERR;
 801074c:	2302      	movs	r3, #2
 801074e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010752:	e019      	b.n	8010788 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	899b      	ldrh	r3, [r3, #12]
 8010758:	461a      	mov	r2, r3
 801075a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801075c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010762:	441a      	add	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	7858      	ldrb	r0, [r3, #1]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6a1a      	ldr	r2, [r3, #32]
 8010776:	2301      	movs	r3, #1
 8010778:	f7fd ff7e 	bl	800e678 <disk_read>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d002      	beq.n	8010788 <f_open+0x37c>
 8010782:	2301      	movs	r3, #1
 8010784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <f_open+0x38a>
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801079a:	4618      	mov	r0, r3
 801079c:	3760      	adds	r7, #96	; 0x60
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	274a0000 	.word	0x274a0000

080107a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b08e      	sub	sp, #56	; 0x38
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f107 0214 	add.w	r2, r7, #20
 80107c6:	4611      	mov	r1, r2
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fda3 	bl	8010314 <validate>
 80107ce:	4603      	mov	r3, r0
 80107d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80107d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d107      	bne.n	80107ec <f_read+0x44>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	7d5b      	ldrb	r3, [r3, #21]
 80107e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <f_read+0x4a>
 80107ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107f0:	e135      	b.n	8010a5e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	7d1b      	ldrb	r3, [r3, #20]
 80107f6:	f003 0301 	and.w	r3, r3, #1
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <f_read+0x5a>
 80107fe:	2307      	movs	r3, #7
 8010800:	e12d      	b.n	8010a5e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	68da      	ldr	r2, [r3, #12]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	429a      	cmp	r2, r3
 8010814:	f240 811e 	bls.w	8010a54 <f_read+0x2ac>
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801081c:	e11a      	b.n	8010a54 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	8992      	ldrh	r2, [r2, #12]
 8010826:	fbb3 f1f2 	udiv	r1, r3, r2
 801082a:	fb02 f201 	mul.w	r2, r2, r1
 801082e:	1a9b      	subs	r3, r3, r2
 8010830:	2b00      	cmp	r3, #0
 8010832:	f040 80d5 	bne.w	80109e0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	8992      	ldrh	r2, [r2, #12]
 801083e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	8952      	ldrh	r2, [r2, #10]
 8010846:	3a01      	subs	r2, #1
 8010848:	4013      	ands	r3, r2
 801084a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d12f      	bne.n	80108b2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d103      	bne.n	8010862 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	633b      	str	r3, [r7, #48]	; 0x30
 8010860:	e013      	b.n	801088a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010866:	2b00      	cmp	r3, #0
 8010868:	d007      	beq.n	801087a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	699b      	ldr	r3, [r3, #24]
 801086e:	4619      	mov	r1, r3
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f7fe fdb0 	bl	800f3d6 <clmt_clust>
 8010876:	6338      	str	r0, [r7, #48]	; 0x30
 8010878:	e007      	b.n	801088a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	69db      	ldr	r3, [r3, #28]
 8010880:	4619      	mov	r1, r3
 8010882:	4610      	mov	r0, r2
 8010884:	f7fe fac3 	bl	800ee0e <get_fat>
 8010888:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	2b01      	cmp	r3, #1
 801088e:	d804      	bhi.n	801089a <f_read+0xf2>
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2202      	movs	r2, #2
 8010894:	755a      	strb	r2, [r3, #21]
 8010896:	2302      	movs	r3, #2
 8010898:	e0e1      	b.n	8010a5e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a0:	d104      	bne.n	80108ac <f_read+0x104>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	755a      	strb	r2, [r3, #21]
 80108a8:	2301      	movs	r3, #1
 80108aa:	e0d8      	b.n	8010a5e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	69db      	ldr	r3, [r3, #28]
 80108b8:	4619      	mov	r1, r3
 80108ba:	4610      	mov	r0, r2
 80108bc:	f7fe fa88 	bl	800edd0 <clust2sect>
 80108c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d104      	bne.n	80108d2 <f_read+0x12a>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2202      	movs	r2, #2
 80108cc:	755a      	strb	r2, [r3, #21]
 80108ce:	2302      	movs	r3, #2
 80108d0:	e0c5      	b.n	8010a5e <f_read+0x2b6>
			sect += csect;
 80108d2:	69ba      	ldr	r2, [r7, #24]
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	4413      	add	r3, r2
 80108d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	899b      	ldrh	r3, [r3, #12]
 80108de:	461a      	mov	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80108e6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80108e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d041      	beq.n	8010972 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80108ee:	69fa      	ldr	r2, [r7, #28]
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	4413      	add	r3, r2
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	8952      	ldrh	r2, [r2, #10]
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d905      	bls.n	8010908 <f_read+0x160>
					cc = fs->csize - csect;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	895b      	ldrh	r3, [r3, #10]
 8010900:	461a      	mov	r2, r3
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	7858      	ldrb	r0, [r3, #1]
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	69ba      	ldr	r2, [r7, #24]
 8010910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010912:	f7fd feb1 	bl	800e678 <disk_read>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d004      	beq.n	8010926 <f_read+0x17e>
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2201      	movs	r2, #1
 8010920:	755a      	strb	r2, [r3, #21]
 8010922:	2301      	movs	r3, #1
 8010924:	e09b      	b.n	8010a5e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	7d1b      	ldrb	r3, [r3, #20]
 801092a:	b25b      	sxtb	r3, r3
 801092c:	2b00      	cmp	r3, #0
 801092e:	da18      	bge.n	8010962 <f_read+0x1ba>
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6a1a      	ldr	r2, [r3, #32]
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801093a:	429a      	cmp	r2, r3
 801093c:	d911      	bls.n	8010962 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	6a1a      	ldr	r2, [r3, #32]
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	1ad3      	subs	r3, r2, r3
 8010946:	697a      	ldr	r2, [r7, #20]
 8010948:	8992      	ldrh	r2, [r2, #12]
 801094a:	fb02 f303 	mul.w	r3, r2, r3
 801094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010950:	18d0      	adds	r0, r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	899b      	ldrh	r3, [r3, #12]
 801095c:	461a      	mov	r2, r3
 801095e:	f7fd ff6b 	bl	800e838 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	899b      	ldrh	r3, [r3, #12]
 8010966:	461a      	mov	r2, r3
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	fb02 f303 	mul.w	r3, r2, r3
 801096e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010970:	e05c      	b.n	8010a2c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	69ba      	ldr	r2, [r7, #24]
 8010978:	429a      	cmp	r2, r3
 801097a:	d02e      	beq.n	80109da <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	7d1b      	ldrb	r3, [r3, #20]
 8010980:	b25b      	sxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	da18      	bge.n	80109b8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	7858      	ldrb	r0, [r3, #1]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	6a1a      	ldr	r2, [r3, #32]
 8010994:	2301      	movs	r3, #1
 8010996:	f7fd fe8f 	bl	800e6b8 <disk_write>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d004      	beq.n	80109aa <f_read+0x202>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2201      	movs	r2, #1
 80109a4:	755a      	strb	r2, [r3, #21]
 80109a6:	2301      	movs	r3, #1
 80109a8:	e059      	b.n	8010a5e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	7d1b      	ldrb	r3, [r3, #20]
 80109ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109b2:	b2da      	uxtb	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	7858      	ldrb	r0, [r3, #1]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109c2:	2301      	movs	r3, #1
 80109c4:	69ba      	ldr	r2, [r7, #24]
 80109c6:	f7fd fe57 	bl	800e678 <disk_read>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d004      	beq.n	80109da <f_read+0x232>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2201      	movs	r2, #1
 80109d4:	755a      	strb	r2, [r3, #21]
 80109d6:	2301      	movs	r3, #1
 80109d8:	e041      	b.n	8010a5e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	899b      	ldrh	r3, [r3, #12]
 80109e4:	4618      	mov	r0, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	697a      	ldr	r2, [r7, #20]
 80109ec:	8992      	ldrh	r2, [r2, #12]
 80109ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80109f2:	fb02 f201 	mul.w	r2, r2, r1
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	1ac3      	subs	r3, r0, r3
 80109fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80109fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d901      	bls.n	8010a08 <f_read+0x260>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	699b      	ldr	r3, [r3, #24]
 8010a12:	697a      	ldr	r2, [r7, #20]
 8010a14:	8992      	ldrh	r2, [r2, #12]
 8010a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a1a:	fb02 f200 	mul.w	r2, r2, r0
 8010a1e:	1a9b      	subs	r3, r3, r2
 8010a20:	440b      	add	r3, r1
 8010a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a24:	4619      	mov	r1, r3
 8010a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a28:	f7fd ff06 	bl	800e838 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	4413      	add	r3, r2
 8010a32:	627b      	str	r3, [r7, #36]	; 0x24
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	699a      	ldr	r2, [r3, #24]
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3a:	441a      	add	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	619a      	str	r2, [r3, #24]
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a46:	441a      	add	r2, r3
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	601a      	str	r2, [r3, #0]
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f47f aee1 	bne.w	801081e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3738      	adds	r7, #56	; 0x38
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b08c      	sub	sp, #48	; 0x30
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	60b9      	str	r1, [r7, #8]
 8010a70:	607a      	str	r2, [r7, #4]
 8010a72:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f107 0210 	add.w	r2, r7, #16
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff fc44 	bl	8010314 <validate>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d107      	bne.n	8010aaa <f_write+0x44>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	7d5b      	ldrb	r3, [r3, #21]
 8010a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d002      	beq.n	8010ab0 <f_write+0x4a>
 8010aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aae:	e16a      	b.n	8010d86 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	7d1b      	ldrb	r3, [r3, #20]
 8010ab4:	f003 0302 	and.w	r3, r3, #2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d101      	bne.n	8010ac0 <f_write+0x5a>
 8010abc:	2307      	movs	r3, #7
 8010abe:	e162      	b.n	8010d86 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	699a      	ldr	r2, [r3, #24]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	441a      	add	r2, r3
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	699b      	ldr	r3, [r3, #24]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	f080 814c 	bcs.w	8010d6a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	699b      	ldr	r3, [r3, #24]
 8010ad6:	43db      	mvns	r3, r3
 8010ad8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ada:	e146      	b.n	8010d6a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	8992      	ldrh	r2, [r2, #12]
 8010ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ae8:	fb02 f201 	mul.w	r2, r2, r1
 8010aec:	1a9b      	subs	r3, r3, r2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f040 80f1 	bne.w	8010cd6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	699b      	ldr	r3, [r3, #24]
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	8992      	ldrh	r2, [r2, #12]
 8010afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b00:	693a      	ldr	r2, [r7, #16]
 8010b02:	8952      	ldrh	r2, [r2, #10]
 8010b04:	3a01      	subs	r2, #1
 8010b06:	4013      	ands	r3, r2
 8010b08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d143      	bne.n	8010b98 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10c      	bne.n	8010b32 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d11a      	bne.n	8010b5a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2100      	movs	r1, #0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fe fbbc 	bl	800f2a6 <create_chain>
 8010b2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b30:	e013      	b.n	8010b5a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d007      	beq.n	8010b4a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	699b      	ldr	r3, [r3, #24]
 8010b3e:	4619      	mov	r1, r3
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f7fe fc48 	bl	800f3d6 <clmt_clust>
 8010b46:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b48:	e007      	b.n	8010b5a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	69db      	ldr	r3, [r3, #28]
 8010b50:	4619      	mov	r1, r3
 8010b52:	4610      	mov	r0, r2
 8010b54:	f7fe fba7 	bl	800f2a6 <create_chain>
 8010b58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 8109 	beq.w	8010d74 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d104      	bne.n	8010b72 <f_write+0x10c>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2202      	movs	r2, #2
 8010b6c:	755a      	strb	r2, [r3, #21]
 8010b6e:	2302      	movs	r3, #2
 8010b70:	e109      	b.n	8010d86 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b78:	d104      	bne.n	8010b84 <f_write+0x11e>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	755a      	strb	r2, [r3, #21]
 8010b80:	2301      	movs	r3, #1
 8010b82:	e100      	b.n	8010d86 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	689b      	ldr	r3, [r3, #8]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d102      	bne.n	8010b98 <f_write+0x132>
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	7d1b      	ldrb	r3, [r3, #20]
 8010b9c:	b25b      	sxtb	r3, r3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da18      	bge.n	8010bd4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	7858      	ldrb	r0, [r3, #1]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6a1a      	ldr	r2, [r3, #32]
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	f7fd fd81 	bl	800e6b8 <disk_write>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d004      	beq.n	8010bc6 <f_write+0x160>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	755a      	strb	r2, [r3, #21]
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e0df      	b.n	8010d86 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	7d1b      	ldrb	r3, [r3, #20]
 8010bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	69db      	ldr	r3, [r3, #28]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	4610      	mov	r0, r2
 8010bde:	f7fe f8f7 	bl	800edd0 <clust2sect>
 8010be2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d104      	bne.n	8010bf4 <f_write+0x18e>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2202      	movs	r2, #2
 8010bee:	755a      	strb	r2, [r3, #21]
 8010bf0:	2302      	movs	r3, #2
 8010bf2:	e0c8      	b.n	8010d86 <f_write+0x320>
			sect += csect;
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	899b      	ldrh	r3, [r3, #12]
 8010c00:	461a      	mov	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c08:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c0a:	6a3b      	ldr	r3, [r7, #32]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d043      	beq.n	8010c98 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c10:	69ba      	ldr	r2, [r7, #24]
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	4413      	add	r3, r2
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	8952      	ldrh	r2, [r2, #10]
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d905      	bls.n	8010c2a <f_write+0x1c4>
					cc = fs->csize - csect;
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	895b      	ldrh	r3, [r3, #10]
 8010c22:	461a      	mov	r2, r3
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	7858      	ldrb	r0, [r3, #1]
 8010c2e:	6a3b      	ldr	r3, [r7, #32]
 8010c30:	697a      	ldr	r2, [r7, #20]
 8010c32:	69f9      	ldr	r1, [r7, #28]
 8010c34:	f7fd fd40 	bl	800e6b8 <disk_write>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d004      	beq.n	8010c48 <f_write+0x1e2>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2201      	movs	r2, #1
 8010c42:	755a      	strb	r2, [r3, #21]
 8010c44:	2301      	movs	r3, #1
 8010c46:	e09e      	b.n	8010d86 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6a1a      	ldr	r2, [r3, #32]
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	6a3a      	ldr	r2, [r7, #32]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d918      	bls.n	8010c88 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6a1a      	ldr	r2, [r3, #32]
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	693a      	ldr	r2, [r7, #16]
 8010c66:	8992      	ldrh	r2, [r2, #12]
 8010c68:	fb02 f303 	mul.w	r3, r2, r3
 8010c6c:	69fa      	ldr	r2, [r7, #28]
 8010c6e:	18d1      	adds	r1, r2, r3
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	899b      	ldrh	r3, [r3, #12]
 8010c74:	461a      	mov	r2, r3
 8010c76:	f7fd fddf 	bl	800e838 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	7d1b      	ldrb	r3, [r3, #20]
 8010c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	899b      	ldrh	r3, [r3, #12]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6a3b      	ldr	r3, [r7, #32]
 8010c90:	fb02 f303 	mul.w	r3, r2, r3
 8010c94:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010c96:	e04b      	b.n	8010d30 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	6a1b      	ldr	r3, [r3, #32]
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d016      	beq.n	8010cd0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	699a      	ldr	r2, [r3, #24]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d210      	bcs.n	8010cd0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	7858      	ldrb	r0, [r3, #1]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010cb8:	2301      	movs	r3, #1
 8010cba:	697a      	ldr	r2, [r7, #20]
 8010cbc:	f7fd fcdc 	bl	800e678 <disk_read>
 8010cc0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d004      	beq.n	8010cd0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	755a      	strb	r2, [r3, #21]
 8010ccc:	2301      	movs	r3, #1
 8010cce:	e05a      	b.n	8010d86 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	697a      	ldr	r2, [r7, #20]
 8010cd4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	8992      	ldrh	r2, [r2, #12]
 8010ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ce8:	fb02 f201 	mul.w	r2, r2, r1
 8010cec:	1a9b      	subs	r3, r3, r2
 8010cee:	1ac3      	subs	r3, r0, r3
 8010cf0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d901      	bls.n	8010cfe <f_write+0x298>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	699b      	ldr	r3, [r3, #24]
 8010d08:	693a      	ldr	r2, [r7, #16]
 8010d0a:	8992      	ldrh	r2, [r2, #12]
 8010d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d10:	fb02 f200 	mul.w	r2, r2, r0
 8010d14:	1a9b      	subs	r3, r3, r2
 8010d16:	440b      	add	r3, r1
 8010d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d1a:	69f9      	ldr	r1, [r7, #28]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fd fd8b 	bl	800e838 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	7d1b      	ldrb	r3, [r3, #20]
 8010d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	4413      	add	r3, r2
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	699a      	ldr	r2, [r3, #24]
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	441a      	add	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	619a      	str	r2, [r3, #24]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	68da      	ldr	r2, [r3, #12]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	699b      	ldr	r3, [r3, #24]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	bf38      	it	cc
 8010d50:	461a      	movcc	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	60da      	str	r2, [r3, #12]
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	441a      	add	r2, r3
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f47f aeb5 	bne.w	8010adc <f_write+0x76>
 8010d72:	e000      	b.n	8010d76 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d74:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	7d1b      	ldrb	r3, [r3, #20]
 8010d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010d84:	2300      	movs	r3, #0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3730      	adds	r7, #48	; 0x30
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
	...

08010d90 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f107 0208 	add.w	r2, r7, #8
 8010d9e:	4611      	mov	r1, r2
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7ff fab7 	bl	8010314 <validate>
 8010da6:	4603      	mov	r3, r0
 8010da8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010daa:	7dfb      	ldrb	r3, [r7, #23]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d167      	bne.n	8010e80 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	7d1b      	ldrb	r3, [r3, #20]
 8010db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d061      	beq.n	8010e80 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	7d1b      	ldrb	r3, [r3, #20]
 8010dc0:	b25b      	sxtb	r3, r3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	da15      	bge.n	8010df2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	7858      	ldrb	r0, [r3, #1]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a1a      	ldr	r2, [r3, #32]
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	f7fd fc6f 	bl	800e6b8 <disk_write>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d001      	beq.n	8010de4 <f_sync+0x54>
 8010de0:	2301      	movs	r3, #1
 8010de2:	e04e      	b.n	8010e82 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	7d1b      	ldrb	r3, [r3, #20]
 8010de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dec:	b2da      	uxtb	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010df2:	4b26      	ldr	r3, [pc, #152]	; (8010e8c <f_sync+0xfc>)
 8010df4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	4610      	mov	r0, r2
 8010e00:	f7fd ff48 	bl	800ec94 <move_window>
 8010e04:	4603      	mov	r3, r0
 8010e06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e08:	7dfb      	ldrb	r3, [r7, #23]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d138      	bne.n	8010e80 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	330b      	adds	r3, #11
 8010e18:	781a      	ldrb	r2, [r3, #0]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	330b      	adds	r3, #11
 8010e1e:	f042 0220 	orr.w	r2, r2, #32
 8010e22:	b2d2      	uxtb	r2, r2
 8010e24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6818      	ldr	r0, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	68f9      	ldr	r1, [r7, #12]
 8010e32:	f7fe fccd 	bl	800f7d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f103 021c 	add.w	r2, r3, #28
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	4619      	mov	r1, r3
 8010e42:	4610      	mov	r0, r2
 8010e44:	f7fd fccc 	bl	800e7e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	3316      	adds	r3, #22
 8010e4c:	6939      	ldr	r1, [r7, #16]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fd fcc6 	bl	800e7e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	3312      	adds	r3, #18
 8010e58:	2100      	movs	r1, #0
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fd fca5 	bl	800e7aa <st_word>
					fs->wflag = 1;
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	2201      	movs	r2, #1
 8010e64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fd ff41 	bl	800ecf0 <sync_fs>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7d1b      	ldrb	r3, [r3, #20]
 8010e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3718      	adds	r7, #24
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	274a0000 	.word	0x274a0000

08010e90 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff ff79 	bl	8010d90 <f_sync>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010ea2:	7bfb      	ldrb	r3, [r7, #15]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d118      	bne.n	8010eda <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f107 0208 	add.w	r2, r7, #8
 8010eae:	4611      	mov	r1, r2
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7ff fa2f 	bl	8010314 <validate>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010eba:	7bfb      	ldrb	r3, [r7, #15]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d10c      	bne.n	8010eda <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	691b      	ldr	r3, [r3, #16]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7fd fe41 	bl	800eb4c <dec_lock>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010ece:	7bfb      	ldrb	r3, [r7, #15]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d102      	bne.n	8010eda <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3710      	adds	r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010ee4:	b590      	push	{r4, r7, lr}
 8010ee6:	b091      	sub	sp, #68	; 0x44
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010eec:	f107 0108 	add.w	r1, r7, #8
 8010ef0:	1d3b      	adds	r3, r7, #4
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fe ff87 	bl	800fe08 <find_volume>
 8010efa:	4603      	mov	r3, r0
 8010efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d131      	bne.n	8010f6c <f_chdir+0x88>
		dj.obj.fs = fs;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	f107 030c 	add.w	r3, r7, #12
 8010f12:	4611      	mov	r1, r2
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fe fe47 	bl	800fba8 <follow_path>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8010f20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d11a      	bne.n	8010f5e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010f28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010f2c:	b25b      	sxtb	r3, r3
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	da03      	bge.n	8010f3a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	697a      	ldr	r2, [r7, #20]
 8010f36:	619a      	str	r2, [r3, #24]
 8010f38:	e011      	b.n	8010f5e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010f3a:	7cbb      	ldrb	r3, [r7, #18]
 8010f3c:	f003 0310 	and.w	r3, r3, #16
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d009      	beq.n	8010f58 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f48:	68bc      	ldr	r4, [r7, #8]
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fe fc20 	bl	800f792 <ld_clust>
 8010f52:	4603      	mov	r3, r0
 8010f54:	61a3      	str	r3, [r4, #24]
 8010f56:	e002      	b.n	8010f5e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010f58:	2305      	movs	r3, #5
 8010f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f62:	2b04      	cmp	r3, #4
 8010f64:	d102      	bne.n	8010f6c <f_chdir+0x88>
 8010f66:	2305      	movs	r3, #5
 8010f68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8010f6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3744      	adds	r7, #68	; 0x44
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd90      	pop	{r4, r7, pc}

08010f78 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b090      	sub	sp, #64	; 0x40
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f107 0208 	add.w	r2, r7, #8
 8010f88:	4611      	mov	r1, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7ff f9c2 	bl	8010314 <validate>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010f96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d103      	bne.n	8010fa6 <f_lseek+0x2e>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	7d5b      	ldrb	r3, [r3, #21]
 8010fa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d002      	beq.n	8010fb4 <f_lseek+0x3c>
 8010fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010fb2:	e201      	b.n	80113b8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 80d9 	beq.w	8011170 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc4:	d15a      	bne.n	801107c <f_lseek+0x104>
			tbl = fp->cltbl;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fca:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fce:	1d1a      	adds	r2, r3, #4
 8010fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	617b      	str	r3, [r7, #20]
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d03a      	beq.n	801105c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe8:	613b      	str	r3, [r7, #16]
 8010fea:	2300      	movs	r3, #0
 8010fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	3302      	adds	r3, #2
 8010ff2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff6:	60fb      	str	r3, [r7, #12]
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011002:	4618      	mov	r0, r3
 8011004:	f7fd ff03 	bl	800ee0e <get_fat>
 8011008:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100c:	2b01      	cmp	r3, #1
 801100e:	d804      	bhi.n	801101a <f_lseek+0xa2>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2202      	movs	r2, #2
 8011014:	755a      	strb	r2, [r3, #21]
 8011016:	2302      	movs	r3, #2
 8011018:	e1ce      	b.n	80113b8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011020:	d104      	bne.n	801102c <f_lseek+0xb4>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2201      	movs	r2, #1
 8011026:	755a      	strb	r2, [r3, #21]
 8011028:	2301      	movs	r3, #1
 801102a:	e1c5      	b.n	80113b8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	3301      	adds	r3, #1
 8011030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011032:	429a      	cmp	r2, r3
 8011034:	d0de      	beq.n	8010ff4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	429a      	cmp	r2, r3
 801103c:	d809      	bhi.n	8011052 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	1d1a      	adds	r2, r3, #4
 8011042:	627a      	str	r2, [r7, #36]	; 0x24
 8011044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011046:	601a      	str	r2, [r3, #0]
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	1d1a      	adds	r2, r3, #4
 801104c:	627a      	str	r2, [r7, #36]	; 0x24
 801104e:	693a      	ldr	r2, [r7, #16]
 8011050:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	69db      	ldr	r3, [r3, #28]
 8011056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011058:	429a      	cmp	r2, r3
 801105a:	d3c4      	bcc.n	8010fe6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011062:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	429a      	cmp	r2, r3
 801106a:	d803      	bhi.n	8011074 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	2200      	movs	r2, #0
 8011070:	601a      	str	r2, [r3, #0]
 8011072:	e19f      	b.n	80113b4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011074:	2311      	movs	r3, #17
 8011076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801107a:	e19b      	b.n	80113b4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	683a      	ldr	r2, [r7, #0]
 8011082:	429a      	cmp	r2, r3
 8011084:	d902      	bls.n	801108c <f_lseek+0x114>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	683a      	ldr	r2, [r7, #0]
 8011090:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 818d 	beq.w	80113b4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	3b01      	subs	r3, #1
 801109e:	4619      	mov	r1, r3
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7fe f998 	bl	800f3d6 <clmt_clust>
 80110a6:	4602      	mov	r2, r0
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	69db      	ldr	r3, [r3, #28]
 80110b2:	4619      	mov	r1, r3
 80110b4:	4610      	mov	r0, r2
 80110b6:	f7fd fe8b 	bl	800edd0 <clust2sect>
 80110ba:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80110bc:	69bb      	ldr	r3, [r7, #24]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d104      	bne.n	80110cc <f_lseek+0x154>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2202      	movs	r2, #2
 80110c6:	755a      	strb	r2, [r3, #21]
 80110c8:	2302      	movs	r3, #2
 80110ca:	e175      	b.n	80113b8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	3b01      	subs	r3, #1
 80110d0:	68ba      	ldr	r2, [r7, #8]
 80110d2:	8992      	ldrh	r2, [r2, #12]
 80110d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	8952      	ldrh	r2, [r2, #10]
 80110dc:	3a01      	subs	r2, #1
 80110de:	4013      	ands	r3, r2
 80110e0:	69ba      	ldr	r2, [r7, #24]
 80110e2:	4413      	add	r3, r2
 80110e4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	699b      	ldr	r3, [r3, #24]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	8992      	ldrh	r2, [r2, #12]
 80110ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80110f2:	fb02 f201 	mul.w	r2, r2, r1
 80110f6:	1a9b      	subs	r3, r3, r2
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f000 815b 	beq.w	80113b4 <f_lseek+0x43c>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6a1b      	ldr	r3, [r3, #32]
 8011102:	69ba      	ldr	r2, [r7, #24]
 8011104:	429a      	cmp	r2, r3
 8011106:	f000 8155 	beq.w	80113b4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	7d1b      	ldrb	r3, [r3, #20]
 801110e:	b25b      	sxtb	r3, r3
 8011110:	2b00      	cmp	r3, #0
 8011112:	da18      	bge.n	8011146 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	7858      	ldrb	r0, [r3, #1]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6a1a      	ldr	r2, [r3, #32]
 8011122:	2301      	movs	r3, #1
 8011124:	f7fd fac8 	bl	800e6b8 <disk_write>
 8011128:	4603      	mov	r3, r0
 801112a:	2b00      	cmp	r3, #0
 801112c:	d004      	beq.n	8011138 <f_lseek+0x1c0>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2201      	movs	r2, #1
 8011132:	755a      	strb	r2, [r3, #21]
 8011134:	2301      	movs	r3, #1
 8011136:	e13f      	b.n	80113b8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	7d1b      	ldrb	r3, [r3, #20]
 801113c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011140:	b2da      	uxtb	r2, r3
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	7858      	ldrb	r0, [r3, #1]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011150:	2301      	movs	r3, #1
 8011152:	69ba      	ldr	r2, [r7, #24]
 8011154:	f7fd fa90 	bl	800e678 <disk_read>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d004      	beq.n	8011168 <f_lseek+0x1f0>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2201      	movs	r2, #1
 8011162:	755a      	strb	r2, [r3, #21]
 8011164:	2301      	movs	r3, #1
 8011166:	e127      	b.n	80113b8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	69ba      	ldr	r2, [r7, #24]
 801116c:	621a      	str	r2, [r3, #32]
 801116e:	e121      	b.n	80113b4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	429a      	cmp	r2, r3
 8011178:	d908      	bls.n	801118c <f_lseek+0x214>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7d1b      	ldrb	r3, [r3, #20]
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d102      	bne.n	801118c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	699b      	ldr	r3, [r3, #24]
 8011190:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	637b      	str	r3, [r7, #52]	; 0x34
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801119a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f000 80b5 	beq.w	801130e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	895b      	ldrh	r3, [r3, #10]
 80111a8:	461a      	mov	r2, r3
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	899b      	ldrh	r3, [r3, #12]
 80111ae:	fb03 f302 	mul.w	r3, r3, r2
 80111b2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d01b      	beq.n	80111f2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	1e5a      	subs	r2, r3, #1
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	1e59      	subs	r1, r3, #1
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d30f      	bcc.n	80111f2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	1e5a      	subs	r2, r3, #1
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	425b      	negs	r3, r3
 80111da:	401a      	ands	r2, r3
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	1ad3      	subs	r3, r2, r3
 80111e8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	69db      	ldr	r3, [r3, #28]
 80111ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80111f0:	e022      	b.n	8011238 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d119      	bne.n	8011232 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2100      	movs	r1, #0
 8011202:	4618      	mov	r0, r3
 8011204:	f7fe f84f 	bl	800f2a6 <create_chain>
 8011208:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120c:	2b01      	cmp	r3, #1
 801120e:	d104      	bne.n	801121a <f_lseek+0x2a2>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2202      	movs	r2, #2
 8011214:	755a      	strb	r2, [r3, #21]
 8011216:	2302      	movs	r3, #2
 8011218:	e0ce      	b.n	80113b8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801121a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011220:	d104      	bne.n	801122c <f_lseek+0x2b4>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2201      	movs	r2, #1
 8011226:	755a      	strb	r2, [r3, #21]
 8011228:	2301      	movs	r3, #1
 801122a:	e0c5      	b.n	80113b8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011230:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011236:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123a:	2b00      	cmp	r3, #0
 801123c:	d067      	beq.n	801130e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801123e:	e03a      	b.n	80112b6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	603b      	str	r3, [r7, #0]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	699a      	ldr	r2, [r3, #24]
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	441a      	add	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	7d1b      	ldrb	r3, [r3, #20]
 8011258:	f003 0302 	and.w	r3, r3, #2
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00b      	beq.n	8011278 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011264:	4618      	mov	r0, r3
 8011266:	f7fe f81e 	bl	800f2a6 <create_chain>
 801126a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	2b00      	cmp	r3, #0
 8011270:	d108      	bne.n	8011284 <f_lseek+0x30c>
							ofs = 0; break;
 8011272:	2300      	movs	r3, #0
 8011274:	603b      	str	r3, [r7, #0]
 8011276:	e022      	b.n	80112be <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801127c:	4618      	mov	r0, r3
 801127e:	f7fd fdc6 	bl	800ee0e <get_fat>
 8011282:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128a:	d104      	bne.n	8011296 <f_lseek+0x31e>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	755a      	strb	r2, [r3, #21]
 8011292:	2301      	movs	r3, #1
 8011294:	e090      	b.n	80113b8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011298:	2b01      	cmp	r3, #1
 801129a:	d904      	bls.n	80112a6 <f_lseek+0x32e>
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	69db      	ldr	r3, [r3, #28]
 80112a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d304      	bcc.n	80112b0 <f_lseek+0x338>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2202      	movs	r2, #2
 80112aa:	755a      	strb	r2, [r3, #21]
 80112ac:	2302      	movs	r3, #2
 80112ae:	e083      	b.n	80113b8 <f_lseek+0x440>
					fp->clust = clst;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112b4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d8c0      	bhi.n	8011240 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	699a      	ldr	r2, [r3, #24]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	441a      	add	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	899b      	ldrh	r3, [r3, #12]
 80112ce:	461a      	mov	r2, r3
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80112d6:	fb02 f201 	mul.w	r2, r2, r1
 80112da:	1a9b      	subs	r3, r3, r2
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d016      	beq.n	801130e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fd fd73 	bl	800edd0 <clust2sect>
 80112ea:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80112ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d104      	bne.n	80112fc <f_lseek+0x384>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2202      	movs	r2, #2
 80112f6:	755a      	strb	r2, [r3, #21]
 80112f8:	2302      	movs	r3, #2
 80112fa:	e05d      	b.n	80113b8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	899b      	ldrh	r3, [r3, #12]
 8011300:	461a      	mov	r2, r3
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	fbb3 f3f2 	udiv	r3, r3, r2
 8011308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801130a:	4413      	add	r3, r2
 801130c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	699a      	ldr	r2, [r3, #24]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	429a      	cmp	r2, r3
 8011318:	d90a      	bls.n	8011330 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	699a      	ldr	r2, [r3, #24]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	7d1b      	ldrb	r3, [r3, #20]
 8011326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801132a:	b2da      	uxtb	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	699b      	ldr	r3, [r3, #24]
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	8992      	ldrh	r2, [r2, #12]
 8011338:	fbb3 f1f2 	udiv	r1, r3, r2
 801133c:	fb02 f201 	mul.w	r2, r2, r1
 8011340:	1a9b      	subs	r3, r3, r2
 8011342:	2b00      	cmp	r3, #0
 8011344:	d036      	beq.n	80113b4 <f_lseek+0x43c>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6a1b      	ldr	r3, [r3, #32]
 801134a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801134c:	429a      	cmp	r2, r3
 801134e:	d031      	beq.n	80113b4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	7d1b      	ldrb	r3, [r3, #20]
 8011354:	b25b      	sxtb	r3, r3
 8011356:	2b00      	cmp	r3, #0
 8011358:	da18      	bge.n	801138c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	7858      	ldrb	r0, [r3, #1]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a1a      	ldr	r2, [r3, #32]
 8011368:	2301      	movs	r3, #1
 801136a:	f7fd f9a5 	bl	800e6b8 <disk_write>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	d004      	beq.n	801137e <f_lseek+0x406>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2201      	movs	r2, #1
 8011378:	755a      	strb	r2, [r3, #21]
 801137a:	2301      	movs	r3, #1
 801137c:	e01c      	b.n	80113b8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	7d1b      	ldrb	r3, [r3, #20]
 8011382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011386:	b2da      	uxtb	r2, r3
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	7858      	ldrb	r0, [r3, #1]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011396:	2301      	movs	r3, #1
 8011398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801139a:	f7fd f96d 	bl	800e678 <disk_read>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d004      	beq.n	80113ae <f_lseek+0x436>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	755a      	strb	r2, [r3, #21]
 80113aa:	2301      	movs	r3, #1
 80113ac:	e004      	b.n	80113b8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113b2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80113b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3740      	adds	r7, #64	; 0x40
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b09e      	sub	sp, #120	; 0x78
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80113cc:	f107 010c 	add.w	r1, r7, #12
 80113d0:	1d3b      	adds	r3, r7, #4
 80113d2:	2202      	movs	r2, #2
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fe fd17 	bl	800fe08 <find_volume>
 80113da:	4603      	mov	r3, r0
 80113dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80113e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f040 80a4 	bne.w	8011536 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80113f4:	4611      	mov	r1, r2
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fe fbd6 	bl	800fba8 <follow_path>
 80113fc:	4603      	mov	r3, r0
 80113fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011402:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011406:	2b00      	cmp	r3, #0
 8011408:	d108      	bne.n	801141c <f_unlink+0x5c>
 801140a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801140e:	f003 0320 	and.w	r3, r3, #32
 8011412:	2b00      	cmp	r3, #0
 8011414:	d002      	beq.n	801141c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011416:	2306      	movs	r3, #6
 8011418:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801141c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011420:	2b00      	cmp	r3, #0
 8011422:	d108      	bne.n	8011436 <f_unlink+0x76>
 8011424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011428:	2102      	movs	r1, #2
 801142a:	4618      	mov	r0, r3
 801142c:	f7fd fa82 	bl	800e934 <chk_lock>
 8011430:	4603      	mov	r3, r0
 8011432:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011436:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801143a:	2b00      	cmp	r3, #0
 801143c:	d17b      	bne.n	8011536 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801143e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011442:	b25b      	sxtb	r3, r3
 8011444:	2b00      	cmp	r3, #0
 8011446:	da03      	bge.n	8011450 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011448:	2306      	movs	r3, #6
 801144a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801144e:	e008      	b.n	8011462 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011450:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	2b00      	cmp	r3, #0
 801145a:	d002      	beq.n	8011462 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801145c:	2307      	movs	r3, #7
 801145e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011462:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011466:	2b00      	cmp	r3, #0
 8011468:	d13d      	bne.n	80114e6 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801146e:	4611      	mov	r1, r2
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe f98e 	bl	800f792 <ld_clust>
 8011476:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011478:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801147c:	f003 0310 	and.w	r3, r3, #16
 8011480:	2b00      	cmp	r3, #0
 8011482:	d030      	beq.n	80114e6 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	699b      	ldr	r3, [r3, #24]
 8011488:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801148a:	429a      	cmp	r2, r3
 801148c:	d103      	bne.n	8011496 <f_unlink+0xd6>
						res = FR_DENIED;
 801148e:	2307      	movs	r3, #7
 8011490:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011494:	e027      	b.n	80114e6 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801149a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801149c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801149e:	f107 0310 	add.w	r3, r7, #16
 80114a2:	2100      	movs	r1, #0
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7fd ffce 	bl	800f446 <dir_sdi>
 80114aa:	4603      	mov	r3, r0
 80114ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80114b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d116      	bne.n	80114e6 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80114b8:	f107 0310 	add.w	r3, r7, #16
 80114bc:	2100      	movs	r1, #0
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fe f9a6 	bl	800f810 <dir_read>
 80114c4:	4603      	mov	r3, r0
 80114c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80114ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <f_unlink+0x118>
 80114d2:	2307      	movs	r3, #7
 80114d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80114d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114dc:	2b04      	cmp	r3, #4
 80114de:	d102      	bne.n	80114e6 <f_unlink+0x126>
 80114e0:	2300      	movs	r3, #0
 80114e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80114e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d123      	bne.n	8011536 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80114ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fe fa70 	bl	800f9d8 <dir_remove>
 80114f8:	4603      	mov	r3, r0
 80114fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80114fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011502:	2b00      	cmp	r3, #0
 8011504:	d10c      	bne.n	8011520 <f_unlink+0x160>
 8011506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011508:	2b00      	cmp	r3, #0
 801150a:	d009      	beq.n	8011520 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801150c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011510:	2200      	movs	r2, #0
 8011512:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011514:	4618      	mov	r0, r3
 8011516:	f7fd fe61 	bl	800f1dc <remove_chain>
 801151a:	4603      	mov	r3, r0
 801151c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011520:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011524:	2b00      	cmp	r3, #0
 8011526:	d106      	bne.n	8011536 <f_unlink+0x176>
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	4618      	mov	r0, r3
 801152c:	f7fd fbe0 	bl	800ecf0 <sync_fs>
 8011530:	4603      	mov	r3, r0
 8011532:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011536:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801153a:	4618      	mov	r0, r3
 801153c:	3778      	adds	r7, #120	; 0x78
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b096      	sub	sp, #88	; 0x58
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801154c:	f107 0108 	add.w	r1, r7, #8
 8011550:	1d3b      	adds	r3, r7, #4
 8011552:	2202      	movs	r2, #2
 8011554:	4618      	mov	r0, r3
 8011556:	f7fe fc57 	bl	800fe08 <find_volume>
 801155a:	4603      	mov	r3, r0
 801155c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011568:	2b00      	cmp	r3, #0
 801156a:	f040 80fe 	bne.w	801176a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	f107 030c 	add.w	r3, r7, #12
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fe fb16 	bl	800fba8 <follow_path>
 801157c:	4603      	mov	r3, r0
 801157e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011586:	2b00      	cmp	r3, #0
 8011588:	d102      	bne.n	8011590 <f_mkdir+0x4c>
 801158a:	2308      	movs	r3, #8
 801158c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011594:	2b04      	cmp	r3, #4
 8011596:	d108      	bne.n	80115aa <f_mkdir+0x66>
 8011598:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801159c:	f003 0320 	and.w	r3, r3, #32
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80115a4:	2306      	movs	r3, #6
 80115a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80115aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115ae:	2b04      	cmp	r3, #4
 80115b0:	f040 80db 	bne.w	801176a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80115b4:	f107 030c 	add.w	r3, r7, #12
 80115b8:	2100      	movs	r1, #0
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fd fe73 	bl	800f2a6 <create_chain>
 80115c0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	895b      	ldrh	r3, [r3, #10]
 80115c6:	461a      	mov	r2, r3
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	899b      	ldrh	r3, [r3, #12]
 80115cc:	fb03 f302 	mul.w	r3, r3, r2
 80115d0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80115d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d102      	bne.n	80115e4 <f_mkdir+0xa0>
 80115de:	2307      	movs	r3, #7
 80115e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80115e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d102      	bne.n	80115f0 <f_mkdir+0xac>
 80115ea:	2302      	movs	r3, #2
 80115ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80115f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f6:	d102      	bne.n	80115fe <f_mkdir+0xba>
 80115f8:	2301      	movs	r3, #1
 80115fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80115fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011602:	2b00      	cmp	r3, #0
 8011604:	d106      	bne.n	8011614 <f_mkdir+0xd0>
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	4618      	mov	r0, r3
 801160a:	f7fd faff 	bl	800ec0c <sync_window>
 801160e:	4603      	mov	r3, r0
 8011610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011614:	4b58      	ldr	r3, [pc, #352]	; (8011778 <f_mkdir+0x234>)
 8011616:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801161c:	2b00      	cmp	r3, #0
 801161e:	d16c      	bne.n	80116fa <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011624:	4618      	mov	r0, r3
 8011626:	f7fd fbd3 	bl	800edd0 <clust2sect>
 801162a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	3338      	adds	r3, #56	; 0x38
 8011630:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	899b      	ldrh	r3, [r3, #12]
 8011636:	461a      	mov	r2, r3
 8011638:	2100      	movs	r1, #0
 801163a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801163c:	f7fd f91d 	bl	800e87a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011640:	220b      	movs	r2, #11
 8011642:	2120      	movs	r1, #32
 8011644:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011646:	f7fd f918 	bl	800e87a <mem_set>
					dir[DIR_Name] = '.';
 801164a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801164c:	222e      	movs	r2, #46	; 0x2e
 801164e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011652:	330b      	adds	r3, #11
 8011654:	2210      	movs	r2, #16
 8011656:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801165a:	3316      	adds	r3, #22
 801165c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801165e:	4618      	mov	r0, r3
 8011660:	f7fd f8be 	bl	800e7e0 <st_dword>
					st_clust(fs, dir, dcl);
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801166a:	4618      	mov	r0, r3
 801166c:	f7fe f8b0 	bl	800f7d0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011672:	3320      	adds	r3, #32
 8011674:	2220      	movs	r2, #32
 8011676:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011678:	4618      	mov	r0, r3
 801167a:	f7fd f8dd 	bl	800e838 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801167e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011680:	3321      	adds	r3, #33	; 0x21
 8011682:	222e      	movs	r2, #46	; 0x2e
 8011684:	701a      	strb	r2, [r3, #0]
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	2b03      	cmp	r3, #3
 8011690:	d106      	bne.n	80116a0 <f_mkdir+0x15c>
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011698:	429a      	cmp	r2, r3
 801169a:	d101      	bne.n	80116a0 <f_mkdir+0x15c>
 801169c:	2300      	movs	r3, #0
 801169e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80116a0:	68b8      	ldr	r0, [r7, #8]
 80116a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a4:	3320      	adds	r3, #32
 80116a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116a8:	4619      	mov	r1, r3
 80116aa:	f7fe f891 	bl	800f7d0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	895b      	ldrh	r3, [r3, #10]
 80116b2:	653b      	str	r3, [r7, #80]	; 0x50
 80116b4:	e01c      	b.n	80116f0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80116b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116b8:	1c5a      	adds	r2, r3, #1
 80116ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80116bc:	68ba      	ldr	r2, [r7, #8]
 80116be:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2201      	movs	r2, #1
 80116c4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fd fa9f 	bl	800ec0c <sync_window>
 80116ce:	4603      	mov	r3, r0
 80116d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80116d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d10d      	bne.n	80116f8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	899b      	ldrh	r3, [r3, #12]
 80116e0:	461a      	mov	r2, r3
 80116e2:	2100      	movs	r1, #0
 80116e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80116e6:	f7fd f8c8 	bl	800e87a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80116ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116ec:	3b01      	subs	r3, #1
 80116ee:	653b      	str	r3, [r7, #80]	; 0x50
 80116f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1df      	bne.n	80116b6 <f_mkdir+0x172>
 80116f6:	e000      	b.n	80116fa <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80116f8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80116fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011702:	f107 030c 	add.w	r3, r7, #12
 8011706:	4618      	mov	r0, r3
 8011708:	f7fe f934 	bl	800f974 <dir_register>
 801170c:	4603      	mov	r3, r0
 801170e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011716:	2b00      	cmp	r3, #0
 8011718:	d120      	bne.n	801175c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801171e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011720:	3316      	adds	r3, #22
 8011722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011724:	4618      	mov	r0, r3
 8011726:	f7fd f85b 	bl	800e7e0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801172e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011730:	4618      	mov	r0, r3
 8011732:	f7fe f84d 	bl	800f7d0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011738:	330b      	adds	r3, #11
 801173a:	2210      	movs	r2, #16
 801173c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	2201      	movs	r2, #1
 8011742:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10e      	bne.n	801176a <f_mkdir+0x226>
					res = sync_fs(fs);
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	4618      	mov	r0, r3
 8011750:	f7fd face 	bl	800ecf0 <sync_fs>
 8011754:	4603      	mov	r3, r0
 8011756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801175a:	e006      	b.n	801176a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801175c:	f107 030c 	add.w	r3, r7, #12
 8011760:	2200      	movs	r2, #0
 8011762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011764:	4618      	mov	r0, r3
 8011766:	f7fd fd39 	bl	800f1dc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801176a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801176e:	4618      	mov	r0, r3
 8011770:	3758      	adds	r7, #88	; 0x58
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	274a0000 	.word	0x274a0000

0801177c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b088      	sub	sp, #32
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011788:	2300      	movs	r3, #0
 801178a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011790:	e017      	b.n	80117c2 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011792:	f107 0310 	add.w	r3, r7, #16
 8011796:	f107 0114 	add.w	r1, r7, #20
 801179a:	2201      	movs	r2, #1
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff f803 	bl	80107a8 <f_read>
		if (rc != 1) break;
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d112      	bne.n	80117ce <f_gets+0x52>
		c = s[0];
 80117a8:	7d3b      	ldrb	r3, [r7, #20]
 80117aa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	1c5a      	adds	r2, r3, #1
 80117b0:	61ba      	str	r2, [r7, #24]
 80117b2:	7dfa      	ldrb	r2, [r7, #23]
 80117b4:	701a      	strb	r2, [r3, #0]
		n++;
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	3301      	adds	r3, #1
 80117ba:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	2b0a      	cmp	r3, #10
 80117c0:	d007      	beq.n	80117d2 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	3b01      	subs	r3, #1
 80117c6:	69fa      	ldr	r2, [r7, #28]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	dbe2      	blt.n	8011792 <f_gets+0x16>
 80117cc:	e002      	b.n	80117d4 <f_gets+0x58>
		if (rc != 1) break;
 80117ce:	bf00      	nop
 80117d0:	e000      	b.n	80117d4 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80117d2:	bf00      	nop
	}
	*p = 0;
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	2200      	movs	r2, #0
 80117d8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d001      	beq.n	80117e4 <f_gets+0x68>
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	e000      	b.n	80117e6 <f_gets+0x6a>
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3720      	adds	r7, #32
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
	...

080117f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b087      	sub	sp, #28
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	4613      	mov	r3, r2
 80117fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117fe:	2301      	movs	r3, #1
 8011800:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011806:	4b1f      	ldr	r3, [pc, #124]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011808:	7a5b      	ldrb	r3, [r3, #9]
 801180a:	b2db      	uxtb	r3, r3
 801180c:	2b00      	cmp	r3, #0
 801180e:	d131      	bne.n	8011874 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011810:	4b1c      	ldr	r3, [pc, #112]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011812:	7a5b      	ldrb	r3, [r3, #9]
 8011814:	b2db      	uxtb	r3, r3
 8011816:	461a      	mov	r2, r3
 8011818:	4b1a      	ldr	r3, [pc, #104]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 801181a:	2100      	movs	r1, #0
 801181c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801181e:	4b19      	ldr	r3, [pc, #100]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011820:	7a5b      	ldrb	r3, [r3, #9]
 8011822:	b2db      	uxtb	r3, r3
 8011824:	4a17      	ldr	r2, [pc, #92]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	4413      	add	r3, r2
 801182a:	68fa      	ldr	r2, [r7, #12]
 801182c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801182e:	4b15      	ldr	r3, [pc, #84]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011830:	7a5b      	ldrb	r3, [r3, #9]
 8011832:	b2db      	uxtb	r3, r3
 8011834:	461a      	mov	r2, r3
 8011836:	4b13      	ldr	r3, [pc, #76]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011838:	4413      	add	r3, r2
 801183a:	79fa      	ldrb	r2, [r7, #7]
 801183c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801183e:	4b11      	ldr	r3, [pc, #68]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 8011840:	7a5b      	ldrb	r3, [r3, #9]
 8011842:	b2db      	uxtb	r3, r3
 8011844:	1c5a      	adds	r2, r3, #1
 8011846:	b2d1      	uxtb	r1, r2
 8011848:	4a0e      	ldr	r2, [pc, #56]	; (8011884 <FATFS_LinkDriverEx+0x94>)
 801184a:	7251      	strb	r1, [r2, #9]
 801184c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801184e:	7dbb      	ldrb	r3, [r7, #22]
 8011850:	3330      	adds	r3, #48	; 0x30
 8011852:	b2da      	uxtb	r2, r3
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	3301      	adds	r3, #1
 801185c:	223a      	movs	r2, #58	; 0x3a
 801185e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	3302      	adds	r3, #2
 8011864:	222f      	movs	r2, #47	; 0x2f
 8011866:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	3303      	adds	r3, #3
 801186c:	2200      	movs	r2, #0
 801186e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011870:	2300      	movs	r3, #0
 8011872:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011874:	7dfb      	ldrb	r3, [r7, #23]
}
 8011876:	4618      	mov	r0, r3
 8011878:	371c      	adds	r7, #28
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	2002b14c 	.word	0x2002b14c

08011888 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011892:	2200      	movs	r2, #0
 8011894:	6839      	ldr	r1, [r7, #0]
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7ff ffaa 	bl	80117f0 <FATFS_LinkDriverEx>
 801189c:	4603      	mov	r3, r0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3708      	adds	r7, #8
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}

080118a6 <__cxa_guard_acquire>:
 80118a6:	6803      	ldr	r3, [r0, #0]
 80118a8:	07db      	lsls	r3, r3, #31
 80118aa:	d406      	bmi.n	80118ba <__cxa_guard_acquire+0x14>
 80118ac:	7843      	ldrb	r3, [r0, #1]
 80118ae:	b103      	cbz	r3, 80118b2 <__cxa_guard_acquire+0xc>
 80118b0:	deff      	udf	#255	; 0xff
 80118b2:	2301      	movs	r3, #1
 80118b4:	7043      	strb	r3, [r0, #1]
 80118b6:	4618      	mov	r0, r3
 80118b8:	4770      	bx	lr
 80118ba:	2000      	movs	r0, #0
 80118bc:	4770      	bx	lr

080118be <__cxa_guard_release>:
 80118be:	2301      	movs	r3, #1
 80118c0:	6003      	str	r3, [r0, #0]
 80118c2:	4770      	bx	lr
 80118c4:	0000      	movs	r0, r0
	...

080118c8 <cos>:
 80118c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118ca:	ec51 0b10 	vmov	r0, r1, d0
 80118ce:	4a1e      	ldr	r2, [pc, #120]	; (8011948 <cos+0x80>)
 80118d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118d4:	4293      	cmp	r3, r2
 80118d6:	dc06      	bgt.n	80118e6 <cos+0x1e>
 80118d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011940 <cos+0x78>
 80118dc:	f000 fa74 	bl	8011dc8 <__kernel_cos>
 80118e0:	ec51 0b10 	vmov	r0, r1, d0
 80118e4:	e007      	b.n	80118f6 <cos+0x2e>
 80118e6:	4a19      	ldr	r2, [pc, #100]	; (801194c <cos+0x84>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	dd09      	ble.n	8011900 <cos+0x38>
 80118ec:	ee10 2a10 	vmov	r2, s0
 80118f0:	460b      	mov	r3, r1
 80118f2:	f7ee fce1 	bl	80002b8 <__aeabi_dsub>
 80118f6:	ec41 0b10 	vmov	d0, r0, r1
 80118fa:	b005      	add	sp, #20
 80118fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011900:	4668      	mov	r0, sp
 8011902:	f000 f86d 	bl	80119e0 <__ieee754_rem_pio2>
 8011906:	f000 0003 	and.w	r0, r0, #3
 801190a:	2801      	cmp	r0, #1
 801190c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011910:	ed9d 0b00 	vldr	d0, [sp]
 8011914:	d007      	beq.n	8011926 <cos+0x5e>
 8011916:	2802      	cmp	r0, #2
 8011918:	d00e      	beq.n	8011938 <cos+0x70>
 801191a:	2800      	cmp	r0, #0
 801191c:	d0de      	beq.n	80118dc <cos+0x14>
 801191e:	2001      	movs	r0, #1
 8011920:	f000 fe5a 	bl	80125d8 <__kernel_sin>
 8011924:	e7dc      	b.n	80118e0 <cos+0x18>
 8011926:	f000 fe57 	bl	80125d8 <__kernel_sin>
 801192a:	ec53 2b10 	vmov	r2, r3, d0
 801192e:	ee10 0a10 	vmov	r0, s0
 8011932:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011936:	e7de      	b.n	80118f6 <cos+0x2e>
 8011938:	f000 fa46 	bl	8011dc8 <__kernel_cos>
 801193c:	e7f5      	b.n	801192a <cos+0x62>
 801193e:	bf00      	nop
	...
 8011948:	3fe921fb 	.word	0x3fe921fb
 801194c:	7fefffff 	.word	0x7fefffff

08011950 <sin>:
 8011950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011952:	ec51 0b10 	vmov	r0, r1, d0
 8011956:	4a20      	ldr	r2, [pc, #128]	; (80119d8 <sin+0x88>)
 8011958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801195c:	4293      	cmp	r3, r2
 801195e:	dc07      	bgt.n	8011970 <sin+0x20>
 8011960:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80119d0 <sin+0x80>
 8011964:	2000      	movs	r0, #0
 8011966:	f000 fe37 	bl	80125d8 <__kernel_sin>
 801196a:	ec51 0b10 	vmov	r0, r1, d0
 801196e:	e007      	b.n	8011980 <sin+0x30>
 8011970:	4a1a      	ldr	r2, [pc, #104]	; (80119dc <sin+0x8c>)
 8011972:	4293      	cmp	r3, r2
 8011974:	dd09      	ble.n	801198a <sin+0x3a>
 8011976:	ee10 2a10 	vmov	r2, s0
 801197a:	460b      	mov	r3, r1
 801197c:	f7ee fc9c 	bl	80002b8 <__aeabi_dsub>
 8011980:	ec41 0b10 	vmov	d0, r0, r1
 8011984:	b005      	add	sp, #20
 8011986:	f85d fb04 	ldr.w	pc, [sp], #4
 801198a:	4668      	mov	r0, sp
 801198c:	f000 f828 	bl	80119e0 <__ieee754_rem_pio2>
 8011990:	f000 0003 	and.w	r0, r0, #3
 8011994:	2801      	cmp	r0, #1
 8011996:	ed9d 1b02 	vldr	d1, [sp, #8]
 801199a:	ed9d 0b00 	vldr	d0, [sp]
 801199e:	d004      	beq.n	80119aa <sin+0x5a>
 80119a0:	2802      	cmp	r0, #2
 80119a2:	d005      	beq.n	80119b0 <sin+0x60>
 80119a4:	b970      	cbnz	r0, 80119c4 <sin+0x74>
 80119a6:	2001      	movs	r0, #1
 80119a8:	e7dd      	b.n	8011966 <sin+0x16>
 80119aa:	f000 fa0d 	bl	8011dc8 <__kernel_cos>
 80119ae:	e7dc      	b.n	801196a <sin+0x1a>
 80119b0:	2001      	movs	r0, #1
 80119b2:	f000 fe11 	bl	80125d8 <__kernel_sin>
 80119b6:	ec53 2b10 	vmov	r2, r3, d0
 80119ba:	ee10 0a10 	vmov	r0, s0
 80119be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80119c2:	e7dd      	b.n	8011980 <sin+0x30>
 80119c4:	f000 fa00 	bl	8011dc8 <__kernel_cos>
 80119c8:	e7f5      	b.n	80119b6 <sin+0x66>
 80119ca:	bf00      	nop
 80119cc:	f3af 8000 	nop.w
	...
 80119d8:	3fe921fb 	.word	0x3fe921fb
 80119dc:	7fefffff 	.word	0x7fefffff

080119e0 <__ieee754_rem_pio2>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	ec57 6b10 	vmov	r6, r7, d0
 80119e8:	4bc3      	ldr	r3, [pc, #780]	; (8011cf8 <__ieee754_rem_pio2+0x318>)
 80119ea:	b08d      	sub	sp, #52	; 0x34
 80119ec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80119f0:	4598      	cmp	r8, r3
 80119f2:	4604      	mov	r4, r0
 80119f4:	9704      	str	r7, [sp, #16]
 80119f6:	dc07      	bgt.n	8011a08 <__ieee754_rem_pio2+0x28>
 80119f8:	2200      	movs	r2, #0
 80119fa:	2300      	movs	r3, #0
 80119fc:	ed84 0b00 	vstr	d0, [r4]
 8011a00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011a04:	2500      	movs	r5, #0
 8011a06:	e027      	b.n	8011a58 <__ieee754_rem_pio2+0x78>
 8011a08:	4bbc      	ldr	r3, [pc, #752]	; (8011cfc <__ieee754_rem_pio2+0x31c>)
 8011a0a:	4598      	cmp	r8, r3
 8011a0c:	dc75      	bgt.n	8011afa <__ieee754_rem_pio2+0x11a>
 8011a0e:	9b04      	ldr	r3, [sp, #16]
 8011a10:	4dbb      	ldr	r5, [pc, #748]	; (8011d00 <__ieee754_rem_pio2+0x320>)
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	ee10 0a10 	vmov	r0, s0
 8011a18:	a3a9      	add	r3, pc, #676	; (adr r3, 8011cc0 <__ieee754_rem_pio2+0x2e0>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	4639      	mov	r1, r7
 8011a20:	dd36      	ble.n	8011a90 <__ieee754_rem_pio2+0xb0>
 8011a22:	f7ee fc49 	bl	80002b8 <__aeabi_dsub>
 8011a26:	45a8      	cmp	r8, r5
 8011a28:	4606      	mov	r6, r0
 8011a2a:	460f      	mov	r7, r1
 8011a2c:	d018      	beq.n	8011a60 <__ieee754_rem_pio2+0x80>
 8011a2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011cc8 <__ieee754_rem_pio2+0x2e8>)
 8011a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a34:	f7ee fc40 	bl	80002b8 <__aeabi_dsub>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	e9c4 2300 	strd	r2, r3, [r4]
 8011a40:	4630      	mov	r0, r6
 8011a42:	4639      	mov	r1, r7
 8011a44:	f7ee fc38 	bl	80002b8 <__aeabi_dsub>
 8011a48:	a39f      	add	r3, pc, #636	; (adr r3, 8011cc8 <__ieee754_rem_pio2+0x2e8>)
 8011a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4e:	f7ee fc33 	bl	80002b8 <__aeabi_dsub>
 8011a52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a56:	2501      	movs	r5, #1
 8011a58:	4628      	mov	r0, r5
 8011a5a:	b00d      	add	sp, #52	; 0x34
 8011a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a60:	a39b      	add	r3, pc, #620	; (adr r3, 8011cd0 <__ieee754_rem_pio2+0x2f0>)
 8011a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a66:	f7ee fc27 	bl	80002b8 <__aeabi_dsub>
 8011a6a:	a39b      	add	r3, pc, #620	; (adr r3, 8011cd8 <__ieee754_rem_pio2+0x2f8>)
 8011a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a70:	4606      	mov	r6, r0
 8011a72:	460f      	mov	r7, r1
 8011a74:	f7ee fc20 	bl	80002b8 <__aeabi_dsub>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8011a80:	4630      	mov	r0, r6
 8011a82:	4639      	mov	r1, r7
 8011a84:	f7ee fc18 	bl	80002b8 <__aeabi_dsub>
 8011a88:	a393      	add	r3, pc, #588	; (adr r3, 8011cd8 <__ieee754_rem_pio2+0x2f8>)
 8011a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8e:	e7de      	b.n	8011a4e <__ieee754_rem_pio2+0x6e>
 8011a90:	f7ee fc14 	bl	80002bc <__adddf3>
 8011a94:	45a8      	cmp	r8, r5
 8011a96:	4606      	mov	r6, r0
 8011a98:	460f      	mov	r7, r1
 8011a9a:	d016      	beq.n	8011aca <__ieee754_rem_pio2+0xea>
 8011a9c:	a38a      	add	r3, pc, #552	; (adr r3, 8011cc8 <__ieee754_rem_pio2+0x2e8>)
 8011a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa2:	f7ee fc0b 	bl	80002bc <__adddf3>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	e9c4 2300 	strd	r2, r3, [r4]
 8011aae:	4630      	mov	r0, r6
 8011ab0:	4639      	mov	r1, r7
 8011ab2:	f7ee fc01 	bl	80002b8 <__aeabi_dsub>
 8011ab6:	a384      	add	r3, pc, #528	; (adr r3, 8011cc8 <__ieee754_rem_pio2+0x2e8>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f7ee fbfe 	bl	80002bc <__adddf3>
 8011ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8011ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011ac8:	e7c6      	b.n	8011a58 <__ieee754_rem_pio2+0x78>
 8011aca:	a381      	add	r3, pc, #516	; (adr r3, 8011cd0 <__ieee754_rem_pio2+0x2f0>)
 8011acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad0:	f7ee fbf4 	bl	80002bc <__adddf3>
 8011ad4:	a380      	add	r3, pc, #512	; (adr r3, 8011cd8 <__ieee754_rem_pio2+0x2f8>)
 8011ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ada:	4606      	mov	r6, r0
 8011adc:	460f      	mov	r7, r1
 8011ade:	f7ee fbed 	bl	80002bc <__adddf3>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	e9c4 2300 	strd	r2, r3, [r4]
 8011aea:	4630      	mov	r0, r6
 8011aec:	4639      	mov	r1, r7
 8011aee:	f7ee fbe3 	bl	80002b8 <__aeabi_dsub>
 8011af2:	a379      	add	r3, pc, #484	; (adr r3, 8011cd8 <__ieee754_rem_pio2+0x2f8>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	e7e0      	b.n	8011abc <__ieee754_rem_pio2+0xdc>
 8011afa:	4b82      	ldr	r3, [pc, #520]	; (8011d04 <__ieee754_rem_pio2+0x324>)
 8011afc:	4598      	cmp	r8, r3
 8011afe:	f300 80d0 	bgt.w	8011ca2 <__ieee754_rem_pio2+0x2c2>
 8011b02:	f000 fe23 	bl	801274c <fabs>
 8011b06:	ec57 6b10 	vmov	r6, r7, d0
 8011b0a:	ee10 0a10 	vmov	r0, s0
 8011b0e:	a374      	add	r3, pc, #464	; (adr r3, 8011ce0 <__ieee754_rem_pio2+0x300>)
 8011b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b14:	4639      	mov	r1, r7
 8011b16:	f7ee fd87 	bl	8000628 <__aeabi_dmul>
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	4b7a      	ldr	r3, [pc, #488]	; (8011d08 <__ieee754_rem_pio2+0x328>)
 8011b1e:	f7ee fbcd 	bl	80002bc <__adddf3>
 8011b22:	f7ef f831 	bl	8000b88 <__aeabi_d2iz>
 8011b26:	4605      	mov	r5, r0
 8011b28:	f7ee fd14 	bl	8000554 <__aeabi_i2d>
 8011b2c:	a364      	add	r3, pc, #400	; (adr r3, 8011cc0 <__ieee754_rem_pio2+0x2e0>)
 8011b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b36:	f7ee fd77 	bl	8000628 <__aeabi_dmul>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	4630      	mov	r0, r6
 8011b40:	4639      	mov	r1, r7
 8011b42:	f7ee fbb9 	bl	80002b8 <__aeabi_dsub>
 8011b46:	a360      	add	r3, pc, #384	; (adr r3, 8011cc8 <__ieee754_rem_pio2+0x2e8>)
 8011b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4c:	4682      	mov	sl, r0
 8011b4e:	468b      	mov	fp, r1
 8011b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b54:	f7ee fd68 	bl	8000628 <__aeabi_dmul>
 8011b58:	2d1f      	cmp	r5, #31
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	460f      	mov	r7, r1
 8011b5e:	dc0c      	bgt.n	8011b7a <__ieee754_rem_pio2+0x19a>
 8011b60:	1e6a      	subs	r2, r5, #1
 8011b62:	4b6a      	ldr	r3, [pc, #424]	; (8011d0c <__ieee754_rem_pio2+0x32c>)
 8011b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b68:	4543      	cmp	r3, r8
 8011b6a:	d006      	beq.n	8011b7a <__ieee754_rem_pio2+0x19a>
 8011b6c:	4632      	mov	r2, r6
 8011b6e:	463b      	mov	r3, r7
 8011b70:	4650      	mov	r0, sl
 8011b72:	4659      	mov	r1, fp
 8011b74:	f7ee fba0 	bl	80002b8 <__aeabi_dsub>
 8011b78:	e00e      	b.n	8011b98 <__ieee754_rem_pio2+0x1b8>
 8011b7a:	4632      	mov	r2, r6
 8011b7c:	463b      	mov	r3, r7
 8011b7e:	4650      	mov	r0, sl
 8011b80:	4659      	mov	r1, fp
 8011b82:	f7ee fb99 	bl	80002b8 <__aeabi_dsub>
 8011b86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011b8a:	9305      	str	r3, [sp, #20]
 8011b8c:	9a05      	ldr	r2, [sp, #20]
 8011b8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	2b10      	cmp	r3, #16
 8011b96:	dc02      	bgt.n	8011b9e <__ieee754_rem_pio2+0x1be>
 8011b98:	e9c4 0100 	strd	r0, r1, [r4]
 8011b9c:	e039      	b.n	8011c12 <__ieee754_rem_pio2+0x232>
 8011b9e:	a34c      	add	r3, pc, #304	; (adr r3, 8011cd0 <__ieee754_rem_pio2+0x2f0>)
 8011ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ba8:	f7ee fd3e 	bl	8000628 <__aeabi_dmul>
 8011bac:	4606      	mov	r6, r0
 8011bae:	460f      	mov	r7, r1
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	4650      	mov	r0, sl
 8011bb6:	4659      	mov	r1, fp
 8011bb8:	f7ee fb7e 	bl	80002b8 <__aeabi_dsub>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	4680      	mov	r8, r0
 8011bc2:	4689      	mov	r9, r1
 8011bc4:	4650      	mov	r0, sl
 8011bc6:	4659      	mov	r1, fp
 8011bc8:	f7ee fb76 	bl	80002b8 <__aeabi_dsub>
 8011bcc:	4632      	mov	r2, r6
 8011bce:	463b      	mov	r3, r7
 8011bd0:	f7ee fb72 	bl	80002b8 <__aeabi_dsub>
 8011bd4:	a340      	add	r3, pc, #256	; (adr r3, 8011cd8 <__ieee754_rem_pio2+0x2f8>)
 8011bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bda:	4606      	mov	r6, r0
 8011bdc:	460f      	mov	r7, r1
 8011bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011be2:	f7ee fd21 	bl	8000628 <__aeabi_dmul>
 8011be6:	4632      	mov	r2, r6
 8011be8:	463b      	mov	r3, r7
 8011bea:	f7ee fb65 	bl	80002b8 <__aeabi_dsub>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	460f      	mov	r7, r1
 8011bf6:	4640      	mov	r0, r8
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	f7ee fb5d 	bl	80002b8 <__aeabi_dsub>
 8011bfe:	9a05      	ldr	r2, [sp, #20]
 8011c00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	2b31      	cmp	r3, #49	; 0x31
 8011c08:	dc20      	bgt.n	8011c4c <__ieee754_rem_pio2+0x26c>
 8011c0a:	e9c4 0100 	strd	r0, r1, [r4]
 8011c0e:	46c2      	mov	sl, r8
 8011c10:	46cb      	mov	fp, r9
 8011c12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011c16:	4650      	mov	r0, sl
 8011c18:	4642      	mov	r2, r8
 8011c1a:	464b      	mov	r3, r9
 8011c1c:	4659      	mov	r1, fp
 8011c1e:	f7ee fb4b 	bl	80002b8 <__aeabi_dsub>
 8011c22:	463b      	mov	r3, r7
 8011c24:	4632      	mov	r2, r6
 8011c26:	f7ee fb47 	bl	80002b8 <__aeabi_dsub>
 8011c2a:	9b04      	ldr	r3, [sp, #16]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c32:	f6bf af11 	bge.w	8011a58 <__ieee754_rem_pio2+0x78>
 8011c36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011c3a:	6063      	str	r3, [r4, #4]
 8011c3c:	f8c4 8000 	str.w	r8, [r4]
 8011c40:	60a0      	str	r0, [r4, #8]
 8011c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c46:	60e3      	str	r3, [r4, #12]
 8011c48:	426d      	negs	r5, r5
 8011c4a:	e705      	b.n	8011a58 <__ieee754_rem_pio2+0x78>
 8011c4c:	a326      	add	r3, pc, #152	; (adr r3, 8011ce8 <__ieee754_rem_pio2+0x308>)
 8011c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c56:	f7ee fce7 	bl	8000628 <__aeabi_dmul>
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	460f      	mov	r7, r1
 8011c5e:	4602      	mov	r2, r0
 8011c60:	460b      	mov	r3, r1
 8011c62:	4640      	mov	r0, r8
 8011c64:	4649      	mov	r1, r9
 8011c66:	f7ee fb27 	bl	80002b8 <__aeabi_dsub>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	4682      	mov	sl, r0
 8011c70:	468b      	mov	fp, r1
 8011c72:	4640      	mov	r0, r8
 8011c74:	4649      	mov	r1, r9
 8011c76:	f7ee fb1f 	bl	80002b8 <__aeabi_dsub>
 8011c7a:	4632      	mov	r2, r6
 8011c7c:	463b      	mov	r3, r7
 8011c7e:	f7ee fb1b 	bl	80002b8 <__aeabi_dsub>
 8011c82:	a31b      	add	r3, pc, #108	; (adr r3, 8011cf0 <__ieee754_rem_pio2+0x310>)
 8011c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c88:	4606      	mov	r6, r0
 8011c8a:	460f      	mov	r7, r1
 8011c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c90:	f7ee fcca 	bl	8000628 <__aeabi_dmul>
 8011c94:	4632      	mov	r2, r6
 8011c96:	463b      	mov	r3, r7
 8011c98:	f7ee fb0e 	bl	80002b8 <__aeabi_dsub>
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	460f      	mov	r7, r1
 8011ca0:	e764      	b.n	8011b6c <__ieee754_rem_pio2+0x18c>
 8011ca2:	4b1b      	ldr	r3, [pc, #108]	; (8011d10 <__ieee754_rem_pio2+0x330>)
 8011ca4:	4598      	cmp	r8, r3
 8011ca6:	dd35      	ble.n	8011d14 <__ieee754_rem_pio2+0x334>
 8011ca8:	ee10 2a10 	vmov	r2, s0
 8011cac:	463b      	mov	r3, r7
 8011cae:	4630      	mov	r0, r6
 8011cb0:	4639      	mov	r1, r7
 8011cb2:	f7ee fb01 	bl	80002b8 <__aeabi_dsub>
 8011cb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011cba:	e9c4 0100 	strd	r0, r1, [r4]
 8011cbe:	e6a1      	b.n	8011a04 <__ieee754_rem_pio2+0x24>
 8011cc0:	54400000 	.word	0x54400000
 8011cc4:	3ff921fb 	.word	0x3ff921fb
 8011cc8:	1a626331 	.word	0x1a626331
 8011ccc:	3dd0b461 	.word	0x3dd0b461
 8011cd0:	1a600000 	.word	0x1a600000
 8011cd4:	3dd0b461 	.word	0x3dd0b461
 8011cd8:	2e037073 	.word	0x2e037073
 8011cdc:	3ba3198a 	.word	0x3ba3198a
 8011ce0:	6dc9c883 	.word	0x6dc9c883
 8011ce4:	3fe45f30 	.word	0x3fe45f30
 8011ce8:	2e000000 	.word	0x2e000000
 8011cec:	3ba3198a 	.word	0x3ba3198a
 8011cf0:	252049c1 	.word	0x252049c1
 8011cf4:	397b839a 	.word	0x397b839a
 8011cf8:	3fe921fb 	.word	0x3fe921fb
 8011cfc:	4002d97b 	.word	0x4002d97b
 8011d00:	3ff921fb 	.word	0x3ff921fb
 8011d04:	413921fb 	.word	0x413921fb
 8011d08:	3fe00000 	.word	0x3fe00000
 8011d0c:	08017cb8 	.word	0x08017cb8
 8011d10:	7fefffff 	.word	0x7fefffff
 8011d14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011d18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011d1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011d20:	4630      	mov	r0, r6
 8011d22:	460f      	mov	r7, r1
 8011d24:	f7ee ff30 	bl	8000b88 <__aeabi_d2iz>
 8011d28:	f7ee fc14 	bl	8000554 <__aeabi_i2d>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	460b      	mov	r3, r1
 8011d30:	4630      	mov	r0, r6
 8011d32:	4639      	mov	r1, r7
 8011d34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011d38:	f7ee fabe 	bl	80002b8 <__aeabi_dsub>
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	4b1f      	ldr	r3, [pc, #124]	; (8011dbc <__ieee754_rem_pio2+0x3dc>)
 8011d40:	f7ee fc72 	bl	8000628 <__aeabi_dmul>
 8011d44:	460f      	mov	r7, r1
 8011d46:	4606      	mov	r6, r0
 8011d48:	f7ee ff1e 	bl	8000b88 <__aeabi_d2iz>
 8011d4c:	f7ee fc02 	bl	8000554 <__aeabi_i2d>
 8011d50:	4602      	mov	r2, r0
 8011d52:	460b      	mov	r3, r1
 8011d54:	4630      	mov	r0, r6
 8011d56:	4639      	mov	r1, r7
 8011d58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011d5c:	f7ee faac 	bl	80002b8 <__aeabi_dsub>
 8011d60:	2200      	movs	r2, #0
 8011d62:	4b16      	ldr	r3, [pc, #88]	; (8011dbc <__ieee754_rem_pio2+0x3dc>)
 8011d64:	f7ee fc60 	bl	8000628 <__aeabi_dmul>
 8011d68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011d6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011d70:	f04f 0803 	mov.w	r8, #3
 8011d74:	2600      	movs	r6, #0
 8011d76:	2700      	movs	r7, #0
 8011d78:	4632      	mov	r2, r6
 8011d7a:	463b      	mov	r3, r7
 8011d7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8011d84:	f7ee feb8 	bl	8000af8 <__aeabi_dcmpeq>
 8011d88:	b9b0      	cbnz	r0, 8011db8 <__ieee754_rem_pio2+0x3d8>
 8011d8a:	4b0d      	ldr	r3, [pc, #52]	; (8011dc0 <__ieee754_rem_pio2+0x3e0>)
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	2302      	movs	r3, #2
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	462a      	mov	r2, r5
 8011d94:	4643      	mov	r3, r8
 8011d96:	4621      	mov	r1, r4
 8011d98:	a806      	add	r0, sp, #24
 8011d9a:	f000 f8dd 	bl	8011f58 <__kernel_rem_pio2>
 8011d9e:	9b04      	ldr	r3, [sp, #16]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	4605      	mov	r5, r0
 8011da4:	f6bf ae58 	bge.w	8011a58 <__ieee754_rem_pio2+0x78>
 8011da8:	6863      	ldr	r3, [r4, #4]
 8011daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011dae:	6063      	str	r3, [r4, #4]
 8011db0:	68e3      	ldr	r3, [r4, #12]
 8011db2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011db6:	e746      	b.n	8011c46 <__ieee754_rem_pio2+0x266>
 8011db8:	46d0      	mov	r8, sl
 8011dba:	e7dd      	b.n	8011d78 <__ieee754_rem_pio2+0x398>
 8011dbc:	41700000 	.word	0x41700000
 8011dc0:	08017d38 	.word	0x08017d38
 8011dc4:	00000000 	.word	0x00000000

08011dc8 <__kernel_cos>:
 8011dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	ec59 8b10 	vmov	r8, r9, d0
 8011dd0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011dd4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011dd8:	ed2d 8b02 	vpush	{d8}
 8011ddc:	eeb0 8a41 	vmov.f32	s16, s2
 8011de0:	eef0 8a61 	vmov.f32	s17, s3
 8011de4:	da07      	bge.n	8011df6 <__kernel_cos+0x2e>
 8011de6:	ee10 0a10 	vmov	r0, s0
 8011dea:	4649      	mov	r1, r9
 8011dec:	f7ee fecc 	bl	8000b88 <__aeabi_d2iz>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	f000 8089 	beq.w	8011f08 <__kernel_cos+0x140>
 8011df6:	4642      	mov	r2, r8
 8011df8:	464b      	mov	r3, r9
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	4649      	mov	r1, r9
 8011dfe:	f7ee fc13 	bl	8000628 <__aeabi_dmul>
 8011e02:	2200      	movs	r2, #0
 8011e04:	4b4e      	ldr	r3, [pc, #312]	; (8011f40 <__kernel_cos+0x178>)
 8011e06:	4604      	mov	r4, r0
 8011e08:	460d      	mov	r5, r1
 8011e0a:	f7ee fc0d 	bl	8000628 <__aeabi_dmul>
 8011e0e:	a340      	add	r3, pc, #256	; (adr r3, 8011f10 <__kernel_cos+0x148>)
 8011e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e14:	4682      	mov	sl, r0
 8011e16:	468b      	mov	fp, r1
 8011e18:	4620      	mov	r0, r4
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	f7ee fc04 	bl	8000628 <__aeabi_dmul>
 8011e20:	a33d      	add	r3, pc, #244	; (adr r3, 8011f18 <__kernel_cos+0x150>)
 8011e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e26:	f7ee fa49 	bl	80002bc <__adddf3>
 8011e2a:	4622      	mov	r2, r4
 8011e2c:	462b      	mov	r3, r5
 8011e2e:	f7ee fbfb 	bl	8000628 <__aeabi_dmul>
 8011e32:	a33b      	add	r3, pc, #236	; (adr r3, 8011f20 <__kernel_cos+0x158>)
 8011e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e38:	f7ee fa3e 	bl	80002b8 <__aeabi_dsub>
 8011e3c:	4622      	mov	r2, r4
 8011e3e:	462b      	mov	r3, r5
 8011e40:	f7ee fbf2 	bl	8000628 <__aeabi_dmul>
 8011e44:	a338      	add	r3, pc, #224	; (adr r3, 8011f28 <__kernel_cos+0x160>)
 8011e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4a:	f7ee fa37 	bl	80002bc <__adddf3>
 8011e4e:	4622      	mov	r2, r4
 8011e50:	462b      	mov	r3, r5
 8011e52:	f7ee fbe9 	bl	8000628 <__aeabi_dmul>
 8011e56:	a336      	add	r3, pc, #216	; (adr r3, 8011f30 <__kernel_cos+0x168>)
 8011e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5c:	f7ee fa2c 	bl	80002b8 <__aeabi_dsub>
 8011e60:	4622      	mov	r2, r4
 8011e62:	462b      	mov	r3, r5
 8011e64:	f7ee fbe0 	bl	8000628 <__aeabi_dmul>
 8011e68:	a333      	add	r3, pc, #204	; (adr r3, 8011f38 <__kernel_cos+0x170>)
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	f7ee fa25 	bl	80002bc <__adddf3>
 8011e72:	4622      	mov	r2, r4
 8011e74:	462b      	mov	r3, r5
 8011e76:	f7ee fbd7 	bl	8000628 <__aeabi_dmul>
 8011e7a:	4622      	mov	r2, r4
 8011e7c:	462b      	mov	r3, r5
 8011e7e:	f7ee fbd3 	bl	8000628 <__aeabi_dmul>
 8011e82:	ec53 2b18 	vmov	r2, r3, d8
 8011e86:	4604      	mov	r4, r0
 8011e88:	460d      	mov	r5, r1
 8011e8a:	4640      	mov	r0, r8
 8011e8c:	4649      	mov	r1, r9
 8011e8e:	f7ee fbcb 	bl	8000628 <__aeabi_dmul>
 8011e92:	460b      	mov	r3, r1
 8011e94:	4602      	mov	r2, r0
 8011e96:	4629      	mov	r1, r5
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f7ee fa0d 	bl	80002b8 <__aeabi_dsub>
 8011e9e:	4b29      	ldr	r3, [pc, #164]	; (8011f44 <__kernel_cos+0x17c>)
 8011ea0:	429e      	cmp	r6, r3
 8011ea2:	4680      	mov	r8, r0
 8011ea4:	4689      	mov	r9, r1
 8011ea6:	dc11      	bgt.n	8011ecc <__kernel_cos+0x104>
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	460b      	mov	r3, r1
 8011eac:	4650      	mov	r0, sl
 8011eae:	4659      	mov	r1, fp
 8011eb0:	f7ee fa02 	bl	80002b8 <__aeabi_dsub>
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4924      	ldr	r1, [pc, #144]	; (8011f48 <__kernel_cos+0x180>)
 8011eb8:	4602      	mov	r2, r0
 8011eba:	2000      	movs	r0, #0
 8011ebc:	f7ee f9fc 	bl	80002b8 <__aeabi_dsub>
 8011ec0:	ecbd 8b02 	vpop	{d8}
 8011ec4:	ec41 0b10 	vmov	d0, r0, r1
 8011ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ecc:	4b1f      	ldr	r3, [pc, #124]	; (8011f4c <__kernel_cos+0x184>)
 8011ece:	491e      	ldr	r1, [pc, #120]	; (8011f48 <__kernel_cos+0x180>)
 8011ed0:	429e      	cmp	r6, r3
 8011ed2:	bfcc      	ite	gt
 8011ed4:	4d1e      	ldrgt	r5, [pc, #120]	; (8011f50 <__kernel_cos+0x188>)
 8011ed6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011eda:	2400      	movs	r4, #0
 8011edc:	4622      	mov	r2, r4
 8011ede:	462b      	mov	r3, r5
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	f7ee f9e9 	bl	80002b8 <__aeabi_dsub>
 8011ee6:	4622      	mov	r2, r4
 8011ee8:	4606      	mov	r6, r0
 8011eea:	460f      	mov	r7, r1
 8011eec:	462b      	mov	r3, r5
 8011eee:	4650      	mov	r0, sl
 8011ef0:	4659      	mov	r1, fp
 8011ef2:	f7ee f9e1 	bl	80002b8 <__aeabi_dsub>
 8011ef6:	4642      	mov	r2, r8
 8011ef8:	464b      	mov	r3, r9
 8011efa:	f7ee f9dd 	bl	80002b8 <__aeabi_dsub>
 8011efe:	4602      	mov	r2, r0
 8011f00:	460b      	mov	r3, r1
 8011f02:	4630      	mov	r0, r6
 8011f04:	4639      	mov	r1, r7
 8011f06:	e7d9      	b.n	8011ebc <__kernel_cos+0xf4>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	490f      	ldr	r1, [pc, #60]	; (8011f48 <__kernel_cos+0x180>)
 8011f0c:	e7d8      	b.n	8011ec0 <__kernel_cos+0xf8>
 8011f0e:	bf00      	nop
 8011f10:	be8838d4 	.word	0xbe8838d4
 8011f14:	bda8fae9 	.word	0xbda8fae9
 8011f18:	bdb4b1c4 	.word	0xbdb4b1c4
 8011f1c:	3e21ee9e 	.word	0x3e21ee9e
 8011f20:	809c52ad 	.word	0x809c52ad
 8011f24:	3e927e4f 	.word	0x3e927e4f
 8011f28:	19cb1590 	.word	0x19cb1590
 8011f2c:	3efa01a0 	.word	0x3efa01a0
 8011f30:	16c15177 	.word	0x16c15177
 8011f34:	3f56c16c 	.word	0x3f56c16c
 8011f38:	5555554c 	.word	0x5555554c
 8011f3c:	3fa55555 	.word	0x3fa55555
 8011f40:	3fe00000 	.word	0x3fe00000
 8011f44:	3fd33332 	.word	0x3fd33332
 8011f48:	3ff00000 	.word	0x3ff00000
 8011f4c:	3fe90000 	.word	0x3fe90000
 8011f50:	3fd20000 	.word	0x3fd20000
 8011f54:	00000000 	.word	0x00000000

08011f58 <__kernel_rem_pio2>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	ed2d 8b02 	vpush	{d8}
 8011f60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011f64:	1ed4      	subs	r4, r2, #3
 8011f66:	9308      	str	r3, [sp, #32]
 8011f68:	9101      	str	r1, [sp, #4]
 8011f6a:	4bc5      	ldr	r3, [pc, #788]	; (8012280 <__kernel_rem_pio2+0x328>)
 8011f6c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8011f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f74:	9304      	str	r3, [sp, #16]
 8011f76:	9b08      	ldr	r3, [sp, #32]
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	9307      	str	r3, [sp, #28]
 8011f7c:	2318      	movs	r3, #24
 8011f7e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011f82:	f06f 0317 	mvn.w	r3, #23
 8011f86:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011f8a:	fb04 3303 	mla	r3, r4, r3, r3
 8011f8e:	eb03 0a02 	add.w	sl, r3, r2
 8011f92:	9b04      	ldr	r3, [sp, #16]
 8011f94:	9a07      	ldr	r2, [sp, #28]
 8011f96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012270 <__kernel_rem_pio2+0x318>
 8011f9a:	eb03 0802 	add.w	r8, r3, r2
 8011f9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011fa0:	1aa7      	subs	r7, r4, r2
 8011fa2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011fa6:	ae22      	add	r6, sp, #136	; 0x88
 8011fa8:	2500      	movs	r5, #0
 8011faa:	4545      	cmp	r5, r8
 8011fac:	dd13      	ble.n	8011fd6 <__kernel_rem_pio2+0x7e>
 8011fae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012270 <__kernel_rem_pio2+0x318>
 8011fb2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011fb6:	2600      	movs	r6, #0
 8011fb8:	9b04      	ldr	r3, [sp, #16]
 8011fba:	429e      	cmp	r6, r3
 8011fbc:	dc32      	bgt.n	8012024 <__kernel_rem_pio2+0xcc>
 8011fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc0:	9302      	str	r3, [sp, #8]
 8011fc2:	9b08      	ldr	r3, [sp, #32]
 8011fc4:	199d      	adds	r5, r3, r6
 8011fc6:	ab22      	add	r3, sp, #136	; 0x88
 8011fc8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011fcc:	9306      	str	r3, [sp, #24]
 8011fce:	ec59 8b18 	vmov	r8, r9, d8
 8011fd2:	2700      	movs	r7, #0
 8011fd4:	e01f      	b.n	8012016 <__kernel_rem_pio2+0xbe>
 8011fd6:	42ef      	cmn	r7, r5
 8011fd8:	d407      	bmi.n	8011fea <__kernel_rem_pio2+0x92>
 8011fda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011fde:	f7ee fab9 	bl	8000554 <__aeabi_i2d>
 8011fe2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011fe6:	3501      	adds	r5, #1
 8011fe8:	e7df      	b.n	8011faa <__kernel_rem_pio2+0x52>
 8011fea:	ec51 0b18 	vmov	r0, r1, d8
 8011fee:	e7f8      	b.n	8011fe2 <__kernel_rem_pio2+0x8a>
 8011ff0:	9906      	ldr	r1, [sp, #24]
 8011ff2:	9d02      	ldr	r5, [sp, #8]
 8011ff4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011ff8:	9106      	str	r1, [sp, #24]
 8011ffa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011ffe:	9502      	str	r5, [sp, #8]
 8012000:	f7ee fb12 	bl	8000628 <__aeabi_dmul>
 8012004:	4602      	mov	r2, r0
 8012006:	460b      	mov	r3, r1
 8012008:	4640      	mov	r0, r8
 801200a:	4649      	mov	r1, r9
 801200c:	f7ee f956 	bl	80002bc <__adddf3>
 8012010:	3701      	adds	r7, #1
 8012012:	4680      	mov	r8, r0
 8012014:	4689      	mov	r9, r1
 8012016:	9b07      	ldr	r3, [sp, #28]
 8012018:	429f      	cmp	r7, r3
 801201a:	dde9      	ble.n	8011ff0 <__kernel_rem_pio2+0x98>
 801201c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012020:	3601      	adds	r6, #1
 8012022:	e7c9      	b.n	8011fb8 <__kernel_rem_pio2+0x60>
 8012024:	9b04      	ldr	r3, [sp, #16]
 8012026:	aa0e      	add	r2, sp, #56	; 0x38
 8012028:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801202c:	930c      	str	r3, [sp, #48]	; 0x30
 801202e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012030:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012034:	9c04      	ldr	r4, [sp, #16]
 8012036:	930b      	str	r3, [sp, #44]	; 0x2c
 8012038:	ab9a      	add	r3, sp, #616	; 0x268
 801203a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801203e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012046:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801204a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801204e:	ab9a      	add	r3, sp, #616	; 0x268
 8012050:	445b      	add	r3, fp
 8012052:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012056:	2500      	movs	r5, #0
 8012058:	1b63      	subs	r3, r4, r5
 801205a:	2b00      	cmp	r3, #0
 801205c:	dc78      	bgt.n	8012150 <__kernel_rem_pio2+0x1f8>
 801205e:	4650      	mov	r0, sl
 8012060:	ec49 8b10 	vmov	d0, r8, r9
 8012064:	f000 fc00 	bl	8012868 <scalbn>
 8012068:	ec57 6b10 	vmov	r6, r7, d0
 801206c:	2200      	movs	r2, #0
 801206e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012072:	ee10 0a10 	vmov	r0, s0
 8012076:	4639      	mov	r1, r7
 8012078:	f7ee fad6 	bl	8000628 <__aeabi_dmul>
 801207c:	ec41 0b10 	vmov	d0, r0, r1
 8012080:	f000 fb6e 	bl	8012760 <floor>
 8012084:	2200      	movs	r2, #0
 8012086:	ec51 0b10 	vmov	r0, r1, d0
 801208a:	4b7e      	ldr	r3, [pc, #504]	; (8012284 <__kernel_rem_pio2+0x32c>)
 801208c:	f7ee facc 	bl	8000628 <__aeabi_dmul>
 8012090:	4602      	mov	r2, r0
 8012092:	460b      	mov	r3, r1
 8012094:	4630      	mov	r0, r6
 8012096:	4639      	mov	r1, r7
 8012098:	f7ee f90e 	bl	80002b8 <__aeabi_dsub>
 801209c:	460f      	mov	r7, r1
 801209e:	4606      	mov	r6, r0
 80120a0:	f7ee fd72 	bl	8000b88 <__aeabi_d2iz>
 80120a4:	9006      	str	r0, [sp, #24]
 80120a6:	f7ee fa55 	bl	8000554 <__aeabi_i2d>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	4630      	mov	r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	f7ee f901 	bl	80002b8 <__aeabi_dsub>
 80120b6:	f1ba 0f00 	cmp.w	sl, #0
 80120ba:	4606      	mov	r6, r0
 80120bc:	460f      	mov	r7, r1
 80120be:	dd6c      	ble.n	801219a <__kernel_rem_pio2+0x242>
 80120c0:	1e62      	subs	r2, r4, #1
 80120c2:	ab0e      	add	r3, sp, #56	; 0x38
 80120c4:	f1ca 0118 	rsb	r1, sl, #24
 80120c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80120cc:	9d06      	ldr	r5, [sp, #24]
 80120ce:	fa40 f301 	asr.w	r3, r0, r1
 80120d2:	441d      	add	r5, r3
 80120d4:	408b      	lsls	r3, r1
 80120d6:	1ac0      	subs	r0, r0, r3
 80120d8:	ab0e      	add	r3, sp, #56	; 0x38
 80120da:	9506      	str	r5, [sp, #24]
 80120dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80120e0:	f1ca 0317 	rsb	r3, sl, #23
 80120e4:	fa40 f303 	asr.w	r3, r0, r3
 80120e8:	9302      	str	r3, [sp, #8]
 80120ea:	9b02      	ldr	r3, [sp, #8]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	dd62      	ble.n	80121b6 <__kernel_rem_pio2+0x25e>
 80120f0:	9b06      	ldr	r3, [sp, #24]
 80120f2:	2200      	movs	r2, #0
 80120f4:	3301      	adds	r3, #1
 80120f6:	9306      	str	r3, [sp, #24]
 80120f8:	4615      	mov	r5, r2
 80120fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80120fe:	4294      	cmp	r4, r2
 8012100:	f300 8095 	bgt.w	801222e <__kernel_rem_pio2+0x2d6>
 8012104:	f1ba 0f00 	cmp.w	sl, #0
 8012108:	dd07      	ble.n	801211a <__kernel_rem_pio2+0x1c2>
 801210a:	f1ba 0f01 	cmp.w	sl, #1
 801210e:	f000 80a2 	beq.w	8012256 <__kernel_rem_pio2+0x2fe>
 8012112:	f1ba 0f02 	cmp.w	sl, #2
 8012116:	f000 80c1 	beq.w	801229c <__kernel_rem_pio2+0x344>
 801211a:	9b02      	ldr	r3, [sp, #8]
 801211c:	2b02      	cmp	r3, #2
 801211e:	d14a      	bne.n	80121b6 <__kernel_rem_pio2+0x25e>
 8012120:	4632      	mov	r2, r6
 8012122:	463b      	mov	r3, r7
 8012124:	2000      	movs	r0, #0
 8012126:	4958      	ldr	r1, [pc, #352]	; (8012288 <__kernel_rem_pio2+0x330>)
 8012128:	f7ee f8c6 	bl	80002b8 <__aeabi_dsub>
 801212c:	4606      	mov	r6, r0
 801212e:	460f      	mov	r7, r1
 8012130:	2d00      	cmp	r5, #0
 8012132:	d040      	beq.n	80121b6 <__kernel_rem_pio2+0x25e>
 8012134:	4650      	mov	r0, sl
 8012136:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012278 <__kernel_rem_pio2+0x320>
 801213a:	f000 fb95 	bl	8012868 <scalbn>
 801213e:	4630      	mov	r0, r6
 8012140:	4639      	mov	r1, r7
 8012142:	ec53 2b10 	vmov	r2, r3, d0
 8012146:	f7ee f8b7 	bl	80002b8 <__aeabi_dsub>
 801214a:	4606      	mov	r6, r0
 801214c:	460f      	mov	r7, r1
 801214e:	e032      	b.n	80121b6 <__kernel_rem_pio2+0x25e>
 8012150:	2200      	movs	r2, #0
 8012152:	4b4e      	ldr	r3, [pc, #312]	; (801228c <__kernel_rem_pio2+0x334>)
 8012154:	4640      	mov	r0, r8
 8012156:	4649      	mov	r1, r9
 8012158:	f7ee fa66 	bl	8000628 <__aeabi_dmul>
 801215c:	f7ee fd14 	bl	8000b88 <__aeabi_d2iz>
 8012160:	f7ee f9f8 	bl	8000554 <__aeabi_i2d>
 8012164:	2200      	movs	r2, #0
 8012166:	4b4a      	ldr	r3, [pc, #296]	; (8012290 <__kernel_rem_pio2+0x338>)
 8012168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801216c:	f7ee fa5c 	bl	8000628 <__aeabi_dmul>
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	4640      	mov	r0, r8
 8012176:	4649      	mov	r1, r9
 8012178:	f7ee f89e 	bl	80002b8 <__aeabi_dsub>
 801217c:	f7ee fd04 	bl	8000b88 <__aeabi_d2iz>
 8012180:	ab0e      	add	r3, sp, #56	; 0x38
 8012182:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012186:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801218a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801218e:	f7ee f895 	bl	80002bc <__adddf3>
 8012192:	3501      	adds	r5, #1
 8012194:	4680      	mov	r8, r0
 8012196:	4689      	mov	r9, r1
 8012198:	e75e      	b.n	8012058 <__kernel_rem_pio2+0x100>
 801219a:	d105      	bne.n	80121a8 <__kernel_rem_pio2+0x250>
 801219c:	1e63      	subs	r3, r4, #1
 801219e:	aa0e      	add	r2, sp, #56	; 0x38
 80121a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80121a4:	15c3      	asrs	r3, r0, #23
 80121a6:	e79f      	b.n	80120e8 <__kernel_rem_pio2+0x190>
 80121a8:	2200      	movs	r2, #0
 80121aa:	4b3a      	ldr	r3, [pc, #232]	; (8012294 <__kernel_rem_pio2+0x33c>)
 80121ac:	f7ee fcc2 	bl	8000b34 <__aeabi_dcmpge>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	d139      	bne.n	8012228 <__kernel_rem_pio2+0x2d0>
 80121b4:	9002      	str	r0, [sp, #8]
 80121b6:	2200      	movs	r2, #0
 80121b8:	2300      	movs	r3, #0
 80121ba:	4630      	mov	r0, r6
 80121bc:	4639      	mov	r1, r7
 80121be:	f7ee fc9b 	bl	8000af8 <__aeabi_dcmpeq>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	f000 80c7 	beq.w	8012356 <__kernel_rem_pio2+0x3fe>
 80121c8:	1e65      	subs	r5, r4, #1
 80121ca:	462b      	mov	r3, r5
 80121cc:	2200      	movs	r2, #0
 80121ce:	9904      	ldr	r1, [sp, #16]
 80121d0:	428b      	cmp	r3, r1
 80121d2:	da6a      	bge.n	80122aa <__kernel_rem_pio2+0x352>
 80121d4:	2a00      	cmp	r2, #0
 80121d6:	f000 8088 	beq.w	80122ea <__kernel_rem_pio2+0x392>
 80121da:	ab0e      	add	r3, sp, #56	; 0x38
 80121dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80121e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f000 80b4 	beq.w	8012352 <__kernel_rem_pio2+0x3fa>
 80121ea:	4650      	mov	r0, sl
 80121ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012278 <__kernel_rem_pio2+0x320>
 80121f0:	f000 fb3a 	bl	8012868 <scalbn>
 80121f4:	00ec      	lsls	r4, r5, #3
 80121f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80121f8:	191e      	adds	r6, r3, r4
 80121fa:	ec59 8b10 	vmov	r8, r9, d0
 80121fe:	f106 0a08 	add.w	sl, r6, #8
 8012202:	462f      	mov	r7, r5
 8012204:	2f00      	cmp	r7, #0
 8012206:	f280 80df 	bge.w	80123c8 <__kernel_rem_pio2+0x470>
 801220a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012270 <__kernel_rem_pio2+0x318>
 801220e:	f04f 0a00 	mov.w	sl, #0
 8012212:	eba5 030a 	sub.w	r3, r5, sl
 8012216:	2b00      	cmp	r3, #0
 8012218:	f2c0 810a 	blt.w	8012430 <__kernel_rem_pio2+0x4d8>
 801221c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012298 <__kernel_rem_pio2+0x340>
 8012220:	ec59 8b18 	vmov	r8, r9, d8
 8012224:	2700      	movs	r7, #0
 8012226:	e0f5      	b.n	8012414 <__kernel_rem_pio2+0x4bc>
 8012228:	2302      	movs	r3, #2
 801222a:	9302      	str	r3, [sp, #8]
 801222c:	e760      	b.n	80120f0 <__kernel_rem_pio2+0x198>
 801222e:	ab0e      	add	r3, sp, #56	; 0x38
 8012230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012234:	b94d      	cbnz	r5, 801224a <__kernel_rem_pio2+0x2f2>
 8012236:	b12b      	cbz	r3, 8012244 <__kernel_rem_pio2+0x2ec>
 8012238:	a80e      	add	r0, sp, #56	; 0x38
 801223a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801223e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012242:	2301      	movs	r3, #1
 8012244:	3201      	adds	r2, #1
 8012246:	461d      	mov	r5, r3
 8012248:	e759      	b.n	80120fe <__kernel_rem_pio2+0x1a6>
 801224a:	a80e      	add	r0, sp, #56	; 0x38
 801224c:	1acb      	subs	r3, r1, r3
 801224e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012252:	462b      	mov	r3, r5
 8012254:	e7f6      	b.n	8012244 <__kernel_rem_pio2+0x2ec>
 8012256:	1e62      	subs	r2, r4, #1
 8012258:	ab0e      	add	r3, sp, #56	; 0x38
 801225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801225e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012262:	a90e      	add	r1, sp, #56	; 0x38
 8012264:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012268:	e757      	b.n	801211a <__kernel_rem_pio2+0x1c2>
 801226a:	bf00      	nop
 801226c:	f3af 8000 	nop.w
	...
 801227c:	3ff00000 	.word	0x3ff00000
 8012280:	08017e80 	.word	0x08017e80
 8012284:	40200000 	.word	0x40200000
 8012288:	3ff00000 	.word	0x3ff00000
 801228c:	3e700000 	.word	0x3e700000
 8012290:	41700000 	.word	0x41700000
 8012294:	3fe00000 	.word	0x3fe00000
 8012298:	08017e40 	.word	0x08017e40
 801229c:	1e62      	subs	r2, r4, #1
 801229e:	ab0e      	add	r3, sp, #56	; 0x38
 80122a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80122a8:	e7db      	b.n	8012262 <__kernel_rem_pio2+0x30a>
 80122aa:	a90e      	add	r1, sp, #56	; 0x38
 80122ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80122b0:	3b01      	subs	r3, #1
 80122b2:	430a      	orrs	r2, r1
 80122b4:	e78b      	b.n	80121ce <__kernel_rem_pio2+0x276>
 80122b6:	3301      	adds	r3, #1
 80122b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80122bc:	2900      	cmp	r1, #0
 80122be:	d0fa      	beq.n	80122b6 <__kernel_rem_pio2+0x35e>
 80122c0:	9a08      	ldr	r2, [sp, #32]
 80122c2:	4422      	add	r2, r4
 80122c4:	00d2      	lsls	r2, r2, #3
 80122c6:	a922      	add	r1, sp, #136	; 0x88
 80122c8:	18e3      	adds	r3, r4, r3
 80122ca:	9206      	str	r2, [sp, #24]
 80122cc:	440a      	add	r2, r1
 80122ce:	9302      	str	r3, [sp, #8]
 80122d0:	f10b 0108 	add.w	r1, fp, #8
 80122d4:	f102 0308 	add.w	r3, r2, #8
 80122d8:	1c66      	adds	r6, r4, #1
 80122da:	910a      	str	r1, [sp, #40]	; 0x28
 80122dc:	2500      	movs	r5, #0
 80122de:	930d      	str	r3, [sp, #52]	; 0x34
 80122e0:	9b02      	ldr	r3, [sp, #8]
 80122e2:	42b3      	cmp	r3, r6
 80122e4:	da04      	bge.n	80122f0 <__kernel_rem_pio2+0x398>
 80122e6:	461c      	mov	r4, r3
 80122e8:	e6a6      	b.n	8012038 <__kernel_rem_pio2+0xe0>
 80122ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122ec:	2301      	movs	r3, #1
 80122ee:	e7e3      	b.n	80122b8 <__kernel_rem_pio2+0x360>
 80122f0:	9b06      	ldr	r3, [sp, #24]
 80122f2:	18ef      	adds	r7, r5, r3
 80122f4:	ab22      	add	r3, sp, #136	; 0x88
 80122f6:	441f      	add	r7, r3
 80122f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80122fe:	f7ee f929 	bl	8000554 <__aeabi_i2d>
 8012302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012304:	461c      	mov	r4, r3
 8012306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012308:	e9c7 0100 	strd	r0, r1, [r7]
 801230c:	eb03 0b05 	add.w	fp, r3, r5
 8012310:	2700      	movs	r7, #0
 8012312:	f04f 0800 	mov.w	r8, #0
 8012316:	f04f 0900 	mov.w	r9, #0
 801231a:	9b07      	ldr	r3, [sp, #28]
 801231c:	429f      	cmp	r7, r3
 801231e:	dd08      	ble.n	8012332 <__kernel_rem_pio2+0x3da>
 8012320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012322:	aa72      	add	r2, sp, #456	; 0x1c8
 8012324:	18eb      	adds	r3, r5, r3
 8012326:	4413      	add	r3, r2
 8012328:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801232c:	3601      	adds	r6, #1
 801232e:	3508      	adds	r5, #8
 8012330:	e7d6      	b.n	80122e0 <__kernel_rem_pio2+0x388>
 8012332:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012336:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801233a:	f7ee f975 	bl	8000628 <__aeabi_dmul>
 801233e:	4602      	mov	r2, r0
 8012340:	460b      	mov	r3, r1
 8012342:	4640      	mov	r0, r8
 8012344:	4649      	mov	r1, r9
 8012346:	f7ed ffb9 	bl	80002bc <__adddf3>
 801234a:	3701      	adds	r7, #1
 801234c:	4680      	mov	r8, r0
 801234e:	4689      	mov	r9, r1
 8012350:	e7e3      	b.n	801231a <__kernel_rem_pio2+0x3c2>
 8012352:	3d01      	subs	r5, #1
 8012354:	e741      	b.n	80121da <__kernel_rem_pio2+0x282>
 8012356:	f1ca 0000 	rsb	r0, sl, #0
 801235a:	ec47 6b10 	vmov	d0, r6, r7
 801235e:	f000 fa83 	bl	8012868 <scalbn>
 8012362:	ec57 6b10 	vmov	r6, r7, d0
 8012366:	2200      	movs	r2, #0
 8012368:	4b99      	ldr	r3, [pc, #612]	; (80125d0 <__kernel_rem_pio2+0x678>)
 801236a:	ee10 0a10 	vmov	r0, s0
 801236e:	4639      	mov	r1, r7
 8012370:	f7ee fbe0 	bl	8000b34 <__aeabi_dcmpge>
 8012374:	b1f8      	cbz	r0, 80123b6 <__kernel_rem_pio2+0x45e>
 8012376:	2200      	movs	r2, #0
 8012378:	4b96      	ldr	r3, [pc, #600]	; (80125d4 <__kernel_rem_pio2+0x67c>)
 801237a:	4630      	mov	r0, r6
 801237c:	4639      	mov	r1, r7
 801237e:	f7ee f953 	bl	8000628 <__aeabi_dmul>
 8012382:	f7ee fc01 	bl	8000b88 <__aeabi_d2iz>
 8012386:	4680      	mov	r8, r0
 8012388:	f7ee f8e4 	bl	8000554 <__aeabi_i2d>
 801238c:	2200      	movs	r2, #0
 801238e:	4b90      	ldr	r3, [pc, #576]	; (80125d0 <__kernel_rem_pio2+0x678>)
 8012390:	f7ee f94a 	bl	8000628 <__aeabi_dmul>
 8012394:	460b      	mov	r3, r1
 8012396:	4602      	mov	r2, r0
 8012398:	4639      	mov	r1, r7
 801239a:	4630      	mov	r0, r6
 801239c:	f7ed ff8c 	bl	80002b8 <__aeabi_dsub>
 80123a0:	f7ee fbf2 	bl	8000b88 <__aeabi_d2iz>
 80123a4:	1c65      	adds	r5, r4, #1
 80123a6:	ab0e      	add	r3, sp, #56	; 0x38
 80123a8:	f10a 0a18 	add.w	sl, sl, #24
 80123ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80123b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80123b4:	e719      	b.n	80121ea <__kernel_rem_pio2+0x292>
 80123b6:	4630      	mov	r0, r6
 80123b8:	4639      	mov	r1, r7
 80123ba:	f7ee fbe5 	bl	8000b88 <__aeabi_d2iz>
 80123be:	ab0e      	add	r3, sp, #56	; 0x38
 80123c0:	4625      	mov	r5, r4
 80123c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80123c6:	e710      	b.n	80121ea <__kernel_rem_pio2+0x292>
 80123c8:	ab0e      	add	r3, sp, #56	; 0x38
 80123ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80123ce:	f7ee f8c1 	bl	8000554 <__aeabi_i2d>
 80123d2:	4642      	mov	r2, r8
 80123d4:	464b      	mov	r3, r9
 80123d6:	f7ee f927 	bl	8000628 <__aeabi_dmul>
 80123da:	2200      	movs	r2, #0
 80123dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80123e0:	4b7c      	ldr	r3, [pc, #496]	; (80125d4 <__kernel_rem_pio2+0x67c>)
 80123e2:	4640      	mov	r0, r8
 80123e4:	4649      	mov	r1, r9
 80123e6:	f7ee f91f 	bl	8000628 <__aeabi_dmul>
 80123ea:	3f01      	subs	r7, #1
 80123ec:	4680      	mov	r8, r0
 80123ee:	4689      	mov	r9, r1
 80123f0:	e708      	b.n	8012204 <__kernel_rem_pio2+0x2ac>
 80123f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80123fe:	f7ee f913 	bl	8000628 <__aeabi_dmul>
 8012402:	4602      	mov	r2, r0
 8012404:	460b      	mov	r3, r1
 8012406:	4640      	mov	r0, r8
 8012408:	4649      	mov	r1, r9
 801240a:	f7ed ff57 	bl	80002bc <__adddf3>
 801240e:	3701      	adds	r7, #1
 8012410:	4680      	mov	r8, r0
 8012412:	4689      	mov	r9, r1
 8012414:	9b04      	ldr	r3, [sp, #16]
 8012416:	429f      	cmp	r7, r3
 8012418:	dc01      	bgt.n	801241e <__kernel_rem_pio2+0x4c6>
 801241a:	45ba      	cmp	sl, r7
 801241c:	dae9      	bge.n	80123f2 <__kernel_rem_pio2+0x49a>
 801241e:	ab4a      	add	r3, sp, #296	; 0x128
 8012420:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012424:	e9c3 8900 	strd	r8, r9, [r3]
 8012428:	f10a 0a01 	add.w	sl, sl, #1
 801242c:	3e08      	subs	r6, #8
 801242e:	e6f0      	b.n	8012212 <__kernel_rem_pio2+0x2ba>
 8012430:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012432:	2b03      	cmp	r3, #3
 8012434:	d85b      	bhi.n	80124ee <__kernel_rem_pio2+0x596>
 8012436:	e8df f003 	tbb	[pc, r3]
 801243a:	264a      	.short	0x264a
 801243c:	0226      	.short	0x0226
 801243e:	ab9a      	add	r3, sp, #616	; 0x268
 8012440:	441c      	add	r4, r3
 8012442:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012446:	46a2      	mov	sl, r4
 8012448:	46ab      	mov	fp, r5
 801244a:	f1bb 0f00 	cmp.w	fp, #0
 801244e:	dc6c      	bgt.n	801252a <__kernel_rem_pio2+0x5d2>
 8012450:	46a2      	mov	sl, r4
 8012452:	46ab      	mov	fp, r5
 8012454:	f1bb 0f01 	cmp.w	fp, #1
 8012458:	f300 8086 	bgt.w	8012568 <__kernel_rem_pio2+0x610>
 801245c:	2000      	movs	r0, #0
 801245e:	2100      	movs	r1, #0
 8012460:	2d01      	cmp	r5, #1
 8012462:	f300 80a0 	bgt.w	80125a6 <__kernel_rem_pio2+0x64e>
 8012466:	9b02      	ldr	r3, [sp, #8]
 8012468:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801246c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012470:	2b00      	cmp	r3, #0
 8012472:	f040 809e 	bne.w	80125b2 <__kernel_rem_pio2+0x65a>
 8012476:	9b01      	ldr	r3, [sp, #4]
 8012478:	e9c3 7800 	strd	r7, r8, [r3]
 801247c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012480:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012484:	e033      	b.n	80124ee <__kernel_rem_pio2+0x596>
 8012486:	3408      	adds	r4, #8
 8012488:	ab4a      	add	r3, sp, #296	; 0x128
 801248a:	441c      	add	r4, r3
 801248c:	462e      	mov	r6, r5
 801248e:	2000      	movs	r0, #0
 8012490:	2100      	movs	r1, #0
 8012492:	2e00      	cmp	r6, #0
 8012494:	da3a      	bge.n	801250c <__kernel_rem_pio2+0x5b4>
 8012496:	9b02      	ldr	r3, [sp, #8]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d03d      	beq.n	8012518 <__kernel_rem_pio2+0x5c0>
 801249c:	4602      	mov	r2, r0
 801249e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124a2:	9c01      	ldr	r4, [sp, #4]
 80124a4:	e9c4 2300 	strd	r2, r3, [r4]
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80124b0:	f7ed ff02 	bl	80002b8 <__aeabi_dsub>
 80124b4:	ae4c      	add	r6, sp, #304	; 0x130
 80124b6:	2401      	movs	r4, #1
 80124b8:	42a5      	cmp	r5, r4
 80124ba:	da30      	bge.n	801251e <__kernel_rem_pio2+0x5c6>
 80124bc:	9b02      	ldr	r3, [sp, #8]
 80124be:	b113      	cbz	r3, 80124c6 <__kernel_rem_pio2+0x56e>
 80124c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124c4:	4619      	mov	r1, r3
 80124c6:	9b01      	ldr	r3, [sp, #4]
 80124c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80124cc:	e00f      	b.n	80124ee <__kernel_rem_pio2+0x596>
 80124ce:	ab9a      	add	r3, sp, #616	; 0x268
 80124d0:	441c      	add	r4, r3
 80124d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80124d6:	2000      	movs	r0, #0
 80124d8:	2100      	movs	r1, #0
 80124da:	2d00      	cmp	r5, #0
 80124dc:	da10      	bge.n	8012500 <__kernel_rem_pio2+0x5a8>
 80124de:	9b02      	ldr	r3, [sp, #8]
 80124e0:	b113      	cbz	r3, 80124e8 <__kernel_rem_pio2+0x590>
 80124e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124e6:	4619      	mov	r1, r3
 80124e8:	9b01      	ldr	r3, [sp, #4]
 80124ea:	e9c3 0100 	strd	r0, r1, [r3]
 80124ee:	9b06      	ldr	r3, [sp, #24]
 80124f0:	f003 0007 	and.w	r0, r3, #7
 80124f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80124f8:	ecbd 8b02 	vpop	{d8}
 80124fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012500:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012504:	f7ed feda 	bl	80002bc <__adddf3>
 8012508:	3d01      	subs	r5, #1
 801250a:	e7e6      	b.n	80124da <__kernel_rem_pio2+0x582>
 801250c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012510:	f7ed fed4 	bl	80002bc <__adddf3>
 8012514:	3e01      	subs	r6, #1
 8012516:	e7bc      	b.n	8012492 <__kernel_rem_pio2+0x53a>
 8012518:	4602      	mov	r2, r0
 801251a:	460b      	mov	r3, r1
 801251c:	e7c1      	b.n	80124a2 <__kernel_rem_pio2+0x54a>
 801251e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012522:	f7ed fecb 	bl	80002bc <__adddf3>
 8012526:	3401      	adds	r4, #1
 8012528:	e7c6      	b.n	80124b8 <__kernel_rem_pio2+0x560>
 801252a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801252e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012532:	4640      	mov	r0, r8
 8012534:	ec53 2b17 	vmov	r2, r3, d7
 8012538:	4649      	mov	r1, r9
 801253a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801253e:	f7ed febd 	bl	80002bc <__adddf3>
 8012542:	4602      	mov	r2, r0
 8012544:	460b      	mov	r3, r1
 8012546:	4606      	mov	r6, r0
 8012548:	460f      	mov	r7, r1
 801254a:	4640      	mov	r0, r8
 801254c:	4649      	mov	r1, r9
 801254e:	f7ed feb3 	bl	80002b8 <__aeabi_dsub>
 8012552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012556:	f7ed feb1 	bl	80002bc <__adddf3>
 801255a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801255e:	e9ca 0100 	strd	r0, r1, [sl]
 8012562:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012566:	e770      	b.n	801244a <__kernel_rem_pio2+0x4f2>
 8012568:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801256c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012570:	4630      	mov	r0, r6
 8012572:	ec53 2b17 	vmov	r2, r3, d7
 8012576:	4639      	mov	r1, r7
 8012578:	ed8d 7b04 	vstr	d7, [sp, #16]
 801257c:	f7ed fe9e 	bl	80002bc <__adddf3>
 8012580:	4602      	mov	r2, r0
 8012582:	460b      	mov	r3, r1
 8012584:	4680      	mov	r8, r0
 8012586:	4689      	mov	r9, r1
 8012588:	4630      	mov	r0, r6
 801258a:	4639      	mov	r1, r7
 801258c:	f7ed fe94 	bl	80002b8 <__aeabi_dsub>
 8012590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012594:	f7ed fe92 	bl	80002bc <__adddf3>
 8012598:	f10b 3bff 	add.w	fp, fp, #4294967295
 801259c:	e9ca 0100 	strd	r0, r1, [sl]
 80125a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80125a4:	e756      	b.n	8012454 <__kernel_rem_pio2+0x4fc>
 80125a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80125aa:	f7ed fe87 	bl	80002bc <__adddf3>
 80125ae:	3d01      	subs	r5, #1
 80125b0:	e756      	b.n	8012460 <__kernel_rem_pio2+0x508>
 80125b2:	9b01      	ldr	r3, [sp, #4]
 80125b4:	9a01      	ldr	r2, [sp, #4]
 80125b6:	601f      	str	r7, [r3, #0]
 80125b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80125bc:	605c      	str	r4, [r3, #4]
 80125be:	609d      	str	r5, [r3, #8]
 80125c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80125c4:	60d3      	str	r3, [r2, #12]
 80125c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125ca:	6110      	str	r0, [r2, #16]
 80125cc:	6153      	str	r3, [r2, #20]
 80125ce:	e78e      	b.n	80124ee <__kernel_rem_pio2+0x596>
 80125d0:	41700000 	.word	0x41700000
 80125d4:	3e700000 	.word	0x3e700000

080125d8 <__kernel_sin>:
 80125d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125dc:	ec55 4b10 	vmov	r4, r5, d0
 80125e0:	b085      	sub	sp, #20
 80125e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80125e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80125ea:	ed8d 1b00 	vstr	d1, [sp]
 80125ee:	9002      	str	r0, [sp, #8]
 80125f0:	da06      	bge.n	8012600 <__kernel_sin+0x28>
 80125f2:	ee10 0a10 	vmov	r0, s0
 80125f6:	4629      	mov	r1, r5
 80125f8:	f7ee fac6 	bl	8000b88 <__aeabi_d2iz>
 80125fc:	2800      	cmp	r0, #0
 80125fe:	d051      	beq.n	80126a4 <__kernel_sin+0xcc>
 8012600:	4622      	mov	r2, r4
 8012602:	462b      	mov	r3, r5
 8012604:	4620      	mov	r0, r4
 8012606:	4629      	mov	r1, r5
 8012608:	f7ee f80e 	bl	8000628 <__aeabi_dmul>
 801260c:	4682      	mov	sl, r0
 801260e:	468b      	mov	fp, r1
 8012610:	4602      	mov	r2, r0
 8012612:	460b      	mov	r3, r1
 8012614:	4620      	mov	r0, r4
 8012616:	4629      	mov	r1, r5
 8012618:	f7ee f806 	bl	8000628 <__aeabi_dmul>
 801261c:	a341      	add	r3, pc, #260	; (adr r3, 8012724 <__kernel_sin+0x14c>)
 801261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012622:	4680      	mov	r8, r0
 8012624:	4689      	mov	r9, r1
 8012626:	4650      	mov	r0, sl
 8012628:	4659      	mov	r1, fp
 801262a:	f7ed fffd 	bl	8000628 <__aeabi_dmul>
 801262e:	a33f      	add	r3, pc, #252	; (adr r3, 801272c <__kernel_sin+0x154>)
 8012630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012634:	f7ed fe40 	bl	80002b8 <__aeabi_dsub>
 8012638:	4652      	mov	r2, sl
 801263a:	465b      	mov	r3, fp
 801263c:	f7ed fff4 	bl	8000628 <__aeabi_dmul>
 8012640:	a33c      	add	r3, pc, #240	; (adr r3, 8012734 <__kernel_sin+0x15c>)
 8012642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012646:	f7ed fe39 	bl	80002bc <__adddf3>
 801264a:	4652      	mov	r2, sl
 801264c:	465b      	mov	r3, fp
 801264e:	f7ed ffeb 	bl	8000628 <__aeabi_dmul>
 8012652:	a33a      	add	r3, pc, #232	; (adr r3, 801273c <__kernel_sin+0x164>)
 8012654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012658:	f7ed fe2e 	bl	80002b8 <__aeabi_dsub>
 801265c:	4652      	mov	r2, sl
 801265e:	465b      	mov	r3, fp
 8012660:	f7ed ffe2 	bl	8000628 <__aeabi_dmul>
 8012664:	a337      	add	r3, pc, #220	; (adr r3, 8012744 <__kernel_sin+0x16c>)
 8012666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266a:	f7ed fe27 	bl	80002bc <__adddf3>
 801266e:	9b02      	ldr	r3, [sp, #8]
 8012670:	4606      	mov	r6, r0
 8012672:	460f      	mov	r7, r1
 8012674:	b9db      	cbnz	r3, 80126ae <__kernel_sin+0xd6>
 8012676:	4602      	mov	r2, r0
 8012678:	460b      	mov	r3, r1
 801267a:	4650      	mov	r0, sl
 801267c:	4659      	mov	r1, fp
 801267e:	f7ed ffd3 	bl	8000628 <__aeabi_dmul>
 8012682:	a325      	add	r3, pc, #148	; (adr r3, 8012718 <__kernel_sin+0x140>)
 8012684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012688:	f7ed fe16 	bl	80002b8 <__aeabi_dsub>
 801268c:	4642      	mov	r2, r8
 801268e:	464b      	mov	r3, r9
 8012690:	f7ed ffca 	bl	8000628 <__aeabi_dmul>
 8012694:	4602      	mov	r2, r0
 8012696:	460b      	mov	r3, r1
 8012698:	4620      	mov	r0, r4
 801269a:	4629      	mov	r1, r5
 801269c:	f7ed fe0e 	bl	80002bc <__adddf3>
 80126a0:	4604      	mov	r4, r0
 80126a2:	460d      	mov	r5, r1
 80126a4:	ec45 4b10 	vmov	d0, r4, r5
 80126a8:	b005      	add	sp, #20
 80126aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ae:	2200      	movs	r2, #0
 80126b0:	4b1b      	ldr	r3, [pc, #108]	; (8012720 <__kernel_sin+0x148>)
 80126b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126b6:	f7ed ffb7 	bl	8000628 <__aeabi_dmul>
 80126ba:	4632      	mov	r2, r6
 80126bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126c0:	463b      	mov	r3, r7
 80126c2:	4640      	mov	r0, r8
 80126c4:	4649      	mov	r1, r9
 80126c6:	f7ed ffaf 	bl	8000628 <__aeabi_dmul>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126d2:	f7ed fdf1 	bl	80002b8 <__aeabi_dsub>
 80126d6:	4652      	mov	r2, sl
 80126d8:	465b      	mov	r3, fp
 80126da:	f7ed ffa5 	bl	8000628 <__aeabi_dmul>
 80126de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126e2:	f7ed fde9 	bl	80002b8 <__aeabi_dsub>
 80126e6:	a30c      	add	r3, pc, #48	; (adr r3, 8012718 <__kernel_sin+0x140>)
 80126e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	4640      	mov	r0, r8
 80126f2:	4649      	mov	r1, r9
 80126f4:	f7ed ff98 	bl	8000628 <__aeabi_dmul>
 80126f8:	4602      	mov	r2, r0
 80126fa:	460b      	mov	r3, r1
 80126fc:	4630      	mov	r0, r6
 80126fe:	4639      	mov	r1, r7
 8012700:	f7ed fddc 	bl	80002bc <__adddf3>
 8012704:	4602      	mov	r2, r0
 8012706:	460b      	mov	r3, r1
 8012708:	4620      	mov	r0, r4
 801270a:	4629      	mov	r1, r5
 801270c:	f7ed fdd4 	bl	80002b8 <__aeabi_dsub>
 8012710:	e7c6      	b.n	80126a0 <__kernel_sin+0xc8>
 8012712:	bf00      	nop
 8012714:	f3af 8000 	nop.w
 8012718:	55555549 	.word	0x55555549
 801271c:	3fc55555 	.word	0x3fc55555
 8012720:	3fe00000 	.word	0x3fe00000
 8012724:	5acfd57c 	.word	0x5acfd57c
 8012728:	3de5d93a 	.word	0x3de5d93a
 801272c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012730:	3e5ae5e6 	.word	0x3e5ae5e6
 8012734:	57b1fe7d 	.word	0x57b1fe7d
 8012738:	3ec71de3 	.word	0x3ec71de3
 801273c:	19c161d5 	.word	0x19c161d5
 8012740:	3f2a01a0 	.word	0x3f2a01a0
 8012744:	1110f8a6 	.word	0x1110f8a6
 8012748:	3f811111 	.word	0x3f811111

0801274c <fabs>:
 801274c:	ec51 0b10 	vmov	r0, r1, d0
 8012750:	ee10 2a10 	vmov	r2, s0
 8012754:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012758:	ec43 2b10 	vmov	d0, r2, r3
 801275c:	4770      	bx	lr
	...

08012760 <floor>:
 8012760:	ec51 0b10 	vmov	r0, r1, d0
 8012764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012768:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801276c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012770:	2e13      	cmp	r6, #19
 8012772:	460c      	mov	r4, r1
 8012774:	ee10 5a10 	vmov	r5, s0
 8012778:	4680      	mov	r8, r0
 801277a:	dc34      	bgt.n	80127e6 <floor+0x86>
 801277c:	2e00      	cmp	r6, #0
 801277e:	da16      	bge.n	80127ae <floor+0x4e>
 8012780:	a335      	add	r3, pc, #212	; (adr r3, 8012858 <floor+0xf8>)
 8012782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012786:	f7ed fd99 	bl	80002bc <__adddf3>
 801278a:	2200      	movs	r2, #0
 801278c:	2300      	movs	r3, #0
 801278e:	f7ee f9db 	bl	8000b48 <__aeabi_dcmpgt>
 8012792:	b148      	cbz	r0, 80127a8 <floor+0x48>
 8012794:	2c00      	cmp	r4, #0
 8012796:	da59      	bge.n	801284c <floor+0xec>
 8012798:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801279c:	4a30      	ldr	r2, [pc, #192]	; (8012860 <floor+0x100>)
 801279e:	432b      	orrs	r3, r5
 80127a0:	2500      	movs	r5, #0
 80127a2:	42ab      	cmp	r3, r5
 80127a4:	bf18      	it	ne
 80127a6:	4614      	movne	r4, r2
 80127a8:	4621      	mov	r1, r4
 80127aa:	4628      	mov	r0, r5
 80127ac:	e025      	b.n	80127fa <floor+0x9a>
 80127ae:	4f2d      	ldr	r7, [pc, #180]	; (8012864 <floor+0x104>)
 80127b0:	4137      	asrs	r7, r6
 80127b2:	ea01 0307 	and.w	r3, r1, r7
 80127b6:	4303      	orrs	r3, r0
 80127b8:	d01f      	beq.n	80127fa <floor+0x9a>
 80127ba:	a327      	add	r3, pc, #156	; (adr r3, 8012858 <floor+0xf8>)
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	f7ed fd7c 	bl	80002bc <__adddf3>
 80127c4:	2200      	movs	r2, #0
 80127c6:	2300      	movs	r3, #0
 80127c8:	f7ee f9be 	bl	8000b48 <__aeabi_dcmpgt>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d0eb      	beq.n	80127a8 <floor+0x48>
 80127d0:	2c00      	cmp	r4, #0
 80127d2:	bfbe      	ittt	lt
 80127d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80127d8:	fa43 f606 	asrlt.w	r6, r3, r6
 80127dc:	19a4      	addlt	r4, r4, r6
 80127de:	ea24 0407 	bic.w	r4, r4, r7
 80127e2:	2500      	movs	r5, #0
 80127e4:	e7e0      	b.n	80127a8 <floor+0x48>
 80127e6:	2e33      	cmp	r6, #51	; 0x33
 80127e8:	dd0b      	ble.n	8012802 <floor+0xa2>
 80127ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80127ee:	d104      	bne.n	80127fa <floor+0x9a>
 80127f0:	ee10 2a10 	vmov	r2, s0
 80127f4:	460b      	mov	r3, r1
 80127f6:	f7ed fd61 	bl	80002bc <__adddf3>
 80127fa:	ec41 0b10 	vmov	d0, r0, r1
 80127fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012802:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012806:	f04f 33ff 	mov.w	r3, #4294967295
 801280a:	fa23 f707 	lsr.w	r7, r3, r7
 801280e:	4207      	tst	r7, r0
 8012810:	d0f3      	beq.n	80127fa <floor+0x9a>
 8012812:	a311      	add	r3, pc, #68	; (adr r3, 8012858 <floor+0xf8>)
 8012814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012818:	f7ed fd50 	bl	80002bc <__adddf3>
 801281c:	2200      	movs	r2, #0
 801281e:	2300      	movs	r3, #0
 8012820:	f7ee f992 	bl	8000b48 <__aeabi_dcmpgt>
 8012824:	2800      	cmp	r0, #0
 8012826:	d0bf      	beq.n	80127a8 <floor+0x48>
 8012828:	2c00      	cmp	r4, #0
 801282a:	da02      	bge.n	8012832 <floor+0xd2>
 801282c:	2e14      	cmp	r6, #20
 801282e:	d103      	bne.n	8012838 <floor+0xd8>
 8012830:	3401      	adds	r4, #1
 8012832:	ea25 0507 	bic.w	r5, r5, r7
 8012836:	e7b7      	b.n	80127a8 <floor+0x48>
 8012838:	2301      	movs	r3, #1
 801283a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801283e:	fa03 f606 	lsl.w	r6, r3, r6
 8012842:	4435      	add	r5, r6
 8012844:	4545      	cmp	r5, r8
 8012846:	bf38      	it	cc
 8012848:	18e4      	addcc	r4, r4, r3
 801284a:	e7f2      	b.n	8012832 <floor+0xd2>
 801284c:	2500      	movs	r5, #0
 801284e:	462c      	mov	r4, r5
 8012850:	e7aa      	b.n	80127a8 <floor+0x48>
 8012852:	bf00      	nop
 8012854:	f3af 8000 	nop.w
 8012858:	8800759c 	.word	0x8800759c
 801285c:	7e37e43c 	.word	0x7e37e43c
 8012860:	bff00000 	.word	0xbff00000
 8012864:	000fffff 	.word	0x000fffff

08012868 <scalbn>:
 8012868:	b570      	push	{r4, r5, r6, lr}
 801286a:	ec55 4b10 	vmov	r4, r5, d0
 801286e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012872:	4606      	mov	r6, r0
 8012874:	462b      	mov	r3, r5
 8012876:	b9aa      	cbnz	r2, 80128a4 <scalbn+0x3c>
 8012878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801287c:	4323      	orrs	r3, r4
 801287e:	d03b      	beq.n	80128f8 <scalbn+0x90>
 8012880:	4b31      	ldr	r3, [pc, #196]	; (8012948 <scalbn+0xe0>)
 8012882:	4629      	mov	r1, r5
 8012884:	2200      	movs	r2, #0
 8012886:	ee10 0a10 	vmov	r0, s0
 801288a:	f7ed fecd 	bl	8000628 <__aeabi_dmul>
 801288e:	4b2f      	ldr	r3, [pc, #188]	; (801294c <scalbn+0xe4>)
 8012890:	429e      	cmp	r6, r3
 8012892:	4604      	mov	r4, r0
 8012894:	460d      	mov	r5, r1
 8012896:	da12      	bge.n	80128be <scalbn+0x56>
 8012898:	a327      	add	r3, pc, #156	; (adr r3, 8012938 <scalbn+0xd0>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	f7ed fec3 	bl	8000628 <__aeabi_dmul>
 80128a2:	e009      	b.n	80128b8 <scalbn+0x50>
 80128a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80128a8:	428a      	cmp	r2, r1
 80128aa:	d10c      	bne.n	80128c6 <scalbn+0x5e>
 80128ac:	ee10 2a10 	vmov	r2, s0
 80128b0:	4620      	mov	r0, r4
 80128b2:	4629      	mov	r1, r5
 80128b4:	f7ed fd02 	bl	80002bc <__adddf3>
 80128b8:	4604      	mov	r4, r0
 80128ba:	460d      	mov	r5, r1
 80128bc:	e01c      	b.n	80128f8 <scalbn+0x90>
 80128be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80128c2:	460b      	mov	r3, r1
 80128c4:	3a36      	subs	r2, #54	; 0x36
 80128c6:	4432      	add	r2, r6
 80128c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80128cc:	428a      	cmp	r2, r1
 80128ce:	dd0b      	ble.n	80128e8 <scalbn+0x80>
 80128d0:	ec45 4b11 	vmov	d1, r4, r5
 80128d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012940 <scalbn+0xd8>
 80128d8:	f000 f83c 	bl	8012954 <copysign>
 80128dc:	a318      	add	r3, pc, #96	; (adr r3, 8012940 <scalbn+0xd8>)
 80128de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e2:	ec51 0b10 	vmov	r0, r1, d0
 80128e6:	e7da      	b.n	801289e <scalbn+0x36>
 80128e8:	2a00      	cmp	r2, #0
 80128ea:	dd08      	ble.n	80128fe <scalbn+0x96>
 80128ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80128f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80128f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80128f8:	ec45 4b10 	vmov	d0, r4, r5
 80128fc:	bd70      	pop	{r4, r5, r6, pc}
 80128fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012902:	da0d      	bge.n	8012920 <scalbn+0xb8>
 8012904:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012908:	429e      	cmp	r6, r3
 801290a:	ec45 4b11 	vmov	d1, r4, r5
 801290e:	dce1      	bgt.n	80128d4 <scalbn+0x6c>
 8012910:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012938 <scalbn+0xd0>
 8012914:	f000 f81e 	bl	8012954 <copysign>
 8012918:	a307      	add	r3, pc, #28	; (adr r3, 8012938 <scalbn+0xd0>)
 801291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291e:	e7e0      	b.n	80128e2 <scalbn+0x7a>
 8012920:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012924:	3236      	adds	r2, #54	; 0x36
 8012926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801292a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801292e:	4620      	mov	r0, r4
 8012930:	4629      	mov	r1, r5
 8012932:	2200      	movs	r2, #0
 8012934:	4b06      	ldr	r3, [pc, #24]	; (8012950 <scalbn+0xe8>)
 8012936:	e7b2      	b.n	801289e <scalbn+0x36>
 8012938:	c2f8f359 	.word	0xc2f8f359
 801293c:	01a56e1f 	.word	0x01a56e1f
 8012940:	8800759c 	.word	0x8800759c
 8012944:	7e37e43c 	.word	0x7e37e43c
 8012948:	43500000 	.word	0x43500000
 801294c:	ffff3cb0 	.word	0xffff3cb0
 8012950:	3c900000 	.word	0x3c900000

08012954 <copysign>:
 8012954:	ec51 0b10 	vmov	r0, r1, d0
 8012958:	ee11 0a90 	vmov	r0, s3
 801295c:	ee10 2a10 	vmov	r2, s0
 8012960:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012964:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012968:	ea41 0300 	orr.w	r3, r1, r0
 801296c:	ec43 2b10 	vmov	d0, r2, r3
 8012970:	4770      	bx	lr
	...

08012974 <__errno>:
 8012974:	4b01      	ldr	r3, [pc, #4]	; (801297c <__errno+0x8>)
 8012976:	6818      	ldr	r0, [r3, #0]
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	2000000c 	.word	0x2000000c

08012980 <__libc_init_array>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4e0d      	ldr	r6, [pc, #52]	; (80129b8 <__libc_init_array+0x38>)
 8012984:	4c0d      	ldr	r4, [pc, #52]	; (80129bc <__libc_init_array+0x3c>)
 8012986:	1ba4      	subs	r4, r4, r6
 8012988:	10a4      	asrs	r4, r4, #2
 801298a:	2500      	movs	r5, #0
 801298c:	42a5      	cmp	r5, r4
 801298e:	d109      	bne.n	80129a4 <__libc_init_array+0x24>
 8012990:	4e0b      	ldr	r6, [pc, #44]	; (80129c0 <__libc_init_array+0x40>)
 8012992:	4c0c      	ldr	r4, [pc, #48]	; (80129c4 <__libc_init_array+0x44>)
 8012994:	f004 feee 	bl	8017774 <_init>
 8012998:	1ba4      	subs	r4, r4, r6
 801299a:	10a4      	asrs	r4, r4, #2
 801299c:	2500      	movs	r5, #0
 801299e:	42a5      	cmp	r5, r4
 80129a0:	d105      	bne.n	80129ae <__libc_init_array+0x2e>
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80129a8:	4798      	blx	r3
 80129aa:	3501      	adds	r5, #1
 80129ac:	e7ee      	b.n	801298c <__libc_init_array+0xc>
 80129ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80129b2:	4798      	blx	r3
 80129b4:	3501      	adds	r5, #1
 80129b6:	e7f2      	b.n	801299e <__libc_init_array+0x1e>
 80129b8:	080181d4 	.word	0x080181d4
 80129bc:	080181d4 	.word	0x080181d4
 80129c0:	080181d4 	.word	0x080181d4
 80129c4:	080181dc 	.word	0x080181dc

080129c8 <memcpy>:
 80129c8:	b510      	push	{r4, lr}
 80129ca:	1e43      	subs	r3, r0, #1
 80129cc:	440a      	add	r2, r1
 80129ce:	4291      	cmp	r1, r2
 80129d0:	d100      	bne.n	80129d4 <memcpy+0xc>
 80129d2:	bd10      	pop	{r4, pc}
 80129d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129dc:	e7f7      	b.n	80129ce <memcpy+0x6>

080129de <memset>:
 80129de:	4402      	add	r2, r0
 80129e0:	4603      	mov	r3, r0
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d100      	bne.n	80129e8 <memset+0xa>
 80129e6:	4770      	bx	lr
 80129e8:	f803 1b01 	strb.w	r1, [r3], #1
 80129ec:	e7f9      	b.n	80129e2 <memset+0x4>

080129ee <__cvt>:
 80129ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129f2:	ec55 4b10 	vmov	r4, r5, d0
 80129f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80129f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80129fc:	2d00      	cmp	r5, #0
 80129fe:	460e      	mov	r6, r1
 8012a00:	4691      	mov	r9, r2
 8012a02:	4619      	mov	r1, r3
 8012a04:	bfb8      	it	lt
 8012a06:	4622      	movlt	r2, r4
 8012a08:	462b      	mov	r3, r5
 8012a0a:	f027 0720 	bic.w	r7, r7, #32
 8012a0e:	bfbb      	ittet	lt
 8012a10:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012a14:	461d      	movlt	r5, r3
 8012a16:	2300      	movge	r3, #0
 8012a18:	232d      	movlt	r3, #45	; 0x2d
 8012a1a:	bfb8      	it	lt
 8012a1c:	4614      	movlt	r4, r2
 8012a1e:	2f46      	cmp	r7, #70	; 0x46
 8012a20:	700b      	strb	r3, [r1, #0]
 8012a22:	d004      	beq.n	8012a2e <__cvt+0x40>
 8012a24:	2f45      	cmp	r7, #69	; 0x45
 8012a26:	d100      	bne.n	8012a2a <__cvt+0x3c>
 8012a28:	3601      	adds	r6, #1
 8012a2a:	2102      	movs	r1, #2
 8012a2c:	e000      	b.n	8012a30 <__cvt+0x42>
 8012a2e:	2103      	movs	r1, #3
 8012a30:	ab03      	add	r3, sp, #12
 8012a32:	9301      	str	r3, [sp, #4]
 8012a34:	ab02      	add	r3, sp, #8
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	4632      	mov	r2, r6
 8012a3a:	4653      	mov	r3, sl
 8012a3c:	ec45 4b10 	vmov	d0, r4, r5
 8012a40:	f001 ff9e 	bl	8014980 <_dtoa_r>
 8012a44:	2f47      	cmp	r7, #71	; 0x47
 8012a46:	4680      	mov	r8, r0
 8012a48:	d102      	bne.n	8012a50 <__cvt+0x62>
 8012a4a:	f019 0f01 	tst.w	r9, #1
 8012a4e:	d026      	beq.n	8012a9e <__cvt+0xb0>
 8012a50:	2f46      	cmp	r7, #70	; 0x46
 8012a52:	eb08 0906 	add.w	r9, r8, r6
 8012a56:	d111      	bne.n	8012a7c <__cvt+0x8e>
 8012a58:	f898 3000 	ldrb.w	r3, [r8]
 8012a5c:	2b30      	cmp	r3, #48	; 0x30
 8012a5e:	d10a      	bne.n	8012a76 <__cvt+0x88>
 8012a60:	2200      	movs	r2, #0
 8012a62:	2300      	movs	r3, #0
 8012a64:	4620      	mov	r0, r4
 8012a66:	4629      	mov	r1, r5
 8012a68:	f7ee f846 	bl	8000af8 <__aeabi_dcmpeq>
 8012a6c:	b918      	cbnz	r0, 8012a76 <__cvt+0x88>
 8012a6e:	f1c6 0601 	rsb	r6, r6, #1
 8012a72:	f8ca 6000 	str.w	r6, [sl]
 8012a76:	f8da 3000 	ldr.w	r3, [sl]
 8012a7a:	4499      	add	r9, r3
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	2300      	movs	r3, #0
 8012a80:	4620      	mov	r0, r4
 8012a82:	4629      	mov	r1, r5
 8012a84:	f7ee f838 	bl	8000af8 <__aeabi_dcmpeq>
 8012a88:	b938      	cbnz	r0, 8012a9a <__cvt+0xac>
 8012a8a:	2230      	movs	r2, #48	; 0x30
 8012a8c:	9b03      	ldr	r3, [sp, #12]
 8012a8e:	454b      	cmp	r3, r9
 8012a90:	d205      	bcs.n	8012a9e <__cvt+0xb0>
 8012a92:	1c59      	adds	r1, r3, #1
 8012a94:	9103      	str	r1, [sp, #12]
 8012a96:	701a      	strb	r2, [r3, #0]
 8012a98:	e7f8      	b.n	8012a8c <__cvt+0x9e>
 8012a9a:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a9e:	9b03      	ldr	r3, [sp, #12]
 8012aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012aa2:	eba3 0308 	sub.w	r3, r3, r8
 8012aa6:	4640      	mov	r0, r8
 8012aa8:	6013      	str	r3, [r2, #0]
 8012aaa:	b004      	add	sp, #16
 8012aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012ab0 <__exponent>:
 8012ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ab2:	2900      	cmp	r1, #0
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	bfba      	itte	lt
 8012ab8:	4249      	neglt	r1, r1
 8012aba:	232d      	movlt	r3, #45	; 0x2d
 8012abc:	232b      	movge	r3, #43	; 0x2b
 8012abe:	2909      	cmp	r1, #9
 8012ac0:	f804 2b02 	strb.w	r2, [r4], #2
 8012ac4:	7043      	strb	r3, [r0, #1]
 8012ac6:	dd20      	ble.n	8012b0a <__exponent+0x5a>
 8012ac8:	f10d 0307 	add.w	r3, sp, #7
 8012acc:	461f      	mov	r7, r3
 8012ace:	260a      	movs	r6, #10
 8012ad0:	fb91 f5f6 	sdiv	r5, r1, r6
 8012ad4:	fb06 1115 	mls	r1, r6, r5, r1
 8012ad8:	3130      	adds	r1, #48	; 0x30
 8012ada:	2d09      	cmp	r5, #9
 8012adc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012ae0:	f103 32ff 	add.w	r2, r3, #4294967295
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	dc09      	bgt.n	8012afc <__exponent+0x4c>
 8012ae8:	3130      	adds	r1, #48	; 0x30
 8012aea:	3b02      	subs	r3, #2
 8012aec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012af0:	42bb      	cmp	r3, r7
 8012af2:	4622      	mov	r2, r4
 8012af4:	d304      	bcc.n	8012b00 <__exponent+0x50>
 8012af6:	1a10      	subs	r0, r2, r0
 8012af8:	b003      	add	sp, #12
 8012afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012afc:	4613      	mov	r3, r2
 8012afe:	e7e7      	b.n	8012ad0 <__exponent+0x20>
 8012b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b04:	f804 2b01 	strb.w	r2, [r4], #1
 8012b08:	e7f2      	b.n	8012af0 <__exponent+0x40>
 8012b0a:	2330      	movs	r3, #48	; 0x30
 8012b0c:	4419      	add	r1, r3
 8012b0e:	7083      	strb	r3, [r0, #2]
 8012b10:	1d02      	adds	r2, r0, #4
 8012b12:	70c1      	strb	r1, [r0, #3]
 8012b14:	e7ef      	b.n	8012af6 <__exponent+0x46>
	...

08012b18 <_printf_float>:
 8012b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1c:	b08d      	sub	sp, #52	; 0x34
 8012b1e:	460c      	mov	r4, r1
 8012b20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012b24:	4616      	mov	r6, r2
 8012b26:	461f      	mov	r7, r3
 8012b28:	4605      	mov	r5, r0
 8012b2a:	f003 f995 	bl	8015e58 <_localeconv_r>
 8012b2e:	6803      	ldr	r3, [r0, #0]
 8012b30:	9304      	str	r3, [sp, #16]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ed fb64 	bl	8000200 <strlen>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8012b40:	9005      	str	r0, [sp, #20]
 8012b42:	3307      	adds	r3, #7
 8012b44:	f023 0307 	bic.w	r3, r3, #7
 8012b48:	f103 0208 	add.w	r2, r3, #8
 8012b4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012b50:	f8d4 b000 	ldr.w	fp, [r4]
 8012b54:	f8c8 2000 	str.w	r2, [r8]
 8012b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012b60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012b64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012b68:	9307      	str	r3, [sp, #28]
 8012b6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8012b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b72:	4ba7      	ldr	r3, [pc, #668]	; (8012e10 <_printf_float+0x2f8>)
 8012b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b78:	f7ed fff0 	bl	8000b5c <__aeabi_dcmpun>
 8012b7c:	bb70      	cbnz	r0, 8012bdc <_printf_float+0xc4>
 8012b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b82:	4ba3      	ldr	r3, [pc, #652]	; (8012e10 <_printf_float+0x2f8>)
 8012b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b88:	f7ed ffca 	bl	8000b20 <__aeabi_dcmple>
 8012b8c:	bb30      	cbnz	r0, 8012bdc <_printf_float+0xc4>
 8012b8e:	2200      	movs	r2, #0
 8012b90:	2300      	movs	r3, #0
 8012b92:	4640      	mov	r0, r8
 8012b94:	4649      	mov	r1, r9
 8012b96:	f7ed ffb9 	bl	8000b0c <__aeabi_dcmplt>
 8012b9a:	b110      	cbz	r0, 8012ba2 <_printf_float+0x8a>
 8012b9c:	232d      	movs	r3, #45	; 0x2d
 8012b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ba2:	4a9c      	ldr	r2, [pc, #624]	; (8012e14 <_printf_float+0x2fc>)
 8012ba4:	4b9c      	ldr	r3, [pc, #624]	; (8012e18 <_printf_float+0x300>)
 8012ba6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012baa:	bf8c      	ite	hi
 8012bac:	4690      	movhi	r8, r2
 8012bae:	4698      	movls	r8, r3
 8012bb0:	2303      	movs	r3, #3
 8012bb2:	f02b 0204 	bic.w	r2, fp, #4
 8012bb6:	6123      	str	r3, [r4, #16]
 8012bb8:	6022      	str	r2, [r4, #0]
 8012bba:	f04f 0900 	mov.w	r9, #0
 8012bbe:	9700      	str	r7, [sp, #0]
 8012bc0:	4633      	mov	r3, r6
 8012bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f000 f9e6 	bl	8012f98 <_printf_common>
 8012bcc:	3001      	adds	r0, #1
 8012bce:	f040 808d 	bne.w	8012cec <_printf_float+0x1d4>
 8012bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd6:	b00d      	add	sp, #52	; 0x34
 8012bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bdc:	4642      	mov	r2, r8
 8012bde:	464b      	mov	r3, r9
 8012be0:	4640      	mov	r0, r8
 8012be2:	4649      	mov	r1, r9
 8012be4:	f7ed ffba 	bl	8000b5c <__aeabi_dcmpun>
 8012be8:	b110      	cbz	r0, 8012bf0 <_printf_float+0xd8>
 8012bea:	4a8c      	ldr	r2, [pc, #560]	; (8012e1c <_printf_float+0x304>)
 8012bec:	4b8c      	ldr	r3, [pc, #560]	; (8012e20 <_printf_float+0x308>)
 8012bee:	e7da      	b.n	8012ba6 <_printf_float+0x8e>
 8012bf0:	6861      	ldr	r1, [r4, #4]
 8012bf2:	1c4b      	adds	r3, r1, #1
 8012bf4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012bf8:	a80a      	add	r0, sp, #40	; 0x28
 8012bfa:	d13e      	bne.n	8012c7a <_printf_float+0x162>
 8012bfc:	2306      	movs	r3, #6
 8012bfe:	6063      	str	r3, [r4, #4]
 8012c00:	2300      	movs	r3, #0
 8012c02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012c06:	ab09      	add	r3, sp, #36	; 0x24
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	ec49 8b10 	vmov	d0, r8, r9
 8012c0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012c12:	6022      	str	r2, [r4, #0]
 8012c14:	f8cd a004 	str.w	sl, [sp, #4]
 8012c18:	6861      	ldr	r1, [r4, #4]
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	f7ff fee7 	bl	80129ee <__cvt>
 8012c20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012c24:	2b47      	cmp	r3, #71	; 0x47
 8012c26:	4680      	mov	r8, r0
 8012c28:	d109      	bne.n	8012c3e <_printf_float+0x126>
 8012c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c2c:	1cd8      	adds	r0, r3, #3
 8012c2e:	db02      	blt.n	8012c36 <_printf_float+0x11e>
 8012c30:	6862      	ldr	r2, [r4, #4]
 8012c32:	4293      	cmp	r3, r2
 8012c34:	dd47      	ble.n	8012cc6 <_printf_float+0x1ae>
 8012c36:	f1aa 0a02 	sub.w	sl, sl, #2
 8012c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8012c3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c44:	d824      	bhi.n	8012c90 <_printf_float+0x178>
 8012c46:	3901      	subs	r1, #1
 8012c48:	4652      	mov	r2, sl
 8012c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012c4e:	9109      	str	r1, [sp, #36]	; 0x24
 8012c50:	f7ff ff2e 	bl	8012ab0 <__exponent>
 8012c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c56:	1813      	adds	r3, r2, r0
 8012c58:	2a01      	cmp	r2, #1
 8012c5a:	4681      	mov	r9, r0
 8012c5c:	6123      	str	r3, [r4, #16]
 8012c5e:	dc02      	bgt.n	8012c66 <_printf_float+0x14e>
 8012c60:	6822      	ldr	r2, [r4, #0]
 8012c62:	07d1      	lsls	r1, r2, #31
 8012c64:	d501      	bpl.n	8012c6a <_printf_float+0x152>
 8012c66:	3301      	adds	r3, #1
 8012c68:	6123      	str	r3, [r4, #16]
 8012c6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d0a5      	beq.n	8012bbe <_printf_float+0xa6>
 8012c72:	232d      	movs	r3, #45	; 0x2d
 8012c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c78:	e7a1      	b.n	8012bbe <_printf_float+0xa6>
 8012c7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012c7e:	f000 8177 	beq.w	8012f70 <_printf_float+0x458>
 8012c82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012c86:	d1bb      	bne.n	8012c00 <_printf_float+0xe8>
 8012c88:	2900      	cmp	r1, #0
 8012c8a:	d1b9      	bne.n	8012c00 <_printf_float+0xe8>
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	e7b6      	b.n	8012bfe <_printf_float+0xe6>
 8012c90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012c94:	d119      	bne.n	8012cca <_printf_float+0x1b2>
 8012c96:	2900      	cmp	r1, #0
 8012c98:	6863      	ldr	r3, [r4, #4]
 8012c9a:	dd0c      	ble.n	8012cb6 <_printf_float+0x19e>
 8012c9c:	6121      	str	r1, [r4, #16]
 8012c9e:	b913      	cbnz	r3, 8012ca6 <_printf_float+0x18e>
 8012ca0:	6822      	ldr	r2, [r4, #0]
 8012ca2:	07d2      	lsls	r2, r2, #31
 8012ca4:	d502      	bpl.n	8012cac <_printf_float+0x194>
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	440b      	add	r3, r1
 8012caa:	6123      	str	r3, [r4, #16]
 8012cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cae:	65a3      	str	r3, [r4, #88]	; 0x58
 8012cb0:	f04f 0900 	mov.w	r9, #0
 8012cb4:	e7d9      	b.n	8012c6a <_printf_float+0x152>
 8012cb6:	b913      	cbnz	r3, 8012cbe <_printf_float+0x1a6>
 8012cb8:	6822      	ldr	r2, [r4, #0]
 8012cba:	07d0      	lsls	r0, r2, #31
 8012cbc:	d501      	bpl.n	8012cc2 <_printf_float+0x1aa>
 8012cbe:	3302      	adds	r3, #2
 8012cc0:	e7f3      	b.n	8012caa <_printf_float+0x192>
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	e7f1      	b.n	8012caa <_printf_float+0x192>
 8012cc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012cca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012cce:	4293      	cmp	r3, r2
 8012cd0:	db05      	blt.n	8012cde <_printf_float+0x1c6>
 8012cd2:	6822      	ldr	r2, [r4, #0]
 8012cd4:	6123      	str	r3, [r4, #16]
 8012cd6:	07d1      	lsls	r1, r2, #31
 8012cd8:	d5e8      	bpl.n	8012cac <_printf_float+0x194>
 8012cda:	3301      	adds	r3, #1
 8012cdc:	e7e5      	b.n	8012caa <_printf_float+0x192>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	bfd4      	ite	le
 8012ce2:	f1c3 0302 	rsble	r3, r3, #2
 8012ce6:	2301      	movgt	r3, #1
 8012ce8:	4413      	add	r3, r2
 8012cea:	e7de      	b.n	8012caa <_printf_float+0x192>
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	055a      	lsls	r2, r3, #21
 8012cf0:	d407      	bmi.n	8012d02 <_printf_float+0x1ea>
 8012cf2:	6923      	ldr	r3, [r4, #16]
 8012cf4:	4642      	mov	r2, r8
 8012cf6:	4631      	mov	r1, r6
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	47b8      	blx	r7
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d12b      	bne.n	8012d58 <_printf_float+0x240>
 8012d00:	e767      	b.n	8012bd2 <_printf_float+0xba>
 8012d02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012d06:	f240 80dc 	bls.w	8012ec2 <_printf_float+0x3aa>
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d12:	f7ed fef1 	bl	8000af8 <__aeabi_dcmpeq>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d033      	beq.n	8012d82 <_printf_float+0x26a>
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	4a41      	ldr	r2, [pc, #260]	; (8012e24 <_printf_float+0x30c>)
 8012d1e:	4631      	mov	r1, r6
 8012d20:	4628      	mov	r0, r5
 8012d22:	47b8      	blx	r7
 8012d24:	3001      	adds	r0, #1
 8012d26:	f43f af54 	beq.w	8012bd2 <_printf_float+0xba>
 8012d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	db02      	blt.n	8012d38 <_printf_float+0x220>
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	07d8      	lsls	r0, r3, #31
 8012d36:	d50f      	bpl.n	8012d58 <_printf_float+0x240>
 8012d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d3c:	4631      	mov	r1, r6
 8012d3e:	4628      	mov	r0, r5
 8012d40:	47b8      	blx	r7
 8012d42:	3001      	adds	r0, #1
 8012d44:	f43f af45 	beq.w	8012bd2 <_printf_float+0xba>
 8012d48:	f04f 0800 	mov.w	r8, #0
 8012d4c:	f104 091a 	add.w	r9, r4, #26
 8012d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d52:	3b01      	subs	r3, #1
 8012d54:	4543      	cmp	r3, r8
 8012d56:	dc09      	bgt.n	8012d6c <_printf_float+0x254>
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	079b      	lsls	r3, r3, #30
 8012d5c:	f100 8103 	bmi.w	8012f66 <_printf_float+0x44e>
 8012d60:	68e0      	ldr	r0, [r4, #12]
 8012d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d64:	4298      	cmp	r0, r3
 8012d66:	bfb8      	it	lt
 8012d68:	4618      	movlt	r0, r3
 8012d6a:	e734      	b.n	8012bd6 <_printf_float+0xbe>
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	464a      	mov	r2, r9
 8012d70:	4631      	mov	r1, r6
 8012d72:	4628      	mov	r0, r5
 8012d74:	47b8      	blx	r7
 8012d76:	3001      	adds	r0, #1
 8012d78:	f43f af2b 	beq.w	8012bd2 <_printf_float+0xba>
 8012d7c:	f108 0801 	add.w	r8, r8, #1
 8012d80:	e7e6      	b.n	8012d50 <_printf_float+0x238>
 8012d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	dc2b      	bgt.n	8012de0 <_printf_float+0x2c8>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	4a26      	ldr	r2, [pc, #152]	; (8012e24 <_printf_float+0x30c>)
 8012d8c:	4631      	mov	r1, r6
 8012d8e:	4628      	mov	r0, r5
 8012d90:	47b8      	blx	r7
 8012d92:	3001      	adds	r0, #1
 8012d94:	f43f af1d 	beq.w	8012bd2 <_printf_float+0xba>
 8012d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9a:	b923      	cbnz	r3, 8012da6 <_printf_float+0x28e>
 8012d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d9e:	b913      	cbnz	r3, 8012da6 <_printf_float+0x28e>
 8012da0:	6823      	ldr	r3, [r4, #0]
 8012da2:	07d9      	lsls	r1, r3, #31
 8012da4:	d5d8      	bpl.n	8012d58 <_printf_float+0x240>
 8012da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012daa:	4631      	mov	r1, r6
 8012dac:	4628      	mov	r0, r5
 8012dae:	47b8      	blx	r7
 8012db0:	3001      	adds	r0, #1
 8012db2:	f43f af0e 	beq.w	8012bd2 <_printf_float+0xba>
 8012db6:	f04f 0900 	mov.w	r9, #0
 8012dba:	f104 0a1a 	add.w	sl, r4, #26
 8012dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc0:	425b      	negs	r3, r3
 8012dc2:	454b      	cmp	r3, r9
 8012dc4:	dc01      	bgt.n	8012dca <_printf_float+0x2b2>
 8012dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc8:	e794      	b.n	8012cf4 <_printf_float+0x1dc>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	4652      	mov	r2, sl
 8012dce:	4631      	mov	r1, r6
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	47b8      	blx	r7
 8012dd4:	3001      	adds	r0, #1
 8012dd6:	f43f aefc 	beq.w	8012bd2 <_printf_float+0xba>
 8012dda:	f109 0901 	add.w	r9, r9, #1
 8012dde:	e7ee      	b.n	8012dbe <_printf_float+0x2a6>
 8012de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012de4:	429a      	cmp	r2, r3
 8012de6:	bfa8      	it	ge
 8012de8:	461a      	movge	r2, r3
 8012dea:	2a00      	cmp	r2, #0
 8012dec:	4691      	mov	r9, r2
 8012dee:	dd07      	ble.n	8012e00 <_printf_float+0x2e8>
 8012df0:	4613      	mov	r3, r2
 8012df2:	4631      	mov	r1, r6
 8012df4:	4642      	mov	r2, r8
 8012df6:	4628      	mov	r0, r5
 8012df8:	47b8      	blx	r7
 8012dfa:	3001      	adds	r0, #1
 8012dfc:	f43f aee9 	beq.w	8012bd2 <_printf_float+0xba>
 8012e00:	f104 031a 	add.w	r3, r4, #26
 8012e04:	f04f 0b00 	mov.w	fp, #0
 8012e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e0c:	9306      	str	r3, [sp, #24]
 8012e0e:	e015      	b.n	8012e3c <_printf_float+0x324>
 8012e10:	7fefffff 	.word	0x7fefffff
 8012e14:	08017e98 	.word	0x08017e98
 8012e18:	08017e94 	.word	0x08017e94
 8012e1c:	08017ea0 	.word	0x08017ea0
 8012e20:	08017e9c 	.word	0x08017e9c
 8012e24:	080180c3 	.word	0x080180c3
 8012e28:	2301      	movs	r3, #1
 8012e2a:	9a06      	ldr	r2, [sp, #24]
 8012e2c:	4631      	mov	r1, r6
 8012e2e:	4628      	mov	r0, r5
 8012e30:	47b8      	blx	r7
 8012e32:	3001      	adds	r0, #1
 8012e34:	f43f aecd 	beq.w	8012bd2 <_printf_float+0xba>
 8012e38:	f10b 0b01 	add.w	fp, fp, #1
 8012e3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012e40:	ebaa 0309 	sub.w	r3, sl, r9
 8012e44:	455b      	cmp	r3, fp
 8012e46:	dcef      	bgt.n	8012e28 <_printf_float+0x310>
 8012e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	44d0      	add	r8, sl
 8012e50:	db15      	blt.n	8012e7e <_printf_float+0x366>
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	07da      	lsls	r2, r3, #31
 8012e56:	d412      	bmi.n	8012e7e <_printf_float+0x366>
 8012e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e5c:	eba3 020a 	sub.w	r2, r3, sl
 8012e60:	eba3 0a01 	sub.w	sl, r3, r1
 8012e64:	4592      	cmp	sl, r2
 8012e66:	bfa8      	it	ge
 8012e68:	4692      	movge	sl, r2
 8012e6a:	f1ba 0f00 	cmp.w	sl, #0
 8012e6e:	dc0e      	bgt.n	8012e8e <_printf_float+0x376>
 8012e70:	f04f 0800 	mov.w	r8, #0
 8012e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e78:	f104 091a 	add.w	r9, r4, #26
 8012e7c:	e019      	b.n	8012eb2 <_printf_float+0x39a>
 8012e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e82:	4631      	mov	r1, r6
 8012e84:	4628      	mov	r0, r5
 8012e86:	47b8      	blx	r7
 8012e88:	3001      	adds	r0, #1
 8012e8a:	d1e5      	bne.n	8012e58 <_printf_float+0x340>
 8012e8c:	e6a1      	b.n	8012bd2 <_printf_float+0xba>
 8012e8e:	4653      	mov	r3, sl
 8012e90:	4642      	mov	r2, r8
 8012e92:	4631      	mov	r1, r6
 8012e94:	4628      	mov	r0, r5
 8012e96:	47b8      	blx	r7
 8012e98:	3001      	adds	r0, #1
 8012e9a:	d1e9      	bne.n	8012e70 <_printf_float+0x358>
 8012e9c:	e699      	b.n	8012bd2 <_printf_float+0xba>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	464a      	mov	r2, r9
 8012ea2:	4631      	mov	r1, r6
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	47b8      	blx	r7
 8012ea8:	3001      	adds	r0, #1
 8012eaa:	f43f ae92 	beq.w	8012bd2 <_printf_float+0xba>
 8012eae:	f108 0801 	add.w	r8, r8, #1
 8012eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012eb6:	1a9b      	subs	r3, r3, r2
 8012eb8:	eba3 030a 	sub.w	r3, r3, sl
 8012ebc:	4543      	cmp	r3, r8
 8012ebe:	dcee      	bgt.n	8012e9e <_printf_float+0x386>
 8012ec0:	e74a      	b.n	8012d58 <_printf_float+0x240>
 8012ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ec4:	2a01      	cmp	r2, #1
 8012ec6:	dc01      	bgt.n	8012ecc <_printf_float+0x3b4>
 8012ec8:	07db      	lsls	r3, r3, #31
 8012eca:	d53a      	bpl.n	8012f42 <_printf_float+0x42a>
 8012ecc:	2301      	movs	r3, #1
 8012ece:	4642      	mov	r2, r8
 8012ed0:	4631      	mov	r1, r6
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	47b8      	blx	r7
 8012ed6:	3001      	adds	r0, #1
 8012ed8:	f43f ae7b 	beq.w	8012bd2 <_printf_float+0xba>
 8012edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ee0:	4631      	mov	r1, r6
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	47b8      	blx	r7
 8012ee6:	3001      	adds	r0, #1
 8012ee8:	f108 0801 	add.w	r8, r8, #1
 8012eec:	f43f ae71 	beq.w	8012bd2 <_printf_float+0xba>
 8012ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f103 3aff 	add.w	sl, r3, #4294967295
 8012ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012efc:	2300      	movs	r3, #0
 8012efe:	f7ed fdfb 	bl	8000af8 <__aeabi_dcmpeq>
 8012f02:	b9c8      	cbnz	r0, 8012f38 <_printf_float+0x420>
 8012f04:	4653      	mov	r3, sl
 8012f06:	4642      	mov	r2, r8
 8012f08:	4631      	mov	r1, r6
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	47b8      	blx	r7
 8012f0e:	3001      	adds	r0, #1
 8012f10:	d10e      	bne.n	8012f30 <_printf_float+0x418>
 8012f12:	e65e      	b.n	8012bd2 <_printf_float+0xba>
 8012f14:	2301      	movs	r3, #1
 8012f16:	4652      	mov	r2, sl
 8012f18:	4631      	mov	r1, r6
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	47b8      	blx	r7
 8012f1e:	3001      	adds	r0, #1
 8012f20:	f43f ae57 	beq.w	8012bd2 <_printf_float+0xba>
 8012f24:	f108 0801 	add.w	r8, r8, #1
 8012f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	4543      	cmp	r3, r8
 8012f2e:	dcf1      	bgt.n	8012f14 <_printf_float+0x3fc>
 8012f30:	464b      	mov	r3, r9
 8012f32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012f36:	e6de      	b.n	8012cf6 <_printf_float+0x1de>
 8012f38:	f04f 0800 	mov.w	r8, #0
 8012f3c:	f104 0a1a 	add.w	sl, r4, #26
 8012f40:	e7f2      	b.n	8012f28 <_printf_float+0x410>
 8012f42:	2301      	movs	r3, #1
 8012f44:	e7df      	b.n	8012f06 <_printf_float+0x3ee>
 8012f46:	2301      	movs	r3, #1
 8012f48:	464a      	mov	r2, r9
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	47b8      	blx	r7
 8012f50:	3001      	adds	r0, #1
 8012f52:	f43f ae3e 	beq.w	8012bd2 <_printf_float+0xba>
 8012f56:	f108 0801 	add.w	r8, r8, #1
 8012f5a:	68e3      	ldr	r3, [r4, #12]
 8012f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f5e:	1a9b      	subs	r3, r3, r2
 8012f60:	4543      	cmp	r3, r8
 8012f62:	dcf0      	bgt.n	8012f46 <_printf_float+0x42e>
 8012f64:	e6fc      	b.n	8012d60 <_printf_float+0x248>
 8012f66:	f04f 0800 	mov.w	r8, #0
 8012f6a:	f104 0919 	add.w	r9, r4, #25
 8012f6e:	e7f4      	b.n	8012f5a <_printf_float+0x442>
 8012f70:	2900      	cmp	r1, #0
 8012f72:	f43f ae8b 	beq.w	8012c8c <_printf_float+0x174>
 8012f76:	2300      	movs	r3, #0
 8012f78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012f7c:	ab09      	add	r3, sp, #36	; 0x24
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	ec49 8b10 	vmov	d0, r8, r9
 8012f84:	6022      	str	r2, [r4, #0]
 8012f86:	f8cd a004 	str.w	sl, [sp, #4]
 8012f8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f7ff fd2d 	bl	80129ee <__cvt>
 8012f94:	4680      	mov	r8, r0
 8012f96:	e648      	b.n	8012c2a <_printf_float+0x112>

08012f98 <_printf_common>:
 8012f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f9c:	4691      	mov	r9, r2
 8012f9e:	461f      	mov	r7, r3
 8012fa0:	688a      	ldr	r2, [r1, #8]
 8012fa2:	690b      	ldr	r3, [r1, #16]
 8012fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	bfb8      	it	lt
 8012fac:	4613      	movlt	r3, r2
 8012fae:	f8c9 3000 	str.w	r3, [r9]
 8012fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	460c      	mov	r4, r1
 8012fba:	b112      	cbz	r2, 8012fc2 <_printf_common+0x2a>
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	f8c9 3000 	str.w	r3, [r9]
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	0699      	lsls	r1, r3, #26
 8012fc6:	bf42      	ittt	mi
 8012fc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012fcc:	3302      	addmi	r3, #2
 8012fce:	f8c9 3000 	strmi.w	r3, [r9]
 8012fd2:	6825      	ldr	r5, [r4, #0]
 8012fd4:	f015 0506 	ands.w	r5, r5, #6
 8012fd8:	d107      	bne.n	8012fea <_printf_common+0x52>
 8012fda:	f104 0a19 	add.w	sl, r4, #25
 8012fde:	68e3      	ldr	r3, [r4, #12]
 8012fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8012fe4:	1a9b      	subs	r3, r3, r2
 8012fe6:	42ab      	cmp	r3, r5
 8012fe8:	dc28      	bgt.n	801303c <_printf_common+0xa4>
 8012fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012fee:	6822      	ldr	r2, [r4, #0]
 8012ff0:	3300      	adds	r3, #0
 8012ff2:	bf18      	it	ne
 8012ff4:	2301      	movne	r3, #1
 8012ff6:	0692      	lsls	r2, r2, #26
 8012ff8:	d42d      	bmi.n	8013056 <_printf_common+0xbe>
 8012ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ffe:	4639      	mov	r1, r7
 8013000:	4630      	mov	r0, r6
 8013002:	47c0      	blx	r8
 8013004:	3001      	adds	r0, #1
 8013006:	d020      	beq.n	801304a <_printf_common+0xb2>
 8013008:	6823      	ldr	r3, [r4, #0]
 801300a:	68e5      	ldr	r5, [r4, #12]
 801300c:	f8d9 2000 	ldr.w	r2, [r9]
 8013010:	f003 0306 	and.w	r3, r3, #6
 8013014:	2b04      	cmp	r3, #4
 8013016:	bf08      	it	eq
 8013018:	1aad      	subeq	r5, r5, r2
 801301a:	68a3      	ldr	r3, [r4, #8]
 801301c:	6922      	ldr	r2, [r4, #16]
 801301e:	bf0c      	ite	eq
 8013020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013024:	2500      	movne	r5, #0
 8013026:	4293      	cmp	r3, r2
 8013028:	bfc4      	itt	gt
 801302a:	1a9b      	subgt	r3, r3, r2
 801302c:	18ed      	addgt	r5, r5, r3
 801302e:	f04f 0900 	mov.w	r9, #0
 8013032:	341a      	adds	r4, #26
 8013034:	454d      	cmp	r5, r9
 8013036:	d11a      	bne.n	801306e <_printf_common+0xd6>
 8013038:	2000      	movs	r0, #0
 801303a:	e008      	b.n	801304e <_printf_common+0xb6>
 801303c:	2301      	movs	r3, #1
 801303e:	4652      	mov	r2, sl
 8013040:	4639      	mov	r1, r7
 8013042:	4630      	mov	r0, r6
 8013044:	47c0      	blx	r8
 8013046:	3001      	adds	r0, #1
 8013048:	d103      	bne.n	8013052 <_printf_common+0xba>
 801304a:	f04f 30ff 	mov.w	r0, #4294967295
 801304e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013052:	3501      	adds	r5, #1
 8013054:	e7c3      	b.n	8012fde <_printf_common+0x46>
 8013056:	18e1      	adds	r1, r4, r3
 8013058:	1c5a      	adds	r2, r3, #1
 801305a:	2030      	movs	r0, #48	; 0x30
 801305c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013060:	4422      	add	r2, r4
 8013062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801306a:	3302      	adds	r3, #2
 801306c:	e7c5      	b.n	8012ffa <_printf_common+0x62>
 801306e:	2301      	movs	r3, #1
 8013070:	4622      	mov	r2, r4
 8013072:	4639      	mov	r1, r7
 8013074:	4630      	mov	r0, r6
 8013076:	47c0      	blx	r8
 8013078:	3001      	adds	r0, #1
 801307a:	d0e6      	beq.n	801304a <_printf_common+0xb2>
 801307c:	f109 0901 	add.w	r9, r9, #1
 8013080:	e7d8      	b.n	8013034 <_printf_common+0x9c>
	...

08013084 <_printf_i>:
 8013084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801308c:	460c      	mov	r4, r1
 801308e:	7e09      	ldrb	r1, [r1, #24]
 8013090:	b085      	sub	sp, #20
 8013092:	296e      	cmp	r1, #110	; 0x6e
 8013094:	4617      	mov	r7, r2
 8013096:	4606      	mov	r6, r0
 8013098:	4698      	mov	r8, r3
 801309a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801309c:	f000 80b3 	beq.w	8013206 <_printf_i+0x182>
 80130a0:	d822      	bhi.n	80130e8 <_printf_i+0x64>
 80130a2:	2963      	cmp	r1, #99	; 0x63
 80130a4:	d036      	beq.n	8013114 <_printf_i+0x90>
 80130a6:	d80a      	bhi.n	80130be <_printf_i+0x3a>
 80130a8:	2900      	cmp	r1, #0
 80130aa:	f000 80b9 	beq.w	8013220 <_printf_i+0x19c>
 80130ae:	2958      	cmp	r1, #88	; 0x58
 80130b0:	f000 8083 	beq.w	80131ba <_printf_i+0x136>
 80130b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80130bc:	e032      	b.n	8013124 <_printf_i+0xa0>
 80130be:	2964      	cmp	r1, #100	; 0x64
 80130c0:	d001      	beq.n	80130c6 <_printf_i+0x42>
 80130c2:	2969      	cmp	r1, #105	; 0x69
 80130c4:	d1f6      	bne.n	80130b4 <_printf_i+0x30>
 80130c6:	6820      	ldr	r0, [r4, #0]
 80130c8:	6813      	ldr	r3, [r2, #0]
 80130ca:	0605      	lsls	r5, r0, #24
 80130cc:	f103 0104 	add.w	r1, r3, #4
 80130d0:	d52a      	bpl.n	8013128 <_printf_i+0xa4>
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	6011      	str	r1, [r2, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	da03      	bge.n	80130e2 <_printf_i+0x5e>
 80130da:	222d      	movs	r2, #45	; 0x2d
 80130dc:	425b      	negs	r3, r3
 80130de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80130e2:	486f      	ldr	r0, [pc, #444]	; (80132a0 <_printf_i+0x21c>)
 80130e4:	220a      	movs	r2, #10
 80130e6:	e039      	b.n	801315c <_printf_i+0xd8>
 80130e8:	2973      	cmp	r1, #115	; 0x73
 80130ea:	f000 809d 	beq.w	8013228 <_printf_i+0x1a4>
 80130ee:	d808      	bhi.n	8013102 <_printf_i+0x7e>
 80130f0:	296f      	cmp	r1, #111	; 0x6f
 80130f2:	d020      	beq.n	8013136 <_printf_i+0xb2>
 80130f4:	2970      	cmp	r1, #112	; 0x70
 80130f6:	d1dd      	bne.n	80130b4 <_printf_i+0x30>
 80130f8:	6823      	ldr	r3, [r4, #0]
 80130fa:	f043 0320 	orr.w	r3, r3, #32
 80130fe:	6023      	str	r3, [r4, #0]
 8013100:	e003      	b.n	801310a <_printf_i+0x86>
 8013102:	2975      	cmp	r1, #117	; 0x75
 8013104:	d017      	beq.n	8013136 <_printf_i+0xb2>
 8013106:	2978      	cmp	r1, #120	; 0x78
 8013108:	d1d4      	bne.n	80130b4 <_printf_i+0x30>
 801310a:	2378      	movs	r3, #120	; 0x78
 801310c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013110:	4864      	ldr	r0, [pc, #400]	; (80132a4 <_printf_i+0x220>)
 8013112:	e055      	b.n	80131c0 <_printf_i+0x13c>
 8013114:	6813      	ldr	r3, [r2, #0]
 8013116:	1d19      	adds	r1, r3, #4
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6011      	str	r1, [r2, #0]
 801311c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013124:	2301      	movs	r3, #1
 8013126:	e08c      	b.n	8013242 <_printf_i+0x1be>
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	6011      	str	r1, [r2, #0]
 801312c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013130:	bf18      	it	ne
 8013132:	b21b      	sxthne	r3, r3
 8013134:	e7cf      	b.n	80130d6 <_printf_i+0x52>
 8013136:	6813      	ldr	r3, [r2, #0]
 8013138:	6825      	ldr	r5, [r4, #0]
 801313a:	1d18      	adds	r0, r3, #4
 801313c:	6010      	str	r0, [r2, #0]
 801313e:	0628      	lsls	r0, r5, #24
 8013140:	d501      	bpl.n	8013146 <_printf_i+0xc2>
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	e002      	b.n	801314c <_printf_i+0xc8>
 8013146:	0668      	lsls	r0, r5, #25
 8013148:	d5fb      	bpl.n	8013142 <_printf_i+0xbe>
 801314a:	881b      	ldrh	r3, [r3, #0]
 801314c:	4854      	ldr	r0, [pc, #336]	; (80132a0 <_printf_i+0x21c>)
 801314e:	296f      	cmp	r1, #111	; 0x6f
 8013150:	bf14      	ite	ne
 8013152:	220a      	movne	r2, #10
 8013154:	2208      	moveq	r2, #8
 8013156:	2100      	movs	r1, #0
 8013158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801315c:	6865      	ldr	r5, [r4, #4]
 801315e:	60a5      	str	r5, [r4, #8]
 8013160:	2d00      	cmp	r5, #0
 8013162:	f2c0 8095 	blt.w	8013290 <_printf_i+0x20c>
 8013166:	6821      	ldr	r1, [r4, #0]
 8013168:	f021 0104 	bic.w	r1, r1, #4
 801316c:	6021      	str	r1, [r4, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d13d      	bne.n	80131ee <_printf_i+0x16a>
 8013172:	2d00      	cmp	r5, #0
 8013174:	f040 808e 	bne.w	8013294 <_printf_i+0x210>
 8013178:	4665      	mov	r5, ip
 801317a:	2a08      	cmp	r2, #8
 801317c:	d10b      	bne.n	8013196 <_printf_i+0x112>
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	07db      	lsls	r3, r3, #31
 8013182:	d508      	bpl.n	8013196 <_printf_i+0x112>
 8013184:	6923      	ldr	r3, [r4, #16]
 8013186:	6862      	ldr	r2, [r4, #4]
 8013188:	429a      	cmp	r2, r3
 801318a:	bfde      	ittt	le
 801318c:	2330      	movle	r3, #48	; 0x30
 801318e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013192:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013196:	ebac 0305 	sub.w	r3, ip, r5
 801319a:	6123      	str	r3, [r4, #16]
 801319c:	f8cd 8000 	str.w	r8, [sp]
 80131a0:	463b      	mov	r3, r7
 80131a2:	aa03      	add	r2, sp, #12
 80131a4:	4621      	mov	r1, r4
 80131a6:	4630      	mov	r0, r6
 80131a8:	f7ff fef6 	bl	8012f98 <_printf_common>
 80131ac:	3001      	adds	r0, #1
 80131ae:	d14d      	bne.n	801324c <_printf_i+0x1c8>
 80131b0:	f04f 30ff 	mov.w	r0, #4294967295
 80131b4:	b005      	add	sp, #20
 80131b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131ba:	4839      	ldr	r0, [pc, #228]	; (80132a0 <_printf_i+0x21c>)
 80131bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80131c0:	6813      	ldr	r3, [r2, #0]
 80131c2:	6821      	ldr	r1, [r4, #0]
 80131c4:	1d1d      	adds	r5, r3, #4
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	6015      	str	r5, [r2, #0]
 80131ca:	060a      	lsls	r2, r1, #24
 80131cc:	d50b      	bpl.n	80131e6 <_printf_i+0x162>
 80131ce:	07ca      	lsls	r2, r1, #31
 80131d0:	bf44      	itt	mi
 80131d2:	f041 0120 	orrmi.w	r1, r1, #32
 80131d6:	6021      	strmi	r1, [r4, #0]
 80131d8:	b91b      	cbnz	r3, 80131e2 <_printf_i+0x15e>
 80131da:	6822      	ldr	r2, [r4, #0]
 80131dc:	f022 0220 	bic.w	r2, r2, #32
 80131e0:	6022      	str	r2, [r4, #0]
 80131e2:	2210      	movs	r2, #16
 80131e4:	e7b7      	b.n	8013156 <_printf_i+0xd2>
 80131e6:	064d      	lsls	r5, r1, #25
 80131e8:	bf48      	it	mi
 80131ea:	b29b      	uxthmi	r3, r3
 80131ec:	e7ef      	b.n	80131ce <_printf_i+0x14a>
 80131ee:	4665      	mov	r5, ip
 80131f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80131f4:	fb02 3311 	mls	r3, r2, r1, r3
 80131f8:	5cc3      	ldrb	r3, [r0, r3]
 80131fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80131fe:	460b      	mov	r3, r1
 8013200:	2900      	cmp	r1, #0
 8013202:	d1f5      	bne.n	80131f0 <_printf_i+0x16c>
 8013204:	e7b9      	b.n	801317a <_printf_i+0xf6>
 8013206:	6813      	ldr	r3, [r2, #0]
 8013208:	6825      	ldr	r5, [r4, #0]
 801320a:	6961      	ldr	r1, [r4, #20]
 801320c:	1d18      	adds	r0, r3, #4
 801320e:	6010      	str	r0, [r2, #0]
 8013210:	0628      	lsls	r0, r5, #24
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	d501      	bpl.n	801321a <_printf_i+0x196>
 8013216:	6019      	str	r1, [r3, #0]
 8013218:	e002      	b.n	8013220 <_printf_i+0x19c>
 801321a:	066a      	lsls	r2, r5, #25
 801321c:	d5fb      	bpl.n	8013216 <_printf_i+0x192>
 801321e:	8019      	strh	r1, [r3, #0]
 8013220:	2300      	movs	r3, #0
 8013222:	6123      	str	r3, [r4, #16]
 8013224:	4665      	mov	r5, ip
 8013226:	e7b9      	b.n	801319c <_printf_i+0x118>
 8013228:	6813      	ldr	r3, [r2, #0]
 801322a:	1d19      	adds	r1, r3, #4
 801322c:	6011      	str	r1, [r2, #0]
 801322e:	681d      	ldr	r5, [r3, #0]
 8013230:	6862      	ldr	r2, [r4, #4]
 8013232:	2100      	movs	r1, #0
 8013234:	4628      	mov	r0, r5
 8013236:	f7ec ffeb 	bl	8000210 <memchr>
 801323a:	b108      	cbz	r0, 8013240 <_printf_i+0x1bc>
 801323c:	1b40      	subs	r0, r0, r5
 801323e:	6060      	str	r0, [r4, #4]
 8013240:	6863      	ldr	r3, [r4, #4]
 8013242:	6123      	str	r3, [r4, #16]
 8013244:	2300      	movs	r3, #0
 8013246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801324a:	e7a7      	b.n	801319c <_printf_i+0x118>
 801324c:	6923      	ldr	r3, [r4, #16]
 801324e:	462a      	mov	r2, r5
 8013250:	4639      	mov	r1, r7
 8013252:	4630      	mov	r0, r6
 8013254:	47c0      	blx	r8
 8013256:	3001      	adds	r0, #1
 8013258:	d0aa      	beq.n	80131b0 <_printf_i+0x12c>
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	079b      	lsls	r3, r3, #30
 801325e:	d413      	bmi.n	8013288 <_printf_i+0x204>
 8013260:	68e0      	ldr	r0, [r4, #12]
 8013262:	9b03      	ldr	r3, [sp, #12]
 8013264:	4298      	cmp	r0, r3
 8013266:	bfb8      	it	lt
 8013268:	4618      	movlt	r0, r3
 801326a:	e7a3      	b.n	80131b4 <_printf_i+0x130>
 801326c:	2301      	movs	r3, #1
 801326e:	464a      	mov	r2, r9
 8013270:	4639      	mov	r1, r7
 8013272:	4630      	mov	r0, r6
 8013274:	47c0      	blx	r8
 8013276:	3001      	adds	r0, #1
 8013278:	d09a      	beq.n	80131b0 <_printf_i+0x12c>
 801327a:	3501      	adds	r5, #1
 801327c:	68e3      	ldr	r3, [r4, #12]
 801327e:	9a03      	ldr	r2, [sp, #12]
 8013280:	1a9b      	subs	r3, r3, r2
 8013282:	42ab      	cmp	r3, r5
 8013284:	dcf2      	bgt.n	801326c <_printf_i+0x1e8>
 8013286:	e7eb      	b.n	8013260 <_printf_i+0x1dc>
 8013288:	2500      	movs	r5, #0
 801328a:	f104 0919 	add.w	r9, r4, #25
 801328e:	e7f5      	b.n	801327c <_printf_i+0x1f8>
 8013290:	2b00      	cmp	r3, #0
 8013292:	d1ac      	bne.n	80131ee <_printf_i+0x16a>
 8013294:	7803      	ldrb	r3, [r0, #0]
 8013296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801329a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801329e:	e76c      	b.n	801317a <_printf_i+0xf6>
 80132a0:	08017ea4 	.word	0x08017ea4
 80132a4:	08017eb5 	.word	0x08017eb5

080132a8 <_scanf_float>:
 80132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ac:	469a      	mov	sl, r3
 80132ae:	688b      	ldr	r3, [r1, #8]
 80132b0:	4616      	mov	r6, r2
 80132b2:	1e5a      	subs	r2, r3, #1
 80132b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80132b8:	b087      	sub	sp, #28
 80132ba:	bf83      	ittte	hi
 80132bc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80132c0:	189b      	addhi	r3, r3, r2
 80132c2:	9301      	strhi	r3, [sp, #4]
 80132c4:	2300      	movls	r3, #0
 80132c6:	bf86      	itte	hi
 80132c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80132cc:	608b      	strhi	r3, [r1, #8]
 80132ce:	9301      	strls	r3, [sp, #4]
 80132d0:	680b      	ldr	r3, [r1, #0]
 80132d2:	4688      	mov	r8, r1
 80132d4:	f04f 0b00 	mov.w	fp, #0
 80132d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80132dc:	f848 3b1c 	str.w	r3, [r8], #28
 80132e0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80132e4:	4607      	mov	r7, r0
 80132e6:	460c      	mov	r4, r1
 80132e8:	4645      	mov	r5, r8
 80132ea:	465a      	mov	r2, fp
 80132ec:	46d9      	mov	r9, fp
 80132ee:	f8cd b008 	str.w	fp, [sp, #8]
 80132f2:	68a1      	ldr	r1, [r4, #8]
 80132f4:	b181      	cbz	r1, 8013318 <_scanf_float+0x70>
 80132f6:	6833      	ldr	r3, [r6, #0]
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	2b49      	cmp	r3, #73	; 0x49
 80132fc:	d071      	beq.n	80133e2 <_scanf_float+0x13a>
 80132fe:	d84d      	bhi.n	801339c <_scanf_float+0xf4>
 8013300:	2b39      	cmp	r3, #57	; 0x39
 8013302:	d840      	bhi.n	8013386 <_scanf_float+0xde>
 8013304:	2b31      	cmp	r3, #49	; 0x31
 8013306:	f080 8088 	bcs.w	801341a <_scanf_float+0x172>
 801330a:	2b2d      	cmp	r3, #45	; 0x2d
 801330c:	f000 8090 	beq.w	8013430 <_scanf_float+0x188>
 8013310:	d815      	bhi.n	801333e <_scanf_float+0x96>
 8013312:	2b2b      	cmp	r3, #43	; 0x2b
 8013314:	f000 808c 	beq.w	8013430 <_scanf_float+0x188>
 8013318:	f1b9 0f00 	cmp.w	r9, #0
 801331c:	d003      	beq.n	8013326 <_scanf_float+0x7e>
 801331e:	6823      	ldr	r3, [r4, #0]
 8013320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013324:	6023      	str	r3, [r4, #0]
 8013326:	3a01      	subs	r2, #1
 8013328:	2a01      	cmp	r2, #1
 801332a:	f200 80ea 	bhi.w	8013502 <_scanf_float+0x25a>
 801332e:	4545      	cmp	r5, r8
 8013330:	f200 80dc 	bhi.w	80134ec <_scanf_float+0x244>
 8013334:	2601      	movs	r6, #1
 8013336:	4630      	mov	r0, r6
 8013338:	b007      	add	sp, #28
 801333a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801333e:	2b2e      	cmp	r3, #46	; 0x2e
 8013340:	f000 809f 	beq.w	8013482 <_scanf_float+0x1da>
 8013344:	2b30      	cmp	r3, #48	; 0x30
 8013346:	d1e7      	bne.n	8013318 <_scanf_float+0x70>
 8013348:	6820      	ldr	r0, [r4, #0]
 801334a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801334e:	d064      	beq.n	801341a <_scanf_float+0x172>
 8013350:	9b01      	ldr	r3, [sp, #4]
 8013352:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013356:	6020      	str	r0, [r4, #0]
 8013358:	f109 0901 	add.w	r9, r9, #1
 801335c:	b11b      	cbz	r3, 8013366 <_scanf_float+0xbe>
 801335e:	3b01      	subs	r3, #1
 8013360:	3101      	adds	r1, #1
 8013362:	9301      	str	r3, [sp, #4]
 8013364:	60a1      	str	r1, [r4, #8]
 8013366:	68a3      	ldr	r3, [r4, #8]
 8013368:	3b01      	subs	r3, #1
 801336a:	60a3      	str	r3, [r4, #8]
 801336c:	6923      	ldr	r3, [r4, #16]
 801336e:	3301      	adds	r3, #1
 8013370:	6123      	str	r3, [r4, #16]
 8013372:	6873      	ldr	r3, [r6, #4]
 8013374:	3b01      	subs	r3, #1
 8013376:	2b00      	cmp	r3, #0
 8013378:	6073      	str	r3, [r6, #4]
 801337a:	f340 80ac 	ble.w	80134d6 <_scanf_float+0x22e>
 801337e:	6833      	ldr	r3, [r6, #0]
 8013380:	3301      	adds	r3, #1
 8013382:	6033      	str	r3, [r6, #0]
 8013384:	e7b5      	b.n	80132f2 <_scanf_float+0x4a>
 8013386:	2b45      	cmp	r3, #69	; 0x45
 8013388:	f000 8085 	beq.w	8013496 <_scanf_float+0x1ee>
 801338c:	2b46      	cmp	r3, #70	; 0x46
 801338e:	d06a      	beq.n	8013466 <_scanf_float+0x1be>
 8013390:	2b41      	cmp	r3, #65	; 0x41
 8013392:	d1c1      	bne.n	8013318 <_scanf_float+0x70>
 8013394:	2a01      	cmp	r2, #1
 8013396:	d1bf      	bne.n	8013318 <_scanf_float+0x70>
 8013398:	2202      	movs	r2, #2
 801339a:	e046      	b.n	801342a <_scanf_float+0x182>
 801339c:	2b65      	cmp	r3, #101	; 0x65
 801339e:	d07a      	beq.n	8013496 <_scanf_float+0x1ee>
 80133a0:	d818      	bhi.n	80133d4 <_scanf_float+0x12c>
 80133a2:	2b54      	cmp	r3, #84	; 0x54
 80133a4:	d066      	beq.n	8013474 <_scanf_float+0x1cc>
 80133a6:	d811      	bhi.n	80133cc <_scanf_float+0x124>
 80133a8:	2b4e      	cmp	r3, #78	; 0x4e
 80133aa:	d1b5      	bne.n	8013318 <_scanf_float+0x70>
 80133ac:	2a00      	cmp	r2, #0
 80133ae:	d146      	bne.n	801343e <_scanf_float+0x196>
 80133b0:	f1b9 0f00 	cmp.w	r9, #0
 80133b4:	d145      	bne.n	8013442 <_scanf_float+0x19a>
 80133b6:	6821      	ldr	r1, [r4, #0]
 80133b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80133bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80133c0:	d13f      	bne.n	8013442 <_scanf_float+0x19a>
 80133c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80133c6:	6021      	str	r1, [r4, #0]
 80133c8:	2201      	movs	r2, #1
 80133ca:	e02e      	b.n	801342a <_scanf_float+0x182>
 80133cc:	2b59      	cmp	r3, #89	; 0x59
 80133ce:	d01e      	beq.n	801340e <_scanf_float+0x166>
 80133d0:	2b61      	cmp	r3, #97	; 0x61
 80133d2:	e7de      	b.n	8013392 <_scanf_float+0xea>
 80133d4:	2b6e      	cmp	r3, #110	; 0x6e
 80133d6:	d0e9      	beq.n	80133ac <_scanf_float+0x104>
 80133d8:	d815      	bhi.n	8013406 <_scanf_float+0x15e>
 80133da:	2b66      	cmp	r3, #102	; 0x66
 80133dc:	d043      	beq.n	8013466 <_scanf_float+0x1be>
 80133de:	2b69      	cmp	r3, #105	; 0x69
 80133e0:	d19a      	bne.n	8013318 <_scanf_float+0x70>
 80133e2:	f1bb 0f00 	cmp.w	fp, #0
 80133e6:	d138      	bne.n	801345a <_scanf_float+0x1b2>
 80133e8:	f1b9 0f00 	cmp.w	r9, #0
 80133ec:	d197      	bne.n	801331e <_scanf_float+0x76>
 80133ee:	6821      	ldr	r1, [r4, #0]
 80133f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80133f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80133f8:	d195      	bne.n	8013326 <_scanf_float+0x7e>
 80133fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80133fe:	6021      	str	r1, [r4, #0]
 8013400:	f04f 0b01 	mov.w	fp, #1
 8013404:	e011      	b.n	801342a <_scanf_float+0x182>
 8013406:	2b74      	cmp	r3, #116	; 0x74
 8013408:	d034      	beq.n	8013474 <_scanf_float+0x1cc>
 801340a:	2b79      	cmp	r3, #121	; 0x79
 801340c:	d184      	bne.n	8013318 <_scanf_float+0x70>
 801340e:	f1bb 0f07 	cmp.w	fp, #7
 8013412:	d181      	bne.n	8013318 <_scanf_float+0x70>
 8013414:	f04f 0b08 	mov.w	fp, #8
 8013418:	e007      	b.n	801342a <_scanf_float+0x182>
 801341a:	eb12 0f0b 	cmn.w	r2, fp
 801341e:	f47f af7b 	bne.w	8013318 <_scanf_float+0x70>
 8013422:	6821      	ldr	r1, [r4, #0]
 8013424:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013428:	6021      	str	r1, [r4, #0]
 801342a:	702b      	strb	r3, [r5, #0]
 801342c:	3501      	adds	r5, #1
 801342e:	e79a      	b.n	8013366 <_scanf_float+0xbe>
 8013430:	6821      	ldr	r1, [r4, #0]
 8013432:	0608      	lsls	r0, r1, #24
 8013434:	f57f af70 	bpl.w	8013318 <_scanf_float+0x70>
 8013438:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801343c:	e7f4      	b.n	8013428 <_scanf_float+0x180>
 801343e:	2a02      	cmp	r2, #2
 8013440:	d047      	beq.n	80134d2 <_scanf_float+0x22a>
 8013442:	f1bb 0f01 	cmp.w	fp, #1
 8013446:	d003      	beq.n	8013450 <_scanf_float+0x1a8>
 8013448:	f1bb 0f04 	cmp.w	fp, #4
 801344c:	f47f af64 	bne.w	8013318 <_scanf_float+0x70>
 8013450:	f10b 0b01 	add.w	fp, fp, #1
 8013454:	fa5f fb8b 	uxtb.w	fp, fp
 8013458:	e7e7      	b.n	801342a <_scanf_float+0x182>
 801345a:	f1bb 0f03 	cmp.w	fp, #3
 801345e:	d0f7      	beq.n	8013450 <_scanf_float+0x1a8>
 8013460:	f1bb 0f05 	cmp.w	fp, #5
 8013464:	e7f2      	b.n	801344c <_scanf_float+0x1a4>
 8013466:	f1bb 0f02 	cmp.w	fp, #2
 801346a:	f47f af55 	bne.w	8013318 <_scanf_float+0x70>
 801346e:	f04f 0b03 	mov.w	fp, #3
 8013472:	e7da      	b.n	801342a <_scanf_float+0x182>
 8013474:	f1bb 0f06 	cmp.w	fp, #6
 8013478:	f47f af4e 	bne.w	8013318 <_scanf_float+0x70>
 801347c:	f04f 0b07 	mov.w	fp, #7
 8013480:	e7d3      	b.n	801342a <_scanf_float+0x182>
 8013482:	6821      	ldr	r1, [r4, #0]
 8013484:	0588      	lsls	r0, r1, #22
 8013486:	f57f af47 	bpl.w	8013318 <_scanf_float+0x70>
 801348a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801348e:	6021      	str	r1, [r4, #0]
 8013490:	f8cd 9008 	str.w	r9, [sp, #8]
 8013494:	e7c9      	b.n	801342a <_scanf_float+0x182>
 8013496:	6821      	ldr	r1, [r4, #0]
 8013498:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801349c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80134a0:	d006      	beq.n	80134b0 <_scanf_float+0x208>
 80134a2:	0548      	lsls	r0, r1, #21
 80134a4:	f57f af38 	bpl.w	8013318 <_scanf_float+0x70>
 80134a8:	f1b9 0f00 	cmp.w	r9, #0
 80134ac:	f43f af3b 	beq.w	8013326 <_scanf_float+0x7e>
 80134b0:	0588      	lsls	r0, r1, #22
 80134b2:	bf58      	it	pl
 80134b4:	9802      	ldrpl	r0, [sp, #8]
 80134b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80134ba:	bf58      	it	pl
 80134bc:	eba9 0000 	subpl.w	r0, r9, r0
 80134c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80134c4:	bf58      	it	pl
 80134c6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80134ca:	6021      	str	r1, [r4, #0]
 80134cc:	f04f 0900 	mov.w	r9, #0
 80134d0:	e7ab      	b.n	801342a <_scanf_float+0x182>
 80134d2:	2203      	movs	r2, #3
 80134d4:	e7a9      	b.n	801342a <_scanf_float+0x182>
 80134d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80134da:	9205      	str	r2, [sp, #20]
 80134dc:	4631      	mov	r1, r6
 80134de:	4638      	mov	r0, r7
 80134e0:	4798      	blx	r3
 80134e2:	9a05      	ldr	r2, [sp, #20]
 80134e4:	2800      	cmp	r0, #0
 80134e6:	f43f af04 	beq.w	80132f2 <_scanf_float+0x4a>
 80134ea:	e715      	b.n	8013318 <_scanf_float+0x70>
 80134ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80134f4:	4632      	mov	r2, r6
 80134f6:	4638      	mov	r0, r7
 80134f8:	4798      	blx	r3
 80134fa:	6923      	ldr	r3, [r4, #16]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	6123      	str	r3, [r4, #16]
 8013500:	e715      	b.n	801332e <_scanf_float+0x86>
 8013502:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013506:	2b06      	cmp	r3, #6
 8013508:	d80a      	bhi.n	8013520 <_scanf_float+0x278>
 801350a:	f1bb 0f02 	cmp.w	fp, #2
 801350e:	d968      	bls.n	80135e2 <_scanf_float+0x33a>
 8013510:	f1ab 0b03 	sub.w	fp, fp, #3
 8013514:	fa5f fb8b 	uxtb.w	fp, fp
 8013518:	eba5 0b0b 	sub.w	fp, r5, fp
 801351c:	455d      	cmp	r5, fp
 801351e:	d14b      	bne.n	80135b8 <_scanf_float+0x310>
 8013520:	6823      	ldr	r3, [r4, #0]
 8013522:	05da      	lsls	r2, r3, #23
 8013524:	d51f      	bpl.n	8013566 <_scanf_float+0x2be>
 8013526:	055b      	lsls	r3, r3, #21
 8013528:	d468      	bmi.n	80135fc <_scanf_float+0x354>
 801352a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801352e:	6923      	ldr	r3, [r4, #16]
 8013530:	2965      	cmp	r1, #101	; 0x65
 8013532:	f103 33ff 	add.w	r3, r3, #4294967295
 8013536:	f105 3bff 	add.w	fp, r5, #4294967295
 801353a:	6123      	str	r3, [r4, #16]
 801353c:	d00d      	beq.n	801355a <_scanf_float+0x2b2>
 801353e:	2945      	cmp	r1, #69	; 0x45
 8013540:	d00b      	beq.n	801355a <_scanf_float+0x2b2>
 8013542:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013546:	4632      	mov	r2, r6
 8013548:	4638      	mov	r0, r7
 801354a:	4798      	blx	r3
 801354c:	6923      	ldr	r3, [r4, #16]
 801354e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013552:	3b01      	subs	r3, #1
 8013554:	f1a5 0b02 	sub.w	fp, r5, #2
 8013558:	6123      	str	r3, [r4, #16]
 801355a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801355e:	4632      	mov	r2, r6
 8013560:	4638      	mov	r0, r7
 8013562:	4798      	blx	r3
 8013564:	465d      	mov	r5, fp
 8013566:	6826      	ldr	r6, [r4, #0]
 8013568:	f016 0610 	ands.w	r6, r6, #16
 801356c:	d17a      	bne.n	8013664 <_scanf_float+0x3bc>
 801356e:	702e      	strb	r6, [r5, #0]
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801357a:	d142      	bne.n	8013602 <_scanf_float+0x35a>
 801357c:	9b02      	ldr	r3, [sp, #8]
 801357e:	eba9 0303 	sub.w	r3, r9, r3
 8013582:	425a      	negs	r2, r3
 8013584:	2b00      	cmp	r3, #0
 8013586:	d149      	bne.n	801361c <_scanf_float+0x374>
 8013588:	2200      	movs	r2, #0
 801358a:	4641      	mov	r1, r8
 801358c:	4638      	mov	r0, r7
 801358e:	f000 ffcb 	bl	8014528 <_strtod_r>
 8013592:	6825      	ldr	r5, [r4, #0]
 8013594:	f8da 3000 	ldr.w	r3, [sl]
 8013598:	f015 0f02 	tst.w	r5, #2
 801359c:	f103 0204 	add.w	r2, r3, #4
 80135a0:	ec59 8b10 	vmov	r8, r9, d0
 80135a4:	f8ca 2000 	str.w	r2, [sl]
 80135a8:	d043      	beq.n	8013632 <_scanf_float+0x38a>
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	e9c3 8900 	strd	r8, r9, [r3]
 80135b0:	68e3      	ldr	r3, [r4, #12]
 80135b2:	3301      	adds	r3, #1
 80135b4:	60e3      	str	r3, [r4, #12]
 80135b6:	e6be      	b.n	8013336 <_scanf_float+0x8e>
 80135b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135c0:	4632      	mov	r2, r6
 80135c2:	4638      	mov	r0, r7
 80135c4:	4798      	blx	r3
 80135c6:	6923      	ldr	r3, [r4, #16]
 80135c8:	3b01      	subs	r3, #1
 80135ca:	6123      	str	r3, [r4, #16]
 80135cc:	e7a6      	b.n	801351c <_scanf_float+0x274>
 80135ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135d2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135d6:	4632      	mov	r2, r6
 80135d8:	4638      	mov	r0, r7
 80135da:	4798      	blx	r3
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	3b01      	subs	r3, #1
 80135e0:	6123      	str	r3, [r4, #16]
 80135e2:	4545      	cmp	r5, r8
 80135e4:	d8f3      	bhi.n	80135ce <_scanf_float+0x326>
 80135e6:	e6a5      	b.n	8013334 <_scanf_float+0x8c>
 80135e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135f0:	4632      	mov	r2, r6
 80135f2:	4638      	mov	r0, r7
 80135f4:	4798      	blx	r3
 80135f6:	6923      	ldr	r3, [r4, #16]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	6123      	str	r3, [r4, #16]
 80135fc:	4545      	cmp	r5, r8
 80135fe:	d8f3      	bhi.n	80135e8 <_scanf_float+0x340>
 8013600:	e698      	b.n	8013334 <_scanf_float+0x8c>
 8013602:	9b03      	ldr	r3, [sp, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d0bf      	beq.n	8013588 <_scanf_float+0x2e0>
 8013608:	9904      	ldr	r1, [sp, #16]
 801360a:	230a      	movs	r3, #10
 801360c:	4632      	mov	r2, r6
 801360e:	3101      	adds	r1, #1
 8013610:	4638      	mov	r0, r7
 8013612:	f001 f815 	bl	8014640 <_strtol_r>
 8013616:	9b03      	ldr	r3, [sp, #12]
 8013618:	9d04      	ldr	r5, [sp, #16]
 801361a:	1ac2      	subs	r2, r0, r3
 801361c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013620:	429d      	cmp	r5, r3
 8013622:	bf28      	it	cs
 8013624:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013628:	490f      	ldr	r1, [pc, #60]	; (8013668 <_scanf_float+0x3c0>)
 801362a:	4628      	mov	r0, r5
 801362c:	f000 f8d4 	bl	80137d8 <siprintf>
 8013630:	e7aa      	b.n	8013588 <_scanf_float+0x2e0>
 8013632:	f015 0504 	ands.w	r5, r5, #4
 8013636:	d1b8      	bne.n	80135aa <_scanf_float+0x302>
 8013638:	681f      	ldr	r7, [r3, #0]
 801363a:	ee10 2a10 	vmov	r2, s0
 801363e:	464b      	mov	r3, r9
 8013640:	ee10 0a10 	vmov	r0, s0
 8013644:	4649      	mov	r1, r9
 8013646:	f7ed fa89 	bl	8000b5c <__aeabi_dcmpun>
 801364a:	b128      	cbz	r0, 8013658 <_scanf_float+0x3b0>
 801364c:	4628      	mov	r0, r5
 801364e:	f000 f889 	bl	8013764 <nanf>
 8013652:	ed87 0a00 	vstr	s0, [r7]
 8013656:	e7ab      	b.n	80135b0 <_scanf_float+0x308>
 8013658:	4640      	mov	r0, r8
 801365a:	4649      	mov	r1, r9
 801365c:	f7ed fadc 	bl	8000c18 <__aeabi_d2f>
 8013660:	6038      	str	r0, [r7, #0]
 8013662:	e7a5      	b.n	80135b0 <_scanf_float+0x308>
 8013664:	2600      	movs	r6, #0
 8013666:	e666      	b.n	8013336 <_scanf_float+0x8e>
 8013668:	08017ec6 	.word	0x08017ec6

0801366c <iprintf>:
 801366c:	b40f      	push	{r0, r1, r2, r3}
 801366e:	4b0a      	ldr	r3, [pc, #40]	; (8013698 <iprintf+0x2c>)
 8013670:	b513      	push	{r0, r1, r4, lr}
 8013672:	681c      	ldr	r4, [r3, #0]
 8013674:	b124      	cbz	r4, 8013680 <iprintf+0x14>
 8013676:	69a3      	ldr	r3, [r4, #24]
 8013678:	b913      	cbnz	r3, 8013680 <iprintf+0x14>
 801367a:	4620      	mov	r0, r4
 801367c:	f002 f828 	bl	80156d0 <__sinit>
 8013680:	ab05      	add	r3, sp, #20
 8013682:	9a04      	ldr	r2, [sp, #16]
 8013684:	68a1      	ldr	r1, [r4, #8]
 8013686:	9301      	str	r3, [sp, #4]
 8013688:	4620      	mov	r0, r4
 801368a:	f003 fc5f 	bl	8016f4c <_vfiprintf_r>
 801368e:	b002      	add	sp, #8
 8013690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013694:	b004      	add	sp, #16
 8013696:	4770      	bx	lr
 8013698:	2000000c 	.word	0x2000000c

0801369c <_puts_r>:
 801369c:	b570      	push	{r4, r5, r6, lr}
 801369e:	460e      	mov	r6, r1
 80136a0:	4605      	mov	r5, r0
 80136a2:	b118      	cbz	r0, 80136ac <_puts_r+0x10>
 80136a4:	6983      	ldr	r3, [r0, #24]
 80136a6:	b90b      	cbnz	r3, 80136ac <_puts_r+0x10>
 80136a8:	f002 f812 	bl	80156d0 <__sinit>
 80136ac:	69ab      	ldr	r3, [r5, #24]
 80136ae:	68ac      	ldr	r4, [r5, #8]
 80136b0:	b913      	cbnz	r3, 80136b8 <_puts_r+0x1c>
 80136b2:	4628      	mov	r0, r5
 80136b4:	f002 f80c 	bl	80156d0 <__sinit>
 80136b8:	4b23      	ldr	r3, [pc, #140]	; (8013748 <_puts_r+0xac>)
 80136ba:	429c      	cmp	r4, r3
 80136bc:	d117      	bne.n	80136ee <_puts_r+0x52>
 80136be:	686c      	ldr	r4, [r5, #4]
 80136c0:	89a3      	ldrh	r3, [r4, #12]
 80136c2:	071b      	lsls	r3, r3, #28
 80136c4:	d51d      	bpl.n	8013702 <_puts_r+0x66>
 80136c6:	6923      	ldr	r3, [r4, #16]
 80136c8:	b1db      	cbz	r3, 8013702 <_puts_r+0x66>
 80136ca:	3e01      	subs	r6, #1
 80136cc:	68a3      	ldr	r3, [r4, #8]
 80136ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80136d2:	3b01      	subs	r3, #1
 80136d4:	60a3      	str	r3, [r4, #8]
 80136d6:	b9e9      	cbnz	r1, 8013714 <_puts_r+0x78>
 80136d8:	2b00      	cmp	r3, #0
 80136da:	da2e      	bge.n	801373a <_puts_r+0x9e>
 80136dc:	4622      	mov	r2, r4
 80136de:	210a      	movs	r1, #10
 80136e0:	4628      	mov	r0, r5
 80136e2:	f000 ffdf 	bl	80146a4 <__swbuf_r>
 80136e6:	3001      	adds	r0, #1
 80136e8:	d011      	beq.n	801370e <_puts_r+0x72>
 80136ea:	200a      	movs	r0, #10
 80136ec:	e011      	b.n	8013712 <_puts_r+0x76>
 80136ee:	4b17      	ldr	r3, [pc, #92]	; (801374c <_puts_r+0xb0>)
 80136f0:	429c      	cmp	r4, r3
 80136f2:	d101      	bne.n	80136f8 <_puts_r+0x5c>
 80136f4:	68ac      	ldr	r4, [r5, #8]
 80136f6:	e7e3      	b.n	80136c0 <_puts_r+0x24>
 80136f8:	4b15      	ldr	r3, [pc, #84]	; (8013750 <_puts_r+0xb4>)
 80136fa:	429c      	cmp	r4, r3
 80136fc:	bf08      	it	eq
 80136fe:	68ec      	ldreq	r4, [r5, #12]
 8013700:	e7de      	b.n	80136c0 <_puts_r+0x24>
 8013702:	4621      	mov	r1, r4
 8013704:	4628      	mov	r0, r5
 8013706:	f001 f831 	bl	801476c <__swsetup_r>
 801370a:	2800      	cmp	r0, #0
 801370c:	d0dd      	beq.n	80136ca <_puts_r+0x2e>
 801370e:	f04f 30ff 	mov.w	r0, #4294967295
 8013712:	bd70      	pop	{r4, r5, r6, pc}
 8013714:	2b00      	cmp	r3, #0
 8013716:	da04      	bge.n	8013722 <_puts_r+0x86>
 8013718:	69a2      	ldr	r2, [r4, #24]
 801371a:	429a      	cmp	r2, r3
 801371c:	dc06      	bgt.n	801372c <_puts_r+0x90>
 801371e:	290a      	cmp	r1, #10
 8013720:	d004      	beq.n	801372c <_puts_r+0x90>
 8013722:	6823      	ldr	r3, [r4, #0]
 8013724:	1c5a      	adds	r2, r3, #1
 8013726:	6022      	str	r2, [r4, #0]
 8013728:	7019      	strb	r1, [r3, #0]
 801372a:	e7cf      	b.n	80136cc <_puts_r+0x30>
 801372c:	4622      	mov	r2, r4
 801372e:	4628      	mov	r0, r5
 8013730:	f000 ffb8 	bl	80146a4 <__swbuf_r>
 8013734:	3001      	adds	r0, #1
 8013736:	d1c9      	bne.n	80136cc <_puts_r+0x30>
 8013738:	e7e9      	b.n	801370e <_puts_r+0x72>
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	200a      	movs	r0, #10
 801373e:	1c5a      	adds	r2, r3, #1
 8013740:	6022      	str	r2, [r4, #0]
 8013742:	7018      	strb	r0, [r3, #0]
 8013744:	e7e5      	b.n	8013712 <_puts_r+0x76>
 8013746:	bf00      	nop
 8013748:	08017f50 	.word	0x08017f50
 801374c:	08017f70 	.word	0x08017f70
 8013750:	08017f30 	.word	0x08017f30

08013754 <puts>:
 8013754:	4b02      	ldr	r3, [pc, #8]	; (8013760 <puts+0xc>)
 8013756:	4601      	mov	r1, r0
 8013758:	6818      	ldr	r0, [r3, #0]
 801375a:	f7ff bf9f 	b.w	801369c <_puts_r>
 801375e:	bf00      	nop
 8013760:	2000000c 	.word	0x2000000c

08013764 <nanf>:
 8013764:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801376c <nanf+0x8>
 8013768:	4770      	bx	lr
 801376a:	bf00      	nop
 801376c:	7fc00000 	.word	0x7fc00000

08013770 <sniprintf>:
 8013770:	b40c      	push	{r2, r3}
 8013772:	b530      	push	{r4, r5, lr}
 8013774:	4b17      	ldr	r3, [pc, #92]	; (80137d4 <sniprintf+0x64>)
 8013776:	1e0c      	subs	r4, r1, #0
 8013778:	b09d      	sub	sp, #116	; 0x74
 801377a:	681d      	ldr	r5, [r3, #0]
 801377c:	da08      	bge.n	8013790 <sniprintf+0x20>
 801377e:	238b      	movs	r3, #139	; 0x8b
 8013780:	602b      	str	r3, [r5, #0]
 8013782:	f04f 30ff 	mov.w	r0, #4294967295
 8013786:	b01d      	add	sp, #116	; 0x74
 8013788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801378c:	b002      	add	sp, #8
 801378e:	4770      	bx	lr
 8013790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013798:	bf14      	ite	ne
 801379a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801379e:	4623      	moveq	r3, r4
 80137a0:	9304      	str	r3, [sp, #16]
 80137a2:	9307      	str	r3, [sp, #28]
 80137a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137a8:	9002      	str	r0, [sp, #8]
 80137aa:	9006      	str	r0, [sp, #24]
 80137ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80137b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80137b2:	ab21      	add	r3, sp, #132	; 0x84
 80137b4:	a902      	add	r1, sp, #8
 80137b6:	4628      	mov	r0, r5
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	f003 f8fb 	bl	80169b4 <_svfiprintf_r>
 80137be:	1c43      	adds	r3, r0, #1
 80137c0:	bfbc      	itt	lt
 80137c2:	238b      	movlt	r3, #139	; 0x8b
 80137c4:	602b      	strlt	r3, [r5, #0]
 80137c6:	2c00      	cmp	r4, #0
 80137c8:	d0dd      	beq.n	8013786 <sniprintf+0x16>
 80137ca:	9b02      	ldr	r3, [sp, #8]
 80137cc:	2200      	movs	r2, #0
 80137ce:	701a      	strb	r2, [r3, #0]
 80137d0:	e7d9      	b.n	8013786 <sniprintf+0x16>
 80137d2:	bf00      	nop
 80137d4:	2000000c 	.word	0x2000000c

080137d8 <siprintf>:
 80137d8:	b40e      	push	{r1, r2, r3}
 80137da:	b500      	push	{lr}
 80137dc:	b09c      	sub	sp, #112	; 0x70
 80137de:	ab1d      	add	r3, sp, #116	; 0x74
 80137e0:	9002      	str	r0, [sp, #8]
 80137e2:	9006      	str	r0, [sp, #24]
 80137e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80137e8:	4809      	ldr	r0, [pc, #36]	; (8013810 <siprintf+0x38>)
 80137ea:	9107      	str	r1, [sp, #28]
 80137ec:	9104      	str	r1, [sp, #16]
 80137ee:	4909      	ldr	r1, [pc, #36]	; (8013814 <siprintf+0x3c>)
 80137f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80137f4:	9105      	str	r1, [sp, #20]
 80137f6:	6800      	ldr	r0, [r0, #0]
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	a902      	add	r1, sp, #8
 80137fc:	f003 f8da 	bl	80169b4 <_svfiprintf_r>
 8013800:	9b02      	ldr	r3, [sp, #8]
 8013802:	2200      	movs	r2, #0
 8013804:	701a      	strb	r2, [r3, #0]
 8013806:	b01c      	add	sp, #112	; 0x70
 8013808:	f85d eb04 	ldr.w	lr, [sp], #4
 801380c:	b003      	add	sp, #12
 801380e:	4770      	bx	lr
 8013810:	2000000c 	.word	0x2000000c
 8013814:	ffff0208 	.word	0xffff0208

08013818 <siscanf>:
 8013818:	b40e      	push	{r1, r2, r3}
 801381a:	b530      	push	{r4, r5, lr}
 801381c:	b09c      	sub	sp, #112	; 0x70
 801381e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013820:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013824:	f854 5b04 	ldr.w	r5, [r4], #4
 8013828:	f8ad 2014 	strh.w	r2, [sp, #20]
 801382c:	9002      	str	r0, [sp, #8]
 801382e:	9006      	str	r0, [sp, #24]
 8013830:	f7ec fce6 	bl	8000200 <strlen>
 8013834:	4b0b      	ldr	r3, [pc, #44]	; (8013864 <siscanf+0x4c>)
 8013836:	9003      	str	r0, [sp, #12]
 8013838:	9007      	str	r0, [sp, #28]
 801383a:	930b      	str	r3, [sp, #44]	; 0x2c
 801383c:	480a      	ldr	r0, [pc, #40]	; (8013868 <siscanf+0x50>)
 801383e:	9401      	str	r4, [sp, #4]
 8013840:	2300      	movs	r3, #0
 8013842:	930f      	str	r3, [sp, #60]	; 0x3c
 8013844:	9314      	str	r3, [sp, #80]	; 0x50
 8013846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801384a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801384e:	462a      	mov	r2, r5
 8013850:	4623      	mov	r3, r4
 8013852:	a902      	add	r1, sp, #8
 8013854:	6800      	ldr	r0, [r0, #0]
 8013856:	f003 f9ff 	bl	8016c58 <__ssvfiscanf_r>
 801385a:	b01c      	add	sp, #112	; 0x70
 801385c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013860:	b003      	add	sp, #12
 8013862:	4770      	bx	lr
 8013864:	0801388f 	.word	0x0801388f
 8013868:	2000000c 	.word	0x2000000c

0801386c <__sread>:
 801386c:	b510      	push	{r4, lr}
 801386e:	460c      	mov	r4, r1
 8013870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013874:	f003 fdd8 	bl	8017428 <_read_r>
 8013878:	2800      	cmp	r0, #0
 801387a:	bfab      	itete	ge
 801387c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801387e:	89a3      	ldrhlt	r3, [r4, #12]
 8013880:	181b      	addge	r3, r3, r0
 8013882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013886:	bfac      	ite	ge
 8013888:	6563      	strge	r3, [r4, #84]	; 0x54
 801388a:	81a3      	strhlt	r3, [r4, #12]
 801388c:	bd10      	pop	{r4, pc}

0801388e <__seofread>:
 801388e:	2000      	movs	r0, #0
 8013890:	4770      	bx	lr

08013892 <__swrite>:
 8013892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013896:	461f      	mov	r7, r3
 8013898:	898b      	ldrh	r3, [r1, #12]
 801389a:	05db      	lsls	r3, r3, #23
 801389c:	4605      	mov	r5, r0
 801389e:	460c      	mov	r4, r1
 80138a0:	4616      	mov	r6, r2
 80138a2:	d505      	bpl.n	80138b0 <__swrite+0x1e>
 80138a4:	2302      	movs	r3, #2
 80138a6:	2200      	movs	r2, #0
 80138a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ac:	f002 fae2 	bl	8015e74 <_lseek_r>
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138ba:	81a3      	strh	r3, [r4, #12]
 80138bc:	4632      	mov	r2, r6
 80138be:	463b      	mov	r3, r7
 80138c0:	4628      	mov	r0, r5
 80138c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138c6:	f000 bf3f 	b.w	8014748 <_write_r>

080138ca <__sseek>:
 80138ca:	b510      	push	{r4, lr}
 80138cc:	460c      	mov	r4, r1
 80138ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138d2:	f002 facf 	bl	8015e74 <_lseek_r>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	89a3      	ldrh	r3, [r4, #12]
 80138da:	bf15      	itete	ne
 80138dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80138de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80138e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80138e6:	81a3      	strheq	r3, [r4, #12]
 80138e8:	bf18      	it	ne
 80138ea:	81a3      	strhne	r3, [r4, #12]
 80138ec:	bd10      	pop	{r4, pc}

080138ee <__sclose>:
 80138ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f2:	f000 bfa9 	b.w	8014848 <_close_r>

080138f6 <strcpy>:
 80138f6:	4603      	mov	r3, r0
 80138f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138fc:	f803 2b01 	strb.w	r2, [r3], #1
 8013900:	2a00      	cmp	r2, #0
 8013902:	d1f9      	bne.n	80138f8 <strcpy+0x2>
 8013904:	4770      	bx	lr

08013906 <sulp>:
 8013906:	b570      	push	{r4, r5, r6, lr}
 8013908:	4604      	mov	r4, r0
 801390a:	460d      	mov	r5, r1
 801390c:	ec45 4b10 	vmov	d0, r4, r5
 8013910:	4616      	mov	r6, r2
 8013912:	f002 fe0b 	bl	801652c <__ulp>
 8013916:	ec51 0b10 	vmov	r0, r1, d0
 801391a:	b17e      	cbz	r6, 801393c <sulp+0x36>
 801391c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013920:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013924:	2b00      	cmp	r3, #0
 8013926:	dd09      	ble.n	801393c <sulp+0x36>
 8013928:	051b      	lsls	r3, r3, #20
 801392a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801392e:	2400      	movs	r4, #0
 8013930:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013934:	4622      	mov	r2, r4
 8013936:	462b      	mov	r3, r5
 8013938:	f7ec fe76 	bl	8000628 <__aeabi_dmul>
 801393c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013940 <_strtod_l>:
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	461f      	mov	r7, r3
 8013946:	b0a1      	sub	sp, #132	; 0x84
 8013948:	2300      	movs	r3, #0
 801394a:	4681      	mov	r9, r0
 801394c:	4638      	mov	r0, r7
 801394e:	460e      	mov	r6, r1
 8013950:	9217      	str	r2, [sp, #92]	; 0x5c
 8013952:	931c      	str	r3, [sp, #112]	; 0x70
 8013954:	f002 fa7e 	bl	8015e54 <__localeconv_l>
 8013958:	4680      	mov	r8, r0
 801395a:	6800      	ldr	r0, [r0, #0]
 801395c:	f7ec fc50 	bl	8000200 <strlen>
 8013960:	f04f 0a00 	mov.w	sl, #0
 8013964:	4604      	mov	r4, r0
 8013966:	f04f 0b00 	mov.w	fp, #0
 801396a:	961b      	str	r6, [sp, #108]	; 0x6c
 801396c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801396e:	781a      	ldrb	r2, [r3, #0]
 8013970:	2a0d      	cmp	r2, #13
 8013972:	d832      	bhi.n	80139da <_strtod_l+0x9a>
 8013974:	2a09      	cmp	r2, #9
 8013976:	d236      	bcs.n	80139e6 <_strtod_l+0xa6>
 8013978:	2a00      	cmp	r2, #0
 801397a:	d03e      	beq.n	80139fa <_strtod_l+0xba>
 801397c:	2300      	movs	r3, #0
 801397e:	930d      	str	r3, [sp, #52]	; 0x34
 8013980:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013982:	782b      	ldrb	r3, [r5, #0]
 8013984:	2b30      	cmp	r3, #48	; 0x30
 8013986:	f040 80ac 	bne.w	8013ae2 <_strtod_l+0x1a2>
 801398a:	786b      	ldrb	r3, [r5, #1]
 801398c:	2b58      	cmp	r3, #88	; 0x58
 801398e:	d001      	beq.n	8013994 <_strtod_l+0x54>
 8013990:	2b78      	cmp	r3, #120	; 0x78
 8013992:	d167      	bne.n	8013a64 <_strtod_l+0x124>
 8013994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013996:	9301      	str	r3, [sp, #4]
 8013998:	ab1c      	add	r3, sp, #112	; 0x70
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	9702      	str	r7, [sp, #8]
 801399e:	ab1d      	add	r3, sp, #116	; 0x74
 80139a0:	4a88      	ldr	r2, [pc, #544]	; (8013bc4 <_strtod_l+0x284>)
 80139a2:	a91b      	add	r1, sp, #108	; 0x6c
 80139a4:	4648      	mov	r0, r9
 80139a6:	f001 ff6c 	bl	8015882 <__gethex>
 80139aa:	f010 0407 	ands.w	r4, r0, #7
 80139ae:	4606      	mov	r6, r0
 80139b0:	d005      	beq.n	80139be <_strtod_l+0x7e>
 80139b2:	2c06      	cmp	r4, #6
 80139b4:	d12b      	bne.n	8013a0e <_strtod_l+0xce>
 80139b6:	3501      	adds	r5, #1
 80139b8:	2300      	movs	r3, #0
 80139ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80139bc:	930d      	str	r3, [sp, #52]	; 0x34
 80139be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f040 859a 	bne.w	80144fa <_strtod_l+0xbba>
 80139c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139c8:	b1e3      	cbz	r3, 8013a04 <_strtod_l+0xc4>
 80139ca:	4652      	mov	r2, sl
 80139cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80139d0:	ec43 2b10 	vmov	d0, r2, r3
 80139d4:	b021      	add	sp, #132	; 0x84
 80139d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139da:	2a2b      	cmp	r2, #43	; 0x2b
 80139dc:	d015      	beq.n	8013a0a <_strtod_l+0xca>
 80139de:	2a2d      	cmp	r2, #45	; 0x2d
 80139e0:	d004      	beq.n	80139ec <_strtod_l+0xac>
 80139e2:	2a20      	cmp	r2, #32
 80139e4:	d1ca      	bne.n	801397c <_strtod_l+0x3c>
 80139e6:	3301      	adds	r3, #1
 80139e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80139ea:	e7bf      	b.n	801396c <_strtod_l+0x2c>
 80139ec:	2201      	movs	r2, #1
 80139ee:	920d      	str	r2, [sp, #52]	; 0x34
 80139f0:	1c5a      	adds	r2, r3, #1
 80139f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80139f4:	785b      	ldrb	r3, [r3, #1]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1c2      	bne.n	8013980 <_strtod_l+0x40>
 80139fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f040 8579 	bne.w	80144f6 <_strtod_l+0xbb6>
 8013a04:	4652      	mov	r2, sl
 8013a06:	465b      	mov	r3, fp
 8013a08:	e7e2      	b.n	80139d0 <_strtod_l+0x90>
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	e7ef      	b.n	80139ee <_strtod_l+0xae>
 8013a0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a10:	b13a      	cbz	r2, 8013a22 <_strtod_l+0xe2>
 8013a12:	2135      	movs	r1, #53	; 0x35
 8013a14:	a81e      	add	r0, sp, #120	; 0x78
 8013a16:	f002 fe81 	bl	801671c <__copybits>
 8013a1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a1c:	4648      	mov	r0, r9
 8013a1e:	f002 faed 	bl	8015ffc <_Bfree>
 8013a22:	3c01      	subs	r4, #1
 8013a24:	2c04      	cmp	r4, #4
 8013a26:	d806      	bhi.n	8013a36 <_strtod_l+0xf6>
 8013a28:	e8df f004 	tbb	[pc, r4]
 8013a2c:	1714030a 	.word	0x1714030a
 8013a30:	0a          	.byte	0x0a
 8013a31:	00          	.byte	0x00
 8013a32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013a36:	0730      	lsls	r0, r6, #28
 8013a38:	d5c1      	bpl.n	80139be <_strtod_l+0x7e>
 8013a3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013a3e:	e7be      	b.n	80139be <_strtod_l+0x7e>
 8013a40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013a44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013a46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013a4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013a52:	e7f0      	b.n	8013a36 <_strtod_l+0xf6>
 8013a54:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013bc8 <_strtod_l+0x288>
 8013a58:	e7ed      	b.n	8013a36 <_strtod_l+0xf6>
 8013a5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013a5e:	f04f 3aff 	mov.w	sl, #4294967295
 8013a62:	e7e8      	b.n	8013a36 <_strtod_l+0xf6>
 8013a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a66:	1c5a      	adds	r2, r3, #1
 8013a68:	921b      	str	r2, [sp, #108]	; 0x6c
 8013a6a:	785b      	ldrb	r3, [r3, #1]
 8013a6c:	2b30      	cmp	r3, #48	; 0x30
 8013a6e:	d0f9      	beq.n	8013a64 <_strtod_l+0x124>
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d0a4      	beq.n	80139be <_strtod_l+0x7e>
 8013a74:	2301      	movs	r3, #1
 8013a76:	2500      	movs	r5, #0
 8013a78:	9306      	str	r3, [sp, #24]
 8013a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a7c:	9308      	str	r3, [sp, #32]
 8013a7e:	9507      	str	r5, [sp, #28]
 8013a80:	9505      	str	r5, [sp, #20]
 8013a82:	220a      	movs	r2, #10
 8013a84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013a86:	7807      	ldrb	r7, [r0, #0]
 8013a88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013a8c:	b2d9      	uxtb	r1, r3
 8013a8e:	2909      	cmp	r1, #9
 8013a90:	d929      	bls.n	8013ae6 <_strtod_l+0x1a6>
 8013a92:	4622      	mov	r2, r4
 8013a94:	f8d8 1000 	ldr.w	r1, [r8]
 8013a98:	f003 fd1a 	bl	80174d0 <strncmp>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d031      	beq.n	8013b04 <_strtod_l+0x1c4>
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	9c05      	ldr	r4, [sp, #20]
 8013aa4:	9004      	str	r0, [sp, #16]
 8013aa6:	463b      	mov	r3, r7
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	2b65      	cmp	r3, #101	; 0x65
 8013aac:	d001      	beq.n	8013ab2 <_strtod_l+0x172>
 8013aae:	2b45      	cmp	r3, #69	; 0x45
 8013ab0:	d114      	bne.n	8013adc <_strtod_l+0x19c>
 8013ab2:	b924      	cbnz	r4, 8013abe <_strtod_l+0x17e>
 8013ab4:	b910      	cbnz	r0, 8013abc <_strtod_l+0x17c>
 8013ab6:	9b06      	ldr	r3, [sp, #24]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d09e      	beq.n	80139fa <_strtod_l+0xba>
 8013abc:	2400      	movs	r4, #0
 8013abe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013ac0:	1c73      	adds	r3, r6, #1
 8013ac2:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ac4:	7873      	ldrb	r3, [r6, #1]
 8013ac6:	2b2b      	cmp	r3, #43	; 0x2b
 8013ac8:	d078      	beq.n	8013bbc <_strtod_l+0x27c>
 8013aca:	2b2d      	cmp	r3, #45	; 0x2d
 8013acc:	d070      	beq.n	8013bb0 <_strtod_l+0x270>
 8013ace:	f04f 0c00 	mov.w	ip, #0
 8013ad2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013ad6:	2f09      	cmp	r7, #9
 8013ad8:	d97c      	bls.n	8013bd4 <_strtod_l+0x294>
 8013ada:	961b      	str	r6, [sp, #108]	; 0x6c
 8013adc:	f04f 0e00 	mov.w	lr, #0
 8013ae0:	e09a      	b.n	8013c18 <_strtod_l+0x2d8>
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e7c7      	b.n	8013a76 <_strtod_l+0x136>
 8013ae6:	9905      	ldr	r1, [sp, #20]
 8013ae8:	2908      	cmp	r1, #8
 8013aea:	bfdd      	ittte	le
 8013aec:	9907      	ldrle	r1, [sp, #28]
 8013aee:	fb02 3301 	mlale	r3, r2, r1, r3
 8013af2:	9307      	strle	r3, [sp, #28]
 8013af4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013af8:	9b05      	ldr	r3, [sp, #20]
 8013afa:	3001      	adds	r0, #1
 8013afc:	3301      	adds	r3, #1
 8013afe:	9305      	str	r3, [sp, #20]
 8013b00:	901b      	str	r0, [sp, #108]	; 0x6c
 8013b02:	e7bf      	b.n	8013a84 <_strtod_l+0x144>
 8013b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b06:	191a      	adds	r2, r3, r4
 8013b08:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b0a:	9a05      	ldr	r2, [sp, #20]
 8013b0c:	5d1b      	ldrb	r3, [r3, r4]
 8013b0e:	2a00      	cmp	r2, #0
 8013b10:	d037      	beq.n	8013b82 <_strtod_l+0x242>
 8013b12:	9c05      	ldr	r4, [sp, #20]
 8013b14:	4602      	mov	r2, r0
 8013b16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013b1a:	2909      	cmp	r1, #9
 8013b1c:	d913      	bls.n	8013b46 <_strtod_l+0x206>
 8013b1e:	2101      	movs	r1, #1
 8013b20:	9104      	str	r1, [sp, #16]
 8013b22:	e7c2      	b.n	8013aaa <_strtod_l+0x16a>
 8013b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b2a:	785b      	ldrb	r3, [r3, #1]
 8013b2c:	3001      	adds	r0, #1
 8013b2e:	2b30      	cmp	r3, #48	; 0x30
 8013b30:	d0f8      	beq.n	8013b24 <_strtod_l+0x1e4>
 8013b32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013b36:	2a08      	cmp	r2, #8
 8013b38:	f200 84e4 	bhi.w	8014504 <_strtod_l+0xbc4>
 8013b3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013b3e:	9208      	str	r2, [sp, #32]
 8013b40:	4602      	mov	r2, r0
 8013b42:	2000      	movs	r0, #0
 8013b44:	4604      	mov	r4, r0
 8013b46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013b4a:	f100 0101 	add.w	r1, r0, #1
 8013b4e:	d012      	beq.n	8013b76 <_strtod_l+0x236>
 8013b50:	440a      	add	r2, r1
 8013b52:	eb00 0c04 	add.w	ip, r0, r4
 8013b56:	4621      	mov	r1, r4
 8013b58:	270a      	movs	r7, #10
 8013b5a:	458c      	cmp	ip, r1
 8013b5c:	d113      	bne.n	8013b86 <_strtod_l+0x246>
 8013b5e:	1821      	adds	r1, r4, r0
 8013b60:	2908      	cmp	r1, #8
 8013b62:	f104 0401 	add.w	r4, r4, #1
 8013b66:	4404      	add	r4, r0
 8013b68:	dc19      	bgt.n	8013b9e <_strtod_l+0x25e>
 8013b6a:	9b07      	ldr	r3, [sp, #28]
 8013b6c:	210a      	movs	r1, #10
 8013b6e:	fb01 e303 	mla	r3, r1, r3, lr
 8013b72:	9307      	str	r3, [sp, #28]
 8013b74:	2100      	movs	r1, #0
 8013b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b78:	1c58      	adds	r0, r3, #1
 8013b7a:	901b      	str	r0, [sp, #108]	; 0x6c
 8013b7c:	785b      	ldrb	r3, [r3, #1]
 8013b7e:	4608      	mov	r0, r1
 8013b80:	e7c9      	b.n	8013b16 <_strtod_l+0x1d6>
 8013b82:	9805      	ldr	r0, [sp, #20]
 8013b84:	e7d3      	b.n	8013b2e <_strtod_l+0x1ee>
 8013b86:	2908      	cmp	r1, #8
 8013b88:	f101 0101 	add.w	r1, r1, #1
 8013b8c:	dc03      	bgt.n	8013b96 <_strtod_l+0x256>
 8013b8e:	9b07      	ldr	r3, [sp, #28]
 8013b90:	437b      	muls	r3, r7
 8013b92:	9307      	str	r3, [sp, #28]
 8013b94:	e7e1      	b.n	8013b5a <_strtod_l+0x21a>
 8013b96:	2910      	cmp	r1, #16
 8013b98:	bfd8      	it	le
 8013b9a:	437d      	mulle	r5, r7
 8013b9c:	e7dd      	b.n	8013b5a <_strtod_l+0x21a>
 8013b9e:	2c10      	cmp	r4, #16
 8013ba0:	bfdc      	itt	le
 8013ba2:	210a      	movle	r1, #10
 8013ba4:	fb01 e505 	mlale	r5, r1, r5, lr
 8013ba8:	e7e4      	b.n	8013b74 <_strtod_l+0x234>
 8013baa:	2301      	movs	r3, #1
 8013bac:	9304      	str	r3, [sp, #16]
 8013bae:	e781      	b.n	8013ab4 <_strtod_l+0x174>
 8013bb0:	f04f 0c01 	mov.w	ip, #1
 8013bb4:	1cb3      	adds	r3, r6, #2
 8013bb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bb8:	78b3      	ldrb	r3, [r6, #2]
 8013bba:	e78a      	b.n	8013ad2 <_strtod_l+0x192>
 8013bbc:	f04f 0c00 	mov.w	ip, #0
 8013bc0:	e7f8      	b.n	8013bb4 <_strtod_l+0x274>
 8013bc2:	bf00      	nop
 8013bc4:	08017ecc 	.word	0x08017ecc
 8013bc8:	7ff00000 	.word	0x7ff00000
 8013bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bce:	1c5f      	adds	r7, r3, #1
 8013bd0:	971b      	str	r7, [sp, #108]	; 0x6c
 8013bd2:	785b      	ldrb	r3, [r3, #1]
 8013bd4:	2b30      	cmp	r3, #48	; 0x30
 8013bd6:	d0f9      	beq.n	8013bcc <_strtod_l+0x28c>
 8013bd8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013bdc:	2f08      	cmp	r7, #8
 8013bde:	f63f af7d 	bhi.w	8013adc <_strtod_l+0x19c>
 8013be2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013be8:	930a      	str	r3, [sp, #40]	; 0x28
 8013bea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bec:	1c5f      	adds	r7, r3, #1
 8013bee:	971b      	str	r7, [sp, #108]	; 0x6c
 8013bf0:	785b      	ldrb	r3, [r3, #1]
 8013bf2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013bf6:	f1b8 0f09 	cmp.w	r8, #9
 8013bfa:	d937      	bls.n	8013c6c <_strtod_l+0x32c>
 8013bfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013bfe:	1a7f      	subs	r7, r7, r1
 8013c00:	2f08      	cmp	r7, #8
 8013c02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013c06:	dc37      	bgt.n	8013c78 <_strtod_l+0x338>
 8013c08:	45be      	cmp	lr, r7
 8013c0a:	bfa8      	it	ge
 8013c0c:	46be      	movge	lr, r7
 8013c0e:	f1bc 0f00 	cmp.w	ip, #0
 8013c12:	d001      	beq.n	8013c18 <_strtod_l+0x2d8>
 8013c14:	f1ce 0e00 	rsb	lr, lr, #0
 8013c18:	2c00      	cmp	r4, #0
 8013c1a:	d151      	bne.n	8013cc0 <_strtod_l+0x380>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	f47f aece 	bne.w	80139be <_strtod_l+0x7e>
 8013c22:	9a06      	ldr	r2, [sp, #24]
 8013c24:	2a00      	cmp	r2, #0
 8013c26:	f47f aeca 	bne.w	80139be <_strtod_l+0x7e>
 8013c2a:	9a04      	ldr	r2, [sp, #16]
 8013c2c:	2a00      	cmp	r2, #0
 8013c2e:	f47f aee4 	bne.w	80139fa <_strtod_l+0xba>
 8013c32:	2b4e      	cmp	r3, #78	; 0x4e
 8013c34:	d027      	beq.n	8013c86 <_strtod_l+0x346>
 8013c36:	dc21      	bgt.n	8013c7c <_strtod_l+0x33c>
 8013c38:	2b49      	cmp	r3, #73	; 0x49
 8013c3a:	f47f aede 	bne.w	80139fa <_strtod_l+0xba>
 8013c3e:	49a0      	ldr	r1, [pc, #640]	; (8013ec0 <_strtod_l+0x580>)
 8013c40:	a81b      	add	r0, sp, #108	; 0x6c
 8013c42:	f002 f851 	bl	8015ce8 <__match>
 8013c46:	2800      	cmp	r0, #0
 8013c48:	f43f aed7 	beq.w	80139fa <_strtod_l+0xba>
 8013c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c4e:	499d      	ldr	r1, [pc, #628]	; (8013ec4 <_strtod_l+0x584>)
 8013c50:	3b01      	subs	r3, #1
 8013c52:	a81b      	add	r0, sp, #108	; 0x6c
 8013c54:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c56:	f002 f847 	bl	8015ce8 <__match>
 8013c5a:	b910      	cbnz	r0, 8013c62 <_strtod_l+0x322>
 8013c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c5e:	3301      	adds	r3, #1
 8013c60:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c62:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013ed8 <_strtod_l+0x598>
 8013c66:	f04f 0a00 	mov.w	sl, #0
 8013c6a:	e6a8      	b.n	80139be <_strtod_l+0x7e>
 8013c6c:	210a      	movs	r1, #10
 8013c6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013c72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013c76:	e7b8      	b.n	8013bea <_strtod_l+0x2aa>
 8013c78:	46be      	mov	lr, r7
 8013c7a:	e7c8      	b.n	8013c0e <_strtod_l+0x2ce>
 8013c7c:	2b69      	cmp	r3, #105	; 0x69
 8013c7e:	d0de      	beq.n	8013c3e <_strtod_l+0x2fe>
 8013c80:	2b6e      	cmp	r3, #110	; 0x6e
 8013c82:	f47f aeba 	bne.w	80139fa <_strtod_l+0xba>
 8013c86:	4990      	ldr	r1, [pc, #576]	; (8013ec8 <_strtod_l+0x588>)
 8013c88:	a81b      	add	r0, sp, #108	; 0x6c
 8013c8a:	f002 f82d 	bl	8015ce8 <__match>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f43f aeb3 	beq.w	80139fa <_strtod_l+0xba>
 8013c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	2b28      	cmp	r3, #40	; 0x28
 8013c9a:	d10e      	bne.n	8013cba <_strtod_l+0x37a>
 8013c9c:	aa1e      	add	r2, sp, #120	; 0x78
 8013c9e:	498b      	ldr	r1, [pc, #556]	; (8013ecc <_strtod_l+0x58c>)
 8013ca0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ca2:	f002 f835 	bl	8015d10 <__hexnan>
 8013ca6:	2805      	cmp	r0, #5
 8013ca8:	d107      	bne.n	8013cba <_strtod_l+0x37a>
 8013caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013cb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013cb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013cb8:	e681      	b.n	80139be <_strtod_l+0x7e>
 8013cba:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013ee0 <_strtod_l+0x5a0>
 8013cbe:	e7d2      	b.n	8013c66 <_strtod_l+0x326>
 8013cc0:	ebae 0302 	sub.w	r3, lr, r2
 8013cc4:	9306      	str	r3, [sp, #24]
 8013cc6:	9b05      	ldr	r3, [sp, #20]
 8013cc8:	9807      	ldr	r0, [sp, #28]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	bf08      	it	eq
 8013cce:	4623      	moveq	r3, r4
 8013cd0:	2c10      	cmp	r4, #16
 8013cd2:	9305      	str	r3, [sp, #20]
 8013cd4:	46a0      	mov	r8, r4
 8013cd6:	bfa8      	it	ge
 8013cd8:	f04f 0810 	movge.w	r8, #16
 8013cdc:	f7ec fc2a 	bl	8000534 <__aeabi_ui2d>
 8013ce0:	2c09      	cmp	r4, #9
 8013ce2:	4682      	mov	sl, r0
 8013ce4:	468b      	mov	fp, r1
 8013ce6:	dc13      	bgt.n	8013d10 <_strtod_l+0x3d0>
 8013ce8:	9b06      	ldr	r3, [sp, #24]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f43f ae67 	beq.w	80139be <_strtod_l+0x7e>
 8013cf0:	9b06      	ldr	r3, [sp, #24]
 8013cf2:	dd7a      	ble.n	8013dea <_strtod_l+0x4aa>
 8013cf4:	2b16      	cmp	r3, #22
 8013cf6:	dc61      	bgt.n	8013dbc <_strtod_l+0x47c>
 8013cf8:	4a75      	ldr	r2, [pc, #468]	; (8013ed0 <_strtod_l+0x590>)
 8013cfa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013cfe:	e9de 0100 	ldrd	r0, r1, [lr]
 8013d02:	4652      	mov	r2, sl
 8013d04:	465b      	mov	r3, fp
 8013d06:	f7ec fc8f 	bl	8000628 <__aeabi_dmul>
 8013d0a:	4682      	mov	sl, r0
 8013d0c:	468b      	mov	fp, r1
 8013d0e:	e656      	b.n	80139be <_strtod_l+0x7e>
 8013d10:	4b6f      	ldr	r3, [pc, #444]	; (8013ed0 <_strtod_l+0x590>)
 8013d12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013d16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013d1a:	f7ec fc85 	bl	8000628 <__aeabi_dmul>
 8013d1e:	4606      	mov	r6, r0
 8013d20:	4628      	mov	r0, r5
 8013d22:	460f      	mov	r7, r1
 8013d24:	f7ec fc06 	bl	8000534 <__aeabi_ui2d>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	4639      	mov	r1, r7
 8013d30:	f7ec fac4 	bl	80002bc <__adddf3>
 8013d34:	2c0f      	cmp	r4, #15
 8013d36:	4682      	mov	sl, r0
 8013d38:	468b      	mov	fp, r1
 8013d3a:	ddd5      	ble.n	8013ce8 <_strtod_l+0x3a8>
 8013d3c:	9b06      	ldr	r3, [sp, #24]
 8013d3e:	eba4 0808 	sub.w	r8, r4, r8
 8013d42:	4498      	add	r8, r3
 8013d44:	f1b8 0f00 	cmp.w	r8, #0
 8013d48:	f340 8096 	ble.w	8013e78 <_strtod_l+0x538>
 8013d4c:	f018 030f 	ands.w	r3, r8, #15
 8013d50:	d00a      	beq.n	8013d68 <_strtod_l+0x428>
 8013d52:	495f      	ldr	r1, [pc, #380]	; (8013ed0 <_strtod_l+0x590>)
 8013d54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013d58:	4652      	mov	r2, sl
 8013d5a:	465b      	mov	r3, fp
 8013d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d60:	f7ec fc62 	bl	8000628 <__aeabi_dmul>
 8013d64:	4682      	mov	sl, r0
 8013d66:	468b      	mov	fp, r1
 8013d68:	f038 080f 	bics.w	r8, r8, #15
 8013d6c:	d073      	beq.n	8013e56 <_strtod_l+0x516>
 8013d6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013d72:	dd47      	ble.n	8013e04 <_strtod_l+0x4c4>
 8013d74:	2400      	movs	r4, #0
 8013d76:	46a0      	mov	r8, r4
 8013d78:	9407      	str	r4, [sp, #28]
 8013d7a:	9405      	str	r4, [sp, #20]
 8013d7c:	2322      	movs	r3, #34	; 0x22
 8013d7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013ed8 <_strtod_l+0x598>
 8013d82:	f8c9 3000 	str.w	r3, [r9]
 8013d86:	f04f 0a00 	mov.w	sl, #0
 8013d8a:	9b07      	ldr	r3, [sp, #28]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	f43f ae16 	beq.w	80139be <_strtod_l+0x7e>
 8013d92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d94:	4648      	mov	r0, r9
 8013d96:	f002 f931 	bl	8015ffc <_Bfree>
 8013d9a:	9905      	ldr	r1, [sp, #20]
 8013d9c:	4648      	mov	r0, r9
 8013d9e:	f002 f92d 	bl	8015ffc <_Bfree>
 8013da2:	4641      	mov	r1, r8
 8013da4:	4648      	mov	r0, r9
 8013da6:	f002 f929 	bl	8015ffc <_Bfree>
 8013daa:	9907      	ldr	r1, [sp, #28]
 8013dac:	4648      	mov	r0, r9
 8013dae:	f002 f925 	bl	8015ffc <_Bfree>
 8013db2:	4621      	mov	r1, r4
 8013db4:	4648      	mov	r0, r9
 8013db6:	f002 f921 	bl	8015ffc <_Bfree>
 8013dba:	e600      	b.n	80139be <_strtod_l+0x7e>
 8013dbc:	9a06      	ldr	r2, [sp, #24]
 8013dbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	dbba      	blt.n	8013d3c <_strtod_l+0x3fc>
 8013dc6:	4d42      	ldr	r5, [pc, #264]	; (8013ed0 <_strtod_l+0x590>)
 8013dc8:	f1c4 040f 	rsb	r4, r4, #15
 8013dcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013dd0:	4652      	mov	r2, sl
 8013dd2:	465b      	mov	r3, fp
 8013dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dd8:	f7ec fc26 	bl	8000628 <__aeabi_dmul>
 8013ddc:	9b06      	ldr	r3, [sp, #24]
 8013dde:	1b1c      	subs	r4, r3, r4
 8013de0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013de4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013de8:	e78d      	b.n	8013d06 <_strtod_l+0x3c6>
 8013dea:	f113 0f16 	cmn.w	r3, #22
 8013dee:	dba5      	blt.n	8013d3c <_strtod_l+0x3fc>
 8013df0:	4a37      	ldr	r2, [pc, #220]	; (8013ed0 <_strtod_l+0x590>)
 8013df2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013df6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013dfa:	4650      	mov	r0, sl
 8013dfc:	4659      	mov	r1, fp
 8013dfe:	f7ec fd3d 	bl	800087c <__aeabi_ddiv>
 8013e02:	e782      	b.n	8013d0a <_strtod_l+0x3ca>
 8013e04:	2300      	movs	r3, #0
 8013e06:	4e33      	ldr	r6, [pc, #204]	; (8013ed4 <_strtod_l+0x594>)
 8013e08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013e0c:	4650      	mov	r0, sl
 8013e0e:	4659      	mov	r1, fp
 8013e10:	461d      	mov	r5, r3
 8013e12:	f1b8 0f01 	cmp.w	r8, #1
 8013e16:	dc21      	bgt.n	8013e5c <_strtod_l+0x51c>
 8013e18:	b10b      	cbz	r3, 8013e1e <_strtod_l+0x4de>
 8013e1a:	4682      	mov	sl, r0
 8013e1c:	468b      	mov	fp, r1
 8013e1e:	4b2d      	ldr	r3, [pc, #180]	; (8013ed4 <_strtod_l+0x594>)
 8013e20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013e24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013e28:	4652      	mov	r2, sl
 8013e2a:	465b      	mov	r3, fp
 8013e2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013e30:	f7ec fbfa 	bl	8000628 <__aeabi_dmul>
 8013e34:	4b28      	ldr	r3, [pc, #160]	; (8013ed8 <_strtod_l+0x598>)
 8013e36:	460a      	mov	r2, r1
 8013e38:	400b      	ands	r3, r1
 8013e3a:	4928      	ldr	r1, [pc, #160]	; (8013edc <_strtod_l+0x59c>)
 8013e3c:	428b      	cmp	r3, r1
 8013e3e:	4682      	mov	sl, r0
 8013e40:	d898      	bhi.n	8013d74 <_strtod_l+0x434>
 8013e42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013e46:	428b      	cmp	r3, r1
 8013e48:	bf86      	itte	hi
 8013e4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013ee4 <_strtod_l+0x5a4>
 8013e4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013e52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013e56:	2300      	movs	r3, #0
 8013e58:	9304      	str	r3, [sp, #16]
 8013e5a:	e077      	b.n	8013f4c <_strtod_l+0x60c>
 8013e5c:	f018 0f01 	tst.w	r8, #1
 8013e60:	d006      	beq.n	8013e70 <_strtod_l+0x530>
 8013e62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6a:	f7ec fbdd 	bl	8000628 <__aeabi_dmul>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	3501      	adds	r5, #1
 8013e72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013e76:	e7cc      	b.n	8013e12 <_strtod_l+0x4d2>
 8013e78:	d0ed      	beq.n	8013e56 <_strtod_l+0x516>
 8013e7a:	f1c8 0800 	rsb	r8, r8, #0
 8013e7e:	f018 020f 	ands.w	r2, r8, #15
 8013e82:	d00a      	beq.n	8013e9a <_strtod_l+0x55a>
 8013e84:	4b12      	ldr	r3, [pc, #72]	; (8013ed0 <_strtod_l+0x590>)
 8013e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e8a:	4650      	mov	r0, sl
 8013e8c:	4659      	mov	r1, fp
 8013e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e92:	f7ec fcf3 	bl	800087c <__aeabi_ddiv>
 8013e96:	4682      	mov	sl, r0
 8013e98:	468b      	mov	fp, r1
 8013e9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013e9e:	d0da      	beq.n	8013e56 <_strtod_l+0x516>
 8013ea0:	f1b8 0f1f 	cmp.w	r8, #31
 8013ea4:	dd20      	ble.n	8013ee8 <_strtod_l+0x5a8>
 8013ea6:	2400      	movs	r4, #0
 8013ea8:	46a0      	mov	r8, r4
 8013eaa:	9407      	str	r4, [sp, #28]
 8013eac:	9405      	str	r4, [sp, #20]
 8013eae:	2322      	movs	r3, #34	; 0x22
 8013eb0:	f04f 0a00 	mov.w	sl, #0
 8013eb4:	f04f 0b00 	mov.w	fp, #0
 8013eb8:	f8c9 3000 	str.w	r3, [r9]
 8013ebc:	e765      	b.n	8013d8a <_strtod_l+0x44a>
 8013ebe:	bf00      	nop
 8013ec0:	08017e99 	.word	0x08017e99
 8013ec4:	08017f23 	.word	0x08017f23
 8013ec8:	08017ea1 	.word	0x08017ea1
 8013ecc:	08017ee0 	.word	0x08017ee0
 8013ed0:	08017fc8 	.word	0x08017fc8
 8013ed4:	08017fa0 	.word	0x08017fa0
 8013ed8:	7ff00000 	.word	0x7ff00000
 8013edc:	7ca00000 	.word	0x7ca00000
 8013ee0:	fff80000 	.word	0xfff80000
 8013ee4:	7fefffff 	.word	0x7fefffff
 8013ee8:	f018 0310 	ands.w	r3, r8, #16
 8013eec:	bf18      	it	ne
 8013eee:	236a      	movne	r3, #106	; 0x6a
 8013ef0:	4da0      	ldr	r5, [pc, #640]	; (8014174 <_strtod_l+0x834>)
 8013ef2:	9304      	str	r3, [sp, #16]
 8013ef4:	4650      	mov	r0, sl
 8013ef6:	4659      	mov	r1, fp
 8013ef8:	2300      	movs	r3, #0
 8013efa:	f1b8 0f00 	cmp.w	r8, #0
 8013efe:	f300 810a 	bgt.w	8014116 <_strtod_l+0x7d6>
 8013f02:	b10b      	cbz	r3, 8013f08 <_strtod_l+0x5c8>
 8013f04:	4682      	mov	sl, r0
 8013f06:	468b      	mov	fp, r1
 8013f08:	9b04      	ldr	r3, [sp, #16]
 8013f0a:	b1bb      	cbz	r3, 8013f3c <_strtod_l+0x5fc>
 8013f0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013f10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	4659      	mov	r1, fp
 8013f18:	dd10      	ble.n	8013f3c <_strtod_l+0x5fc>
 8013f1a:	2b1f      	cmp	r3, #31
 8013f1c:	f340 8107 	ble.w	801412e <_strtod_l+0x7ee>
 8013f20:	2b34      	cmp	r3, #52	; 0x34
 8013f22:	bfde      	ittt	le
 8013f24:	3b20      	suble	r3, #32
 8013f26:	f04f 32ff 	movle.w	r2, #4294967295
 8013f2a:	fa02 f303 	lslle.w	r3, r2, r3
 8013f2e:	f04f 0a00 	mov.w	sl, #0
 8013f32:	bfcc      	ite	gt
 8013f34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013f38:	ea03 0b01 	andle.w	fp, r3, r1
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	2300      	movs	r3, #0
 8013f40:	4650      	mov	r0, sl
 8013f42:	4659      	mov	r1, fp
 8013f44:	f7ec fdd8 	bl	8000af8 <__aeabi_dcmpeq>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d1ac      	bne.n	8013ea6 <_strtod_l+0x566>
 8013f4c:	9b07      	ldr	r3, [sp, #28]
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	9a05      	ldr	r2, [sp, #20]
 8013f52:	9908      	ldr	r1, [sp, #32]
 8013f54:	4623      	mov	r3, r4
 8013f56:	4648      	mov	r0, r9
 8013f58:	f002 f8a2 	bl	80160a0 <__s2b>
 8013f5c:	9007      	str	r0, [sp, #28]
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	f43f af08 	beq.w	8013d74 <_strtod_l+0x434>
 8013f64:	9a06      	ldr	r2, [sp, #24]
 8013f66:	9b06      	ldr	r3, [sp, #24]
 8013f68:	2a00      	cmp	r2, #0
 8013f6a:	f1c3 0300 	rsb	r3, r3, #0
 8013f6e:	bfa8      	it	ge
 8013f70:	2300      	movge	r3, #0
 8013f72:	930e      	str	r3, [sp, #56]	; 0x38
 8013f74:	2400      	movs	r4, #0
 8013f76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8013f7c:	46a0      	mov	r8, r4
 8013f7e:	9b07      	ldr	r3, [sp, #28]
 8013f80:	4648      	mov	r0, r9
 8013f82:	6859      	ldr	r1, [r3, #4]
 8013f84:	f002 f806 	bl	8015f94 <_Balloc>
 8013f88:	9005      	str	r0, [sp, #20]
 8013f8a:	2800      	cmp	r0, #0
 8013f8c:	f43f aef6 	beq.w	8013d7c <_strtod_l+0x43c>
 8013f90:	9b07      	ldr	r3, [sp, #28]
 8013f92:	691a      	ldr	r2, [r3, #16]
 8013f94:	3202      	adds	r2, #2
 8013f96:	f103 010c 	add.w	r1, r3, #12
 8013f9a:	0092      	lsls	r2, r2, #2
 8013f9c:	300c      	adds	r0, #12
 8013f9e:	f7fe fd13 	bl	80129c8 <memcpy>
 8013fa2:	aa1e      	add	r2, sp, #120	; 0x78
 8013fa4:	a91d      	add	r1, sp, #116	; 0x74
 8013fa6:	ec4b ab10 	vmov	d0, sl, fp
 8013faa:	4648      	mov	r0, r9
 8013fac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013fb0:	f002 fb32 	bl	8016618 <__d2b>
 8013fb4:	901c      	str	r0, [sp, #112]	; 0x70
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	f43f aee0 	beq.w	8013d7c <_strtod_l+0x43c>
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	4648      	mov	r0, r9
 8013fc0:	f002 f8fa 	bl	80161b8 <__i2b>
 8013fc4:	4680      	mov	r8, r0
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f43f aed8 	beq.w	8013d7c <_strtod_l+0x43c>
 8013fcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013fce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013fd0:	2e00      	cmp	r6, #0
 8013fd2:	bfab      	itete	ge
 8013fd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013fd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013fd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013fda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013fdc:	bfac      	ite	ge
 8013fde:	18f7      	addge	r7, r6, r3
 8013fe0:	1b9d      	sublt	r5, r3, r6
 8013fe2:	9b04      	ldr	r3, [sp, #16]
 8013fe4:	1af6      	subs	r6, r6, r3
 8013fe6:	4416      	add	r6, r2
 8013fe8:	4b63      	ldr	r3, [pc, #396]	; (8014178 <_strtod_l+0x838>)
 8013fea:	3e01      	subs	r6, #1
 8013fec:	429e      	cmp	r6, r3
 8013fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013ff2:	f280 80af 	bge.w	8014154 <_strtod_l+0x814>
 8013ff6:	1b9b      	subs	r3, r3, r6
 8013ff8:	2b1f      	cmp	r3, #31
 8013ffa:	eba2 0203 	sub.w	r2, r2, r3
 8013ffe:	f04f 0101 	mov.w	r1, #1
 8014002:	f300 809b 	bgt.w	801413c <_strtod_l+0x7fc>
 8014006:	fa01 f303 	lsl.w	r3, r1, r3
 801400a:	930f      	str	r3, [sp, #60]	; 0x3c
 801400c:	2300      	movs	r3, #0
 801400e:	930a      	str	r3, [sp, #40]	; 0x28
 8014010:	18be      	adds	r6, r7, r2
 8014012:	9b04      	ldr	r3, [sp, #16]
 8014014:	42b7      	cmp	r7, r6
 8014016:	4415      	add	r5, r2
 8014018:	441d      	add	r5, r3
 801401a:	463b      	mov	r3, r7
 801401c:	bfa8      	it	ge
 801401e:	4633      	movge	r3, r6
 8014020:	42ab      	cmp	r3, r5
 8014022:	bfa8      	it	ge
 8014024:	462b      	movge	r3, r5
 8014026:	2b00      	cmp	r3, #0
 8014028:	bfc2      	ittt	gt
 801402a:	1af6      	subgt	r6, r6, r3
 801402c:	1aed      	subgt	r5, r5, r3
 801402e:	1aff      	subgt	r7, r7, r3
 8014030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014032:	b1bb      	cbz	r3, 8014064 <_strtod_l+0x724>
 8014034:	4641      	mov	r1, r8
 8014036:	461a      	mov	r2, r3
 8014038:	4648      	mov	r0, r9
 801403a:	f002 f95d 	bl	80162f8 <__pow5mult>
 801403e:	4680      	mov	r8, r0
 8014040:	2800      	cmp	r0, #0
 8014042:	f43f ae9b 	beq.w	8013d7c <_strtod_l+0x43c>
 8014046:	4601      	mov	r1, r0
 8014048:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801404a:	4648      	mov	r0, r9
 801404c:	f002 f8bd 	bl	80161ca <__multiply>
 8014050:	900c      	str	r0, [sp, #48]	; 0x30
 8014052:	2800      	cmp	r0, #0
 8014054:	f43f ae92 	beq.w	8013d7c <_strtod_l+0x43c>
 8014058:	991c      	ldr	r1, [sp, #112]	; 0x70
 801405a:	4648      	mov	r0, r9
 801405c:	f001 ffce 	bl	8015ffc <_Bfree>
 8014060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014062:	931c      	str	r3, [sp, #112]	; 0x70
 8014064:	2e00      	cmp	r6, #0
 8014066:	dc7a      	bgt.n	801415e <_strtod_l+0x81e>
 8014068:	9b06      	ldr	r3, [sp, #24]
 801406a:	2b00      	cmp	r3, #0
 801406c:	dd08      	ble.n	8014080 <_strtod_l+0x740>
 801406e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014070:	9905      	ldr	r1, [sp, #20]
 8014072:	4648      	mov	r0, r9
 8014074:	f002 f940 	bl	80162f8 <__pow5mult>
 8014078:	9005      	str	r0, [sp, #20]
 801407a:	2800      	cmp	r0, #0
 801407c:	f43f ae7e 	beq.w	8013d7c <_strtod_l+0x43c>
 8014080:	2d00      	cmp	r5, #0
 8014082:	dd08      	ble.n	8014096 <_strtod_l+0x756>
 8014084:	462a      	mov	r2, r5
 8014086:	9905      	ldr	r1, [sp, #20]
 8014088:	4648      	mov	r0, r9
 801408a:	f002 f983 	bl	8016394 <__lshift>
 801408e:	9005      	str	r0, [sp, #20]
 8014090:	2800      	cmp	r0, #0
 8014092:	f43f ae73 	beq.w	8013d7c <_strtod_l+0x43c>
 8014096:	2f00      	cmp	r7, #0
 8014098:	dd08      	ble.n	80140ac <_strtod_l+0x76c>
 801409a:	4641      	mov	r1, r8
 801409c:	463a      	mov	r2, r7
 801409e:	4648      	mov	r0, r9
 80140a0:	f002 f978 	bl	8016394 <__lshift>
 80140a4:	4680      	mov	r8, r0
 80140a6:	2800      	cmp	r0, #0
 80140a8:	f43f ae68 	beq.w	8013d7c <_strtod_l+0x43c>
 80140ac:	9a05      	ldr	r2, [sp, #20]
 80140ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80140b0:	4648      	mov	r0, r9
 80140b2:	f002 f9dd 	bl	8016470 <__mdiff>
 80140b6:	4604      	mov	r4, r0
 80140b8:	2800      	cmp	r0, #0
 80140ba:	f43f ae5f 	beq.w	8013d7c <_strtod_l+0x43c>
 80140be:	68c3      	ldr	r3, [r0, #12]
 80140c0:	930c      	str	r3, [sp, #48]	; 0x30
 80140c2:	2300      	movs	r3, #0
 80140c4:	60c3      	str	r3, [r0, #12]
 80140c6:	4641      	mov	r1, r8
 80140c8:	f002 f9b8 	bl	801643c <__mcmp>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	da55      	bge.n	801417c <_strtod_l+0x83c>
 80140d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140d2:	b9e3      	cbnz	r3, 801410e <_strtod_l+0x7ce>
 80140d4:	f1ba 0f00 	cmp.w	sl, #0
 80140d8:	d119      	bne.n	801410e <_strtod_l+0x7ce>
 80140da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140de:	b9b3      	cbnz	r3, 801410e <_strtod_l+0x7ce>
 80140e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80140e4:	0d1b      	lsrs	r3, r3, #20
 80140e6:	051b      	lsls	r3, r3, #20
 80140e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80140ec:	d90f      	bls.n	801410e <_strtod_l+0x7ce>
 80140ee:	6963      	ldr	r3, [r4, #20]
 80140f0:	b913      	cbnz	r3, 80140f8 <_strtod_l+0x7b8>
 80140f2:	6923      	ldr	r3, [r4, #16]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	dd0a      	ble.n	801410e <_strtod_l+0x7ce>
 80140f8:	4621      	mov	r1, r4
 80140fa:	2201      	movs	r2, #1
 80140fc:	4648      	mov	r0, r9
 80140fe:	f002 f949 	bl	8016394 <__lshift>
 8014102:	4641      	mov	r1, r8
 8014104:	4604      	mov	r4, r0
 8014106:	f002 f999 	bl	801643c <__mcmp>
 801410a:	2800      	cmp	r0, #0
 801410c:	dc67      	bgt.n	80141de <_strtod_l+0x89e>
 801410e:	9b04      	ldr	r3, [sp, #16]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d171      	bne.n	80141f8 <_strtod_l+0x8b8>
 8014114:	e63d      	b.n	8013d92 <_strtod_l+0x452>
 8014116:	f018 0f01 	tst.w	r8, #1
 801411a:	d004      	beq.n	8014126 <_strtod_l+0x7e6>
 801411c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014120:	f7ec fa82 	bl	8000628 <__aeabi_dmul>
 8014124:	2301      	movs	r3, #1
 8014126:	ea4f 0868 	mov.w	r8, r8, asr #1
 801412a:	3508      	adds	r5, #8
 801412c:	e6e5      	b.n	8013efa <_strtod_l+0x5ba>
 801412e:	f04f 32ff 	mov.w	r2, #4294967295
 8014132:	fa02 f303 	lsl.w	r3, r2, r3
 8014136:	ea03 0a0a 	and.w	sl, r3, sl
 801413a:	e6ff      	b.n	8013f3c <_strtod_l+0x5fc>
 801413c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014140:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014144:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014148:	36e2      	adds	r6, #226	; 0xe2
 801414a:	fa01 f306 	lsl.w	r3, r1, r6
 801414e:	930a      	str	r3, [sp, #40]	; 0x28
 8014150:	910f      	str	r1, [sp, #60]	; 0x3c
 8014152:	e75d      	b.n	8014010 <_strtod_l+0x6d0>
 8014154:	2300      	movs	r3, #0
 8014156:	930a      	str	r3, [sp, #40]	; 0x28
 8014158:	2301      	movs	r3, #1
 801415a:	930f      	str	r3, [sp, #60]	; 0x3c
 801415c:	e758      	b.n	8014010 <_strtod_l+0x6d0>
 801415e:	4632      	mov	r2, r6
 8014160:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014162:	4648      	mov	r0, r9
 8014164:	f002 f916 	bl	8016394 <__lshift>
 8014168:	901c      	str	r0, [sp, #112]	; 0x70
 801416a:	2800      	cmp	r0, #0
 801416c:	f47f af7c 	bne.w	8014068 <_strtod_l+0x728>
 8014170:	e604      	b.n	8013d7c <_strtod_l+0x43c>
 8014172:	bf00      	nop
 8014174:	08017ef8 	.word	0x08017ef8
 8014178:	fffffc02 	.word	0xfffffc02
 801417c:	465d      	mov	r5, fp
 801417e:	f040 8086 	bne.w	801428e <_strtod_l+0x94e>
 8014182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014188:	b32a      	cbz	r2, 80141d6 <_strtod_l+0x896>
 801418a:	4aaf      	ldr	r2, [pc, #700]	; (8014448 <_strtod_l+0xb08>)
 801418c:	4293      	cmp	r3, r2
 801418e:	d153      	bne.n	8014238 <_strtod_l+0x8f8>
 8014190:	9b04      	ldr	r3, [sp, #16]
 8014192:	4650      	mov	r0, sl
 8014194:	b1d3      	cbz	r3, 80141cc <_strtod_l+0x88c>
 8014196:	4aad      	ldr	r2, [pc, #692]	; (801444c <_strtod_l+0xb0c>)
 8014198:	402a      	ands	r2, r5
 801419a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801419e:	f04f 31ff 	mov.w	r1, #4294967295
 80141a2:	d816      	bhi.n	80141d2 <_strtod_l+0x892>
 80141a4:	0d12      	lsrs	r2, r2, #20
 80141a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80141aa:	fa01 f303 	lsl.w	r3, r1, r3
 80141ae:	4298      	cmp	r0, r3
 80141b0:	d142      	bne.n	8014238 <_strtod_l+0x8f8>
 80141b2:	4ba7      	ldr	r3, [pc, #668]	; (8014450 <_strtod_l+0xb10>)
 80141b4:	429d      	cmp	r5, r3
 80141b6:	d102      	bne.n	80141be <_strtod_l+0x87e>
 80141b8:	3001      	adds	r0, #1
 80141ba:	f43f addf 	beq.w	8013d7c <_strtod_l+0x43c>
 80141be:	4ba3      	ldr	r3, [pc, #652]	; (801444c <_strtod_l+0xb0c>)
 80141c0:	402b      	ands	r3, r5
 80141c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80141c6:	f04f 0a00 	mov.w	sl, #0
 80141ca:	e7a0      	b.n	801410e <_strtod_l+0x7ce>
 80141cc:	f04f 33ff 	mov.w	r3, #4294967295
 80141d0:	e7ed      	b.n	80141ae <_strtod_l+0x86e>
 80141d2:	460b      	mov	r3, r1
 80141d4:	e7eb      	b.n	80141ae <_strtod_l+0x86e>
 80141d6:	bb7b      	cbnz	r3, 8014238 <_strtod_l+0x8f8>
 80141d8:	f1ba 0f00 	cmp.w	sl, #0
 80141dc:	d12c      	bne.n	8014238 <_strtod_l+0x8f8>
 80141de:	9904      	ldr	r1, [sp, #16]
 80141e0:	4a9a      	ldr	r2, [pc, #616]	; (801444c <_strtod_l+0xb0c>)
 80141e2:	465b      	mov	r3, fp
 80141e4:	b1f1      	cbz	r1, 8014224 <_strtod_l+0x8e4>
 80141e6:	ea02 010b 	and.w	r1, r2, fp
 80141ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80141ee:	dc19      	bgt.n	8014224 <_strtod_l+0x8e4>
 80141f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80141f4:	f77f ae5b 	ble.w	8013eae <_strtod_l+0x56e>
 80141f8:	4a96      	ldr	r2, [pc, #600]	; (8014454 <_strtod_l+0xb14>)
 80141fa:	2300      	movs	r3, #0
 80141fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014200:	4650      	mov	r0, sl
 8014202:	4659      	mov	r1, fp
 8014204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014208:	f7ec fa0e 	bl	8000628 <__aeabi_dmul>
 801420c:	4682      	mov	sl, r0
 801420e:	468b      	mov	fp, r1
 8014210:	2900      	cmp	r1, #0
 8014212:	f47f adbe 	bne.w	8013d92 <_strtod_l+0x452>
 8014216:	2800      	cmp	r0, #0
 8014218:	f47f adbb 	bne.w	8013d92 <_strtod_l+0x452>
 801421c:	2322      	movs	r3, #34	; 0x22
 801421e:	f8c9 3000 	str.w	r3, [r9]
 8014222:	e5b6      	b.n	8013d92 <_strtod_l+0x452>
 8014224:	4013      	ands	r3, r2
 8014226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801422a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801422e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014232:	f04f 3aff 	mov.w	sl, #4294967295
 8014236:	e76a      	b.n	801410e <_strtod_l+0x7ce>
 8014238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801423a:	b193      	cbz	r3, 8014262 <_strtod_l+0x922>
 801423c:	422b      	tst	r3, r5
 801423e:	f43f af66 	beq.w	801410e <_strtod_l+0x7ce>
 8014242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014244:	9a04      	ldr	r2, [sp, #16]
 8014246:	4650      	mov	r0, sl
 8014248:	4659      	mov	r1, fp
 801424a:	b173      	cbz	r3, 801426a <_strtod_l+0x92a>
 801424c:	f7ff fb5b 	bl	8013906 <sulp>
 8014250:	4602      	mov	r2, r0
 8014252:	460b      	mov	r3, r1
 8014254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014258:	f7ec f830 	bl	80002bc <__adddf3>
 801425c:	4682      	mov	sl, r0
 801425e:	468b      	mov	fp, r1
 8014260:	e755      	b.n	801410e <_strtod_l+0x7ce>
 8014262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014264:	ea13 0f0a 	tst.w	r3, sl
 8014268:	e7e9      	b.n	801423e <_strtod_l+0x8fe>
 801426a:	f7ff fb4c 	bl	8013906 <sulp>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014276:	f7ec f81f 	bl	80002b8 <__aeabi_dsub>
 801427a:	2200      	movs	r2, #0
 801427c:	2300      	movs	r3, #0
 801427e:	4682      	mov	sl, r0
 8014280:	468b      	mov	fp, r1
 8014282:	f7ec fc39 	bl	8000af8 <__aeabi_dcmpeq>
 8014286:	2800      	cmp	r0, #0
 8014288:	f47f ae11 	bne.w	8013eae <_strtod_l+0x56e>
 801428c:	e73f      	b.n	801410e <_strtod_l+0x7ce>
 801428e:	4641      	mov	r1, r8
 8014290:	4620      	mov	r0, r4
 8014292:	f002 fa10 	bl	80166b6 <__ratio>
 8014296:	ec57 6b10 	vmov	r6, r7, d0
 801429a:	2200      	movs	r2, #0
 801429c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80142a0:	ee10 0a10 	vmov	r0, s0
 80142a4:	4639      	mov	r1, r7
 80142a6:	f7ec fc3b 	bl	8000b20 <__aeabi_dcmple>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d077      	beq.n	801439e <_strtod_l+0xa5e>
 80142ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d04a      	beq.n	801434a <_strtod_l+0xa0a>
 80142b4:	4b68      	ldr	r3, [pc, #416]	; (8014458 <_strtod_l+0xb18>)
 80142b6:	2200      	movs	r2, #0
 80142b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80142bc:	4f66      	ldr	r7, [pc, #408]	; (8014458 <_strtod_l+0xb18>)
 80142be:	2600      	movs	r6, #0
 80142c0:	4b62      	ldr	r3, [pc, #392]	; (801444c <_strtod_l+0xb0c>)
 80142c2:	402b      	ands	r3, r5
 80142c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80142c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142c8:	4b64      	ldr	r3, [pc, #400]	; (801445c <_strtod_l+0xb1c>)
 80142ca:	429a      	cmp	r2, r3
 80142cc:	f040 80ce 	bne.w	801446c <_strtod_l+0xb2c>
 80142d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80142d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80142d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80142dc:	ec4b ab10 	vmov	d0, sl, fp
 80142e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80142e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80142e8:	f002 f920 	bl	801652c <__ulp>
 80142ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80142f0:	ec53 2b10 	vmov	r2, r3, d0
 80142f4:	f7ec f998 	bl	8000628 <__aeabi_dmul>
 80142f8:	4652      	mov	r2, sl
 80142fa:	465b      	mov	r3, fp
 80142fc:	f7eb ffde 	bl	80002bc <__adddf3>
 8014300:	460b      	mov	r3, r1
 8014302:	4952      	ldr	r1, [pc, #328]	; (801444c <_strtod_l+0xb0c>)
 8014304:	4a56      	ldr	r2, [pc, #344]	; (8014460 <_strtod_l+0xb20>)
 8014306:	4019      	ands	r1, r3
 8014308:	4291      	cmp	r1, r2
 801430a:	4682      	mov	sl, r0
 801430c:	d95b      	bls.n	80143c6 <_strtod_l+0xa86>
 801430e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014310:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014314:	4293      	cmp	r3, r2
 8014316:	d103      	bne.n	8014320 <_strtod_l+0x9e0>
 8014318:	9b08      	ldr	r3, [sp, #32]
 801431a:	3301      	adds	r3, #1
 801431c:	f43f ad2e 	beq.w	8013d7c <_strtod_l+0x43c>
 8014320:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014450 <_strtod_l+0xb10>
 8014324:	f04f 3aff 	mov.w	sl, #4294967295
 8014328:	991c      	ldr	r1, [sp, #112]	; 0x70
 801432a:	4648      	mov	r0, r9
 801432c:	f001 fe66 	bl	8015ffc <_Bfree>
 8014330:	9905      	ldr	r1, [sp, #20]
 8014332:	4648      	mov	r0, r9
 8014334:	f001 fe62 	bl	8015ffc <_Bfree>
 8014338:	4641      	mov	r1, r8
 801433a:	4648      	mov	r0, r9
 801433c:	f001 fe5e 	bl	8015ffc <_Bfree>
 8014340:	4621      	mov	r1, r4
 8014342:	4648      	mov	r0, r9
 8014344:	f001 fe5a 	bl	8015ffc <_Bfree>
 8014348:	e619      	b.n	8013f7e <_strtod_l+0x63e>
 801434a:	f1ba 0f00 	cmp.w	sl, #0
 801434e:	d11a      	bne.n	8014386 <_strtod_l+0xa46>
 8014350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014354:	b9eb      	cbnz	r3, 8014392 <_strtod_l+0xa52>
 8014356:	2200      	movs	r2, #0
 8014358:	4b3f      	ldr	r3, [pc, #252]	; (8014458 <_strtod_l+0xb18>)
 801435a:	4630      	mov	r0, r6
 801435c:	4639      	mov	r1, r7
 801435e:	f7ec fbd5 	bl	8000b0c <__aeabi_dcmplt>
 8014362:	b9c8      	cbnz	r0, 8014398 <_strtod_l+0xa58>
 8014364:	4630      	mov	r0, r6
 8014366:	4639      	mov	r1, r7
 8014368:	2200      	movs	r2, #0
 801436a:	4b3e      	ldr	r3, [pc, #248]	; (8014464 <_strtod_l+0xb24>)
 801436c:	f7ec f95c 	bl	8000628 <__aeabi_dmul>
 8014370:	4606      	mov	r6, r0
 8014372:	460f      	mov	r7, r1
 8014374:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014378:	9618      	str	r6, [sp, #96]	; 0x60
 801437a:	9319      	str	r3, [sp, #100]	; 0x64
 801437c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014380:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014384:	e79c      	b.n	80142c0 <_strtod_l+0x980>
 8014386:	f1ba 0f01 	cmp.w	sl, #1
 801438a:	d102      	bne.n	8014392 <_strtod_l+0xa52>
 801438c:	2d00      	cmp	r5, #0
 801438e:	f43f ad8e 	beq.w	8013eae <_strtod_l+0x56e>
 8014392:	2200      	movs	r2, #0
 8014394:	4b34      	ldr	r3, [pc, #208]	; (8014468 <_strtod_l+0xb28>)
 8014396:	e78f      	b.n	80142b8 <_strtod_l+0x978>
 8014398:	2600      	movs	r6, #0
 801439a:	4f32      	ldr	r7, [pc, #200]	; (8014464 <_strtod_l+0xb24>)
 801439c:	e7ea      	b.n	8014374 <_strtod_l+0xa34>
 801439e:	4b31      	ldr	r3, [pc, #196]	; (8014464 <_strtod_l+0xb24>)
 80143a0:	4630      	mov	r0, r6
 80143a2:	4639      	mov	r1, r7
 80143a4:	2200      	movs	r2, #0
 80143a6:	f7ec f93f 	bl	8000628 <__aeabi_dmul>
 80143aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143ac:	4606      	mov	r6, r0
 80143ae:	460f      	mov	r7, r1
 80143b0:	b933      	cbnz	r3, 80143c0 <_strtod_l+0xa80>
 80143b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143b6:	9010      	str	r0, [sp, #64]	; 0x40
 80143b8:	9311      	str	r3, [sp, #68]	; 0x44
 80143ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80143be:	e7df      	b.n	8014380 <_strtod_l+0xa40>
 80143c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80143c4:	e7f9      	b.n	80143ba <_strtod_l+0xa7a>
 80143c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80143ca:	9b04      	ldr	r3, [sp, #16]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d1ab      	bne.n	8014328 <_strtod_l+0x9e8>
 80143d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143d4:	0d1b      	lsrs	r3, r3, #20
 80143d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143d8:	051b      	lsls	r3, r3, #20
 80143da:	429a      	cmp	r2, r3
 80143dc:	465d      	mov	r5, fp
 80143de:	d1a3      	bne.n	8014328 <_strtod_l+0x9e8>
 80143e0:	4639      	mov	r1, r7
 80143e2:	4630      	mov	r0, r6
 80143e4:	f7ec fbd0 	bl	8000b88 <__aeabi_d2iz>
 80143e8:	f7ec f8b4 	bl	8000554 <__aeabi_i2d>
 80143ec:	460b      	mov	r3, r1
 80143ee:	4602      	mov	r2, r0
 80143f0:	4639      	mov	r1, r7
 80143f2:	4630      	mov	r0, r6
 80143f4:	f7eb ff60 	bl	80002b8 <__aeabi_dsub>
 80143f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143fa:	4606      	mov	r6, r0
 80143fc:	460f      	mov	r7, r1
 80143fe:	b933      	cbnz	r3, 801440e <_strtod_l+0xace>
 8014400:	f1ba 0f00 	cmp.w	sl, #0
 8014404:	d103      	bne.n	801440e <_strtod_l+0xace>
 8014406:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801440a:	2d00      	cmp	r5, #0
 801440c:	d06d      	beq.n	80144ea <_strtod_l+0xbaa>
 801440e:	a30a      	add	r3, pc, #40	; (adr r3, 8014438 <_strtod_l+0xaf8>)
 8014410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014414:	4630      	mov	r0, r6
 8014416:	4639      	mov	r1, r7
 8014418:	f7ec fb78 	bl	8000b0c <__aeabi_dcmplt>
 801441c:	2800      	cmp	r0, #0
 801441e:	f47f acb8 	bne.w	8013d92 <_strtod_l+0x452>
 8014422:	a307      	add	r3, pc, #28	; (adr r3, 8014440 <_strtod_l+0xb00>)
 8014424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014428:	4630      	mov	r0, r6
 801442a:	4639      	mov	r1, r7
 801442c:	f7ec fb8c 	bl	8000b48 <__aeabi_dcmpgt>
 8014430:	2800      	cmp	r0, #0
 8014432:	f43f af79 	beq.w	8014328 <_strtod_l+0x9e8>
 8014436:	e4ac      	b.n	8013d92 <_strtod_l+0x452>
 8014438:	94a03595 	.word	0x94a03595
 801443c:	3fdfffff 	.word	0x3fdfffff
 8014440:	35afe535 	.word	0x35afe535
 8014444:	3fe00000 	.word	0x3fe00000
 8014448:	000fffff 	.word	0x000fffff
 801444c:	7ff00000 	.word	0x7ff00000
 8014450:	7fefffff 	.word	0x7fefffff
 8014454:	39500000 	.word	0x39500000
 8014458:	3ff00000 	.word	0x3ff00000
 801445c:	7fe00000 	.word	0x7fe00000
 8014460:	7c9fffff 	.word	0x7c9fffff
 8014464:	3fe00000 	.word	0x3fe00000
 8014468:	bff00000 	.word	0xbff00000
 801446c:	9b04      	ldr	r3, [sp, #16]
 801446e:	b333      	cbz	r3, 80144be <_strtod_l+0xb7e>
 8014470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014472:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014476:	d822      	bhi.n	80144be <_strtod_l+0xb7e>
 8014478:	a327      	add	r3, pc, #156	; (adr r3, 8014518 <_strtod_l+0xbd8>)
 801447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447e:	4630      	mov	r0, r6
 8014480:	4639      	mov	r1, r7
 8014482:	f7ec fb4d 	bl	8000b20 <__aeabi_dcmple>
 8014486:	b1a0      	cbz	r0, 80144b2 <_strtod_l+0xb72>
 8014488:	4639      	mov	r1, r7
 801448a:	4630      	mov	r0, r6
 801448c:	f7ec fba4 	bl	8000bd8 <__aeabi_d2uiz>
 8014490:	2800      	cmp	r0, #0
 8014492:	bf08      	it	eq
 8014494:	2001      	moveq	r0, #1
 8014496:	f7ec f84d 	bl	8000534 <__aeabi_ui2d>
 801449a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801449c:	4606      	mov	r6, r0
 801449e:	460f      	mov	r7, r1
 80144a0:	bb03      	cbnz	r3, 80144e4 <_strtod_l+0xba4>
 80144a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144a6:	9012      	str	r0, [sp, #72]	; 0x48
 80144a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80144aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80144ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80144b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80144ba:	1a9b      	subs	r3, r3, r2
 80144bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80144be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80144c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80144c6:	f002 f831 	bl	801652c <__ulp>
 80144ca:	4650      	mov	r0, sl
 80144cc:	ec53 2b10 	vmov	r2, r3, d0
 80144d0:	4659      	mov	r1, fp
 80144d2:	f7ec f8a9 	bl	8000628 <__aeabi_dmul>
 80144d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144da:	f7eb feef 	bl	80002bc <__adddf3>
 80144de:	4682      	mov	sl, r0
 80144e0:	468b      	mov	fp, r1
 80144e2:	e772      	b.n	80143ca <_strtod_l+0xa8a>
 80144e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80144e8:	e7df      	b.n	80144aa <_strtod_l+0xb6a>
 80144ea:	a30d      	add	r3, pc, #52	; (adr r3, 8014520 <_strtod_l+0xbe0>)
 80144ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f0:	f7ec fb0c 	bl	8000b0c <__aeabi_dcmplt>
 80144f4:	e79c      	b.n	8014430 <_strtod_l+0xaf0>
 80144f6:	2300      	movs	r3, #0
 80144f8:	930d      	str	r3, [sp, #52]	; 0x34
 80144fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80144fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	f7ff ba61 	b.w	80139c6 <_strtod_l+0x86>
 8014504:	2b65      	cmp	r3, #101	; 0x65
 8014506:	f04f 0200 	mov.w	r2, #0
 801450a:	f43f ab4e 	beq.w	8013baa <_strtod_l+0x26a>
 801450e:	2101      	movs	r1, #1
 8014510:	4614      	mov	r4, r2
 8014512:	9104      	str	r1, [sp, #16]
 8014514:	f7ff bacb 	b.w	8013aae <_strtod_l+0x16e>
 8014518:	ffc00000 	.word	0xffc00000
 801451c:	41dfffff 	.word	0x41dfffff
 8014520:	94a03595 	.word	0x94a03595
 8014524:	3fcfffff 	.word	0x3fcfffff

08014528 <_strtod_r>:
 8014528:	4b05      	ldr	r3, [pc, #20]	; (8014540 <_strtod_r+0x18>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	b410      	push	{r4}
 801452e:	6a1b      	ldr	r3, [r3, #32]
 8014530:	4c04      	ldr	r4, [pc, #16]	; (8014544 <_strtod_r+0x1c>)
 8014532:	2b00      	cmp	r3, #0
 8014534:	bf08      	it	eq
 8014536:	4623      	moveq	r3, r4
 8014538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801453c:	f7ff ba00 	b.w	8013940 <_strtod_l>
 8014540:	2000000c 	.word	0x2000000c
 8014544:	20000070 	.word	0x20000070

08014548 <_strtol_l.isra.0>:
 8014548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801454c:	4680      	mov	r8, r0
 801454e:	4689      	mov	r9, r1
 8014550:	4692      	mov	sl, r2
 8014552:	461e      	mov	r6, r3
 8014554:	460f      	mov	r7, r1
 8014556:	463d      	mov	r5, r7
 8014558:	9808      	ldr	r0, [sp, #32]
 801455a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801455e:	f001 fc67 	bl	8015e30 <__locale_ctype_ptr_l>
 8014562:	4420      	add	r0, r4
 8014564:	7843      	ldrb	r3, [r0, #1]
 8014566:	f013 0308 	ands.w	r3, r3, #8
 801456a:	d132      	bne.n	80145d2 <_strtol_l.isra.0+0x8a>
 801456c:	2c2d      	cmp	r4, #45	; 0x2d
 801456e:	d132      	bne.n	80145d6 <_strtol_l.isra.0+0x8e>
 8014570:	787c      	ldrb	r4, [r7, #1]
 8014572:	1cbd      	adds	r5, r7, #2
 8014574:	2201      	movs	r2, #1
 8014576:	2e00      	cmp	r6, #0
 8014578:	d05d      	beq.n	8014636 <_strtol_l.isra.0+0xee>
 801457a:	2e10      	cmp	r6, #16
 801457c:	d109      	bne.n	8014592 <_strtol_l.isra.0+0x4a>
 801457e:	2c30      	cmp	r4, #48	; 0x30
 8014580:	d107      	bne.n	8014592 <_strtol_l.isra.0+0x4a>
 8014582:	782b      	ldrb	r3, [r5, #0]
 8014584:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014588:	2b58      	cmp	r3, #88	; 0x58
 801458a:	d14f      	bne.n	801462c <_strtol_l.isra.0+0xe4>
 801458c:	786c      	ldrb	r4, [r5, #1]
 801458e:	2610      	movs	r6, #16
 8014590:	3502      	adds	r5, #2
 8014592:	2a00      	cmp	r2, #0
 8014594:	bf14      	ite	ne
 8014596:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801459a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801459e:	2700      	movs	r7, #0
 80145a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80145a4:	4638      	mov	r0, r7
 80145a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80145aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80145ae:	2b09      	cmp	r3, #9
 80145b0:	d817      	bhi.n	80145e2 <_strtol_l.isra.0+0x9a>
 80145b2:	461c      	mov	r4, r3
 80145b4:	42a6      	cmp	r6, r4
 80145b6:	dd23      	ble.n	8014600 <_strtol_l.isra.0+0xb8>
 80145b8:	1c7b      	adds	r3, r7, #1
 80145ba:	d007      	beq.n	80145cc <_strtol_l.isra.0+0x84>
 80145bc:	4584      	cmp	ip, r0
 80145be:	d31c      	bcc.n	80145fa <_strtol_l.isra.0+0xb2>
 80145c0:	d101      	bne.n	80145c6 <_strtol_l.isra.0+0x7e>
 80145c2:	45a6      	cmp	lr, r4
 80145c4:	db19      	blt.n	80145fa <_strtol_l.isra.0+0xb2>
 80145c6:	fb00 4006 	mla	r0, r0, r6, r4
 80145ca:	2701      	movs	r7, #1
 80145cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80145d0:	e7eb      	b.n	80145aa <_strtol_l.isra.0+0x62>
 80145d2:	462f      	mov	r7, r5
 80145d4:	e7bf      	b.n	8014556 <_strtol_l.isra.0+0xe>
 80145d6:	2c2b      	cmp	r4, #43	; 0x2b
 80145d8:	bf04      	itt	eq
 80145da:	1cbd      	addeq	r5, r7, #2
 80145dc:	787c      	ldrbeq	r4, [r7, #1]
 80145de:	461a      	mov	r2, r3
 80145e0:	e7c9      	b.n	8014576 <_strtol_l.isra.0+0x2e>
 80145e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80145e6:	2b19      	cmp	r3, #25
 80145e8:	d801      	bhi.n	80145ee <_strtol_l.isra.0+0xa6>
 80145ea:	3c37      	subs	r4, #55	; 0x37
 80145ec:	e7e2      	b.n	80145b4 <_strtol_l.isra.0+0x6c>
 80145ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80145f2:	2b19      	cmp	r3, #25
 80145f4:	d804      	bhi.n	8014600 <_strtol_l.isra.0+0xb8>
 80145f6:	3c57      	subs	r4, #87	; 0x57
 80145f8:	e7dc      	b.n	80145b4 <_strtol_l.isra.0+0x6c>
 80145fa:	f04f 37ff 	mov.w	r7, #4294967295
 80145fe:	e7e5      	b.n	80145cc <_strtol_l.isra.0+0x84>
 8014600:	1c7b      	adds	r3, r7, #1
 8014602:	d108      	bne.n	8014616 <_strtol_l.isra.0+0xce>
 8014604:	2322      	movs	r3, #34	; 0x22
 8014606:	f8c8 3000 	str.w	r3, [r8]
 801460a:	4608      	mov	r0, r1
 801460c:	f1ba 0f00 	cmp.w	sl, #0
 8014610:	d107      	bne.n	8014622 <_strtol_l.isra.0+0xda>
 8014612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014616:	b102      	cbz	r2, 801461a <_strtol_l.isra.0+0xd2>
 8014618:	4240      	negs	r0, r0
 801461a:	f1ba 0f00 	cmp.w	sl, #0
 801461e:	d0f8      	beq.n	8014612 <_strtol_l.isra.0+0xca>
 8014620:	b10f      	cbz	r7, 8014626 <_strtol_l.isra.0+0xde>
 8014622:	f105 39ff 	add.w	r9, r5, #4294967295
 8014626:	f8ca 9000 	str.w	r9, [sl]
 801462a:	e7f2      	b.n	8014612 <_strtol_l.isra.0+0xca>
 801462c:	2430      	movs	r4, #48	; 0x30
 801462e:	2e00      	cmp	r6, #0
 8014630:	d1af      	bne.n	8014592 <_strtol_l.isra.0+0x4a>
 8014632:	2608      	movs	r6, #8
 8014634:	e7ad      	b.n	8014592 <_strtol_l.isra.0+0x4a>
 8014636:	2c30      	cmp	r4, #48	; 0x30
 8014638:	d0a3      	beq.n	8014582 <_strtol_l.isra.0+0x3a>
 801463a:	260a      	movs	r6, #10
 801463c:	e7a9      	b.n	8014592 <_strtol_l.isra.0+0x4a>
	...

08014640 <_strtol_r>:
 8014640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014642:	4c06      	ldr	r4, [pc, #24]	; (801465c <_strtol_r+0x1c>)
 8014644:	4d06      	ldr	r5, [pc, #24]	; (8014660 <_strtol_r+0x20>)
 8014646:	6824      	ldr	r4, [r4, #0]
 8014648:	6a24      	ldr	r4, [r4, #32]
 801464a:	2c00      	cmp	r4, #0
 801464c:	bf08      	it	eq
 801464e:	462c      	moveq	r4, r5
 8014650:	9400      	str	r4, [sp, #0]
 8014652:	f7ff ff79 	bl	8014548 <_strtol_l.isra.0>
 8014656:	b003      	add	sp, #12
 8014658:	bd30      	pop	{r4, r5, pc}
 801465a:	bf00      	nop
 801465c:	2000000c 	.word	0x2000000c
 8014660:	20000070 	.word	0x20000070

08014664 <_vsiprintf_r>:
 8014664:	b500      	push	{lr}
 8014666:	b09b      	sub	sp, #108	; 0x6c
 8014668:	9100      	str	r1, [sp, #0]
 801466a:	9104      	str	r1, [sp, #16]
 801466c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014670:	9105      	str	r1, [sp, #20]
 8014672:	9102      	str	r1, [sp, #8]
 8014674:	4905      	ldr	r1, [pc, #20]	; (801468c <_vsiprintf_r+0x28>)
 8014676:	9103      	str	r1, [sp, #12]
 8014678:	4669      	mov	r1, sp
 801467a:	f002 f99b 	bl	80169b4 <_svfiprintf_r>
 801467e:	9b00      	ldr	r3, [sp, #0]
 8014680:	2200      	movs	r2, #0
 8014682:	701a      	strb	r2, [r3, #0]
 8014684:	b01b      	add	sp, #108	; 0x6c
 8014686:	f85d fb04 	ldr.w	pc, [sp], #4
 801468a:	bf00      	nop
 801468c:	ffff0208 	.word	0xffff0208

08014690 <vsiprintf>:
 8014690:	4613      	mov	r3, r2
 8014692:	460a      	mov	r2, r1
 8014694:	4601      	mov	r1, r0
 8014696:	4802      	ldr	r0, [pc, #8]	; (80146a0 <vsiprintf+0x10>)
 8014698:	6800      	ldr	r0, [r0, #0]
 801469a:	f7ff bfe3 	b.w	8014664 <_vsiprintf_r>
 801469e:	bf00      	nop
 80146a0:	2000000c 	.word	0x2000000c

080146a4 <__swbuf_r>:
 80146a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a6:	460e      	mov	r6, r1
 80146a8:	4614      	mov	r4, r2
 80146aa:	4605      	mov	r5, r0
 80146ac:	b118      	cbz	r0, 80146b6 <__swbuf_r+0x12>
 80146ae:	6983      	ldr	r3, [r0, #24]
 80146b0:	b90b      	cbnz	r3, 80146b6 <__swbuf_r+0x12>
 80146b2:	f001 f80d 	bl	80156d0 <__sinit>
 80146b6:	4b21      	ldr	r3, [pc, #132]	; (801473c <__swbuf_r+0x98>)
 80146b8:	429c      	cmp	r4, r3
 80146ba:	d12a      	bne.n	8014712 <__swbuf_r+0x6e>
 80146bc:	686c      	ldr	r4, [r5, #4]
 80146be:	69a3      	ldr	r3, [r4, #24]
 80146c0:	60a3      	str	r3, [r4, #8]
 80146c2:	89a3      	ldrh	r3, [r4, #12]
 80146c4:	071a      	lsls	r2, r3, #28
 80146c6:	d52e      	bpl.n	8014726 <__swbuf_r+0x82>
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	b363      	cbz	r3, 8014726 <__swbuf_r+0x82>
 80146cc:	6923      	ldr	r3, [r4, #16]
 80146ce:	6820      	ldr	r0, [r4, #0]
 80146d0:	1ac0      	subs	r0, r0, r3
 80146d2:	6963      	ldr	r3, [r4, #20]
 80146d4:	b2f6      	uxtb	r6, r6
 80146d6:	4283      	cmp	r3, r0
 80146d8:	4637      	mov	r7, r6
 80146da:	dc04      	bgt.n	80146e6 <__swbuf_r+0x42>
 80146dc:	4621      	mov	r1, r4
 80146de:	4628      	mov	r0, r5
 80146e0:	f000 ff8c 	bl	80155fc <_fflush_r>
 80146e4:	bb28      	cbnz	r0, 8014732 <__swbuf_r+0x8e>
 80146e6:	68a3      	ldr	r3, [r4, #8]
 80146e8:	3b01      	subs	r3, #1
 80146ea:	60a3      	str	r3, [r4, #8]
 80146ec:	6823      	ldr	r3, [r4, #0]
 80146ee:	1c5a      	adds	r2, r3, #1
 80146f0:	6022      	str	r2, [r4, #0]
 80146f2:	701e      	strb	r6, [r3, #0]
 80146f4:	6963      	ldr	r3, [r4, #20]
 80146f6:	3001      	adds	r0, #1
 80146f8:	4283      	cmp	r3, r0
 80146fa:	d004      	beq.n	8014706 <__swbuf_r+0x62>
 80146fc:	89a3      	ldrh	r3, [r4, #12]
 80146fe:	07db      	lsls	r3, r3, #31
 8014700:	d519      	bpl.n	8014736 <__swbuf_r+0x92>
 8014702:	2e0a      	cmp	r6, #10
 8014704:	d117      	bne.n	8014736 <__swbuf_r+0x92>
 8014706:	4621      	mov	r1, r4
 8014708:	4628      	mov	r0, r5
 801470a:	f000 ff77 	bl	80155fc <_fflush_r>
 801470e:	b190      	cbz	r0, 8014736 <__swbuf_r+0x92>
 8014710:	e00f      	b.n	8014732 <__swbuf_r+0x8e>
 8014712:	4b0b      	ldr	r3, [pc, #44]	; (8014740 <__swbuf_r+0x9c>)
 8014714:	429c      	cmp	r4, r3
 8014716:	d101      	bne.n	801471c <__swbuf_r+0x78>
 8014718:	68ac      	ldr	r4, [r5, #8]
 801471a:	e7d0      	b.n	80146be <__swbuf_r+0x1a>
 801471c:	4b09      	ldr	r3, [pc, #36]	; (8014744 <__swbuf_r+0xa0>)
 801471e:	429c      	cmp	r4, r3
 8014720:	bf08      	it	eq
 8014722:	68ec      	ldreq	r4, [r5, #12]
 8014724:	e7cb      	b.n	80146be <__swbuf_r+0x1a>
 8014726:	4621      	mov	r1, r4
 8014728:	4628      	mov	r0, r5
 801472a:	f000 f81f 	bl	801476c <__swsetup_r>
 801472e:	2800      	cmp	r0, #0
 8014730:	d0cc      	beq.n	80146cc <__swbuf_r+0x28>
 8014732:	f04f 37ff 	mov.w	r7, #4294967295
 8014736:	4638      	mov	r0, r7
 8014738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801473a:	bf00      	nop
 801473c:	08017f50 	.word	0x08017f50
 8014740:	08017f70 	.word	0x08017f70
 8014744:	08017f30 	.word	0x08017f30

08014748 <_write_r>:
 8014748:	b538      	push	{r3, r4, r5, lr}
 801474a:	4c07      	ldr	r4, [pc, #28]	; (8014768 <_write_r+0x20>)
 801474c:	4605      	mov	r5, r0
 801474e:	4608      	mov	r0, r1
 8014750:	4611      	mov	r1, r2
 8014752:	2200      	movs	r2, #0
 8014754:	6022      	str	r2, [r4, #0]
 8014756:	461a      	mov	r2, r3
 8014758:	f7ef fab9 	bl	8003cce <_write>
 801475c:	1c43      	adds	r3, r0, #1
 801475e:	d102      	bne.n	8014766 <_write_r+0x1e>
 8014760:	6823      	ldr	r3, [r4, #0]
 8014762:	b103      	cbz	r3, 8014766 <_write_r+0x1e>
 8014764:	602b      	str	r3, [r5, #0]
 8014766:	bd38      	pop	{r3, r4, r5, pc}
 8014768:	2002faf4 	.word	0x2002faf4

0801476c <__swsetup_r>:
 801476c:	4b32      	ldr	r3, [pc, #200]	; (8014838 <__swsetup_r+0xcc>)
 801476e:	b570      	push	{r4, r5, r6, lr}
 8014770:	681d      	ldr	r5, [r3, #0]
 8014772:	4606      	mov	r6, r0
 8014774:	460c      	mov	r4, r1
 8014776:	b125      	cbz	r5, 8014782 <__swsetup_r+0x16>
 8014778:	69ab      	ldr	r3, [r5, #24]
 801477a:	b913      	cbnz	r3, 8014782 <__swsetup_r+0x16>
 801477c:	4628      	mov	r0, r5
 801477e:	f000 ffa7 	bl	80156d0 <__sinit>
 8014782:	4b2e      	ldr	r3, [pc, #184]	; (801483c <__swsetup_r+0xd0>)
 8014784:	429c      	cmp	r4, r3
 8014786:	d10f      	bne.n	80147a8 <__swsetup_r+0x3c>
 8014788:	686c      	ldr	r4, [r5, #4]
 801478a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801478e:	b29a      	uxth	r2, r3
 8014790:	0715      	lsls	r5, r2, #28
 8014792:	d42c      	bmi.n	80147ee <__swsetup_r+0x82>
 8014794:	06d0      	lsls	r0, r2, #27
 8014796:	d411      	bmi.n	80147bc <__swsetup_r+0x50>
 8014798:	2209      	movs	r2, #9
 801479a:	6032      	str	r2, [r6, #0]
 801479c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147a0:	81a3      	strh	r3, [r4, #12]
 80147a2:	f04f 30ff 	mov.w	r0, #4294967295
 80147a6:	e03e      	b.n	8014826 <__swsetup_r+0xba>
 80147a8:	4b25      	ldr	r3, [pc, #148]	; (8014840 <__swsetup_r+0xd4>)
 80147aa:	429c      	cmp	r4, r3
 80147ac:	d101      	bne.n	80147b2 <__swsetup_r+0x46>
 80147ae:	68ac      	ldr	r4, [r5, #8]
 80147b0:	e7eb      	b.n	801478a <__swsetup_r+0x1e>
 80147b2:	4b24      	ldr	r3, [pc, #144]	; (8014844 <__swsetup_r+0xd8>)
 80147b4:	429c      	cmp	r4, r3
 80147b6:	bf08      	it	eq
 80147b8:	68ec      	ldreq	r4, [r5, #12]
 80147ba:	e7e6      	b.n	801478a <__swsetup_r+0x1e>
 80147bc:	0751      	lsls	r1, r2, #29
 80147be:	d512      	bpl.n	80147e6 <__swsetup_r+0x7a>
 80147c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147c2:	b141      	cbz	r1, 80147d6 <__swsetup_r+0x6a>
 80147c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147c8:	4299      	cmp	r1, r3
 80147ca:	d002      	beq.n	80147d2 <__swsetup_r+0x66>
 80147cc:	4630      	mov	r0, r6
 80147ce:	f001 ffef 	bl	80167b0 <_free_r>
 80147d2:	2300      	movs	r3, #0
 80147d4:	6363      	str	r3, [r4, #52]	; 0x34
 80147d6:	89a3      	ldrh	r3, [r4, #12]
 80147d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80147dc:	81a3      	strh	r3, [r4, #12]
 80147de:	2300      	movs	r3, #0
 80147e0:	6063      	str	r3, [r4, #4]
 80147e2:	6923      	ldr	r3, [r4, #16]
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	f043 0308 	orr.w	r3, r3, #8
 80147ec:	81a3      	strh	r3, [r4, #12]
 80147ee:	6923      	ldr	r3, [r4, #16]
 80147f0:	b94b      	cbnz	r3, 8014806 <__swsetup_r+0x9a>
 80147f2:	89a3      	ldrh	r3, [r4, #12]
 80147f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147fc:	d003      	beq.n	8014806 <__swsetup_r+0x9a>
 80147fe:	4621      	mov	r1, r4
 8014800:	4630      	mov	r0, r6
 8014802:	f001 fb6d 	bl	8015ee0 <__smakebuf_r>
 8014806:	89a2      	ldrh	r2, [r4, #12]
 8014808:	f012 0301 	ands.w	r3, r2, #1
 801480c:	d00c      	beq.n	8014828 <__swsetup_r+0xbc>
 801480e:	2300      	movs	r3, #0
 8014810:	60a3      	str	r3, [r4, #8]
 8014812:	6963      	ldr	r3, [r4, #20]
 8014814:	425b      	negs	r3, r3
 8014816:	61a3      	str	r3, [r4, #24]
 8014818:	6923      	ldr	r3, [r4, #16]
 801481a:	b953      	cbnz	r3, 8014832 <__swsetup_r+0xc6>
 801481c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014820:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014824:	d1ba      	bne.n	801479c <__swsetup_r+0x30>
 8014826:	bd70      	pop	{r4, r5, r6, pc}
 8014828:	0792      	lsls	r2, r2, #30
 801482a:	bf58      	it	pl
 801482c:	6963      	ldrpl	r3, [r4, #20]
 801482e:	60a3      	str	r3, [r4, #8]
 8014830:	e7f2      	b.n	8014818 <__swsetup_r+0xac>
 8014832:	2000      	movs	r0, #0
 8014834:	e7f7      	b.n	8014826 <__swsetup_r+0xba>
 8014836:	bf00      	nop
 8014838:	2000000c 	.word	0x2000000c
 801483c:	08017f50 	.word	0x08017f50
 8014840:	08017f70 	.word	0x08017f70
 8014844:	08017f30 	.word	0x08017f30

08014848 <_close_r>:
 8014848:	b538      	push	{r3, r4, r5, lr}
 801484a:	4c06      	ldr	r4, [pc, #24]	; (8014864 <_close_r+0x1c>)
 801484c:	2300      	movs	r3, #0
 801484e:	4605      	mov	r5, r0
 8014850:	4608      	mov	r0, r1
 8014852:	6023      	str	r3, [r4, #0]
 8014854:	f7f0 ffa1 	bl	800579a <_close>
 8014858:	1c43      	adds	r3, r0, #1
 801485a:	d102      	bne.n	8014862 <_close_r+0x1a>
 801485c:	6823      	ldr	r3, [r4, #0]
 801485e:	b103      	cbz	r3, 8014862 <_close_r+0x1a>
 8014860:	602b      	str	r3, [r5, #0]
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	2002faf4 	.word	0x2002faf4

08014868 <quorem>:
 8014868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801486c:	6903      	ldr	r3, [r0, #16]
 801486e:	690c      	ldr	r4, [r1, #16]
 8014870:	42a3      	cmp	r3, r4
 8014872:	4680      	mov	r8, r0
 8014874:	f2c0 8082 	blt.w	801497c <quorem+0x114>
 8014878:	3c01      	subs	r4, #1
 801487a:	f101 0714 	add.w	r7, r1, #20
 801487e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014882:	f100 0614 	add.w	r6, r0, #20
 8014886:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801488a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801488e:	eb06 030c 	add.w	r3, r6, ip
 8014892:	3501      	adds	r5, #1
 8014894:	eb07 090c 	add.w	r9, r7, ip
 8014898:	9301      	str	r3, [sp, #4]
 801489a:	fbb0 f5f5 	udiv	r5, r0, r5
 801489e:	b395      	cbz	r5, 8014906 <quorem+0x9e>
 80148a0:	f04f 0a00 	mov.w	sl, #0
 80148a4:	4638      	mov	r0, r7
 80148a6:	46b6      	mov	lr, r6
 80148a8:	46d3      	mov	fp, sl
 80148aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80148ae:	b293      	uxth	r3, r2
 80148b0:	fb05 a303 	mla	r3, r5, r3, sl
 80148b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	ebab 0303 	sub.w	r3, fp, r3
 80148be:	0c12      	lsrs	r2, r2, #16
 80148c0:	f8de b000 	ldr.w	fp, [lr]
 80148c4:	fb05 a202 	mla	r2, r5, r2, sl
 80148c8:	fa13 f38b 	uxtah	r3, r3, fp
 80148cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80148d0:	fa1f fb82 	uxth.w	fp, r2
 80148d4:	f8de 2000 	ldr.w	r2, [lr]
 80148d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80148dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148e6:	4581      	cmp	r9, r0
 80148e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80148ec:	f84e 3b04 	str.w	r3, [lr], #4
 80148f0:	d2db      	bcs.n	80148aa <quorem+0x42>
 80148f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80148f6:	b933      	cbnz	r3, 8014906 <quorem+0x9e>
 80148f8:	9b01      	ldr	r3, [sp, #4]
 80148fa:	3b04      	subs	r3, #4
 80148fc:	429e      	cmp	r6, r3
 80148fe:	461a      	mov	r2, r3
 8014900:	d330      	bcc.n	8014964 <quorem+0xfc>
 8014902:	f8c8 4010 	str.w	r4, [r8, #16]
 8014906:	4640      	mov	r0, r8
 8014908:	f001 fd98 	bl	801643c <__mcmp>
 801490c:	2800      	cmp	r0, #0
 801490e:	db25      	blt.n	801495c <quorem+0xf4>
 8014910:	3501      	adds	r5, #1
 8014912:	4630      	mov	r0, r6
 8014914:	f04f 0c00 	mov.w	ip, #0
 8014918:	f857 2b04 	ldr.w	r2, [r7], #4
 801491c:	f8d0 e000 	ldr.w	lr, [r0]
 8014920:	b293      	uxth	r3, r2
 8014922:	ebac 0303 	sub.w	r3, ip, r3
 8014926:	0c12      	lsrs	r2, r2, #16
 8014928:	fa13 f38e 	uxtah	r3, r3, lr
 801492c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014934:	b29b      	uxth	r3, r3
 8014936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801493a:	45b9      	cmp	r9, r7
 801493c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014940:	f840 3b04 	str.w	r3, [r0], #4
 8014944:	d2e8      	bcs.n	8014918 <quorem+0xb0>
 8014946:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801494a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801494e:	b92a      	cbnz	r2, 801495c <quorem+0xf4>
 8014950:	3b04      	subs	r3, #4
 8014952:	429e      	cmp	r6, r3
 8014954:	461a      	mov	r2, r3
 8014956:	d30b      	bcc.n	8014970 <quorem+0x108>
 8014958:	f8c8 4010 	str.w	r4, [r8, #16]
 801495c:	4628      	mov	r0, r5
 801495e:	b003      	add	sp, #12
 8014960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014964:	6812      	ldr	r2, [r2, #0]
 8014966:	3b04      	subs	r3, #4
 8014968:	2a00      	cmp	r2, #0
 801496a:	d1ca      	bne.n	8014902 <quorem+0x9a>
 801496c:	3c01      	subs	r4, #1
 801496e:	e7c5      	b.n	80148fc <quorem+0x94>
 8014970:	6812      	ldr	r2, [r2, #0]
 8014972:	3b04      	subs	r3, #4
 8014974:	2a00      	cmp	r2, #0
 8014976:	d1ef      	bne.n	8014958 <quorem+0xf0>
 8014978:	3c01      	subs	r4, #1
 801497a:	e7ea      	b.n	8014952 <quorem+0xea>
 801497c:	2000      	movs	r0, #0
 801497e:	e7ee      	b.n	801495e <quorem+0xf6>

08014980 <_dtoa_r>:
 8014980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014984:	ec57 6b10 	vmov	r6, r7, d0
 8014988:	b097      	sub	sp, #92	; 0x5c
 801498a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801498c:	9106      	str	r1, [sp, #24]
 801498e:	4604      	mov	r4, r0
 8014990:	920b      	str	r2, [sp, #44]	; 0x2c
 8014992:	9312      	str	r3, [sp, #72]	; 0x48
 8014994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014998:	e9cd 6700 	strd	r6, r7, [sp]
 801499c:	b93d      	cbnz	r5, 80149ae <_dtoa_r+0x2e>
 801499e:	2010      	movs	r0, #16
 80149a0:	f001 fade 	bl	8015f60 <malloc>
 80149a4:	6260      	str	r0, [r4, #36]	; 0x24
 80149a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80149aa:	6005      	str	r5, [r0, #0]
 80149ac:	60c5      	str	r5, [r0, #12]
 80149ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149b0:	6819      	ldr	r1, [r3, #0]
 80149b2:	b151      	cbz	r1, 80149ca <_dtoa_r+0x4a>
 80149b4:	685a      	ldr	r2, [r3, #4]
 80149b6:	604a      	str	r2, [r1, #4]
 80149b8:	2301      	movs	r3, #1
 80149ba:	4093      	lsls	r3, r2
 80149bc:	608b      	str	r3, [r1, #8]
 80149be:	4620      	mov	r0, r4
 80149c0:	f001 fb1c 	bl	8015ffc <_Bfree>
 80149c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149c6:	2200      	movs	r2, #0
 80149c8:	601a      	str	r2, [r3, #0]
 80149ca:	1e3b      	subs	r3, r7, #0
 80149cc:	bfbb      	ittet	lt
 80149ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80149d2:	9301      	strlt	r3, [sp, #4]
 80149d4:	2300      	movge	r3, #0
 80149d6:	2201      	movlt	r2, #1
 80149d8:	bfac      	ite	ge
 80149da:	f8c8 3000 	strge.w	r3, [r8]
 80149de:	f8c8 2000 	strlt.w	r2, [r8]
 80149e2:	4baf      	ldr	r3, [pc, #700]	; (8014ca0 <_dtoa_r+0x320>)
 80149e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80149e8:	ea33 0308 	bics.w	r3, r3, r8
 80149ec:	d114      	bne.n	8014a18 <_dtoa_r+0x98>
 80149ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80149f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80149f4:	6013      	str	r3, [r2, #0]
 80149f6:	9b00      	ldr	r3, [sp, #0]
 80149f8:	b923      	cbnz	r3, 8014a04 <_dtoa_r+0x84>
 80149fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80149fe:	2800      	cmp	r0, #0
 8014a00:	f000 8542 	beq.w	8015488 <_dtoa_r+0xb08>
 8014a04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014cb4 <_dtoa_r+0x334>
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f000 8544 	beq.w	8015498 <_dtoa_r+0xb18>
 8014a10:	f10b 0303 	add.w	r3, fp, #3
 8014a14:	f000 bd3e 	b.w	8015494 <_dtoa_r+0xb14>
 8014a18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	2300      	movs	r3, #0
 8014a20:	4630      	mov	r0, r6
 8014a22:	4639      	mov	r1, r7
 8014a24:	f7ec f868 	bl	8000af8 <__aeabi_dcmpeq>
 8014a28:	4681      	mov	r9, r0
 8014a2a:	b168      	cbz	r0, 8014a48 <_dtoa_r+0xc8>
 8014a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a2e:	2301      	movs	r3, #1
 8014a30:	6013      	str	r3, [r2, #0]
 8014a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	f000 8524 	beq.w	8015482 <_dtoa_r+0xb02>
 8014a3a:	4b9a      	ldr	r3, [pc, #616]	; (8014ca4 <_dtoa_r+0x324>)
 8014a3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a3e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014a42:	6013      	str	r3, [r2, #0]
 8014a44:	f000 bd28 	b.w	8015498 <_dtoa_r+0xb18>
 8014a48:	aa14      	add	r2, sp, #80	; 0x50
 8014a4a:	a915      	add	r1, sp, #84	; 0x54
 8014a4c:	ec47 6b10 	vmov	d0, r6, r7
 8014a50:	4620      	mov	r0, r4
 8014a52:	f001 fde1 	bl	8016618 <__d2b>
 8014a56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014a5a:	9004      	str	r0, [sp, #16]
 8014a5c:	2d00      	cmp	r5, #0
 8014a5e:	d07c      	beq.n	8014b5a <_dtoa_r+0x1da>
 8014a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014a64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014a68:	46b2      	mov	sl, r6
 8014a6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014a72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014a76:	2200      	movs	r2, #0
 8014a78:	4b8b      	ldr	r3, [pc, #556]	; (8014ca8 <_dtoa_r+0x328>)
 8014a7a:	4650      	mov	r0, sl
 8014a7c:	4659      	mov	r1, fp
 8014a7e:	f7eb fc1b 	bl	80002b8 <__aeabi_dsub>
 8014a82:	a381      	add	r3, pc, #516	; (adr r3, 8014c88 <_dtoa_r+0x308>)
 8014a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a88:	f7eb fdce 	bl	8000628 <__aeabi_dmul>
 8014a8c:	a380      	add	r3, pc, #512	; (adr r3, 8014c90 <_dtoa_r+0x310>)
 8014a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a92:	f7eb fc13 	bl	80002bc <__adddf3>
 8014a96:	4606      	mov	r6, r0
 8014a98:	4628      	mov	r0, r5
 8014a9a:	460f      	mov	r7, r1
 8014a9c:	f7eb fd5a 	bl	8000554 <__aeabi_i2d>
 8014aa0:	a37d      	add	r3, pc, #500	; (adr r3, 8014c98 <_dtoa_r+0x318>)
 8014aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa6:	f7eb fdbf 	bl	8000628 <__aeabi_dmul>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	460b      	mov	r3, r1
 8014aae:	4630      	mov	r0, r6
 8014ab0:	4639      	mov	r1, r7
 8014ab2:	f7eb fc03 	bl	80002bc <__adddf3>
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	460f      	mov	r7, r1
 8014aba:	f7ec f865 	bl	8000b88 <__aeabi_d2iz>
 8014abe:	2200      	movs	r2, #0
 8014ac0:	4682      	mov	sl, r0
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	4639      	mov	r1, r7
 8014ac8:	f7ec f820 	bl	8000b0c <__aeabi_dcmplt>
 8014acc:	b148      	cbz	r0, 8014ae2 <_dtoa_r+0x162>
 8014ace:	4650      	mov	r0, sl
 8014ad0:	f7eb fd40 	bl	8000554 <__aeabi_i2d>
 8014ad4:	4632      	mov	r2, r6
 8014ad6:	463b      	mov	r3, r7
 8014ad8:	f7ec f80e 	bl	8000af8 <__aeabi_dcmpeq>
 8014adc:	b908      	cbnz	r0, 8014ae2 <_dtoa_r+0x162>
 8014ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ae2:	f1ba 0f16 	cmp.w	sl, #22
 8014ae6:	d859      	bhi.n	8014b9c <_dtoa_r+0x21c>
 8014ae8:	4970      	ldr	r1, [pc, #448]	; (8014cac <_dtoa_r+0x32c>)
 8014aea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014af6:	f7ec f827 	bl	8000b48 <__aeabi_dcmpgt>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	d050      	beq.n	8014ba0 <_dtoa_r+0x220>
 8014afe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b02:	2300      	movs	r3, #0
 8014b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b08:	1b5d      	subs	r5, r3, r5
 8014b0a:	f1b5 0801 	subs.w	r8, r5, #1
 8014b0e:	bf49      	itett	mi
 8014b10:	f1c5 0301 	rsbmi	r3, r5, #1
 8014b14:	2300      	movpl	r3, #0
 8014b16:	9305      	strmi	r3, [sp, #20]
 8014b18:	f04f 0800 	movmi.w	r8, #0
 8014b1c:	bf58      	it	pl
 8014b1e:	9305      	strpl	r3, [sp, #20]
 8014b20:	f1ba 0f00 	cmp.w	sl, #0
 8014b24:	db3e      	blt.n	8014ba4 <_dtoa_r+0x224>
 8014b26:	2300      	movs	r3, #0
 8014b28:	44d0      	add	r8, sl
 8014b2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014b2e:	9307      	str	r3, [sp, #28]
 8014b30:	9b06      	ldr	r3, [sp, #24]
 8014b32:	2b09      	cmp	r3, #9
 8014b34:	f200 8090 	bhi.w	8014c58 <_dtoa_r+0x2d8>
 8014b38:	2b05      	cmp	r3, #5
 8014b3a:	bfc4      	itt	gt
 8014b3c:	3b04      	subgt	r3, #4
 8014b3e:	9306      	strgt	r3, [sp, #24]
 8014b40:	9b06      	ldr	r3, [sp, #24]
 8014b42:	f1a3 0302 	sub.w	r3, r3, #2
 8014b46:	bfcc      	ite	gt
 8014b48:	2500      	movgt	r5, #0
 8014b4a:	2501      	movle	r5, #1
 8014b4c:	2b03      	cmp	r3, #3
 8014b4e:	f200 808f 	bhi.w	8014c70 <_dtoa_r+0x2f0>
 8014b52:	e8df f003 	tbb	[pc, r3]
 8014b56:	7f7d      	.short	0x7f7d
 8014b58:	7131      	.short	0x7131
 8014b5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014b5e:	441d      	add	r5, r3
 8014b60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014b64:	2820      	cmp	r0, #32
 8014b66:	dd13      	ble.n	8014b90 <_dtoa_r+0x210>
 8014b68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014b6c:	9b00      	ldr	r3, [sp, #0]
 8014b6e:	fa08 f800 	lsl.w	r8, r8, r0
 8014b72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014b76:	fa23 f000 	lsr.w	r0, r3, r0
 8014b7a:	ea48 0000 	orr.w	r0, r8, r0
 8014b7e:	f7eb fcd9 	bl	8000534 <__aeabi_ui2d>
 8014b82:	2301      	movs	r3, #1
 8014b84:	4682      	mov	sl, r0
 8014b86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014b8a:	3d01      	subs	r5, #1
 8014b8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b8e:	e772      	b.n	8014a76 <_dtoa_r+0xf6>
 8014b90:	9b00      	ldr	r3, [sp, #0]
 8014b92:	f1c0 0020 	rsb	r0, r0, #32
 8014b96:	fa03 f000 	lsl.w	r0, r3, r0
 8014b9a:	e7f0      	b.n	8014b7e <_dtoa_r+0x1fe>
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	e7b1      	b.n	8014b04 <_dtoa_r+0x184>
 8014ba0:	900f      	str	r0, [sp, #60]	; 0x3c
 8014ba2:	e7b0      	b.n	8014b06 <_dtoa_r+0x186>
 8014ba4:	9b05      	ldr	r3, [sp, #20]
 8014ba6:	eba3 030a 	sub.w	r3, r3, sl
 8014baa:	9305      	str	r3, [sp, #20]
 8014bac:	f1ca 0300 	rsb	r3, sl, #0
 8014bb0:	9307      	str	r3, [sp, #28]
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8014bb6:	e7bb      	b.n	8014b30 <_dtoa_r+0x1b0>
 8014bb8:	2301      	movs	r3, #1
 8014bba:	930a      	str	r3, [sp, #40]	; 0x28
 8014bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	dd59      	ble.n	8014c76 <_dtoa_r+0x2f6>
 8014bc2:	9302      	str	r3, [sp, #8]
 8014bc4:	4699      	mov	r9, r3
 8014bc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014bc8:	2200      	movs	r2, #0
 8014bca:	6072      	str	r2, [r6, #4]
 8014bcc:	2204      	movs	r2, #4
 8014bce:	f102 0014 	add.w	r0, r2, #20
 8014bd2:	4298      	cmp	r0, r3
 8014bd4:	6871      	ldr	r1, [r6, #4]
 8014bd6:	d953      	bls.n	8014c80 <_dtoa_r+0x300>
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f001 f9db 	bl	8015f94 <_Balloc>
 8014bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014be0:	6030      	str	r0, [r6, #0]
 8014be2:	f1b9 0f0e 	cmp.w	r9, #14
 8014be6:	f8d3 b000 	ldr.w	fp, [r3]
 8014bea:	f200 80e6 	bhi.w	8014dba <_dtoa_r+0x43a>
 8014bee:	2d00      	cmp	r5, #0
 8014bf0:	f000 80e3 	beq.w	8014dba <_dtoa_r+0x43a>
 8014bf4:	ed9d 7b00 	vldr	d7, [sp]
 8014bf8:	f1ba 0f00 	cmp.w	sl, #0
 8014bfc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014c00:	dd74      	ble.n	8014cec <_dtoa_r+0x36c>
 8014c02:	4a2a      	ldr	r2, [pc, #168]	; (8014cac <_dtoa_r+0x32c>)
 8014c04:	f00a 030f 	and.w	r3, sl, #15
 8014c08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014c0c:	ed93 7b00 	vldr	d7, [r3]
 8014c10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014c14:	06f0      	lsls	r0, r6, #27
 8014c16:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014c1a:	d565      	bpl.n	8014ce8 <_dtoa_r+0x368>
 8014c1c:	4b24      	ldr	r3, [pc, #144]	; (8014cb0 <_dtoa_r+0x330>)
 8014c1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014c22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c26:	f7eb fe29 	bl	800087c <__aeabi_ddiv>
 8014c2a:	e9cd 0100 	strd	r0, r1, [sp]
 8014c2e:	f006 060f 	and.w	r6, r6, #15
 8014c32:	2503      	movs	r5, #3
 8014c34:	4f1e      	ldr	r7, [pc, #120]	; (8014cb0 <_dtoa_r+0x330>)
 8014c36:	e04c      	b.n	8014cd2 <_dtoa_r+0x352>
 8014c38:	2301      	movs	r3, #1
 8014c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8014c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c3e:	4453      	add	r3, sl
 8014c40:	f103 0901 	add.w	r9, r3, #1
 8014c44:	9302      	str	r3, [sp, #8]
 8014c46:	464b      	mov	r3, r9
 8014c48:	2b01      	cmp	r3, #1
 8014c4a:	bfb8      	it	lt
 8014c4c:	2301      	movlt	r3, #1
 8014c4e:	e7ba      	b.n	8014bc6 <_dtoa_r+0x246>
 8014c50:	2300      	movs	r3, #0
 8014c52:	e7b2      	b.n	8014bba <_dtoa_r+0x23a>
 8014c54:	2300      	movs	r3, #0
 8014c56:	e7f0      	b.n	8014c3a <_dtoa_r+0x2ba>
 8014c58:	2501      	movs	r5, #1
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	9306      	str	r3, [sp, #24]
 8014c5e:	950a      	str	r5, [sp, #40]	; 0x28
 8014c60:	f04f 33ff 	mov.w	r3, #4294967295
 8014c64:	9302      	str	r3, [sp, #8]
 8014c66:	4699      	mov	r9, r3
 8014c68:	2200      	movs	r2, #0
 8014c6a:	2312      	movs	r3, #18
 8014c6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c6e:	e7aa      	b.n	8014bc6 <_dtoa_r+0x246>
 8014c70:	2301      	movs	r3, #1
 8014c72:	930a      	str	r3, [sp, #40]	; 0x28
 8014c74:	e7f4      	b.n	8014c60 <_dtoa_r+0x2e0>
 8014c76:	2301      	movs	r3, #1
 8014c78:	9302      	str	r3, [sp, #8]
 8014c7a:	4699      	mov	r9, r3
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	e7f5      	b.n	8014c6c <_dtoa_r+0x2ec>
 8014c80:	3101      	adds	r1, #1
 8014c82:	6071      	str	r1, [r6, #4]
 8014c84:	0052      	lsls	r2, r2, #1
 8014c86:	e7a2      	b.n	8014bce <_dtoa_r+0x24e>
 8014c88:	636f4361 	.word	0x636f4361
 8014c8c:	3fd287a7 	.word	0x3fd287a7
 8014c90:	8b60c8b3 	.word	0x8b60c8b3
 8014c94:	3fc68a28 	.word	0x3fc68a28
 8014c98:	509f79fb 	.word	0x509f79fb
 8014c9c:	3fd34413 	.word	0x3fd34413
 8014ca0:	7ff00000 	.word	0x7ff00000
 8014ca4:	080180c4 	.word	0x080180c4
 8014ca8:	3ff80000 	.word	0x3ff80000
 8014cac:	08017fc8 	.word	0x08017fc8
 8014cb0:	08017fa0 	.word	0x08017fa0
 8014cb4:	08017f29 	.word	0x08017f29
 8014cb8:	07f1      	lsls	r1, r6, #31
 8014cba:	d508      	bpl.n	8014cce <_dtoa_r+0x34e>
 8014cbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014cc4:	f7eb fcb0 	bl	8000628 <__aeabi_dmul>
 8014cc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014ccc:	3501      	adds	r5, #1
 8014cce:	1076      	asrs	r6, r6, #1
 8014cd0:	3708      	adds	r7, #8
 8014cd2:	2e00      	cmp	r6, #0
 8014cd4:	d1f0      	bne.n	8014cb8 <_dtoa_r+0x338>
 8014cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cde:	f7eb fdcd 	bl	800087c <__aeabi_ddiv>
 8014ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8014ce6:	e01a      	b.n	8014d1e <_dtoa_r+0x39e>
 8014ce8:	2502      	movs	r5, #2
 8014cea:	e7a3      	b.n	8014c34 <_dtoa_r+0x2b4>
 8014cec:	f000 80a0 	beq.w	8014e30 <_dtoa_r+0x4b0>
 8014cf0:	f1ca 0600 	rsb	r6, sl, #0
 8014cf4:	4b9f      	ldr	r3, [pc, #636]	; (8014f74 <_dtoa_r+0x5f4>)
 8014cf6:	4fa0      	ldr	r7, [pc, #640]	; (8014f78 <_dtoa_r+0x5f8>)
 8014cf8:	f006 020f 	and.w	r2, r6, #15
 8014cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d08:	f7eb fc8e 	bl	8000628 <__aeabi_dmul>
 8014d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8014d10:	1136      	asrs	r6, r6, #4
 8014d12:	2300      	movs	r3, #0
 8014d14:	2502      	movs	r5, #2
 8014d16:	2e00      	cmp	r6, #0
 8014d18:	d17f      	bne.n	8014e1a <_dtoa_r+0x49a>
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d1e1      	bne.n	8014ce2 <_dtoa_r+0x362>
 8014d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	f000 8087 	beq.w	8014e34 <_dtoa_r+0x4b4>
 8014d26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	4b93      	ldr	r3, [pc, #588]	; (8014f7c <_dtoa_r+0x5fc>)
 8014d2e:	4630      	mov	r0, r6
 8014d30:	4639      	mov	r1, r7
 8014d32:	f7eb feeb 	bl	8000b0c <__aeabi_dcmplt>
 8014d36:	2800      	cmp	r0, #0
 8014d38:	d07c      	beq.n	8014e34 <_dtoa_r+0x4b4>
 8014d3a:	f1b9 0f00 	cmp.w	r9, #0
 8014d3e:	d079      	beq.n	8014e34 <_dtoa_r+0x4b4>
 8014d40:	9b02      	ldr	r3, [sp, #8]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	dd35      	ble.n	8014db2 <_dtoa_r+0x432>
 8014d46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014d4a:	9308      	str	r3, [sp, #32]
 8014d4c:	4639      	mov	r1, r7
 8014d4e:	2200      	movs	r2, #0
 8014d50:	4b8b      	ldr	r3, [pc, #556]	; (8014f80 <_dtoa_r+0x600>)
 8014d52:	4630      	mov	r0, r6
 8014d54:	f7eb fc68 	bl	8000628 <__aeabi_dmul>
 8014d58:	e9cd 0100 	strd	r0, r1, [sp]
 8014d5c:	9f02      	ldr	r7, [sp, #8]
 8014d5e:	3501      	adds	r5, #1
 8014d60:	4628      	mov	r0, r5
 8014d62:	f7eb fbf7 	bl	8000554 <__aeabi_i2d>
 8014d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d6a:	f7eb fc5d 	bl	8000628 <__aeabi_dmul>
 8014d6e:	2200      	movs	r2, #0
 8014d70:	4b84      	ldr	r3, [pc, #528]	; (8014f84 <_dtoa_r+0x604>)
 8014d72:	f7eb faa3 	bl	80002bc <__adddf3>
 8014d76:	4605      	mov	r5, r0
 8014d78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014d7c:	2f00      	cmp	r7, #0
 8014d7e:	d15d      	bne.n	8014e3c <_dtoa_r+0x4bc>
 8014d80:	2200      	movs	r2, #0
 8014d82:	4b81      	ldr	r3, [pc, #516]	; (8014f88 <_dtoa_r+0x608>)
 8014d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d88:	f7eb fa96 	bl	80002b8 <__aeabi_dsub>
 8014d8c:	462a      	mov	r2, r5
 8014d8e:	4633      	mov	r3, r6
 8014d90:	e9cd 0100 	strd	r0, r1, [sp]
 8014d94:	f7eb fed8 	bl	8000b48 <__aeabi_dcmpgt>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	f040 8288 	bne.w	80152ae <_dtoa_r+0x92e>
 8014d9e:	462a      	mov	r2, r5
 8014da0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014da8:	f7eb feb0 	bl	8000b0c <__aeabi_dcmplt>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	f040 827c 	bne.w	80152aa <_dtoa_r+0x92a>
 8014db2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014db6:	e9cd 2300 	strd	r2, r3, [sp]
 8014dba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	f2c0 8150 	blt.w	8015062 <_dtoa_r+0x6e2>
 8014dc2:	f1ba 0f0e 	cmp.w	sl, #14
 8014dc6:	f300 814c 	bgt.w	8015062 <_dtoa_r+0x6e2>
 8014dca:	4b6a      	ldr	r3, [pc, #424]	; (8014f74 <_dtoa_r+0x5f4>)
 8014dcc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014dd0:	ed93 7b00 	vldr	d7, [r3]
 8014dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ddc:	f280 80d8 	bge.w	8014f90 <_dtoa_r+0x610>
 8014de0:	f1b9 0f00 	cmp.w	r9, #0
 8014de4:	f300 80d4 	bgt.w	8014f90 <_dtoa_r+0x610>
 8014de8:	f040 825e 	bne.w	80152a8 <_dtoa_r+0x928>
 8014dec:	2200      	movs	r2, #0
 8014dee:	4b66      	ldr	r3, [pc, #408]	; (8014f88 <_dtoa_r+0x608>)
 8014df0:	ec51 0b17 	vmov	r0, r1, d7
 8014df4:	f7eb fc18 	bl	8000628 <__aeabi_dmul>
 8014df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014dfc:	f7eb fe9a 	bl	8000b34 <__aeabi_dcmpge>
 8014e00:	464f      	mov	r7, r9
 8014e02:	464e      	mov	r6, r9
 8014e04:	2800      	cmp	r0, #0
 8014e06:	f040 8234 	bne.w	8015272 <_dtoa_r+0x8f2>
 8014e0a:	2331      	movs	r3, #49	; 0x31
 8014e0c:	f10b 0501 	add.w	r5, fp, #1
 8014e10:	f88b 3000 	strb.w	r3, [fp]
 8014e14:	f10a 0a01 	add.w	sl, sl, #1
 8014e18:	e22f      	b.n	801527a <_dtoa_r+0x8fa>
 8014e1a:	07f2      	lsls	r2, r6, #31
 8014e1c:	d505      	bpl.n	8014e2a <_dtoa_r+0x4aa>
 8014e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e22:	f7eb fc01 	bl	8000628 <__aeabi_dmul>
 8014e26:	3501      	adds	r5, #1
 8014e28:	2301      	movs	r3, #1
 8014e2a:	1076      	asrs	r6, r6, #1
 8014e2c:	3708      	adds	r7, #8
 8014e2e:	e772      	b.n	8014d16 <_dtoa_r+0x396>
 8014e30:	2502      	movs	r5, #2
 8014e32:	e774      	b.n	8014d1e <_dtoa_r+0x39e>
 8014e34:	f8cd a020 	str.w	sl, [sp, #32]
 8014e38:	464f      	mov	r7, r9
 8014e3a:	e791      	b.n	8014d60 <_dtoa_r+0x3e0>
 8014e3c:	4b4d      	ldr	r3, [pc, #308]	; (8014f74 <_dtoa_r+0x5f4>)
 8014e3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014e42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d047      	beq.n	8014edc <_dtoa_r+0x55c>
 8014e4c:	4602      	mov	r2, r0
 8014e4e:	460b      	mov	r3, r1
 8014e50:	2000      	movs	r0, #0
 8014e52:	494e      	ldr	r1, [pc, #312]	; (8014f8c <_dtoa_r+0x60c>)
 8014e54:	f7eb fd12 	bl	800087c <__aeabi_ddiv>
 8014e58:	462a      	mov	r2, r5
 8014e5a:	4633      	mov	r3, r6
 8014e5c:	f7eb fa2c 	bl	80002b8 <__aeabi_dsub>
 8014e60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014e64:	465d      	mov	r5, fp
 8014e66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e6a:	f7eb fe8d 	bl	8000b88 <__aeabi_d2iz>
 8014e6e:	4606      	mov	r6, r0
 8014e70:	f7eb fb70 	bl	8000554 <__aeabi_i2d>
 8014e74:	4602      	mov	r2, r0
 8014e76:	460b      	mov	r3, r1
 8014e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e7c:	f7eb fa1c 	bl	80002b8 <__aeabi_dsub>
 8014e80:	3630      	adds	r6, #48	; 0x30
 8014e82:	f805 6b01 	strb.w	r6, [r5], #1
 8014e86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8014e8e:	f7eb fe3d 	bl	8000b0c <__aeabi_dcmplt>
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d163      	bne.n	8014f5e <_dtoa_r+0x5de>
 8014e96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	4937      	ldr	r1, [pc, #220]	; (8014f7c <_dtoa_r+0x5fc>)
 8014e9e:	f7eb fa0b 	bl	80002b8 <__aeabi_dsub>
 8014ea2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014ea6:	f7eb fe31 	bl	8000b0c <__aeabi_dcmplt>
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	f040 80b7 	bne.w	801501e <_dtoa_r+0x69e>
 8014eb0:	eba5 030b 	sub.w	r3, r5, fp
 8014eb4:	429f      	cmp	r7, r3
 8014eb6:	f77f af7c 	ble.w	8014db2 <_dtoa_r+0x432>
 8014eba:	2200      	movs	r2, #0
 8014ebc:	4b30      	ldr	r3, [pc, #192]	; (8014f80 <_dtoa_r+0x600>)
 8014ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ec2:	f7eb fbb1 	bl	8000628 <__aeabi_dmul>
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ecc:	4b2c      	ldr	r3, [pc, #176]	; (8014f80 <_dtoa_r+0x600>)
 8014ece:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ed2:	f7eb fba9 	bl	8000628 <__aeabi_dmul>
 8014ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8014eda:	e7c4      	b.n	8014e66 <_dtoa_r+0x4e6>
 8014edc:	462a      	mov	r2, r5
 8014ede:	4633      	mov	r3, r6
 8014ee0:	f7eb fba2 	bl	8000628 <__aeabi_dmul>
 8014ee4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ee8:	eb0b 0507 	add.w	r5, fp, r7
 8014eec:	465e      	mov	r6, fp
 8014eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ef2:	f7eb fe49 	bl	8000b88 <__aeabi_d2iz>
 8014ef6:	4607      	mov	r7, r0
 8014ef8:	f7eb fb2c 	bl	8000554 <__aeabi_i2d>
 8014efc:	3730      	adds	r7, #48	; 0x30
 8014efe:	4602      	mov	r2, r0
 8014f00:	460b      	mov	r3, r1
 8014f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f06:	f7eb f9d7 	bl	80002b8 <__aeabi_dsub>
 8014f0a:	f806 7b01 	strb.w	r7, [r6], #1
 8014f0e:	42ae      	cmp	r6, r5
 8014f10:	e9cd 0100 	strd	r0, r1, [sp]
 8014f14:	f04f 0200 	mov.w	r2, #0
 8014f18:	d126      	bne.n	8014f68 <_dtoa_r+0x5e8>
 8014f1a:	4b1c      	ldr	r3, [pc, #112]	; (8014f8c <_dtoa_r+0x60c>)
 8014f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014f20:	f7eb f9cc 	bl	80002bc <__adddf3>
 8014f24:	4602      	mov	r2, r0
 8014f26:	460b      	mov	r3, r1
 8014f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f2c:	f7eb fe0c 	bl	8000b48 <__aeabi_dcmpgt>
 8014f30:	2800      	cmp	r0, #0
 8014f32:	d174      	bne.n	801501e <_dtoa_r+0x69e>
 8014f34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014f38:	2000      	movs	r0, #0
 8014f3a:	4914      	ldr	r1, [pc, #80]	; (8014f8c <_dtoa_r+0x60c>)
 8014f3c:	f7eb f9bc 	bl	80002b8 <__aeabi_dsub>
 8014f40:	4602      	mov	r2, r0
 8014f42:	460b      	mov	r3, r1
 8014f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f48:	f7eb fde0 	bl	8000b0c <__aeabi_dcmplt>
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	f43f af30 	beq.w	8014db2 <_dtoa_r+0x432>
 8014f52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f56:	2b30      	cmp	r3, #48	; 0x30
 8014f58:	f105 32ff 	add.w	r2, r5, #4294967295
 8014f5c:	d002      	beq.n	8014f64 <_dtoa_r+0x5e4>
 8014f5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014f62:	e04a      	b.n	8014ffa <_dtoa_r+0x67a>
 8014f64:	4615      	mov	r5, r2
 8014f66:	e7f4      	b.n	8014f52 <_dtoa_r+0x5d2>
 8014f68:	4b05      	ldr	r3, [pc, #20]	; (8014f80 <_dtoa_r+0x600>)
 8014f6a:	f7eb fb5d 	bl	8000628 <__aeabi_dmul>
 8014f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8014f72:	e7bc      	b.n	8014eee <_dtoa_r+0x56e>
 8014f74:	08017fc8 	.word	0x08017fc8
 8014f78:	08017fa0 	.word	0x08017fa0
 8014f7c:	3ff00000 	.word	0x3ff00000
 8014f80:	40240000 	.word	0x40240000
 8014f84:	401c0000 	.word	0x401c0000
 8014f88:	40140000 	.word	0x40140000
 8014f8c:	3fe00000 	.word	0x3fe00000
 8014f90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f94:	465d      	mov	r5, fp
 8014f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	4639      	mov	r1, r7
 8014f9e:	f7eb fc6d 	bl	800087c <__aeabi_ddiv>
 8014fa2:	f7eb fdf1 	bl	8000b88 <__aeabi_d2iz>
 8014fa6:	4680      	mov	r8, r0
 8014fa8:	f7eb fad4 	bl	8000554 <__aeabi_i2d>
 8014fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014fb0:	f7eb fb3a 	bl	8000628 <__aeabi_dmul>
 8014fb4:	4602      	mov	r2, r0
 8014fb6:	460b      	mov	r3, r1
 8014fb8:	4630      	mov	r0, r6
 8014fba:	4639      	mov	r1, r7
 8014fbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014fc0:	f7eb f97a 	bl	80002b8 <__aeabi_dsub>
 8014fc4:	f805 6b01 	strb.w	r6, [r5], #1
 8014fc8:	eba5 060b 	sub.w	r6, r5, fp
 8014fcc:	45b1      	cmp	r9, r6
 8014fce:	4602      	mov	r2, r0
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	d139      	bne.n	8015048 <_dtoa_r+0x6c8>
 8014fd4:	f7eb f972 	bl	80002bc <__adddf3>
 8014fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014fdc:	4606      	mov	r6, r0
 8014fde:	460f      	mov	r7, r1
 8014fe0:	f7eb fdb2 	bl	8000b48 <__aeabi_dcmpgt>
 8014fe4:	b9c8      	cbnz	r0, 801501a <_dtoa_r+0x69a>
 8014fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014fea:	4630      	mov	r0, r6
 8014fec:	4639      	mov	r1, r7
 8014fee:	f7eb fd83 	bl	8000af8 <__aeabi_dcmpeq>
 8014ff2:	b110      	cbz	r0, 8014ffa <_dtoa_r+0x67a>
 8014ff4:	f018 0f01 	tst.w	r8, #1
 8014ff8:	d10f      	bne.n	801501a <_dtoa_r+0x69a>
 8014ffa:	9904      	ldr	r1, [sp, #16]
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	f000 fffd 	bl	8015ffc <_Bfree>
 8015002:	2300      	movs	r3, #0
 8015004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015006:	702b      	strb	r3, [r5, #0]
 8015008:	f10a 0301 	add.w	r3, sl, #1
 801500c:	6013      	str	r3, [r2, #0]
 801500e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015010:	2b00      	cmp	r3, #0
 8015012:	f000 8241 	beq.w	8015498 <_dtoa_r+0xb18>
 8015016:	601d      	str	r5, [r3, #0]
 8015018:	e23e      	b.n	8015498 <_dtoa_r+0xb18>
 801501a:	f8cd a020 	str.w	sl, [sp, #32]
 801501e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015022:	2a39      	cmp	r2, #57	; 0x39
 8015024:	f105 33ff 	add.w	r3, r5, #4294967295
 8015028:	d108      	bne.n	801503c <_dtoa_r+0x6bc>
 801502a:	459b      	cmp	fp, r3
 801502c:	d10a      	bne.n	8015044 <_dtoa_r+0x6c4>
 801502e:	9b08      	ldr	r3, [sp, #32]
 8015030:	3301      	adds	r3, #1
 8015032:	9308      	str	r3, [sp, #32]
 8015034:	2330      	movs	r3, #48	; 0x30
 8015036:	f88b 3000 	strb.w	r3, [fp]
 801503a:	465b      	mov	r3, fp
 801503c:	781a      	ldrb	r2, [r3, #0]
 801503e:	3201      	adds	r2, #1
 8015040:	701a      	strb	r2, [r3, #0]
 8015042:	e78c      	b.n	8014f5e <_dtoa_r+0x5de>
 8015044:	461d      	mov	r5, r3
 8015046:	e7ea      	b.n	801501e <_dtoa_r+0x69e>
 8015048:	2200      	movs	r2, #0
 801504a:	4b9b      	ldr	r3, [pc, #620]	; (80152b8 <_dtoa_r+0x938>)
 801504c:	f7eb faec 	bl	8000628 <__aeabi_dmul>
 8015050:	2200      	movs	r2, #0
 8015052:	2300      	movs	r3, #0
 8015054:	4606      	mov	r6, r0
 8015056:	460f      	mov	r7, r1
 8015058:	f7eb fd4e 	bl	8000af8 <__aeabi_dcmpeq>
 801505c:	2800      	cmp	r0, #0
 801505e:	d09a      	beq.n	8014f96 <_dtoa_r+0x616>
 8015060:	e7cb      	b.n	8014ffa <_dtoa_r+0x67a>
 8015062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015064:	2a00      	cmp	r2, #0
 8015066:	f000 808b 	beq.w	8015180 <_dtoa_r+0x800>
 801506a:	9a06      	ldr	r2, [sp, #24]
 801506c:	2a01      	cmp	r2, #1
 801506e:	dc6e      	bgt.n	801514e <_dtoa_r+0x7ce>
 8015070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015072:	2a00      	cmp	r2, #0
 8015074:	d067      	beq.n	8015146 <_dtoa_r+0x7c6>
 8015076:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801507a:	9f07      	ldr	r7, [sp, #28]
 801507c:	9d05      	ldr	r5, [sp, #20]
 801507e:	9a05      	ldr	r2, [sp, #20]
 8015080:	2101      	movs	r1, #1
 8015082:	441a      	add	r2, r3
 8015084:	4620      	mov	r0, r4
 8015086:	9205      	str	r2, [sp, #20]
 8015088:	4498      	add	r8, r3
 801508a:	f001 f895 	bl	80161b8 <__i2b>
 801508e:	4606      	mov	r6, r0
 8015090:	2d00      	cmp	r5, #0
 8015092:	dd0c      	ble.n	80150ae <_dtoa_r+0x72e>
 8015094:	f1b8 0f00 	cmp.w	r8, #0
 8015098:	dd09      	ble.n	80150ae <_dtoa_r+0x72e>
 801509a:	4545      	cmp	r5, r8
 801509c:	9a05      	ldr	r2, [sp, #20]
 801509e:	462b      	mov	r3, r5
 80150a0:	bfa8      	it	ge
 80150a2:	4643      	movge	r3, r8
 80150a4:	1ad2      	subs	r2, r2, r3
 80150a6:	9205      	str	r2, [sp, #20]
 80150a8:	1aed      	subs	r5, r5, r3
 80150aa:	eba8 0803 	sub.w	r8, r8, r3
 80150ae:	9b07      	ldr	r3, [sp, #28]
 80150b0:	b1eb      	cbz	r3, 80150ee <_dtoa_r+0x76e>
 80150b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d067      	beq.n	8015188 <_dtoa_r+0x808>
 80150b8:	b18f      	cbz	r7, 80150de <_dtoa_r+0x75e>
 80150ba:	4631      	mov	r1, r6
 80150bc:	463a      	mov	r2, r7
 80150be:	4620      	mov	r0, r4
 80150c0:	f001 f91a 	bl	80162f8 <__pow5mult>
 80150c4:	9a04      	ldr	r2, [sp, #16]
 80150c6:	4601      	mov	r1, r0
 80150c8:	4606      	mov	r6, r0
 80150ca:	4620      	mov	r0, r4
 80150cc:	f001 f87d 	bl	80161ca <__multiply>
 80150d0:	9904      	ldr	r1, [sp, #16]
 80150d2:	9008      	str	r0, [sp, #32]
 80150d4:	4620      	mov	r0, r4
 80150d6:	f000 ff91 	bl	8015ffc <_Bfree>
 80150da:	9b08      	ldr	r3, [sp, #32]
 80150dc:	9304      	str	r3, [sp, #16]
 80150de:	9b07      	ldr	r3, [sp, #28]
 80150e0:	1bda      	subs	r2, r3, r7
 80150e2:	d004      	beq.n	80150ee <_dtoa_r+0x76e>
 80150e4:	9904      	ldr	r1, [sp, #16]
 80150e6:	4620      	mov	r0, r4
 80150e8:	f001 f906 	bl	80162f8 <__pow5mult>
 80150ec:	9004      	str	r0, [sp, #16]
 80150ee:	2101      	movs	r1, #1
 80150f0:	4620      	mov	r0, r4
 80150f2:	f001 f861 	bl	80161b8 <__i2b>
 80150f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150f8:	4607      	mov	r7, r0
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	f000 81d0 	beq.w	80154a0 <_dtoa_r+0xb20>
 8015100:	461a      	mov	r2, r3
 8015102:	4601      	mov	r1, r0
 8015104:	4620      	mov	r0, r4
 8015106:	f001 f8f7 	bl	80162f8 <__pow5mult>
 801510a:	9b06      	ldr	r3, [sp, #24]
 801510c:	2b01      	cmp	r3, #1
 801510e:	4607      	mov	r7, r0
 8015110:	dc40      	bgt.n	8015194 <_dtoa_r+0x814>
 8015112:	9b00      	ldr	r3, [sp, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d139      	bne.n	801518c <_dtoa_r+0x80c>
 8015118:	9b01      	ldr	r3, [sp, #4]
 801511a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801511e:	2b00      	cmp	r3, #0
 8015120:	d136      	bne.n	8015190 <_dtoa_r+0x810>
 8015122:	9b01      	ldr	r3, [sp, #4]
 8015124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015128:	0d1b      	lsrs	r3, r3, #20
 801512a:	051b      	lsls	r3, r3, #20
 801512c:	b12b      	cbz	r3, 801513a <_dtoa_r+0x7ba>
 801512e:	9b05      	ldr	r3, [sp, #20]
 8015130:	3301      	adds	r3, #1
 8015132:	9305      	str	r3, [sp, #20]
 8015134:	f108 0801 	add.w	r8, r8, #1
 8015138:	2301      	movs	r3, #1
 801513a:	9307      	str	r3, [sp, #28]
 801513c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801513e:	2b00      	cmp	r3, #0
 8015140:	d12a      	bne.n	8015198 <_dtoa_r+0x818>
 8015142:	2001      	movs	r0, #1
 8015144:	e030      	b.n	80151a8 <_dtoa_r+0x828>
 8015146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015148:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801514c:	e795      	b.n	801507a <_dtoa_r+0x6fa>
 801514e:	9b07      	ldr	r3, [sp, #28]
 8015150:	f109 37ff 	add.w	r7, r9, #4294967295
 8015154:	42bb      	cmp	r3, r7
 8015156:	bfbf      	itttt	lt
 8015158:	9b07      	ldrlt	r3, [sp, #28]
 801515a:	9707      	strlt	r7, [sp, #28]
 801515c:	1afa      	sublt	r2, r7, r3
 801515e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015160:	bfbb      	ittet	lt
 8015162:	189b      	addlt	r3, r3, r2
 8015164:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015166:	1bdf      	subge	r7, r3, r7
 8015168:	2700      	movlt	r7, #0
 801516a:	f1b9 0f00 	cmp.w	r9, #0
 801516e:	bfb5      	itete	lt
 8015170:	9b05      	ldrlt	r3, [sp, #20]
 8015172:	9d05      	ldrge	r5, [sp, #20]
 8015174:	eba3 0509 	sublt.w	r5, r3, r9
 8015178:	464b      	movge	r3, r9
 801517a:	bfb8      	it	lt
 801517c:	2300      	movlt	r3, #0
 801517e:	e77e      	b.n	801507e <_dtoa_r+0x6fe>
 8015180:	9f07      	ldr	r7, [sp, #28]
 8015182:	9d05      	ldr	r5, [sp, #20]
 8015184:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015186:	e783      	b.n	8015090 <_dtoa_r+0x710>
 8015188:	9a07      	ldr	r2, [sp, #28]
 801518a:	e7ab      	b.n	80150e4 <_dtoa_r+0x764>
 801518c:	2300      	movs	r3, #0
 801518e:	e7d4      	b.n	801513a <_dtoa_r+0x7ba>
 8015190:	9b00      	ldr	r3, [sp, #0]
 8015192:	e7d2      	b.n	801513a <_dtoa_r+0x7ba>
 8015194:	2300      	movs	r3, #0
 8015196:	9307      	str	r3, [sp, #28]
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801519e:	6918      	ldr	r0, [r3, #16]
 80151a0:	f000 ffbc 	bl	801611c <__hi0bits>
 80151a4:	f1c0 0020 	rsb	r0, r0, #32
 80151a8:	4440      	add	r0, r8
 80151aa:	f010 001f 	ands.w	r0, r0, #31
 80151ae:	d047      	beq.n	8015240 <_dtoa_r+0x8c0>
 80151b0:	f1c0 0320 	rsb	r3, r0, #32
 80151b4:	2b04      	cmp	r3, #4
 80151b6:	dd3b      	ble.n	8015230 <_dtoa_r+0x8b0>
 80151b8:	9b05      	ldr	r3, [sp, #20]
 80151ba:	f1c0 001c 	rsb	r0, r0, #28
 80151be:	4403      	add	r3, r0
 80151c0:	9305      	str	r3, [sp, #20]
 80151c2:	4405      	add	r5, r0
 80151c4:	4480      	add	r8, r0
 80151c6:	9b05      	ldr	r3, [sp, #20]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	dd05      	ble.n	80151d8 <_dtoa_r+0x858>
 80151cc:	461a      	mov	r2, r3
 80151ce:	9904      	ldr	r1, [sp, #16]
 80151d0:	4620      	mov	r0, r4
 80151d2:	f001 f8df 	bl	8016394 <__lshift>
 80151d6:	9004      	str	r0, [sp, #16]
 80151d8:	f1b8 0f00 	cmp.w	r8, #0
 80151dc:	dd05      	ble.n	80151ea <_dtoa_r+0x86a>
 80151de:	4639      	mov	r1, r7
 80151e0:	4642      	mov	r2, r8
 80151e2:	4620      	mov	r0, r4
 80151e4:	f001 f8d6 	bl	8016394 <__lshift>
 80151e8:	4607      	mov	r7, r0
 80151ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151ec:	b353      	cbz	r3, 8015244 <_dtoa_r+0x8c4>
 80151ee:	4639      	mov	r1, r7
 80151f0:	9804      	ldr	r0, [sp, #16]
 80151f2:	f001 f923 	bl	801643c <__mcmp>
 80151f6:	2800      	cmp	r0, #0
 80151f8:	da24      	bge.n	8015244 <_dtoa_r+0x8c4>
 80151fa:	2300      	movs	r3, #0
 80151fc:	220a      	movs	r2, #10
 80151fe:	9904      	ldr	r1, [sp, #16]
 8015200:	4620      	mov	r0, r4
 8015202:	f000 ff12 	bl	801602a <__multadd>
 8015206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015208:	9004      	str	r0, [sp, #16]
 801520a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801520e:	2b00      	cmp	r3, #0
 8015210:	f000 814d 	beq.w	80154ae <_dtoa_r+0xb2e>
 8015214:	2300      	movs	r3, #0
 8015216:	4631      	mov	r1, r6
 8015218:	220a      	movs	r2, #10
 801521a:	4620      	mov	r0, r4
 801521c:	f000 ff05 	bl	801602a <__multadd>
 8015220:	9b02      	ldr	r3, [sp, #8]
 8015222:	2b00      	cmp	r3, #0
 8015224:	4606      	mov	r6, r0
 8015226:	dc4f      	bgt.n	80152c8 <_dtoa_r+0x948>
 8015228:	9b06      	ldr	r3, [sp, #24]
 801522a:	2b02      	cmp	r3, #2
 801522c:	dd4c      	ble.n	80152c8 <_dtoa_r+0x948>
 801522e:	e011      	b.n	8015254 <_dtoa_r+0x8d4>
 8015230:	d0c9      	beq.n	80151c6 <_dtoa_r+0x846>
 8015232:	9a05      	ldr	r2, [sp, #20]
 8015234:	331c      	adds	r3, #28
 8015236:	441a      	add	r2, r3
 8015238:	9205      	str	r2, [sp, #20]
 801523a:	441d      	add	r5, r3
 801523c:	4498      	add	r8, r3
 801523e:	e7c2      	b.n	80151c6 <_dtoa_r+0x846>
 8015240:	4603      	mov	r3, r0
 8015242:	e7f6      	b.n	8015232 <_dtoa_r+0x8b2>
 8015244:	f1b9 0f00 	cmp.w	r9, #0
 8015248:	dc38      	bgt.n	80152bc <_dtoa_r+0x93c>
 801524a:	9b06      	ldr	r3, [sp, #24]
 801524c:	2b02      	cmp	r3, #2
 801524e:	dd35      	ble.n	80152bc <_dtoa_r+0x93c>
 8015250:	f8cd 9008 	str.w	r9, [sp, #8]
 8015254:	9b02      	ldr	r3, [sp, #8]
 8015256:	b963      	cbnz	r3, 8015272 <_dtoa_r+0x8f2>
 8015258:	4639      	mov	r1, r7
 801525a:	2205      	movs	r2, #5
 801525c:	4620      	mov	r0, r4
 801525e:	f000 fee4 	bl	801602a <__multadd>
 8015262:	4601      	mov	r1, r0
 8015264:	4607      	mov	r7, r0
 8015266:	9804      	ldr	r0, [sp, #16]
 8015268:	f001 f8e8 	bl	801643c <__mcmp>
 801526c:	2800      	cmp	r0, #0
 801526e:	f73f adcc 	bgt.w	8014e0a <_dtoa_r+0x48a>
 8015272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015274:	465d      	mov	r5, fp
 8015276:	ea6f 0a03 	mvn.w	sl, r3
 801527a:	f04f 0900 	mov.w	r9, #0
 801527e:	4639      	mov	r1, r7
 8015280:	4620      	mov	r0, r4
 8015282:	f000 febb 	bl	8015ffc <_Bfree>
 8015286:	2e00      	cmp	r6, #0
 8015288:	f43f aeb7 	beq.w	8014ffa <_dtoa_r+0x67a>
 801528c:	f1b9 0f00 	cmp.w	r9, #0
 8015290:	d005      	beq.n	801529e <_dtoa_r+0x91e>
 8015292:	45b1      	cmp	r9, r6
 8015294:	d003      	beq.n	801529e <_dtoa_r+0x91e>
 8015296:	4649      	mov	r1, r9
 8015298:	4620      	mov	r0, r4
 801529a:	f000 feaf 	bl	8015ffc <_Bfree>
 801529e:	4631      	mov	r1, r6
 80152a0:	4620      	mov	r0, r4
 80152a2:	f000 feab 	bl	8015ffc <_Bfree>
 80152a6:	e6a8      	b.n	8014ffa <_dtoa_r+0x67a>
 80152a8:	2700      	movs	r7, #0
 80152aa:	463e      	mov	r6, r7
 80152ac:	e7e1      	b.n	8015272 <_dtoa_r+0x8f2>
 80152ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80152b2:	463e      	mov	r6, r7
 80152b4:	e5a9      	b.n	8014e0a <_dtoa_r+0x48a>
 80152b6:	bf00      	nop
 80152b8:	40240000 	.word	0x40240000
 80152bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152be:	f8cd 9008 	str.w	r9, [sp, #8]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f000 80fa 	beq.w	80154bc <_dtoa_r+0xb3c>
 80152c8:	2d00      	cmp	r5, #0
 80152ca:	dd05      	ble.n	80152d8 <_dtoa_r+0x958>
 80152cc:	4631      	mov	r1, r6
 80152ce:	462a      	mov	r2, r5
 80152d0:	4620      	mov	r0, r4
 80152d2:	f001 f85f 	bl	8016394 <__lshift>
 80152d6:	4606      	mov	r6, r0
 80152d8:	9b07      	ldr	r3, [sp, #28]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d04c      	beq.n	8015378 <_dtoa_r+0x9f8>
 80152de:	6871      	ldr	r1, [r6, #4]
 80152e0:	4620      	mov	r0, r4
 80152e2:	f000 fe57 	bl	8015f94 <_Balloc>
 80152e6:	6932      	ldr	r2, [r6, #16]
 80152e8:	3202      	adds	r2, #2
 80152ea:	4605      	mov	r5, r0
 80152ec:	0092      	lsls	r2, r2, #2
 80152ee:	f106 010c 	add.w	r1, r6, #12
 80152f2:	300c      	adds	r0, #12
 80152f4:	f7fd fb68 	bl	80129c8 <memcpy>
 80152f8:	2201      	movs	r2, #1
 80152fa:	4629      	mov	r1, r5
 80152fc:	4620      	mov	r0, r4
 80152fe:	f001 f849 	bl	8016394 <__lshift>
 8015302:	9b00      	ldr	r3, [sp, #0]
 8015304:	f8cd b014 	str.w	fp, [sp, #20]
 8015308:	f003 0301 	and.w	r3, r3, #1
 801530c:	46b1      	mov	r9, r6
 801530e:	9307      	str	r3, [sp, #28]
 8015310:	4606      	mov	r6, r0
 8015312:	4639      	mov	r1, r7
 8015314:	9804      	ldr	r0, [sp, #16]
 8015316:	f7ff faa7 	bl	8014868 <quorem>
 801531a:	4649      	mov	r1, r9
 801531c:	4605      	mov	r5, r0
 801531e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015322:	9804      	ldr	r0, [sp, #16]
 8015324:	f001 f88a 	bl	801643c <__mcmp>
 8015328:	4632      	mov	r2, r6
 801532a:	9000      	str	r0, [sp, #0]
 801532c:	4639      	mov	r1, r7
 801532e:	4620      	mov	r0, r4
 8015330:	f001 f89e 	bl	8016470 <__mdiff>
 8015334:	68c3      	ldr	r3, [r0, #12]
 8015336:	4602      	mov	r2, r0
 8015338:	bb03      	cbnz	r3, 801537c <_dtoa_r+0x9fc>
 801533a:	4601      	mov	r1, r0
 801533c:	9008      	str	r0, [sp, #32]
 801533e:	9804      	ldr	r0, [sp, #16]
 8015340:	f001 f87c 	bl	801643c <__mcmp>
 8015344:	9a08      	ldr	r2, [sp, #32]
 8015346:	4603      	mov	r3, r0
 8015348:	4611      	mov	r1, r2
 801534a:	4620      	mov	r0, r4
 801534c:	9308      	str	r3, [sp, #32]
 801534e:	f000 fe55 	bl	8015ffc <_Bfree>
 8015352:	9b08      	ldr	r3, [sp, #32]
 8015354:	b9a3      	cbnz	r3, 8015380 <_dtoa_r+0xa00>
 8015356:	9a06      	ldr	r2, [sp, #24]
 8015358:	b992      	cbnz	r2, 8015380 <_dtoa_r+0xa00>
 801535a:	9a07      	ldr	r2, [sp, #28]
 801535c:	b982      	cbnz	r2, 8015380 <_dtoa_r+0xa00>
 801535e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015362:	d029      	beq.n	80153b8 <_dtoa_r+0xa38>
 8015364:	9b00      	ldr	r3, [sp, #0]
 8015366:	2b00      	cmp	r3, #0
 8015368:	dd01      	ble.n	801536e <_dtoa_r+0x9ee>
 801536a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801536e:	9b05      	ldr	r3, [sp, #20]
 8015370:	1c5d      	adds	r5, r3, #1
 8015372:	f883 8000 	strb.w	r8, [r3]
 8015376:	e782      	b.n	801527e <_dtoa_r+0x8fe>
 8015378:	4630      	mov	r0, r6
 801537a:	e7c2      	b.n	8015302 <_dtoa_r+0x982>
 801537c:	2301      	movs	r3, #1
 801537e:	e7e3      	b.n	8015348 <_dtoa_r+0x9c8>
 8015380:	9a00      	ldr	r2, [sp, #0]
 8015382:	2a00      	cmp	r2, #0
 8015384:	db04      	blt.n	8015390 <_dtoa_r+0xa10>
 8015386:	d125      	bne.n	80153d4 <_dtoa_r+0xa54>
 8015388:	9a06      	ldr	r2, [sp, #24]
 801538a:	bb1a      	cbnz	r2, 80153d4 <_dtoa_r+0xa54>
 801538c:	9a07      	ldr	r2, [sp, #28]
 801538e:	bb0a      	cbnz	r2, 80153d4 <_dtoa_r+0xa54>
 8015390:	2b00      	cmp	r3, #0
 8015392:	ddec      	ble.n	801536e <_dtoa_r+0x9ee>
 8015394:	2201      	movs	r2, #1
 8015396:	9904      	ldr	r1, [sp, #16]
 8015398:	4620      	mov	r0, r4
 801539a:	f000 fffb 	bl	8016394 <__lshift>
 801539e:	4639      	mov	r1, r7
 80153a0:	9004      	str	r0, [sp, #16]
 80153a2:	f001 f84b 	bl	801643c <__mcmp>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	dc03      	bgt.n	80153b2 <_dtoa_r+0xa32>
 80153aa:	d1e0      	bne.n	801536e <_dtoa_r+0x9ee>
 80153ac:	f018 0f01 	tst.w	r8, #1
 80153b0:	d0dd      	beq.n	801536e <_dtoa_r+0x9ee>
 80153b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80153b6:	d1d8      	bne.n	801536a <_dtoa_r+0x9ea>
 80153b8:	9b05      	ldr	r3, [sp, #20]
 80153ba:	9a05      	ldr	r2, [sp, #20]
 80153bc:	1c5d      	adds	r5, r3, #1
 80153be:	2339      	movs	r3, #57	; 0x39
 80153c0:	7013      	strb	r3, [r2, #0]
 80153c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80153c6:	2b39      	cmp	r3, #57	; 0x39
 80153c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80153cc:	d04f      	beq.n	801546e <_dtoa_r+0xaee>
 80153ce:	3301      	adds	r3, #1
 80153d0:	7013      	strb	r3, [r2, #0]
 80153d2:	e754      	b.n	801527e <_dtoa_r+0x8fe>
 80153d4:	9a05      	ldr	r2, [sp, #20]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	f102 0501 	add.w	r5, r2, #1
 80153dc:	dd06      	ble.n	80153ec <_dtoa_r+0xa6c>
 80153de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80153e2:	d0e9      	beq.n	80153b8 <_dtoa_r+0xa38>
 80153e4:	f108 0801 	add.w	r8, r8, #1
 80153e8:	9b05      	ldr	r3, [sp, #20]
 80153ea:	e7c2      	b.n	8015372 <_dtoa_r+0x9f2>
 80153ec:	9a02      	ldr	r2, [sp, #8]
 80153ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80153f2:	eba5 030b 	sub.w	r3, r5, fp
 80153f6:	4293      	cmp	r3, r2
 80153f8:	d021      	beq.n	801543e <_dtoa_r+0xabe>
 80153fa:	2300      	movs	r3, #0
 80153fc:	220a      	movs	r2, #10
 80153fe:	9904      	ldr	r1, [sp, #16]
 8015400:	4620      	mov	r0, r4
 8015402:	f000 fe12 	bl	801602a <__multadd>
 8015406:	45b1      	cmp	r9, r6
 8015408:	9004      	str	r0, [sp, #16]
 801540a:	f04f 0300 	mov.w	r3, #0
 801540e:	f04f 020a 	mov.w	r2, #10
 8015412:	4649      	mov	r1, r9
 8015414:	4620      	mov	r0, r4
 8015416:	d105      	bne.n	8015424 <_dtoa_r+0xaa4>
 8015418:	f000 fe07 	bl	801602a <__multadd>
 801541c:	4681      	mov	r9, r0
 801541e:	4606      	mov	r6, r0
 8015420:	9505      	str	r5, [sp, #20]
 8015422:	e776      	b.n	8015312 <_dtoa_r+0x992>
 8015424:	f000 fe01 	bl	801602a <__multadd>
 8015428:	4631      	mov	r1, r6
 801542a:	4681      	mov	r9, r0
 801542c:	2300      	movs	r3, #0
 801542e:	220a      	movs	r2, #10
 8015430:	4620      	mov	r0, r4
 8015432:	f000 fdfa 	bl	801602a <__multadd>
 8015436:	4606      	mov	r6, r0
 8015438:	e7f2      	b.n	8015420 <_dtoa_r+0xaa0>
 801543a:	f04f 0900 	mov.w	r9, #0
 801543e:	2201      	movs	r2, #1
 8015440:	9904      	ldr	r1, [sp, #16]
 8015442:	4620      	mov	r0, r4
 8015444:	f000 ffa6 	bl	8016394 <__lshift>
 8015448:	4639      	mov	r1, r7
 801544a:	9004      	str	r0, [sp, #16]
 801544c:	f000 fff6 	bl	801643c <__mcmp>
 8015450:	2800      	cmp	r0, #0
 8015452:	dcb6      	bgt.n	80153c2 <_dtoa_r+0xa42>
 8015454:	d102      	bne.n	801545c <_dtoa_r+0xadc>
 8015456:	f018 0f01 	tst.w	r8, #1
 801545a:	d1b2      	bne.n	80153c2 <_dtoa_r+0xa42>
 801545c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015460:	2b30      	cmp	r3, #48	; 0x30
 8015462:	f105 32ff 	add.w	r2, r5, #4294967295
 8015466:	f47f af0a 	bne.w	801527e <_dtoa_r+0x8fe>
 801546a:	4615      	mov	r5, r2
 801546c:	e7f6      	b.n	801545c <_dtoa_r+0xadc>
 801546e:	4593      	cmp	fp, r2
 8015470:	d105      	bne.n	801547e <_dtoa_r+0xafe>
 8015472:	2331      	movs	r3, #49	; 0x31
 8015474:	f10a 0a01 	add.w	sl, sl, #1
 8015478:	f88b 3000 	strb.w	r3, [fp]
 801547c:	e6ff      	b.n	801527e <_dtoa_r+0x8fe>
 801547e:	4615      	mov	r5, r2
 8015480:	e79f      	b.n	80153c2 <_dtoa_r+0xa42>
 8015482:	f8df b064 	ldr.w	fp, [pc, #100]	; 80154e8 <_dtoa_r+0xb68>
 8015486:	e007      	b.n	8015498 <_dtoa_r+0xb18>
 8015488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801548a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80154ec <_dtoa_r+0xb6c>
 801548e:	b11b      	cbz	r3, 8015498 <_dtoa_r+0xb18>
 8015490:	f10b 0308 	add.w	r3, fp, #8
 8015494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015496:	6013      	str	r3, [r2, #0]
 8015498:	4658      	mov	r0, fp
 801549a:	b017      	add	sp, #92	; 0x5c
 801549c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a0:	9b06      	ldr	r3, [sp, #24]
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	f77f ae35 	ble.w	8015112 <_dtoa_r+0x792>
 80154a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154aa:	9307      	str	r3, [sp, #28]
 80154ac:	e649      	b.n	8015142 <_dtoa_r+0x7c2>
 80154ae:	9b02      	ldr	r3, [sp, #8]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	dc03      	bgt.n	80154bc <_dtoa_r+0xb3c>
 80154b4:	9b06      	ldr	r3, [sp, #24]
 80154b6:	2b02      	cmp	r3, #2
 80154b8:	f73f aecc 	bgt.w	8015254 <_dtoa_r+0x8d4>
 80154bc:	465d      	mov	r5, fp
 80154be:	4639      	mov	r1, r7
 80154c0:	9804      	ldr	r0, [sp, #16]
 80154c2:	f7ff f9d1 	bl	8014868 <quorem>
 80154c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80154ca:	f805 8b01 	strb.w	r8, [r5], #1
 80154ce:	9a02      	ldr	r2, [sp, #8]
 80154d0:	eba5 030b 	sub.w	r3, r5, fp
 80154d4:	429a      	cmp	r2, r3
 80154d6:	ddb0      	ble.n	801543a <_dtoa_r+0xaba>
 80154d8:	2300      	movs	r3, #0
 80154da:	220a      	movs	r2, #10
 80154dc:	9904      	ldr	r1, [sp, #16]
 80154de:	4620      	mov	r0, r4
 80154e0:	f000 fda3 	bl	801602a <__multadd>
 80154e4:	9004      	str	r0, [sp, #16]
 80154e6:	e7ea      	b.n	80154be <_dtoa_r+0xb3e>
 80154e8:	080180c3 	.word	0x080180c3
 80154ec:	08017f20 	.word	0x08017f20

080154f0 <__sflush_r>:
 80154f0:	898a      	ldrh	r2, [r1, #12]
 80154f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154f6:	4605      	mov	r5, r0
 80154f8:	0710      	lsls	r0, r2, #28
 80154fa:	460c      	mov	r4, r1
 80154fc:	d458      	bmi.n	80155b0 <__sflush_r+0xc0>
 80154fe:	684b      	ldr	r3, [r1, #4]
 8015500:	2b00      	cmp	r3, #0
 8015502:	dc05      	bgt.n	8015510 <__sflush_r+0x20>
 8015504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015506:	2b00      	cmp	r3, #0
 8015508:	dc02      	bgt.n	8015510 <__sflush_r+0x20>
 801550a:	2000      	movs	r0, #0
 801550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015512:	2e00      	cmp	r6, #0
 8015514:	d0f9      	beq.n	801550a <__sflush_r+0x1a>
 8015516:	2300      	movs	r3, #0
 8015518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801551c:	682f      	ldr	r7, [r5, #0]
 801551e:	6a21      	ldr	r1, [r4, #32]
 8015520:	602b      	str	r3, [r5, #0]
 8015522:	d032      	beq.n	801558a <__sflush_r+0x9a>
 8015524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015526:	89a3      	ldrh	r3, [r4, #12]
 8015528:	075a      	lsls	r2, r3, #29
 801552a:	d505      	bpl.n	8015538 <__sflush_r+0x48>
 801552c:	6863      	ldr	r3, [r4, #4]
 801552e:	1ac0      	subs	r0, r0, r3
 8015530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015532:	b10b      	cbz	r3, 8015538 <__sflush_r+0x48>
 8015534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015536:	1ac0      	subs	r0, r0, r3
 8015538:	2300      	movs	r3, #0
 801553a:	4602      	mov	r2, r0
 801553c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801553e:	6a21      	ldr	r1, [r4, #32]
 8015540:	4628      	mov	r0, r5
 8015542:	47b0      	blx	r6
 8015544:	1c43      	adds	r3, r0, #1
 8015546:	89a3      	ldrh	r3, [r4, #12]
 8015548:	d106      	bne.n	8015558 <__sflush_r+0x68>
 801554a:	6829      	ldr	r1, [r5, #0]
 801554c:	291d      	cmp	r1, #29
 801554e:	d848      	bhi.n	80155e2 <__sflush_r+0xf2>
 8015550:	4a29      	ldr	r2, [pc, #164]	; (80155f8 <__sflush_r+0x108>)
 8015552:	40ca      	lsrs	r2, r1
 8015554:	07d6      	lsls	r6, r2, #31
 8015556:	d544      	bpl.n	80155e2 <__sflush_r+0xf2>
 8015558:	2200      	movs	r2, #0
 801555a:	6062      	str	r2, [r4, #4]
 801555c:	04d9      	lsls	r1, r3, #19
 801555e:	6922      	ldr	r2, [r4, #16]
 8015560:	6022      	str	r2, [r4, #0]
 8015562:	d504      	bpl.n	801556e <__sflush_r+0x7e>
 8015564:	1c42      	adds	r2, r0, #1
 8015566:	d101      	bne.n	801556c <__sflush_r+0x7c>
 8015568:	682b      	ldr	r3, [r5, #0]
 801556a:	b903      	cbnz	r3, 801556e <__sflush_r+0x7e>
 801556c:	6560      	str	r0, [r4, #84]	; 0x54
 801556e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015570:	602f      	str	r7, [r5, #0]
 8015572:	2900      	cmp	r1, #0
 8015574:	d0c9      	beq.n	801550a <__sflush_r+0x1a>
 8015576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801557a:	4299      	cmp	r1, r3
 801557c:	d002      	beq.n	8015584 <__sflush_r+0x94>
 801557e:	4628      	mov	r0, r5
 8015580:	f001 f916 	bl	80167b0 <_free_r>
 8015584:	2000      	movs	r0, #0
 8015586:	6360      	str	r0, [r4, #52]	; 0x34
 8015588:	e7c0      	b.n	801550c <__sflush_r+0x1c>
 801558a:	2301      	movs	r3, #1
 801558c:	4628      	mov	r0, r5
 801558e:	47b0      	blx	r6
 8015590:	1c41      	adds	r1, r0, #1
 8015592:	d1c8      	bne.n	8015526 <__sflush_r+0x36>
 8015594:	682b      	ldr	r3, [r5, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d0c5      	beq.n	8015526 <__sflush_r+0x36>
 801559a:	2b1d      	cmp	r3, #29
 801559c:	d001      	beq.n	80155a2 <__sflush_r+0xb2>
 801559e:	2b16      	cmp	r3, #22
 80155a0:	d101      	bne.n	80155a6 <__sflush_r+0xb6>
 80155a2:	602f      	str	r7, [r5, #0]
 80155a4:	e7b1      	b.n	801550a <__sflush_r+0x1a>
 80155a6:	89a3      	ldrh	r3, [r4, #12]
 80155a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155ac:	81a3      	strh	r3, [r4, #12]
 80155ae:	e7ad      	b.n	801550c <__sflush_r+0x1c>
 80155b0:	690f      	ldr	r7, [r1, #16]
 80155b2:	2f00      	cmp	r7, #0
 80155b4:	d0a9      	beq.n	801550a <__sflush_r+0x1a>
 80155b6:	0793      	lsls	r3, r2, #30
 80155b8:	680e      	ldr	r6, [r1, #0]
 80155ba:	bf08      	it	eq
 80155bc:	694b      	ldreq	r3, [r1, #20]
 80155be:	600f      	str	r7, [r1, #0]
 80155c0:	bf18      	it	ne
 80155c2:	2300      	movne	r3, #0
 80155c4:	eba6 0807 	sub.w	r8, r6, r7
 80155c8:	608b      	str	r3, [r1, #8]
 80155ca:	f1b8 0f00 	cmp.w	r8, #0
 80155ce:	dd9c      	ble.n	801550a <__sflush_r+0x1a>
 80155d0:	4643      	mov	r3, r8
 80155d2:	463a      	mov	r2, r7
 80155d4:	6a21      	ldr	r1, [r4, #32]
 80155d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155d8:	4628      	mov	r0, r5
 80155da:	47b0      	blx	r6
 80155dc:	2800      	cmp	r0, #0
 80155de:	dc06      	bgt.n	80155ee <__sflush_r+0xfe>
 80155e0:	89a3      	ldrh	r3, [r4, #12]
 80155e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155e6:	81a3      	strh	r3, [r4, #12]
 80155e8:	f04f 30ff 	mov.w	r0, #4294967295
 80155ec:	e78e      	b.n	801550c <__sflush_r+0x1c>
 80155ee:	4407      	add	r7, r0
 80155f0:	eba8 0800 	sub.w	r8, r8, r0
 80155f4:	e7e9      	b.n	80155ca <__sflush_r+0xda>
 80155f6:	bf00      	nop
 80155f8:	20400001 	.word	0x20400001

080155fc <_fflush_r>:
 80155fc:	b538      	push	{r3, r4, r5, lr}
 80155fe:	690b      	ldr	r3, [r1, #16]
 8015600:	4605      	mov	r5, r0
 8015602:	460c      	mov	r4, r1
 8015604:	b1db      	cbz	r3, 801563e <_fflush_r+0x42>
 8015606:	b118      	cbz	r0, 8015610 <_fflush_r+0x14>
 8015608:	6983      	ldr	r3, [r0, #24]
 801560a:	b90b      	cbnz	r3, 8015610 <_fflush_r+0x14>
 801560c:	f000 f860 	bl	80156d0 <__sinit>
 8015610:	4b0c      	ldr	r3, [pc, #48]	; (8015644 <_fflush_r+0x48>)
 8015612:	429c      	cmp	r4, r3
 8015614:	d109      	bne.n	801562a <_fflush_r+0x2e>
 8015616:	686c      	ldr	r4, [r5, #4]
 8015618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801561c:	b17b      	cbz	r3, 801563e <_fflush_r+0x42>
 801561e:	4621      	mov	r1, r4
 8015620:	4628      	mov	r0, r5
 8015622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015626:	f7ff bf63 	b.w	80154f0 <__sflush_r>
 801562a:	4b07      	ldr	r3, [pc, #28]	; (8015648 <_fflush_r+0x4c>)
 801562c:	429c      	cmp	r4, r3
 801562e:	d101      	bne.n	8015634 <_fflush_r+0x38>
 8015630:	68ac      	ldr	r4, [r5, #8]
 8015632:	e7f1      	b.n	8015618 <_fflush_r+0x1c>
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <_fflush_r+0x50>)
 8015636:	429c      	cmp	r4, r3
 8015638:	bf08      	it	eq
 801563a:	68ec      	ldreq	r4, [r5, #12]
 801563c:	e7ec      	b.n	8015618 <_fflush_r+0x1c>
 801563e:	2000      	movs	r0, #0
 8015640:	bd38      	pop	{r3, r4, r5, pc}
 8015642:	bf00      	nop
 8015644:	08017f50 	.word	0x08017f50
 8015648:	08017f70 	.word	0x08017f70
 801564c:	08017f30 	.word	0x08017f30

08015650 <std>:
 8015650:	2300      	movs	r3, #0
 8015652:	b510      	push	{r4, lr}
 8015654:	4604      	mov	r4, r0
 8015656:	e9c0 3300 	strd	r3, r3, [r0]
 801565a:	6083      	str	r3, [r0, #8]
 801565c:	8181      	strh	r1, [r0, #12]
 801565e:	6643      	str	r3, [r0, #100]	; 0x64
 8015660:	81c2      	strh	r2, [r0, #14]
 8015662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015666:	6183      	str	r3, [r0, #24]
 8015668:	4619      	mov	r1, r3
 801566a:	2208      	movs	r2, #8
 801566c:	305c      	adds	r0, #92	; 0x5c
 801566e:	f7fd f9b6 	bl	80129de <memset>
 8015672:	4b05      	ldr	r3, [pc, #20]	; (8015688 <std+0x38>)
 8015674:	6263      	str	r3, [r4, #36]	; 0x24
 8015676:	4b05      	ldr	r3, [pc, #20]	; (801568c <std+0x3c>)
 8015678:	62a3      	str	r3, [r4, #40]	; 0x28
 801567a:	4b05      	ldr	r3, [pc, #20]	; (8015690 <std+0x40>)
 801567c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801567e:	4b05      	ldr	r3, [pc, #20]	; (8015694 <std+0x44>)
 8015680:	6224      	str	r4, [r4, #32]
 8015682:	6323      	str	r3, [r4, #48]	; 0x30
 8015684:	bd10      	pop	{r4, pc}
 8015686:	bf00      	nop
 8015688:	0801386d 	.word	0x0801386d
 801568c:	08013893 	.word	0x08013893
 8015690:	080138cb 	.word	0x080138cb
 8015694:	080138ef 	.word	0x080138ef

08015698 <_cleanup_r>:
 8015698:	4901      	ldr	r1, [pc, #4]	; (80156a0 <_cleanup_r+0x8>)
 801569a:	f000 b885 	b.w	80157a8 <_fwalk_reent>
 801569e:	bf00      	nop
 80156a0:	080155fd 	.word	0x080155fd

080156a4 <__sfmoreglue>:
 80156a4:	b570      	push	{r4, r5, r6, lr}
 80156a6:	1e4a      	subs	r2, r1, #1
 80156a8:	2568      	movs	r5, #104	; 0x68
 80156aa:	4355      	muls	r5, r2
 80156ac:	460e      	mov	r6, r1
 80156ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80156b2:	f001 f8cb 	bl	801684c <_malloc_r>
 80156b6:	4604      	mov	r4, r0
 80156b8:	b140      	cbz	r0, 80156cc <__sfmoreglue+0x28>
 80156ba:	2100      	movs	r1, #0
 80156bc:	e9c0 1600 	strd	r1, r6, [r0]
 80156c0:	300c      	adds	r0, #12
 80156c2:	60a0      	str	r0, [r4, #8]
 80156c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80156c8:	f7fd f989 	bl	80129de <memset>
 80156cc:	4620      	mov	r0, r4
 80156ce:	bd70      	pop	{r4, r5, r6, pc}

080156d0 <__sinit>:
 80156d0:	6983      	ldr	r3, [r0, #24]
 80156d2:	b510      	push	{r4, lr}
 80156d4:	4604      	mov	r4, r0
 80156d6:	bb33      	cbnz	r3, 8015726 <__sinit+0x56>
 80156d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80156dc:	6503      	str	r3, [r0, #80]	; 0x50
 80156de:	4b12      	ldr	r3, [pc, #72]	; (8015728 <__sinit+0x58>)
 80156e0:	4a12      	ldr	r2, [pc, #72]	; (801572c <__sinit+0x5c>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	6282      	str	r2, [r0, #40]	; 0x28
 80156e6:	4298      	cmp	r0, r3
 80156e8:	bf04      	itt	eq
 80156ea:	2301      	moveq	r3, #1
 80156ec:	6183      	streq	r3, [r0, #24]
 80156ee:	f000 f81f 	bl	8015730 <__sfp>
 80156f2:	6060      	str	r0, [r4, #4]
 80156f4:	4620      	mov	r0, r4
 80156f6:	f000 f81b 	bl	8015730 <__sfp>
 80156fa:	60a0      	str	r0, [r4, #8]
 80156fc:	4620      	mov	r0, r4
 80156fe:	f000 f817 	bl	8015730 <__sfp>
 8015702:	2200      	movs	r2, #0
 8015704:	60e0      	str	r0, [r4, #12]
 8015706:	2104      	movs	r1, #4
 8015708:	6860      	ldr	r0, [r4, #4]
 801570a:	f7ff ffa1 	bl	8015650 <std>
 801570e:	2201      	movs	r2, #1
 8015710:	2109      	movs	r1, #9
 8015712:	68a0      	ldr	r0, [r4, #8]
 8015714:	f7ff ff9c 	bl	8015650 <std>
 8015718:	2202      	movs	r2, #2
 801571a:	2112      	movs	r1, #18
 801571c:	68e0      	ldr	r0, [r4, #12]
 801571e:	f7ff ff97 	bl	8015650 <std>
 8015722:	2301      	movs	r3, #1
 8015724:	61a3      	str	r3, [r4, #24]
 8015726:	bd10      	pop	{r4, pc}
 8015728:	08017e90 	.word	0x08017e90
 801572c:	08015699 	.word	0x08015699

08015730 <__sfp>:
 8015730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015732:	4b1b      	ldr	r3, [pc, #108]	; (80157a0 <__sfp+0x70>)
 8015734:	681e      	ldr	r6, [r3, #0]
 8015736:	69b3      	ldr	r3, [r6, #24]
 8015738:	4607      	mov	r7, r0
 801573a:	b913      	cbnz	r3, 8015742 <__sfp+0x12>
 801573c:	4630      	mov	r0, r6
 801573e:	f7ff ffc7 	bl	80156d0 <__sinit>
 8015742:	3648      	adds	r6, #72	; 0x48
 8015744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015748:	3b01      	subs	r3, #1
 801574a:	d503      	bpl.n	8015754 <__sfp+0x24>
 801574c:	6833      	ldr	r3, [r6, #0]
 801574e:	b133      	cbz	r3, 801575e <__sfp+0x2e>
 8015750:	6836      	ldr	r6, [r6, #0]
 8015752:	e7f7      	b.n	8015744 <__sfp+0x14>
 8015754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015758:	b16d      	cbz	r5, 8015776 <__sfp+0x46>
 801575a:	3468      	adds	r4, #104	; 0x68
 801575c:	e7f4      	b.n	8015748 <__sfp+0x18>
 801575e:	2104      	movs	r1, #4
 8015760:	4638      	mov	r0, r7
 8015762:	f7ff ff9f 	bl	80156a4 <__sfmoreglue>
 8015766:	6030      	str	r0, [r6, #0]
 8015768:	2800      	cmp	r0, #0
 801576a:	d1f1      	bne.n	8015750 <__sfp+0x20>
 801576c:	230c      	movs	r3, #12
 801576e:	603b      	str	r3, [r7, #0]
 8015770:	4604      	mov	r4, r0
 8015772:	4620      	mov	r0, r4
 8015774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015776:	4b0b      	ldr	r3, [pc, #44]	; (80157a4 <__sfp+0x74>)
 8015778:	6665      	str	r5, [r4, #100]	; 0x64
 801577a:	e9c4 5500 	strd	r5, r5, [r4]
 801577e:	60a5      	str	r5, [r4, #8]
 8015780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015788:	2208      	movs	r2, #8
 801578a:	4629      	mov	r1, r5
 801578c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015790:	f7fd f925 	bl	80129de <memset>
 8015794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801579c:	e7e9      	b.n	8015772 <__sfp+0x42>
 801579e:	bf00      	nop
 80157a0:	08017e90 	.word	0x08017e90
 80157a4:	ffff0001 	.word	0xffff0001

080157a8 <_fwalk_reent>:
 80157a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157ac:	4680      	mov	r8, r0
 80157ae:	4689      	mov	r9, r1
 80157b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80157b4:	2600      	movs	r6, #0
 80157b6:	b914      	cbnz	r4, 80157be <_fwalk_reent+0x16>
 80157b8:	4630      	mov	r0, r6
 80157ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80157c2:	3f01      	subs	r7, #1
 80157c4:	d501      	bpl.n	80157ca <_fwalk_reent+0x22>
 80157c6:	6824      	ldr	r4, [r4, #0]
 80157c8:	e7f5      	b.n	80157b6 <_fwalk_reent+0xe>
 80157ca:	89ab      	ldrh	r3, [r5, #12]
 80157cc:	2b01      	cmp	r3, #1
 80157ce:	d907      	bls.n	80157e0 <_fwalk_reent+0x38>
 80157d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80157d4:	3301      	adds	r3, #1
 80157d6:	d003      	beq.n	80157e0 <_fwalk_reent+0x38>
 80157d8:	4629      	mov	r1, r5
 80157da:	4640      	mov	r0, r8
 80157dc:	47c8      	blx	r9
 80157de:	4306      	orrs	r6, r0
 80157e0:	3568      	adds	r5, #104	; 0x68
 80157e2:	e7ee      	b.n	80157c2 <_fwalk_reent+0x1a>

080157e4 <rshift>:
 80157e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157e6:	6906      	ldr	r6, [r0, #16]
 80157e8:	114b      	asrs	r3, r1, #5
 80157ea:	429e      	cmp	r6, r3
 80157ec:	f100 0414 	add.w	r4, r0, #20
 80157f0:	dd30      	ble.n	8015854 <rshift+0x70>
 80157f2:	f011 011f 	ands.w	r1, r1, #31
 80157f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80157fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80157fe:	d108      	bne.n	8015812 <rshift+0x2e>
 8015800:	4621      	mov	r1, r4
 8015802:	42b2      	cmp	r2, r6
 8015804:	460b      	mov	r3, r1
 8015806:	d211      	bcs.n	801582c <rshift+0x48>
 8015808:	f852 3b04 	ldr.w	r3, [r2], #4
 801580c:	f841 3b04 	str.w	r3, [r1], #4
 8015810:	e7f7      	b.n	8015802 <rshift+0x1e>
 8015812:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015816:	f1c1 0c20 	rsb	ip, r1, #32
 801581a:	40cd      	lsrs	r5, r1
 801581c:	3204      	adds	r2, #4
 801581e:	4623      	mov	r3, r4
 8015820:	42b2      	cmp	r2, r6
 8015822:	4617      	mov	r7, r2
 8015824:	d30c      	bcc.n	8015840 <rshift+0x5c>
 8015826:	601d      	str	r5, [r3, #0]
 8015828:	b105      	cbz	r5, 801582c <rshift+0x48>
 801582a:	3304      	adds	r3, #4
 801582c:	1b1a      	subs	r2, r3, r4
 801582e:	42a3      	cmp	r3, r4
 8015830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015834:	bf08      	it	eq
 8015836:	2300      	moveq	r3, #0
 8015838:	6102      	str	r2, [r0, #16]
 801583a:	bf08      	it	eq
 801583c:	6143      	streq	r3, [r0, #20]
 801583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015840:	683f      	ldr	r7, [r7, #0]
 8015842:	fa07 f70c 	lsl.w	r7, r7, ip
 8015846:	433d      	orrs	r5, r7
 8015848:	f843 5b04 	str.w	r5, [r3], #4
 801584c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015850:	40cd      	lsrs	r5, r1
 8015852:	e7e5      	b.n	8015820 <rshift+0x3c>
 8015854:	4623      	mov	r3, r4
 8015856:	e7e9      	b.n	801582c <rshift+0x48>

08015858 <__hexdig_fun>:
 8015858:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801585c:	2b09      	cmp	r3, #9
 801585e:	d802      	bhi.n	8015866 <__hexdig_fun+0xe>
 8015860:	3820      	subs	r0, #32
 8015862:	b2c0      	uxtb	r0, r0
 8015864:	4770      	bx	lr
 8015866:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801586a:	2b05      	cmp	r3, #5
 801586c:	d801      	bhi.n	8015872 <__hexdig_fun+0x1a>
 801586e:	3847      	subs	r0, #71	; 0x47
 8015870:	e7f7      	b.n	8015862 <__hexdig_fun+0xa>
 8015872:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015876:	2b05      	cmp	r3, #5
 8015878:	d801      	bhi.n	801587e <__hexdig_fun+0x26>
 801587a:	3827      	subs	r0, #39	; 0x27
 801587c:	e7f1      	b.n	8015862 <__hexdig_fun+0xa>
 801587e:	2000      	movs	r0, #0
 8015880:	4770      	bx	lr

08015882 <__gethex>:
 8015882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015886:	b08b      	sub	sp, #44	; 0x2c
 8015888:	468a      	mov	sl, r1
 801588a:	9002      	str	r0, [sp, #8]
 801588c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801588e:	9306      	str	r3, [sp, #24]
 8015890:	4690      	mov	r8, r2
 8015892:	f000 fadf 	bl	8015e54 <__localeconv_l>
 8015896:	6803      	ldr	r3, [r0, #0]
 8015898:	9303      	str	r3, [sp, #12]
 801589a:	4618      	mov	r0, r3
 801589c:	f7ea fcb0 	bl	8000200 <strlen>
 80158a0:	9b03      	ldr	r3, [sp, #12]
 80158a2:	9001      	str	r0, [sp, #4]
 80158a4:	4403      	add	r3, r0
 80158a6:	f04f 0b00 	mov.w	fp, #0
 80158aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80158ae:	9307      	str	r3, [sp, #28]
 80158b0:	f8da 3000 	ldr.w	r3, [sl]
 80158b4:	3302      	adds	r3, #2
 80158b6:	461f      	mov	r7, r3
 80158b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80158bc:	2830      	cmp	r0, #48	; 0x30
 80158be:	d06c      	beq.n	801599a <__gethex+0x118>
 80158c0:	f7ff ffca 	bl	8015858 <__hexdig_fun>
 80158c4:	4604      	mov	r4, r0
 80158c6:	2800      	cmp	r0, #0
 80158c8:	d16a      	bne.n	80159a0 <__gethex+0x11e>
 80158ca:	9a01      	ldr	r2, [sp, #4]
 80158cc:	9903      	ldr	r1, [sp, #12]
 80158ce:	4638      	mov	r0, r7
 80158d0:	f001 fdfe 	bl	80174d0 <strncmp>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	d166      	bne.n	80159a6 <__gethex+0x124>
 80158d8:	9b01      	ldr	r3, [sp, #4]
 80158da:	5cf8      	ldrb	r0, [r7, r3]
 80158dc:	18fe      	adds	r6, r7, r3
 80158de:	f7ff ffbb 	bl	8015858 <__hexdig_fun>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	d062      	beq.n	80159ac <__gethex+0x12a>
 80158e6:	4633      	mov	r3, r6
 80158e8:	7818      	ldrb	r0, [r3, #0]
 80158ea:	2830      	cmp	r0, #48	; 0x30
 80158ec:	461f      	mov	r7, r3
 80158ee:	f103 0301 	add.w	r3, r3, #1
 80158f2:	d0f9      	beq.n	80158e8 <__gethex+0x66>
 80158f4:	f7ff ffb0 	bl	8015858 <__hexdig_fun>
 80158f8:	fab0 f580 	clz	r5, r0
 80158fc:	096d      	lsrs	r5, r5, #5
 80158fe:	4634      	mov	r4, r6
 8015900:	f04f 0b01 	mov.w	fp, #1
 8015904:	463a      	mov	r2, r7
 8015906:	4616      	mov	r6, r2
 8015908:	3201      	adds	r2, #1
 801590a:	7830      	ldrb	r0, [r6, #0]
 801590c:	f7ff ffa4 	bl	8015858 <__hexdig_fun>
 8015910:	2800      	cmp	r0, #0
 8015912:	d1f8      	bne.n	8015906 <__gethex+0x84>
 8015914:	9a01      	ldr	r2, [sp, #4]
 8015916:	9903      	ldr	r1, [sp, #12]
 8015918:	4630      	mov	r0, r6
 801591a:	f001 fdd9 	bl	80174d0 <strncmp>
 801591e:	b950      	cbnz	r0, 8015936 <__gethex+0xb4>
 8015920:	b954      	cbnz	r4, 8015938 <__gethex+0xb6>
 8015922:	9b01      	ldr	r3, [sp, #4]
 8015924:	18f4      	adds	r4, r6, r3
 8015926:	4622      	mov	r2, r4
 8015928:	4616      	mov	r6, r2
 801592a:	3201      	adds	r2, #1
 801592c:	7830      	ldrb	r0, [r6, #0]
 801592e:	f7ff ff93 	bl	8015858 <__hexdig_fun>
 8015932:	2800      	cmp	r0, #0
 8015934:	d1f8      	bne.n	8015928 <__gethex+0xa6>
 8015936:	b10c      	cbz	r4, 801593c <__gethex+0xba>
 8015938:	1ba4      	subs	r4, r4, r6
 801593a:	00a4      	lsls	r4, r4, #2
 801593c:	7833      	ldrb	r3, [r6, #0]
 801593e:	2b50      	cmp	r3, #80	; 0x50
 8015940:	d001      	beq.n	8015946 <__gethex+0xc4>
 8015942:	2b70      	cmp	r3, #112	; 0x70
 8015944:	d140      	bne.n	80159c8 <__gethex+0x146>
 8015946:	7873      	ldrb	r3, [r6, #1]
 8015948:	2b2b      	cmp	r3, #43	; 0x2b
 801594a:	d031      	beq.n	80159b0 <__gethex+0x12e>
 801594c:	2b2d      	cmp	r3, #45	; 0x2d
 801594e:	d033      	beq.n	80159b8 <__gethex+0x136>
 8015950:	1c71      	adds	r1, r6, #1
 8015952:	f04f 0900 	mov.w	r9, #0
 8015956:	7808      	ldrb	r0, [r1, #0]
 8015958:	f7ff ff7e 	bl	8015858 <__hexdig_fun>
 801595c:	1e43      	subs	r3, r0, #1
 801595e:	b2db      	uxtb	r3, r3
 8015960:	2b18      	cmp	r3, #24
 8015962:	d831      	bhi.n	80159c8 <__gethex+0x146>
 8015964:	f1a0 0210 	sub.w	r2, r0, #16
 8015968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801596c:	f7ff ff74 	bl	8015858 <__hexdig_fun>
 8015970:	1e43      	subs	r3, r0, #1
 8015972:	b2db      	uxtb	r3, r3
 8015974:	2b18      	cmp	r3, #24
 8015976:	d922      	bls.n	80159be <__gethex+0x13c>
 8015978:	f1b9 0f00 	cmp.w	r9, #0
 801597c:	d000      	beq.n	8015980 <__gethex+0xfe>
 801597e:	4252      	negs	r2, r2
 8015980:	4414      	add	r4, r2
 8015982:	f8ca 1000 	str.w	r1, [sl]
 8015986:	b30d      	cbz	r5, 80159cc <__gethex+0x14a>
 8015988:	f1bb 0f00 	cmp.w	fp, #0
 801598c:	bf0c      	ite	eq
 801598e:	2706      	moveq	r7, #6
 8015990:	2700      	movne	r7, #0
 8015992:	4638      	mov	r0, r7
 8015994:	b00b      	add	sp, #44	; 0x2c
 8015996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599a:	f10b 0b01 	add.w	fp, fp, #1
 801599e:	e78a      	b.n	80158b6 <__gethex+0x34>
 80159a0:	2500      	movs	r5, #0
 80159a2:	462c      	mov	r4, r5
 80159a4:	e7ae      	b.n	8015904 <__gethex+0x82>
 80159a6:	463e      	mov	r6, r7
 80159a8:	2501      	movs	r5, #1
 80159aa:	e7c7      	b.n	801593c <__gethex+0xba>
 80159ac:	4604      	mov	r4, r0
 80159ae:	e7fb      	b.n	80159a8 <__gethex+0x126>
 80159b0:	f04f 0900 	mov.w	r9, #0
 80159b4:	1cb1      	adds	r1, r6, #2
 80159b6:	e7ce      	b.n	8015956 <__gethex+0xd4>
 80159b8:	f04f 0901 	mov.w	r9, #1
 80159bc:	e7fa      	b.n	80159b4 <__gethex+0x132>
 80159be:	230a      	movs	r3, #10
 80159c0:	fb03 0202 	mla	r2, r3, r2, r0
 80159c4:	3a10      	subs	r2, #16
 80159c6:	e7cf      	b.n	8015968 <__gethex+0xe6>
 80159c8:	4631      	mov	r1, r6
 80159ca:	e7da      	b.n	8015982 <__gethex+0x100>
 80159cc:	1bf3      	subs	r3, r6, r7
 80159ce:	3b01      	subs	r3, #1
 80159d0:	4629      	mov	r1, r5
 80159d2:	2b07      	cmp	r3, #7
 80159d4:	dc49      	bgt.n	8015a6a <__gethex+0x1e8>
 80159d6:	9802      	ldr	r0, [sp, #8]
 80159d8:	f000 fadc 	bl	8015f94 <_Balloc>
 80159dc:	9b01      	ldr	r3, [sp, #4]
 80159de:	f100 0914 	add.w	r9, r0, #20
 80159e2:	f04f 0b00 	mov.w	fp, #0
 80159e6:	f1c3 0301 	rsb	r3, r3, #1
 80159ea:	4605      	mov	r5, r0
 80159ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80159f0:	46da      	mov	sl, fp
 80159f2:	9308      	str	r3, [sp, #32]
 80159f4:	42b7      	cmp	r7, r6
 80159f6:	d33b      	bcc.n	8015a70 <__gethex+0x1ee>
 80159f8:	9804      	ldr	r0, [sp, #16]
 80159fa:	f840 ab04 	str.w	sl, [r0], #4
 80159fe:	eba0 0009 	sub.w	r0, r0, r9
 8015a02:	1080      	asrs	r0, r0, #2
 8015a04:	6128      	str	r0, [r5, #16]
 8015a06:	0147      	lsls	r7, r0, #5
 8015a08:	4650      	mov	r0, sl
 8015a0a:	f000 fb87 	bl	801611c <__hi0bits>
 8015a0e:	f8d8 6000 	ldr.w	r6, [r8]
 8015a12:	1a3f      	subs	r7, r7, r0
 8015a14:	42b7      	cmp	r7, r6
 8015a16:	dd64      	ble.n	8015ae2 <__gethex+0x260>
 8015a18:	1bbf      	subs	r7, r7, r6
 8015a1a:	4639      	mov	r1, r7
 8015a1c:	4628      	mov	r0, r5
 8015a1e:	f000 fe97 	bl	8016750 <__any_on>
 8015a22:	4682      	mov	sl, r0
 8015a24:	b178      	cbz	r0, 8015a46 <__gethex+0x1c4>
 8015a26:	1e7b      	subs	r3, r7, #1
 8015a28:	1159      	asrs	r1, r3, #5
 8015a2a:	f003 021f 	and.w	r2, r3, #31
 8015a2e:	f04f 0a01 	mov.w	sl, #1
 8015a32:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015a36:	fa0a f202 	lsl.w	r2, sl, r2
 8015a3a:	420a      	tst	r2, r1
 8015a3c:	d003      	beq.n	8015a46 <__gethex+0x1c4>
 8015a3e:	4553      	cmp	r3, sl
 8015a40:	dc46      	bgt.n	8015ad0 <__gethex+0x24e>
 8015a42:	f04f 0a02 	mov.w	sl, #2
 8015a46:	4639      	mov	r1, r7
 8015a48:	4628      	mov	r0, r5
 8015a4a:	f7ff fecb 	bl	80157e4 <rshift>
 8015a4e:	443c      	add	r4, r7
 8015a50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a54:	42a3      	cmp	r3, r4
 8015a56:	da52      	bge.n	8015afe <__gethex+0x27c>
 8015a58:	4629      	mov	r1, r5
 8015a5a:	9802      	ldr	r0, [sp, #8]
 8015a5c:	f000 face 	bl	8015ffc <_Bfree>
 8015a60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a62:	2300      	movs	r3, #0
 8015a64:	6013      	str	r3, [r2, #0]
 8015a66:	27a3      	movs	r7, #163	; 0xa3
 8015a68:	e793      	b.n	8015992 <__gethex+0x110>
 8015a6a:	3101      	adds	r1, #1
 8015a6c:	105b      	asrs	r3, r3, #1
 8015a6e:	e7b0      	b.n	80159d2 <__gethex+0x150>
 8015a70:	1e73      	subs	r3, r6, #1
 8015a72:	9305      	str	r3, [sp, #20]
 8015a74:	9a07      	ldr	r2, [sp, #28]
 8015a76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015a7a:	4293      	cmp	r3, r2
 8015a7c:	d018      	beq.n	8015ab0 <__gethex+0x22e>
 8015a7e:	f1bb 0f20 	cmp.w	fp, #32
 8015a82:	d107      	bne.n	8015a94 <__gethex+0x212>
 8015a84:	9b04      	ldr	r3, [sp, #16]
 8015a86:	f8c3 a000 	str.w	sl, [r3]
 8015a8a:	3304      	adds	r3, #4
 8015a8c:	f04f 0a00 	mov.w	sl, #0
 8015a90:	9304      	str	r3, [sp, #16]
 8015a92:	46d3      	mov	fp, sl
 8015a94:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015a98:	f7ff fede 	bl	8015858 <__hexdig_fun>
 8015a9c:	f000 000f 	and.w	r0, r0, #15
 8015aa0:	fa00 f00b 	lsl.w	r0, r0, fp
 8015aa4:	ea4a 0a00 	orr.w	sl, sl, r0
 8015aa8:	f10b 0b04 	add.w	fp, fp, #4
 8015aac:	9b05      	ldr	r3, [sp, #20]
 8015aae:	e00d      	b.n	8015acc <__gethex+0x24a>
 8015ab0:	9b05      	ldr	r3, [sp, #20]
 8015ab2:	9a08      	ldr	r2, [sp, #32]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	42bb      	cmp	r3, r7
 8015ab8:	d3e1      	bcc.n	8015a7e <__gethex+0x1fc>
 8015aba:	4618      	mov	r0, r3
 8015abc:	9a01      	ldr	r2, [sp, #4]
 8015abe:	9903      	ldr	r1, [sp, #12]
 8015ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac2:	f001 fd05 	bl	80174d0 <strncmp>
 8015ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d1d8      	bne.n	8015a7e <__gethex+0x1fc>
 8015acc:	461e      	mov	r6, r3
 8015ace:	e791      	b.n	80159f4 <__gethex+0x172>
 8015ad0:	1eb9      	subs	r1, r7, #2
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	f000 fe3c 	bl	8016750 <__any_on>
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	d0b2      	beq.n	8015a42 <__gethex+0x1c0>
 8015adc:	f04f 0a03 	mov.w	sl, #3
 8015ae0:	e7b1      	b.n	8015a46 <__gethex+0x1c4>
 8015ae2:	da09      	bge.n	8015af8 <__gethex+0x276>
 8015ae4:	1bf7      	subs	r7, r6, r7
 8015ae6:	4629      	mov	r1, r5
 8015ae8:	463a      	mov	r2, r7
 8015aea:	9802      	ldr	r0, [sp, #8]
 8015aec:	f000 fc52 	bl	8016394 <__lshift>
 8015af0:	1be4      	subs	r4, r4, r7
 8015af2:	4605      	mov	r5, r0
 8015af4:	f100 0914 	add.w	r9, r0, #20
 8015af8:	f04f 0a00 	mov.w	sl, #0
 8015afc:	e7a8      	b.n	8015a50 <__gethex+0x1ce>
 8015afe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015b02:	42a0      	cmp	r0, r4
 8015b04:	dd6a      	ble.n	8015bdc <__gethex+0x35a>
 8015b06:	1b04      	subs	r4, r0, r4
 8015b08:	42a6      	cmp	r6, r4
 8015b0a:	dc2e      	bgt.n	8015b6a <__gethex+0x2e8>
 8015b0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d022      	beq.n	8015b5a <__gethex+0x2d8>
 8015b14:	2b03      	cmp	r3, #3
 8015b16:	d024      	beq.n	8015b62 <__gethex+0x2e0>
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d115      	bne.n	8015b48 <__gethex+0x2c6>
 8015b1c:	42a6      	cmp	r6, r4
 8015b1e:	d113      	bne.n	8015b48 <__gethex+0x2c6>
 8015b20:	2e01      	cmp	r6, #1
 8015b22:	dc0b      	bgt.n	8015b3c <__gethex+0x2ba>
 8015b24:	9a06      	ldr	r2, [sp, #24]
 8015b26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b2a:	6013      	str	r3, [r2, #0]
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	612b      	str	r3, [r5, #16]
 8015b30:	f8c9 3000 	str.w	r3, [r9]
 8015b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b36:	2762      	movs	r7, #98	; 0x62
 8015b38:	601d      	str	r5, [r3, #0]
 8015b3a:	e72a      	b.n	8015992 <__gethex+0x110>
 8015b3c:	1e71      	subs	r1, r6, #1
 8015b3e:	4628      	mov	r0, r5
 8015b40:	f000 fe06 	bl	8016750 <__any_on>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	d1ed      	bne.n	8015b24 <__gethex+0x2a2>
 8015b48:	4629      	mov	r1, r5
 8015b4a:	9802      	ldr	r0, [sp, #8]
 8015b4c:	f000 fa56 	bl	8015ffc <_Bfree>
 8015b50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b52:	2300      	movs	r3, #0
 8015b54:	6013      	str	r3, [r2, #0]
 8015b56:	2750      	movs	r7, #80	; 0x50
 8015b58:	e71b      	b.n	8015992 <__gethex+0x110>
 8015b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d0e1      	beq.n	8015b24 <__gethex+0x2a2>
 8015b60:	e7f2      	b.n	8015b48 <__gethex+0x2c6>
 8015b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d1dd      	bne.n	8015b24 <__gethex+0x2a2>
 8015b68:	e7ee      	b.n	8015b48 <__gethex+0x2c6>
 8015b6a:	1e67      	subs	r7, r4, #1
 8015b6c:	f1ba 0f00 	cmp.w	sl, #0
 8015b70:	d131      	bne.n	8015bd6 <__gethex+0x354>
 8015b72:	b127      	cbz	r7, 8015b7e <__gethex+0x2fc>
 8015b74:	4639      	mov	r1, r7
 8015b76:	4628      	mov	r0, r5
 8015b78:	f000 fdea 	bl	8016750 <__any_on>
 8015b7c:	4682      	mov	sl, r0
 8015b7e:	117a      	asrs	r2, r7, #5
 8015b80:	2301      	movs	r3, #1
 8015b82:	f007 071f 	and.w	r7, r7, #31
 8015b86:	fa03 f707 	lsl.w	r7, r3, r7
 8015b8a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015b8e:	4621      	mov	r1, r4
 8015b90:	421f      	tst	r7, r3
 8015b92:	4628      	mov	r0, r5
 8015b94:	bf18      	it	ne
 8015b96:	f04a 0a02 	orrne.w	sl, sl, #2
 8015b9a:	1b36      	subs	r6, r6, r4
 8015b9c:	f7ff fe22 	bl	80157e4 <rshift>
 8015ba0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015ba4:	2702      	movs	r7, #2
 8015ba6:	f1ba 0f00 	cmp.w	sl, #0
 8015baa:	d048      	beq.n	8015c3e <__gethex+0x3bc>
 8015bac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015bb0:	2b02      	cmp	r3, #2
 8015bb2:	d015      	beq.n	8015be0 <__gethex+0x35e>
 8015bb4:	2b03      	cmp	r3, #3
 8015bb6:	d017      	beq.n	8015be8 <__gethex+0x366>
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	d109      	bne.n	8015bd0 <__gethex+0x34e>
 8015bbc:	f01a 0f02 	tst.w	sl, #2
 8015bc0:	d006      	beq.n	8015bd0 <__gethex+0x34e>
 8015bc2:	f8d9 3000 	ldr.w	r3, [r9]
 8015bc6:	ea4a 0a03 	orr.w	sl, sl, r3
 8015bca:	f01a 0f01 	tst.w	sl, #1
 8015bce:	d10e      	bne.n	8015bee <__gethex+0x36c>
 8015bd0:	f047 0710 	orr.w	r7, r7, #16
 8015bd4:	e033      	b.n	8015c3e <__gethex+0x3bc>
 8015bd6:	f04f 0a01 	mov.w	sl, #1
 8015bda:	e7d0      	b.n	8015b7e <__gethex+0x2fc>
 8015bdc:	2701      	movs	r7, #1
 8015bde:	e7e2      	b.n	8015ba6 <__gethex+0x324>
 8015be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015be2:	f1c3 0301 	rsb	r3, r3, #1
 8015be6:	9315      	str	r3, [sp, #84]	; 0x54
 8015be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d0f0      	beq.n	8015bd0 <__gethex+0x34e>
 8015bee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015bf2:	f105 0314 	add.w	r3, r5, #20
 8015bf6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015bfa:	eb03 010a 	add.w	r1, r3, sl
 8015bfe:	f04f 0c00 	mov.w	ip, #0
 8015c02:	4618      	mov	r0, r3
 8015c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015c0c:	d01c      	beq.n	8015c48 <__gethex+0x3c6>
 8015c0e:	3201      	adds	r2, #1
 8015c10:	6002      	str	r2, [r0, #0]
 8015c12:	2f02      	cmp	r7, #2
 8015c14:	f105 0314 	add.w	r3, r5, #20
 8015c18:	d138      	bne.n	8015c8c <__gethex+0x40a>
 8015c1a:	f8d8 2000 	ldr.w	r2, [r8]
 8015c1e:	3a01      	subs	r2, #1
 8015c20:	42b2      	cmp	r2, r6
 8015c22:	d10a      	bne.n	8015c3a <__gethex+0x3b8>
 8015c24:	1171      	asrs	r1, r6, #5
 8015c26:	2201      	movs	r2, #1
 8015c28:	f006 061f 	and.w	r6, r6, #31
 8015c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c30:	fa02 f606 	lsl.w	r6, r2, r6
 8015c34:	421e      	tst	r6, r3
 8015c36:	bf18      	it	ne
 8015c38:	4617      	movne	r7, r2
 8015c3a:	f047 0720 	orr.w	r7, r7, #32
 8015c3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c40:	601d      	str	r5, [r3, #0]
 8015c42:	9b06      	ldr	r3, [sp, #24]
 8015c44:	601c      	str	r4, [r3, #0]
 8015c46:	e6a4      	b.n	8015992 <__gethex+0x110>
 8015c48:	4299      	cmp	r1, r3
 8015c4a:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c4e:	d8d8      	bhi.n	8015c02 <__gethex+0x380>
 8015c50:	68ab      	ldr	r3, [r5, #8]
 8015c52:	4599      	cmp	r9, r3
 8015c54:	db12      	blt.n	8015c7c <__gethex+0x3fa>
 8015c56:	6869      	ldr	r1, [r5, #4]
 8015c58:	9802      	ldr	r0, [sp, #8]
 8015c5a:	3101      	adds	r1, #1
 8015c5c:	f000 f99a 	bl	8015f94 <_Balloc>
 8015c60:	692a      	ldr	r2, [r5, #16]
 8015c62:	3202      	adds	r2, #2
 8015c64:	f105 010c 	add.w	r1, r5, #12
 8015c68:	4683      	mov	fp, r0
 8015c6a:	0092      	lsls	r2, r2, #2
 8015c6c:	300c      	adds	r0, #12
 8015c6e:	f7fc feab 	bl	80129c8 <memcpy>
 8015c72:	4629      	mov	r1, r5
 8015c74:	9802      	ldr	r0, [sp, #8]
 8015c76:	f000 f9c1 	bl	8015ffc <_Bfree>
 8015c7a:	465d      	mov	r5, fp
 8015c7c:	692b      	ldr	r3, [r5, #16]
 8015c7e:	1c5a      	adds	r2, r3, #1
 8015c80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015c84:	612a      	str	r2, [r5, #16]
 8015c86:	2201      	movs	r2, #1
 8015c88:	615a      	str	r2, [r3, #20]
 8015c8a:	e7c2      	b.n	8015c12 <__gethex+0x390>
 8015c8c:	692a      	ldr	r2, [r5, #16]
 8015c8e:	454a      	cmp	r2, r9
 8015c90:	dd0b      	ble.n	8015caa <__gethex+0x428>
 8015c92:	2101      	movs	r1, #1
 8015c94:	4628      	mov	r0, r5
 8015c96:	f7ff fda5 	bl	80157e4 <rshift>
 8015c9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c9e:	3401      	adds	r4, #1
 8015ca0:	42a3      	cmp	r3, r4
 8015ca2:	f6ff aed9 	blt.w	8015a58 <__gethex+0x1d6>
 8015ca6:	2701      	movs	r7, #1
 8015ca8:	e7c7      	b.n	8015c3a <__gethex+0x3b8>
 8015caa:	f016 061f 	ands.w	r6, r6, #31
 8015cae:	d0fa      	beq.n	8015ca6 <__gethex+0x424>
 8015cb0:	449a      	add	sl, r3
 8015cb2:	f1c6 0620 	rsb	r6, r6, #32
 8015cb6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015cba:	f000 fa2f 	bl	801611c <__hi0bits>
 8015cbe:	42b0      	cmp	r0, r6
 8015cc0:	dbe7      	blt.n	8015c92 <__gethex+0x410>
 8015cc2:	e7f0      	b.n	8015ca6 <__gethex+0x424>

08015cc4 <L_shift>:
 8015cc4:	f1c2 0208 	rsb	r2, r2, #8
 8015cc8:	0092      	lsls	r2, r2, #2
 8015cca:	b570      	push	{r4, r5, r6, lr}
 8015ccc:	f1c2 0620 	rsb	r6, r2, #32
 8015cd0:	6843      	ldr	r3, [r0, #4]
 8015cd2:	6804      	ldr	r4, [r0, #0]
 8015cd4:	fa03 f506 	lsl.w	r5, r3, r6
 8015cd8:	432c      	orrs	r4, r5
 8015cda:	40d3      	lsrs	r3, r2
 8015cdc:	6004      	str	r4, [r0, #0]
 8015cde:	f840 3f04 	str.w	r3, [r0, #4]!
 8015ce2:	4288      	cmp	r0, r1
 8015ce4:	d3f4      	bcc.n	8015cd0 <L_shift+0xc>
 8015ce6:	bd70      	pop	{r4, r5, r6, pc}

08015ce8 <__match>:
 8015ce8:	b530      	push	{r4, r5, lr}
 8015cea:	6803      	ldr	r3, [r0, #0]
 8015cec:	3301      	adds	r3, #1
 8015cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cf2:	b914      	cbnz	r4, 8015cfa <__match+0x12>
 8015cf4:	6003      	str	r3, [r0, #0]
 8015cf6:	2001      	movs	r0, #1
 8015cf8:	bd30      	pop	{r4, r5, pc}
 8015cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d02:	2d19      	cmp	r5, #25
 8015d04:	bf98      	it	ls
 8015d06:	3220      	addls	r2, #32
 8015d08:	42a2      	cmp	r2, r4
 8015d0a:	d0f0      	beq.n	8015cee <__match+0x6>
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	e7f3      	b.n	8015cf8 <__match+0x10>

08015d10 <__hexnan>:
 8015d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d14:	680b      	ldr	r3, [r1, #0]
 8015d16:	6801      	ldr	r1, [r0, #0]
 8015d18:	115f      	asrs	r7, r3, #5
 8015d1a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015d1e:	f013 031f 	ands.w	r3, r3, #31
 8015d22:	b087      	sub	sp, #28
 8015d24:	bf18      	it	ne
 8015d26:	3704      	addne	r7, #4
 8015d28:	2500      	movs	r5, #0
 8015d2a:	1f3e      	subs	r6, r7, #4
 8015d2c:	4682      	mov	sl, r0
 8015d2e:	4690      	mov	r8, r2
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	f847 5c04 	str.w	r5, [r7, #-4]
 8015d36:	46b1      	mov	r9, r6
 8015d38:	4634      	mov	r4, r6
 8015d3a:	9502      	str	r5, [sp, #8]
 8015d3c:	46ab      	mov	fp, r5
 8015d3e:	784a      	ldrb	r2, [r1, #1]
 8015d40:	1c4b      	adds	r3, r1, #1
 8015d42:	9303      	str	r3, [sp, #12]
 8015d44:	b342      	cbz	r2, 8015d98 <__hexnan+0x88>
 8015d46:	4610      	mov	r0, r2
 8015d48:	9105      	str	r1, [sp, #20]
 8015d4a:	9204      	str	r2, [sp, #16]
 8015d4c:	f7ff fd84 	bl	8015858 <__hexdig_fun>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d143      	bne.n	8015ddc <__hexnan+0xcc>
 8015d54:	9a04      	ldr	r2, [sp, #16]
 8015d56:	9905      	ldr	r1, [sp, #20]
 8015d58:	2a20      	cmp	r2, #32
 8015d5a:	d818      	bhi.n	8015d8e <__hexnan+0x7e>
 8015d5c:	9b02      	ldr	r3, [sp, #8]
 8015d5e:	459b      	cmp	fp, r3
 8015d60:	dd13      	ble.n	8015d8a <__hexnan+0x7a>
 8015d62:	454c      	cmp	r4, r9
 8015d64:	d206      	bcs.n	8015d74 <__hexnan+0x64>
 8015d66:	2d07      	cmp	r5, #7
 8015d68:	dc04      	bgt.n	8015d74 <__hexnan+0x64>
 8015d6a:	462a      	mov	r2, r5
 8015d6c:	4649      	mov	r1, r9
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f7ff ffa8 	bl	8015cc4 <L_shift>
 8015d74:	4544      	cmp	r4, r8
 8015d76:	d944      	bls.n	8015e02 <__hexnan+0xf2>
 8015d78:	2300      	movs	r3, #0
 8015d7a:	f1a4 0904 	sub.w	r9, r4, #4
 8015d7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d82:	f8cd b008 	str.w	fp, [sp, #8]
 8015d86:	464c      	mov	r4, r9
 8015d88:	461d      	mov	r5, r3
 8015d8a:	9903      	ldr	r1, [sp, #12]
 8015d8c:	e7d7      	b.n	8015d3e <__hexnan+0x2e>
 8015d8e:	2a29      	cmp	r2, #41	; 0x29
 8015d90:	d14a      	bne.n	8015e28 <__hexnan+0x118>
 8015d92:	3102      	adds	r1, #2
 8015d94:	f8ca 1000 	str.w	r1, [sl]
 8015d98:	f1bb 0f00 	cmp.w	fp, #0
 8015d9c:	d044      	beq.n	8015e28 <__hexnan+0x118>
 8015d9e:	454c      	cmp	r4, r9
 8015da0:	d206      	bcs.n	8015db0 <__hexnan+0xa0>
 8015da2:	2d07      	cmp	r5, #7
 8015da4:	dc04      	bgt.n	8015db0 <__hexnan+0xa0>
 8015da6:	462a      	mov	r2, r5
 8015da8:	4649      	mov	r1, r9
 8015daa:	4620      	mov	r0, r4
 8015dac:	f7ff ff8a 	bl	8015cc4 <L_shift>
 8015db0:	4544      	cmp	r4, r8
 8015db2:	d928      	bls.n	8015e06 <__hexnan+0xf6>
 8015db4:	4643      	mov	r3, r8
 8015db6:	f854 2b04 	ldr.w	r2, [r4], #4
 8015dba:	f843 2b04 	str.w	r2, [r3], #4
 8015dbe:	42a6      	cmp	r6, r4
 8015dc0:	d2f9      	bcs.n	8015db6 <__hexnan+0xa6>
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	f843 2b04 	str.w	r2, [r3], #4
 8015dc8:	429e      	cmp	r6, r3
 8015dca:	d2fb      	bcs.n	8015dc4 <__hexnan+0xb4>
 8015dcc:	6833      	ldr	r3, [r6, #0]
 8015dce:	b91b      	cbnz	r3, 8015dd8 <__hexnan+0xc8>
 8015dd0:	4546      	cmp	r6, r8
 8015dd2:	d127      	bne.n	8015e24 <__hexnan+0x114>
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	6033      	str	r3, [r6, #0]
 8015dd8:	2005      	movs	r0, #5
 8015dda:	e026      	b.n	8015e2a <__hexnan+0x11a>
 8015ddc:	3501      	adds	r5, #1
 8015dde:	2d08      	cmp	r5, #8
 8015de0:	f10b 0b01 	add.w	fp, fp, #1
 8015de4:	dd06      	ble.n	8015df4 <__hexnan+0xe4>
 8015de6:	4544      	cmp	r4, r8
 8015de8:	d9cf      	bls.n	8015d8a <__hexnan+0x7a>
 8015dea:	2300      	movs	r3, #0
 8015dec:	f844 3c04 	str.w	r3, [r4, #-4]
 8015df0:	2501      	movs	r5, #1
 8015df2:	3c04      	subs	r4, #4
 8015df4:	6822      	ldr	r2, [r4, #0]
 8015df6:	f000 000f 	and.w	r0, r0, #15
 8015dfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015dfe:	6020      	str	r0, [r4, #0]
 8015e00:	e7c3      	b.n	8015d8a <__hexnan+0x7a>
 8015e02:	2508      	movs	r5, #8
 8015e04:	e7c1      	b.n	8015d8a <__hexnan+0x7a>
 8015e06:	9b01      	ldr	r3, [sp, #4]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d0df      	beq.n	8015dcc <__hexnan+0xbc>
 8015e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e10:	f1c3 0320 	rsb	r3, r3, #32
 8015e14:	fa22 f303 	lsr.w	r3, r2, r3
 8015e18:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015e1c:	401a      	ands	r2, r3
 8015e1e:	f847 2c04 	str.w	r2, [r7, #-4]
 8015e22:	e7d3      	b.n	8015dcc <__hexnan+0xbc>
 8015e24:	3e04      	subs	r6, #4
 8015e26:	e7d1      	b.n	8015dcc <__hexnan+0xbc>
 8015e28:	2004      	movs	r0, #4
 8015e2a:	b007      	add	sp, #28
 8015e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e30 <__locale_ctype_ptr_l>:
 8015e30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015e34:	4770      	bx	lr
	...

08015e38 <__locale_ctype_ptr>:
 8015e38:	4b04      	ldr	r3, [pc, #16]	; (8015e4c <__locale_ctype_ptr+0x14>)
 8015e3a:	4a05      	ldr	r2, [pc, #20]	; (8015e50 <__locale_ctype_ptr+0x18>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	6a1b      	ldr	r3, [r3, #32]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	bf08      	it	eq
 8015e44:	4613      	moveq	r3, r2
 8015e46:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015e4a:	4770      	bx	lr
 8015e4c:	2000000c 	.word	0x2000000c
 8015e50:	20000070 	.word	0x20000070

08015e54 <__localeconv_l>:
 8015e54:	30f0      	adds	r0, #240	; 0xf0
 8015e56:	4770      	bx	lr

08015e58 <_localeconv_r>:
 8015e58:	4b04      	ldr	r3, [pc, #16]	; (8015e6c <_localeconv_r+0x14>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	6a18      	ldr	r0, [r3, #32]
 8015e5e:	4b04      	ldr	r3, [pc, #16]	; (8015e70 <_localeconv_r+0x18>)
 8015e60:	2800      	cmp	r0, #0
 8015e62:	bf08      	it	eq
 8015e64:	4618      	moveq	r0, r3
 8015e66:	30f0      	adds	r0, #240	; 0xf0
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	2000000c 	.word	0x2000000c
 8015e70:	20000070 	.word	0x20000070

08015e74 <_lseek_r>:
 8015e74:	b538      	push	{r3, r4, r5, lr}
 8015e76:	4c07      	ldr	r4, [pc, #28]	; (8015e94 <_lseek_r+0x20>)
 8015e78:	4605      	mov	r5, r0
 8015e7a:	4608      	mov	r0, r1
 8015e7c:	4611      	mov	r1, r2
 8015e7e:	2200      	movs	r2, #0
 8015e80:	6022      	str	r2, [r4, #0]
 8015e82:	461a      	mov	r2, r3
 8015e84:	f7ef fcb0 	bl	80057e8 <_lseek>
 8015e88:	1c43      	adds	r3, r0, #1
 8015e8a:	d102      	bne.n	8015e92 <_lseek_r+0x1e>
 8015e8c:	6823      	ldr	r3, [r4, #0]
 8015e8e:	b103      	cbz	r3, 8015e92 <_lseek_r+0x1e>
 8015e90:	602b      	str	r3, [r5, #0]
 8015e92:	bd38      	pop	{r3, r4, r5, pc}
 8015e94:	2002faf4 	.word	0x2002faf4

08015e98 <__swhatbuf_r>:
 8015e98:	b570      	push	{r4, r5, r6, lr}
 8015e9a:	460e      	mov	r6, r1
 8015e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ea0:	2900      	cmp	r1, #0
 8015ea2:	b096      	sub	sp, #88	; 0x58
 8015ea4:	4614      	mov	r4, r2
 8015ea6:	461d      	mov	r5, r3
 8015ea8:	da07      	bge.n	8015eba <__swhatbuf_r+0x22>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	602b      	str	r3, [r5, #0]
 8015eae:	89b3      	ldrh	r3, [r6, #12]
 8015eb0:	061a      	lsls	r2, r3, #24
 8015eb2:	d410      	bmi.n	8015ed6 <__swhatbuf_r+0x3e>
 8015eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015eb8:	e00e      	b.n	8015ed8 <__swhatbuf_r+0x40>
 8015eba:	466a      	mov	r2, sp
 8015ebc:	f001 fbee 	bl	801769c <_fstat_r>
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	dbf2      	blt.n	8015eaa <__swhatbuf_r+0x12>
 8015ec4:	9a01      	ldr	r2, [sp, #4]
 8015ec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015eca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ece:	425a      	negs	r2, r3
 8015ed0:	415a      	adcs	r2, r3
 8015ed2:	602a      	str	r2, [r5, #0]
 8015ed4:	e7ee      	b.n	8015eb4 <__swhatbuf_r+0x1c>
 8015ed6:	2340      	movs	r3, #64	; 0x40
 8015ed8:	2000      	movs	r0, #0
 8015eda:	6023      	str	r3, [r4, #0]
 8015edc:	b016      	add	sp, #88	; 0x58
 8015ede:	bd70      	pop	{r4, r5, r6, pc}

08015ee0 <__smakebuf_r>:
 8015ee0:	898b      	ldrh	r3, [r1, #12]
 8015ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ee4:	079d      	lsls	r5, r3, #30
 8015ee6:	4606      	mov	r6, r0
 8015ee8:	460c      	mov	r4, r1
 8015eea:	d507      	bpl.n	8015efc <__smakebuf_r+0x1c>
 8015eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ef0:	6023      	str	r3, [r4, #0]
 8015ef2:	6123      	str	r3, [r4, #16]
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	6163      	str	r3, [r4, #20]
 8015ef8:	b002      	add	sp, #8
 8015efa:	bd70      	pop	{r4, r5, r6, pc}
 8015efc:	ab01      	add	r3, sp, #4
 8015efe:	466a      	mov	r2, sp
 8015f00:	f7ff ffca 	bl	8015e98 <__swhatbuf_r>
 8015f04:	9900      	ldr	r1, [sp, #0]
 8015f06:	4605      	mov	r5, r0
 8015f08:	4630      	mov	r0, r6
 8015f0a:	f000 fc9f 	bl	801684c <_malloc_r>
 8015f0e:	b948      	cbnz	r0, 8015f24 <__smakebuf_r+0x44>
 8015f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f14:	059a      	lsls	r2, r3, #22
 8015f16:	d4ef      	bmi.n	8015ef8 <__smakebuf_r+0x18>
 8015f18:	f023 0303 	bic.w	r3, r3, #3
 8015f1c:	f043 0302 	orr.w	r3, r3, #2
 8015f20:	81a3      	strh	r3, [r4, #12]
 8015f22:	e7e3      	b.n	8015eec <__smakebuf_r+0xc>
 8015f24:	4b0d      	ldr	r3, [pc, #52]	; (8015f5c <__smakebuf_r+0x7c>)
 8015f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f28:	89a3      	ldrh	r3, [r4, #12]
 8015f2a:	6020      	str	r0, [r4, #0]
 8015f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f30:	81a3      	strh	r3, [r4, #12]
 8015f32:	9b00      	ldr	r3, [sp, #0]
 8015f34:	6163      	str	r3, [r4, #20]
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	6120      	str	r0, [r4, #16]
 8015f3a:	b15b      	cbz	r3, 8015f54 <__smakebuf_r+0x74>
 8015f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f40:	4630      	mov	r0, r6
 8015f42:	f001 fbbd 	bl	80176c0 <_isatty_r>
 8015f46:	b128      	cbz	r0, 8015f54 <__smakebuf_r+0x74>
 8015f48:	89a3      	ldrh	r3, [r4, #12]
 8015f4a:	f023 0303 	bic.w	r3, r3, #3
 8015f4e:	f043 0301 	orr.w	r3, r3, #1
 8015f52:	81a3      	strh	r3, [r4, #12]
 8015f54:	89a3      	ldrh	r3, [r4, #12]
 8015f56:	431d      	orrs	r5, r3
 8015f58:	81a5      	strh	r5, [r4, #12]
 8015f5a:	e7cd      	b.n	8015ef8 <__smakebuf_r+0x18>
 8015f5c:	08015699 	.word	0x08015699

08015f60 <malloc>:
 8015f60:	4b02      	ldr	r3, [pc, #8]	; (8015f6c <malloc+0xc>)
 8015f62:	4601      	mov	r1, r0
 8015f64:	6818      	ldr	r0, [r3, #0]
 8015f66:	f000 bc71 	b.w	801684c <_malloc_r>
 8015f6a:	bf00      	nop
 8015f6c:	2000000c 	.word	0x2000000c

08015f70 <__ascii_mbtowc>:
 8015f70:	b082      	sub	sp, #8
 8015f72:	b901      	cbnz	r1, 8015f76 <__ascii_mbtowc+0x6>
 8015f74:	a901      	add	r1, sp, #4
 8015f76:	b142      	cbz	r2, 8015f8a <__ascii_mbtowc+0x1a>
 8015f78:	b14b      	cbz	r3, 8015f8e <__ascii_mbtowc+0x1e>
 8015f7a:	7813      	ldrb	r3, [r2, #0]
 8015f7c:	600b      	str	r3, [r1, #0]
 8015f7e:	7812      	ldrb	r2, [r2, #0]
 8015f80:	1c10      	adds	r0, r2, #0
 8015f82:	bf18      	it	ne
 8015f84:	2001      	movne	r0, #1
 8015f86:	b002      	add	sp, #8
 8015f88:	4770      	bx	lr
 8015f8a:	4610      	mov	r0, r2
 8015f8c:	e7fb      	b.n	8015f86 <__ascii_mbtowc+0x16>
 8015f8e:	f06f 0001 	mvn.w	r0, #1
 8015f92:	e7f8      	b.n	8015f86 <__ascii_mbtowc+0x16>

08015f94 <_Balloc>:
 8015f94:	b570      	push	{r4, r5, r6, lr}
 8015f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015f98:	4604      	mov	r4, r0
 8015f9a:	460e      	mov	r6, r1
 8015f9c:	b93d      	cbnz	r5, 8015fae <_Balloc+0x1a>
 8015f9e:	2010      	movs	r0, #16
 8015fa0:	f7ff ffde 	bl	8015f60 <malloc>
 8015fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8015fa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015faa:	6005      	str	r5, [r0, #0]
 8015fac:	60c5      	str	r5, [r0, #12]
 8015fae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015fb0:	68eb      	ldr	r3, [r5, #12]
 8015fb2:	b183      	cbz	r3, 8015fd6 <_Balloc+0x42>
 8015fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015fbc:	b9b8      	cbnz	r0, 8015fee <_Balloc+0x5a>
 8015fbe:	2101      	movs	r1, #1
 8015fc0:	fa01 f506 	lsl.w	r5, r1, r6
 8015fc4:	1d6a      	adds	r2, r5, #5
 8015fc6:	0092      	lsls	r2, r2, #2
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f000 fbe2 	bl	8016792 <_calloc_r>
 8015fce:	b160      	cbz	r0, 8015fea <_Balloc+0x56>
 8015fd0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015fd4:	e00e      	b.n	8015ff4 <_Balloc+0x60>
 8015fd6:	2221      	movs	r2, #33	; 0x21
 8015fd8:	2104      	movs	r1, #4
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f000 fbd9 	bl	8016792 <_calloc_r>
 8015fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fe2:	60e8      	str	r0, [r5, #12]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d1e4      	bne.n	8015fb4 <_Balloc+0x20>
 8015fea:	2000      	movs	r0, #0
 8015fec:	bd70      	pop	{r4, r5, r6, pc}
 8015fee:	6802      	ldr	r2, [r0, #0]
 8015ff0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015ffa:	e7f7      	b.n	8015fec <_Balloc+0x58>

08015ffc <_Bfree>:
 8015ffc:	b570      	push	{r4, r5, r6, lr}
 8015ffe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016000:	4606      	mov	r6, r0
 8016002:	460d      	mov	r5, r1
 8016004:	b93c      	cbnz	r4, 8016016 <_Bfree+0x1a>
 8016006:	2010      	movs	r0, #16
 8016008:	f7ff ffaa 	bl	8015f60 <malloc>
 801600c:	6270      	str	r0, [r6, #36]	; 0x24
 801600e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016012:	6004      	str	r4, [r0, #0]
 8016014:	60c4      	str	r4, [r0, #12]
 8016016:	b13d      	cbz	r5, 8016028 <_Bfree+0x2c>
 8016018:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801601a:	686a      	ldr	r2, [r5, #4]
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016022:	6029      	str	r1, [r5, #0]
 8016024:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016028:	bd70      	pop	{r4, r5, r6, pc}

0801602a <__multadd>:
 801602a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801602e:	690d      	ldr	r5, [r1, #16]
 8016030:	461f      	mov	r7, r3
 8016032:	4606      	mov	r6, r0
 8016034:	460c      	mov	r4, r1
 8016036:	f101 0c14 	add.w	ip, r1, #20
 801603a:	2300      	movs	r3, #0
 801603c:	f8dc 0000 	ldr.w	r0, [ip]
 8016040:	b281      	uxth	r1, r0
 8016042:	fb02 7101 	mla	r1, r2, r1, r7
 8016046:	0c0f      	lsrs	r7, r1, #16
 8016048:	0c00      	lsrs	r0, r0, #16
 801604a:	fb02 7000 	mla	r0, r2, r0, r7
 801604e:	b289      	uxth	r1, r1
 8016050:	3301      	adds	r3, #1
 8016052:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016056:	429d      	cmp	r5, r3
 8016058:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801605c:	f84c 1b04 	str.w	r1, [ip], #4
 8016060:	dcec      	bgt.n	801603c <__multadd+0x12>
 8016062:	b1d7      	cbz	r7, 801609a <__multadd+0x70>
 8016064:	68a3      	ldr	r3, [r4, #8]
 8016066:	42ab      	cmp	r3, r5
 8016068:	dc12      	bgt.n	8016090 <__multadd+0x66>
 801606a:	6861      	ldr	r1, [r4, #4]
 801606c:	4630      	mov	r0, r6
 801606e:	3101      	adds	r1, #1
 8016070:	f7ff ff90 	bl	8015f94 <_Balloc>
 8016074:	6922      	ldr	r2, [r4, #16]
 8016076:	3202      	adds	r2, #2
 8016078:	f104 010c 	add.w	r1, r4, #12
 801607c:	4680      	mov	r8, r0
 801607e:	0092      	lsls	r2, r2, #2
 8016080:	300c      	adds	r0, #12
 8016082:	f7fc fca1 	bl	80129c8 <memcpy>
 8016086:	4621      	mov	r1, r4
 8016088:	4630      	mov	r0, r6
 801608a:	f7ff ffb7 	bl	8015ffc <_Bfree>
 801608e:	4644      	mov	r4, r8
 8016090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016094:	3501      	adds	r5, #1
 8016096:	615f      	str	r7, [r3, #20]
 8016098:	6125      	str	r5, [r4, #16]
 801609a:	4620      	mov	r0, r4
 801609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160a0 <__s2b>:
 80160a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a4:	460c      	mov	r4, r1
 80160a6:	4615      	mov	r5, r2
 80160a8:	461f      	mov	r7, r3
 80160aa:	2209      	movs	r2, #9
 80160ac:	3308      	adds	r3, #8
 80160ae:	4606      	mov	r6, r0
 80160b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80160b4:	2100      	movs	r1, #0
 80160b6:	2201      	movs	r2, #1
 80160b8:	429a      	cmp	r2, r3
 80160ba:	db20      	blt.n	80160fe <__s2b+0x5e>
 80160bc:	4630      	mov	r0, r6
 80160be:	f7ff ff69 	bl	8015f94 <_Balloc>
 80160c2:	9b08      	ldr	r3, [sp, #32]
 80160c4:	6143      	str	r3, [r0, #20]
 80160c6:	2d09      	cmp	r5, #9
 80160c8:	f04f 0301 	mov.w	r3, #1
 80160cc:	6103      	str	r3, [r0, #16]
 80160ce:	dd19      	ble.n	8016104 <__s2b+0x64>
 80160d0:	f104 0809 	add.w	r8, r4, #9
 80160d4:	46c1      	mov	r9, r8
 80160d6:	442c      	add	r4, r5
 80160d8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80160dc:	4601      	mov	r1, r0
 80160de:	3b30      	subs	r3, #48	; 0x30
 80160e0:	220a      	movs	r2, #10
 80160e2:	4630      	mov	r0, r6
 80160e4:	f7ff ffa1 	bl	801602a <__multadd>
 80160e8:	45a1      	cmp	r9, r4
 80160ea:	d1f5      	bne.n	80160d8 <__s2b+0x38>
 80160ec:	eb08 0405 	add.w	r4, r8, r5
 80160f0:	3c08      	subs	r4, #8
 80160f2:	1b2d      	subs	r5, r5, r4
 80160f4:	1963      	adds	r3, r4, r5
 80160f6:	42bb      	cmp	r3, r7
 80160f8:	db07      	blt.n	801610a <__s2b+0x6a>
 80160fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160fe:	0052      	lsls	r2, r2, #1
 8016100:	3101      	adds	r1, #1
 8016102:	e7d9      	b.n	80160b8 <__s2b+0x18>
 8016104:	340a      	adds	r4, #10
 8016106:	2509      	movs	r5, #9
 8016108:	e7f3      	b.n	80160f2 <__s2b+0x52>
 801610a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801610e:	4601      	mov	r1, r0
 8016110:	3b30      	subs	r3, #48	; 0x30
 8016112:	220a      	movs	r2, #10
 8016114:	4630      	mov	r0, r6
 8016116:	f7ff ff88 	bl	801602a <__multadd>
 801611a:	e7eb      	b.n	80160f4 <__s2b+0x54>

0801611c <__hi0bits>:
 801611c:	0c02      	lsrs	r2, r0, #16
 801611e:	0412      	lsls	r2, r2, #16
 8016120:	4603      	mov	r3, r0
 8016122:	b9b2      	cbnz	r2, 8016152 <__hi0bits+0x36>
 8016124:	0403      	lsls	r3, r0, #16
 8016126:	2010      	movs	r0, #16
 8016128:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801612c:	bf04      	itt	eq
 801612e:	021b      	lsleq	r3, r3, #8
 8016130:	3008      	addeq	r0, #8
 8016132:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016136:	bf04      	itt	eq
 8016138:	011b      	lsleq	r3, r3, #4
 801613a:	3004      	addeq	r0, #4
 801613c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016140:	bf04      	itt	eq
 8016142:	009b      	lsleq	r3, r3, #2
 8016144:	3002      	addeq	r0, #2
 8016146:	2b00      	cmp	r3, #0
 8016148:	db06      	blt.n	8016158 <__hi0bits+0x3c>
 801614a:	005b      	lsls	r3, r3, #1
 801614c:	d503      	bpl.n	8016156 <__hi0bits+0x3a>
 801614e:	3001      	adds	r0, #1
 8016150:	4770      	bx	lr
 8016152:	2000      	movs	r0, #0
 8016154:	e7e8      	b.n	8016128 <__hi0bits+0xc>
 8016156:	2020      	movs	r0, #32
 8016158:	4770      	bx	lr

0801615a <__lo0bits>:
 801615a:	6803      	ldr	r3, [r0, #0]
 801615c:	f013 0207 	ands.w	r2, r3, #7
 8016160:	4601      	mov	r1, r0
 8016162:	d00b      	beq.n	801617c <__lo0bits+0x22>
 8016164:	07da      	lsls	r2, r3, #31
 8016166:	d423      	bmi.n	80161b0 <__lo0bits+0x56>
 8016168:	0798      	lsls	r0, r3, #30
 801616a:	bf49      	itett	mi
 801616c:	085b      	lsrmi	r3, r3, #1
 801616e:	089b      	lsrpl	r3, r3, #2
 8016170:	2001      	movmi	r0, #1
 8016172:	600b      	strmi	r3, [r1, #0]
 8016174:	bf5c      	itt	pl
 8016176:	600b      	strpl	r3, [r1, #0]
 8016178:	2002      	movpl	r0, #2
 801617a:	4770      	bx	lr
 801617c:	b298      	uxth	r0, r3
 801617e:	b9a8      	cbnz	r0, 80161ac <__lo0bits+0x52>
 8016180:	0c1b      	lsrs	r3, r3, #16
 8016182:	2010      	movs	r0, #16
 8016184:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016188:	bf04      	itt	eq
 801618a:	0a1b      	lsreq	r3, r3, #8
 801618c:	3008      	addeq	r0, #8
 801618e:	071a      	lsls	r2, r3, #28
 8016190:	bf04      	itt	eq
 8016192:	091b      	lsreq	r3, r3, #4
 8016194:	3004      	addeq	r0, #4
 8016196:	079a      	lsls	r2, r3, #30
 8016198:	bf04      	itt	eq
 801619a:	089b      	lsreq	r3, r3, #2
 801619c:	3002      	addeq	r0, #2
 801619e:	07da      	lsls	r2, r3, #31
 80161a0:	d402      	bmi.n	80161a8 <__lo0bits+0x4e>
 80161a2:	085b      	lsrs	r3, r3, #1
 80161a4:	d006      	beq.n	80161b4 <__lo0bits+0x5a>
 80161a6:	3001      	adds	r0, #1
 80161a8:	600b      	str	r3, [r1, #0]
 80161aa:	4770      	bx	lr
 80161ac:	4610      	mov	r0, r2
 80161ae:	e7e9      	b.n	8016184 <__lo0bits+0x2a>
 80161b0:	2000      	movs	r0, #0
 80161b2:	4770      	bx	lr
 80161b4:	2020      	movs	r0, #32
 80161b6:	4770      	bx	lr

080161b8 <__i2b>:
 80161b8:	b510      	push	{r4, lr}
 80161ba:	460c      	mov	r4, r1
 80161bc:	2101      	movs	r1, #1
 80161be:	f7ff fee9 	bl	8015f94 <_Balloc>
 80161c2:	2201      	movs	r2, #1
 80161c4:	6144      	str	r4, [r0, #20]
 80161c6:	6102      	str	r2, [r0, #16]
 80161c8:	bd10      	pop	{r4, pc}

080161ca <__multiply>:
 80161ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ce:	4614      	mov	r4, r2
 80161d0:	690a      	ldr	r2, [r1, #16]
 80161d2:	6923      	ldr	r3, [r4, #16]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	bfb8      	it	lt
 80161d8:	460b      	movlt	r3, r1
 80161da:	4688      	mov	r8, r1
 80161dc:	bfbc      	itt	lt
 80161de:	46a0      	movlt	r8, r4
 80161e0:	461c      	movlt	r4, r3
 80161e2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80161e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80161ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80161ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80161f2:	eb07 0609 	add.w	r6, r7, r9
 80161f6:	42b3      	cmp	r3, r6
 80161f8:	bfb8      	it	lt
 80161fa:	3101      	addlt	r1, #1
 80161fc:	f7ff feca 	bl	8015f94 <_Balloc>
 8016200:	f100 0514 	add.w	r5, r0, #20
 8016204:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016208:	462b      	mov	r3, r5
 801620a:	2200      	movs	r2, #0
 801620c:	4573      	cmp	r3, lr
 801620e:	d316      	bcc.n	801623e <__multiply+0x74>
 8016210:	f104 0214 	add.w	r2, r4, #20
 8016214:	f108 0114 	add.w	r1, r8, #20
 8016218:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801621c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016220:	9300      	str	r3, [sp, #0]
 8016222:	9b00      	ldr	r3, [sp, #0]
 8016224:	9201      	str	r2, [sp, #4]
 8016226:	4293      	cmp	r3, r2
 8016228:	d80c      	bhi.n	8016244 <__multiply+0x7a>
 801622a:	2e00      	cmp	r6, #0
 801622c:	dd03      	ble.n	8016236 <__multiply+0x6c>
 801622e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016232:	2b00      	cmp	r3, #0
 8016234:	d05d      	beq.n	80162f2 <__multiply+0x128>
 8016236:	6106      	str	r6, [r0, #16]
 8016238:	b003      	add	sp, #12
 801623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623e:	f843 2b04 	str.w	r2, [r3], #4
 8016242:	e7e3      	b.n	801620c <__multiply+0x42>
 8016244:	f8b2 b000 	ldrh.w	fp, [r2]
 8016248:	f1bb 0f00 	cmp.w	fp, #0
 801624c:	d023      	beq.n	8016296 <__multiply+0xcc>
 801624e:	4689      	mov	r9, r1
 8016250:	46ac      	mov	ip, r5
 8016252:	f04f 0800 	mov.w	r8, #0
 8016256:	f859 4b04 	ldr.w	r4, [r9], #4
 801625a:	f8dc a000 	ldr.w	sl, [ip]
 801625e:	b2a3      	uxth	r3, r4
 8016260:	fa1f fa8a 	uxth.w	sl, sl
 8016264:	fb0b a303 	mla	r3, fp, r3, sl
 8016268:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801626c:	f8dc 4000 	ldr.w	r4, [ip]
 8016270:	4443      	add	r3, r8
 8016272:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016276:	fb0b 840a 	mla	r4, fp, sl, r8
 801627a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801627e:	46e2      	mov	sl, ip
 8016280:	b29b      	uxth	r3, r3
 8016282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016286:	454f      	cmp	r7, r9
 8016288:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801628c:	f84a 3b04 	str.w	r3, [sl], #4
 8016290:	d82b      	bhi.n	80162ea <__multiply+0x120>
 8016292:	f8cc 8004 	str.w	r8, [ip, #4]
 8016296:	9b01      	ldr	r3, [sp, #4]
 8016298:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801629c:	3204      	adds	r2, #4
 801629e:	f1ba 0f00 	cmp.w	sl, #0
 80162a2:	d020      	beq.n	80162e6 <__multiply+0x11c>
 80162a4:	682b      	ldr	r3, [r5, #0]
 80162a6:	4689      	mov	r9, r1
 80162a8:	46a8      	mov	r8, r5
 80162aa:	f04f 0b00 	mov.w	fp, #0
 80162ae:	f8b9 c000 	ldrh.w	ip, [r9]
 80162b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80162b6:	fb0a 440c 	mla	r4, sl, ip, r4
 80162ba:	445c      	add	r4, fp
 80162bc:	46c4      	mov	ip, r8
 80162be:	b29b      	uxth	r3, r3
 80162c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80162c4:	f84c 3b04 	str.w	r3, [ip], #4
 80162c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80162cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80162d0:	0c1b      	lsrs	r3, r3, #16
 80162d2:	fb0a b303 	mla	r3, sl, r3, fp
 80162d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80162da:	454f      	cmp	r7, r9
 80162dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80162e0:	d805      	bhi.n	80162ee <__multiply+0x124>
 80162e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80162e6:	3504      	adds	r5, #4
 80162e8:	e79b      	b.n	8016222 <__multiply+0x58>
 80162ea:	46d4      	mov	ip, sl
 80162ec:	e7b3      	b.n	8016256 <__multiply+0x8c>
 80162ee:	46e0      	mov	r8, ip
 80162f0:	e7dd      	b.n	80162ae <__multiply+0xe4>
 80162f2:	3e01      	subs	r6, #1
 80162f4:	e799      	b.n	801622a <__multiply+0x60>
	...

080162f8 <__pow5mult>:
 80162f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162fc:	4615      	mov	r5, r2
 80162fe:	f012 0203 	ands.w	r2, r2, #3
 8016302:	4606      	mov	r6, r0
 8016304:	460f      	mov	r7, r1
 8016306:	d007      	beq.n	8016318 <__pow5mult+0x20>
 8016308:	3a01      	subs	r2, #1
 801630a:	4c21      	ldr	r4, [pc, #132]	; (8016390 <__pow5mult+0x98>)
 801630c:	2300      	movs	r3, #0
 801630e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016312:	f7ff fe8a 	bl	801602a <__multadd>
 8016316:	4607      	mov	r7, r0
 8016318:	10ad      	asrs	r5, r5, #2
 801631a:	d035      	beq.n	8016388 <__pow5mult+0x90>
 801631c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801631e:	b93c      	cbnz	r4, 8016330 <__pow5mult+0x38>
 8016320:	2010      	movs	r0, #16
 8016322:	f7ff fe1d 	bl	8015f60 <malloc>
 8016326:	6270      	str	r0, [r6, #36]	; 0x24
 8016328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801632c:	6004      	str	r4, [r0, #0]
 801632e:	60c4      	str	r4, [r0, #12]
 8016330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016338:	b94c      	cbnz	r4, 801634e <__pow5mult+0x56>
 801633a:	f240 2171 	movw	r1, #625	; 0x271
 801633e:	4630      	mov	r0, r6
 8016340:	f7ff ff3a 	bl	80161b8 <__i2b>
 8016344:	2300      	movs	r3, #0
 8016346:	f8c8 0008 	str.w	r0, [r8, #8]
 801634a:	4604      	mov	r4, r0
 801634c:	6003      	str	r3, [r0, #0]
 801634e:	f04f 0800 	mov.w	r8, #0
 8016352:	07eb      	lsls	r3, r5, #31
 8016354:	d50a      	bpl.n	801636c <__pow5mult+0x74>
 8016356:	4639      	mov	r1, r7
 8016358:	4622      	mov	r2, r4
 801635a:	4630      	mov	r0, r6
 801635c:	f7ff ff35 	bl	80161ca <__multiply>
 8016360:	4639      	mov	r1, r7
 8016362:	4681      	mov	r9, r0
 8016364:	4630      	mov	r0, r6
 8016366:	f7ff fe49 	bl	8015ffc <_Bfree>
 801636a:	464f      	mov	r7, r9
 801636c:	106d      	asrs	r5, r5, #1
 801636e:	d00b      	beq.n	8016388 <__pow5mult+0x90>
 8016370:	6820      	ldr	r0, [r4, #0]
 8016372:	b938      	cbnz	r0, 8016384 <__pow5mult+0x8c>
 8016374:	4622      	mov	r2, r4
 8016376:	4621      	mov	r1, r4
 8016378:	4630      	mov	r0, r6
 801637a:	f7ff ff26 	bl	80161ca <__multiply>
 801637e:	6020      	str	r0, [r4, #0]
 8016380:	f8c0 8000 	str.w	r8, [r0]
 8016384:	4604      	mov	r4, r0
 8016386:	e7e4      	b.n	8016352 <__pow5mult+0x5a>
 8016388:	4638      	mov	r0, r7
 801638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801638e:	bf00      	nop
 8016390:	08018090 	.word	0x08018090

08016394 <__lshift>:
 8016394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016398:	460c      	mov	r4, r1
 801639a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801639e:	6923      	ldr	r3, [r4, #16]
 80163a0:	6849      	ldr	r1, [r1, #4]
 80163a2:	eb0a 0903 	add.w	r9, sl, r3
 80163a6:	68a3      	ldr	r3, [r4, #8]
 80163a8:	4607      	mov	r7, r0
 80163aa:	4616      	mov	r6, r2
 80163ac:	f109 0501 	add.w	r5, r9, #1
 80163b0:	42ab      	cmp	r3, r5
 80163b2:	db32      	blt.n	801641a <__lshift+0x86>
 80163b4:	4638      	mov	r0, r7
 80163b6:	f7ff fded 	bl	8015f94 <_Balloc>
 80163ba:	2300      	movs	r3, #0
 80163bc:	4680      	mov	r8, r0
 80163be:	f100 0114 	add.w	r1, r0, #20
 80163c2:	461a      	mov	r2, r3
 80163c4:	4553      	cmp	r3, sl
 80163c6:	db2b      	blt.n	8016420 <__lshift+0x8c>
 80163c8:	6920      	ldr	r0, [r4, #16]
 80163ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80163ce:	f104 0314 	add.w	r3, r4, #20
 80163d2:	f016 021f 	ands.w	r2, r6, #31
 80163d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80163da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80163de:	d025      	beq.n	801642c <__lshift+0x98>
 80163e0:	f1c2 0e20 	rsb	lr, r2, #32
 80163e4:	2000      	movs	r0, #0
 80163e6:	681e      	ldr	r6, [r3, #0]
 80163e8:	468a      	mov	sl, r1
 80163ea:	4096      	lsls	r6, r2
 80163ec:	4330      	orrs	r0, r6
 80163ee:	f84a 0b04 	str.w	r0, [sl], #4
 80163f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80163f6:	459c      	cmp	ip, r3
 80163f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80163fc:	d814      	bhi.n	8016428 <__lshift+0x94>
 80163fe:	6048      	str	r0, [r1, #4]
 8016400:	b108      	cbz	r0, 8016406 <__lshift+0x72>
 8016402:	f109 0502 	add.w	r5, r9, #2
 8016406:	3d01      	subs	r5, #1
 8016408:	4638      	mov	r0, r7
 801640a:	f8c8 5010 	str.w	r5, [r8, #16]
 801640e:	4621      	mov	r1, r4
 8016410:	f7ff fdf4 	bl	8015ffc <_Bfree>
 8016414:	4640      	mov	r0, r8
 8016416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801641a:	3101      	adds	r1, #1
 801641c:	005b      	lsls	r3, r3, #1
 801641e:	e7c7      	b.n	80163b0 <__lshift+0x1c>
 8016420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016424:	3301      	adds	r3, #1
 8016426:	e7cd      	b.n	80163c4 <__lshift+0x30>
 8016428:	4651      	mov	r1, sl
 801642a:	e7dc      	b.n	80163e6 <__lshift+0x52>
 801642c:	3904      	subs	r1, #4
 801642e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016432:	f841 2f04 	str.w	r2, [r1, #4]!
 8016436:	459c      	cmp	ip, r3
 8016438:	d8f9      	bhi.n	801642e <__lshift+0x9a>
 801643a:	e7e4      	b.n	8016406 <__lshift+0x72>

0801643c <__mcmp>:
 801643c:	6903      	ldr	r3, [r0, #16]
 801643e:	690a      	ldr	r2, [r1, #16]
 8016440:	1a9b      	subs	r3, r3, r2
 8016442:	b530      	push	{r4, r5, lr}
 8016444:	d10c      	bne.n	8016460 <__mcmp+0x24>
 8016446:	0092      	lsls	r2, r2, #2
 8016448:	3014      	adds	r0, #20
 801644a:	3114      	adds	r1, #20
 801644c:	1884      	adds	r4, r0, r2
 801644e:	4411      	add	r1, r2
 8016450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016458:	4295      	cmp	r5, r2
 801645a:	d003      	beq.n	8016464 <__mcmp+0x28>
 801645c:	d305      	bcc.n	801646a <__mcmp+0x2e>
 801645e:	2301      	movs	r3, #1
 8016460:	4618      	mov	r0, r3
 8016462:	bd30      	pop	{r4, r5, pc}
 8016464:	42a0      	cmp	r0, r4
 8016466:	d3f3      	bcc.n	8016450 <__mcmp+0x14>
 8016468:	e7fa      	b.n	8016460 <__mcmp+0x24>
 801646a:	f04f 33ff 	mov.w	r3, #4294967295
 801646e:	e7f7      	b.n	8016460 <__mcmp+0x24>

08016470 <__mdiff>:
 8016470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016474:	460d      	mov	r5, r1
 8016476:	4607      	mov	r7, r0
 8016478:	4611      	mov	r1, r2
 801647a:	4628      	mov	r0, r5
 801647c:	4614      	mov	r4, r2
 801647e:	f7ff ffdd 	bl	801643c <__mcmp>
 8016482:	1e06      	subs	r6, r0, #0
 8016484:	d108      	bne.n	8016498 <__mdiff+0x28>
 8016486:	4631      	mov	r1, r6
 8016488:	4638      	mov	r0, r7
 801648a:	f7ff fd83 	bl	8015f94 <_Balloc>
 801648e:	2301      	movs	r3, #1
 8016490:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016498:	bfa4      	itt	ge
 801649a:	4623      	movge	r3, r4
 801649c:	462c      	movge	r4, r5
 801649e:	4638      	mov	r0, r7
 80164a0:	6861      	ldr	r1, [r4, #4]
 80164a2:	bfa6      	itte	ge
 80164a4:	461d      	movge	r5, r3
 80164a6:	2600      	movge	r6, #0
 80164a8:	2601      	movlt	r6, #1
 80164aa:	f7ff fd73 	bl	8015f94 <_Balloc>
 80164ae:	692b      	ldr	r3, [r5, #16]
 80164b0:	60c6      	str	r6, [r0, #12]
 80164b2:	6926      	ldr	r6, [r4, #16]
 80164b4:	f105 0914 	add.w	r9, r5, #20
 80164b8:	f104 0214 	add.w	r2, r4, #20
 80164bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80164c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80164c4:	f100 0514 	add.w	r5, r0, #20
 80164c8:	f04f 0e00 	mov.w	lr, #0
 80164cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80164d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80164d4:	fa1e f18a 	uxtah	r1, lr, sl
 80164d8:	b2a3      	uxth	r3, r4
 80164da:	1ac9      	subs	r1, r1, r3
 80164dc:	0c23      	lsrs	r3, r4, #16
 80164de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80164e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80164e6:	b289      	uxth	r1, r1
 80164e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80164ec:	45c8      	cmp	r8, r9
 80164ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80164f2:	4694      	mov	ip, r2
 80164f4:	f845 3b04 	str.w	r3, [r5], #4
 80164f8:	d8e8      	bhi.n	80164cc <__mdiff+0x5c>
 80164fa:	45bc      	cmp	ip, r7
 80164fc:	d304      	bcc.n	8016508 <__mdiff+0x98>
 80164fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016502:	b183      	cbz	r3, 8016526 <__mdiff+0xb6>
 8016504:	6106      	str	r6, [r0, #16]
 8016506:	e7c5      	b.n	8016494 <__mdiff+0x24>
 8016508:	f85c 1b04 	ldr.w	r1, [ip], #4
 801650c:	fa1e f381 	uxtah	r3, lr, r1
 8016510:	141a      	asrs	r2, r3, #16
 8016512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016516:	b29b      	uxth	r3, r3
 8016518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801651c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016520:	f845 3b04 	str.w	r3, [r5], #4
 8016524:	e7e9      	b.n	80164fa <__mdiff+0x8a>
 8016526:	3e01      	subs	r6, #1
 8016528:	e7e9      	b.n	80164fe <__mdiff+0x8e>
	...

0801652c <__ulp>:
 801652c:	4b12      	ldr	r3, [pc, #72]	; (8016578 <__ulp+0x4c>)
 801652e:	ee10 2a90 	vmov	r2, s1
 8016532:	401a      	ands	r2, r3
 8016534:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016538:	2b00      	cmp	r3, #0
 801653a:	dd04      	ble.n	8016546 <__ulp+0x1a>
 801653c:	2000      	movs	r0, #0
 801653e:	4619      	mov	r1, r3
 8016540:	ec41 0b10 	vmov	d0, r0, r1
 8016544:	4770      	bx	lr
 8016546:	425b      	negs	r3, r3
 8016548:	151b      	asrs	r3, r3, #20
 801654a:	2b13      	cmp	r3, #19
 801654c:	f04f 0000 	mov.w	r0, #0
 8016550:	f04f 0100 	mov.w	r1, #0
 8016554:	dc04      	bgt.n	8016560 <__ulp+0x34>
 8016556:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801655a:	fa42 f103 	asr.w	r1, r2, r3
 801655e:	e7ef      	b.n	8016540 <__ulp+0x14>
 8016560:	3b14      	subs	r3, #20
 8016562:	2b1e      	cmp	r3, #30
 8016564:	f04f 0201 	mov.w	r2, #1
 8016568:	bfda      	itte	le
 801656a:	f1c3 031f 	rsble	r3, r3, #31
 801656e:	fa02 f303 	lslle.w	r3, r2, r3
 8016572:	4613      	movgt	r3, r2
 8016574:	4618      	mov	r0, r3
 8016576:	e7e3      	b.n	8016540 <__ulp+0x14>
 8016578:	7ff00000 	.word	0x7ff00000

0801657c <__b2d>:
 801657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801657e:	6905      	ldr	r5, [r0, #16]
 8016580:	f100 0714 	add.w	r7, r0, #20
 8016584:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016588:	1f2e      	subs	r6, r5, #4
 801658a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801658e:	4620      	mov	r0, r4
 8016590:	f7ff fdc4 	bl	801611c <__hi0bits>
 8016594:	f1c0 0320 	rsb	r3, r0, #32
 8016598:	280a      	cmp	r0, #10
 801659a:	600b      	str	r3, [r1, #0]
 801659c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016614 <__b2d+0x98>
 80165a0:	dc14      	bgt.n	80165cc <__b2d+0x50>
 80165a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80165a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80165aa:	42b7      	cmp	r7, r6
 80165ac:	ea41 030c 	orr.w	r3, r1, ip
 80165b0:	bf34      	ite	cc
 80165b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80165b6:	2100      	movcs	r1, #0
 80165b8:	3015      	adds	r0, #21
 80165ba:	fa04 f000 	lsl.w	r0, r4, r0
 80165be:	fa21 f10e 	lsr.w	r1, r1, lr
 80165c2:	ea40 0201 	orr.w	r2, r0, r1
 80165c6:	ec43 2b10 	vmov	d0, r2, r3
 80165ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165cc:	42b7      	cmp	r7, r6
 80165ce:	bf3a      	itte	cc
 80165d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80165d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80165d8:	2100      	movcs	r1, #0
 80165da:	380b      	subs	r0, #11
 80165dc:	d015      	beq.n	801660a <__b2d+0x8e>
 80165de:	4084      	lsls	r4, r0
 80165e0:	f1c0 0520 	rsb	r5, r0, #32
 80165e4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80165e8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80165ec:	42be      	cmp	r6, r7
 80165ee:	fa21 fc05 	lsr.w	ip, r1, r5
 80165f2:	ea44 030c 	orr.w	r3, r4, ip
 80165f6:	bf8c      	ite	hi
 80165f8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80165fc:	2400      	movls	r4, #0
 80165fe:	fa01 f000 	lsl.w	r0, r1, r0
 8016602:	40ec      	lsrs	r4, r5
 8016604:	ea40 0204 	orr.w	r2, r0, r4
 8016608:	e7dd      	b.n	80165c6 <__b2d+0x4a>
 801660a:	ea44 030c 	orr.w	r3, r4, ip
 801660e:	460a      	mov	r2, r1
 8016610:	e7d9      	b.n	80165c6 <__b2d+0x4a>
 8016612:	bf00      	nop
 8016614:	3ff00000 	.word	0x3ff00000

08016618 <__d2b>:
 8016618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801661c:	460e      	mov	r6, r1
 801661e:	2101      	movs	r1, #1
 8016620:	ec59 8b10 	vmov	r8, r9, d0
 8016624:	4615      	mov	r5, r2
 8016626:	f7ff fcb5 	bl	8015f94 <_Balloc>
 801662a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801662e:	4607      	mov	r7, r0
 8016630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016634:	bb34      	cbnz	r4, 8016684 <__d2b+0x6c>
 8016636:	9301      	str	r3, [sp, #4]
 8016638:	f1b8 0300 	subs.w	r3, r8, #0
 801663c:	d027      	beq.n	801668e <__d2b+0x76>
 801663e:	a802      	add	r0, sp, #8
 8016640:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016644:	f7ff fd89 	bl	801615a <__lo0bits>
 8016648:	9900      	ldr	r1, [sp, #0]
 801664a:	b1f0      	cbz	r0, 801668a <__d2b+0x72>
 801664c:	9a01      	ldr	r2, [sp, #4]
 801664e:	f1c0 0320 	rsb	r3, r0, #32
 8016652:	fa02 f303 	lsl.w	r3, r2, r3
 8016656:	430b      	orrs	r3, r1
 8016658:	40c2      	lsrs	r2, r0
 801665a:	617b      	str	r3, [r7, #20]
 801665c:	9201      	str	r2, [sp, #4]
 801665e:	9b01      	ldr	r3, [sp, #4]
 8016660:	61bb      	str	r3, [r7, #24]
 8016662:	2b00      	cmp	r3, #0
 8016664:	bf14      	ite	ne
 8016666:	2102      	movne	r1, #2
 8016668:	2101      	moveq	r1, #1
 801666a:	6139      	str	r1, [r7, #16]
 801666c:	b1c4      	cbz	r4, 80166a0 <__d2b+0x88>
 801666e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016672:	4404      	add	r4, r0
 8016674:	6034      	str	r4, [r6, #0]
 8016676:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801667a:	6028      	str	r0, [r5, #0]
 801667c:	4638      	mov	r0, r7
 801667e:	b003      	add	sp, #12
 8016680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016688:	e7d5      	b.n	8016636 <__d2b+0x1e>
 801668a:	6179      	str	r1, [r7, #20]
 801668c:	e7e7      	b.n	801665e <__d2b+0x46>
 801668e:	a801      	add	r0, sp, #4
 8016690:	f7ff fd63 	bl	801615a <__lo0bits>
 8016694:	9b01      	ldr	r3, [sp, #4]
 8016696:	617b      	str	r3, [r7, #20]
 8016698:	2101      	movs	r1, #1
 801669a:	6139      	str	r1, [r7, #16]
 801669c:	3020      	adds	r0, #32
 801669e:	e7e5      	b.n	801666c <__d2b+0x54>
 80166a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80166a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80166a8:	6030      	str	r0, [r6, #0]
 80166aa:	6918      	ldr	r0, [r3, #16]
 80166ac:	f7ff fd36 	bl	801611c <__hi0bits>
 80166b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80166b4:	e7e1      	b.n	801667a <__d2b+0x62>

080166b6 <__ratio>:
 80166b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ba:	4688      	mov	r8, r1
 80166bc:	4669      	mov	r1, sp
 80166be:	4681      	mov	r9, r0
 80166c0:	f7ff ff5c 	bl	801657c <__b2d>
 80166c4:	a901      	add	r1, sp, #4
 80166c6:	4640      	mov	r0, r8
 80166c8:	ec57 6b10 	vmov	r6, r7, d0
 80166cc:	f7ff ff56 	bl	801657c <__b2d>
 80166d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80166d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80166d8:	eba3 0c02 	sub.w	ip, r3, r2
 80166dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80166e0:	1a9b      	subs	r3, r3, r2
 80166e2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80166e6:	ec5b ab10 	vmov	sl, fp, d0
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	bfce      	itee	gt
 80166ee:	463a      	movgt	r2, r7
 80166f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80166f4:	465a      	movle	r2, fp
 80166f6:	4659      	mov	r1, fp
 80166f8:	463d      	mov	r5, r7
 80166fa:	bfd4      	ite	le
 80166fc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016700:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016704:	4630      	mov	r0, r6
 8016706:	ee10 2a10 	vmov	r2, s0
 801670a:	460b      	mov	r3, r1
 801670c:	4629      	mov	r1, r5
 801670e:	f7ea f8b5 	bl	800087c <__aeabi_ddiv>
 8016712:	ec41 0b10 	vmov	d0, r0, r1
 8016716:	b003      	add	sp, #12
 8016718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801671c <__copybits>:
 801671c:	3901      	subs	r1, #1
 801671e:	b510      	push	{r4, lr}
 8016720:	1149      	asrs	r1, r1, #5
 8016722:	6914      	ldr	r4, [r2, #16]
 8016724:	3101      	adds	r1, #1
 8016726:	f102 0314 	add.w	r3, r2, #20
 801672a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801672e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016732:	42a3      	cmp	r3, r4
 8016734:	4602      	mov	r2, r0
 8016736:	d303      	bcc.n	8016740 <__copybits+0x24>
 8016738:	2300      	movs	r3, #0
 801673a:	428a      	cmp	r2, r1
 801673c:	d305      	bcc.n	801674a <__copybits+0x2e>
 801673e:	bd10      	pop	{r4, pc}
 8016740:	f853 2b04 	ldr.w	r2, [r3], #4
 8016744:	f840 2b04 	str.w	r2, [r0], #4
 8016748:	e7f3      	b.n	8016732 <__copybits+0x16>
 801674a:	f842 3b04 	str.w	r3, [r2], #4
 801674e:	e7f4      	b.n	801673a <__copybits+0x1e>

08016750 <__any_on>:
 8016750:	f100 0214 	add.w	r2, r0, #20
 8016754:	6900      	ldr	r0, [r0, #16]
 8016756:	114b      	asrs	r3, r1, #5
 8016758:	4298      	cmp	r0, r3
 801675a:	b510      	push	{r4, lr}
 801675c:	db11      	blt.n	8016782 <__any_on+0x32>
 801675e:	dd0a      	ble.n	8016776 <__any_on+0x26>
 8016760:	f011 011f 	ands.w	r1, r1, #31
 8016764:	d007      	beq.n	8016776 <__any_on+0x26>
 8016766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801676a:	fa24 f001 	lsr.w	r0, r4, r1
 801676e:	fa00 f101 	lsl.w	r1, r0, r1
 8016772:	428c      	cmp	r4, r1
 8016774:	d10b      	bne.n	801678e <__any_on+0x3e>
 8016776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801677a:	4293      	cmp	r3, r2
 801677c:	d803      	bhi.n	8016786 <__any_on+0x36>
 801677e:	2000      	movs	r0, #0
 8016780:	bd10      	pop	{r4, pc}
 8016782:	4603      	mov	r3, r0
 8016784:	e7f7      	b.n	8016776 <__any_on+0x26>
 8016786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801678a:	2900      	cmp	r1, #0
 801678c:	d0f5      	beq.n	801677a <__any_on+0x2a>
 801678e:	2001      	movs	r0, #1
 8016790:	e7f6      	b.n	8016780 <__any_on+0x30>

08016792 <_calloc_r>:
 8016792:	b538      	push	{r3, r4, r5, lr}
 8016794:	fb02 f401 	mul.w	r4, r2, r1
 8016798:	4621      	mov	r1, r4
 801679a:	f000 f857 	bl	801684c <_malloc_r>
 801679e:	4605      	mov	r5, r0
 80167a0:	b118      	cbz	r0, 80167aa <_calloc_r+0x18>
 80167a2:	4622      	mov	r2, r4
 80167a4:	2100      	movs	r1, #0
 80167a6:	f7fc f91a 	bl	80129de <memset>
 80167aa:	4628      	mov	r0, r5
 80167ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080167b0 <_free_r>:
 80167b0:	b538      	push	{r3, r4, r5, lr}
 80167b2:	4605      	mov	r5, r0
 80167b4:	2900      	cmp	r1, #0
 80167b6:	d045      	beq.n	8016844 <_free_r+0x94>
 80167b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167bc:	1f0c      	subs	r4, r1, #4
 80167be:	2b00      	cmp	r3, #0
 80167c0:	bfb8      	it	lt
 80167c2:	18e4      	addlt	r4, r4, r3
 80167c4:	f000 ffa5 	bl	8017712 <__malloc_lock>
 80167c8:	4a1f      	ldr	r2, [pc, #124]	; (8016848 <_free_r+0x98>)
 80167ca:	6813      	ldr	r3, [r2, #0]
 80167cc:	4610      	mov	r0, r2
 80167ce:	b933      	cbnz	r3, 80167de <_free_r+0x2e>
 80167d0:	6063      	str	r3, [r4, #4]
 80167d2:	6014      	str	r4, [r2, #0]
 80167d4:	4628      	mov	r0, r5
 80167d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167da:	f000 bf9b 	b.w	8017714 <__malloc_unlock>
 80167de:	42a3      	cmp	r3, r4
 80167e0:	d90c      	bls.n	80167fc <_free_r+0x4c>
 80167e2:	6821      	ldr	r1, [r4, #0]
 80167e4:	1862      	adds	r2, r4, r1
 80167e6:	4293      	cmp	r3, r2
 80167e8:	bf04      	itt	eq
 80167ea:	681a      	ldreq	r2, [r3, #0]
 80167ec:	685b      	ldreq	r3, [r3, #4]
 80167ee:	6063      	str	r3, [r4, #4]
 80167f0:	bf04      	itt	eq
 80167f2:	1852      	addeq	r2, r2, r1
 80167f4:	6022      	streq	r2, [r4, #0]
 80167f6:	6004      	str	r4, [r0, #0]
 80167f8:	e7ec      	b.n	80167d4 <_free_r+0x24>
 80167fa:	4613      	mov	r3, r2
 80167fc:	685a      	ldr	r2, [r3, #4]
 80167fe:	b10a      	cbz	r2, 8016804 <_free_r+0x54>
 8016800:	42a2      	cmp	r2, r4
 8016802:	d9fa      	bls.n	80167fa <_free_r+0x4a>
 8016804:	6819      	ldr	r1, [r3, #0]
 8016806:	1858      	adds	r0, r3, r1
 8016808:	42a0      	cmp	r0, r4
 801680a:	d10b      	bne.n	8016824 <_free_r+0x74>
 801680c:	6820      	ldr	r0, [r4, #0]
 801680e:	4401      	add	r1, r0
 8016810:	1858      	adds	r0, r3, r1
 8016812:	4282      	cmp	r2, r0
 8016814:	6019      	str	r1, [r3, #0]
 8016816:	d1dd      	bne.n	80167d4 <_free_r+0x24>
 8016818:	6810      	ldr	r0, [r2, #0]
 801681a:	6852      	ldr	r2, [r2, #4]
 801681c:	605a      	str	r2, [r3, #4]
 801681e:	4401      	add	r1, r0
 8016820:	6019      	str	r1, [r3, #0]
 8016822:	e7d7      	b.n	80167d4 <_free_r+0x24>
 8016824:	d902      	bls.n	801682c <_free_r+0x7c>
 8016826:	230c      	movs	r3, #12
 8016828:	602b      	str	r3, [r5, #0]
 801682a:	e7d3      	b.n	80167d4 <_free_r+0x24>
 801682c:	6820      	ldr	r0, [r4, #0]
 801682e:	1821      	adds	r1, r4, r0
 8016830:	428a      	cmp	r2, r1
 8016832:	bf04      	itt	eq
 8016834:	6811      	ldreq	r1, [r2, #0]
 8016836:	6852      	ldreq	r2, [r2, #4]
 8016838:	6062      	str	r2, [r4, #4]
 801683a:	bf04      	itt	eq
 801683c:	1809      	addeq	r1, r1, r0
 801683e:	6021      	streq	r1, [r4, #0]
 8016840:	605c      	str	r4, [r3, #4]
 8016842:	e7c7      	b.n	80167d4 <_free_r+0x24>
 8016844:	bd38      	pop	{r3, r4, r5, pc}
 8016846:	bf00      	nop
 8016848:	2002b158 	.word	0x2002b158

0801684c <_malloc_r>:
 801684c:	b570      	push	{r4, r5, r6, lr}
 801684e:	1ccd      	adds	r5, r1, #3
 8016850:	f025 0503 	bic.w	r5, r5, #3
 8016854:	3508      	adds	r5, #8
 8016856:	2d0c      	cmp	r5, #12
 8016858:	bf38      	it	cc
 801685a:	250c      	movcc	r5, #12
 801685c:	2d00      	cmp	r5, #0
 801685e:	4606      	mov	r6, r0
 8016860:	db01      	blt.n	8016866 <_malloc_r+0x1a>
 8016862:	42a9      	cmp	r1, r5
 8016864:	d903      	bls.n	801686e <_malloc_r+0x22>
 8016866:	230c      	movs	r3, #12
 8016868:	6033      	str	r3, [r6, #0]
 801686a:	2000      	movs	r0, #0
 801686c:	bd70      	pop	{r4, r5, r6, pc}
 801686e:	f000 ff50 	bl	8017712 <__malloc_lock>
 8016872:	4a21      	ldr	r2, [pc, #132]	; (80168f8 <_malloc_r+0xac>)
 8016874:	6814      	ldr	r4, [r2, #0]
 8016876:	4621      	mov	r1, r4
 8016878:	b991      	cbnz	r1, 80168a0 <_malloc_r+0x54>
 801687a:	4c20      	ldr	r4, [pc, #128]	; (80168fc <_malloc_r+0xb0>)
 801687c:	6823      	ldr	r3, [r4, #0]
 801687e:	b91b      	cbnz	r3, 8016888 <_malloc_r+0x3c>
 8016880:	4630      	mov	r0, r6
 8016882:	f000 fde3 	bl	801744c <_sbrk_r>
 8016886:	6020      	str	r0, [r4, #0]
 8016888:	4629      	mov	r1, r5
 801688a:	4630      	mov	r0, r6
 801688c:	f000 fdde 	bl	801744c <_sbrk_r>
 8016890:	1c43      	adds	r3, r0, #1
 8016892:	d124      	bne.n	80168de <_malloc_r+0x92>
 8016894:	230c      	movs	r3, #12
 8016896:	6033      	str	r3, [r6, #0]
 8016898:	4630      	mov	r0, r6
 801689a:	f000 ff3b 	bl	8017714 <__malloc_unlock>
 801689e:	e7e4      	b.n	801686a <_malloc_r+0x1e>
 80168a0:	680b      	ldr	r3, [r1, #0]
 80168a2:	1b5b      	subs	r3, r3, r5
 80168a4:	d418      	bmi.n	80168d8 <_malloc_r+0x8c>
 80168a6:	2b0b      	cmp	r3, #11
 80168a8:	d90f      	bls.n	80168ca <_malloc_r+0x7e>
 80168aa:	600b      	str	r3, [r1, #0]
 80168ac:	50cd      	str	r5, [r1, r3]
 80168ae:	18cc      	adds	r4, r1, r3
 80168b0:	4630      	mov	r0, r6
 80168b2:	f000 ff2f 	bl	8017714 <__malloc_unlock>
 80168b6:	f104 000b 	add.w	r0, r4, #11
 80168ba:	1d23      	adds	r3, r4, #4
 80168bc:	f020 0007 	bic.w	r0, r0, #7
 80168c0:	1ac3      	subs	r3, r0, r3
 80168c2:	d0d3      	beq.n	801686c <_malloc_r+0x20>
 80168c4:	425a      	negs	r2, r3
 80168c6:	50e2      	str	r2, [r4, r3]
 80168c8:	e7d0      	b.n	801686c <_malloc_r+0x20>
 80168ca:	428c      	cmp	r4, r1
 80168cc:	684b      	ldr	r3, [r1, #4]
 80168ce:	bf16      	itet	ne
 80168d0:	6063      	strne	r3, [r4, #4]
 80168d2:	6013      	streq	r3, [r2, #0]
 80168d4:	460c      	movne	r4, r1
 80168d6:	e7eb      	b.n	80168b0 <_malloc_r+0x64>
 80168d8:	460c      	mov	r4, r1
 80168da:	6849      	ldr	r1, [r1, #4]
 80168dc:	e7cc      	b.n	8016878 <_malloc_r+0x2c>
 80168de:	1cc4      	adds	r4, r0, #3
 80168e0:	f024 0403 	bic.w	r4, r4, #3
 80168e4:	42a0      	cmp	r0, r4
 80168e6:	d005      	beq.n	80168f4 <_malloc_r+0xa8>
 80168e8:	1a21      	subs	r1, r4, r0
 80168ea:	4630      	mov	r0, r6
 80168ec:	f000 fdae 	bl	801744c <_sbrk_r>
 80168f0:	3001      	adds	r0, #1
 80168f2:	d0cf      	beq.n	8016894 <_malloc_r+0x48>
 80168f4:	6025      	str	r5, [r4, #0]
 80168f6:	e7db      	b.n	80168b0 <_malloc_r+0x64>
 80168f8:	2002b158 	.word	0x2002b158
 80168fc:	2002b15c 	.word	0x2002b15c

08016900 <__ssputs_r>:
 8016900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016904:	688e      	ldr	r6, [r1, #8]
 8016906:	429e      	cmp	r6, r3
 8016908:	4682      	mov	sl, r0
 801690a:	460c      	mov	r4, r1
 801690c:	4690      	mov	r8, r2
 801690e:	4699      	mov	r9, r3
 8016910:	d837      	bhi.n	8016982 <__ssputs_r+0x82>
 8016912:	898a      	ldrh	r2, [r1, #12]
 8016914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016918:	d031      	beq.n	801697e <__ssputs_r+0x7e>
 801691a:	6825      	ldr	r5, [r4, #0]
 801691c:	6909      	ldr	r1, [r1, #16]
 801691e:	1a6f      	subs	r7, r5, r1
 8016920:	6965      	ldr	r5, [r4, #20]
 8016922:	2302      	movs	r3, #2
 8016924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016928:	fb95 f5f3 	sdiv	r5, r5, r3
 801692c:	f109 0301 	add.w	r3, r9, #1
 8016930:	443b      	add	r3, r7
 8016932:	429d      	cmp	r5, r3
 8016934:	bf38      	it	cc
 8016936:	461d      	movcc	r5, r3
 8016938:	0553      	lsls	r3, r2, #21
 801693a:	d530      	bpl.n	801699e <__ssputs_r+0x9e>
 801693c:	4629      	mov	r1, r5
 801693e:	f7ff ff85 	bl	801684c <_malloc_r>
 8016942:	4606      	mov	r6, r0
 8016944:	b950      	cbnz	r0, 801695c <__ssputs_r+0x5c>
 8016946:	230c      	movs	r3, #12
 8016948:	f8ca 3000 	str.w	r3, [sl]
 801694c:	89a3      	ldrh	r3, [r4, #12]
 801694e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016952:	81a3      	strh	r3, [r4, #12]
 8016954:	f04f 30ff 	mov.w	r0, #4294967295
 8016958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801695c:	463a      	mov	r2, r7
 801695e:	6921      	ldr	r1, [r4, #16]
 8016960:	f7fc f832 	bl	80129c8 <memcpy>
 8016964:	89a3      	ldrh	r3, [r4, #12]
 8016966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801696a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801696e:	81a3      	strh	r3, [r4, #12]
 8016970:	6126      	str	r6, [r4, #16]
 8016972:	6165      	str	r5, [r4, #20]
 8016974:	443e      	add	r6, r7
 8016976:	1bed      	subs	r5, r5, r7
 8016978:	6026      	str	r6, [r4, #0]
 801697a:	60a5      	str	r5, [r4, #8]
 801697c:	464e      	mov	r6, r9
 801697e:	454e      	cmp	r6, r9
 8016980:	d900      	bls.n	8016984 <__ssputs_r+0x84>
 8016982:	464e      	mov	r6, r9
 8016984:	4632      	mov	r2, r6
 8016986:	4641      	mov	r1, r8
 8016988:	6820      	ldr	r0, [r4, #0]
 801698a:	f000 fea9 	bl	80176e0 <memmove>
 801698e:	68a3      	ldr	r3, [r4, #8]
 8016990:	1b9b      	subs	r3, r3, r6
 8016992:	60a3      	str	r3, [r4, #8]
 8016994:	6823      	ldr	r3, [r4, #0]
 8016996:	441e      	add	r6, r3
 8016998:	6026      	str	r6, [r4, #0]
 801699a:	2000      	movs	r0, #0
 801699c:	e7dc      	b.n	8016958 <__ssputs_r+0x58>
 801699e:	462a      	mov	r2, r5
 80169a0:	f000 feb9 	bl	8017716 <_realloc_r>
 80169a4:	4606      	mov	r6, r0
 80169a6:	2800      	cmp	r0, #0
 80169a8:	d1e2      	bne.n	8016970 <__ssputs_r+0x70>
 80169aa:	6921      	ldr	r1, [r4, #16]
 80169ac:	4650      	mov	r0, sl
 80169ae:	f7ff feff 	bl	80167b0 <_free_r>
 80169b2:	e7c8      	b.n	8016946 <__ssputs_r+0x46>

080169b4 <_svfiprintf_r>:
 80169b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b8:	461d      	mov	r5, r3
 80169ba:	898b      	ldrh	r3, [r1, #12]
 80169bc:	061f      	lsls	r7, r3, #24
 80169be:	b09d      	sub	sp, #116	; 0x74
 80169c0:	4680      	mov	r8, r0
 80169c2:	460c      	mov	r4, r1
 80169c4:	4616      	mov	r6, r2
 80169c6:	d50f      	bpl.n	80169e8 <_svfiprintf_r+0x34>
 80169c8:	690b      	ldr	r3, [r1, #16]
 80169ca:	b96b      	cbnz	r3, 80169e8 <_svfiprintf_r+0x34>
 80169cc:	2140      	movs	r1, #64	; 0x40
 80169ce:	f7ff ff3d 	bl	801684c <_malloc_r>
 80169d2:	6020      	str	r0, [r4, #0]
 80169d4:	6120      	str	r0, [r4, #16]
 80169d6:	b928      	cbnz	r0, 80169e4 <_svfiprintf_r+0x30>
 80169d8:	230c      	movs	r3, #12
 80169da:	f8c8 3000 	str.w	r3, [r8]
 80169de:	f04f 30ff 	mov.w	r0, #4294967295
 80169e2:	e0c8      	b.n	8016b76 <_svfiprintf_r+0x1c2>
 80169e4:	2340      	movs	r3, #64	; 0x40
 80169e6:	6163      	str	r3, [r4, #20]
 80169e8:	2300      	movs	r3, #0
 80169ea:	9309      	str	r3, [sp, #36]	; 0x24
 80169ec:	2320      	movs	r3, #32
 80169ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169f2:	2330      	movs	r3, #48	; 0x30
 80169f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169f8:	9503      	str	r5, [sp, #12]
 80169fa:	f04f 0b01 	mov.w	fp, #1
 80169fe:	4637      	mov	r7, r6
 8016a00:	463d      	mov	r5, r7
 8016a02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016a06:	b10b      	cbz	r3, 8016a0c <_svfiprintf_r+0x58>
 8016a08:	2b25      	cmp	r3, #37	; 0x25
 8016a0a:	d13e      	bne.n	8016a8a <_svfiprintf_r+0xd6>
 8016a0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016a10:	d00b      	beq.n	8016a2a <_svfiprintf_r+0x76>
 8016a12:	4653      	mov	r3, sl
 8016a14:	4632      	mov	r2, r6
 8016a16:	4621      	mov	r1, r4
 8016a18:	4640      	mov	r0, r8
 8016a1a:	f7ff ff71 	bl	8016900 <__ssputs_r>
 8016a1e:	3001      	adds	r0, #1
 8016a20:	f000 80a4 	beq.w	8016b6c <_svfiprintf_r+0x1b8>
 8016a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a26:	4453      	add	r3, sl
 8016a28:	9309      	str	r3, [sp, #36]	; 0x24
 8016a2a:	783b      	ldrb	r3, [r7, #0]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	f000 809d 	beq.w	8016b6c <_svfiprintf_r+0x1b8>
 8016a32:	2300      	movs	r3, #0
 8016a34:	f04f 32ff 	mov.w	r2, #4294967295
 8016a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a3c:	9304      	str	r3, [sp, #16]
 8016a3e:	9307      	str	r3, [sp, #28]
 8016a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a44:	931a      	str	r3, [sp, #104]	; 0x68
 8016a46:	462f      	mov	r7, r5
 8016a48:	2205      	movs	r2, #5
 8016a4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016a4e:	4850      	ldr	r0, [pc, #320]	; (8016b90 <_svfiprintf_r+0x1dc>)
 8016a50:	f7e9 fbde 	bl	8000210 <memchr>
 8016a54:	9b04      	ldr	r3, [sp, #16]
 8016a56:	b9d0      	cbnz	r0, 8016a8e <_svfiprintf_r+0xda>
 8016a58:	06d9      	lsls	r1, r3, #27
 8016a5a:	bf44      	itt	mi
 8016a5c:	2220      	movmi	r2, #32
 8016a5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a62:	071a      	lsls	r2, r3, #28
 8016a64:	bf44      	itt	mi
 8016a66:	222b      	movmi	r2, #43	; 0x2b
 8016a68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a6c:	782a      	ldrb	r2, [r5, #0]
 8016a6e:	2a2a      	cmp	r2, #42	; 0x2a
 8016a70:	d015      	beq.n	8016a9e <_svfiprintf_r+0xea>
 8016a72:	9a07      	ldr	r2, [sp, #28]
 8016a74:	462f      	mov	r7, r5
 8016a76:	2000      	movs	r0, #0
 8016a78:	250a      	movs	r5, #10
 8016a7a:	4639      	mov	r1, r7
 8016a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a80:	3b30      	subs	r3, #48	; 0x30
 8016a82:	2b09      	cmp	r3, #9
 8016a84:	d94d      	bls.n	8016b22 <_svfiprintf_r+0x16e>
 8016a86:	b1b8      	cbz	r0, 8016ab8 <_svfiprintf_r+0x104>
 8016a88:	e00f      	b.n	8016aaa <_svfiprintf_r+0xf6>
 8016a8a:	462f      	mov	r7, r5
 8016a8c:	e7b8      	b.n	8016a00 <_svfiprintf_r+0x4c>
 8016a8e:	4a40      	ldr	r2, [pc, #256]	; (8016b90 <_svfiprintf_r+0x1dc>)
 8016a90:	1a80      	subs	r0, r0, r2
 8016a92:	fa0b f000 	lsl.w	r0, fp, r0
 8016a96:	4318      	orrs	r0, r3
 8016a98:	9004      	str	r0, [sp, #16]
 8016a9a:	463d      	mov	r5, r7
 8016a9c:	e7d3      	b.n	8016a46 <_svfiprintf_r+0x92>
 8016a9e:	9a03      	ldr	r2, [sp, #12]
 8016aa0:	1d11      	adds	r1, r2, #4
 8016aa2:	6812      	ldr	r2, [r2, #0]
 8016aa4:	9103      	str	r1, [sp, #12]
 8016aa6:	2a00      	cmp	r2, #0
 8016aa8:	db01      	blt.n	8016aae <_svfiprintf_r+0xfa>
 8016aaa:	9207      	str	r2, [sp, #28]
 8016aac:	e004      	b.n	8016ab8 <_svfiprintf_r+0x104>
 8016aae:	4252      	negs	r2, r2
 8016ab0:	f043 0302 	orr.w	r3, r3, #2
 8016ab4:	9207      	str	r2, [sp, #28]
 8016ab6:	9304      	str	r3, [sp, #16]
 8016ab8:	783b      	ldrb	r3, [r7, #0]
 8016aba:	2b2e      	cmp	r3, #46	; 0x2e
 8016abc:	d10c      	bne.n	8016ad8 <_svfiprintf_r+0x124>
 8016abe:	787b      	ldrb	r3, [r7, #1]
 8016ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8016ac2:	d133      	bne.n	8016b2c <_svfiprintf_r+0x178>
 8016ac4:	9b03      	ldr	r3, [sp, #12]
 8016ac6:	1d1a      	adds	r2, r3, #4
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	9203      	str	r2, [sp, #12]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	bfb8      	it	lt
 8016ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ad4:	3702      	adds	r7, #2
 8016ad6:	9305      	str	r3, [sp, #20]
 8016ad8:	4d2e      	ldr	r5, [pc, #184]	; (8016b94 <_svfiprintf_r+0x1e0>)
 8016ada:	7839      	ldrb	r1, [r7, #0]
 8016adc:	2203      	movs	r2, #3
 8016ade:	4628      	mov	r0, r5
 8016ae0:	f7e9 fb96 	bl	8000210 <memchr>
 8016ae4:	b138      	cbz	r0, 8016af6 <_svfiprintf_r+0x142>
 8016ae6:	2340      	movs	r3, #64	; 0x40
 8016ae8:	1b40      	subs	r0, r0, r5
 8016aea:	fa03 f000 	lsl.w	r0, r3, r0
 8016aee:	9b04      	ldr	r3, [sp, #16]
 8016af0:	4303      	orrs	r3, r0
 8016af2:	3701      	adds	r7, #1
 8016af4:	9304      	str	r3, [sp, #16]
 8016af6:	7839      	ldrb	r1, [r7, #0]
 8016af8:	4827      	ldr	r0, [pc, #156]	; (8016b98 <_svfiprintf_r+0x1e4>)
 8016afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016afe:	2206      	movs	r2, #6
 8016b00:	1c7e      	adds	r6, r7, #1
 8016b02:	f7e9 fb85 	bl	8000210 <memchr>
 8016b06:	2800      	cmp	r0, #0
 8016b08:	d038      	beq.n	8016b7c <_svfiprintf_r+0x1c8>
 8016b0a:	4b24      	ldr	r3, [pc, #144]	; (8016b9c <_svfiprintf_r+0x1e8>)
 8016b0c:	bb13      	cbnz	r3, 8016b54 <_svfiprintf_r+0x1a0>
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	3307      	adds	r3, #7
 8016b12:	f023 0307 	bic.w	r3, r3, #7
 8016b16:	3308      	adds	r3, #8
 8016b18:	9303      	str	r3, [sp, #12]
 8016b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b1c:	444b      	add	r3, r9
 8016b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b20:	e76d      	b.n	80169fe <_svfiprintf_r+0x4a>
 8016b22:	fb05 3202 	mla	r2, r5, r2, r3
 8016b26:	2001      	movs	r0, #1
 8016b28:	460f      	mov	r7, r1
 8016b2a:	e7a6      	b.n	8016a7a <_svfiprintf_r+0xc6>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	3701      	adds	r7, #1
 8016b30:	9305      	str	r3, [sp, #20]
 8016b32:	4619      	mov	r1, r3
 8016b34:	250a      	movs	r5, #10
 8016b36:	4638      	mov	r0, r7
 8016b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b3c:	3a30      	subs	r2, #48	; 0x30
 8016b3e:	2a09      	cmp	r2, #9
 8016b40:	d903      	bls.n	8016b4a <_svfiprintf_r+0x196>
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d0c8      	beq.n	8016ad8 <_svfiprintf_r+0x124>
 8016b46:	9105      	str	r1, [sp, #20]
 8016b48:	e7c6      	b.n	8016ad8 <_svfiprintf_r+0x124>
 8016b4a:	fb05 2101 	mla	r1, r5, r1, r2
 8016b4e:	2301      	movs	r3, #1
 8016b50:	4607      	mov	r7, r0
 8016b52:	e7f0      	b.n	8016b36 <_svfiprintf_r+0x182>
 8016b54:	ab03      	add	r3, sp, #12
 8016b56:	9300      	str	r3, [sp, #0]
 8016b58:	4622      	mov	r2, r4
 8016b5a:	4b11      	ldr	r3, [pc, #68]	; (8016ba0 <_svfiprintf_r+0x1ec>)
 8016b5c:	a904      	add	r1, sp, #16
 8016b5e:	4640      	mov	r0, r8
 8016b60:	f7fb ffda 	bl	8012b18 <_printf_float>
 8016b64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016b68:	4681      	mov	r9, r0
 8016b6a:	d1d6      	bne.n	8016b1a <_svfiprintf_r+0x166>
 8016b6c:	89a3      	ldrh	r3, [r4, #12]
 8016b6e:	065b      	lsls	r3, r3, #25
 8016b70:	f53f af35 	bmi.w	80169de <_svfiprintf_r+0x2a>
 8016b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b76:	b01d      	add	sp, #116	; 0x74
 8016b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b7c:	ab03      	add	r3, sp, #12
 8016b7e:	9300      	str	r3, [sp, #0]
 8016b80:	4622      	mov	r2, r4
 8016b82:	4b07      	ldr	r3, [pc, #28]	; (8016ba0 <_svfiprintf_r+0x1ec>)
 8016b84:	a904      	add	r1, sp, #16
 8016b86:	4640      	mov	r0, r8
 8016b88:	f7fc fa7c 	bl	8013084 <_printf_i>
 8016b8c:	e7ea      	b.n	8016b64 <_svfiprintf_r+0x1b0>
 8016b8e:	bf00      	nop
 8016b90:	0801809c 	.word	0x0801809c
 8016b94:	080180a2 	.word	0x080180a2
 8016b98:	080180a6 	.word	0x080180a6
 8016b9c:	08012b19 	.word	0x08012b19
 8016ba0:	08016901 	.word	0x08016901

08016ba4 <_sungetc_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	1c4b      	adds	r3, r1, #1
 8016ba8:	4614      	mov	r4, r2
 8016baa:	d103      	bne.n	8016bb4 <_sungetc_r+0x10>
 8016bac:	f04f 35ff 	mov.w	r5, #4294967295
 8016bb0:	4628      	mov	r0, r5
 8016bb2:	bd38      	pop	{r3, r4, r5, pc}
 8016bb4:	8993      	ldrh	r3, [r2, #12]
 8016bb6:	f023 0320 	bic.w	r3, r3, #32
 8016bba:	8193      	strh	r3, [r2, #12]
 8016bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bbe:	6852      	ldr	r2, [r2, #4]
 8016bc0:	b2cd      	uxtb	r5, r1
 8016bc2:	b18b      	cbz	r3, 8016be8 <_sungetc_r+0x44>
 8016bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016bc6:	4293      	cmp	r3, r2
 8016bc8:	dd08      	ble.n	8016bdc <_sungetc_r+0x38>
 8016bca:	6823      	ldr	r3, [r4, #0]
 8016bcc:	1e5a      	subs	r2, r3, #1
 8016bce:	6022      	str	r2, [r4, #0]
 8016bd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016bd4:	6863      	ldr	r3, [r4, #4]
 8016bd6:	3301      	adds	r3, #1
 8016bd8:	6063      	str	r3, [r4, #4]
 8016bda:	e7e9      	b.n	8016bb0 <_sungetc_r+0xc>
 8016bdc:	4621      	mov	r1, r4
 8016bde:	f000 fd15 	bl	801760c <__submore>
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d0f1      	beq.n	8016bca <_sungetc_r+0x26>
 8016be6:	e7e1      	b.n	8016bac <_sungetc_r+0x8>
 8016be8:	6921      	ldr	r1, [r4, #16]
 8016bea:	6823      	ldr	r3, [r4, #0]
 8016bec:	b151      	cbz	r1, 8016c04 <_sungetc_r+0x60>
 8016bee:	4299      	cmp	r1, r3
 8016bf0:	d208      	bcs.n	8016c04 <_sungetc_r+0x60>
 8016bf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016bf6:	42a9      	cmp	r1, r5
 8016bf8:	d104      	bne.n	8016c04 <_sungetc_r+0x60>
 8016bfa:	3b01      	subs	r3, #1
 8016bfc:	3201      	adds	r2, #1
 8016bfe:	6023      	str	r3, [r4, #0]
 8016c00:	6062      	str	r2, [r4, #4]
 8016c02:	e7d5      	b.n	8016bb0 <_sungetc_r+0xc>
 8016c04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8016c0e:	2303      	movs	r3, #3
 8016c10:	63a3      	str	r3, [r4, #56]	; 0x38
 8016c12:	4623      	mov	r3, r4
 8016c14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016c18:	6023      	str	r3, [r4, #0]
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	e7dc      	b.n	8016bd8 <_sungetc_r+0x34>

08016c1e <__ssrefill_r>:
 8016c1e:	b510      	push	{r4, lr}
 8016c20:	460c      	mov	r4, r1
 8016c22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016c24:	b169      	cbz	r1, 8016c42 <__ssrefill_r+0x24>
 8016c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c2a:	4299      	cmp	r1, r3
 8016c2c:	d001      	beq.n	8016c32 <__ssrefill_r+0x14>
 8016c2e:	f7ff fdbf 	bl	80167b0 <_free_r>
 8016c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c34:	6063      	str	r3, [r4, #4]
 8016c36:	2000      	movs	r0, #0
 8016c38:	6360      	str	r0, [r4, #52]	; 0x34
 8016c3a:	b113      	cbz	r3, 8016c42 <__ssrefill_r+0x24>
 8016c3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016c3e:	6023      	str	r3, [r4, #0]
 8016c40:	bd10      	pop	{r4, pc}
 8016c42:	6923      	ldr	r3, [r4, #16]
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	2300      	movs	r3, #0
 8016c48:	6063      	str	r3, [r4, #4]
 8016c4a:	89a3      	ldrh	r3, [r4, #12]
 8016c4c:	f043 0320 	orr.w	r3, r3, #32
 8016c50:	81a3      	strh	r3, [r4, #12]
 8016c52:	f04f 30ff 	mov.w	r0, #4294967295
 8016c56:	e7f3      	b.n	8016c40 <__ssrefill_r+0x22>

08016c58 <__ssvfiscanf_r>:
 8016c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c5c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016c60:	460c      	mov	r4, r1
 8016c62:	2100      	movs	r1, #0
 8016c64:	9144      	str	r1, [sp, #272]	; 0x110
 8016c66:	9145      	str	r1, [sp, #276]	; 0x114
 8016c68:	499f      	ldr	r1, [pc, #636]	; (8016ee8 <__ssvfiscanf_r+0x290>)
 8016c6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8016c6c:	f10d 0804 	add.w	r8, sp, #4
 8016c70:	499e      	ldr	r1, [pc, #632]	; (8016eec <__ssvfiscanf_r+0x294>)
 8016c72:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016ef0 <__ssvfiscanf_r+0x298>
 8016c76:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016c7a:	4606      	mov	r6, r0
 8016c7c:	4692      	mov	sl, r2
 8016c7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	270a      	movs	r7, #10
 8016c84:	f89a 3000 	ldrb.w	r3, [sl]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	f000 812a 	beq.w	8016ee2 <__ssvfiscanf_r+0x28a>
 8016c8e:	4655      	mov	r5, sl
 8016c90:	f7ff f8d2 	bl	8015e38 <__locale_ctype_ptr>
 8016c94:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016c98:	4458      	add	r0, fp
 8016c9a:	7843      	ldrb	r3, [r0, #1]
 8016c9c:	f013 0308 	ands.w	r3, r3, #8
 8016ca0:	d01c      	beq.n	8016cdc <__ssvfiscanf_r+0x84>
 8016ca2:	6863      	ldr	r3, [r4, #4]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	dd12      	ble.n	8016cce <__ssvfiscanf_r+0x76>
 8016ca8:	f7ff f8c6 	bl	8015e38 <__locale_ctype_ptr>
 8016cac:	6823      	ldr	r3, [r4, #0]
 8016cae:	781a      	ldrb	r2, [r3, #0]
 8016cb0:	4410      	add	r0, r2
 8016cb2:	7842      	ldrb	r2, [r0, #1]
 8016cb4:	0712      	lsls	r2, r2, #28
 8016cb6:	d401      	bmi.n	8016cbc <__ssvfiscanf_r+0x64>
 8016cb8:	46aa      	mov	sl, r5
 8016cba:	e7e3      	b.n	8016c84 <__ssvfiscanf_r+0x2c>
 8016cbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016cbe:	3201      	adds	r2, #1
 8016cc0:	9245      	str	r2, [sp, #276]	; 0x114
 8016cc2:	6862      	ldr	r2, [r4, #4]
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	3a01      	subs	r2, #1
 8016cc8:	6062      	str	r2, [r4, #4]
 8016cca:	6023      	str	r3, [r4, #0]
 8016ccc:	e7e9      	b.n	8016ca2 <__ssvfiscanf_r+0x4a>
 8016cce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016cd0:	4621      	mov	r1, r4
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	4798      	blx	r3
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	d0e6      	beq.n	8016ca8 <__ssvfiscanf_r+0x50>
 8016cda:	e7ed      	b.n	8016cb8 <__ssvfiscanf_r+0x60>
 8016cdc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016ce0:	f040 8082 	bne.w	8016de8 <__ssvfiscanf_r+0x190>
 8016ce4:	9343      	str	r3, [sp, #268]	; 0x10c
 8016ce6:	9341      	str	r3, [sp, #260]	; 0x104
 8016ce8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016cec:	2b2a      	cmp	r3, #42	; 0x2a
 8016cee:	d103      	bne.n	8016cf8 <__ssvfiscanf_r+0xa0>
 8016cf0:	2310      	movs	r3, #16
 8016cf2:	9341      	str	r3, [sp, #260]	; 0x104
 8016cf4:	f10a 0502 	add.w	r5, sl, #2
 8016cf8:	46aa      	mov	sl, r5
 8016cfa:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016cfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016d02:	2a09      	cmp	r2, #9
 8016d04:	d922      	bls.n	8016d4c <__ssvfiscanf_r+0xf4>
 8016d06:	2203      	movs	r2, #3
 8016d08:	4879      	ldr	r0, [pc, #484]	; (8016ef0 <__ssvfiscanf_r+0x298>)
 8016d0a:	f7e9 fa81 	bl	8000210 <memchr>
 8016d0e:	b138      	cbz	r0, 8016d20 <__ssvfiscanf_r+0xc8>
 8016d10:	eba0 0309 	sub.w	r3, r0, r9
 8016d14:	2001      	movs	r0, #1
 8016d16:	4098      	lsls	r0, r3
 8016d18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d1a:	4318      	orrs	r0, r3
 8016d1c:	9041      	str	r0, [sp, #260]	; 0x104
 8016d1e:	46aa      	mov	sl, r5
 8016d20:	f89a 3000 	ldrb.w	r3, [sl]
 8016d24:	2b67      	cmp	r3, #103	; 0x67
 8016d26:	f10a 0501 	add.w	r5, sl, #1
 8016d2a:	d82b      	bhi.n	8016d84 <__ssvfiscanf_r+0x12c>
 8016d2c:	2b65      	cmp	r3, #101	; 0x65
 8016d2e:	f080 809f 	bcs.w	8016e70 <__ssvfiscanf_r+0x218>
 8016d32:	2b47      	cmp	r3, #71	; 0x47
 8016d34:	d810      	bhi.n	8016d58 <__ssvfiscanf_r+0x100>
 8016d36:	2b45      	cmp	r3, #69	; 0x45
 8016d38:	f080 809a 	bcs.w	8016e70 <__ssvfiscanf_r+0x218>
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d06c      	beq.n	8016e1a <__ssvfiscanf_r+0x1c2>
 8016d40:	2b25      	cmp	r3, #37	; 0x25
 8016d42:	d051      	beq.n	8016de8 <__ssvfiscanf_r+0x190>
 8016d44:	2303      	movs	r3, #3
 8016d46:	9347      	str	r3, [sp, #284]	; 0x11c
 8016d48:	9742      	str	r7, [sp, #264]	; 0x108
 8016d4a:	e027      	b.n	8016d9c <__ssvfiscanf_r+0x144>
 8016d4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016d4e:	fb07 1303 	mla	r3, r7, r3, r1
 8016d52:	3b30      	subs	r3, #48	; 0x30
 8016d54:	9343      	str	r3, [sp, #268]	; 0x10c
 8016d56:	e7cf      	b.n	8016cf8 <__ssvfiscanf_r+0xa0>
 8016d58:	2b5b      	cmp	r3, #91	; 0x5b
 8016d5a:	d06a      	beq.n	8016e32 <__ssvfiscanf_r+0x1da>
 8016d5c:	d80c      	bhi.n	8016d78 <__ssvfiscanf_r+0x120>
 8016d5e:	2b58      	cmp	r3, #88	; 0x58
 8016d60:	d1f0      	bne.n	8016d44 <__ssvfiscanf_r+0xec>
 8016d62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016d68:	9241      	str	r2, [sp, #260]	; 0x104
 8016d6a:	2210      	movs	r2, #16
 8016d6c:	9242      	str	r2, [sp, #264]	; 0x108
 8016d6e:	2b6e      	cmp	r3, #110	; 0x6e
 8016d70:	bf8c      	ite	hi
 8016d72:	2304      	movhi	r3, #4
 8016d74:	2303      	movls	r3, #3
 8016d76:	e010      	b.n	8016d9a <__ssvfiscanf_r+0x142>
 8016d78:	2b63      	cmp	r3, #99	; 0x63
 8016d7a:	d065      	beq.n	8016e48 <__ssvfiscanf_r+0x1f0>
 8016d7c:	2b64      	cmp	r3, #100	; 0x64
 8016d7e:	d1e1      	bne.n	8016d44 <__ssvfiscanf_r+0xec>
 8016d80:	9742      	str	r7, [sp, #264]	; 0x108
 8016d82:	e7f4      	b.n	8016d6e <__ssvfiscanf_r+0x116>
 8016d84:	2b70      	cmp	r3, #112	; 0x70
 8016d86:	d04b      	beq.n	8016e20 <__ssvfiscanf_r+0x1c8>
 8016d88:	d826      	bhi.n	8016dd8 <__ssvfiscanf_r+0x180>
 8016d8a:	2b6e      	cmp	r3, #110	; 0x6e
 8016d8c:	d062      	beq.n	8016e54 <__ssvfiscanf_r+0x1fc>
 8016d8e:	d84c      	bhi.n	8016e2a <__ssvfiscanf_r+0x1d2>
 8016d90:	2b69      	cmp	r3, #105	; 0x69
 8016d92:	d1d7      	bne.n	8016d44 <__ssvfiscanf_r+0xec>
 8016d94:	2300      	movs	r3, #0
 8016d96:	9342      	str	r3, [sp, #264]	; 0x108
 8016d98:	2303      	movs	r3, #3
 8016d9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8016d9c:	6863      	ldr	r3, [r4, #4]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	dd68      	ble.n	8016e74 <__ssvfiscanf_r+0x21c>
 8016da2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016da4:	0659      	lsls	r1, r3, #25
 8016da6:	d407      	bmi.n	8016db8 <__ssvfiscanf_r+0x160>
 8016da8:	f7ff f846 	bl	8015e38 <__locale_ctype_ptr>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	781a      	ldrb	r2, [r3, #0]
 8016db0:	4410      	add	r0, r2
 8016db2:	7842      	ldrb	r2, [r0, #1]
 8016db4:	0712      	lsls	r2, r2, #28
 8016db6:	d464      	bmi.n	8016e82 <__ssvfiscanf_r+0x22a>
 8016db8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	dc73      	bgt.n	8016ea6 <__ssvfiscanf_r+0x24e>
 8016dbe:	466b      	mov	r3, sp
 8016dc0:	4622      	mov	r2, r4
 8016dc2:	a941      	add	r1, sp, #260	; 0x104
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f000 f9d7 	bl	8017178 <_scanf_chars>
 8016dca:	2801      	cmp	r0, #1
 8016dcc:	f000 8089 	beq.w	8016ee2 <__ssvfiscanf_r+0x28a>
 8016dd0:	2802      	cmp	r0, #2
 8016dd2:	f47f af71 	bne.w	8016cb8 <__ssvfiscanf_r+0x60>
 8016dd6:	e01d      	b.n	8016e14 <__ssvfiscanf_r+0x1bc>
 8016dd8:	2b75      	cmp	r3, #117	; 0x75
 8016dda:	d0d1      	beq.n	8016d80 <__ssvfiscanf_r+0x128>
 8016ddc:	2b78      	cmp	r3, #120	; 0x78
 8016dde:	d0c0      	beq.n	8016d62 <__ssvfiscanf_r+0x10a>
 8016de0:	2b73      	cmp	r3, #115	; 0x73
 8016de2:	d1af      	bne.n	8016d44 <__ssvfiscanf_r+0xec>
 8016de4:	2302      	movs	r3, #2
 8016de6:	e7d8      	b.n	8016d9a <__ssvfiscanf_r+0x142>
 8016de8:	6863      	ldr	r3, [r4, #4]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	dd0c      	ble.n	8016e08 <__ssvfiscanf_r+0x1b0>
 8016dee:	6823      	ldr	r3, [r4, #0]
 8016df0:	781a      	ldrb	r2, [r3, #0]
 8016df2:	455a      	cmp	r2, fp
 8016df4:	d175      	bne.n	8016ee2 <__ssvfiscanf_r+0x28a>
 8016df6:	3301      	adds	r3, #1
 8016df8:	6862      	ldr	r2, [r4, #4]
 8016dfa:	6023      	str	r3, [r4, #0]
 8016dfc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016dfe:	3a01      	subs	r2, #1
 8016e00:	3301      	adds	r3, #1
 8016e02:	6062      	str	r2, [r4, #4]
 8016e04:	9345      	str	r3, [sp, #276]	; 0x114
 8016e06:	e757      	b.n	8016cb8 <__ssvfiscanf_r+0x60>
 8016e08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e0a:	4621      	mov	r1, r4
 8016e0c:	4630      	mov	r0, r6
 8016e0e:	4798      	blx	r3
 8016e10:	2800      	cmp	r0, #0
 8016e12:	d0ec      	beq.n	8016dee <__ssvfiscanf_r+0x196>
 8016e14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016e16:	2800      	cmp	r0, #0
 8016e18:	d159      	bne.n	8016ece <__ssvfiscanf_r+0x276>
 8016e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e1e:	e05c      	b.n	8016eda <__ssvfiscanf_r+0x282>
 8016e20:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016e22:	f042 0220 	orr.w	r2, r2, #32
 8016e26:	9241      	str	r2, [sp, #260]	; 0x104
 8016e28:	e79b      	b.n	8016d62 <__ssvfiscanf_r+0x10a>
 8016e2a:	2308      	movs	r3, #8
 8016e2c:	9342      	str	r3, [sp, #264]	; 0x108
 8016e2e:	2304      	movs	r3, #4
 8016e30:	e7b3      	b.n	8016d9a <__ssvfiscanf_r+0x142>
 8016e32:	4629      	mov	r1, r5
 8016e34:	4640      	mov	r0, r8
 8016e36:	f000 fb19 	bl	801746c <__sccl>
 8016e3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e40:	9341      	str	r3, [sp, #260]	; 0x104
 8016e42:	4605      	mov	r5, r0
 8016e44:	2301      	movs	r3, #1
 8016e46:	e7a8      	b.n	8016d9a <__ssvfiscanf_r+0x142>
 8016e48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e4e:	9341      	str	r3, [sp, #260]	; 0x104
 8016e50:	2300      	movs	r3, #0
 8016e52:	e7a2      	b.n	8016d9a <__ssvfiscanf_r+0x142>
 8016e54:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016e56:	06c3      	lsls	r3, r0, #27
 8016e58:	f53f af2e 	bmi.w	8016cb8 <__ssvfiscanf_r+0x60>
 8016e5c:	9b00      	ldr	r3, [sp, #0]
 8016e5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016e60:	1d19      	adds	r1, r3, #4
 8016e62:	9100      	str	r1, [sp, #0]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	07c0      	lsls	r0, r0, #31
 8016e68:	bf4c      	ite	mi
 8016e6a:	801a      	strhmi	r2, [r3, #0]
 8016e6c:	601a      	strpl	r2, [r3, #0]
 8016e6e:	e723      	b.n	8016cb8 <__ssvfiscanf_r+0x60>
 8016e70:	2305      	movs	r3, #5
 8016e72:	e792      	b.n	8016d9a <__ssvfiscanf_r+0x142>
 8016e74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e76:	4621      	mov	r1, r4
 8016e78:	4630      	mov	r0, r6
 8016e7a:	4798      	blx	r3
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d090      	beq.n	8016da2 <__ssvfiscanf_r+0x14a>
 8016e80:	e7c8      	b.n	8016e14 <__ssvfiscanf_r+0x1bc>
 8016e82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016e84:	3201      	adds	r2, #1
 8016e86:	9245      	str	r2, [sp, #276]	; 0x114
 8016e88:	6862      	ldr	r2, [r4, #4]
 8016e8a:	3a01      	subs	r2, #1
 8016e8c:	2a00      	cmp	r2, #0
 8016e8e:	6062      	str	r2, [r4, #4]
 8016e90:	dd02      	ble.n	8016e98 <__ssvfiscanf_r+0x240>
 8016e92:	3301      	adds	r3, #1
 8016e94:	6023      	str	r3, [r4, #0]
 8016e96:	e787      	b.n	8016da8 <__ssvfiscanf_r+0x150>
 8016e98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e9a:	4621      	mov	r1, r4
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	4798      	blx	r3
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	d081      	beq.n	8016da8 <__ssvfiscanf_r+0x150>
 8016ea4:	e7b6      	b.n	8016e14 <__ssvfiscanf_r+0x1bc>
 8016ea6:	2b04      	cmp	r3, #4
 8016ea8:	dc06      	bgt.n	8016eb8 <__ssvfiscanf_r+0x260>
 8016eaa:	466b      	mov	r3, sp
 8016eac:	4622      	mov	r2, r4
 8016eae:	a941      	add	r1, sp, #260	; 0x104
 8016eb0:	4630      	mov	r0, r6
 8016eb2:	f000 f9c5 	bl	8017240 <_scanf_i>
 8016eb6:	e788      	b.n	8016dca <__ssvfiscanf_r+0x172>
 8016eb8:	4b0e      	ldr	r3, [pc, #56]	; (8016ef4 <__ssvfiscanf_r+0x29c>)
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	f43f aefc 	beq.w	8016cb8 <__ssvfiscanf_r+0x60>
 8016ec0:	466b      	mov	r3, sp
 8016ec2:	4622      	mov	r2, r4
 8016ec4:	a941      	add	r1, sp, #260	; 0x104
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	f7fc f9ee 	bl	80132a8 <_scanf_float>
 8016ecc:	e77d      	b.n	8016dca <__ssvfiscanf_r+0x172>
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016ed4:	bf18      	it	ne
 8016ed6:	f04f 30ff 	movne.w	r0, #4294967295
 8016eda:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016ee4:	e7f9      	b.n	8016eda <__ssvfiscanf_r+0x282>
 8016ee6:	bf00      	nop
 8016ee8:	08016ba5 	.word	0x08016ba5
 8016eec:	08016c1f 	.word	0x08016c1f
 8016ef0:	080180a2 	.word	0x080180a2
 8016ef4:	080132a9 	.word	0x080132a9

08016ef8 <__sfputc_r>:
 8016ef8:	6893      	ldr	r3, [r2, #8]
 8016efa:	3b01      	subs	r3, #1
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	b410      	push	{r4}
 8016f00:	6093      	str	r3, [r2, #8]
 8016f02:	da08      	bge.n	8016f16 <__sfputc_r+0x1e>
 8016f04:	6994      	ldr	r4, [r2, #24]
 8016f06:	42a3      	cmp	r3, r4
 8016f08:	db01      	blt.n	8016f0e <__sfputc_r+0x16>
 8016f0a:	290a      	cmp	r1, #10
 8016f0c:	d103      	bne.n	8016f16 <__sfputc_r+0x1e>
 8016f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f12:	f7fd bbc7 	b.w	80146a4 <__swbuf_r>
 8016f16:	6813      	ldr	r3, [r2, #0]
 8016f18:	1c58      	adds	r0, r3, #1
 8016f1a:	6010      	str	r0, [r2, #0]
 8016f1c:	7019      	strb	r1, [r3, #0]
 8016f1e:	4608      	mov	r0, r1
 8016f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f24:	4770      	bx	lr

08016f26 <__sfputs_r>:
 8016f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f28:	4606      	mov	r6, r0
 8016f2a:	460f      	mov	r7, r1
 8016f2c:	4614      	mov	r4, r2
 8016f2e:	18d5      	adds	r5, r2, r3
 8016f30:	42ac      	cmp	r4, r5
 8016f32:	d101      	bne.n	8016f38 <__sfputs_r+0x12>
 8016f34:	2000      	movs	r0, #0
 8016f36:	e007      	b.n	8016f48 <__sfputs_r+0x22>
 8016f38:	463a      	mov	r2, r7
 8016f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f3e:	4630      	mov	r0, r6
 8016f40:	f7ff ffda 	bl	8016ef8 <__sfputc_r>
 8016f44:	1c43      	adds	r3, r0, #1
 8016f46:	d1f3      	bne.n	8016f30 <__sfputs_r+0xa>
 8016f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016f4c <_vfiprintf_r>:
 8016f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f50:	460c      	mov	r4, r1
 8016f52:	b09d      	sub	sp, #116	; 0x74
 8016f54:	4617      	mov	r7, r2
 8016f56:	461d      	mov	r5, r3
 8016f58:	4606      	mov	r6, r0
 8016f5a:	b118      	cbz	r0, 8016f64 <_vfiprintf_r+0x18>
 8016f5c:	6983      	ldr	r3, [r0, #24]
 8016f5e:	b90b      	cbnz	r3, 8016f64 <_vfiprintf_r+0x18>
 8016f60:	f7fe fbb6 	bl	80156d0 <__sinit>
 8016f64:	4b7c      	ldr	r3, [pc, #496]	; (8017158 <_vfiprintf_r+0x20c>)
 8016f66:	429c      	cmp	r4, r3
 8016f68:	d158      	bne.n	801701c <_vfiprintf_r+0xd0>
 8016f6a:	6874      	ldr	r4, [r6, #4]
 8016f6c:	89a3      	ldrh	r3, [r4, #12]
 8016f6e:	0718      	lsls	r0, r3, #28
 8016f70:	d55e      	bpl.n	8017030 <_vfiprintf_r+0xe4>
 8016f72:	6923      	ldr	r3, [r4, #16]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d05b      	beq.n	8017030 <_vfiprintf_r+0xe4>
 8016f78:	2300      	movs	r3, #0
 8016f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8016f7c:	2320      	movs	r3, #32
 8016f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f82:	2330      	movs	r3, #48	; 0x30
 8016f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f88:	9503      	str	r5, [sp, #12]
 8016f8a:	f04f 0b01 	mov.w	fp, #1
 8016f8e:	46b8      	mov	r8, r7
 8016f90:	4645      	mov	r5, r8
 8016f92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016f96:	b10b      	cbz	r3, 8016f9c <_vfiprintf_r+0x50>
 8016f98:	2b25      	cmp	r3, #37	; 0x25
 8016f9a:	d154      	bne.n	8017046 <_vfiprintf_r+0xfa>
 8016f9c:	ebb8 0a07 	subs.w	sl, r8, r7
 8016fa0:	d00b      	beq.n	8016fba <_vfiprintf_r+0x6e>
 8016fa2:	4653      	mov	r3, sl
 8016fa4:	463a      	mov	r2, r7
 8016fa6:	4621      	mov	r1, r4
 8016fa8:	4630      	mov	r0, r6
 8016faa:	f7ff ffbc 	bl	8016f26 <__sfputs_r>
 8016fae:	3001      	adds	r0, #1
 8016fb0:	f000 80c2 	beq.w	8017138 <_vfiprintf_r+0x1ec>
 8016fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fb6:	4453      	add	r3, sl
 8016fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8016fba:	f898 3000 	ldrb.w	r3, [r8]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	f000 80ba 	beq.w	8017138 <_vfiprintf_r+0x1ec>
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8016fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016fce:	9304      	str	r3, [sp, #16]
 8016fd0:	9307      	str	r3, [sp, #28]
 8016fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8016fd8:	46a8      	mov	r8, r5
 8016fda:	2205      	movs	r2, #5
 8016fdc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016fe0:	485e      	ldr	r0, [pc, #376]	; (801715c <_vfiprintf_r+0x210>)
 8016fe2:	f7e9 f915 	bl	8000210 <memchr>
 8016fe6:	9b04      	ldr	r3, [sp, #16]
 8016fe8:	bb78      	cbnz	r0, 801704a <_vfiprintf_r+0xfe>
 8016fea:	06d9      	lsls	r1, r3, #27
 8016fec:	bf44      	itt	mi
 8016fee:	2220      	movmi	r2, #32
 8016ff0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ff4:	071a      	lsls	r2, r3, #28
 8016ff6:	bf44      	itt	mi
 8016ff8:	222b      	movmi	r2, #43	; 0x2b
 8016ffa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ffe:	782a      	ldrb	r2, [r5, #0]
 8017000:	2a2a      	cmp	r2, #42	; 0x2a
 8017002:	d02a      	beq.n	801705a <_vfiprintf_r+0x10e>
 8017004:	9a07      	ldr	r2, [sp, #28]
 8017006:	46a8      	mov	r8, r5
 8017008:	2000      	movs	r0, #0
 801700a:	250a      	movs	r5, #10
 801700c:	4641      	mov	r1, r8
 801700e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017012:	3b30      	subs	r3, #48	; 0x30
 8017014:	2b09      	cmp	r3, #9
 8017016:	d969      	bls.n	80170ec <_vfiprintf_r+0x1a0>
 8017018:	b360      	cbz	r0, 8017074 <_vfiprintf_r+0x128>
 801701a:	e024      	b.n	8017066 <_vfiprintf_r+0x11a>
 801701c:	4b50      	ldr	r3, [pc, #320]	; (8017160 <_vfiprintf_r+0x214>)
 801701e:	429c      	cmp	r4, r3
 8017020:	d101      	bne.n	8017026 <_vfiprintf_r+0xda>
 8017022:	68b4      	ldr	r4, [r6, #8]
 8017024:	e7a2      	b.n	8016f6c <_vfiprintf_r+0x20>
 8017026:	4b4f      	ldr	r3, [pc, #316]	; (8017164 <_vfiprintf_r+0x218>)
 8017028:	429c      	cmp	r4, r3
 801702a:	bf08      	it	eq
 801702c:	68f4      	ldreq	r4, [r6, #12]
 801702e:	e79d      	b.n	8016f6c <_vfiprintf_r+0x20>
 8017030:	4621      	mov	r1, r4
 8017032:	4630      	mov	r0, r6
 8017034:	f7fd fb9a 	bl	801476c <__swsetup_r>
 8017038:	2800      	cmp	r0, #0
 801703a:	d09d      	beq.n	8016f78 <_vfiprintf_r+0x2c>
 801703c:	f04f 30ff 	mov.w	r0, #4294967295
 8017040:	b01d      	add	sp, #116	; 0x74
 8017042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017046:	46a8      	mov	r8, r5
 8017048:	e7a2      	b.n	8016f90 <_vfiprintf_r+0x44>
 801704a:	4a44      	ldr	r2, [pc, #272]	; (801715c <_vfiprintf_r+0x210>)
 801704c:	1a80      	subs	r0, r0, r2
 801704e:	fa0b f000 	lsl.w	r0, fp, r0
 8017052:	4318      	orrs	r0, r3
 8017054:	9004      	str	r0, [sp, #16]
 8017056:	4645      	mov	r5, r8
 8017058:	e7be      	b.n	8016fd8 <_vfiprintf_r+0x8c>
 801705a:	9a03      	ldr	r2, [sp, #12]
 801705c:	1d11      	adds	r1, r2, #4
 801705e:	6812      	ldr	r2, [r2, #0]
 8017060:	9103      	str	r1, [sp, #12]
 8017062:	2a00      	cmp	r2, #0
 8017064:	db01      	blt.n	801706a <_vfiprintf_r+0x11e>
 8017066:	9207      	str	r2, [sp, #28]
 8017068:	e004      	b.n	8017074 <_vfiprintf_r+0x128>
 801706a:	4252      	negs	r2, r2
 801706c:	f043 0302 	orr.w	r3, r3, #2
 8017070:	9207      	str	r2, [sp, #28]
 8017072:	9304      	str	r3, [sp, #16]
 8017074:	f898 3000 	ldrb.w	r3, [r8]
 8017078:	2b2e      	cmp	r3, #46	; 0x2e
 801707a:	d10e      	bne.n	801709a <_vfiprintf_r+0x14e>
 801707c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017080:	2b2a      	cmp	r3, #42	; 0x2a
 8017082:	d138      	bne.n	80170f6 <_vfiprintf_r+0x1aa>
 8017084:	9b03      	ldr	r3, [sp, #12]
 8017086:	1d1a      	adds	r2, r3, #4
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	9203      	str	r2, [sp, #12]
 801708c:	2b00      	cmp	r3, #0
 801708e:	bfb8      	it	lt
 8017090:	f04f 33ff 	movlt.w	r3, #4294967295
 8017094:	f108 0802 	add.w	r8, r8, #2
 8017098:	9305      	str	r3, [sp, #20]
 801709a:	4d33      	ldr	r5, [pc, #204]	; (8017168 <_vfiprintf_r+0x21c>)
 801709c:	f898 1000 	ldrb.w	r1, [r8]
 80170a0:	2203      	movs	r2, #3
 80170a2:	4628      	mov	r0, r5
 80170a4:	f7e9 f8b4 	bl	8000210 <memchr>
 80170a8:	b140      	cbz	r0, 80170bc <_vfiprintf_r+0x170>
 80170aa:	2340      	movs	r3, #64	; 0x40
 80170ac:	1b40      	subs	r0, r0, r5
 80170ae:	fa03 f000 	lsl.w	r0, r3, r0
 80170b2:	9b04      	ldr	r3, [sp, #16]
 80170b4:	4303      	orrs	r3, r0
 80170b6:	f108 0801 	add.w	r8, r8, #1
 80170ba:	9304      	str	r3, [sp, #16]
 80170bc:	f898 1000 	ldrb.w	r1, [r8]
 80170c0:	482a      	ldr	r0, [pc, #168]	; (801716c <_vfiprintf_r+0x220>)
 80170c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170c6:	2206      	movs	r2, #6
 80170c8:	f108 0701 	add.w	r7, r8, #1
 80170cc:	f7e9 f8a0 	bl	8000210 <memchr>
 80170d0:	2800      	cmp	r0, #0
 80170d2:	d037      	beq.n	8017144 <_vfiprintf_r+0x1f8>
 80170d4:	4b26      	ldr	r3, [pc, #152]	; (8017170 <_vfiprintf_r+0x224>)
 80170d6:	bb1b      	cbnz	r3, 8017120 <_vfiprintf_r+0x1d4>
 80170d8:	9b03      	ldr	r3, [sp, #12]
 80170da:	3307      	adds	r3, #7
 80170dc:	f023 0307 	bic.w	r3, r3, #7
 80170e0:	3308      	adds	r3, #8
 80170e2:	9303      	str	r3, [sp, #12]
 80170e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170e6:	444b      	add	r3, r9
 80170e8:	9309      	str	r3, [sp, #36]	; 0x24
 80170ea:	e750      	b.n	8016f8e <_vfiprintf_r+0x42>
 80170ec:	fb05 3202 	mla	r2, r5, r2, r3
 80170f0:	2001      	movs	r0, #1
 80170f2:	4688      	mov	r8, r1
 80170f4:	e78a      	b.n	801700c <_vfiprintf_r+0xc0>
 80170f6:	2300      	movs	r3, #0
 80170f8:	f108 0801 	add.w	r8, r8, #1
 80170fc:	9305      	str	r3, [sp, #20]
 80170fe:	4619      	mov	r1, r3
 8017100:	250a      	movs	r5, #10
 8017102:	4640      	mov	r0, r8
 8017104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017108:	3a30      	subs	r2, #48	; 0x30
 801710a:	2a09      	cmp	r2, #9
 801710c:	d903      	bls.n	8017116 <_vfiprintf_r+0x1ca>
 801710e:	2b00      	cmp	r3, #0
 8017110:	d0c3      	beq.n	801709a <_vfiprintf_r+0x14e>
 8017112:	9105      	str	r1, [sp, #20]
 8017114:	e7c1      	b.n	801709a <_vfiprintf_r+0x14e>
 8017116:	fb05 2101 	mla	r1, r5, r1, r2
 801711a:	2301      	movs	r3, #1
 801711c:	4680      	mov	r8, r0
 801711e:	e7f0      	b.n	8017102 <_vfiprintf_r+0x1b6>
 8017120:	ab03      	add	r3, sp, #12
 8017122:	9300      	str	r3, [sp, #0]
 8017124:	4622      	mov	r2, r4
 8017126:	4b13      	ldr	r3, [pc, #76]	; (8017174 <_vfiprintf_r+0x228>)
 8017128:	a904      	add	r1, sp, #16
 801712a:	4630      	mov	r0, r6
 801712c:	f7fb fcf4 	bl	8012b18 <_printf_float>
 8017130:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017134:	4681      	mov	r9, r0
 8017136:	d1d5      	bne.n	80170e4 <_vfiprintf_r+0x198>
 8017138:	89a3      	ldrh	r3, [r4, #12]
 801713a:	065b      	lsls	r3, r3, #25
 801713c:	f53f af7e 	bmi.w	801703c <_vfiprintf_r+0xf0>
 8017140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017142:	e77d      	b.n	8017040 <_vfiprintf_r+0xf4>
 8017144:	ab03      	add	r3, sp, #12
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	4622      	mov	r2, r4
 801714a:	4b0a      	ldr	r3, [pc, #40]	; (8017174 <_vfiprintf_r+0x228>)
 801714c:	a904      	add	r1, sp, #16
 801714e:	4630      	mov	r0, r6
 8017150:	f7fb ff98 	bl	8013084 <_printf_i>
 8017154:	e7ec      	b.n	8017130 <_vfiprintf_r+0x1e4>
 8017156:	bf00      	nop
 8017158:	08017f50 	.word	0x08017f50
 801715c:	0801809c 	.word	0x0801809c
 8017160:	08017f70 	.word	0x08017f70
 8017164:	08017f30 	.word	0x08017f30
 8017168:	080180a2 	.word	0x080180a2
 801716c:	080180a6 	.word	0x080180a6
 8017170:	08012b19 	.word	0x08012b19
 8017174:	08016f27 	.word	0x08016f27

08017178 <_scanf_chars>:
 8017178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801717c:	4615      	mov	r5, r2
 801717e:	688a      	ldr	r2, [r1, #8]
 8017180:	4680      	mov	r8, r0
 8017182:	460c      	mov	r4, r1
 8017184:	b932      	cbnz	r2, 8017194 <_scanf_chars+0x1c>
 8017186:	698a      	ldr	r2, [r1, #24]
 8017188:	2a00      	cmp	r2, #0
 801718a:	bf14      	ite	ne
 801718c:	f04f 32ff 	movne.w	r2, #4294967295
 8017190:	2201      	moveq	r2, #1
 8017192:	608a      	str	r2, [r1, #8]
 8017194:	6822      	ldr	r2, [r4, #0]
 8017196:	06d1      	lsls	r1, r2, #27
 8017198:	bf5f      	itttt	pl
 801719a:	681a      	ldrpl	r2, [r3, #0]
 801719c:	1d11      	addpl	r1, r2, #4
 801719e:	6019      	strpl	r1, [r3, #0]
 80171a0:	6817      	ldrpl	r7, [r2, #0]
 80171a2:	2600      	movs	r6, #0
 80171a4:	69a3      	ldr	r3, [r4, #24]
 80171a6:	b1db      	cbz	r3, 80171e0 <_scanf_chars+0x68>
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d107      	bne.n	80171bc <_scanf_chars+0x44>
 80171ac:	682b      	ldr	r3, [r5, #0]
 80171ae:	6962      	ldr	r2, [r4, #20]
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	5cd3      	ldrb	r3, [r2, r3]
 80171b4:	b9a3      	cbnz	r3, 80171e0 <_scanf_chars+0x68>
 80171b6:	2e00      	cmp	r6, #0
 80171b8:	d132      	bne.n	8017220 <_scanf_chars+0xa8>
 80171ba:	e006      	b.n	80171ca <_scanf_chars+0x52>
 80171bc:	2b02      	cmp	r3, #2
 80171be:	d007      	beq.n	80171d0 <_scanf_chars+0x58>
 80171c0:	2e00      	cmp	r6, #0
 80171c2:	d12d      	bne.n	8017220 <_scanf_chars+0xa8>
 80171c4:	69a3      	ldr	r3, [r4, #24]
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d12a      	bne.n	8017220 <_scanf_chars+0xa8>
 80171ca:	2001      	movs	r0, #1
 80171cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171d0:	f7fe fe32 	bl	8015e38 <__locale_ctype_ptr>
 80171d4:	682b      	ldr	r3, [r5, #0]
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	4418      	add	r0, r3
 80171da:	7843      	ldrb	r3, [r0, #1]
 80171dc:	071b      	lsls	r3, r3, #28
 80171de:	d4ef      	bmi.n	80171c0 <_scanf_chars+0x48>
 80171e0:	6823      	ldr	r3, [r4, #0]
 80171e2:	06da      	lsls	r2, r3, #27
 80171e4:	bf5e      	ittt	pl
 80171e6:	682b      	ldrpl	r3, [r5, #0]
 80171e8:	781b      	ldrbpl	r3, [r3, #0]
 80171ea:	703b      	strbpl	r3, [r7, #0]
 80171ec:	682a      	ldr	r2, [r5, #0]
 80171ee:	686b      	ldr	r3, [r5, #4]
 80171f0:	f102 0201 	add.w	r2, r2, #1
 80171f4:	602a      	str	r2, [r5, #0]
 80171f6:	68a2      	ldr	r2, [r4, #8]
 80171f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80171fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8017200:	606b      	str	r3, [r5, #4]
 8017202:	f106 0601 	add.w	r6, r6, #1
 8017206:	bf58      	it	pl
 8017208:	3701      	addpl	r7, #1
 801720a:	60a2      	str	r2, [r4, #8]
 801720c:	b142      	cbz	r2, 8017220 <_scanf_chars+0xa8>
 801720e:	2b00      	cmp	r3, #0
 8017210:	dcc8      	bgt.n	80171a4 <_scanf_chars+0x2c>
 8017212:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017216:	4629      	mov	r1, r5
 8017218:	4640      	mov	r0, r8
 801721a:	4798      	blx	r3
 801721c:	2800      	cmp	r0, #0
 801721e:	d0c1      	beq.n	80171a4 <_scanf_chars+0x2c>
 8017220:	6823      	ldr	r3, [r4, #0]
 8017222:	f013 0310 	ands.w	r3, r3, #16
 8017226:	d105      	bne.n	8017234 <_scanf_chars+0xbc>
 8017228:	68e2      	ldr	r2, [r4, #12]
 801722a:	3201      	adds	r2, #1
 801722c:	60e2      	str	r2, [r4, #12]
 801722e:	69a2      	ldr	r2, [r4, #24]
 8017230:	b102      	cbz	r2, 8017234 <_scanf_chars+0xbc>
 8017232:	703b      	strb	r3, [r7, #0]
 8017234:	6923      	ldr	r3, [r4, #16]
 8017236:	441e      	add	r6, r3
 8017238:	6126      	str	r6, [r4, #16]
 801723a:	2000      	movs	r0, #0
 801723c:	e7c6      	b.n	80171cc <_scanf_chars+0x54>
	...

08017240 <_scanf_i>:
 8017240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017244:	469a      	mov	sl, r3
 8017246:	4b74      	ldr	r3, [pc, #464]	; (8017418 <_scanf_i+0x1d8>)
 8017248:	460c      	mov	r4, r1
 801724a:	4683      	mov	fp, r0
 801724c:	4616      	mov	r6, r2
 801724e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017252:	b087      	sub	sp, #28
 8017254:	ab03      	add	r3, sp, #12
 8017256:	68a7      	ldr	r7, [r4, #8]
 8017258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801725c:	4b6f      	ldr	r3, [pc, #444]	; (801741c <_scanf_i+0x1dc>)
 801725e:	69a1      	ldr	r1, [r4, #24]
 8017260:	4a6f      	ldr	r2, [pc, #444]	; (8017420 <_scanf_i+0x1e0>)
 8017262:	2903      	cmp	r1, #3
 8017264:	bf08      	it	eq
 8017266:	461a      	moveq	r2, r3
 8017268:	1e7b      	subs	r3, r7, #1
 801726a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801726e:	bf84      	itt	hi
 8017270:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017274:	60a3      	strhi	r3, [r4, #8]
 8017276:	6823      	ldr	r3, [r4, #0]
 8017278:	9200      	str	r2, [sp, #0]
 801727a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801727e:	bf88      	it	hi
 8017280:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017284:	f104 091c 	add.w	r9, r4, #28
 8017288:	6023      	str	r3, [r4, #0]
 801728a:	bf8c      	ite	hi
 801728c:	197f      	addhi	r7, r7, r5
 801728e:	2700      	movls	r7, #0
 8017290:	464b      	mov	r3, r9
 8017292:	f04f 0800 	mov.w	r8, #0
 8017296:	9301      	str	r3, [sp, #4]
 8017298:	6831      	ldr	r1, [r6, #0]
 801729a:	ab03      	add	r3, sp, #12
 801729c:	2202      	movs	r2, #2
 801729e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80172a2:	7809      	ldrb	r1, [r1, #0]
 80172a4:	f7e8 ffb4 	bl	8000210 <memchr>
 80172a8:	9b01      	ldr	r3, [sp, #4]
 80172aa:	b330      	cbz	r0, 80172fa <_scanf_i+0xba>
 80172ac:	f1b8 0f01 	cmp.w	r8, #1
 80172b0:	d15a      	bne.n	8017368 <_scanf_i+0x128>
 80172b2:	6862      	ldr	r2, [r4, #4]
 80172b4:	b92a      	cbnz	r2, 80172c2 <_scanf_i+0x82>
 80172b6:	6822      	ldr	r2, [r4, #0]
 80172b8:	2108      	movs	r1, #8
 80172ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80172be:	6061      	str	r1, [r4, #4]
 80172c0:	6022      	str	r2, [r4, #0]
 80172c2:	6822      	ldr	r2, [r4, #0]
 80172c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80172c8:	6022      	str	r2, [r4, #0]
 80172ca:	68a2      	ldr	r2, [r4, #8]
 80172cc:	1e51      	subs	r1, r2, #1
 80172ce:	60a1      	str	r1, [r4, #8]
 80172d0:	b19a      	cbz	r2, 80172fa <_scanf_i+0xba>
 80172d2:	6832      	ldr	r2, [r6, #0]
 80172d4:	1c51      	adds	r1, r2, #1
 80172d6:	6031      	str	r1, [r6, #0]
 80172d8:	7812      	ldrb	r2, [r2, #0]
 80172da:	701a      	strb	r2, [r3, #0]
 80172dc:	1c5d      	adds	r5, r3, #1
 80172de:	6873      	ldr	r3, [r6, #4]
 80172e0:	3b01      	subs	r3, #1
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	6073      	str	r3, [r6, #4]
 80172e6:	dc07      	bgt.n	80172f8 <_scanf_i+0xb8>
 80172e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80172ec:	4631      	mov	r1, r6
 80172ee:	4658      	mov	r0, fp
 80172f0:	4798      	blx	r3
 80172f2:	2800      	cmp	r0, #0
 80172f4:	f040 8086 	bne.w	8017404 <_scanf_i+0x1c4>
 80172f8:	462b      	mov	r3, r5
 80172fa:	f108 0801 	add.w	r8, r8, #1
 80172fe:	f1b8 0f03 	cmp.w	r8, #3
 8017302:	d1c8      	bne.n	8017296 <_scanf_i+0x56>
 8017304:	6862      	ldr	r2, [r4, #4]
 8017306:	b90a      	cbnz	r2, 801730c <_scanf_i+0xcc>
 8017308:	220a      	movs	r2, #10
 801730a:	6062      	str	r2, [r4, #4]
 801730c:	6862      	ldr	r2, [r4, #4]
 801730e:	4945      	ldr	r1, [pc, #276]	; (8017424 <_scanf_i+0x1e4>)
 8017310:	6960      	ldr	r0, [r4, #20]
 8017312:	9301      	str	r3, [sp, #4]
 8017314:	1a89      	subs	r1, r1, r2
 8017316:	f000 f8a9 	bl	801746c <__sccl>
 801731a:	9b01      	ldr	r3, [sp, #4]
 801731c:	f04f 0800 	mov.w	r8, #0
 8017320:	461d      	mov	r5, r3
 8017322:	68a3      	ldr	r3, [r4, #8]
 8017324:	6822      	ldr	r2, [r4, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d03a      	beq.n	80173a0 <_scanf_i+0x160>
 801732a:	6831      	ldr	r1, [r6, #0]
 801732c:	6960      	ldr	r0, [r4, #20]
 801732e:	f891 c000 	ldrb.w	ip, [r1]
 8017332:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017336:	2800      	cmp	r0, #0
 8017338:	d032      	beq.n	80173a0 <_scanf_i+0x160>
 801733a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801733e:	d121      	bne.n	8017384 <_scanf_i+0x144>
 8017340:	0510      	lsls	r0, r2, #20
 8017342:	d51f      	bpl.n	8017384 <_scanf_i+0x144>
 8017344:	f108 0801 	add.w	r8, r8, #1
 8017348:	b117      	cbz	r7, 8017350 <_scanf_i+0x110>
 801734a:	3301      	adds	r3, #1
 801734c:	3f01      	subs	r7, #1
 801734e:	60a3      	str	r3, [r4, #8]
 8017350:	6873      	ldr	r3, [r6, #4]
 8017352:	3b01      	subs	r3, #1
 8017354:	2b00      	cmp	r3, #0
 8017356:	6073      	str	r3, [r6, #4]
 8017358:	dd1b      	ble.n	8017392 <_scanf_i+0x152>
 801735a:	6833      	ldr	r3, [r6, #0]
 801735c:	3301      	adds	r3, #1
 801735e:	6033      	str	r3, [r6, #0]
 8017360:	68a3      	ldr	r3, [r4, #8]
 8017362:	3b01      	subs	r3, #1
 8017364:	60a3      	str	r3, [r4, #8]
 8017366:	e7dc      	b.n	8017322 <_scanf_i+0xe2>
 8017368:	f1b8 0f02 	cmp.w	r8, #2
 801736c:	d1ad      	bne.n	80172ca <_scanf_i+0x8a>
 801736e:	6822      	ldr	r2, [r4, #0]
 8017370:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017374:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017378:	d1bf      	bne.n	80172fa <_scanf_i+0xba>
 801737a:	2110      	movs	r1, #16
 801737c:	6061      	str	r1, [r4, #4]
 801737e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017382:	e7a1      	b.n	80172c8 <_scanf_i+0x88>
 8017384:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017388:	6022      	str	r2, [r4, #0]
 801738a:	780b      	ldrb	r3, [r1, #0]
 801738c:	702b      	strb	r3, [r5, #0]
 801738e:	3501      	adds	r5, #1
 8017390:	e7de      	b.n	8017350 <_scanf_i+0x110>
 8017392:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017396:	4631      	mov	r1, r6
 8017398:	4658      	mov	r0, fp
 801739a:	4798      	blx	r3
 801739c:	2800      	cmp	r0, #0
 801739e:	d0df      	beq.n	8017360 <_scanf_i+0x120>
 80173a0:	6823      	ldr	r3, [r4, #0]
 80173a2:	05d9      	lsls	r1, r3, #23
 80173a4:	d50c      	bpl.n	80173c0 <_scanf_i+0x180>
 80173a6:	454d      	cmp	r5, r9
 80173a8:	d908      	bls.n	80173bc <_scanf_i+0x17c>
 80173aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80173ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80173b2:	4632      	mov	r2, r6
 80173b4:	4658      	mov	r0, fp
 80173b6:	4798      	blx	r3
 80173b8:	1e6f      	subs	r7, r5, #1
 80173ba:	463d      	mov	r5, r7
 80173bc:	454d      	cmp	r5, r9
 80173be:	d029      	beq.n	8017414 <_scanf_i+0x1d4>
 80173c0:	6822      	ldr	r2, [r4, #0]
 80173c2:	f012 0210 	ands.w	r2, r2, #16
 80173c6:	d113      	bne.n	80173f0 <_scanf_i+0x1b0>
 80173c8:	702a      	strb	r2, [r5, #0]
 80173ca:	6863      	ldr	r3, [r4, #4]
 80173cc:	9e00      	ldr	r6, [sp, #0]
 80173ce:	4649      	mov	r1, r9
 80173d0:	4658      	mov	r0, fp
 80173d2:	47b0      	blx	r6
 80173d4:	f8da 3000 	ldr.w	r3, [sl]
 80173d8:	6821      	ldr	r1, [r4, #0]
 80173da:	1d1a      	adds	r2, r3, #4
 80173dc:	f8ca 2000 	str.w	r2, [sl]
 80173e0:	f011 0f20 	tst.w	r1, #32
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	d010      	beq.n	801740a <_scanf_i+0x1ca>
 80173e8:	6018      	str	r0, [r3, #0]
 80173ea:	68e3      	ldr	r3, [r4, #12]
 80173ec:	3301      	adds	r3, #1
 80173ee:	60e3      	str	r3, [r4, #12]
 80173f0:	eba5 0509 	sub.w	r5, r5, r9
 80173f4:	44a8      	add	r8, r5
 80173f6:	6925      	ldr	r5, [r4, #16]
 80173f8:	4445      	add	r5, r8
 80173fa:	6125      	str	r5, [r4, #16]
 80173fc:	2000      	movs	r0, #0
 80173fe:	b007      	add	sp, #28
 8017400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017404:	f04f 0800 	mov.w	r8, #0
 8017408:	e7ca      	b.n	80173a0 <_scanf_i+0x160>
 801740a:	07ca      	lsls	r2, r1, #31
 801740c:	bf4c      	ite	mi
 801740e:	8018      	strhmi	r0, [r3, #0]
 8017410:	6018      	strpl	r0, [r3, #0]
 8017412:	e7ea      	b.n	80173ea <_scanf_i+0x1aa>
 8017414:	2001      	movs	r0, #1
 8017416:	e7f2      	b.n	80173fe <_scanf_i+0x1be>
 8017418:	08017bf8 	.word	0x08017bf8
 801741c:	08014641 	.word	0x08014641
 8017420:	080175e9 	.word	0x080175e9
 8017424:	080180bd 	.word	0x080180bd

08017428 <_read_r>:
 8017428:	b538      	push	{r3, r4, r5, lr}
 801742a:	4c07      	ldr	r4, [pc, #28]	; (8017448 <_read_r+0x20>)
 801742c:	4605      	mov	r5, r0
 801742e:	4608      	mov	r0, r1
 8017430:	4611      	mov	r1, r2
 8017432:	2200      	movs	r2, #0
 8017434:	6022      	str	r2, [r4, #0]
 8017436:	461a      	mov	r2, r3
 8017438:	f7ee f992 	bl	8005760 <_read>
 801743c:	1c43      	adds	r3, r0, #1
 801743e:	d102      	bne.n	8017446 <_read_r+0x1e>
 8017440:	6823      	ldr	r3, [r4, #0]
 8017442:	b103      	cbz	r3, 8017446 <_read_r+0x1e>
 8017444:	602b      	str	r3, [r5, #0]
 8017446:	bd38      	pop	{r3, r4, r5, pc}
 8017448:	2002faf4 	.word	0x2002faf4

0801744c <_sbrk_r>:
 801744c:	b538      	push	{r3, r4, r5, lr}
 801744e:	4c06      	ldr	r4, [pc, #24]	; (8017468 <_sbrk_r+0x1c>)
 8017450:	2300      	movs	r3, #0
 8017452:	4605      	mov	r5, r0
 8017454:	4608      	mov	r0, r1
 8017456:	6023      	str	r3, [r4, #0]
 8017458:	f7ee f9d4 	bl	8005804 <_sbrk>
 801745c:	1c43      	adds	r3, r0, #1
 801745e:	d102      	bne.n	8017466 <_sbrk_r+0x1a>
 8017460:	6823      	ldr	r3, [r4, #0]
 8017462:	b103      	cbz	r3, 8017466 <_sbrk_r+0x1a>
 8017464:	602b      	str	r3, [r5, #0]
 8017466:	bd38      	pop	{r3, r4, r5, pc}
 8017468:	2002faf4 	.word	0x2002faf4

0801746c <__sccl>:
 801746c:	b570      	push	{r4, r5, r6, lr}
 801746e:	780b      	ldrb	r3, [r1, #0]
 8017470:	2b5e      	cmp	r3, #94	; 0x5e
 8017472:	bf13      	iteet	ne
 8017474:	1c4a      	addne	r2, r1, #1
 8017476:	1c8a      	addeq	r2, r1, #2
 8017478:	784b      	ldrbeq	r3, [r1, #1]
 801747a:	2100      	movne	r1, #0
 801747c:	bf08      	it	eq
 801747e:	2101      	moveq	r1, #1
 8017480:	1e44      	subs	r4, r0, #1
 8017482:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017486:	f804 1f01 	strb.w	r1, [r4, #1]!
 801748a:	42ac      	cmp	r4, r5
 801748c:	d1fb      	bne.n	8017486 <__sccl+0x1a>
 801748e:	b913      	cbnz	r3, 8017496 <__sccl+0x2a>
 8017490:	3a01      	subs	r2, #1
 8017492:	4610      	mov	r0, r2
 8017494:	bd70      	pop	{r4, r5, r6, pc}
 8017496:	f081 0401 	eor.w	r4, r1, #1
 801749a:	54c4      	strb	r4, [r0, r3]
 801749c:	1c51      	adds	r1, r2, #1
 801749e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80174a2:	2d2d      	cmp	r5, #45	; 0x2d
 80174a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80174a8:	460a      	mov	r2, r1
 80174aa:	d006      	beq.n	80174ba <__sccl+0x4e>
 80174ac:	2d5d      	cmp	r5, #93	; 0x5d
 80174ae:	d0f0      	beq.n	8017492 <__sccl+0x26>
 80174b0:	b90d      	cbnz	r5, 80174b6 <__sccl+0x4a>
 80174b2:	4632      	mov	r2, r6
 80174b4:	e7ed      	b.n	8017492 <__sccl+0x26>
 80174b6:	462b      	mov	r3, r5
 80174b8:	e7ef      	b.n	801749a <__sccl+0x2e>
 80174ba:	780e      	ldrb	r6, [r1, #0]
 80174bc:	2e5d      	cmp	r6, #93	; 0x5d
 80174be:	d0fa      	beq.n	80174b6 <__sccl+0x4a>
 80174c0:	42b3      	cmp	r3, r6
 80174c2:	dcf8      	bgt.n	80174b6 <__sccl+0x4a>
 80174c4:	3301      	adds	r3, #1
 80174c6:	429e      	cmp	r6, r3
 80174c8:	54c4      	strb	r4, [r0, r3]
 80174ca:	dcfb      	bgt.n	80174c4 <__sccl+0x58>
 80174cc:	3102      	adds	r1, #2
 80174ce:	e7e6      	b.n	801749e <__sccl+0x32>

080174d0 <strncmp>:
 80174d0:	b510      	push	{r4, lr}
 80174d2:	b16a      	cbz	r2, 80174f0 <strncmp+0x20>
 80174d4:	3901      	subs	r1, #1
 80174d6:	1884      	adds	r4, r0, r2
 80174d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80174dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80174e0:	4293      	cmp	r3, r2
 80174e2:	d103      	bne.n	80174ec <strncmp+0x1c>
 80174e4:	42a0      	cmp	r0, r4
 80174e6:	d001      	beq.n	80174ec <strncmp+0x1c>
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d1f5      	bne.n	80174d8 <strncmp+0x8>
 80174ec:	1a98      	subs	r0, r3, r2
 80174ee:	bd10      	pop	{r4, pc}
 80174f0:	4610      	mov	r0, r2
 80174f2:	e7fc      	b.n	80174ee <strncmp+0x1e>

080174f4 <_strtoul_l.isra.0>:
 80174f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174f8:	4680      	mov	r8, r0
 80174fa:	4689      	mov	r9, r1
 80174fc:	4692      	mov	sl, r2
 80174fe:	461e      	mov	r6, r3
 8017500:	460f      	mov	r7, r1
 8017502:	463d      	mov	r5, r7
 8017504:	9808      	ldr	r0, [sp, #32]
 8017506:	f815 4b01 	ldrb.w	r4, [r5], #1
 801750a:	f7fe fc91 	bl	8015e30 <__locale_ctype_ptr_l>
 801750e:	4420      	add	r0, r4
 8017510:	7843      	ldrb	r3, [r0, #1]
 8017512:	f013 0308 	ands.w	r3, r3, #8
 8017516:	d130      	bne.n	801757a <_strtoul_l.isra.0+0x86>
 8017518:	2c2d      	cmp	r4, #45	; 0x2d
 801751a:	d130      	bne.n	801757e <_strtoul_l.isra.0+0x8a>
 801751c:	787c      	ldrb	r4, [r7, #1]
 801751e:	1cbd      	adds	r5, r7, #2
 8017520:	2101      	movs	r1, #1
 8017522:	2e00      	cmp	r6, #0
 8017524:	d05c      	beq.n	80175e0 <_strtoul_l.isra.0+0xec>
 8017526:	2e10      	cmp	r6, #16
 8017528:	d109      	bne.n	801753e <_strtoul_l.isra.0+0x4a>
 801752a:	2c30      	cmp	r4, #48	; 0x30
 801752c:	d107      	bne.n	801753e <_strtoul_l.isra.0+0x4a>
 801752e:	782b      	ldrb	r3, [r5, #0]
 8017530:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017534:	2b58      	cmp	r3, #88	; 0x58
 8017536:	d14e      	bne.n	80175d6 <_strtoul_l.isra.0+0xe2>
 8017538:	786c      	ldrb	r4, [r5, #1]
 801753a:	2610      	movs	r6, #16
 801753c:	3502      	adds	r5, #2
 801753e:	f04f 32ff 	mov.w	r2, #4294967295
 8017542:	2300      	movs	r3, #0
 8017544:	fbb2 f2f6 	udiv	r2, r2, r6
 8017548:	fb06 fc02 	mul.w	ip, r6, r2
 801754c:	ea6f 0c0c 	mvn.w	ip, ip
 8017550:	4618      	mov	r0, r3
 8017552:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017556:	2f09      	cmp	r7, #9
 8017558:	d817      	bhi.n	801758a <_strtoul_l.isra.0+0x96>
 801755a:	463c      	mov	r4, r7
 801755c:	42a6      	cmp	r6, r4
 801755e:	dd23      	ble.n	80175a8 <_strtoul_l.isra.0+0xb4>
 8017560:	2b00      	cmp	r3, #0
 8017562:	db1e      	blt.n	80175a2 <_strtoul_l.isra.0+0xae>
 8017564:	4282      	cmp	r2, r0
 8017566:	d31c      	bcc.n	80175a2 <_strtoul_l.isra.0+0xae>
 8017568:	d101      	bne.n	801756e <_strtoul_l.isra.0+0x7a>
 801756a:	45a4      	cmp	ip, r4
 801756c:	db19      	blt.n	80175a2 <_strtoul_l.isra.0+0xae>
 801756e:	fb00 4006 	mla	r0, r0, r6, r4
 8017572:	2301      	movs	r3, #1
 8017574:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017578:	e7eb      	b.n	8017552 <_strtoul_l.isra.0+0x5e>
 801757a:	462f      	mov	r7, r5
 801757c:	e7c1      	b.n	8017502 <_strtoul_l.isra.0+0xe>
 801757e:	2c2b      	cmp	r4, #43	; 0x2b
 8017580:	bf04      	itt	eq
 8017582:	1cbd      	addeq	r5, r7, #2
 8017584:	787c      	ldrbeq	r4, [r7, #1]
 8017586:	4619      	mov	r1, r3
 8017588:	e7cb      	b.n	8017522 <_strtoul_l.isra.0+0x2e>
 801758a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801758e:	2f19      	cmp	r7, #25
 8017590:	d801      	bhi.n	8017596 <_strtoul_l.isra.0+0xa2>
 8017592:	3c37      	subs	r4, #55	; 0x37
 8017594:	e7e2      	b.n	801755c <_strtoul_l.isra.0+0x68>
 8017596:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801759a:	2f19      	cmp	r7, #25
 801759c:	d804      	bhi.n	80175a8 <_strtoul_l.isra.0+0xb4>
 801759e:	3c57      	subs	r4, #87	; 0x57
 80175a0:	e7dc      	b.n	801755c <_strtoul_l.isra.0+0x68>
 80175a2:	f04f 33ff 	mov.w	r3, #4294967295
 80175a6:	e7e5      	b.n	8017574 <_strtoul_l.isra.0+0x80>
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	da09      	bge.n	80175c0 <_strtoul_l.isra.0+0xcc>
 80175ac:	2322      	movs	r3, #34	; 0x22
 80175ae:	f8c8 3000 	str.w	r3, [r8]
 80175b2:	f04f 30ff 	mov.w	r0, #4294967295
 80175b6:	f1ba 0f00 	cmp.w	sl, #0
 80175ba:	d107      	bne.n	80175cc <_strtoul_l.isra.0+0xd8>
 80175bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175c0:	b101      	cbz	r1, 80175c4 <_strtoul_l.isra.0+0xd0>
 80175c2:	4240      	negs	r0, r0
 80175c4:	f1ba 0f00 	cmp.w	sl, #0
 80175c8:	d0f8      	beq.n	80175bc <_strtoul_l.isra.0+0xc8>
 80175ca:	b10b      	cbz	r3, 80175d0 <_strtoul_l.isra.0+0xdc>
 80175cc:	f105 39ff 	add.w	r9, r5, #4294967295
 80175d0:	f8ca 9000 	str.w	r9, [sl]
 80175d4:	e7f2      	b.n	80175bc <_strtoul_l.isra.0+0xc8>
 80175d6:	2430      	movs	r4, #48	; 0x30
 80175d8:	2e00      	cmp	r6, #0
 80175da:	d1b0      	bne.n	801753e <_strtoul_l.isra.0+0x4a>
 80175dc:	2608      	movs	r6, #8
 80175de:	e7ae      	b.n	801753e <_strtoul_l.isra.0+0x4a>
 80175e0:	2c30      	cmp	r4, #48	; 0x30
 80175e2:	d0a4      	beq.n	801752e <_strtoul_l.isra.0+0x3a>
 80175e4:	260a      	movs	r6, #10
 80175e6:	e7aa      	b.n	801753e <_strtoul_l.isra.0+0x4a>

080175e8 <_strtoul_r>:
 80175e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175ea:	4c06      	ldr	r4, [pc, #24]	; (8017604 <_strtoul_r+0x1c>)
 80175ec:	4d06      	ldr	r5, [pc, #24]	; (8017608 <_strtoul_r+0x20>)
 80175ee:	6824      	ldr	r4, [r4, #0]
 80175f0:	6a24      	ldr	r4, [r4, #32]
 80175f2:	2c00      	cmp	r4, #0
 80175f4:	bf08      	it	eq
 80175f6:	462c      	moveq	r4, r5
 80175f8:	9400      	str	r4, [sp, #0]
 80175fa:	f7ff ff7b 	bl	80174f4 <_strtoul_l.isra.0>
 80175fe:	b003      	add	sp, #12
 8017600:	bd30      	pop	{r4, r5, pc}
 8017602:	bf00      	nop
 8017604:	2000000c 	.word	0x2000000c
 8017608:	20000070 	.word	0x20000070

0801760c <__submore>:
 801760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017610:	460c      	mov	r4, r1
 8017612:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017618:	4299      	cmp	r1, r3
 801761a:	d11d      	bne.n	8017658 <__submore+0x4c>
 801761c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017620:	f7ff f914 	bl	801684c <_malloc_r>
 8017624:	b918      	cbnz	r0, 801762e <__submore+0x22>
 8017626:	f04f 30ff 	mov.w	r0, #4294967295
 801762a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017632:	63a3      	str	r3, [r4, #56]	; 0x38
 8017634:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017638:	6360      	str	r0, [r4, #52]	; 0x34
 801763a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801763e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017642:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017646:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801764a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801764e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017652:	6020      	str	r0, [r4, #0]
 8017654:	2000      	movs	r0, #0
 8017656:	e7e8      	b.n	801762a <__submore+0x1e>
 8017658:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801765a:	0077      	lsls	r7, r6, #1
 801765c:	463a      	mov	r2, r7
 801765e:	f000 f85a 	bl	8017716 <_realloc_r>
 8017662:	4605      	mov	r5, r0
 8017664:	2800      	cmp	r0, #0
 8017666:	d0de      	beq.n	8017626 <__submore+0x1a>
 8017668:	eb00 0806 	add.w	r8, r0, r6
 801766c:	4601      	mov	r1, r0
 801766e:	4632      	mov	r2, r6
 8017670:	4640      	mov	r0, r8
 8017672:	f7fb f9a9 	bl	80129c8 <memcpy>
 8017676:	f8c4 8000 	str.w	r8, [r4]
 801767a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801767e:	e7e9      	b.n	8017654 <__submore+0x48>

08017680 <__ascii_wctomb>:
 8017680:	b149      	cbz	r1, 8017696 <__ascii_wctomb+0x16>
 8017682:	2aff      	cmp	r2, #255	; 0xff
 8017684:	bf85      	ittet	hi
 8017686:	238a      	movhi	r3, #138	; 0x8a
 8017688:	6003      	strhi	r3, [r0, #0]
 801768a:	700a      	strbls	r2, [r1, #0]
 801768c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017690:	bf98      	it	ls
 8017692:	2001      	movls	r0, #1
 8017694:	4770      	bx	lr
 8017696:	4608      	mov	r0, r1
 8017698:	4770      	bx	lr
	...

0801769c <_fstat_r>:
 801769c:	b538      	push	{r3, r4, r5, lr}
 801769e:	4c07      	ldr	r4, [pc, #28]	; (80176bc <_fstat_r+0x20>)
 80176a0:	2300      	movs	r3, #0
 80176a2:	4605      	mov	r5, r0
 80176a4:	4608      	mov	r0, r1
 80176a6:	4611      	mov	r1, r2
 80176a8:	6023      	str	r3, [r4, #0]
 80176aa:	f7ee f882 	bl	80057b2 <_fstat>
 80176ae:	1c43      	adds	r3, r0, #1
 80176b0:	d102      	bne.n	80176b8 <_fstat_r+0x1c>
 80176b2:	6823      	ldr	r3, [r4, #0]
 80176b4:	b103      	cbz	r3, 80176b8 <_fstat_r+0x1c>
 80176b6:	602b      	str	r3, [r5, #0]
 80176b8:	bd38      	pop	{r3, r4, r5, pc}
 80176ba:	bf00      	nop
 80176bc:	2002faf4 	.word	0x2002faf4

080176c0 <_isatty_r>:
 80176c0:	b538      	push	{r3, r4, r5, lr}
 80176c2:	4c06      	ldr	r4, [pc, #24]	; (80176dc <_isatty_r+0x1c>)
 80176c4:	2300      	movs	r3, #0
 80176c6:	4605      	mov	r5, r0
 80176c8:	4608      	mov	r0, r1
 80176ca:	6023      	str	r3, [r4, #0]
 80176cc:	f7ee f881 	bl	80057d2 <_isatty>
 80176d0:	1c43      	adds	r3, r0, #1
 80176d2:	d102      	bne.n	80176da <_isatty_r+0x1a>
 80176d4:	6823      	ldr	r3, [r4, #0]
 80176d6:	b103      	cbz	r3, 80176da <_isatty_r+0x1a>
 80176d8:	602b      	str	r3, [r5, #0]
 80176da:	bd38      	pop	{r3, r4, r5, pc}
 80176dc:	2002faf4 	.word	0x2002faf4

080176e0 <memmove>:
 80176e0:	4288      	cmp	r0, r1
 80176e2:	b510      	push	{r4, lr}
 80176e4:	eb01 0302 	add.w	r3, r1, r2
 80176e8:	d807      	bhi.n	80176fa <memmove+0x1a>
 80176ea:	1e42      	subs	r2, r0, #1
 80176ec:	4299      	cmp	r1, r3
 80176ee:	d00a      	beq.n	8017706 <memmove+0x26>
 80176f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80176f8:	e7f8      	b.n	80176ec <memmove+0xc>
 80176fa:	4283      	cmp	r3, r0
 80176fc:	d9f5      	bls.n	80176ea <memmove+0xa>
 80176fe:	1881      	adds	r1, r0, r2
 8017700:	1ad2      	subs	r2, r2, r3
 8017702:	42d3      	cmn	r3, r2
 8017704:	d100      	bne.n	8017708 <memmove+0x28>
 8017706:	bd10      	pop	{r4, pc}
 8017708:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801770c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017710:	e7f7      	b.n	8017702 <memmove+0x22>

08017712 <__malloc_lock>:
 8017712:	4770      	bx	lr

08017714 <__malloc_unlock>:
 8017714:	4770      	bx	lr

08017716 <_realloc_r>:
 8017716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017718:	4607      	mov	r7, r0
 801771a:	4614      	mov	r4, r2
 801771c:	460e      	mov	r6, r1
 801771e:	b921      	cbnz	r1, 801772a <_realloc_r+0x14>
 8017720:	4611      	mov	r1, r2
 8017722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017726:	f7ff b891 	b.w	801684c <_malloc_r>
 801772a:	b922      	cbnz	r2, 8017736 <_realloc_r+0x20>
 801772c:	f7ff f840 	bl	80167b0 <_free_r>
 8017730:	4625      	mov	r5, r4
 8017732:	4628      	mov	r0, r5
 8017734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017736:	f000 f814 	bl	8017762 <_malloc_usable_size_r>
 801773a:	42a0      	cmp	r0, r4
 801773c:	d20f      	bcs.n	801775e <_realloc_r+0x48>
 801773e:	4621      	mov	r1, r4
 8017740:	4638      	mov	r0, r7
 8017742:	f7ff f883 	bl	801684c <_malloc_r>
 8017746:	4605      	mov	r5, r0
 8017748:	2800      	cmp	r0, #0
 801774a:	d0f2      	beq.n	8017732 <_realloc_r+0x1c>
 801774c:	4631      	mov	r1, r6
 801774e:	4622      	mov	r2, r4
 8017750:	f7fb f93a 	bl	80129c8 <memcpy>
 8017754:	4631      	mov	r1, r6
 8017756:	4638      	mov	r0, r7
 8017758:	f7ff f82a 	bl	80167b0 <_free_r>
 801775c:	e7e9      	b.n	8017732 <_realloc_r+0x1c>
 801775e:	4635      	mov	r5, r6
 8017760:	e7e7      	b.n	8017732 <_realloc_r+0x1c>

08017762 <_malloc_usable_size_r>:
 8017762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017766:	1f18      	subs	r0, r3, #4
 8017768:	2b00      	cmp	r3, #0
 801776a:	bfbc      	itt	lt
 801776c:	580b      	ldrlt	r3, [r1, r0]
 801776e:	18c0      	addlt	r0, r0, r3
 8017770:	4770      	bx	lr
	...

08017774 <_init>:
 8017774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017776:	bf00      	nop
 8017778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801777a:	bc08      	pop	{r3}
 801777c:	469e      	mov	lr, r3
 801777e:	4770      	bx	lr

08017780 <_fini>:
 8017780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017782:	bf00      	nop
 8017784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017786:	bc08      	pop	{r3}
 8017788:	469e      	mov	lr, r3
 801778a:	4770      	bx	lr
