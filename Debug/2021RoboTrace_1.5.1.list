
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019670  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  08019830  08019830  00029830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a46c  0801a46c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a46c  0801a46c  0002a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a474  0801a474  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a474  0801a474  0002a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a47c  0801a47c  0002a47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a480  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045b20  200001e0  0801a65c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20045d00  0801a65c  00035d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003af2a  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bbd  00000000  00000000  0006b136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002350  00000000  00000000  00072cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002080  00000000  00000000  00075048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035499  00000000  00000000  000770c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002662c  00000000  00000000  000ac561  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011101c  00000000  00000000  000d2b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3ba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7b8  00000000  00000000  001e3c24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019818 	.word	0x08019818

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019818 	.word	0x08019818

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a f8c2 	bl	800b160 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200437f8 	.word	0x200437f8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f8aa 	bl	800b160 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200437f8 	.word	0x200437f8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 ff4b 	bl	800aebc <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fcb2 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fcac 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fca6 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fca0 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fc9a 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fc94 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fc8e 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fc88 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fc82 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fc7c 	bl	8009990 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fc70 	bl	8009990 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fc6a 	bl	8009990 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 ff49 	bl	8016fc0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fd7a 	bl	800ecf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fd76 	bl	800ecf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fd72 	bl	800ecf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fd6e 	bl	800ecf0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200438e4 	.word	0x200438e4
 8001248:	2004384c 	.word	0x2004384c
 800124c:	2004396c 	.word	0x2004396c

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200438e4 	.word	0x200438e4
 800137c:	2004396c 	.word	0x2004396c
 8001380:	2004384c 	.word	0x2004384c

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200438e4 	.word	0x200438e4
 80013c4:	2004384c 	.word	0x2004384c
 80013c8:	2004396c 	.word	0x2004396c

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fd2e 	bl	800ee90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fd2a 	bl	800ee90 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20043a4c 	.word	0x20043a4c
 8001458:	20043730 	.word	0x20043730
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f900 	bl	80019b0 <create_path>

	if(state == OVER_WRITE){
 80017b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d108      	bne.n	80017ca <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80017b8:	4822      	ldr	r0, [pc, #136]	; (8001844 <sd_write_array_float+0xb0>)
 80017ba:	f012 f8ed 	bl	8013998 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80017be:	4822      	ldr	r0, [pc, #136]	; (8001848 <sd_write_array_float+0xb4>)
 80017c0:	f012 fb58 	bl	8013e74 <f_unlink>
		f_chdir("..");
 80017c4:	4821      	ldr	r0, [pc, #132]	; (800184c <sd_write_array_float+0xb8>)
 80017c6:	f012 f8e7 	bl	8013998 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80017ca:	f000 f907 	bl	80019dc <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	82fb      	strh	r3, [r7, #22]
 80017d2:	e028      	b.n	8001826 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fec9 	bl	8000578 <__aeabi_f2d>
 80017e6:	4603      	mov	r3, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	e9cd 3400 	strd	r3, r4, [sp]
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <sd_write_array_float+0xbc>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <sd_write_array_float+0xc0>)
 80017f4:	f014 fc98 	bl	8016128 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <sd_write_array_float+0xc4>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4816      	ldr	r0, [pc, #88]	; (8001858 <sd_write_array_float+0xc4>)
 8001800:	f012 f914 	bl	8013a2c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <sd_write_array_float+0xc0>)
 8001806:	f7fe fcfb 	bl	8000200 <strlen>
 800180a:	4602      	mov	r2, r0
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <sd_write_array_float+0xc8>)
 800180e:	4911      	ldr	r1, [pc, #68]	; (8001854 <sd_write_array_float+0xc0>)
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <sd_write_array_float+0xc4>)
 8001812:	f011 fe82 	bl	801351a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001816:	f000 f8fb 	bl	8001a10 <bufclear>
	for(short i = 0 ; i < size; i++){
 800181a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800181e:	b29b      	uxth	r3, r3
 8001820:	3301      	adds	r3, #1
 8001822:	b29b      	uxth	r3, r3
 8001824:	82fb      	strh	r3, [r7, #22]
 8001826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800182a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182e:	429a      	cmp	r2, r3
 8001830:	dbd0      	blt.n	80017d4 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <sd_write_array_float+0xc4>)
 8001834:	f012 f886 	bl	8013944 <f_close>

	return ret;
 8001838:	7d7b      	ldrb	r3, [r7, #21]
}
 800183a:	4618      	mov	r0, r3
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	bf00      	nop
 8001844:	200424ac 	.word	0x200424ac
 8001848:	2004136c 	.word	0x2004136c
 800184c:	0801984c 	.word	0x0801984c
 8001850:	08019830 	.word	0x08019830
 8001854:	200425ac 	.word	0x200425ac
 8001858:	2004263c 	.word	0x2004263c
 800185c:	2004262c 	.word	0x2004262c

08001860 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f898 	bl	80019b0 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001880:	f000 f8ac 	bl	80019dc <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001884:	e019      	b.n	80018ba <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4913      	ldr	r1, [pc, #76]	; (80018e0 <sd_read_array_float+0x80>)
 8001894:	4813      	ldr	r0, [pc, #76]	; (80018e4 <sd_read_array_float+0x84>)
 8001896:	f014 fc9b 	bl	80161d0 <siscanf>
		i++;
 800189a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80018a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	db03      	blt.n	80018ba <sd_read_array_float+0x5a>
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <sd_read_array_float+0x88>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <sd_read_array_float+0x84>)
 80018c0:	f012 fcb6 	bl	8014230 <f_gets>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1dd      	bne.n	8001886 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80018ca:	f000 f8a1 	bl	8001a10 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <sd_read_array_float+0x88>)
 80018d0:	f012 f838 	bl	8013944 <f_close>

	return ret;
 80018d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	0801983c 	.word	0x0801983c
 80018e4:	200425ac 	.word	0x200425ac
 80018e8:	2004263c 	.word	0x2004263c

080018ec <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f852 	bl	80019b0 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800190c:	f000 f866 	bl	80019dc <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001910:	e019      	b.n	8001946 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001912:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	4413      	add	r3, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4913      	ldr	r1, [pc, #76]	; (800196c <sd_read_array_double+0x80>)
 8001920:	4813      	ldr	r0, [pc, #76]	; (8001970 <sd_read_array_double+0x84>)
 8001922:	f014 fc55 	bl	80161d0 <siscanf>
		i++;
 8001926:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800192a:	b29b      	uxth	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001932:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	429a      	cmp	r2, r3
 800193c:	db03      	blt.n	8001946 <sd_read_array_double+0x5a>
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	3b01      	subs	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <sd_read_array_double+0x88>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	4809      	ldr	r0, [pc, #36]	; (8001970 <sd_read_array_double+0x84>)
 800194c:	f012 fc70 	bl	8014230 <f_gets>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1dd      	bne.n	8001912 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001956:	f000 f85b 	bl	8001a10 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <sd_read_array_double+0x88>)
 800195c:	f011 fff2 	bl	8013944 <f_close>

	return ret;
 8001960:	7d7b      	ldrb	r3, [r7, #21]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08019848 	.word	0x08019848
 8001970:	200425ac 	.word	0x200425ac
 8001974:	2004263c 	.word	0x2004263c

08001978 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001982:	2201      	movs	r2, #1
 8001984:	4908      	ldr	r1, [pc, #32]	; (80019a8 <sd_mount+0x30>)
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_mount+0x34>)
 8001988:	f011 fa54 	bl	8012e34 <f_mount>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <sd_mount+0x20>
 8001992:	2301      	movs	r3, #1
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	e001      	b.n	800199c <sd_mount+0x24>
	else ret = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800199c:	79fb      	ldrb	r3, [r7, #7]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08019858 	.word	0x08019858
 80019ac:	2004146c 	.word	0x2004146c

080019b0 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <create_path+0x24>)
 80019be:	f014 fc33 	bl	8016228 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <create_path+0x28>)
 80019c6:	f014 fc2f 	bl	8016228 <strcpy>

}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200424ac 	.word	0x200424ac
 80019d8:	2004136c 	.word	0x2004136c

080019dc <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <fopen_folder_and_file+0x24>)
 80019e2:	f012 fb09 	bl	8013ff8 <f_mkdir>

	f_chdir(dirpath);
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <fopen_folder_and_file+0x24>)
 80019e8:	f011 ffd6 	bl	8013998 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80019ec:	2213      	movs	r2, #19
 80019ee:	4905      	ldr	r1, [pc, #20]	; (8001a04 <fopen_folder_and_file+0x28>)
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <fopen_folder_and_file+0x2c>)
 80019f2:	f011 fa65 	bl	8012ec0 <f_open>

	f_chdir("..");
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <fopen_folder_and_file+0x30>)
 80019f8:	f011 ffce 	bl	8013998 <f_chdir>


}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200424ac 	.word	0x200424ac
 8001a04:	2004136c 	.word	0x2004136c
 8001a08:	2004263c 	.word	0x2004263c
 8001a0c:	0801984c 	.word	0x0801984c

08001a10 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	e007      	b.n	8001a2c <bufclear+0x1c>
		buffer[i] = '\0';
 8001a1c:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <bufclear+0x30>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a30:	ddf4      	ble.n	8001a1c <bufclear+0xc>
	}
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200425ac 	.word	0x200425ac

08001a44 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <read_byte+0x54>)
 8001a60:	f009 fa2c 	bl	800aebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001a64:	f107 010f 	add.w	r1, r7, #15
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	480b      	ldr	r0, [pc, #44]	; (8001a9c <read_byte+0x58>)
 8001a6e:	f00c fbd5 	bl	800e21c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001a72:	f107 010e 	add.w	r1, r7, #14
 8001a76:	2364      	movs	r3, #100	; 0x64
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <read_byte+0x58>)
 8001a7c:	f00c fd02 	bl	800e484 <HAL_SPI_Receive>
	CS_SET;
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <read_byte+0x54>)
 8001a88:	f009 fa18 	bl	800aebc <HAL_GPIO_WritePin>

	return val;
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	200436d8 	.word	0x200436d8

08001aa0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <write_byte+0x54>)
 8001ac2:	f009 f9fb 	bl	800aebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001ac6:	f107 010f 	add.w	r1, r7, #15
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	2201      	movs	r2, #1
 8001ace:	480a      	ldr	r0, [pc, #40]	; (8001af8 <write_byte+0x58>)
 8001ad0:	f00c fba4 	bl	800e21c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001ad4:	1db9      	adds	r1, r7, #6
 8001ad6:	2364      	movs	r3, #100	; 0x64
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <write_byte+0x58>)
 8001adc:	f00c fb9e 	bl	800e21c <HAL_SPI_Transmit>
	CS_SET;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <write_byte+0x54>)
 8001ae8:	f009 f9e8 	bl	800aebc <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020400 	.word	0x40020400
 8001af8:	200436d8 	.word	0x200436d8

08001afc <IMU_init>:

uint16_t IMU_init() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff ff9c 	bl	8001a44 <read_byte>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2be0      	cmp	r3, #224	; 0xe0
 8001b14:	d119      	bne.n	8001b4a <IMU_init+0x4e>
		ret = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2006      	movs	r0, #6
 8001b1e:	f7ff ffbf 	bl	8001aa0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001b22:	2110      	movs	r1, #16
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff ffbb 	bl	8001aa0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	207f      	movs	r0, #127	; 0x7f
 8001b2e:	f7ff ffb7 	bl	8001aa0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001b32:	2106      	movs	r1, #6
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff ffb3 	bl	8001aa0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001b3a:	2106      	movs	r1, #6
 8001b3c:	2014      	movs	r0, #20
 8001b3e:	f7ff ffaf 	bl	8001aa0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001b42:	2100      	movs	r1, #0
 8001b44:	207f      	movs	r0, #127	; 0x7f
 8001b46:	f7ff ffab 	bl	8001aa0 <write_byte>
	}
	return ret;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <read_gyro_data>:

void read_gyro_data() {
 8001b54:	b598      	push	{r3, r4, r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001b58:	2033      	movs	r0, #51	; 0x33
 8001b5a:	f7ff ff73 	bl	8001a44 <read_byte>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21c      	sxth	r4, r3
 8001b64:	2034      	movs	r0, #52	; 0x34
 8001b66:	f7ff ff6d 	bl	8001a44 <read_byte>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <read_gyro_data+0x64>)
 8001b74:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001b76:	2035      	movs	r0, #53	; 0x35
 8001b78:	f7ff ff64 	bl	8001a44 <read_byte>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	b21c      	sxth	r4, r3
 8001b82:	2036      	movs	r0, #54	; 0x36
 8001b84:	f7ff ff5e 	bl	8001a44 <read_byte>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4323      	orrs	r3, r4
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <read_gyro_data+0x68>)
 8001b92:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001b94:	2037      	movs	r0, #55	; 0x37
 8001b96:	f7ff ff55 	bl	8001a44 <read_byte>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	2038      	movs	r0, #56	; 0x38
 8001ba2:	f7ff ff4f 	bl	8001a44 <read_byte>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4323      	orrs	r3, r4
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <read_gyro_data+0x6c>)
 8001bb0:	801a      	strh	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	bd98      	pop	{r3, r4, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20043674 	.word	0x20043674
 8001bbc:	20043672 	.word	0x20043672
 8001bc0:	2004366c 	.word	0x2004366c

08001bc4 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	805a      	strh	r2, [r3, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	809a      	strh	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	80da      	strh	r2, [r3, #6]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	811a      	strh	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	815a      	strh	r2, [r3, #10]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
{

}
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001c10:	f7ff ff74 	bl	8001afc <IMU_init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001c18:	f7ff fa42 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fa4e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <_ZN3IMU4initEv+0x44>)
 8001c26:	f7ff fa75 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fa47 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <_ZN3IMU4initEv+0x48>)
 8001c38:	f7ff fa6c 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001c3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c40:	f007 fea6 	bl	8009990 <HAL_Delay>

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0801985c 	.word	0x0801985c
 8001c50:	08019868 	.word	0x08019868
 8001c54:	00000000 	.word	0x00000000

08001c58 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001c60:	f7ff ff78 	bl	8001b54 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <_ZN3IMU12updateValuesEv+0xa0>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <_ZN3IMU12updateValuesEv+0xa4>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <_ZN3IMU12updateValuesEv+0xa8>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc63 	bl	8000554 <__aeabi_i2d>
 8001c8e:	a316      	add	r3, pc, #88	; (adr r3, 8001ce8 <_ZN3IMU12updateValuesEv+0x90>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcc8 	bl	8000628 <__aeabi_dmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4625      	mov	r5, r4
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <_ZN3IMU12updateValuesEv+0xac>)
 8001ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc54 	bl	8000554 <__aeabi_i2d>
 8001cac:	a310      	add	r3, pc, #64	; (adr r3, 8001cf0 <_ZN3IMU12updateValuesEv+0x98>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fcb9 	bl	8000628 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f7fe fafd 	bl	80002bc <__adddf3>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4621      	mov	r1, r4
 8001cca:	f7fe ff5d 	bl	8000b88 <__aeabi_d2iz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <_ZN3IMU12updateValuesEv+0xac>)
 8001cde:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce8:	eb851eb8 	.word	0xeb851eb8
 8001cec:	3f9eb851 	.word	0x3f9eb851
 8001cf0:	70a3d70a 	.word	0x70a3d70a
 8001cf4:	3fef0a3d 	.word	0x3fef0a3d
 8001cf8:	20043674 	.word	0x20043674
 8001cfc:	20043672 	.word	0x20043672
 8001d00:	2004366c 	.word	0x2004366c
 8001d04:	20000210 	.word	0x20000210

08001d08 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d28:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7fe fc23 	bl	8000578 <__aeabi_f2d>
 8001d32:	a316      	add	r3, pc, #88	; (adr r3, 8001d8c <_ZN3IMU8getOmegaEv+0x84>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fda0 	bl	800087c <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d46:	a313      	add	r3, pc, #76	; (adr r3, 8001d94 <_ZN3IMU8getOmegaEv+0x8c>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fc6a 	bl	8000628 <__aeabi_dmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <_ZN3IMU8getOmegaEv+0x80>)
 8001d62:	f7fe fd8b 	bl	800087c <__aeabi_ddiv>
 8001d66:	4603      	mov	r3, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	f7fe ff53 	bl	8000c18 <__aeabi_d2f>
 8001d72:	4603      	mov	r3, r0
 8001d74:	ee07 3a90 	vmov	s15, r3
}
 8001d78:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	40668000 	.word	0x40668000
 8001d8c:	66666666 	.word	0x66666666
 8001d90:	40306666 	.word	0x40306666
 8001d94:	54411744 	.word	0x54411744
 8001d98:	400921fb 	.word	0x400921fb

08001d9c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001da4:	466b      	mov	r3, sp
 8001da6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dac:	f007 fdf0 	bl	8009990 <HAL_Delay>
	lcd_clear();
 8001db0:	f7ff f976 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff f982 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001dbc:	4840      	ldr	r0, [pc, #256]	; (8001ec0 <_ZN3IMU11calibrationEv+0x124>)
 8001dbe:	f7ff f9a9 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff f97b 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001dca:	483e      	ldr	r0, [pc, #248]	; (8001ec4 <_ZN3IMU11calibrationEv+0x128>)
 8001dcc:	f7ff f9a2 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001dd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dd4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001dd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dda:	1e5d      	subs	r5, r3, #1
 8001ddc:	61bd      	str	r5, [r7, #24]
 8001dde:	462b      	mov	r3, r5
 8001de0:	3301      	adds	r3, #1
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f04f 0400 	mov.w	r4, #0
 8001df0:	0154      	lsls	r4, r2, #5
 8001df2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df6:	014b      	lsls	r3, r1, #5
 8001df8:	462b      	mov	r3, r5
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f04f 0400 	mov.w	r4, #0
 8001e0a:	0154      	lsls	r4, r2, #5
 8001e0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e10:	014b      	lsls	r3, r1, #5
 8001e12:	462b      	mov	r3, r5
 8001e14:	3301      	adds	r3, #1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3303      	adds	r3, #3
 8001e1a:	3307      	adds	r3, #7
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	ebad 0d03 	sub.w	sp, sp, r3
 8001e24:	466b      	mov	r3, sp
 8001e26:	3303      	adds	r3, #3
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e2e:	2300      	movs	r3, #0
 8001e30:	83fb      	strh	r3, [r7, #30]
 8001e32:	8bfa      	ldrh	r2, [r7, #30]
 8001e34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	da13      	bge.n	8001e64 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e42:	8bfb      	ldrh	r3, [r7, #30]
 8001e44:	ee07 2a90 	vmov	s15, r2
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f007 fd9a 	bl	8009990 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001e5c:	8bfb      	ldrh	r3, [r7, #30]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	83fb      	strh	r3, [r7, #30]
 8001e62:	e7e6      	b.n	8001e32 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	462b      	mov	r3, r5
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d00e      	beq.n	8001e9a <_ZN3IMU11calibrationEv+0xfe>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3304      	adds	r3, #4
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	e7ec      	b.n	8001e74 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001e9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001eb4:	46b5      	mov	sp, r6
}
 8001eb6:	bf00      	nop
 8001eb8:	372c      	adds	r7, #44	; 0x2c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0801986c 	.word	0x0801986c
 8001ec4:	08019878 	.word	0x08019878

08001ec8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	b299      	uxth	r1, r3
 8001edc:	1dfa      	adds	r2, r7, #7
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <INA260_read+0x50>)
 8001ee6:	f009 f93b 	bl	800b160 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	b299      	uxth	r1, r3
 8001eee:	f107 020c 	add.w	r2, r7, #12
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <INA260_read+0x50>)
 8001efa:	f009 fa2f 	bl	800b35c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001efe:	7b3b      	ldrb	r3, [r7, #12]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2004388c 	.word	0x2004388c

08001f1c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	71fb      	strb	r3, [r7, #7]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71bb      	strb	r3, [r7, #6]
 8001f32:	460b      	mov	r3, r1
 8001f34:	717b      	strb	r3, [r7, #5]
 8001f36:	4613      	mov	r3, r2
 8001f38:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	733b      	strb	r3, [r7, #12]
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	737b      	strb	r3, [r7, #13]
 8001f42:	797b      	ldrb	r3, [r7, #5]
 8001f44:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001f46:	793b      	ldrb	r3, [r7, #4]
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	2364      	movs	r3, #100	; 0x64
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2303      	movs	r3, #3
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <INA260_write+0x48>)
 8001f56:	f009 f903 	bl	800b160 <HAL_I2C_Master_Transmit>
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2004388c 	.word	0x2004388c

08001f68 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	460b      	mov	r3, r1
 8001f74:	71bb      	strb	r3, [r7, #6]
 8001f76:	4613      	mov	r3, r2
 8001f78:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001f7a:	797b      	ldrb	r3, [r7, #5]
 8001f7c:	79ba      	ldrb	r2, [r7, #6]
 8001f7e:	79f9      	ldrb	r1, [r7, #7]
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff ffcb 	bl	8001f1c <INA260_write>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	21df      	movs	r1, #223	; 0xdf
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff ffe2 	bl	8001f68 <setConfig>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
{

}
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd4:	482a      	ldr	r0, [pc, #168]	; (8002080 <_ZN8JoyStick8getValueEv+0xbc>)
 8001fd6:	f008 ff59 	bl	800ae8c <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <_ZN8JoyStick8getValueEv+0x2e>
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4823      	ldr	r0, [pc, #140]	; (8002084 <_ZN8JoyStick8getValueEv+0xc0>)
 8001ff6:	f008 ff49 	bl	800ae8c <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <_ZN8JoyStick8getValueEv+0x4e>
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8002012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002016:	481a      	ldr	r0, [pc, #104]	; (8002080 <_ZN8JoyStick8getValueEv+0xbc>)
 8002018:	f008 ff38 	bl	800ae8c <HAL_GPIO_ReadPin>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <_ZN8JoyStick8getValueEv+0x70>
 800202c:	89fb      	ldrh	r3, [r7, #14]
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8002034:	2104      	movs	r1, #4
 8002036:	4814      	ldr	r0, [pc, #80]	; (8002088 <_ZN8JoyStick8getValueEv+0xc4>)
 8002038:	f008 ff28 	bl	800ae8c <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <_ZN8JoyStick8getValueEv+0x90>
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	480a      	ldr	r0, [pc, #40]	; (8002080 <_ZN8JoyStick8getValueEv+0xbc>)
 8002058:	f008 ff18 	bl	800ae8c <HAL_GPIO_ReadPin>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <_ZN8JoyStick8getValueEv+0xb0>
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8002074:	89fb      	ldrh	r3, [r7, #14]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40020400 	.word	0x40020400

0800208c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	2b52      	cmp	r3, #82	; 0x52
 800209c:	d112      	bne.n	80020c4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a4:	4856      	ldr	r0, [pc, #344]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020a6:	f008 ff09 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	4853      	ldr	r0, [pc, #332]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020b2:	f008 ff03 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	4850      	ldr	r0, [pc, #320]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020be:	f008 fefd 	bl	800aebc <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80020c2:	e098      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b47      	cmp	r3, #71	; 0x47
 80020c8:	d112      	bne.n	80020f0 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d0:	484b      	ldr	r0, [pc, #300]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020d2:	f008 fef3 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020dc:	4848      	ldr	r0, [pc, #288]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020de:	f008 feed 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020e2:	2201      	movs	r2, #1
 80020e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e8:	4845      	ldr	r0, [pc, #276]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020ea:	f008 fee7 	bl	800aebc <HAL_GPIO_WritePin>
}
 80020ee:	e082      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b42      	cmp	r3, #66	; 0x42
 80020f4:	d112      	bne.n	800211c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020fc:	4840      	ldr	r0, [pc, #256]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80020fe:	f008 fedd 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002108:	483d      	ldr	r0, [pc, #244]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 800210a:	f008 fed7 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002114:	483a      	ldr	r0, [pc, #232]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 8002116:	f008 fed1 	bl	800aebc <HAL_GPIO_WritePin>
}
 800211a:	e06c      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	2b43      	cmp	r3, #67	; 0x43
 8002120:	d112      	bne.n	8002148 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002128:	4835      	ldr	r0, [pc, #212]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 800212a:	f008 fec7 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002134:	4832      	ldr	r0, [pc, #200]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 8002136:	f008 fec1 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002140:	482f      	ldr	r0, [pc, #188]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 8002142:	f008 febb 	bl	800aebc <HAL_GPIO_WritePin>
}
 8002146:	e056      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b4d      	cmp	r3, #77	; 0x4d
 800214c:	d112      	bne.n	8002174 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002154:	482a      	ldr	r0, [pc, #168]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 8002156:	f008 feb1 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002160:	4827      	ldr	r0, [pc, #156]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 8002162:	f008 feab 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800216c:	4824      	ldr	r0, [pc, #144]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f008 fea5 	bl	800aebc <HAL_GPIO_WritePin>
}
 8002172:	e040      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b59      	cmp	r3, #89	; 0x59
 8002178:	d112      	bne.n	80021a0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002180:	481f      	ldr	r0, [pc, #124]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 8002182:	f008 fe9b 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218c:	481c      	ldr	r0, [pc, #112]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 800218e:	f008 fe95 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002198:	4819      	ldr	r0, [pc, #100]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f008 fe8f 	bl	800aebc <HAL_GPIO_WritePin>
}
 800219e:	e02a      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b57      	cmp	r3, #87	; 0x57
 80021a4:	d112      	bne.n	80021cc <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ac:	4814      	ldr	r0, [pc, #80]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80021ae:	f008 fe85 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b8:	4811      	ldr	r0, [pc, #68]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f008 fe7f 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c4:	480e      	ldr	r0, [pc, #56]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f008 fe79 	bl	800aebc <HAL_GPIO_WritePin>
}
 80021ca:	e014      	b.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b7e      	cmp	r3, #126	; 0x7e
 80021d0:	d111      	bne.n	80021f6 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d8:	4809      	ldr	r0, [pc, #36]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80021da:	f008 fe6f 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4806      	ldr	r0, [pc, #24]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f008 fe69 	bl	800aebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f008 fe63 	bl	800aebc <HAL_GPIO_WritePin>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40020000 	.word	0x40020000

08002204 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
 8002210:	4613      	mov	r3, r2
 8002212:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002222:	4813      	ldr	r0, [pc, #76]	; (8002270 <_ZN3LED2LREaa+0x6c>)
 8002224:	f008 fe4a 	bl	800aebc <HAL_GPIO_WritePin>
 8002228:	e009      	b.n	800223e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800222a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <_ZN3LED2LREaa+0x6c>)
 800223a:	f008 fe3f 	bl	800aebc <HAL_GPIO_WritePin>

	if(r_status == 1)
 800223e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d106      	bne.n	8002254 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800224c:	4808      	ldr	r0, [pc, #32]	; (8002270 <_ZN3LED2LREaa+0x6c>)
 800224e:	f008 fe35 	bl	800aebc <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002252:	e009      	b.n	8002268 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002254:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002262:	4803      	ldr	r0, [pc, #12]	; (8002270 <_ZN3LED2LREaa+0x6c>)
 8002264:	f008 fe2a 	bl	800aebc <HAL_GPIO_WritePin>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40020000 	.word	0x40020000

08002274 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002274:	b580      	push	{r7, lr}
 8002276:	b092      	sub	sp, #72	; 0x48
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fe92 	bl	8001fac <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	331c      	adds	r3, #28
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
 8002296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	429a      	cmp	r2, r3
 800229c:	d008      	beq.n	80022b0 <_ZN10LineSensorC1Ev+0x3c>
 800229e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	2200      	movs	r2, #0
 80022a6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80022a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022aa:	3302      	adds	r3, #2
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
 80022ae:	e7f2      	b.n	8002296 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	3338      	adds	r3, #56	; 0x38
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d009      	beq.n	80022de <_ZN10LineSensorC1Ev+0x6a>
 80022ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022cc:	623b      	str	r3, [r7, #32]
		s = 0;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80022d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d8:	3304      	adds	r3, #4
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
 80022dc:	e7f1      	b.n	80022c2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3338      	adds	r3, #56	; 0x38
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d009      	beq.n	800230c <_ZN10LineSensorC1Ev+0x98>
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	617b      	str	r3, [r7, #20]
		m = 0;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	3304      	adds	r3, #4
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	e7f1      	b.n	80022f0 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	3338      	adds	r3, #56	; 0x38
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	429a      	cmp	r2, r3
 8002324:	d009      	beq.n	800233a <_ZN10LineSensorC1Ev+0xc6>
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	60bb      	str	r3, [r7, #8]
		s = 1;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002330:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	3304      	adds	r3, #4
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
 8002338:	e7f1      	b.n	800231e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	3748      	adds	r7, #72	; 0x48
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	220e      	movs	r2, #14
 8002350:	4619      	mov	r1, r3
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002354:	f007 fb82 	bl	8009a5c <HAL_ADC_Start_DMA>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200437b0 	.word	0x200437b0

08002364 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b0d      	cmp	r3, #13
 8002374:	dc2f      	bgt.n	80023d6 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3392      	adds	r3, #146	; 0x92
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	33a0      	adds	r3, #160	; 0xa0
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a5b      	subs	r3, r3, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	440b      	add	r3, r1
 80023c2:	3306      	adds	r3, #6
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e7cc      	b.n	8002370 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023e0:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d902      	bls.n	80023f0 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]


}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	2000021c 	.word	0x2000021c

08002400 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002408:	2300      	movs	r3, #0
 800240a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800240e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002412:	2b0d      	cmp	r3, #13
 8002414:	f200 80b8 	bhi.w	8002588 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800241e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002422:	2b09      	cmp	r3, #9
 8002424:	d81c      	bhi.n	8002460 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002426:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800242a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800242e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4423      	add	r3, r4
 800243e:	3306      	adds	r3, #6
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4403      	add	r3, r0
 8002444:	3304      	adds	r3, #4
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	008b      	lsls	r3, r1, #2
 800244a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800244e:	440b      	add	r3, r1
 8002450:	3b30      	subs	r3, #48	; 0x30
 8002452:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002454:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002458:	3301      	adds	r3, #1
 800245a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800245e:	e7de      	b.n	800241e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002466:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800246a:	2b09      	cmp	r3, #9
 800246c:	d84d      	bhi.n	800250a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800246e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002472:	3301      	adds	r3, #1
 8002474:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002478:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800247c:	2b09      	cmp	r3, #9
 800247e:	d83e      	bhi.n	80024fe <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002480:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800248a:	4413      	add	r3, r2
 800248c:	3b30      	subs	r3, #48	; 0x30
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800249c:	4413      	add	r3, r2
 800249e:	3b30      	subs	r3, #48	; 0x30
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	d521      	bpl.n	80024f2 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80024ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024b8:	4413      	add	r3, r2
 80024ba:	3b30      	subs	r3, #48	; 0x30
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80024c0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80024c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024ce:	440a      	add	r2, r1
 80024d0:	3a30      	subs	r2, #48	; 0x30
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024da:	440b      	add	r3, r1
 80024dc:	3b30      	subs	r3, #48	; 0x30
 80024de:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80024e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024ea:	4413      	add	r3, r2
 80024ec:	3b30      	subs	r3, #48	; 0x30
 80024ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f0:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80024f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024f6:	3301      	adds	r3, #1
 80024f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024fc:	e7bc      	b.n	8002478 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80024fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002502:	3301      	adds	r3, #1
 8002504:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002508:	e7ad      	b.n	8002466 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f833 	bl	8000578 <__aeabi_f2d>
 8002512:	a32a      	add	r3, pc, #168	; (adr r3, 80025bc <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f886 	bl	8000628 <__aeabi_dmul>
 800251c:	4603      	mov	r3, r0
 800251e:	460c      	mov	r4, r1
 8002520:	4625      	mov	r5, r4
 8002522:	461c      	mov	r4, r3
 8002524:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f821 	bl	8000578 <__aeabi_f2d>
 8002536:	a31c      	add	r3, pc, #112	; (adr r3, 80025a8 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f874 	bl	8000628 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fd feb8 	bl	80002bc <__adddf3>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	461a      	mov	r2, r3
 8002552:	4623      	mov	r3, r4
 8002554:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb5c 	bl	8000c18 <__aeabi_d2f>
 8002560:	4601      	mov	r1, r0
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 800256e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800257c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002580:	3301      	adds	r3, #1
 8002582:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002586:	e742      	b.n	800240e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002590:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	3738      	adds	r7, #56	; 0x38
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	f3af 8000 	nop.w
 80025a8:	66666666 	.word	0x66666666
 80025ac:	3fee6666 	.word	0x3fee6666
 80025b0:	20000220 	.word	0x20000220
 80025b4:	20000214 	.word	0x20000214
 80025b8:	20000218 	.word	0x20000218
 80025bc:	9999999a 	.word	0x9999999a
 80025c0:	3fa99999 	.word	0x3fa99999

080025c4 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0a0      	sub	sp, #128	; 0x80
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80025cc:	2064      	movs	r0, #100	; 0x64
 80025ce:	f007 f9df 	bl	8009990 <HAL_Delay>

	lcd_clear();
 80025d2:	f7fe fd65 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80025d6:	2100      	movs	r1, #0
 80025d8:	2000      	movs	r0, #0
 80025da:	f7fe fd71 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80025de:	4886      	ldr	r0, [pc, #536]	; (80027f8 <_ZN10LineSensor11calibrationEv+0x234>)
 80025e0:	f7fe fd98 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80025e4:	2101      	movs	r1, #1
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe fd6a 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80025ec:	4883      	ldr	r0, [pc, #524]	; (80027fc <_ZN10LineSensor11calibrationEv+0x238>)
 80025ee:	f7fe fd91 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80025f8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025fc:	2b0d      	cmp	r3, #13
 80025fe:	d823      	bhi.n	8002648 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002600:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002604:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	32b0      	adds	r2, #176	; 0xb0
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	440a      	add	r2, r1
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002618:	440b      	add	r3, r1
 800261a:	3b40      	subs	r3, #64	; 0x40
 800261c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800261e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002622:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	32b0      	adds	r2, #176	; 0xb0
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	440a      	add	r2, r1
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002636:	440b      	add	r3, r1
 8002638:	3b78      	subs	r3, #120	; 0x78
 800263a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800263c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002640:	3301      	adds	r3, #1
 8002642:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002646:	e7d7      	b.n	80025f8 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fcb8 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8002654:	4603      	mov	r3, r0
 8002656:	2b02      	cmp	r3, #2
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d079      	beq.n	8002758 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800266a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d850      	bhi.n	8002714 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002672:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800267c:	4413      	add	r3, r2
 800267e:	3b40      	subs	r3, #64	; 0x40
 8002680:	ed93 7a00 	vldr	s14, [r3]
 8002684:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	33b0      	adds	r3, #176	; 0xb0
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	d50f      	bpl.n	80026be <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800269e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026a2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	32b0      	adds	r2, #176	; 0xb0
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	440a      	add	r2, r1
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026b6:	440b      	add	r3, r1
 80026b8:	3b40      	subs	r3, #64	; 0x40
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e024      	b.n	8002708 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80026be:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026c8:	4413      	add	r3, r2
 80026ca:	3b78      	subs	r3, #120	; 0x78
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	33b0      	adds	r3, #176	; 0xb0
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	dd0e      	ble.n	8002708 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80026ea:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026ee:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	32b0      	adds	r2, #176	; 0xb0
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	440a      	add	r2, r1
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002702:	440b      	add	r3, r1
 8002704:	3b78      	subs	r3, #120	; 0x78
 8002706:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002708:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800270c:	3301      	adds	r3, #1
 800270e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002712:	e7aa      	b.n	800266a <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fe2e 	bl	800537c <_ZN12RotarySwitch8getValueEv>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002736:	2201      	movs	r2, #1
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fd61 	bl	8002204 <_ZN3LED2LREaa>
 8002742:	e781      	b.n	8002648 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800274a:	2200      	movs	r2, #0
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd57 	bl	8002204 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 8002756:	e777      	b.n	8002648 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002758:	2300      	movs	r3, #0
 800275a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800275e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002762:	2b0d      	cmp	r3, #13
 8002764:	d826      	bhi.n	80027b4 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002766:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002770:	4413      	add	r3, r2
 8002772:	3b40      	subs	r3, #64	; 0x40
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002782:	4413      	add	r3, r2
 8002784:	3b78      	subs	r3, #120	; 0x78
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800278e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002792:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002800 <_ZN10LineSensor11calibrationEv+0x23c>
 8002796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	3392      	adds	r3, #146	; 0x92
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3304      	adds	r3, #4
 80027a4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027a8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027ac:	3301      	adds	r3, #1
 80027ae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80027b2:	e7d4      	b.n	800275e <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027be:	2b0d      	cmp	r3, #13
 80027c0:	d815      	bhi.n	80027ee <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80027c2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80027c6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027d0:	440a      	add	r2, r1
 80027d2:	3a78      	subs	r2, #120	; 0x78
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	33a0      	adds	r3, #160	; 0xa0
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3304      	adds	r3, #4
 80027e0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027e2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027e6:	3301      	adds	r3, #1
 80027e8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ec:	e7e5      	b.n	80027ba <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80027ee:	bf00      	nop
 80027f0:	3780      	adds	r7, #128	; 0x80
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08019884 	.word	0x08019884
 80027fc:	08019890 	.word	0x08019890
 8002800:	447a0000 	.word	0x447a0000

08002804 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3338      	adds	r3, #56	; 0x38
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	429a      	cmp	r2, r3
 8002828:	d012      	beq.n	8002850 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028a4 <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	db02      	blt.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002842:	8bfb      	ldrh	r3, [r7, #30]
 8002844:	3301      	adds	r3, #1
 8002846:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3304      	adds	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e7e8      	b.n	8002822 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002850:	8bfb      	ldrh	r3, [r7, #30]
 8002852:	2b0d      	cmp	r3, #13
 8002854:	d906      	bls.n	8002864 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002860:	801a      	strh	r2, [r3, #0]
 8002862:	e002      	b.n	800286a <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002866:	2200      	movs	r2, #0
 8002868:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	2b31      	cmp	r3, #49	; 0x31
 8002870:	d903      	bls.n	800287a <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e002      	b.n	8002880 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f242 720f 	movw	r2, #9999	; 0x270f
 8002888:	4293      	cmp	r3, r2
 800288a:	d903      	bls.n	8002894 <_ZN10LineSensor13emergencyStopEv+0x90>
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800288e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002892:	801a      	strh	r2, [r3, #0]

	return flag;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002896:	781b      	ldrb	r3, [r3, #0]

}
 8002898:	4618      	mov	r0, r3
 800289a:	3724      	adds	r7, #36	; 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	442f0000 	.word	0x442f0000
 80028a8:	20000258 	.word	0x20000258
 80028ac:	2000025a 	.word	0x2000025a

080028b0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80028ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80028be:	eef0 7ae7 	vabs.f32	s15, s15
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	635a      	str	r2, [r3, #52]	; 0x34
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	64da      	str	r2, [r3, #76]	; 0x4c
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800297e:	3314      	adds	r3, #20
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800298c:	3358      	adds	r3, #88	; 0x58
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002998:	335a      	adds	r3, #90	; 0x5a
 800299a:	2200      	movs	r2, #0
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029a4:	335c      	adds	r3, #92	; 0x5c
 80029a6:	2200      	movs	r2, #0
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029b0:	3330      	adds	r3, #48	; 0x30
 80029b2:	2200      	movs	r2, #0
 80029b4:	801a      	strh	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	2200      	movs	r2, #0
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029c8:	3334      	adds	r3, #52	; 0x34
 80029ca:	2200      	movs	r2, #0
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029d4:	3336      	adds	r3, #54	; 0x36
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029e0:	3337      	adds	r3, #55	; 0x37
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029ec:	3338      	adds	r3, #56	; 0x38
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80029f8:	333c      	adds	r3, #60	; 0x3c
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a06:	3340      	adds	r3, #64	; 0x40
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a14:	3344      	adds	r3, #68	; 0x44
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a22:	3348      	adds	r3, #72	; 0x48
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a30:	334c      	adds	r3, #76	; 0x4c
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a3c:	334e      	adds	r3, #78	; 0x4e
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a3a      	ldr	r2, [r7, #32]
 8002a58:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a64:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a70:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a72:	2300      	movs	r3, #0
 8002a74:	82fb      	strh	r3, [r7, #22]
 8002a76:	8afb      	ldrh	r3, [r7, #22]
 8002a78:	f241 726f 	movw	r2, #5999	; 0x176f
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d80d      	bhi.n	8002a9c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1cc>
		velocity_table_[i] = 0;
 8002a80:	8afb      	ldrh	r3, [r7, #22]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002a88:	3306      	adds	r3, #6
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a94:	8afb      	ldrh	r3, [r7, #22]
 8002a96:	3301      	adds	r3, #1
 8002a98:	82fb      	strh	r3, [r7, #22]
 8002a9a:	e7ec      	b.n	8002a76 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	82bb      	strh	r3, [r7, #20]
 8002aa0:	8abb      	ldrh	r3, [r7, #20]
 8002aa2:	2b63      	cmp	r3, #99	; 0x63
 8002aa4:	d80d      	bhi.n	8002ac2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f2>
		crossline_distance_[i] = 0;
 8002aa6:	8abb      	ldrh	r3, [r7, #20]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002aae:	3318      	adds	r3, #24
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002aba:	8abb      	ldrh	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	82bb      	strh	r3, [r7, #20]
 8002ac0:	e7ee      	b.n	8002aa0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	827b      	strh	r3, [r7, #18]
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002acc:	d20d      	bcs.n	8002aea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21a>
		sideline_distance_[i] = 0;
 8002ace:	8a7b      	ldrh	r3, [r7, #18]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002ad6:	333c      	adds	r3, #60	; 0x3c
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ae2:	8a7b      	ldrh	r3, [r7, #18]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	827b      	strh	r3, [r7, #18]
 8002ae8:	e7ed      	b.n	8002ac6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aea:	2300      	movs	r3, #0
 8002aec:	823b      	strh	r3, [r7, #16]
 8002aee:	8a3b      	ldrh	r3, [r7, #16]
 8002af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af4:	d20d      	bcs.n	8002b12 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x242>
		all_sideline_distance_[i] = 0;
 8002af6:	8a3b      	ldrh	r3, [r7, #16]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8002afe:	3324      	adds	r3, #36	; 0x24
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b0a:	8a3b      	ldrh	r3, [r7, #16]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	823b      	strh	r3, [r7, #16]
 8002b10:	e7ed      	b.n	8002aee <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21e>
	}
}
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002b74:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002b88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002b94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002ba0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002bac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002bb8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002bcc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002bd4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fccd 	bl	8000578 <__aeabi_f2d>
 8002bde:	a316      	add	r3, pc, #88	; (adr r3, 8002c38 <_ZN9LineTrace9calcErrorEv+0x118>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fd20 	bl	8000628 <__aeabi_dmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	4625      	mov	r5, r4
 8002bee:	461c      	mov	r4, r3
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fcbf 	bl	8000578 <__aeabi_f2d>
 8002bfa:	a311      	add	r3, pc, #68	; (adr r3, 8002c40 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fd12 	bl	8000628 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fb56 	bl	80002bc <__adddf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	4618      	mov	r0, r3
 8002c16:	4621      	mov	r1, r4
 8002c18:	f7fd fffe 	bl	8000c18 <__aeabi_d2f>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002c24:	6013      	str	r3, [r2, #0]

	return diff;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	ee07 3a90 	vmov	s15, r3

}
 8002c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bdb0      	pop	{r4, r5, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	47ae147b 	.word	0x47ae147b
 8002c3c:	3fb47ae1 	.word	0x3fb47ae1
 8002c40:	d70a3d71 	.word	0xd70a3d71
 8002c44:	3fed70a3 	.word	0x3fed70a3
 8002c48:	2000025c 	.word	0x2000025c
 8002c4c:	2000027c 	.word	0x2000027c

08002c50 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff61 	bl	8002b20 <_ZN9LineTrace9calcErrorEv>
 8002c5e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}

	p = kp_ * diff;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c82:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002c9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	ee17 0a90 	vmov	r0, s15
 8002caa:	f7fd fc65 	bl	8000578 <__aeabi_f2d>
 8002cae:	a32a      	add	r3, pc, #168	; (adr r3, 8002d58 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fde2 	bl	800087c <__aeabi_ddiv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	f7fd ffaa 	bl	8000c18 <__aeabi_d2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc53 	bl	8000578 <__aeabi_f2d>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002cdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce4:	ee17 0a90 	vmov	r0, s15
 8002ce8:	f7fd fc46 	bl	8000578 <__aeabi_f2d>
 8002cec:	a31a      	add	r3, pc, #104	; (adr r3, 8002d58 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fc99 	bl	8000628 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fadd 	bl	80002bc <__adddf3>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	4618      	mov	r0, r3
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7fd ff85 	bl	8000c18 <__aeabi_d2f>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d12:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002d14:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002d38:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d40:	4610      	mov	r0, r2
 8002d42:	f002 fe99 	bl	8005a78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	6013      	str	r3, [r2, #0]

}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bdb0      	pop	{r4, r5, r7, pc}
 8002d54:	f3af 8000 	nop.w
 8002d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d5c:	3f50624d 	.word	0x3f50624d
 8002d60:	20000284 	.word	0x20000284
 8002d64:	20000280 	.word	0x20000280

08002d68 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fcd3 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 f9be 	bl	8005100 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fee9 	bl	8004b60 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 ff4d 	bl	8004c4a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e14:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e1c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002e20:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002e26:	4a40      	ldr	r2, [pc, #256]	; (8002f28 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f083 0301 	eor.w	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d044      	beq.n	8002ec4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e3e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002f30 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d50f      	bpl.n	8002e6c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e50:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002f30 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	d506      	bpl.n	8002e6c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002e5e:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e002      	b.n	8002e72 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d94d      	bls.n	8002f16 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e92:	3338      	adds	r3, #56	; 0x38
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f001 faff 	bl	80044ac <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002eae:	e032      	b.n	8002f16 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f001 fba1 	bl	80045f8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ebc:	334c      	adds	r3, #76	; 0x4c
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	e028      	b.n	8002f16 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f3c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	dd0f      	ble.n	8002ef6 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eda:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002f3c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	dd06      	ble.n	8002ef6 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	e002      	b.n	8002efc <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d908      	bls.n	8002f16 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000264 	.word	0x20000264
 8002f28:	20000268 	.word	0x20000268
 8002f2c:	2000028b 	.word	0x2000028b
 8002f30:	44160000 	.word	0x44160000
 8002f34:	20000288 	.word	0x20000288
 8002f38:	2000028a 	.word	0x2000028a
 8002f3c:	43fa0000 	.word	0x43fa0000

08002f40 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f52:	335c      	adds	r3, #92	; 0x5c
 8002f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d143      	bne.n	8002fe4 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002f5c:	edd7 7a00 	vldr	s15, [r7]
 8002f60:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800307c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	d504      	bpl.n	8002f78 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e076      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002f78:	edd7 7a00 	vldr	s15, [r7]
 8002f7c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003080 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f88:	d502      	bpl.n	8002f90 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e06a      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002f90:	edd7 7a00 	vldr	s15, [r7]
 8002f94:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003088 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	d503      	bpl.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e05d      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002faa:	edd7 7a00 	vldr	s15, [r7]
 8002fae:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800308c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	d502      	bpl.n	8002fc2 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002fbc:	4b34      	ldr	r3, [pc, #208]	; (8003090 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e051      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002fc2:	edd7 7a00 	vldr	s15, [r7]
 8002fc6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003094 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d502      	bpl.n	8002fda <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e045      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e040      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d136      	bne.n	8003062 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002ff4:	edd7 7a00 	vldr	s15, [r7]
 8002ff8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800307c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	d504      	bpl.n	8003010 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e02a      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003010:	edd7 7a00 	vldr	s15, [r7]
 8003014:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800308c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	d502      	bpl.n	8003028 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e01e      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003028:	edd7 7a00 	vldr	s15, [r7]
 800302c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003094 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	d502      	bpl.n	8003040 <_ZN9LineTrace15radius2VelocityEf+0x100>
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e012      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003040:	edd7 7a00 	vldr	s15, [r7]
 8003044:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80030a0 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	d502      	bpl.n	8003058 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e006      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e001      	b.n	8003066 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003064:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	ee07 3a90 	vmov	s15, r3
}
 800306c:	eeb0 0a67 	vmov.f32	s0, s15
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	43960000 	.word	0x43960000
 8003080:	44480000 	.word	0x44480000
 8003084:	3fd9999a 	.word	0x3fd9999a
 8003088:	447a0000 	.word	0x447a0000
 800308c:	44bb8000 	.word	0x44bb8000
 8003090:	40133333 	.word	0x40133333
 8003094:	44fa0000 	.word	0x44fa0000
 8003098:	40200000 	.word	0x40200000
 800309c:	40066666 	.word	0x40066666
 80030a0:	451c4000 	.word	0x451c4000
 80030a4:	40400000 	.word	0x40400000
 80030a8:	3fa66666 	.word	0x3fa66666

080030ac <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b08b      	sub	sp, #44	; 0x2c
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 fca7 	bl	8004a0c <_ZN6Logger23getDistanceArrayPointerEv>
 80030be:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fcae 	bl	8004a26 <_ZN6Logger20getThetaArrayPointerEv>
 80030ca:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030cc:	2300      	movs	r3, #0
 80030ce:	837b      	strh	r3, [r7, #26]
 80030d0:	8b7b      	ldrh	r3, [r7, #26]
 80030d2:	f241 726f 	movw	r2, #5999	; 0x176f
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d84b      	bhi.n	8003172 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80030da:	8b7b      	ldrh	r3, [r7, #26]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80030e6:	8b7b      	ldrh	r3, [r7, #26]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80030f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80030f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fe:	d101      	bne.n	8003104 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8003100:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8003102:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8003104:	ed97 7a02 	vldr	s14, [r7, #8]
 8003108:	edd7 7a07 	vldr	s15, [r7, #28]
 800310c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003110:	eeb0 0a66 	vmov.f32	s0, s13
 8003114:	f7ff fbcc 	bl	80028b0 <_ZSt3absf>
 8003118:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800311c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003120:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003238 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8003124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	db01      	blt.n	8003132 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800312e:	4b43      	ldr	r3, [pc, #268]	; (800323c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8003130:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8003132:	8b7c      	ldrh	r4, [r7, #26]
 8003134:	ed97 0a05 	vldr	s0, [r7, #20]
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff01 	bl	8002f40 <_ZN9LineTrace15radius2VelocityEf>
 800313e:	eef0 7a40 	vmov.f32	s15, s0
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003148:	3306      	adds	r3, #6
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003152:	8b7b      	ldrh	r3, [r7, #26]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	441a      	add	r2, r3
 800315a:	8b7b      	ldrh	r3, [r7, #26]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	3334      	adds	r3, #52	; 0x34
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3304      	adds	r3, #4
 8003168:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800316a:	8b7b      	ldrh	r3, [r7, #26]
 800316c:	3301      	adds	r3, #1
 800316e:	837b      	strh	r3, [r7, #26]
 8003170:	e7ae      	b.n	80030d0 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003178:	335c      	adds	r3, #92	; 0x5c
 800317a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d120      	bne.n	80031c4 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800318e:	3318      	adds	r3, #24
 8003190:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003198:	3340      	adds	r3, #64	; 0x40
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	6939      	ldr	r1, [r7, #16]
 80031a0:	eeb0 0a67 	vmov.f32	s0, s15
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f93f 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031b0:	333c      	adds	r3, #60	; 0x3c
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	eeb0 0a67 	vmov.f32	s0, s15
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9d7 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80031c2:	e027      	b.n	8003214 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031ca:	335c      	adds	r3, #92	; 0x5c
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d11f      	bne.n	8003214 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80031e0:	3318      	adds	r3, #24
 80031e2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031ea:	3348      	adds	r3, #72	; 0x48
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	6939      	ldr	r1, [r7, #16]
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f916 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003202:	3344      	adds	r3, #68	; 0x44
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	6939      	ldr	r1, [r7, #16]
 800320a:	eeb0 0a67 	vmov.f32	s0, s15
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f9ae 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800321a:	3318      	adds	r3, #24
 800321c:	2200      	movs	r2, #0
 800321e:	9200      	str	r2, [sp, #0]
 8003220:	f241 7270 	movw	r2, #6000	; 0x1770
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8003226:	4807      	ldr	r0, [pc, #28]	; (8003244 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8003228:	f7fe fab4 	bl	8001794 <sd_write_array_float>

}
 800322c:	bf00      	nop
 800322e:	3724      	adds	r7, #36	; 0x24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	3727c5ac 	.word	0x3727c5ac
 8003238:	459c4000 	.word	0x459c4000
 800323c:	459c4000 	.word	0x459c4000
 8003240:	08019908 	.word	0x08019908
 8003244:	08019918 	.word	0x08019918

08003248 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b08b      	sub	sp, #44	; 0x2c
 800324c:	af02      	add	r7, sp, #8
 800324e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69d8      	ldr	r0, [r3, #28]
 8003254:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8003256:	4a6c      	ldr	r2, [pc, #432]	; (8003408 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003258:	496c      	ldr	r1, [pc, #432]	; (800340c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800325a:	f001 fc63 	bl	8004b24 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003264:	3360      	adds	r3, #96	; 0x60
 8003266:	2264      	movs	r2, #100	; 0x64
 8003268:	4969      	ldr	r1, [pc, #420]	; (8003410 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800326a:	4868      	ldr	r0, [pc, #416]	; (800340c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800326c:	f7fe faf8 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003276:	33f0      	adds	r3, #240	; 0xf0
 8003278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800327c:	4965      	ldr	r1, [pc, #404]	; (8003414 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800327e:	4863      	ldr	r0, [pc, #396]	; (800340c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003280:	f7fe faee 	bl	8001860 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fbbf 	bl	8004a0c <_ZN6Logger23getDistanceArrayPointerEv>
 800328e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fbc6 	bl	8004a26 <_ZN6Logger20getThetaArrayPointerEv>
 800329a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800329c:	2300      	movs	r3, #0
 800329e:	837b      	strh	r3, [r7, #26]
 80032a0:	8b7b      	ldrh	r3, [r7, #26]
 80032a2:	f241 726f 	movw	r2, #5999	; 0x176f
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d84b      	bhi.n	8003342 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80032aa:	8b7b      	ldrh	r3, [r7, #26]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80032b6:	8b7b      	ldrh	r3, [r7, #26]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80032c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80032c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	d101      	bne.n	80032d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80032d0:	4b51      	ldr	r3, [pc, #324]	; (8003418 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80032d2:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80032d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80032dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032e0:	eeb0 0a66 	vmov.f32	s0, s13
 80032e4:	f7ff fae4 	bl	80028b0 <_ZSt3absf>
 80032e8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80032ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800341c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80032f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	db01      	blt.n	8003302 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80032fe:	4b48      	ldr	r3, [pc, #288]	; (8003420 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8003300:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003302:	8b7c      	ldrh	r4, [r7, #26]
 8003304:	ed97 0a05 	vldr	s0, [r7, #20]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fe19 	bl	8002f40 <_ZN9LineTrace15radius2VelocityEf>
 800330e:	eef0 7a40 	vmov.f32	s15, s0
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003318:	3306      	adds	r3, #6
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003322:	8b7b      	ldrh	r3, [r7, #26]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	441a      	add	r2, r3
 800332a:	8b7b      	ldrh	r3, [r7, #26]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	3334      	adds	r3, #52	; 0x34
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	3304      	adds	r3, #4
 8003338:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800333a:	8b7b      	ldrh	r3, [r7, #26]
 800333c:	3301      	adds	r3, #1
 800333e:	837b      	strh	r3, [r7, #26]
 8003340:	e7ae      	b.n	80032a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003348:	335c      	adds	r3, #92	; 0x5c
 800334a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d120      	bne.n	8003394 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800335e:	3318      	adds	r3, #24
 8003360:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003368:	3340      	adds	r3, #64	; 0x40
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	6939      	ldr	r1, [r7, #16]
 8003370:	eeb0 0a67 	vmov.f32	s0, s15
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f857 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003380:	333c      	adds	r3, #60	; 0x3c
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	6939      	ldr	r1, [r7, #16]
 8003388:	eeb0 0a67 	vmov.f32	s0, s15
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8ef 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003392:	e027      	b.n	80033e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800339a:	335c      	adds	r3, #92	; 0x5c
 800339c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d11f      	bne.n	80033e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80033b0:	3318      	adds	r3, #24
 80033b2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80033ba:	3348      	adds	r3, #72	; 0x48
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	eeb0 0a67 	vmov.f32	s0, s15
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f82e 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80033d2:	3344      	adds	r3, #68	; 0x44
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	6939      	ldr	r1, [r7, #16]
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8c6 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80033ea:	3318      	adds	r3, #24
 80033ec:	2200      	movs	r2, #0
 80033ee:	9200      	str	r2, [sp, #0]
 80033f0:	f241 7270 	movw	r2, #6000	; 0x1770
 80033f4:	490b      	ldr	r1, [pc, #44]	; (8003424 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80033f6:	4805      	ldr	r0, [pc, #20]	; (800340c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80033f8:	f7fe f9cc 	bl	8001794 <sd_write_array_float>

}
 80033fc:	bf00      	nop
 80033fe:	3724      	adds	r7, #36	; 0x24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}
 8003404:	08019924 	.word	0x08019924
 8003408:	08019930 	.word	0x08019930
 800340c:	08019918 	.word	0x08019918
 8003410:	08019940 	.word	0x08019940
 8003414:	08019950 	.word	0x08019950
 8003418:	3727c5ac 	.word	0x3727c5ac
 800341c:	459c4000 	.word	0x459c4000
 8003420:	459c4000 	.word	0x459c4000
 8003424:	08019908 	.word	0x08019908

08003428 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	ed87 0a02 	vstr	s0, [r7, #8]
 8003434:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003436:	f241 736f 	movw	r3, #5999	; 0x176f
 800343a:	83fb      	strh	r3, [r7, #30]
 800343c:	8bfb      	ldrh	r3, [r7, #30]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 808d 	beq.w	800355e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003444:	8bfb      	ldrh	r3, [r7, #30]
 8003446:	3b01      	subs	r3, #1
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800344e:	3306      	adds	r3, #6
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003460:	3306      	adds	r3, #6
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800346e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003472:	edd7 7a06 	vldr	s15, [r7, #24]
 8003476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	dd6a      	ble.n	8003556 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003480:	8bfb      	ldrh	r3, [r7, #30]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f874 	bl	8000578 <__aeabi_f2d>
 8003490:	a335      	add	r3, pc, #212	; (adr r3, 8003568 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fd f8c7 	bl	8000628 <__aeabi_dmul>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	4625      	mov	r5, r4
 80034a0:	461c      	mov	r4, r3
 80034a2:	69b8      	ldr	r0, [r7, #24]
 80034a4:	f7fd f868 	bl	8000578 <__aeabi_f2d>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4620      	mov	r0, r4
 80034ae:	4629      	mov	r1, r5
 80034b0:	f7fd f9e4 	bl	800087c <__aeabi_ddiv>
 80034b4:	4603      	mov	r3, r0
 80034b6:	460c      	mov	r4, r1
 80034b8:	4618      	mov	r0, r3
 80034ba:	4621      	mov	r1, r4
 80034bc:	f7fd fbac 	bl	8000c18 <__aeabi_d2f>
 80034c0:	4603      	mov	r3, r0
 80034c2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80034c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80034cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80034d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	dd37      	ble.n	8003556 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034ee:	3306      	adds	r3, #6
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f83e 	bl	8000578 <__aeabi_f2d>
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	8bfb      	ldrh	r3, [r7, #30]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	ed93 7a00 	vldr	s14, [r3]
 800350c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003514:	ee17 0a90 	vmov	r0, s15
 8003518:	f7fd f82e 	bl	8000578 <__aeabi_f2d>
 800351c:	a312      	add	r3, pc, #72	; (adr r3, 8003568 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fd f881 	bl	8000628 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4620      	mov	r0, r4
 800352c:	4629      	mov	r1, r5
 800352e:	f7fc fec5 	bl	80002bc <__adddf3>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	4619      	mov	r1, r3
 8003538:	4622      	mov	r2, r4
 800353a:	8bfb      	ldrh	r3, [r7, #30]
 800353c:	1e5c      	subs	r4, r3, #1
 800353e:	4608      	mov	r0, r1
 8003540:	4611      	mov	r1, r2
 8003542:	f7fd fb69 	bl	8000c18 <__aeabi_d2f>
 8003546:	4601      	mov	r1, r0
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800354e:	3306      	adds	r3, #6
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003556:	8bfb      	ldrh	r3, [r7, #30]
 8003558:	3b01      	subs	r3, #1
 800355a:	83fb      	strh	r3, [r7, #30]
 800355c:	e76e      	b.n	800343c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bdb0      	pop	{r4, r5, r7, pc}
 8003566:	bf00      	nop
 8003568:	d2f1a9fc 	.word	0xd2f1a9fc
 800356c:	3f50624d 	.word	0x3f50624d

08003570 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	ed87 0a02 	vstr	s0, [r7, #8]
 800357c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800357e:	2300      	movs	r3, #0
 8003580:	83fb      	strh	r3, [r7, #30]
 8003582:	8bfb      	ldrh	r3, [r7, #30]
 8003584:	f241 726f 	movw	r2, #5999	; 0x176f
 8003588:	4293      	cmp	r3, r2
 800358a:	f200 808d 	bhi.w	80036a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800358e:	8bfb      	ldrh	r3, [r7, #30]
 8003590:	3301      	adds	r3, #1
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003598:	3306      	adds	r3, #6
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	ed93 7a00 	vldr	s14, [r3]
 80035a2:	8bfb      	ldrh	r3, [r7, #30]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035aa:	3306      	adds	r3, #6
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80035c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	dd6a      	ble.n	80036a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035ca:	8bfb      	ldrh	r3, [r7, #30]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffcf 	bl	8000578 <__aeabi_f2d>
 80035da:	a335      	add	r3, pc, #212	; (adr r3, 80036b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f822 	bl	8000628 <__aeabi_dmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	4625      	mov	r5, r4
 80035ea:	461c      	mov	r4, r3
 80035ec:	69b8      	ldr	r0, [r7, #24]
 80035ee:	f7fc ffc3 	bl	8000578 <__aeabi_f2d>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fd f93f 	bl	800087c <__aeabi_ddiv>
 80035fe:	4603      	mov	r3, r0
 8003600:	460c      	mov	r4, r1
 8003602:	4618      	mov	r0, r3
 8003604:	4621      	mov	r1, r4
 8003606:	f7fd fb07 	bl	8000c18 <__aeabi_d2f>
 800360a:	4603      	mov	r3, r0
 800360c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800360e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003612:	ed97 7a05 	vldr	s14, [r7, #20]
 8003616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800361e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003622:	edd7 7a02 	vldr	s15, [r7, #8]
 8003626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd37      	ble.n	80036a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003630:	8bfb      	ldrh	r3, [r7, #30]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003638:	3306      	adds	r3, #6
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff99 	bl	8000578 <__aeabi_f2d>
 8003646:	4604      	mov	r4, r0
 8003648:	460d      	mov	r5, r1
 800364a:	8bfb      	ldrh	r3, [r7, #30]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	ed93 7a00 	vldr	s14, [r3]
 8003656:	edd7 7a02 	vldr	s15, [r7, #8]
 800365a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365e:	ee17 0a90 	vmov	r0, s15
 8003662:	f7fc ff89 	bl	8000578 <__aeabi_f2d>
 8003666:	a312      	add	r3, pc, #72	; (adr r3, 80036b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fc ffdc 	bl	8000628 <__aeabi_dmul>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fc fe20 	bl	80002bc <__adddf3>
 800367c:	4603      	mov	r3, r0
 800367e:	460c      	mov	r4, r1
 8003680:	4619      	mov	r1, r3
 8003682:	4622      	mov	r2, r4
 8003684:	8bfb      	ldrh	r3, [r7, #30]
 8003686:	1c5c      	adds	r4, r3, #1
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	f7fd fac4 	bl	8000c18 <__aeabi_d2f>
 8003690:	4601      	mov	r1, r0
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003698:	3306      	adds	r3, #6
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80036a0:	8bfb      	ldrh	r3, [r7, #30]
 80036a2:	3301      	adds	r3, #1
 80036a4:	83fb      	strh	r3, [r7, #30]
 80036a6:	e76c      	b.n	8003582 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80036a8:	bf00      	nop
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bdb0      	pop	{r4, r5, r7, pc}
 80036b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036b4:	3f50624d 	.word	0x3f50624d

080036b8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c6:	3358      	adds	r3, #88	; 0x58
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8086 	beq.w	80037dc <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe f805 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036da:	eeb0 7a40 	vmov.f32	s14, s0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036e4:	3314      	adds	r3, #20
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	bfac      	ite	ge
 80036f4:	2301      	movge	r3, #1
 80036f6:	2300      	movlt	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d026      	beq.n	800374c <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003704:	3314      	adds	r3, #20
 8003706:	ed93 7a00 	vldr	s14, [r3]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003710:	335a      	adds	r3, #90	; 0x5a
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	3334      	adds	r3, #52	; 0x34
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800372c:	3314      	adds	r3, #20
 800372e:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003738:	335a      	adds	r3, #90	; 0x5a
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003746:	335a      	adds	r3, #90	; 0x5a
 8003748:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800374a:	e7c1      	b.n	80036d0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003752:	335a      	adds	r3, #90	; 0x5a
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f241 726f 	movw	r2, #5999	; 0x176f
 800375a:	4293      	cmp	r3, r2
 800375c:	d906      	bls.n	800376c <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003764:	335a      	adds	r3, #90	; 0x5a
 8003766:	f241 726f 	movw	r2, #5999	; 0x176f
 800376a:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003772:	3314      	adds	r3, #20
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003778:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd ffb0 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003784:	eef0 7a40 	vmov.f32	s15, s0
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800378a:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003794:	335a      	adds	r3, #90	; 0x5a
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 800379a:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a2:	335a      	adds	r3, #90	; 0x5a
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037ac:	3306      	adds	r3, #6
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa06 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037c6:	335a      	adds	r3, #90	; 0x5a
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037d0:	3306      	adds	r3, #6
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80037da:	6013      	str	r3, [r2, #0]

	}
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000026c 	.word	0x2000026c
 80037e8:	20000270 	.word	0x20000270
 80037ec:	20000274 	.word	0x20000274
 80037f0:	20000278 	.word	0x20000278

080037f4 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd ff5e 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800380a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fc63 	bl	80050de <_ZN8Odometry8getThetaEv>
 8003818:	ec54 3b10 	vmov	r3, r4, d0
 800381c:	4618      	mov	r0, r3
 800381e:	4621      	mov	r1, r4
 8003820:	f7fd f9fa 	bl	8000c18 <__aeabi_d2f>
 8003824:	4603      	mov	r3, r0
 8003826:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003828:	edd7 7a04 	vldr	s15, [r7, #16]
 800382c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003834:	d101      	bne.n	800383a <_ZN9LineTrace8isStableEv+0x46>
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <_ZN9LineTrace8isStableEv+0xd0>)
 8003838:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800383a:	ed97 7a02 	vldr	s14, [r7, #8]
 800383e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003842:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003846:	eeb0 0a66 	vmov.f32	s0, s13
 800384a:	f7ff f831 	bl	80028b0 <_ZSt3absf>
 800384e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003852:	edd7 7a03 	vldr	s15, [r7, #12]
 8003856:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038c8 <_ZN9LineTrace8isStableEv+0xd4>
 800385a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	db01      	blt.n	8003868 <_ZN9LineTrace8isStableEv+0x74>
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <_ZN9LineTrace8isStableEv+0xd8>)
 8003866:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800386e:	3338      	adds	r3, #56	; 0x38
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003878:	2200      	movs	r2, #0
 800387a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003882:	3338      	adds	r3, #56	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003888:	edd7 7a03 	vldr	s15, [r7, #12]
 800388c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80038d4 <_ZN9LineTrace8isStableEv+0xe0>
 8003890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	db06      	blt.n	80038a8 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <_ZN9LineTrace8isStableEv+0xdc>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <_ZN9LineTrace8isStableEv+0xdc>)
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e002      	b.n	80038ae <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <_ZN9LineTrace8isStableEv+0xdc>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_ZN9LineTrace8isStableEv+0xdc>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	2b16      	cmp	r3, #22
 80038b4:	d901      	bls.n	80038ba <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}
 80038c4:	3727c5ac 	.word	0x3727c5ac
 80038c8:	459c4000 	.word	0x459c4000
 80038cc:	459c4000 	.word	0x459c4000
 80038d0:	2000028c 	.word	0x2000028c
 80038d4:	44fa0000 	.word	0x44fa0000

080038d8 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b092      	sub	sp, #72	; 0x48
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80038e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038e4:	2201      	movs	r2, #1
 80038e6:	4963      	ldr	r1, [pc, #396]	; (8003a74 <_ZN9LineTrace4initEv+0x19c>)
 80038e8:	4863      	ldr	r0, [pc, #396]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 80038ea:	f7fd ffb9 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80038ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038f2:	2201      	movs	r2, #1
 80038f4:	4961      	ldr	r1, [pc, #388]	; (8003a7c <_ZN9LineTrace4initEv+0x1a4>)
 80038f6:	4860      	ldr	r0, [pc, #384]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 80038f8:	f7fd ffb2 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80038fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003900:	2201      	movs	r2, #1
 8003902:	495f      	ldr	r1, [pc, #380]	; (8003a80 <_ZN9LineTrace4initEv+0x1a8>)
 8003904:	485c      	ldr	r0, [pc, #368]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003906:	f7fd ffab 	bl	8001860 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800390a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800390e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003912:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003916:	eeb0 1a66 	vmov.f32	s2, s13
 800391a:	eef0 0a47 	vmov.f32	s1, s14
 800391e:	eeb0 0a67 	vmov.f32	s0, s15
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8c6 	bl	8003ab4 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 8003928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800392c:	2201      	movs	r2, #1
 800392e:	4955      	ldr	r1, [pc, #340]	; (8003a84 <_ZN9LineTrace4initEv+0x1ac>)
 8003930:	4851      	ldr	r0, [pc, #324]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003932:	f7fd ff95 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 8003936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800393a:	2201      	movs	r2, #1
 800393c:	4952      	ldr	r1, [pc, #328]	; (8003a88 <_ZN9LineTrace4initEv+0x1b0>)
 800393e:	484e      	ldr	r0, [pc, #312]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003940:	f7fd ff8e 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 8003944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003948:	2201      	movs	r2, #1
 800394a:	4950      	ldr	r1, [pc, #320]	; (8003a8c <_ZN9LineTrace4initEv+0x1b4>)
 800394c:	484a      	ldr	r0, [pc, #296]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 800394e:	f7fd ff87 	bl	8001860 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 8003952:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003956:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800395a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800395e:	eeb0 1a66 	vmov.f32	s2, s13
 8003962:	eef0 0a47 	vmov.f32	s1, s14
 8003966:	eeb0 0a67 	vmov.f32	s0, s15
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8bb 	bl	8003ae6 <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003974:	2201      	movs	r2, #1
 8003976:	4946      	ldr	r1, [pc, #280]	; (8003a90 <_ZN9LineTrace4initEv+0x1b8>)
 8003978:	483f      	ldr	r0, [pc, #252]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 800397a:	f7fd ff71 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800397e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003982:	2201      	movs	r2, #1
 8003984:	4943      	ldr	r1, [pc, #268]	; (8003a94 <_ZN9LineTrace4initEv+0x1bc>)
 8003986:	483c      	ldr	r0, [pc, #240]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003988:	f7fd ff6a 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 800398c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003990:	2201      	movs	r2, #1
 8003992:	4941      	ldr	r1, [pc, #260]	; (8003a98 <_ZN9LineTrace4initEv+0x1c0>)
 8003994:	4838      	ldr	r0, [pc, #224]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003996:	f7fd ff63 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800399a:	f107 0320 	add.w	r3, r7, #32
 800399e:	2201      	movs	r2, #1
 80039a0:	493e      	ldr	r1, [pc, #248]	; (8003a9c <_ZN9LineTrace4initEv+0x1c4>)
 80039a2:	4835      	ldr	r0, [pc, #212]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 80039a4:	f7fd ff5c 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80039a8:	f107 031c 	add.w	r3, r7, #28
 80039ac:	2201      	movs	r2, #1
 80039ae:	493c      	ldr	r1, [pc, #240]	; (8003aa0 <_ZN9LineTrace4initEv+0x1c8>)
 80039b0:	4831      	ldr	r0, [pc, #196]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 80039b2:	f7fd ff55 	bl	8001860 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80039b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039ba:	eeb0 0a67 	vmov.f32	s0, s15
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f904 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80039c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f90d 	bl	8003bec <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80039d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039d6:	eeb0 0a67 	vmov.f32	s0, s15
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f916 	bl	8003c0c <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80039e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80039e4:	eeb0 0a67 	vmov.f32	s0, s15
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f91f 	bl	8003c2c <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80039ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80039f2:	eeb0 0a67 	vmov.f32	s0, s15
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f928 	bl	8003c4c <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 80039fc:	f107 0318 	add.w	r3, r7, #24
 8003a00:	2201      	movs	r2, #1
 8003a02:	4928      	ldr	r1, [pc, #160]	; (8003aa4 <_ZN9LineTrace4initEv+0x1cc>)
 8003a04:	481c      	ldr	r0, [pc, #112]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003a06:	f7fd ff2b 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a0a:	f107 0314 	add.w	r3, r7, #20
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4925      	ldr	r1, [pc, #148]	; (8003aa8 <_ZN9LineTrace4initEv+0x1d0>)
 8003a12:	4819      	ldr	r0, [pc, #100]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003a14:	f7fd ff24 	bl	8001860 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003a18:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a20:	eef0 0a47 	vmov.f32	s1, s14
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f96f 	bl	8003d0c <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003a3a:	f107 0310 	add.w	r3, r7, #16
 8003a3e:	2201      	movs	r2, #1
 8003a40:	491a      	ldr	r1, [pc, #104]	; (8003aac <_ZN9LineTrace4initEv+0x1d4>)
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003a44:	f7fd ff0c 	bl	8001860 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4918      	ldr	r1, [pc, #96]	; (8003ab0 <_ZN9LineTrace4initEv+0x1d8>)
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <_ZN9LineTrace4initEv+0x1a0>)
 8003a52:	f7fd ff05 	bl	8001860 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a5e:	eef0 0a47 	vmov.f32	s1, s14
 8003a62:	eeb0 0a67 	vmov.f32	s0, s15
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f96a 	bl	8003d40 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003a6c:	bf00      	nop
 8003a6e:	3748      	adds	r7, #72	; 0x48
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	0801995c 	.word	0x0801995c
 8003a78:	08019964 	.word	0x08019964
 8003a7c:	0801996c 	.word	0x0801996c
 8003a80:	08019974 	.word	0x08019974
 8003a84:	0801997c 	.word	0x0801997c
 8003a88:	08019988 	.word	0x08019988
 8003a8c:	08019994 	.word	0x08019994
 8003a90:	080199a0 	.word	0x080199a0
 8003a94:	080199ac 	.word	0x080199ac
 8003a98:	080199b8 	.word	0x080199b8
 8003a9c:	080199c4 	.word	0x080199c4
 8003aa0:	080199d0 	.word	0x080199d0
 8003aa4:	080199dc 	.word	0x080199dc
 8003aa8:	080199e4 	.word	0x080199e4
 8003aac:	080199ec 	.word	0x080199ec
 8003ab0:	080199f8 	.word	0x080199f8

08003ab4 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ac0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ac4:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	ed87 0a02 	vstr	s0, [r7, #8]
 8003af2:	edc7 0a01 	vstr	s1, [r7, #4]
 8003af6:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	ee07 3a90 	vmov	s15, r3
}
 8003b28:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	ee07 3a90 	vmov	s15, r3
}
 8003b46:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	return kd_;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	ee07 3a90 	vmov	s15, r3
}
 8003b64:	eeb0 0a67 	vmov.f32	s0, s15
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	ee07 3a90 	vmov	s15, r3
}
 8003b82:	eeb0 0a67 	vmov.f32	s0, s15
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	ee07 3a90 	vmov	s15, r3
}
 8003ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	ee07 3a90 	vmov	s15, r3
}
 8003bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c7a:	ee07 3a90 	vmov	s15, r3
}
 8003c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c9a:	ee07 3a90 	vmov	s15, r3
}
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003cba:	ee07 3a90 	vmov	s15, r3
}
 8003cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003cda:	ee07 3a90 	vmov	s15, r3
}
 8003cde:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003cfa:	ee07 3a90 	vmov	s15, r3
}
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d18:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d22:	333c      	adds	r3, #60	; 0x3c
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d2e:	3340      	adds	r3, #64	; 0x40
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d4c:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d56:	3344      	adds	r3, #68	; 0x44
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d62:	3348      	adds	r3, #72	; 0x48
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	601a      	str	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d82:	333c      	adds	r3, #60	; 0x3c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	ee07 3a90 	vmov	s15, r3
}
 8003d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003da6:	3348      	adds	r3, #72	; 0x48
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	ee07 3a90 	vmov	s15, r3
}
 8003dae:	eeb0 0a67 	vmov.f32	s0, s15
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dca:	3344      	adds	r3, #68	; 0x44
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	ee07 3a90 	vmov	s15, r3
}
 8003dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dee:	3340      	adds	r3, #64	; 0x40
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	ee07 3a90 	vmov	s15, r3
}
 8003df6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 815d 	beq.w	80040d2 <_ZN9LineTrace4flipEv+0x2ce>
		// ---- line following processing -----//
		pidTrace();
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fe ff19 	bl	8002c50 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003e1e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fb20 	bl	8004468 <_ZN9LineTrace16isTargetDistanceEf>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d042      	beq.n	8003eb4 <_ZN9LineTrace4flipEv+0xb0>
			// ---- Store Logs ------//
			storeLogs();
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa6e 	bl	8004310 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69dc      	ldr	r4, [r3, #28]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd ff63 	bl	8001d08 <_ZN3IMU8getOmegaEv>
 8003e42:	eef0 7a40 	vmov.f32	s15, s0
 8003e46:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f000 fcd2 	bl	80047f4 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(getTargetOmega());
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69dc      	ldr	r4, [r3, #28]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fab5 	bl	80043c4 <_ZN9LineTrace14getTargetOmegaEv>
 8003e5a:	eef0 7a40 	vmov.f32	s15, s0
 8003e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 fd03 	bl	800486e <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fcc3 	bl	80037f4 <_ZN9LineTrace8isStableEv>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00c      	beq.n	8003e8e <_ZN9LineTrace4flipEv+0x8a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fbcf 	bl	800561c <_ZN10SideSensor9getStatusEv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	43db      	mvns	r3, r3
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d101      	bne.n	8003e8e <_ZN9LineTrace4flipEv+0x8a>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <_ZN9LineTrace4flipEv+0x8c>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <_ZN9LineTrace4flipEv+0x9c>
#endif
				stable_flag_ = true;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e9a:	3337      	adds	r3, #55	; 0x37
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fc3b 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f926 	bl	8005100 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fbff 	bl	80036b8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fe ff80 	bl	8002dc0 <_ZN9LineTrace11isCrossLineEv>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <_ZN9LineTrace4flipEv+0xd6>
			side_sensor_->enableIgnore();
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 fbce 	bl	800566c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fc4e 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fbde 	bl	80056a0 <_ZN10SideSensor13getIgnoreFlagEv>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00f      	beq.n	8003f0a <_ZN9LineTrace4flipEv+0x106>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fc32 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003ef4:	eeb0 7a40 	vmov.f32	s14, s0
 8003ef8:	eddf 7a78 	vldr	s15, [pc, #480]	; 80040dc <_ZN9LineTrace4flipEv+0x2d8>
 8003efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	db01      	blt.n	8003f0a <_ZN9LineTrace4flipEv+0x106>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <_ZN9LineTrace4flipEv+0x108>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <_ZN9LineTrace4flipEv+0x116>
			side_sensor_->disableIgnore();
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fbb6 	bl	8005686 <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f20:	3337      	adds	r3, #55	; 0x37
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <_ZN9LineTrace4flipEv+0x13c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fb75 	bl	800561c <_ZN10SideSensor9getStatusEv>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d101      	bne.n	8003f40 <_ZN9LineTrace4flipEv+0x13c>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <_ZN9LineTrace4flipEv+0x13e>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d020      	beq.n	8003f88 <_ZN9LineTrace4flipEv+0x184>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f4c:	335c      	adds	r3, #92	; 0x5c
 8003f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <_ZN9LineTrace4flipEv+0x15a>
				storeSideLineDistance();
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fade 	bl	8004518 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f5c:	e008      	b.n	8003f70 <_ZN9LineTrace4flipEv+0x16c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fb80 	bl	8004664 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f6a:	334c      	adds	r3, #76	; 0x4c
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f76:	3337      	adds	r3, #55	; 0x37
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f82:	3338      	adds	r3, #56	; 0x38
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f8e:	3337      	adds	r3, #55	; 0x37
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <_ZN9LineTrace4flipEv+0x1a4>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe f92f 	bl	8002204 <_ZN3LED2LREaa>
 8003fa6:	e007      	b.n	8003fb8 <_ZN9LineTrace4flipEv+0x1b4>
		else led_.LR(-1, 0);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	330c      	adds	r3, #12
 8003fac:	2200      	movs	r2, #0
 8003fae:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe f926 	bl	8002204 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fbe:	334e      	adds	r3, #78	; 0x4e
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	f083 0301 	eor.w	r3, r3, #1
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <_ZN9LineTrace4flipEv+0x1e0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 fb23 	bl	800561c <_ZN10SideSensor9getStatusEv>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d101      	bne.n	8003fe4 <_ZN9LineTrace4flipEv+0x1e0>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <_ZN9LineTrace4flipEv+0x1e2>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <_ZN9LineTrace4flipEv+0x20a>
#endif
			all_sideline_flag_ = true;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ff0:	334e      	adds	r3, #78	; 0x4e
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ffc:	335c      	adds	r3, #92	; 0x5c
 8003ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d120      	bne.n	8004048 <_ZN9LineTrace4flipEv+0x244>
				storeAllSideLineDistance();
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fabe 	bl	8004588 <_ZN9LineTrace24storeAllSideLineDistanceEv>
 800400c:	e01c      	b.n	8004048 <_ZN9LineTrace4flipEv+0x244>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004014:	334e      	adds	r3, #78	; 0x4e
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00c      	beq.n	8004036 <_ZN9LineTrace4flipEv+0x232>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fafb 	bl	800561c <_ZN10SideSensor9getStatusEv>
 8004026:	4603      	mov	r3, r0
 8004028:	43db      	mvns	r3, r3
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d101      	bne.n	8004036 <_ZN9LineTrace4flipEv+0x232>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <_ZN9LineTrace4flipEv+0x234>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <_ZN9LineTrace4flipEv+0x244>
#endif
			all_sideline_flag_ = false;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004042:	334e      	adds	r3, #78	; 0x4e
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fbd9 	bl	8002804 <_ZN10LineSensor13emergencyStopEv>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <_ZN9LineTrace4flipEv+0x266>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	eddf 0a20 	vldr	s1, [pc, #128]	; 80040e0 <_ZN9LineTrace4flipEv+0x2dc>
 8004060:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80040e0 <_ZN9LineTrace4flipEv+0x2dc>
 8004064:	4618      	mov	r0, r3
 8004066:	f001 fd07 	bl	8005a78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004070:	334c      	adds	r3, #76	; 0x4c
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800407e:	334c      	adds	r3, #76	; 0x4c
 8004080:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004088:	334c      	adds	r3, #76	; 0x4c
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004090:	4293      	cmp	r3, r2
 8004092:	d906      	bls.n	80040a2 <_ZN9LineTrace4flipEv+0x29e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800409a:	334c      	adds	r3, #76	; 0x4c
 800409c:	f242 7210 	movw	r2, #10000	; 0x2710
 80040a0:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040a8:	334c      	adds	r3, #76	; 0x4c
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	2b50      	cmp	r3, #80	; 0x50
 80040ae:	d808      	bhi.n	80040c2 <_ZN9LineTrace4flipEv+0x2be>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	330c      	adds	r3, #12
 80040b4:	2201      	movs	r2, #1
 80040b6:	f04f 31ff 	mov.w	r1, #4294967295
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe f8a2 	bl	8002204 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 80040c0:	e007      	b.n	80040d2 <_ZN9LineTrace4flipEv+0x2ce>
		else led_.LR(-1, 0);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	330c      	adds	r3, #12
 80040c6:	2200      	movs	r2, #0
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe f899 	bl	8002204 <_ZN3LED2LREaa>
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	43480000 	.word	0x43480000
 80040e0:	00000000 	.word	0x00000000

080040e4 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fd12 	bl	8005b2a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4618      	mov	r0, r3
 800410c:	f001 fa9e 	bl	800564c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004116:	3330      	adds	r3, #48	; 0x30
 8004118:	2200      	movs	r2, #0
 800411a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	2200      	movs	r2, #0
 8004126:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800412e:	3334      	adds	r3, #52	; 0x34
 8004130:	2200      	movs	r2, #0
 8004132:	801a      	strh	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af02      	add	r7, sp, #8
 8004142:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f001 fcfd 	bl	8005b50 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	330c      	adds	r3, #12
 800415a:	2201      	movs	r2, #1
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe f84f 	bl	8002204 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800416c:	335c      	adds	r3, #92	; 0x5c
 800416e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69d8      	ldr	r0, [r3, #28]
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <_ZN9LineTrace4stopEv+0xcc>)
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <_ZN9LineTrace4stopEv+0xd0>)
 800417e:	4924      	ldr	r1, [pc, #144]	; (8004210 <_ZN9LineTrace4stopEv+0xd4>)
 8004180:	f000 fc89 	bl	8004a96 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004184:	e006      	b.n	8004194 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69d8      	ldr	r0, [r3, #28]
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <_ZN9LineTrace4stopEv+0xd8>)
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <_ZN9LineTrace4stopEv+0xdc>)
 800418e:	4920      	ldr	r1, [pc, #128]	; (8004210 <_ZN9LineTrace4stopEv+0xd4>)
 8004190:	f000 fca4 	bl	8004adc <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800419a:	3360      	adds	r3, #96	; 0x60
 800419c:	2200      	movs	r2, #0
 800419e:	9200      	str	r2, [sp, #0]
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	491e      	ldr	r1, [pc, #120]	; (800421c <_ZN9LineTrace4stopEv+0xe0>)
 80041a4:	481a      	ldr	r0, [pc, #104]	; (8004210 <_ZN9LineTrace4stopEv+0xd4>)
 80041a6:	f7fd faf5 	bl	8001794 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80041b0:	33f0      	adds	r3, #240	; 0xf0
 80041b2:	2200      	movs	r2, #0
 80041b4:	9200      	str	r2, [sp, #0]
 80041b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041ba:	4919      	ldr	r1, [pc, #100]	; (8004220 <_ZN9LineTrace4stopEv+0xe4>)
 80041bc:	4814      	ldr	r0, [pc, #80]	; (8004210 <_ZN9LineTrace4stopEv+0xd4>)
 80041be:	f7fd fae9 	bl	8001794 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041c8:	3390      	adds	r3, #144	; 0x90
 80041ca:	2200      	movs	r2, #0
 80041cc:	9200      	str	r2, [sp, #0]
 80041ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041d2:	4914      	ldr	r1, [pc, #80]	; (8004224 <_ZN9LineTrace4stopEv+0xe8>)
 80041d4:	480e      	ldr	r0, [pc, #56]	; (8004210 <_ZN9LineTrace4stopEv+0xd4>)
 80041d6:	f7fd fadd 	bl	8001794 <sd_write_array_float>

	led_.LR(-1, 0);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	330c      	adds	r3, #12
 80041de:	2200      	movs	r2, #0
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe f80d 	bl	8002204 <_ZN3LED2LREaa>

	logger_->resetIdx();
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fd02 	bl	8004bf8 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fcb1 	bl	8004b60 <_ZN6Logger10resetLogs2Ev>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	08019924 	.word	0x08019924
 800420c:	08019930 	.word	0x08019930
 8004210:	08019918 	.word	0x08019918
 8004214:	08019a04 	.word	0x08019a04
 8004218:	08019a10 	.word	0x08019a10
 800421c:	08019940 	.word	0x08019940
 8004220:	08019950 	.word	0x08019950
 8004224:	08019a20 	.word	0x08019a20

08004228 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004234:	2300      	movs	r3, #0
 8004236:	737b      	strb	r3, [r7, #13]
	start();
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff53 	bl	80040e4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800423e:	7b7b      	ldrb	r3, [r7, #13]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d15b      	bne.n	80042fc <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <_ZN9LineTrace7runningEv+0x28>
 800424a:	2b0a      	cmp	r3, #10
 800424c:	d030      	beq.n	80042b0 <_ZN9LineTrace7runningEv+0x88>
 800424e:	e054      	b.n	80042fa <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	4618      	mov	r0, r3
 8004256:	f001 f9ed 	bl	8005634 <_ZN10SideSensor16getWhiteLineCntREv>
 800425a:	4603      	mov	r3, r0
 800425c:	2b01      	cmp	r3, #1
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d044      	beq.n	80042f4 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe fd7c 	bl	8002d68 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004276:	335c      	adds	r3, #92	; 0x5c
 8004278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8af 	bl	80043e4 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd fa73 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fa51 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	330c      	adds	r3, #12
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd ffad 	bl	8002204 <_ZN3LED2LREaa>
				stage = 10;
 80042aa:	230a      	movs	r3, #10
 80042ac:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80042ae:	e021      	b.n	80042f4 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f9bd 	bl	8005634 <_ZN10SideSensor16getWhiteLineCntREv>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b02      	cmp	r3, #2
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fe fd67 	bl	8002d9e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f89a 	bl	800440a <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80042d6:	2064      	movs	r0, #100	; 0x64
 80042d8:	f005 fb5a 	bl	8009990 <HAL_Delay>

				setTargetVelocity(0);
 80042dc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800430c <_ZN9LineTrace7runningEv+0xe4>
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fc73 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80042e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042ea:	f005 fb51 	bl	8009990 <HAL_Delay>

				goal_flag = true;
 80042ee:	2301      	movs	r3, #1
 80042f0:	737b      	strb	r3, [r7, #13]

			}

			break;
 80042f2:	e001      	b.n	80042f8 <_ZN9LineTrace7runningEv+0xd0>
			break;
 80042f4:	bf00      	nop
 80042f6:	e7a2      	b.n	800423e <_ZN9LineTrace7runningEv+0x16>
			break;
 80042f8:	bf00      	nop
	while(goal_flag == false){
 80042fa:	e7a0      	b.n	800423e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff1d 	bl	800413c <_ZN9LineTrace4stopEv>
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	00000000 	.word	0x00000000

08004310 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	ed2d 8b02 	vpush	{d8}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d046      	beq.n	80043b4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800432c:	335c      	adds	r3, #92	; 0x5c
 800432e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d11c      	bne.n	8004370 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69dc      	ldr	r4, [r3, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd f9c1 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8004344:	eeb0 8a40 	vmov.f32	s16, s0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fec6 	bl	80050de <_ZN8Odometry8getThetaEv>
 8004352:	ec53 2b10 	vmov	r2, r3, d0
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fc5d 	bl	8000c18 <__aeabi_d2f>
 800435e:	4603      	mov	r3, r0
 8004360:	ee00 3a90 	vmov	s1, r3
 8004364:	eeb0 0a48 	vmov.f32	s0, s16
 8004368:	4620      	mov	r0, r4
 800436a:	f000 fabf 	bl	80048ec <_ZN6Logger21storeDistanceAndThetaEff>
 800436e:	e01b      	b.n	80043a8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69dc      	ldr	r4, [r3, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fc05 	bl	8005b88 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800437e:	eeb0 8a40 	vmov.f32	s16, s0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fea9 	bl	80050de <_ZN8Odometry8getThetaEv>
 800438c:	ec53 2b10 	vmov	r2, r3, d0
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	f7fc fc40 	bl	8000c18 <__aeabi_d2f>
 8004398:	4603      	mov	r3, r0
 800439a:	ee00 3a90 	vmov	s1, r3
 800439e:	eeb0 0a48 	vmov.f32	s0, s16
 80043a2:	4620      	mov	r0, r4
 80043a4:	f000 faea 	bl	800497c <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80043b2:	801a      	strh	r2, [r3, #0]
	}
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	ecbd 8b02 	vpop	{d8}
 80043be:	bd90      	pop	{r4, r7, pc}
 80043c0:	20000260 	.word	0x20000260

080043c4 <_ZN9LineTrace14getTargetOmegaEv>:

float LineTrace::getTargetOmega()
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	return target_omega_;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043d2:	ee07 3a90 	vmov	s15, r3
}
 80043d6:	eeb0 0a67 	vmov.f32	s0, s15
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fd f9a3 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043fc:	3358      	adds	r3, #88	; 0x58
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004418:	3358      	adds	r3, #88	; 0x58
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004424:	335a      	adds	r3, #90	; 0x5a
 8004426:	2200      	movs	r2, #0
 8004428:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004430:	3314      	adds	r3, #20
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004456:	335c      	adds	r3, #92	; 0x5c
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	801a      	strh	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd f922 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8004482:	eeb0 7a40 	vmov.f32	s14, s0
 8004486:	edd7 7a00 	vldr	s15, [r7]
 800448a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	bf94      	ite	ls
 8004494:	2301      	movls	r3, #1
 8004496:	2300      	movhi	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044be:	3330      	adds	r3, #48	; 0x30
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	461c      	mov	r4, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f7fd f90d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80044ca:	eef0 7a40 	vmov.f32	s15, s0
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80044d4:	3318      	adds	r3, #24
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044e4:	3330      	adds	r3, #48	; 0x30
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044f2:	3330      	adds	r3, #48	; 0x30
 80044f4:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044fc:	3330      	adds	r3, #48	; 0x30
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	2b63      	cmp	r3, #99	; 0x63
 8004502:	d905      	bls.n	8004510 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800450a:	3330      	adds	r3, #48	; 0x30
 800450c:	2263      	movs	r2, #99	; 0x63
 800450e:	801a      	strh	r2, [r3, #0]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}

08004518 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	461c      	mov	r4, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fd f8d7 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8004536:	eef0 7a40 	vmov.f32	s15, s0
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004540:	333c      	adds	r3, #60	; 0x3c
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800455e:	3332      	adds	r3, #50	; 0x32
 8004560:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004568:	3332      	adds	r3, #50	; 0x32
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004570:	d306      	bcc.n	8004580 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800457e:	801a      	strh	r2, [r3, #0]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bd90      	pop	{r4, r7, pc}

08004588 <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800459a:	3334      	adds	r3, #52	; 0x34
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	461c      	mov	r4, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7fd f89f 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80045a6:	eef0 7a40 	vmov.f32	s15, s0
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 80045b0:	3324      	adds	r3, #36	; 0x24
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045c0:	3334      	adds	r3, #52	; 0x34
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045ce:	3334      	adds	r3, #52	; 0x34
 80045d0:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045d8:	3334      	adds	r3, #52	; 0x34
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e0:	d306      	bcc.n	80045f0 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045e8:	3334      	adds	r3, #52	; 0x34
 80045ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045ee:	801a      	strh	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd90      	pop	{r4, r7, pc}

080045f8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6959      	ldr	r1, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800460a:	3330      	adds	r3, #48	; 0x30
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004614:	3318      	adds	r3, #24
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	eeb0 0a67 	vmov.f32	s0, s15
 8004622:	4608      	mov	r0, r1
 8004624:	f7fd f86d 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800462e:	3330      	adds	r3, #48	; 0x30
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800463c:	3330      	adds	r3, #48	; 0x30
 800463e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004646:	3330      	adds	r3, #48	; 0x30
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b63      	cmp	r3, #99	; 0x63
 800464c:	d905      	bls.n	800465a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004654:	3330      	adds	r3, #48	; 0x30
 8004656:	2263      	movs	r2, #99	; 0x63
 8004658:	801a      	strh	r2, [r3, #0]

}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800466c:	2300      	movs	r3, #0
 800466e:	82fb      	strh	r3, [r7, #22]
 8004670:	8afb      	ldrh	r3, [r7, #22]
 8004672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004676:	d237      	bcs.n	80046e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 8004678:	8afb      	ldrh	r3, [r7, #22]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004680:	333c      	adds	r3, #60	; 0x3c
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd f828 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8004694:	eeb0 7a40 	vmov.f32	s14, s0
 8004698:	edd7 7a04 	vldr	s15, [r7, #16]
 800469c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046a0:	eeb0 0a67 	vmov.f32	s0, s15
 80046a4:	f7fe f904 	bl	80028b0 <_ZSt3absf>
 80046a8:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80046ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80046b0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004710 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 80046b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	d810      	bhi.n	80046e0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6959      	ldr	r1, [r3, #20]
 80046c2:	8afb      	ldrh	r3, [r7, #22]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80046ca:	333c      	adds	r3, #60	; 0x3c
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	edd3 7a00 	vldr	s15, [r3]
 80046d4:	eeb0 0a67 	vmov.f32	s0, s15
 80046d8:	4608      	mov	r0, r1
 80046da:	f7fd f812 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80046de:	e003      	b.n	80046e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	3301      	adds	r3, #1
 80046e4:	82fb      	strh	r3, [r7, #22]
 80046e6:	e7c3      	b.n	8004670 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80046ee:	3332      	adds	r3, #50	; 0x32
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f6:	d306      	bcc.n	8004706 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004704:	801a      	strh	r2, [r3, #0]

}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	42a00000 	.word	0x42a00000

08004714 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004722:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004730:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004734:	2200      	movs	r2, #0
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800473e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004742:	2200      	movs	r2, #0
 8004744:	801a      	strh	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800474c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004770:	f7fd f902 	bl	8001978 <sd_mount>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d016      	beq.n	80047b2 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004784:	f7fc fc8c 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004788:	2100      	movs	r1, #0
 800478a:	2000      	movs	r0, #0
 800478c:	f7fc fc98 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004790:	4815      	ldr	r0, [pc, #84]	; (80047e8 <_ZN6Logger10sdCardInitEv+0x84>)
 8004792:	f7fc fcbf 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004796:	2101      	movs	r1, #1
 8004798:	2000      	movs	r0, #0
 800479a:	f7fc fc91 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800479e:	4813      	ldr	r0, [pc, #76]	; (80047ec <_ZN6Logger10sdCardInitEv+0x88>)
 80047a0:	f7fc fcb8 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80047a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047a8:	f005 f8f2 	bl	8009990 <HAL_Delay>

	  ret = true;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e015      	b.n	80047de <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80047b2:	f7fc fc75 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047b6:	2100      	movs	r1, #0
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7fc fc81 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047be:	480a      	ldr	r0, [pc, #40]	; (80047e8 <_ZN6Logger10sdCardInitEv+0x84>)
 80047c0:	f7fc fca8 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047c4:	2101      	movs	r1, #1
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7fc fc7a 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047cc:	4808      	ldr	r0, [pc, #32]	; (80047f0 <_ZN6Logger10sdCardInitEv+0x8c>)
 80047ce:	f7fc fca1 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047d6:	f005 f8db 	bl	8009990 <HAL_Delay>

	  ret = false;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	08019a30 	.word	0x08019a30
 80047ec:	08019a3c 	.word	0x08019a3c
 80047f0:	08019a44 	.word	0x08019a44

080047f4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004806:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d028      	beq.n	8004862 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004816:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800482c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800483c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004840:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004848:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004852:	d306      	bcc.n	8004862 <_ZN6Logger8storeLogEf+0x6e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800485a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800485e:	2200      	movs	r2, #0
 8004860:	801a      	strh	r2, [r3, #0]
	}
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004880:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02a      	beq.n	80048e0 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004890:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048aa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048be:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048d0:	d306      	bcc.n	80048e0 <_ZN6Logger9storeLog2Ef+0x72>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048d8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048dc:	2200      	movs	r2, #0
 80048de:	801a      	strh	r2, [r3, #0]
	}
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80048f8:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004902:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800491c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004928:	3310      	adds	r3, #16
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004938:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004948:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800494c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004954:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	f241 726f 	movw	r2, #5999	; 0x176f
 800495e:	4293      	cmp	r3, r2
 8004960:	d906      	bls.n	8004970 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004968:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800496c:	2200      	movs	r2, #0
 800496e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	ed87 0a02 	vstr	s0, [r7, #8]
 8004988:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004992:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049ac:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 80049b8:	3370      	adds	r3, #112	; 0x70
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049c8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049d8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049dc:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049e4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	f241 726f 	movw	r2, #5999	; 0x176f
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d906      	bls.n	8004a00 <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049f8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049fc:	2200      	movs	r2, #0
 80049fe:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a34:	3340      	adds	r3, #64	; 0x40
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af02      	add	r7, sp, #8
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	68b8      	ldr	r0, [r7, #8]
 8004a5e:	f7fc fe99 	bl	8001794 <sd_write_array_float>
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af02      	add	r7, sp, #8
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	68b8      	ldr	r0, [r7, #8]
 8004a8a:	f7fc fe83 	bl	8001794 <sd_write_array_float>
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af02      	add	r7, sp, #8
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	68b8      	ldr	r0, [r7, #8]
 8004ab8:	f7fc fe6c 	bl	8001794 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004ac2:	3340      	adds	r3, #64	; 0x40
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	9200      	str	r2, [sp, #0]
 8004ac8:	f241 7270 	movw	r2, #6000	; 0x1770
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f7fc fe60 	bl	8001794 <sd_write_array_float>
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f7fc fe49 	bl	8001794 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004b08:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	9200      	str	r2, [sp, #0]
 8004b10:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	68b8      	ldr	r0, [r7, #8]
 8004b18:	f7fc fe3c 	bl	8001794 <sd_write_array_float>
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004b38:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	68b8      	ldr	r0, [r7, #8]
 8004b40:	f7fc fe8e 	bl	8001860 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004b4a:	3340      	adds	r3, #64	; 0x40
 8004b4c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	68b8      	ldr	r0, [r7, #8]
 8004b54:	f7fc fe84 	bl	8001860 <sd_read_array_float>
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b60:	b480      	push	{r7}
 8004b62:	b08b      	sub	sp, #44	; 0x2c
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b7a:	3340      	adds	r3, #64	; 0x40
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d009      	beq.n	8004b9a <_ZN6Logger10resetLogs2Ev+0x3a>
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	3304      	adds	r3, #4
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
 8004b98:	e7f1      	b.n	8004b7e <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004ba0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004bb0:	3340      	adds	r3, #64	; 0x40
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d009      	beq.n	8004bd0 <_ZN6Logger10resetLogs2Ev+0x70>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	e7f1      	b.n	8004bb4 <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bd6:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004bda:	2200      	movs	r2, #0
 8004bdc:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004be4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004be8:	2200      	movs	r2, #0
 8004bea:	801a      	strh	r2, [r3, #0]
}
 8004bec:	bf00      	nop
 8004bee:	372c      	adds	r7, #44	; 0x2c
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c06:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c14:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004c18:	2200      	movs	r2, #0
 8004c1a:	801a      	strh	r2, [r3, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	805a      	strh	r2, [r3, #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c98:	2108      	movs	r1, #8
 8004c9a:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <_ZN5Motor4initEv+0x20>)
 8004c9c:	f00a f828 	bl	800ecf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ca0:	210c      	movs	r1, #12
 8004ca2:	4803      	ldr	r0, [pc, #12]	; (8004cb0 <_ZN5Motor4initEv+0x20>)
 8004ca4:	f00a f824 	bl	800ecf0 <HAL_TIM_PWM_Start>

}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20043770 	.word	0x20043770

08004cb4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da0d      	bge.n	8004ce2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ccc:	481f      	ldr	r0, [pc, #124]	; (8004d4c <_ZN5Motor9motorCtrlEv+0x98>)
 8004cce:	f006 f8f5 	bl	800aebc <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	425b      	negs	r3, r3
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	81fb      	strh	r3, [r7, #14]
 8004ce0:	e00a      	b.n	8004cf8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ce8:	4818      	ldr	r0, [pc, #96]	; (8004d4c <_ZN5Motor9motorCtrlEv+0x98>)
 8004cea:	f006 f8e7 	bl	800aebc <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da0d      	bge.n	8004d1e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004d02:	2201      	movs	r2, #1
 8004d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d08:	4810      	ldr	r0, [pc, #64]	; (8004d4c <_ZN5Motor9motorCtrlEv+0x98>)
 8004d0a:	f006 f8d7 	bl	800aebc <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	425b      	negs	r3, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	81bb      	strh	r3, [r7, #12]
 8004d1c:	e00a      	b.n	8004d34 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d24:	4809      	ldr	r0, [pc, #36]	; (8004d4c <_ZN5Motor9motorCtrlEv+0x98>)
 8004d26:	f006 f8c9 	bl	800aebc <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004d34:	89fa      	ldrh	r2, [r7, #14]
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004d3c:	89ba      	ldrh	r2, [r7, #12]
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40020c00 	.word	0x40020c00
 8004d50:	20043770 	.word	0x20043770

08004d54 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6178      	str	r0, [r7, #20]
 8004d5c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d60:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <_ZN5Motor8setRatioEdd+0xd8>)
 8004d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d6e:	f7fb feeb 	bl	8000b48 <__aeabi_dcmpgt>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <_ZN5Motor8setRatioEdd+0x30>
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	4c2b      	ldr	r4, [pc, #172]	; (8004e2c <_ZN5Motor8setRatioEdd+0xd8>)
 8004d7e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004d82:	e00e      	b.n	8004da2 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d8e:	f7fb febd 	bl	8000b0c <__aeabi_dcmplt>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <_ZN5Motor8setRatioEdd+0x4e>
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	4c24      	ldr	r4, [pc, #144]	; (8004e30 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d9e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <_ZN5Motor8setRatioEdd+0xd8>)
 8004da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dac:	f7fb fecc 	bl	8000b48 <__aeabi_dcmpgt>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <_ZN5Motor8setRatioEdd+0x6e>
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	4c1c      	ldr	r4, [pc, #112]	; (8004e2c <_ZN5Motor8setRatioEdd+0xd8>)
 8004dbc:	e9c7 3400 	strd	r3, r4, [r7]
 8004dc0:	e00e      	b.n	8004de0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <_ZN5Motor8setRatioEdd+0xdc>)
 8004dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dcc:	f7fb fe9e 	bl	8000b0c <__aeabi_dcmplt>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <_ZN5Motor8setRatioEdd+0x8c>
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	4c15      	ldr	r4, [pc, #84]	; (8004e30 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ddc:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <_ZN5Motor8setRatioEdd+0xe0>)
 8004de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dea:	f7fb fc1d 	bl	8000628 <__aeabi_dmul>
 8004dee:	4603      	mov	r3, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	4618      	mov	r0, r3
 8004df4:	4621      	mov	r1, r4
 8004df6:	f7fb fec7 	bl	8000b88 <__aeabi_d2iz>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0c:	f7fb fc0c 	bl	8000628 <__aeabi_dmul>
 8004e10:	4603      	mov	r3, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	4618      	mov	r0, r3
 8004e16:	4621      	mov	r1, r4
 8004e18:	f7fb feb6 	bl	8000b88 <__aeabi_d2iz>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	b21a      	sxth	r2, r3
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	805a      	strh	r2, [r3, #2]

}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	3ff00000 	.word	0x3ff00000
 8004e30:	bff00000 	.word	0xbff00000
 8004e34:	409c2000 	.word	0x409c2000

08004e38 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e38:	b490      	push	{r4, r7}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f04f 0400 	mov.w	r4, #0
 8004e50:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	f04f 0400 	mov.w	r4, #0
 8004e5e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	f04f 0400 	mov.w	r4, #0
 8004e7a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	f04f 0400 	mov.w	r4, #0
 8004e88:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	609a      	str	r2, [r3, #8]
}
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc90      	pop	{r4, r7}
 8004ea8:	4770      	bx	lr
 8004eaa:	0000      	movs	r0, r0
 8004eac:	0000      	movs	r0, r0
	...

08004eb0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fc ff22 	bl	8001d08 <_ZN3IMU8getOmegaEv>
 8004ec4:	ee10 3a10 	vmov	r3, s0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fb55 	bl	8000578 <__aeabi_f2d>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc fbe4 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004ee0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004ee4:	a376      	add	r3, pc, #472	; (adr r3, 80050c0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eee:	f7fb fb9b 	bl	8000628 <__aeabi_dmul>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7fb fb38 	bl	8000578 <__aeabi_f2d>
 8004f08:	4682      	mov	sl, r0
 8004f0a:	468b      	mov	fp, r1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f20:	f7fb fcac 	bl	800087c <__aeabi_ddiv>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	f7fb f9c6 	bl	80002bc <__adddf3>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	ec43 2b17 	vmov	d7, r2, r3
 8004f38:	eeb0 0a47 	vmov.f32	s0, s14
 8004f3c:	eef0 0a67 	vmov.f32	s1, s15
 8004f40:	f00f fa1a 	bl	8014378 <cos>
 8004f44:	ec53 2b10 	vmov	r2, r3, d0
 8004f48:	4650      	mov	r0, sl
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	f7fb fb6c 	bl	8000628 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb f9b0 	bl	80002bc <__adddf3>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7fb fb03 	bl	8000578 <__aeabi_f2d>
 8004f72:	4682      	mov	sl, r0
 8004f74:	468b      	mov	fp, r1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f8a:	f7fb fc77 	bl	800087c <__aeabi_ddiv>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb f991 	bl	80002bc <__adddf3>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	ec43 2b17 	vmov	d7, r2, r3
 8004fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fa6:	eef0 0a67 	vmov.f32	s1, s15
 8004faa:	f00f fa29 	bl	8014400 <sin>
 8004fae:	ec53 2b10 	vmov	r2, r3, d0
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	f7fb fb37 	bl	8000628 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f7fb f97b 	bl	80002bc <__adddf3>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	f7fb f96c 	bl	80002bc <__adddf3>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8004ffe:	eef0 0a67 	vmov.f32	s1, s15
 8005002:	f00f f9b9 	bl	8014378 <cos>
 8005006:	ec51 0b10 	vmov	r0, r1, d0
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005010:	f7fb fb0a 	bl	8000628 <__aeabi_dmul>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4620      	mov	r0, r4
 800501a:	4629      	mov	r1, r5
 800501c:	f7fb f94e 	bl	80002bc <__adddf3>
 8005020:	4603      	mov	r3, r0
 8005022:	460c      	mov	r4, r1
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	ed93 7b08 	vldr	d7, [r3, #32]
 8005036:	eeb0 0a47 	vmov.f32	s0, s14
 800503a:	eef0 0a67 	vmov.f32	s1, s15
 800503e:	f00f f9df 	bl	8014400 <sin>
 8005042:	ec51 0b10 	vmov	r0, r1, d0
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <_ZN8Odometry12calcPotitionEv+0x200>)
 800504c:	f7fb faec 	bl	8000628 <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb f930 	bl	80002bc <__adddf3>
 800505c:	4603      	mov	r3, r0
 800505e:	460c      	mov	r4, r1
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800506c:	4618      	mov	r0, r3
 800506e:	4621      	mov	r1, r4
 8005070:	f7fb fdd2 	bl	8000c18 <__aeabi_d2f>
 8005074:	4602      	mov	r2, r0
 8005076:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005078:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005080:	4618      	mov	r0, r3
 8005082:	4621      	mov	r1, r4
 8005084:	f7fb fdc8 	bl	8000c18 <__aeabi_d2f>
 8005088:	4602      	mov	r2, r0
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <_ZN8Odometry12calcPotitionEv+0x208>)
 800508c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005094:	4618      	mov	r0, r3
 8005096:	4621      	mov	r1, r4
 8005098:	f7fb fdbe 	bl	8000c18 <__aeabi_d2f>
 800509c:	4602      	mov	r2, r0
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <_ZN8Odometry12calcPotitionEv+0x20c>)
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ac:	f3af 8000 	nop.w
 80050b0:	405b8000 	.word	0x405b8000
 80050b4:	20000290 	.word	0x20000290
 80050b8:	20000294 	.word	0x20000294
 80050bc:	20000298 	.word	0x20000298
 80050c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050c4:	3f50624d 	.word	0x3f50624d

080050c8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	calcPotition();
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff feed 	bl	8004eb0 <_ZN8Odometry12calcPotitionEv>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80050de:	b490      	push	{r4, r7}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
	return theta_;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050ec:	ec44 3b17 	vmov	d7, r3, r4
}
 80050f0:	eeb0 0a47 	vmov.f32	s0, s14
 80050f4:	eef0 0a67 	vmov.f32	s1, s15
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc90      	pop	{r4, r7}
 80050fe:	4770      	bx	lr

08005100 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005100:	b490      	push	{r4, r7}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	f04f 0400 	mov.w	r4, #0
 8005120:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bc90      	pop	{r4, r7}
 800513a:	4770      	bx	lr

0800513c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800513c:	b490      	push	{r4, r7}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	f04f 0400 	mov.w	r4, #0
 8005162:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800517a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800517e:	2200      	movs	r2, #0
 8005180:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005182:	4a29      	ldr	r2, [pc, #164]	; (8005228 <_ZN13PathFollowingC1Ev+0xec>)
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <_ZN13PathFollowingC1Ev+0xec>)
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	f04f 0400 	mov.w	r4, #0
 800519a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800519e:	4a22      	ldr	r2, [pc, #136]	; (8005228 <_ZN13PathFollowingC1Ev+0xec>)
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <_ZN13PathFollowingC1Ev+0xf0>)
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	f04f 0400 	mov.w	r4, #0
 80051b6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <_ZN13PathFollowingC1Ev+0xf0>)
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80051c8:	4a18      	ldr	r2, [pc, #96]	; (800522c <_ZN13PathFollowingC1Ev+0xf0>)
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <_ZN13PathFollowingC1Ev+0xf0>)
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <_ZN13PathFollowingC1Ev+0xf0>)
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	f04f 0400 	mov.w	r4, #0
 80051ee:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051f2:	4a0e      	ldr	r2, [pc, #56]	; (800522c <_ZN13PathFollowingC1Ev+0xf0>)
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005200:	4a0b      	ldr	r2, [pc, #44]	; (8005230 <_ZN13PathFollowingC1Ev+0xf4>)
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	f04f 0400 	mov.w	r4, #0
 800520a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <_ZN13PathFollowingC1Ev+0xf4>)
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	f04f 0400 	mov.w	r4, #0
 8005218:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bc90      	pop	{r4, r7}
 8005226:	4770      	bx	lr
 8005228:	20043c70 	.word	0x20043c70
 800522c:	20043c00 	.word	0x20043c00
 8005230:	20043c60 	.word	0x20043c60

08005234 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800523c:	f001 fc2e 	bl	8006a9c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005240:	f107 0318 	add.w	r3, r7, #24
 8005244:	2201      	movs	r2, #1
 8005246:	4915      	ldr	r1, [pc, #84]	; (800529c <_ZN13PathFollowing4initEv+0x68>)
 8005248:	4815      	ldr	r0, [pc, #84]	; (80052a0 <_ZN13PathFollowing4initEv+0x6c>)
 800524a:	f7fc fb4f 	bl	80018ec <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800524e:	f107 0310 	add.w	r3, r7, #16
 8005252:	2201      	movs	r2, #1
 8005254:	4913      	ldr	r1, [pc, #76]	; (80052a4 <_ZN13PathFollowing4initEv+0x70>)
 8005256:	4812      	ldr	r0, [pc, #72]	; (80052a0 <_ZN13PathFollowing4initEv+0x6c>)
 8005258:	f7fc fb48 	bl	80018ec <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800525c:	f107 0308 	add.w	r3, r7, #8
 8005260:	2201      	movs	r2, #1
 8005262:	4911      	ldr	r1, [pc, #68]	; (80052a8 <_ZN13PathFollowing4initEv+0x74>)
 8005264:	480e      	ldr	r0, [pc, #56]	; (80052a0 <_ZN13PathFollowing4initEv+0x6c>)
 8005266:	f7fc fb41 	bl	80018ec <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800526a:	ed97 7b06 	vldr	d7, [r7, #24]
 800526e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005272:	ed97 5b02 	vldr	d5, [r7, #8]
 8005276:	eeb0 2a45 	vmov.f32	s4, s10
 800527a:	eef0 2a65 	vmov.f32	s5, s11
 800527e:	eeb0 1a46 	vmov.f32	s2, s12
 8005282:	eef0 1a66 	vmov.f32	s3, s13
 8005286:	eeb0 0a47 	vmov.f32	s0, s14
 800528a:	eef0 0a67 	vmov.f32	s1, s15
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f80c 	bl	80052ac <_ZN13PathFollowing7setGainEddd>
}
 8005294:	bf00      	nop
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08019a4c 	.word	0x08019a4c
 80052a0:	08019a54 	.word	0x08019a54
 80052a4:	08019a5c 	.word	0x08019a5c
 80052a8:	08019a64 	.word	0x08019a64

080052ac <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80052ac:	b490      	push	{r4, r7}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	61f8      	str	r0, [r7, #28]
 80052b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80052b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80052bc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052c6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80052ca:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052d4:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052da:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052de:	bf00      	nop
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc90      	pop	{r4, r7}
 80052e6:	4770      	bx	lr
 80052e8:	20043c70 	.word	0x20043c70

080052ec <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052f4:	2088      	movs	r0, #136	; 0x88
 80052f6:	f7fc fe4a 	bl	8001f8e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052fa:	2080      	movs	r0, #128	; 0x80
 80052fc:	f7fc fe47 	bl	8001f8e <INA260_init>
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005310:	2188      	movs	r1, #136	; 0x88
 8005312:	2002      	movs	r0, #2
 8005314:	f7fc fdd8 	bl	8001ec8 <INA260_read>
 8005318:	4603      	mov	r3, r0
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f91a 	bl	8000554 <__aeabi_i2d>
 8005320:	a30c      	add	r3, pc, #48	; (adr r3, 8005354 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fb f97f 	bl	8000628 <__aeabi_dmul>
 800532a:	4603      	mov	r3, r0
 800532c:	460c      	mov	r4, r1
 800532e:	4618      	mov	r0, r3
 8005330:	4621      	mov	r1, r4
 8005332:	f7fb fc71 	bl	8000c18 <__aeabi_d2f>
 8005336:	4602      	mov	r2, r0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4a03      	ldr	r2, [pc, #12]	; (8005350 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005342:	6013      	str	r3, [r2, #0]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bd90      	pop	{r4, r7, pc}
 800534c:	f3af 8000 	nop.w
 8005350:	2000029c 	.word	0x2000029c
 8005354:	47ae147b 	.word	0x47ae147b
 8005358:	3f547ae1 	.word	0x3f547ae1

0800535c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	ee07 3a90 	vmov	s15, r3

}
 800536c:	eeb0 0a67 	vmov.f32	s0, s15
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005388:	2102      	movs	r1, #2
 800538a:	4822      	ldr	r0, [pc, #136]	; (8005414 <_ZN12RotarySwitch8getValueEv+0x98>)
 800538c:	f005 fd7e 	bl	800ae8c <HAL_GPIO_ReadPin>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80053a0:	89fb      	ldrh	r3, [r7, #14]
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80053a8:	2108      	movs	r1, #8
 80053aa:	481a      	ldr	r0, [pc, #104]	; (8005414 <_ZN12RotarySwitch8getValueEv+0x98>)
 80053ac:	f005 fd6e 	bl	800ae8c <HAL_GPIO_ReadPin>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053c8:	2110      	movs	r1, #16
 80053ca:	4812      	ldr	r0, [pc, #72]	; (8005414 <_ZN12RotarySwitch8getValueEv+0x98>)
 80053cc:	f005 fd5e 	bl	800ae8c <HAL_GPIO_ReadPin>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	f043 0304 	orr.w	r3, r3, #4
 80053e6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	480a      	ldr	r0, [pc, #40]	; (8005414 <_ZN12RotarySwitch8getValueEv+0x98>)
 80053ec:	f005 fd4e 	bl	800ae8c <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	f043 0308 	orr.w	r3, r3, #8
 8005406:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005408:	89fb      	ldrh	r3, [r7, #14]

}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40020c00 	.word	0x40020c00

08005418 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	805a      	strh	r2, [r3, #2]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	809a      	strh	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	719a      	strb	r2, [r3, #6]
{

}
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	799b      	ldrb	r3, [r3, #6]
 8005454:	f083 0301 	eor.w	r3, r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80c7 	beq.w	80055ee <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005460:	4b65      	ldr	r3, [pc, #404]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f083 0301 	eor.w	r3, r3, #1
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d027      	beq.n	80054be <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800546e:	2104      	movs	r1, #4
 8005470:	4862      	ldr	r0, [pc, #392]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005472:	f005 fd0b 	bl	800ae8c <HAL_GPIO_ReadPin>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8005486:	4b5e      	ldr	r3, [pc, #376]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	4b5c      	ldr	r3, [pc, #368]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	e002      	b.n	800549a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005494:	4b5a      	ldr	r3, [pc, #360]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005496:	2200      	movs	r2, #0
 8005498:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800549a:	4b59      	ldr	r3, [pc, #356]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d93f      	bls.n	8005522 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80054b0:	4b51      	ldr	r3, [pc, #324]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80054b6:	4b52      	ldr	r3, [pc, #328]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e031      	b.n	8005522 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 80054be:	4b4e      	ldr	r3, [pc, #312]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02d      	beq.n	8005522 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80054c6:	2104      	movs	r1, #4
 80054c8:	484c      	ldr	r0, [pc, #304]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80054ca:	f005 fcdf 	bl	800ae8c <HAL_GPIO_ReadPin>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80054de:	4b48      	ldr	r3, [pc, #288]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	4b46      	ldr	r3, [pc, #280]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80054ec:	4b44      	ldr	r3, [pc, #272]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054f2:	4b43      	ldr	r3, [pc, #268]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d913      	bls.n	8005522 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	f083 0301 	eor.w	r3, r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	889b      	ldrh	r3, [r3, #4]
 8005512:	3301      	adds	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	889a      	ldrh	r2, [r3, #4]
 800551e:	4b39      	ldr	r3, [pc, #228]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005520:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d027      	beq.n	8005580 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005534:	4835      	ldr	r0, [pc, #212]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005536:	f005 fca9 	bl	800ae8c <HAL_GPIO_ReadPin>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d006      	beq.n	8005558 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e002      	b.n	800555e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800555a:	2200      	movs	r2, #0
 800555c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800555e:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	2b04      	cmp	r3, #4
 8005564:	d90c      	bls.n	8005580 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800557a:	4b25      	ldr	r3, [pc, #148]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800557c:	2200      	movs	r2, #0
 800557e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005580:	4b21      	ldr	r3, [pc, #132]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02e      	beq.n	80055e6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800558c:	481f      	ldr	r0, [pc, #124]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800558e:	f005 fc7d 	bl	800ae8c <HAL_GPIO_ReadPin>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	4b19      	ldr	r3, [pc, #100]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80055b0:	4b17      	ldr	r3, [pc, #92]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d913      	bls.n	80055e6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	f083 0302 	eor.w	r3, r3, #2
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	885b      	ldrh	r3, [r3, #2]
 80055d6:	3301      	adds	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	885a      	ldrh	r2, [r3, #2]
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80055e4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80055ec:	801a      	strh	r2, [r3, #0]
	}

}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200002a6 	.word	0x200002a6
 80055fc:	40021000 	.word	0x40021000
 8005600:	200002aa 	.word	0x200002aa
 8005604:	200002a4 	.word	0x200002a4
 8005608:	200002a7 	.word	0x200002a7
 800560c:	40020c00 	.word	0x40020c00
 8005610:	200002a8 	.word	0x200002a8
 8005614:	200002a2 	.word	0x200002a2
 8005618:	200002a0 	.word	0x200002a0

0800561c <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	return status_;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	881b      	ldrh	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	889b      	ldrh	r3, [r3, #4]
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	809a      	strh	r2, [r3, #4]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	719a      	strb	r2, [r3, #6]
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	719a      	strb	r2, [r3, #6]
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	799b      	ldrb	r3, [r3, #6]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a10      	ldr	r2, [pc, #64]	; (8005708 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80056c8:	3308      	adds	r3, #8
 80056ca:	4611      	mov	r1, r2
 80056cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f00f fed1 	bl	8015478 <memcpy>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	08019a88 	.word	0x08019a88

0800570c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	ed97 0a00 	vldr	s0, [r7]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff f862 	bl	80047f4 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800573a:	eeb0 0a67 	vmov.f32	s0, s15
 800573e:	4610      	mov	r0, r2
 8005740:	f7ff f895 	bl	800486e <_ZN6Logger9storeLog2Ef>
	}

}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800575a:	2b00      	cmp	r3, #0
 800575c:	d046      	beq.n	80057ec <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800576a:	461a      	mov	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3204      	adds	r2, #4
 8005770:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800577c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800578c:	3301      	adds	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800579c:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800579e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80057a6:	2bf9      	cmp	r3, #249	; 0xf9
 80057a8:	d903      	bls.n	80057b2 <_ZN20SystemIdentification10updateMsigEv+0x66>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	22fa      	movs	r2, #250	; 0xfa
 80057ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685c      	ldr	r4, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fa fedb 	bl	8000578 <__aeabi_f2d>
 80057c2:	4605      	mov	r5, r0
 80057c4:	460e      	mov	r6, r1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80057cc:	eef1 7a67 	vneg.f32	s15, s15
 80057d0:	ee17 3a90 	vmov	r3, s15
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fa fecf 	bl	8000578 <__aeabi_f2d>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	ec43 2b11 	vmov	d1, r2, r3
 80057e2:	ec46 5b10 	vmov	d0, r5, r6
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7ff fab4 	bl	8004d54 <_ZN5Motor8setRatioEdd>

	}

}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f4:	200002ac 	.word	0x200002ac

080057f8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	611a      	str	r2, [r3, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	615a      	str	r2, [r3, #20]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	619a      	str	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	621a      	str	r2, [r3, #32]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	f107 020c 	add.w	r2, r7, #12
 80058a0:	f107 0110 	add.w	r1, r7, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fb feeb 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80058aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80058ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80058b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80058ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058be:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f7fa fe58 	bl	8000578 <__aeabi_f2d>
 80058c8:	a30b      	add	r3, pc, #44	; (adr r3, 80058f8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	f7fa feab 	bl	8000628 <__aeabi_dmul>
 80058d2:	4603      	mov	r3, r0
 80058d4:	460c      	mov	r4, r1
 80058d6:	4618      	mov	r0, r3
 80058d8:	4621      	mov	r1, r4
 80058da:	f7fb f99d 	bl	8000c18 <__aeabi_d2f>
 80058de:	4602      	mov	r2, r0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	ee07 3a90 	vmov	s15, r3
}
 80058ec:	eeb0 0a67 	vmov.f32	s0, s15
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	1ab1d998 	.word	0x1ab1d998
 80058fc:	3f7830b5 	.word	0x3f7830b5

08005900 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	ed93 7a00 	vldr	s14, [r3]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	edd3 7a02 	vldr	s15, [r3, #8]
 8005914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005918:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005926:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	edd3 7a04 	vldr	s15, [r3, #16]
 800593c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005944:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005948:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7fa fe13 	bl	8000578 <__aeabi_f2d>
 8005952:	4604      	mov	r4, r0
 8005954:	460d      	mov	r5, r1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	ed93 7a06 	vldr	s14, [r3, #24]
 800595c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005964:	ee17 0a90 	vmov	r0, s15
 8005968:	f7fa fe06 	bl	8000578 <__aeabi_f2d>
 800596c:	a334      	add	r3, pc, #208	; (adr r3, 8005a40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fe59 	bl	8000628 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fa fc9d 	bl	80002bc <__adddf3>
 8005982:	4603      	mov	r3, r0
 8005984:	460c      	mov	r4, r1
 8005986:	4618      	mov	r0, r3
 8005988:	4621      	mov	r1, r4
 800598a:	f7fb f945 	bl	8000c18 <__aeabi_d2f>
 800598e:	4602      	mov	r2, r0
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005992:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	ed93 7a05 	vldr	s14, [r3, #20]
 800599a:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80059a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80059a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ac:	ee17 0a90 	vmov	r0, s15
 80059b0:	f7fa fde2 	bl	8000578 <__aeabi_f2d>
 80059b4:	a322      	add	r3, pc, #136	; (adr r3, 8005a40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa ff5f 	bl	800087c <__aeabi_ddiv>
 80059be:	4603      	mov	r3, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	4618      	mov	r0, r3
 80059c4:	4621      	mov	r1, r4
 80059c6:	f7fb f927 	bl	8000c18 <__aeabi_d2f>
 80059ca:	4603      	mov	r3, r0
 80059cc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80059ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80059d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80059f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80059f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059fa:	ee17 0a90 	vmov	r0, s15
 80059fe:	f7fa fdbb 	bl	8000578 <__aeabi_f2d>
 8005a02:	4605      	mov	r5, r0
 8005a04:	460e      	mov	r6, r1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a14:	ee17 0a90 	vmov	r0, s15
 8005a18:	f7fa fdae 	bl	8000578 <__aeabi_f2d>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	ec43 2b11 	vmov	d1, r2, r3
 8005a24:	ec46 5b10 	vmov	d0, r5, r6
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f7ff f993 	bl	8004d54 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005a2e:	4a07      	ldr	r2, [pc, #28]	; (8005a4c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3c:	f3af 8000 	nop.w
 8005a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a44:	3f50624d 	.word	0x3f50624d
 8005a48:	200002b4 	.word	0x200002b4
 8005a4c:	200002b0 	.word	0x200002b0

08005a50 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a5c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a84:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005aac:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ab0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ade:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ae2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff febf 	bl	8005890 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff feef 	bl	8005900 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005b80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff f8f1 	bl	8004d54 <_ZN5Motor8setRatioEdd>

}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w
	...

08005b88 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	ee07 3a90 	vmov	s15, r3
}
 8005b98:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005bba:	f001 fe2b 	bl	8007814 <cppFlip100ns>

		tim7_timer++;
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	; (8005c34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bc6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1a      	ldr	r2, [pc, #104]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d902      	bls.n	8005bd8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005be2:	f001 fdcd 	bl	8007780 <cppFlip1ms>

		tim6_timer++;
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bee:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d902      	bls.n	8005c00 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0f      	ldr	r2, [pc, #60]	; (8005c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005c0a:	f001 fe0d 	bl	8007828 <cppFlip10ms>

		tim13_timer++;
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c16:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d902      	bls.n	8005c28 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
	}

}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40001400 	.word	0x40001400
 8005c34:	20043924 	.word	0x20043924
 8005c38:	0001869f 	.word	0x0001869f
 8005c3c:	40001000 	.word	0x40001000
 8005c40:	200438e0 	.word	0x200438e0
 8005c44:	40001c00 	.word	0x40001c00
 8005c48:	20043928 	.word	0x20043928

08005c4c <init>:

void init()
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005c50:	2201      	movs	r2, #1
 8005c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c56:	4808      	ldr	r0, [pc, #32]	; (8005c78 <init+0x2c>)
 8005c58:	f005 f930 	bl	800aebc <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005c5c:	4807      	ldr	r0, [pc, #28]	; (8005c7c <init+0x30>)
 8005c5e:	f008 fff8 	bl	800ec52 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005c62:	4807      	ldr	r0, [pc, #28]	; (8005c80 <init+0x34>)
 8005c64:	f008 fff5 	bl	800ec52 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005c68:	4806      	ldr	r0, [pc, #24]	; (8005c84 <init+0x38>)
 8005c6a:	f008 fff2 	bl	800ec52 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005c6e:	f001 fce3 	bl	8007638 <cppInit>

	//path_following_initialize();

}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	20043a0c 	.word	0x20043a0c
 8005c80:	20043bb0 	.word	0x20043bb0
 8005c84:	2004392c 	.word	0x2004392c

08005c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c8c:	f003 fe0e 	bl	80098ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c90:	f000 f82a 	bl	8005ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c94:	f000 fdbc 	bl	8006810 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c98:	f000 fd8a 	bl	80067b0 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c9c:	f000 f9e8 	bl	8006070 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005ca0:	f000 fa14 	bl	80060cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005ca4:	f000 fa32 	bl	800610c <MX_SPI2_Init>
  MX_TIM1_Init();
 8005ca8:	f000 fa66 	bl	8006178 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005cac:	f000 fb70 	bl	8006390 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005cb0:	f000 fc3c 	bl	800652c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005cb4:	f000 fd52 	bl	800675c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005cb8:	f00a ff9e 	bl	8010bf8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005cbc:	f000 fbcc 	bl	8006458 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005cc0:	f000 f9a8 	bl	8006014 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005cc4:	f000 fb00 	bl	80062c8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005cc8:	f000 fc88 	bl	80065dc <MX_TIM10_Init>
  MX_TIM11_Init();
 8005ccc:	f000 fcd4 	bl	8006678 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005cd0:	f000 f898 	bl	8005e04 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005cd4:	f000 fbf6 	bl	80064c4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005cd8:	f000 fd1c 	bl	8006714 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005cdc:	f7ff ffb6 	bl	8005c4c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005ce0:	f001 fdba 	bl	8007858 <cppLoop>
 8005ce4:	e7fc      	b.n	8005ce0 <main+0x58>
	...

08005ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b0a4      	sub	sp, #144	; 0x90
 8005cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cf2:	2234      	movs	r2, #52	; 0x34
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f00f fbc9 	bl	801548e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d0c:	f107 030c 	add.w	r3, r7, #12
 8005d10:	223c      	movs	r2, #60	; 0x3c
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f00f fbba 	bl	801548e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	4b37      	ldr	r3, [pc, #220]	; (8005dfc <SystemClock_Config+0x114>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	4a36      	ldr	r2, [pc, #216]	; (8005dfc <SystemClock_Config+0x114>)
 8005d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d28:	6413      	str	r3, [r2, #64]	; 0x40
 8005d2a:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <SystemClock_Config+0x114>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	4b31      	ldr	r3, [pc, #196]	; (8005e00 <SystemClock_Config+0x118>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <SystemClock_Config+0x118>)
 8005d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	4b2e      	ldr	r3, [pc, #184]	; (8005e00 <SystemClock_Config+0x118>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d5a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d64:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005d66:	2308      	movs	r3, #8
 8005d68:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005d6a:	23b4      	movs	r3, #180	; 0xb4
 8005d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d70:	2302      	movs	r3, #2
 8005d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005d76:	2308      	movs	r3, #8
 8005d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d86:	4618      	mov	r0, r3
 8005d88:	f006 fcba 	bl	800c700 <HAL_RCC_OscConfig>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d92:	f000 fe7f 	bl	8006a94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d96:	f006 f835 	bl	800be04 <HAL_PWREx_EnableOverDrive>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005da0:	f000 fe78 	bl	8006a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005da4:	230f      	movs	r3, #15
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005da8:	2302      	movs	r3, #2
 8005daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dac:	2300      	movs	r3, #0
 8005dae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005db0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005db4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005dbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005dc0:	2105      	movs	r1, #5
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f006 f86e 	bl	800bea4 <HAL_RCC_ClockConfig>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005dce:	f000 fe61 	bl	8006a94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005dd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005dd6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005de0:	f107 030c 	add.w	r3, r7, #12
 8005de4:	4618      	mov	r0, r3
 8005de6:	f006 fa4d 	bl	800c284 <HAL_RCCEx_PeriphCLKConfig>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005df0:	f000 fe50 	bl	8006a94 <Error_Handler>
  }
}
 8005df4:	bf00      	nop
 8005df6:	3790      	adds	r7, #144	; 0x90
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40007000 	.word	0x40007000

08005e04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005e16:	4b7c      	ldr	r3, [pc, #496]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e18:	4a7c      	ldr	r2, [pc, #496]	; (800600c <MX_ADC2_Init+0x208>)
 8005e1a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005e1c:	4b7a      	ldr	r3, [pc, #488]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e22:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005e24:	4b78      	ldr	r3, [pc, #480]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005e2a:	4b77      	ldr	r3, [pc, #476]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005e30:	4b75      	ldr	r3, [pc, #468]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005e36:	4b74      	ldr	r3, [pc, #464]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e3e:	4b72      	ldr	r3, [pc, #456]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e44:	4b70      	ldr	r3, [pc, #448]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e46:	4a72      	ldr	r2, [pc, #456]	; (8006010 <MX_ADC2_Init+0x20c>)
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e4a:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005e50:	4b6d      	ldr	r3, [pc, #436]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e52:	220e      	movs	r2, #14
 8005e54:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005e56:	4b6c      	ldr	r3, [pc, #432]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e5e:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e64:	4868      	ldr	r0, [pc, #416]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e66:	f003 fdb5 	bl	80099d4 <HAL_ADC_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005e70:	f000 fe10 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005e74:	230a      	movs	r3, #10
 8005e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005e7c:	2306      	movs	r3, #6
 8005e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e80:	463b      	mov	r3, r7
 8005e82:	4619      	mov	r1, r3
 8005e84:	4860      	ldr	r0, [pc, #384]	; (8006008 <MX_ADC2_Init+0x204>)
 8005e86:	f003 fef9 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e90:	f000 fe00 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e94:	230b      	movs	r3, #11
 8005e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4859      	ldr	r0, [pc, #356]	; (8006008 <MX_ADC2_Init+0x204>)
 8005ea2:	f003 feeb 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005eac:	f000 fdf2 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4852      	ldr	r0, [pc, #328]	; (8006008 <MX_ADC2_Init+0x204>)
 8005ebe:	f003 fedd 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005ec8:	f000 fde4 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005ecc:	230d      	movs	r3, #13
 8005ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	484b      	ldr	r0, [pc, #300]	; (8006008 <MX_ADC2_Init+0x204>)
 8005eda:	f003 fecf 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005ee4:	f000 fdd6 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005eec:	2305      	movs	r3, #5
 8005eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4844      	ldr	r0, [pc, #272]	; (8006008 <MX_ADC2_Init+0x204>)
 8005ef6:	f003 fec1 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005f00:	f000 fdc8 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005f04:	2301      	movs	r3, #1
 8005f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005f08:	2306      	movs	r3, #6
 8005f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	4619      	mov	r1, r3
 8005f10:	483d      	ldr	r0, [pc, #244]	; (8006008 <MX_ADC2_Init+0x204>)
 8005f12:	f003 feb3 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005f1c:	f000 fdba 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005f20:	2302      	movs	r3, #2
 8005f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005f24:	2307      	movs	r3, #7
 8005f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f28:	463b      	mov	r3, r7
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4836      	ldr	r0, [pc, #216]	; (8006008 <MX_ADC2_Init+0x204>)
 8005f2e:	f003 fea5 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005f38:	f000 fdac 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005f40:	2308      	movs	r3, #8
 8005f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f44:	463b      	mov	r3, r7
 8005f46:	4619      	mov	r1, r3
 8005f48:	482f      	ldr	r0, [pc, #188]	; (8006008 <MX_ADC2_Init+0x204>)
 8005f4a:	f003 fe97 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005f54:	f000 fd9e 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005f58:	2304      	movs	r3, #4
 8005f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005f5c:	2309      	movs	r3, #9
 8005f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f60:	463b      	mov	r3, r7
 8005f62:	4619      	mov	r1, r3
 8005f64:	4828      	ldr	r0, [pc, #160]	; (8006008 <MX_ADC2_Init+0x204>)
 8005f66:	f003 fe89 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005f70:	f000 fd90 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005f74:	2305      	movs	r3, #5
 8005f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005f78:	230a      	movs	r3, #10
 8005f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4821      	ldr	r0, [pc, #132]	; (8006008 <MX_ADC2_Init+0x204>)
 8005f82:	f003 fe7b 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f8c:	f000 fd82 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f90:	2306      	movs	r3, #6
 8005f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f94:	230b      	movs	r3, #11
 8005f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	481a      	ldr	r0, [pc, #104]	; (8006008 <MX_ADC2_Init+0x204>)
 8005f9e:	f003 fe6d 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005fa8:	f000 fd74 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005fac:	2307      	movs	r3, #7
 8005fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4813      	ldr	r0, [pc, #76]	; (8006008 <MX_ADC2_Init+0x204>)
 8005fba:	f003 fe5f 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005fc4:	f000 fd66 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005fc8:	2308      	movs	r3, #8
 8005fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005fcc:	230d      	movs	r3, #13
 8005fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	480c      	ldr	r0, [pc, #48]	; (8006008 <MX_ADC2_Init+0x204>)
 8005fd6:	f003 fe51 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005fe0:	f000 fd58 	bl	8006a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005fe4:	2309      	movs	r3, #9
 8005fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005fe8:	230e      	movs	r3, #14
 8005fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fec:	463b      	mov	r3, r7
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4805      	ldr	r0, [pc, #20]	; (8006008 <MX_ADC2_Init+0x204>)
 8005ff2:	f003 fe43 	bl	8009c7c <HAL_ADC_ConfigChannel>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005ffc:	f000 fd4a 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	200437b0 	.word	0x200437b0
 800600c:	40012100 	.word	0x40012100
 8006010:	0f000001 	.word	0x0f000001

08006014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006018:	4b12      	ldr	r3, [pc, #72]	; (8006064 <MX_I2C1_Init+0x50>)
 800601a:	4a13      	ldr	r2, [pc, #76]	; (8006068 <MX_I2C1_Init+0x54>)
 800601c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <MX_I2C1_Init+0x50>)
 8006020:	4a12      	ldr	r2, [pc, #72]	; (800606c <MX_I2C1_Init+0x58>)
 8006022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <MX_I2C1_Init+0x50>)
 8006026:	2200      	movs	r2, #0
 8006028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800602a:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <MX_I2C1_Init+0x50>)
 800602c:	2200      	movs	r2, #0
 800602e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <MX_I2C1_Init+0x50>)
 8006032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006036:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <MX_I2C1_Init+0x50>)
 800603a:	2200      	movs	r2, #0
 800603c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <MX_I2C1_Init+0x50>)
 8006040:	2200      	movs	r2, #0
 8006042:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <MX_I2C1_Init+0x50>)
 8006046:	2200      	movs	r2, #0
 8006048:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <MX_I2C1_Init+0x50>)
 800604c:	2280      	movs	r2, #128	; 0x80
 800604e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006050:	4804      	ldr	r0, [pc, #16]	; (8006064 <MX_I2C1_Init+0x50>)
 8006052:	f004 ff4d 	bl	800aef0 <HAL_I2C_Init>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800605c:	f000 fd1a 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006060:	bf00      	nop
 8006062:	bd80      	pop	{r7, pc}
 8006064:	200437f8 	.word	0x200437f8
 8006068:	40005400 	.word	0x40005400
 800606c:	000186a0 	.word	0x000186a0

08006070 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006074:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <MX_I2C2_Init+0x50>)
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <MX_I2C2_Init+0x54>)
 8006078:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <MX_I2C2_Init+0x50>)
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <MX_I2C2_Init+0x58>)
 800607e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <MX_I2C2_Init+0x50>)
 8006082:	2200      	movs	r2, #0
 8006084:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006086:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <MX_I2C2_Init+0x50>)
 8006088:	2200      	movs	r2, #0
 800608a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <MX_I2C2_Init+0x50>)
 800608e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006092:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <MX_I2C2_Init+0x50>)
 8006096:	2200      	movs	r2, #0
 8006098:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <MX_I2C2_Init+0x50>)
 800609c:	2200      	movs	r2, #0
 800609e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <MX_I2C2_Init+0x50>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <MX_I2C2_Init+0x50>)
 80060a8:	2280      	movs	r2, #128	; 0x80
 80060aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80060ac:	4804      	ldr	r0, [pc, #16]	; (80060c0 <MX_I2C2_Init+0x50>)
 80060ae:	f004 ff1f 	bl	800aef0 <HAL_I2C_Init>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80060b8:	f000 fcec 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80060bc:	bf00      	nop
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2004388c 	.word	0x2004388c
 80060c4:	40005800 	.word	0x40005800
 80060c8:	000186a0 	.word	0x000186a0

080060cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060d2:	4a0d      	ldr	r2, [pc, #52]	; (8006108 <MX_SDIO_SD_Init+0x3c>)
 80060d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060d8:	2200      	movs	r2, #0
 80060da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060de:	2200      	movs	r2, #0
 80060e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80060f4:	4b03      	ldr	r3, [pc, #12]	; (8006104 <MX_SDIO_SD_Init+0x38>)
 80060f6:	2202      	movs	r2, #2
 80060f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20043a8c 	.word	0x20043a8c
 8006108:	40012c00 	.word	0x40012c00

0800610c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006110:	4b17      	ldr	r3, [pc, #92]	; (8006170 <MX_SPI2_Init+0x64>)
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <MX_SPI2_Init+0x68>)
 8006114:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006116:	4b16      	ldr	r3, [pc, #88]	; (8006170 <MX_SPI2_Init+0x64>)
 8006118:	f44f 7282 	mov.w	r2, #260	; 0x104
 800611c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800611e:	4b14      	ldr	r3, [pc, #80]	; (8006170 <MX_SPI2_Init+0x64>)
 8006120:	2200      	movs	r2, #0
 8006122:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006124:	4b12      	ldr	r3, [pc, #72]	; (8006170 <MX_SPI2_Init+0x64>)
 8006126:	2200      	movs	r2, #0
 8006128:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <MX_SPI2_Init+0x64>)
 800612c:	2202      	movs	r2, #2
 800612e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006130:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <MX_SPI2_Init+0x64>)
 8006132:	2201      	movs	r2, #1
 8006134:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <MX_SPI2_Init+0x64>)
 8006138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800613c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800613e:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <MX_SPI2_Init+0x64>)
 8006140:	2228      	movs	r2, #40	; 0x28
 8006142:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <MX_SPI2_Init+0x64>)
 8006146:	2200      	movs	r2, #0
 8006148:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <MX_SPI2_Init+0x64>)
 800614c:	2200      	movs	r2, #0
 800614e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <MX_SPI2_Init+0x64>)
 8006152:	2200      	movs	r2, #0
 8006154:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <MX_SPI2_Init+0x64>)
 8006158:	220a      	movs	r2, #10
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800615c:	4804      	ldr	r0, [pc, #16]	; (8006170 <MX_SPI2_Init+0x64>)
 800615e:	f007 fff9 	bl	800e154 <HAL_SPI_Init>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006168:	f000 fc94 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800616c:	bf00      	nop
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200436d8 	.word	0x200436d8
 8006174:	40003800 	.word	0x40003800

08006178 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b09a      	sub	sp, #104	; 0x68
 800617c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800617e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f00f f981 	bl	801548e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800618c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006196:	f107 0320 	add.w	r3, r7, #32
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	609a      	str	r2, [r3, #8]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	611a      	str	r2, [r3, #16]
 80061a6:	615a      	str	r2, [r3, #20]
 80061a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80061aa:	463b      	mov	r3, r7
 80061ac:	2220      	movs	r2, #32
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f00f f96c 	bl	801548e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80061b6:	4b42      	ldr	r3, [pc, #264]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061b8:	4a42      	ldr	r2, [pc, #264]	; (80062c4 <MX_TIM1_Init+0x14c>)
 80061ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80061bc:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061be:	2200      	movs	r2, #0
 80061c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061c2:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80061c8:	4b3d      	ldr	r3, [pc, #244]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061d0:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80061d6:	4b3a      	ldr	r3, [pc, #232]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061d8:	2200      	movs	r2, #0
 80061da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061dc:	4b38      	ldr	r3, [pc, #224]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061de:	2200      	movs	r2, #0
 80061e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80061e2:	4837      	ldr	r0, [pc, #220]	; (80062c0 <MX_TIM1_Init+0x148>)
 80061e4:	f008 fd59 	bl	800ec9a <HAL_TIM_PWM_Init>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061ee:	f000 fc51 	bl	8006a94 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80061f2:	2303      	movs	r3, #3
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061f6:	2300      	movs	r3, #0
 80061f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061fa:	2301      	movs	r3, #1
 80061fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061fe:	2300      	movs	r3, #0
 8006200:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006206:	2300      	movs	r3, #0
 8006208:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800620a:	2301      	movs	r3, #1
 800620c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800620e:	2300      	movs	r3, #0
 8006210:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006216:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800621a:	4619      	mov	r1, r3
 800621c:	4828      	ldr	r0, [pc, #160]	; (80062c0 <MX_TIM1_Init+0x148>)
 800621e:	f008 fda5 	bl	800ed6c <HAL_TIM_Encoder_Init>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006228:	f000 fc34 	bl	8006a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800622c:	2300      	movs	r3, #0
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006230:	2300      	movs	r3, #0
 8006232:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006238:	4619      	mov	r1, r3
 800623a:	4821      	ldr	r0, [pc, #132]	; (80062c0 <MX_TIM1_Init+0x148>)
 800623c:	f009 facc 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006246:	f000 fc25 	bl	8006a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800624a:	2360      	movs	r3, #96	; 0x60
 800624c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006252:	2300      	movs	r3, #0
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006256:	2300      	movs	r3, #0
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800625a:	2300      	movs	r3, #0
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006262:	2300      	movs	r3, #0
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006266:	f107 0320 	add.w	r3, r7, #32
 800626a:	2208      	movs	r2, #8
 800626c:	4619      	mov	r1, r3
 800626e:	4814      	ldr	r0, [pc, #80]	; (80062c0 <MX_TIM1_Init+0x148>)
 8006270:	f008 ff4e 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800627a:	f000 fc0b 	bl	8006a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800627e:	2300      	movs	r3, #0
 8006280:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006296:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006298:	2300      	movs	r3, #0
 800629a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800629c:	463b      	mov	r3, r7
 800629e:	4619      	mov	r1, r3
 80062a0:	4807      	ldr	r0, [pc, #28]	; (80062c0 <MX_TIM1_Init+0x148>)
 80062a2:	f009 fb15 	bl	800f8d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80062ac:	f000 fbf2 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80062b0:	4803      	ldr	r0, [pc, #12]	; (80062c0 <MX_TIM1_Init+0x148>)
 80062b2:	f000 ffdf 	bl	8007274 <HAL_TIM_MspPostInit>

}
 80062b6:	bf00      	nop
 80062b8:	3768      	adds	r7, #104	; 0x68
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20043a4c 	.word	0x20043a4c
 80062c4:	40010000 	.word	0x40010000

080062c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062ce:	f107 0320 	add.w	r3, r7, #32
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	611a      	str	r2, [r3, #16]
 80062e6:	615a      	str	r2, [r3, #20]
 80062e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80062ea:	4b27      	ldr	r3, [pc, #156]	; (8006388 <MX_TIM3_Init+0xc0>)
 80062ec:	4a27      	ldr	r2, [pc, #156]	; (800638c <MX_TIM3_Init+0xc4>)
 80062ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80062f0:	4b25      	ldr	r3, [pc, #148]	; (8006388 <MX_TIM3_Init+0xc0>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <MX_TIM3_Init+0xc0>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80062fc:	4b22      	ldr	r3, [pc, #136]	; (8006388 <MX_TIM3_Init+0xc0>)
 80062fe:	f241 1293 	movw	r2, #4499	; 0x1193
 8006302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006304:	4b20      	ldr	r3, [pc, #128]	; (8006388 <MX_TIM3_Init+0xc0>)
 8006306:	2200      	movs	r2, #0
 8006308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800630a:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <MX_TIM3_Init+0xc0>)
 800630c:	2200      	movs	r2, #0
 800630e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006310:	481d      	ldr	r0, [pc, #116]	; (8006388 <MX_TIM3_Init+0xc0>)
 8006312:	f008 fcc2 	bl	800ec9a <HAL_TIM_PWM_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800631c:	f000 fbba 	bl	8006a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006320:	2300      	movs	r3, #0
 8006322:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006324:	2300      	movs	r3, #0
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006328:	f107 0320 	add.w	r3, r7, #32
 800632c:	4619      	mov	r1, r3
 800632e:	4816      	ldr	r0, [pc, #88]	; (8006388 <MX_TIM3_Init+0xc0>)
 8006330:	f009 fa52 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800633a:	f000 fbab 	bl	8006a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800633e:	2360      	movs	r3, #96	; 0x60
 8006340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	2200      	movs	r2, #0
 8006352:	4619      	mov	r1, r3
 8006354:	480c      	ldr	r0, [pc, #48]	; (8006388 <MX_TIM3_Init+0xc0>)
 8006356:	f008 fedb 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006360:	f000 fb98 	bl	8006a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	2204      	movs	r2, #4
 8006368:	4619      	mov	r1, r3
 800636a:	4807      	ldr	r0, [pc, #28]	; (8006388 <MX_TIM3_Init+0xc0>)
 800636c:	f008 fed0 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006376:	f000 fb8d 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800637a:	4803      	ldr	r0, [pc, #12]	; (8006388 <MX_TIM3_Init+0xc0>)
 800637c:	f000 ff7a 	bl	8007274 <HAL_TIM_MspPostInit>

}
 8006380:	bf00      	nop
 8006382:	3728      	adds	r7, #40	; 0x28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200438e4 	.word	0x200438e4
 800638c:	40000400 	.word	0x40000400

08006390 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006396:	f107 0320 	add.w	r3, r7, #32
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063a0:	1d3b      	adds	r3, r7, #4
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	611a      	str	r2, [r3, #16]
 80063ae:	615a      	str	r2, [r3, #20]
 80063b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80063b2:	4b27      	ldr	r3, [pc, #156]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063b4:	4a27      	ldr	r2, [pc, #156]	; (8006454 <MX_TIM4_Init+0xc4>)
 80063b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80063b8:	4b25      	ldr	r3, [pc, #148]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80063c4:	4b22      	ldr	r3, [pc, #136]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80063ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063cc:	4b20      	ldr	r3, [pc, #128]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063d2:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80063d8:	481d      	ldr	r0, [pc, #116]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063da:	f008 fc5e 	bl	800ec9a <HAL_TIM_PWM_Init>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80063e4:	f000 fb56 	bl	8006a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063e8:	2300      	movs	r3, #0
 80063ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063f0:	f107 0320 	add.w	r3, r7, #32
 80063f4:	4619      	mov	r1, r3
 80063f6:	4816      	ldr	r0, [pc, #88]	; (8006450 <MX_TIM4_Init+0xc0>)
 80063f8:	f009 f9ee 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006402:	f000 fb47 	bl	8006a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006406:	2360      	movs	r3, #96	; 0x60
 8006408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006416:	1d3b      	adds	r3, r7, #4
 8006418:	2208      	movs	r2, #8
 800641a:	4619      	mov	r1, r3
 800641c:	480c      	ldr	r0, [pc, #48]	; (8006450 <MX_TIM4_Init+0xc0>)
 800641e:	f008 fe77 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006428:	f000 fb34 	bl	8006a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800642c:	1d3b      	adds	r3, r7, #4
 800642e:	220c      	movs	r2, #12
 8006430:	4619      	mov	r1, r3
 8006432:	4807      	ldr	r0, [pc, #28]	; (8006450 <MX_TIM4_Init+0xc0>)
 8006434:	f008 fe6c 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800643e:	f000 fb29 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006442:	4803      	ldr	r0, [pc, #12]	; (8006450 <MX_TIM4_Init+0xc0>)
 8006444:	f000 ff16 	bl	8007274 <HAL_TIM_MspPostInit>

}
 8006448:	bf00      	nop
 800644a:	3728      	adds	r7, #40	; 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20043770 	.word	0x20043770
 8006454:	40000800 	.word	0x40000800

08006458 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800645e:	463b      	mov	r3, r7
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <MX_TIM6_Init+0x64>)
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <MX_TIM6_Init+0x68>)
 800646a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800646c:	4b13      	ldr	r3, [pc, #76]	; (80064bc <MX_TIM6_Init+0x64>)
 800646e:	2259      	movs	r2, #89	; 0x59
 8006470:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <MX_TIM6_Init+0x64>)
 8006474:	2200      	movs	r2, #0
 8006476:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006478:	4b10      	ldr	r3, [pc, #64]	; (80064bc <MX_TIM6_Init+0x64>)
 800647a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800647e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006480:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <MX_TIM6_Init+0x64>)
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006486:	480d      	ldr	r0, [pc, #52]	; (80064bc <MX_TIM6_Init+0x64>)
 8006488:	f008 fbb8 	bl	800ebfc <HAL_TIM_Base_Init>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006492:	f000 faff 	bl	8006a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006496:	2300      	movs	r3, #0
 8006498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800649e:	463b      	mov	r3, r7
 80064a0:	4619      	mov	r1, r3
 80064a2:	4806      	ldr	r0, [pc, #24]	; (80064bc <MX_TIM6_Init+0x64>)
 80064a4:	f009 f998 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80064ae:	f000 faf1 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20043a0c 	.word	0x20043a0c
 80064c0:	40001000 	.word	0x40001000

080064c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ca:	463b      	mov	r3, r7
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <MX_TIM7_Init+0x60>)
 80064d4:	4a14      	ldr	r2, [pc, #80]	; (8006528 <MX_TIM7_Init+0x64>)
 80064d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80064d8:	4b12      	ldr	r3, [pc, #72]	; (8006524 <MX_TIM7_Init+0x60>)
 80064da:	22b3      	movs	r2, #179	; 0xb3
 80064dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064de:	4b11      	ldr	r3, [pc, #68]	; (8006524 <MX_TIM7_Init+0x60>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80064e4:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <MX_TIM7_Init+0x60>)
 80064e6:	2231      	movs	r2, #49	; 0x31
 80064e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064ea:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <MX_TIM7_Init+0x60>)
 80064ec:	2280      	movs	r2, #128	; 0x80
 80064ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80064f0:	480c      	ldr	r0, [pc, #48]	; (8006524 <MX_TIM7_Init+0x60>)
 80064f2:	f008 fb83 	bl	800ebfc <HAL_TIM_Base_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80064fc:	f000 faca 	bl	8006a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006500:	2300      	movs	r3, #0
 8006502:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006508:	463b      	mov	r3, r7
 800650a:	4619      	mov	r1, r3
 800650c:	4805      	ldr	r0, [pc, #20]	; (8006524 <MX_TIM7_Init+0x60>)
 800650e:	f009 f963 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006518:	f000 fabc 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20043bb0 	.word	0x20043bb0
 8006528:	40001400 	.word	0x40001400

0800652c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08c      	sub	sp, #48	; 0x30
 8006530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006532:	f107 030c 	add.w	r3, r7, #12
 8006536:	2224      	movs	r2, #36	; 0x24
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f00e ffa7 	bl	801548e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <MX_TIM8_Init+0xa8>)
 800654a:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <MX_TIM8_Init+0xac>)
 800654c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <MX_TIM8_Init+0xa8>)
 8006550:	2200      	movs	r2, #0
 8006552:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006554:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <MX_TIM8_Init+0xa8>)
 8006556:	2210      	movs	r2, #16
 8006558:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800655a:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <MX_TIM8_Init+0xa8>)
 800655c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006560:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <MX_TIM8_Init+0xa8>)
 8006564:	2200      	movs	r2, #0
 8006566:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <MX_TIM8_Init+0xa8>)
 800656a:	2200      	movs	r2, #0
 800656c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <MX_TIM8_Init+0xa8>)
 8006570:	2200      	movs	r2, #0
 8006572:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006574:	2303      	movs	r3, #3
 8006576:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800657c:	2301      	movs	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006588:	2300      	movs	r3, #0
 800658a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800658c:	2301      	movs	r3, #1
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006590:	2300      	movs	r3, #0
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006598:	f107 030c 	add.w	r3, r7, #12
 800659c:	4619      	mov	r1, r3
 800659e:	480d      	ldr	r0, [pc, #52]	; (80065d4 <MX_TIM8_Init+0xa8>)
 80065a0:	f008 fbe4 	bl	800ed6c <HAL_TIM_Encoder_Init>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80065aa:	f000 fa73 	bl	8006a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065ae:	2300      	movs	r3, #0
 80065b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80065b6:	1d3b      	adds	r3, r7, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	4806      	ldr	r0, [pc, #24]	; (80065d4 <MX_TIM8_Init+0xa8>)
 80065bc:	f009 f90c 	bl	800f7d8 <HAL_TIMEx_MasterConfigSynchronization>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80065c6:	f000 fa65 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80065ca:	bf00      	nop
 80065cc:	3730      	adds	r7, #48	; 0x30
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20043730 	.word	0x20043730
 80065d8:	40010400 	.word	0x40010400

080065dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	611a      	str	r2, [r3, #16]
 80065f0:	615a      	str	r2, [r3, #20]
 80065f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065f4:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <MX_TIM10_Init+0x94>)
 80065f6:	4a1f      	ldr	r2, [pc, #124]	; (8006674 <MX_TIM10_Init+0x98>)
 80065f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <MX_TIM10_Init+0x94>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006600:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <MX_TIM10_Init+0x94>)
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006606:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <MX_TIM10_Init+0x94>)
 8006608:	f242 3227 	movw	r2, #8999	; 0x2327
 800660c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800660e:	4b18      	ldr	r3, [pc, #96]	; (8006670 <MX_TIM10_Init+0x94>)
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006614:	4b16      	ldr	r3, [pc, #88]	; (8006670 <MX_TIM10_Init+0x94>)
 8006616:	2200      	movs	r2, #0
 8006618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800661a:	4815      	ldr	r0, [pc, #84]	; (8006670 <MX_TIM10_Init+0x94>)
 800661c:	f008 faee 	bl	800ebfc <HAL_TIM_Base_Init>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006626:	f000 fa35 	bl	8006a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800662a:	4811      	ldr	r0, [pc, #68]	; (8006670 <MX_TIM10_Init+0x94>)
 800662c:	f008 fb35 	bl	800ec9a <HAL_TIM_PWM_Init>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006636:	f000 fa2d 	bl	8006a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800663a:	2360      	movs	r3, #96	; 0x60
 800663c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	2200      	movs	r2, #0
 800664e:	4619      	mov	r1, r3
 8006650:	4807      	ldr	r0, [pc, #28]	; (8006670 <MX_TIM10_Init+0x94>)
 8006652:	f008 fd5d 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800665c:	f000 fa1a 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006660:	4803      	ldr	r0, [pc, #12]	; (8006670 <MX_TIM10_Init+0x94>)
 8006662:	f000 fe07 	bl	8007274 <HAL_TIM_MspPostInit>

}
 8006666:	bf00      	nop
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	2004384c 	.word	0x2004384c
 8006674:	40014400 	.word	0x40014400

08006678 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	611a      	str	r2, [r3, #16]
 800668c:	615a      	str	r2, [r3, #20]
 800668e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006690:	4b1e      	ldr	r3, [pc, #120]	; (800670c <MX_TIM11_Init+0x94>)
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <MX_TIM11_Init+0x98>)
 8006694:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <MX_TIM11_Init+0x94>)
 8006698:	2201      	movs	r2, #1
 800669a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800669c:	4b1b      	ldr	r3, [pc, #108]	; (800670c <MX_TIM11_Init+0x94>)
 800669e:	2200      	movs	r2, #0
 80066a0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <MX_TIM11_Init+0x94>)
 80066a4:	f242 3227 	movw	r2, #8999	; 0x2327
 80066a8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066aa:	4b18      	ldr	r3, [pc, #96]	; (800670c <MX_TIM11_Init+0x94>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066b0:	4b16      	ldr	r3, [pc, #88]	; (800670c <MX_TIM11_Init+0x94>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80066b6:	4815      	ldr	r0, [pc, #84]	; (800670c <MX_TIM11_Init+0x94>)
 80066b8:	f008 faa0 	bl	800ebfc <HAL_TIM_Base_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80066c2:	f000 f9e7 	bl	8006a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80066c6:	4811      	ldr	r0, [pc, #68]	; (800670c <MX_TIM11_Init+0x94>)
 80066c8:	f008 fae7 	bl	800ec9a <HAL_TIM_PWM_Init>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80066d2:	f000 f9df 	bl	8006a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066d6:	2360      	movs	r3, #96	; 0x60
 80066d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	2200      	movs	r2, #0
 80066ea:	4619      	mov	r1, r3
 80066ec:	4807      	ldr	r0, [pc, #28]	; (800670c <MX_TIM11_Init+0x94>)
 80066ee:	f008 fd0f 	bl	800f110 <HAL_TIM_PWM_ConfigChannel>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80066f8:	f000 f9cc 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80066fc:	4803      	ldr	r0, [pc, #12]	; (800670c <MX_TIM11_Init+0x94>)
 80066fe:	f000 fdb9 	bl	8007274 <HAL_TIM_MspPostInit>

}
 8006702:	bf00      	nop
 8006704:	3720      	adds	r7, #32
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	2004396c 	.word	0x2004396c
 8006710:	40014800 	.word	0x40014800

08006714 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <MX_TIM13_Init+0x40>)
 800671a:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <MX_TIM13_Init+0x44>)
 800671c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <MX_TIM13_Init+0x40>)
 8006720:	2259      	movs	r2, #89	; 0x59
 8006722:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <MX_TIM13_Init+0x40>)
 8006726:	2200      	movs	r2, #0
 8006728:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <MX_TIM13_Init+0x40>)
 800672c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006730:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006732:	4b08      	ldr	r3, [pc, #32]	; (8006754 <MX_TIM13_Init+0x40>)
 8006734:	2200      	movs	r2, #0
 8006736:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <MX_TIM13_Init+0x40>)
 800673a:	2280      	movs	r2, #128	; 0x80
 800673c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <MX_TIM13_Init+0x40>)
 8006740:	f008 fa5c 	bl	800ebfc <HAL_TIM_Base_Init>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800674a:	f000 f9a3 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2004392c 	.word	0x2004392c
 8006758:	40001c00 	.word	0x40001c00

0800675c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006762:	4a12      	ldr	r2, [pc, #72]	; (80067ac <MX_USART2_UART_Init+0x50>)
 8006764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006766:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800676c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800676e:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006770:	2200      	movs	r2, #0
 8006772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006776:	2200      	movs	r2, #0
 8006778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800677a:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 800677c:	2200      	movs	r2, #0
 800677e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006780:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006782:	220c      	movs	r2, #12
 8006784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006786:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006788:	2200      	movs	r2, #0
 800678a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 800678e:	2200      	movs	r2, #0
 8006790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006792:	4805      	ldr	r0, [pc, #20]	; (80067a8 <MX_USART2_UART_Init+0x4c>)
 8006794:	f009 f902 	bl	800f99c <HAL_UART_Init>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800679e:	f000 f979 	bl	8006a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20043b10 	.word	0x20043b10
 80067ac:	40004400 	.word	0x40004400

080067b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80067b6:	2300      	movs	r3, #0
 80067b8:	607b      	str	r3, [r7, #4]
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <MX_DMA_Init+0x5c>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	4a13      	ldr	r2, [pc, #76]	; (800680c <MX_DMA_Init+0x5c>)
 80067c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067c4:	6313      	str	r3, [r2, #48]	; 0x30
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <MX_DMA_Init+0x5c>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ce:	607b      	str	r3, [r7, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80067d2:	2200      	movs	r2, #0
 80067d4:	2100      	movs	r1, #0
 80067d6:	203a      	movs	r0, #58	; 0x3a
 80067d8:	f003 fddb 	bl	800a392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80067dc:	203a      	movs	r0, #58	; 0x3a
 80067de:	f003 fdf4 	bl	800a3ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	2100      	movs	r1, #0
 80067e6:	203b      	movs	r0, #59	; 0x3b
 80067e8:	f003 fdd3 	bl	800a392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80067ec:	203b      	movs	r0, #59	; 0x3b
 80067ee:	f003 fdec 	bl	800a3ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	2045      	movs	r0, #69	; 0x45
 80067f8:	f003 fdcb 	bl	800a392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80067fc:	2045      	movs	r0, #69	; 0x45
 80067fe:	f003 fde4 	bl	800a3ca <HAL_NVIC_EnableIRQ>

}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40023800 	.word	0x40023800

08006810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006816:	f107 031c 	add.w	r3, r7, #28
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
 8006820:	609a      	str	r2, [r3, #8]
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	4b94      	ldr	r3, [pc, #592]	; (8006a7c <MX_GPIO_Init+0x26c>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	4a93      	ldr	r2, [pc, #588]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006830:	f043 0310 	orr.w	r3, r3, #16
 8006834:	6313      	str	r3, [r2, #48]	; 0x30
 8006836:	4b91      	ldr	r3, [pc, #580]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	4a8c      	ldr	r2, [pc, #560]	; (8006a7c <MX_GPIO_Init+0x26c>)
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	6313      	str	r3, [r2, #48]	; 0x30
 8006852:	4b8a      	ldr	r3, [pc, #552]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	4b86      	ldr	r3, [pc, #536]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	4a85      	ldr	r2, [pc, #532]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006868:	f043 0304 	orr.w	r3, r3, #4
 800686c:	6313      	str	r3, [r2, #48]	; 0x30
 800686e:	4b83      	ldr	r3, [pc, #524]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4b7f      	ldr	r3, [pc, #508]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	4a7e      	ldr	r2, [pc, #504]	; (8006a7c <MX_GPIO_Init+0x26c>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	6313      	str	r3, [r2, #48]	; 0x30
 800688a:	4b7c      	ldr	r3, [pc, #496]	; (8006a7c <MX_GPIO_Init+0x26c>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	4b78      	ldr	r3, [pc, #480]	; (8006a7c <MX_GPIO_Init+0x26c>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	4a77      	ldr	r2, [pc, #476]	; (8006a7c <MX_GPIO_Init+0x26c>)
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	6313      	str	r3, [r2, #48]	; 0x30
 80068a6:	4b75      	ldr	r3, [pc, #468]	; (8006a7c <MX_GPIO_Init+0x26c>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068b2:	2300      	movs	r3, #0
 80068b4:	607b      	str	r3, [r7, #4]
 80068b6:	4b71      	ldr	r3, [pc, #452]	; (8006a7c <MX_GPIO_Init+0x26c>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	4a70      	ldr	r2, [pc, #448]	; (8006a7c <MX_GPIO_Init+0x26c>)
 80068bc:	f043 0308 	orr.w	r3, r3, #8
 80068c0:	6313      	str	r3, [r2, #48]	; 0x30
 80068c2:	4b6e      	ldr	r3, [pc, #440]	; (8006a7c <MX_GPIO_Init+0x26c>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80068ce:	2200      	movs	r2, #0
 80068d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068d4:	486a      	ldr	r0, [pc, #424]	; (8006a80 <MX_GPIO_Init+0x270>)
 80068d6:	f004 faf1 	bl	800aebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80068da:	2200      	movs	r2, #0
 80068dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068e0:	4868      	ldr	r0, [pc, #416]	; (8006a84 <MX_GPIO_Init+0x274>)
 80068e2:	f004 faeb 	bl	800aebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80068e6:	2200      	movs	r2, #0
 80068e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068ec:	4866      	ldr	r0, [pc, #408]	; (8006a88 <MX_GPIO_Init+0x278>)
 80068ee:	f004 fae5 	bl	800aebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068f2:	2200      	movs	r2, #0
 80068f4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80068f8:	4864      	ldr	r0, [pc, #400]	; (8006a8c <MX_GPIO_Init+0x27c>)
 80068fa:	f004 fadf 	bl	800aebc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068fe:	2304      	movs	r3, #4
 8006900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006902:	2300      	movs	r3, #0
 8006904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800690a:	f107 031c 	add.w	r3, r7, #28
 800690e:	4619      	mov	r1, r3
 8006910:	485b      	ldr	r0, [pc, #364]	; (8006a80 <MX_GPIO_Init+0x270>)
 8006912:	f004 f911 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006916:	230f      	movs	r3, #15
 8006918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800691a:	2303      	movs	r3, #3
 800691c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691e:	2300      	movs	r3, #0
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006922:	f107 031c 	add.w	r3, r7, #28
 8006926:	4619      	mov	r1, r3
 8006928:	4859      	ldr	r0, [pc, #356]	; (8006a90 <MX_GPIO_Init+0x280>)
 800692a:	f004 f905 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800692e:	23e1      	movs	r3, #225	; 0xe1
 8006930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006932:	2303      	movs	r3, #3
 8006934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800693a:	f107 031c 	add.w	r3, r7, #28
 800693e:	4619      	mov	r1, r3
 8006940:	4852      	ldr	r0, [pc, #328]	; (8006a8c <MX_GPIO_Init+0x27c>)
 8006942:	f004 f8f9 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006946:	2303      	movs	r3, #3
 8006948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800694a:	2303      	movs	r3, #3
 800694c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694e:	2300      	movs	r3, #0
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006952:	f107 031c 	add.w	r3, r7, #28
 8006956:	4619      	mov	r1, r3
 8006958:	484a      	ldr	r0, [pc, #296]	; (8006a84 <MX_GPIO_Init+0x274>)
 800695a:	f004 f8ed 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800695e:	2304      	movs	r3, #4
 8006960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006962:	2300      	movs	r3, #0
 8006964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006966:	2301      	movs	r3, #1
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800696a:	f107 031c 	add.w	r3, r7, #28
 800696e:	4619      	mov	r1, r3
 8006970:	4844      	ldr	r0, [pc, #272]	; (8006a84 <MX_GPIO_Init+0x274>)
 8006972:	f004 f8e1 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006976:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800697a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800697c:	2300      	movs	r3, #0
 800697e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006980:	2301      	movs	r3, #1
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006984:	f107 031c 	add.w	r3, r7, #28
 8006988:	4619      	mov	r1, r3
 800698a:	483d      	ldr	r0, [pc, #244]	; (8006a80 <MX_GPIO_Init+0x270>)
 800698c:	f004 f8d4 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006996:	2301      	movs	r3, #1
 8006998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699a:	2300      	movs	r3, #0
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800699e:	2300      	movs	r3, #0
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	4619      	mov	r1, r3
 80069a8:	4835      	ldr	r0, [pc, #212]	; (8006a80 <MX_GPIO_Init+0x270>)
 80069aa:	f004 f8c5 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80069ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069b4:	2301      	movs	r3, #1
 80069b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069bc:	2300      	movs	r3, #0
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c0:	f107 031c 	add.w	r3, r7, #28
 80069c4:	4619      	mov	r1, r3
 80069c6:	482f      	ldr	r0, [pc, #188]	; (8006a84 <MX_GPIO_Init+0x274>)
 80069c8:	f004 f8b6 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80069cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069da:	f107 031c 	add.w	r3, r7, #28
 80069de:	4619      	mov	r1, r3
 80069e0:	4829      	ldr	r0, [pc, #164]	; (8006a88 <MX_GPIO_Init+0x278>)
 80069e2:	f004 f8a9 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ec:	2301      	movs	r3, #1
 80069ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069f8:	f107 031c 	add.w	r3, r7, #28
 80069fc:	4619      	mov	r1, r3
 80069fe:	4822      	ldr	r0, [pc, #136]	; (8006a88 <MX_GPIO_Init+0x278>)
 8006a00:	f004 f89a 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a12:	2300      	movs	r3, #0
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a16:	f107 031c 	add.w	r3, r7, #28
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	481a      	ldr	r0, [pc, #104]	; (8006a88 <MX_GPIO_Init+0x278>)
 8006a1e:	f004 f88b 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006a26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a30:	2300      	movs	r3, #0
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a34:	f107 031c 	add.w	r3, r7, #28
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4814      	ldr	r0, [pc, #80]	; (8006a8c <MX_GPIO_Init+0x27c>)
 8006a3c:	f004 f87c 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a46:	2300      	movs	r3, #0
 8006a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a4e:	f107 031c 	add.w	r3, r7, #28
 8006a52:	4619      	mov	r1, r3
 8006a54:	480d      	ldr	r0, [pc, #52]	; (8006a8c <MX_GPIO_Init+0x27c>)
 8006a56:	f004 f86f 	bl	800ab38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006a5a:	239b      	movs	r3, #155	; 0x9b
 8006a5c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a62:	2301      	movs	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a66:	f107 031c 	add.w	r3, r7, #28
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4806      	ldr	r0, [pc, #24]	; (8006a88 <MX_GPIO_Init+0x278>)
 8006a6e:	f004 f863 	bl	800ab38 <HAL_GPIO_Init>

}
 8006a72:	bf00      	nop
 8006a74:	3730      	adds	r7, #48	; 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	40021000 	.word	0x40021000
 8006a84:	40020400 	.word	0x40020400
 8006a88:	40020c00 	.word	0x40020c00
 8006a8c:	40020000 	.word	0x40020000
 8006a90:	40020800 	.word	0x40020800

08006a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a9a:	e7fe      	b.n	8006a9a <Error_Handler+0x6>

08006a9c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006aa0:	bf00      	nop
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
	...

08006aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	607b      	str	r3, [r7, #4]
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <HAL_MspInit+0x4c>)
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <HAL_MspInit+0x4c>)
 8006abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <HAL_MspInit+0x4c>)
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <HAL_MspInit+0x4c>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <HAL_MspInit+0x4c>)
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_MspInit+0x4c>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40023800 	.word	0x40023800

08006afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08c      	sub	sp, #48	; 0x30
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b04:	f107 031c 	add.w	r3, r7, #28
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a4a      	ldr	r2, [pc, #296]	; (8006c44 <HAL_ADC_MspInit+0x148>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f040 808e 	bne.w	8006c3c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	4b48      	ldr	r3, [pc, #288]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b28:	4a47      	ldr	r2, [pc, #284]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b2e:	6453      	str	r3, [r2, #68]	; 0x44
 8006b30:	4b45      	ldr	r3, [pc, #276]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	4b41      	ldr	r3, [pc, #260]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	4a40      	ldr	r2, [pc, #256]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b46:	f043 0304 	orr.w	r3, r3, #4
 8006b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4c:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	4a39      	ldr	r2, [pc, #228]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	6313      	str	r3, [r2, #48]	; 0x30
 8006b68:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b7e:	f043 0302 	orr.w	r3, r3, #2
 8006b82:	6313      	str	r3, [r2, #48]	; 0x30
 8006b84:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <HAL_ADC_MspInit+0x14c>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b90:	230f      	movs	r3, #15
 8006b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b94:	2303      	movs	r3, #3
 8006b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b9c:	f107 031c 	add.w	r3, r7, #28
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	482a      	ldr	r0, [pc, #168]	; (8006c4c <HAL_ADC_MspInit+0x150>)
 8006ba4:	f003 ffc8 	bl	800ab38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006ba8:	23ff      	movs	r3, #255	; 0xff
 8006baa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bac:	2303      	movs	r3, #3
 8006bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb4:	f107 031c 	add.w	r3, r7, #28
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4825      	ldr	r0, [pc, #148]	; (8006c50 <HAL_ADC_MspInit+0x154>)
 8006bbc:	f003 ffbc 	bl	800ab38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bcc:	f107 031c 	add.w	r3, r7, #28
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4820      	ldr	r0, [pc, #128]	; (8006c54 <HAL_ADC_MspInit+0x158>)
 8006bd4:	f003 ffb0 	bl	800ab38 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006bda:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <HAL_ADC_MspInit+0x160>)
 8006bdc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006bde:	4b1e      	ldr	r3, [pc, #120]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006be4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006be6:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bec:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bf8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bfa:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c00:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c08:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006c0a:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c10:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006c12:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c18:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006c20:	480d      	ldr	r0, [pc, #52]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c22:	f003 fbed 	bl	800a400 <HAL_DMA_Init>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006c2c:	f7ff ff32 	bl	8006a94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38
 8006c36:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <HAL_ADC_MspInit+0x15c>)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c3c:	bf00      	nop
 8006c3e:	3730      	adds	r7, #48	; 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40012100 	.word	0x40012100
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	40020800 	.word	0x40020800
 8006c50:	40020000 	.word	0x40020000
 8006c54:	40020400 	.word	0x40020400
 8006c58:	20043b50 	.word	0x20043b50
 8006c5c:	40026440 	.word	0x40026440

08006c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08c      	sub	sp, #48	; 0x30
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c68:	f107 031c 	add.w	r3, r7, #28
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	605a      	str	r2, [r3, #4]
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a32      	ldr	r2, [pc, #200]	; (8006d48 <HAL_I2C_MspInit+0xe8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d12c      	bne.n	8006cdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	4b31      	ldr	r3, [pc, #196]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	4a30      	ldr	r2, [pc, #192]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	6313      	str	r3, [r2, #48]	; 0x30
 8006c92:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c9e:	23c0      	movs	r3, #192	; 0xc0
 8006ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ca2:	2312      	movs	r3, #18
 8006ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006caa:	2303      	movs	r3, #3
 8006cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006cae:	2304      	movs	r3, #4
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cb2:	f107 031c 	add.w	r3, r7, #28
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4825      	ldr	r0, [pc, #148]	; (8006d50 <HAL_I2C_MspInit+0xf0>)
 8006cba:	f003 ff3d 	bl	800ab38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cce:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006cda:	e031      	b.n	8006d40 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_I2C_MspInit+0xf4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d12c      	bne.n	8006d40 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf6:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006d02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d08:	2312      	movs	r3, #18
 8006d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d10:	2303      	movs	r3, #3
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006d14:	2304      	movs	r3, #4
 8006d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d18:	f107 031c 	add.w	r3, r7, #28
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	480c      	ldr	r0, [pc, #48]	; (8006d50 <HAL_I2C_MspInit+0xf0>)
 8006d20:	f003 ff0a 	bl	800ab38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d32:	6413      	str	r3, [r2, #64]	; 0x40
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_I2C_MspInit+0xec>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
}
 8006d40:	bf00      	nop
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40005400 	.word	0x40005400
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40020400 	.word	0x40020400
 8006d54:	40005800 	.word	0x40005800

08006d58 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d60:	f107 0314 	add.w	r3, r7, #20
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	605a      	str	r2, [r3, #4]
 8006d6a:	609a      	str	r2, [r3, #8]
 8006d6c:	60da      	str	r2, [r3, #12]
 8006d6e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a69      	ldr	r2, [pc, #420]	; (8006f1c <HAL_SD_MspInit+0x1c4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	f040 80cb 	bne.w	8006f12 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	4b67      	ldr	r3, [pc, #412]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	4a66      	ldr	r2, [pc, #408]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d8c:	4b64      	ldr	r3, [pc, #400]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	4b60      	ldr	r3, [pc, #384]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	4a5f      	ldr	r2, [pc, #380]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006da2:	f043 0304 	orr.w	r3, r3, #4
 8006da6:	6313      	str	r3, [r2, #48]	; 0x30
 8006da8:	4b5d      	ldr	r3, [pc, #372]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006db4:	2300      	movs	r3, #0
 8006db6:	60bb      	str	r3, [r7, #8]
 8006db8:	4b59      	ldr	r3, [pc, #356]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	4a58      	ldr	r2, [pc, #352]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006dbe:	f043 0308 	orr.w	r3, r3, #8
 8006dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc4:	4b56      	ldr	r3, [pc, #344]	; (8006f20 <HAL_SD_MspInit+0x1c8>)
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006dd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006dd4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dde:	2303      	movs	r3, #3
 8006de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006de2:	230c      	movs	r3, #12
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4619      	mov	r1, r3
 8006dec:	484d      	ldr	r0, [pc, #308]	; (8006f24 <HAL_SD_MspInit+0x1cc>)
 8006dee:	f003 fea3 	bl	800ab38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006df2:	2304      	movs	r3, #4
 8006df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df6:	2302      	movs	r3, #2
 8006df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006e02:	230c      	movs	r3, #12
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e06:	f107 0314 	add.w	r3, r7, #20
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4846      	ldr	r0, [pc, #280]	; (8006f28 <HAL_SD_MspInit+0x1d0>)
 8006e0e:	f003 fe93 	bl	800ab38 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006e12:	4b46      	ldr	r3, [pc, #280]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e14:	4a46      	ldr	r2, [pc, #280]	; (8006f30 <HAL_SD_MspInit+0x1d8>)
 8006e16:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006e18:	4b44      	ldr	r3, [pc, #272]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e1e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e20:	4b42      	ldr	r3, [pc, #264]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e26:	4b41      	ldr	r3, [pc, #260]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e2c:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e32:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e34:	4b3d      	ldr	r3, [pc, #244]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e3a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e3c:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e42:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006e44:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e46:	2220      	movs	r2, #32
 8006e48:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e4a:	4b38      	ldr	r3, [pc, #224]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e50:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e52:	4b36      	ldr	r3, [pc, #216]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e54:	2204      	movs	r2, #4
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e58:	4b34      	ldr	r3, [pc, #208]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006e5e:	4b33      	ldr	r3, [pc, #204]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e64:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e66:	4b31      	ldr	r3, [pc, #196]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006e6e:	482f      	ldr	r0, [pc, #188]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e70:	f003 fac6 	bl	800a400 <HAL_DMA_Init>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006e7a:	f7ff fe0b 	bl	8006a94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40
 8006e84:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <HAL_SD_MspInit+0x1d4>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e8a:	4b2a      	ldr	r3, [pc, #168]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <HAL_SD_MspInit+0x1e0>)
 8006e8e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e96:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e98:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006e9a:	2240      	movs	r2, #64	; 0x40
 8006e9c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e9e:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ea4:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006eaa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006eac:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006eb2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006eb4:	4b1f      	ldr	r3, [pc, #124]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006eba:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006ebc:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ec4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ec8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006eca:	4b1a      	ldr	r3, [pc, #104]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ecc:	2204      	movs	r2, #4
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ed0:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006ed6:	4b17      	ldr	r3, [pc, #92]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ed8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006edc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006ede:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ee0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006ee6:	4813      	ldr	r0, [pc, #76]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006ee8:	f003 fa8a 	bl	800a400 <HAL_DMA_Init>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006ef2:	f7ff fdcf 	bl	8006a94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a0e      	ldr	r2, [pc, #56]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006efa:	63da      	str	r2, [r3, #60]	; 0x3c
 8006efc:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <HAL_SD_MspInit+0x1dc>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006f02:	2200      	movs	r2, #0
 8006f04:	2100      	movs	r1, #0
 8006f06:	2031      	movs	r0, #49	; 0x31
 8006f08:	f003 fa43 	bl	800a392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006f0c:	2031      	movs	r0, #49	; 0x31
 8006f0e:	f003 fa5c 	bl	800a3ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006f12:	bf00      	nop
 8006f14:	3728      	adds	r7, #40	; 0x28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40020800 	.word	0x40020800
 8006f28:	40020c00 	.word	0x40020c00
 8006f2c:	20043678 	.word	0x20043678
 8006f30:	40026458 	.word	0x40026458
 8006f34:	200439ac 	.word	0x200439ac
 8006f38:	400264a0 	.word	0x400264a0

08006f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	; 0x28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f44:	f107 0314 	add.w	r3, r7, #20
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <HAL_SPI_MspInit+0x84>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d12c      	bne.n	8006fb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	4b18      	ldr	r3, [pc, #96]	; (8006fc4 <HAL_SPI_MspInit+0x88>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <HAL_SPI_MspInit+0x88>)
 8006f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6e:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <HAL_SPI_MspInit+0x88>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <HAL_SPI_MspInit+0x88>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	4a10      	ldr	r2, [pc, #64]	; (8006fc4 <HAL_SPI_MspInit+0x88>)
 8006f84:	f043 0302 	orr.w	r3, r3, #2
 8006f88:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <HAL_SPI_MspInit+0x88>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006fa8:	2305      	movs	r3, #5
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fac:	f107 0314 	add.w	r3, r7, #20
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <HAL_SPI_MspInit+0x8c>)
 8006fb4:	f003 fdc0 	bl	800ab38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006fb8:	bf00      	nop
 8006fba:	3728      	adds	r7, #40	; 0x28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40003800 	.word	0x40003800
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	40020400 	.word	0x40020400

08006fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd4:	f107 031c 	add.w	r3, r7, #28
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	609a      	str	r2, [r3, #8]
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a2d      	ldr	r2, [pc, #180]	; (80070a0 <HAL_TIM_PWM_MspInit+0xd4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d12d      	bne.n	800704a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	4b2c      	ldr	r3, [pc, #176]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff6:	4a2b      	ldr	r2, [pc, #172]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8006ffe:	4b29      	ldr	r3, [pc, #164]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	4a24      	ldr	r2, [pc, #144]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007014:	f043 0310 	orr.w	r3, r3, #16
 8007018:	6313      	str	r3, [r2, #48]	; 0x30
 800701a:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007026:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800702a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702c:	2302      	movs	r3, #2
 800702e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007030:	2300      	movs	r3, #0
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007034:	2300      	movs	r3, #0
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007038:	2301      	movs	r3, #1
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800703c:	f107 031c 	add.w	r3, r7, #28
 8007040:	4619      	mov	r1, r3
 8007042:	4819      	ldr	r0, [pc, #100]	; (80070a8 <HAL_TIM_PWM_MspInit+0xdc>)
 8007044:	f003 fd78 	bl	800ab38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007048:	e026      	b.n	8007098 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a17      	ldr	r2, [pc, #92]	; (80070ac <HAL_TIM_PWM_MspInit+0xe0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d10e      	bne.n	8007072 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	4a11      	ldr	r2, [pc, #68]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800705e:	f043 0302 	orr.w	r3, r3, #2
 8007062:	6413      	str	r3, [r2, #64]	; 0x40
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	693b      	ldr	r3, [r7, #16]
}
 8007070:	e012      	b.n	8007098 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a0e      	ldr	r2, [pc, #56]	; (80070b0 <HAL_TIM_PWM_MspInit+0xe4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d10d      	bne.n	8007098 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007086:	f043 0304 	orr.w	r3, r3, #4
 800708a:	6413      	str	r3, [r2, #64]	; 0x40
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	3730      	adds	r7, #48	; 0x30
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40023800 	.word	0x40023800
 80070a8:	40021000 	.word	0x40021000
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800

080070b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a3e      	ldr	r2, [pc, #248]	; (80071bc <HAL_TIM_Base_MspInit+0x108>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d116      	bne.n	80070f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	4a3c      	ldr	r2, [pc, #240]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 80070d0:	f043 0310 	orr.w	r3, r3, #16
 80070d4:	6413      	str	r3, [r2, #64]	; 0x40
 80070d6:	4b3a      	ldr	r3, [pc, #232]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2101      	movs	r1, #1
 80070e6:	2036      	movs	r0, #54	; 0x36
 80070e8:	f003 f953 	bl	800a392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070ec:	2036      	movs	r0, #54	; 0x36
 80070ee:	f003 f96c 	bl	800a3ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80070f2:	e05e      	b.n	80071b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a32      	ldr	r2, [pc, #200]	; (80071c4 <HAL_TIM_Base_MspInit+0x110>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d116      	bne.n	800712c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	4b2f      	ldr	r3, [pc, #188]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007108:	f043 0320 	orr.w	r3, r3, #32
 800710c:	6413      	str	r3, [r2, #64]	; 0x40
 800710e:	4b2c      	ldr	r3, [pc, #176]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	2037      	movs	r0, #55	; 0x37
 8007120:	f003 f937 	bl	800a392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007124:	2037      	movs	r0, #55	; 0x37
 8007126:	f003 f950 	bl	800a3ca <HAL_NVIC_EnableIRQ>
}
 800712a:	e042      	b.n	80071b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <HAL_TIM_Base_MspInit+0x114>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	4b21      	ldr	r3, [pc, #132]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007144:	6453      	str	r3, [r2, #68]	; 0x44
 8007146:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	697b      	ldr	r3, [r7, #20]
}
 8007152:	e02e      	b.n	80071b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <HAL_TIM_Base_MspInit+0x118>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10e      	bne.n	800717c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007166:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800716c:	6453      	str	r3, [r2, #68]	; 0x44
 800716e:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]
}
 800717a:	e01a      	b.n	80071b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <HAL_TIM_Base_MspInit+0x11c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d115      	bne.n	80071b2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	6413      	str	r3, [r2, #64]	; 0x40
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80071a2:	2200      	movs	r2, #0
 80071a4:	2100      	movs	r1, #0
 80071a6:	202c      	movs	r0, #44	; 0x2c
 80071a8:	f003 f8f3 	bl	800a392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80071ac:	202c      	movs	r0, #44	; 0x2c
 80071ae:	f003 f90c 	bl	800a3ca <HAL_NVIC_EnableIRQ>
}
 80071b2:	bf00      	nop
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40001000 	.word	0x40001000
 80071c0:	40023800 	.word	0x40023800
 80071c4:	40001400 	.word	0x40001400
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800
 80071d0:	40001c00 	.word	0x40001c00

080071d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1d      	ldr	r2, [pc, #116]	; (8007268 <HAL_TIM_Encoder_MspInit+0x94>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d133      	bne.n	800725e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	4b1c      	ldr	r3, [pc, #112]	; (800726c <HAL_TIM_Encoder_MspInit+0x98>)
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	4a1b      	ldr	r2, [pc, #108]	; (800726c <HAL_TIM_Encoder_MspInit+0x98>)
 8007200:	f043 0302 	orr.w	r3, r3, #2
 8007204:	6453      	str	r3, [r2, #68]	; 0x44
 8007206:	4b19      	ldr	r3, [pc, #100]	; (800726c <HAL_TIM_Encoder_MspInit+0x98>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <HAL_TIM_Encoder_MspInit+0x98>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a14      	ldr	r2, [pc, #80]	; (800726c <HAL_TIM_Encoder_MspInit+0x98>)
 800721c:	f043 0304 	orr.w	r3, r3, #4
 8007220:	6313      	str	r3, [r2, #48]	; 0x30
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <HAL_TIM_Encoder_MspInit+0x98>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800722e:	23c0      	movs	r3, #192	; 0xc0
 8007230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	2302      	movs	r3, #2
 8007234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800723a:	2300      	movs	r3, #0
 800723c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800723e:	2303      	movs	r3, #3
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007242:	f107 0314 	add.w	r3, r7, #20
 8007246:	4619      	mov	r1, r3
 8007248:	4809      	ldr	r0, [pc, #36]	; (8007270 <HAL_TIM_Encoder_MspInit+0x9c>)
 800724a:	f003 fc75 	bl	800ab38 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800724e:	2200      	movs	r2, #0
 8007250:	2100      	movs	r1, #0
 8007252:	202c      	movs	r0, #44	; 0x2c
 8007254:	f003 f89d 	bl	800a392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007258:	202c      	movs	r0, #44	; 0x2c
 800725a:	f003 f8b6 	bl	800a3ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800725e:	bf00      	nop
 8007260:	3728      	adds	r7, #40	; 0x28
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40010400 	.word	0x40010400
 800726c:	40023800 	.word	0x40023800
 8007270:	40020800 	.word	0x40020800

08007274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	; 0x30
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800727c:	f107 031c 	add.w	r3, r7, #28
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	609a      	str	r2, [r3, #8]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a5c      	ldr	r2, [pc, #368]	; (8007404 <HAL_TIM_MspPostInit+0x190>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d11f      	bne.n	80072d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	4b5b      	ldr	r3, [pc, #364]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	4a5a      	ldr	r2, [pc, #360]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80072a0:	f043 0310 	orr.w	r3, r3, #16
 80072a4:	6313      	str	r3, [r2, #48]	; 0x30
 80072a6:	4b58      	ldr	r3, [pc, #352]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80072b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b8:	2302      	movs	r3, #2
 80072ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80072c4:	2301      	movs	r3, #1
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072c8:	f107 031c 	add.w	r3, r7, #28
 80072cc:	4619      	mov	r1, r3
 80072ce:	484f      	ldr	r0, [pc, #316]	; (800740c <HAL_TIM_MspPostInit+0x198>)
 80072d0:	f003 fc32 	bl	800ab38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80072d4:	e091      	b.n	80073fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a4d      	ldr	r2, [pc, #308]	; (8007410 <HAL_TIM_MspPostInit+0x19c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d11e      	bne.n	800731e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	4b48      	ldr	r3, [pc, #288]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	4a47      	ldr	r2, [pc, #284]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80072ea:	f043 0302 	orr.w	r3, r3, #2
 80072ee:	6313      	str	r3, [r2, #48]	; 0x30
 80072f0:	4b45      	ldr	r3, [pc, #276]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80072fc:	2330      	movs	r3, #48	; 0x30
 80072fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007300:	2302      	movs	r3, #2
 8007302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007304:	2300      	movs	r3, #0
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007308:	2300      	movs	r3, #0
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800730c:	2302      	movs	r3, #2
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007310:	f107 031c 	add.w	r3, r7, #28
 8007314:	4619      	mov	r1, r3
 8007316:	483f      	ldr	r0, [pc, #252]	; (8007414 <HAL_TIM_MspPostInit+0x1a0>)
 8007318:	f003 fc0e 	bl	800ab38 <HAL_GPIO_Init>
}
 800731c:	e06d      	b.n	80073fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a3d      	ldr	r2, [pc, #244]	; (8007418 <HAL_TIM_MspPostInit+0x1a4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d11f      	bne.n	8007368 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	4b36      	ldr	r3, [pc, #216]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	4a35      	ldr	r2, [pc, #212]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 8007332:	f043 0308 	orr.w	r3, r3, #8
 8007336:	6313      	str	r3, [r2, #48]	; 0x30
 8007338:	4b33      	ldr	r3, [pc, #204]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007344:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734a:	2302      	movs	r3, #2
 800734c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007352:	2300      	movs	r3, #0
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007356:	2302      	movs	r3, #2
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800735a:	f107 031c 	add.w	r3, r7, #28
 800735e:	4619      	mov	r1, r3
 8007360:	482e      	ldr	r0, [pc, #184]	; (800741c <HAL_TIM_MspPostInit+0x1a8>)
 8007362:	f003 fbe9 	bl	800ab38 <HAL_GPIO_Init>
}
 8007366:	e048      	b.n	80073fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <HAL_TIM_MspPostInit+0x1ac>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d11f      	bne.n	80073b2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	4b24      	ldr	r3, [pc, #144]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	4a23      	ldr	r2, [pc, #140]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 800737c:	f043 0302 	orr.w	r3, r3, #2
 8007380:	6313      	str	r3, [r2, #48]	; 0x30
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800738e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007394:	2302      	movs	r3, #2
 8007396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739c:	2300      	movs	r3, #0
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80073a0:	2303      	movs	r3, #3
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a4:	f107 031c 	add.w	r3, r7, #28
 80073a8:	4619      	mov	r1, r3
 80073aa:	481a      	ldr	r0, [pc, #104]	; (8007414 <HAL_TIM_MspPostInit+0x1a0>)
 80073ac:	f003 fbc4 	bl	800ab38 <HAL_GPIO_Init>
}
 80073b0:	e023      	b.n	80073fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1b      	ldr	r2, [pc, #108]	; (8007424 <HAL_TIM_MspPostInit+0x1b0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d11e      	bne.n	80073fa <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073bc:	2300      	movs	r3, #0
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	4a10      	ldr	r2, [pc, #64]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	6313      	str	r3, [r2, #48]	; 0x30
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <HAL_TIM_MspPostInit+0x194>)
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073de:	2302      	movs	r3, #2
 80073e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073e6:	2300      	movs	r3, #0
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80073ea:	2303      	movs	r3, #3
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ee:	f107 031c 	add.w	r3, r7, #28
 80073f2:	4619      	mov	r1, r3
 80073f4:	4807      	ldr	r0, [pc, #28]	; (8007414 <HAL_TIM_MspPostInit+0x1a0>)
 80073f6:	f003 fb9f 	bl	800ab38 <HAL_GPIO_Init>
}
 80073fa:	bf00      	nop
 80073fc:	3730      	adds	r7, #48	; 0x30
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40010000 	.word	0x40010000
 8007408:	40023800 	.word	0x40023800
 800740c:	40021000 	.word	0x40021000
 8007410:	40000400 	.word	0x40000400
 8007414:	40020400 	.word	0x40020400
 8007418:	40000800 	.word	0x40000800
 800741c:	40020c00 	.word	0x40020c00
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800

08007428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007430:	f107 0314 	add.w	r3, r7, #20
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a19      	ldr	r2, [pc, #100]	; (80074ac <HAL_UART_MspInit+0x84>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d12b      	bne.n	80074a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	4b18      	ldr	r3, [pc, #96]	; (80074b0 <HAL_UART_MspInit+0x88>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4a17      	ldr	r2, [pc, #92]	; (80074b0 <HAL_UART_MspInit+0x88>)
 8007454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007458:	6413      	str	r3, [r2, #64]	; 0x40
 800745a:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <HAL_UART_MspInit+0x88>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <HAL_UART_MspInit+0x88>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	4a10      	ldr	r2, [pc, #64]	; (80074b0 <HAL_UART_MspInit+0x88>)
 8007470:	f043 0308 	orr.w	r3, r3, #8
 8007474:	6313      	str	r3, [r2, #48]	; 0x30
 8007476:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <HAL_UART_MspInit+0x88>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007482:	2360      	movs	r3, #96	; 0x60
 8007484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007486:	2302      	movs	r3, #2
 8007488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800748e:	2303      	movs	r3, #3
 8007490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007492:	2307      	movs	r3, #7
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007496:	f107 0314 	add.w	r3, r7, #20
 800749a:	4619      	mov	r1, r3
 800749c:	4805      	ldr	r0, [pc, #20]	; (80074b4 <HAL_UART_MspInit+0x8c>)
 800749e:	f003 fb4b 	bl	800ab38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80074a2:	bf00      	nop
 80074a4:	3728      	adds	r7, #40	; 0x28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40004400 	.word	0x40004400
 80074b0:	40023800 	.word	0x40023800
 80074b4:	40020c00 	.word	0x40020c00

080074b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074bc:	e7fe      	b.n	80074bc <NMI_Handler+0x4>

080074be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074be:	b480      	push	{r7}
 80074c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074c2:	e7fe      	b.n	80074c2 <HardFault_Handler+0x4>

080074c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074c8:	e7fe      	b.n	80074c8 <MemManage_Handler+0x4>

080074ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074ca:	b480      	push	{r7}
 80074cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074ce:	e7fe      	b.n	80074ce <BusFault_Handler+0x4>

080074d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074d4:	e7fe      	b.n	80074d4 <UsageFault_Handler+0x4>

080074d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074d6:	b480      	push	{r7}
 80074d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074f2:	b480      	push	{r7}
 80074f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074f6:	bf00      	nop
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007504:	f002 fa24 	bl	8009950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007508:	bf00      	nop
 800750a:	bd80      	pop	{r7, pc}

0800750c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007510:	4803      	ldr	r0, [pc, #12]	; (8007520 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007512:	f007 fcf4 	bl	800eefe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007516:	4803      	ldr	r0, [pc, #12]	; (8007524 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007518:	f007 fcf1 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800751c:	bf00      	nop
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20043730 	.word	0x20043730
 8007524:	2004392c 	.word	0x2004392c

08007528 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800752c:	4802      	ldr	r0, [pc, #8]	; (8007538 <SDIO_IRQHandler+0x10>)
 800752e:	f005 fd8d 	bl	800d04c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007532:	bf00      	nop
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20043a8c 	.word	0x20043a8c

0800753c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007540:	4802      	ldr	r0, [pc, #8]	; (800754c <TIM6_DAC_IRQHandler+0x10>)
 8007542:	f007 fcdc 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007546:	bf00      	nop
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20043a0c 	.word	0x20043a0c

08007550 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007554:	4802      	ldr	r0, [pc, #8]	; (8007560 <TIM7_IRQHandler+0x10>)
 8007556:	f007 fcd2 	bl	800eefe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20043bb0 	.word	0x20043bb0

08007564 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007568:	4802      	ldr	r0, [pc, #8]	; (8007574 <DMA2_Stream2_IRQHandler+0x10>)
 800756a:	f003 f871 	bl	800a650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20043b50 	.word	0x20043b50

08007578 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800757c:	4802      	ldr	r0, [pc, #8]	; (8007588 <DMA2_Stream3_IRQHandler+0x10>)
 800757e:	f003 f867 	bl	800a650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007582:	bf00      	nop
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20043678 	.word	0x20043678

0800758c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007590:	4802      	ldr	r0, [pc, #8]	; (800759c <DMA2_Stream6_IRQHandler+0x10>)
 8007592:	f003 f85d 	bl	800a650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200439ac 	.word	0x200439ac

080075a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075a8:	4a14      	ldr	r2, [pc, #80]	; (80075fc <_sbrk+0x5c>)
 80075aa:	4b15      	ldr	r3, [pc, #84]	; (8007600 <_sbrk+0x60>)
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075b4:	4b13      	ldr	r3, [pc, #76]	; (8007604 <_sbrk+0x64>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075bc:	4b11      	ldr	r3, [pc, #68]	; (8007604 <_sbrk+0x64>)
 80075be:	4a12      	ldr	r2, [pc, #72]	; (8007608 <_sbrk+0x68>)
 80075c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075c2:	4b10      	ldr	r3, [pc, #64]	; (8007604 <_sbrk+0x64>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4413      	add	r3, r2
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d207      	bcs.n	80075e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075d0:	f00d ff28 	bl	8015424 <__errno>
 80075d4:	4602      	mov	r2, r0
 80075d6:	230c      	movs	r3, #12
 80075d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80075da:	f04f 33ff 	mov.w	r3, #4294967295
 80075de:	e009      	b.n	80075f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <_sbrk+0x64>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075e6:	4b07      	ldr	r3, [pc, #28]	; (8007604 <_sbrk+0x64>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	4a05      	ldr	r2, [pc, #20]	; (8007604 <_sbrk+0x64>)
 80075f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20050000 	.word	0x20050000
 8007600:	00000800 	.word	0x00000800
 8007604:	200002b8 	.word	0x200002b8
 8007608:	20045d00 	.word	0x20045d00

0800760c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <SystemInit+0x28>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007616:	4a07      	ldr	r2, [pc, #28]	; (8007634 <SystemInit+0x28>)
 8007618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800761c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <SystemInit+0x28>)
 8007622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007626:	609a      	str	r2, [r3, #8]
#endif
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	e000ed00 	.word	0xe000ed00

08007638 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007638:	b598      	push	{r3, r4, r7, lr}
 800763a:	af00      	add	r7, sp, #0
	lcd_init();
 800763c:	f7f9 fcec 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007640:	483b      	ldr	r0, [pc, #236]	; (8007730 <cppInit+0xf8>)
 8007642:	f7fd fe53 	bl	80052ec <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007646:	2064      	movs	r0, #100	; 0x64
 8007648:	f002 f9a2 	bl	8009990 <HAL_Delay>
	power_sensor.updateValues();
 800764c:	4838      	ldr	r0, [pc, #224]	; (8007730 <cppInit+0xf8>)
 800764e:	f7fd fe5b 	bl	8005308 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007652:	f7f9 fd25 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007656:	2100      	movs	r1, #0
 8007658:	2000      	movs	r0, #0
 800765a:	f7f9 fd31 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800765e:	4835      	ldr	r0, [pc, #212]	; (8007734 <cppInit+0xfc>)
 8007660:	f7f9 fd58 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007664:	2101      	movs	r1, #1
 8007666:	2000      	movs	r0, #0
 8007668:	f7f9 fd2a 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800766c:	4830      	ldr	r0, [pc, #192]	; (8007730 <cppInit+0xf8>)
 800766e:	f7fd fe75 	bl	800535c <_ZN11PowerSensor17getButteryVoltageEv>
 8007672:	ee10 3a10 	vmov	r3, s0
 8007676:	4618      	mov	r0, r3
 8007678:	f7f8 ff7e 	bl	8000578 <__aeabi_f2d>
 800767c:	4603      	mov	r3, r0
 800767e:	460c      	mov	r4, r1
 8007680:	461a      	mov	r2, r3
 8007682:	4623      	mov	r3, r4
 8007684:	482c      	ldr	r0, [pc, #176]	; (8007738 <cppInit+0x100>)
 8007686:	f7f9 fd45 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800768a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800768e:	f002 f97f 	bl	8009990 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007692:	482a      	ldr	r0, [pc, #168]	; (800773c <cppInit+0x104>)
 8007694:	f7fd f866 	bl	8004764 <_ZN6Logger10sdCardInitEv>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <cppInit+0x76>
		led.fullColor('G');
 800769e:	2147      	movs	r1, #71	; 0x47
 80076a0:	4827      	ldr	r0, [pc, #156]	; (8007740 <cppInit+0x108>)
 80076a2:	f7fa fcf3 	bl	800208c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80076a6:	2064      	movs	r0, #100	; 0x64
 80076a8:	f002 f972 	bl	8009990 <HAL_Delay>
 80076ac:	e006      	b.n	80076bc <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80076ae:	2152      	movs	r1, #82	; 0x52
 80076b0:	4823      	ldr	r0, [pc, #140]	; (8007740 <cppInit+0x108>)
 80076b2:	f7fa fceb 	bl	800208c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80076b6:	2064      	movs	r0, #100	; 0x64
 80076b8:	f002 f96a 	bl	8009990 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80076bc:	4821      	ldr	r0, [pc, #132]	; (8007744 <cppInit+0x10c>)
 80076be:	f7fa fe41 	bl	8002344 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80076c2:	4821      	ldr	r0, [pc, #132]	; (8007748 <cppInit+0x110>)
 80076c4:	f7fd fae4 	bl	8004c90 <_ZN5Motor4initEv>
	encoder.init();
 80076c8:	4820      	ldr	r0, [pc, #128]	; (800774c <cppInit+0x114>)
 80076ca:	f7f9 feab 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80076ce:	4820      	ldr	r0, [pc, #128]	; (8007750 <cppInit+0x118>)
 80076d0:	f7fa fa9a 	bl	8001c08 <_ZN3IMU4initEv>
	line_trace.init();
 80076d4:	481f      	ldr	r0, [pc, #124]	; (8007754 <cppInit+0x11c>)
 80076d6:	f7fc f8ff 	bl	80038d8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80076da:	481a      	ldr	r0, [pc, #104]	; (8007744 <cppInit+0x10c>)
 80076dc:	f7fa ff72 	bl	80025c4 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80076e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076e4:	f002 f954 	bl	8009990 <HAL_Delay>

	led.fullColor('M');
 80076e8:	214d      	movs	r1, #77	; 0x4d
 80076ea:	4815      	ldr	r0, [pc, #84]	; (8007740 <cppInit+0x108>)
 80076ec:	f7fa fcce 	bl	800208c <_ZN3LED9fullColorEc>
	imu.calibration();
 80076f0:	4817      	ldr	r0, [pc, #92]	; (8007750 <cppInit+0x118>)
 80076f2:	f7fa fb53 	bl	8001d9c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80076f6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007758 <cppInit+0x120>
 80076fa:	eddf 0a18 	vldr	s1, [pc, #96]	; 800775c <cppInit+0x124>
 80076fe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007760 <cppInit+0x128>
 8007702:	4818      	ldr	r0, [pc, #96]	; (8007764 <cppInit+0x12c>)
 8007704:	f7fe f9cc 	bl	8005aa0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 8007708:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007768 <cppInit+0x130>
 800770c:	eddf 0a17 	vldr	s1, [pc, #92]	; 800776c <cppInit+0x134>
 8007710:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007770 <cppInit+0x138>
 8007714:	4813      	ldr	r0, [pc, #76]	; (8007764 <cppInit+0x12c>)
 8007716:	f7fe f9dc 	bl	8005ad2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 800771a:	4816      	ldr	r0, [pc, #88]	; (8007774 <cppInit+0x13c>)
 800771c:	f7fd fcf0 	bl	8005100 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007720:	4815      	ldr	r0, [pc, #84]	; (8007778 <cppInit+0x140>)
 8007722:	f7fd fd87 	bl	8005234 <_ZN13PathFollowing4initEv>

	esc.init();
 8007726:	4815      	ldr	r0, [pc, #84]	; (800777c <cppInit+0x144>)
 8007728:	f7f9 fd60 	bl	80011ec <_ZN3ESC4initEv>

}
 800772c:	bf00      	nop
 800772e:	bd98      	pop	{r3, r4, r7, pc}
 8007730:	200005cc 	.word	0x200005cc
 8007734:	08019cac 	.word	0x08019cac
 8007738:	08019cb4 	.word	0x08019cb4
 800773c:	200005ec 	.word	0x200005ec
 8007740:	200005c8 	.word	0x200005c8
 8007744:	200002bc 	.word	0x200002bc
 8007748:	200005c4 	.word	0x200005c4
 800774c:	2001bb74 	.word	0x2001bb74
 8007750:	200005d8 	.word	0x200005d8
 8007754:	2001bc10 	.word	0x2001bc10
 8007758:	3cceca68 	.word	0x3cceca68
 800775c:	4180f06f 	.word	0x4180f06f
 8007760:	3fea2d0e 	.word	0x3fea2d0e
 8007764:	2001bb94 	.word	0x2001bb94
 8007768:	00000000 	.word	0x00000000
 800776c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007770:	3d75c28f 	.word	0x3d75c28f
 8007774:	2001bbd0 	.word	0x2001bbd0
 8007778:	20029b70 	.word	0x20029b70
 800777c:	20041298 	.word	0x20041298

08007780 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007784:	4819      	ldr	r0, [pc, #100]	; (80077ec <cppFlip1ms+0x6c>)
 8007786:	f7fa fe3b 	bl	8002400 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800778a:	4819      	ldr	r0, [pc, #100]	; (80077f0 <cppFlip1ms+0x70>)
 800778c:	f7fa fa64 	bl	8001c58 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007790:	4818      	ldr	r0, [pc, #96]	; (80077f4 <cppFlip1ms+0x74>)
 8007792:	f7f9 fe69 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007796:	4818      	ldr	r0, [pc, #96]	; (80077f8 <cppFlip1ms+0x78>)
 8007798:	f7fc fb34 	bl	8003e04 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800779c:	4817      	ldr	r0, [pc, #92]	; (80077fc <cppFlip1ms+0x7c>)
 800779e:	f7fe f9b1 	bl	8005b04 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80077a2:	4817      	ldr	r0, [pc, #92]	; (8007800 <cppFlip1ms+0x80>)
 80077a4:	f7fd fc90 	bl	80050c8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80077a8:	4816      	ldr	r0, [pc, #88]	; (8007804 <cppFlip1ms+0x84>)
 80077aa:	f7fd fe4d 	bl	8005448 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80077ae:	4816      	ldr	r0, [pc, #88]	; (8007808 <cppFlip1ms+0x88>)
 80077b0:	f7fd fa80 	bl	8004cb4 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80077b4:	4b15      	ldr	r3, [pc, #84]	; (800780c <cppFlip1ms+0x8c>)
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	4b13      	ldr	r3, [pc, #76]	; (800780c <cppFlip1ms+0x8c>)
 80077be:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <cppFlip1ms+0x8c>)
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d90c      	bls.n	80077e2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80077c8:	4809      	ldr	r0, [pc, #36]	; (80077f0 <cppFlip1ms+0x70>)
 80077ca:	f7fa fa9d 	bl	8001d08 <_ZN3IMU8getOmegaEv>
 80077ce:	eef0 7a40 	vmov.f32	s15, s0
 80077d2:	eeb0 0a67 	vmov.f32	s0, s15
 80077d6:	480e      	ldr	r0, [pc, #56]	; (8007810 <cppFlip1ms+0x90>)
 80077d8:	f7fd ff98 	bl	800570c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <cppFlip1ms+0x8c>)
 80077de:	2200      	movs	r2, #0
 80077e0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80077e2:	4804      	ldr	r0, [pc, #16]	; (80077f4 <cppFlip1ms+0x74>)
 80077e4:	f7f9 ff2a 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200002bc 	.word	0x200002bc
 80077f0:	200005d8 	.word	0x200005d8
 80077f4:	2001bb74 	.word	0x2001bb74
 80077f8:	2001bc10 	.word	0x2001bc10
 80077fc:	2001bb94 	.word	0x2001bb94
 8007800:	2001bbd0 	.word	0x2001bbd0
 8007804:	200005b4 	.word	0x200005b4
 8007808:	200005c4 	.word	0x200005c4
 800780c:	2004129a 	.word	0x2004129a
 8007810:	20029960 	.word	0x20029960

08007814 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007818:	4802      	ldr	r0, [pc, #8]	; (8007824 <cppFlip100ns+0x10>)
 800781a:	f7fa fda3 	bl	8002364 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200002bc 	.word	0x200002bc

08007828 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800782c:	4b08      	ldr	r3, [pc, #32]	; (8007850 <cppFlip10ms+0x28>)
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	3301      	adds	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <cppFlip10ms+0x28>)
 8007836:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <cppFlip10ms+0x28>)
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	2b06      	cmp	r3, #6
 800783e:	d905      	bls.n	800784c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007840:	4804      	ldr	r0, [pc, #16]	; (8007854 <cppFlip10ms+0x2c>)
 8007842:	f7fd ff83 	bl	800574c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007846:	4b02      	ldr	r3, [pc, #8]	; (8007850 <cppFlip10ms+0x28>)
 8007848:	2200      	movs	r2, #0
 800784a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800784c:	bf00      	nop
 800784e:	bd80      	pop	{r7, pc}
 8007850:	2004129c 	.word	0x2004129c
 8007854:	20029960 	.word	0x20029960

08007858 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785a:	b083      	sub	sp, #12
 800785c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 800785e:	4baf      	ldr	r3, [pc, #700]	; (8007b1c <cppLoop+0x2c4>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f3bf 8f5b 	dmb	ish
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <cppLoop+0x4e>
 800787a:	48a8      	ldr	r0, [pc, #672]	; (8007b1c <cppLoop+0x2c4>)
 800787c:	f00c fd6d 	bl	801435a <__cxa_guard_acquire>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <cppLoop+0x4e>
 8007890:	48a3      	ldr	r0, [pc, #652]	; (8007b20 <cppLoop+0x2c8>)
 8007892:	f7fc f941 	bl	8003b18 <_ZN9LineTrace5getKpEv>
 8007896:	eef0 7a40 	vmov.f32	s15, s0
 800789a:	4ba2      	ldr	r3, [pc, #648]	; (8007b24 <cppLoop+0x2cc>)
 800789c:	edc3 7a00 	vstr	s15, [r3]
 80078a0:	489e      	ldr	r0, [pc, #632]	; (8007b1c <cppLoop+0x2c4>)
 80078a2:	f00c fd66 	bl	8014372 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80078a6:	4ba0      	ldr	r3, [pc, #640]	; (8007b28 <cppLoop+0x2d0>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f3bf 8f5b 	dmb	ish
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <cppLoop+0x96>
 80078c2:	4899      	ldr	r0, [pc, #612]	; (8007b28 <cppLoop+0x2d0>)
 80078c4:	f00c fd49 	bl	801435a <__cxa_guard_acquire>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <cppLoop+0x96>
 80078d8:	4891      	ldr	r0, [pc, #580]	; (8007b20 <cppLoop+0x2c8>)
 80078da:	f7fc f92c 	bl	8003b36 <_ZN9LineTrace5getKiEv>
 80078de:	eef0 7a40 	vmov.f32	s15, s0
 80078e2:	4b92      	ldr	r3, [pc, #584]	; (8007b2c <cppLoop+0x2d4>)
 80078e4:	edc3 7a00 	vstr	s15, [r3]
 80078e8:	488f      	ldr	r0, [pc, #572]	; (8007b28 <cppLoop+0x2d0>)
 80078ea:	f00c fd42 	bl	8014372 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80078ee:	4b90      	ldr	r3, [pc, #576]	; (8007b30 <cppLoop+0x2d8>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f3bf 8f5b 	dmb	ish
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d015      	beq.n	8007936 <cppLoop+0xde>
 800790a:	4889      	ldr	r0, [pc, #548]	; (8007b30 <cppLoop+0x2d8>)
 800790c:	f00c fd25 	bl	801435a <__cxa_guard_acquire>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <cppLoop+0xde>
 8007920:	487f      	ldr	r0, [pc, #508]	; (8007b20 <cppLoop+0x2c8>)
 8007922:	f7fc f917 	bl	8003b54 <_ZN9LineTrace5getKdEv>
 8007926:	eef0 7a40 	vmov.f32	s15, s0
 800792a:	4b82      	ldr	r3, [pc, #520]	; (8007b34 <cppLoop+0x2dc>)
 800792c:	edc3 7a00 	vstr	s15, [r3]
 8007930:	487f      	ldr	r0, [pc, #508]	; (8007b30 <cppLoop+0x2d8>)
 8007932:	f00c fd1e 	bl	8014372 <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 8007936:	4b80      	ldr	r3, [pc, #512]	; (8007b38 <cppLoop+0x2e0>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f3bf 8f5b 	dmb	ish
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d015      	beq.n	800797e <cppLoop+0x126>
 8007952:	4879      	ldr	r0, [pc, #484]	; (8007b38 <cppLoop+0x2e0>)
 8007954:	f00c fd01 	bl	801435a <__cxa_guard_acquire>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <cppLoop+0x126>
 8007968:	486d      	ldr	r0, [pc, #436]	; (8007b20 <cppLoop+0x2c8>)
 800796a:	f7fc f902 	bl	8003b72 <_ZN9LineTrace9getKpFastEv>
 800796e:	eef0 7a40 	vmov.f32	s15, s0
 8007972:	4b72      	ldr	r3, [pc, #456]	; (8007b3c <cppLoop+0x2e4>)
 8007974:	edc3 7a00 	vstr	s15, [r3]
 8007978:	486f      	ldr	r0, [pc, #444]	; (8007b38 <cppLoop+0x2e0>)
 800797a:	f00c fcfa 	bl	8014372 <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 800797e:	4b70      	ldr	r3, [pc, #448]	; (8007b40 <cppLoop+0x2e8>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f3bf 8f5b 	dmb	ish
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	bf0c      	ite	eq
 8007990:	2301      	moveq	r3, #1
 8007992:	2300      	movne	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <cppLoop+0x16e>
 800799a:	4869      	ldr	r0, [pc, #420]	; (8007b40 <cppLoop+0x2e8>)
 800799c:	f00c fcdd 	bl	801435a <__cxa_guard_acquire>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <cppLoop+0x16e>
 80079b0:	485b      	ldr	r0, [pc, #364]	; (8007b20 <cppLoop+0x2c8>)
 80079b2:	f7fc f8ed 	bl	8003b90 <_ZN9LineTrace9getKiFastEv>
 80079b6:	eef0 7a40 	vmov.f32	s15, s0
 80079ba:	4b62      	ldr	r3, [pc, #392]	; (8007b44 <cppLoop+0x2ec>)
 80079bc:	edc3 7a00 	vstr	s15, [r3]
 80079c0:	485f      	ldr	r0, [pc, #380]	; (8007b40 <cppLoop+0x2e8>)
 80079c2:	f00c fcd6 	bl	8014372 <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 80079c6:	4b60      	ldr	r3, [pc, #384]	; (8007b48 <cppLoop+0x2f0>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	f3bf 8f5b 	dmb	ish
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d015      	beq.n	8007a0e <cppLoop+0x1b6>
 80079e2:	4859      	ldr	r0, [pc, #356]	; (8007b48 <cppLoop+0x2f0>)
 80079e4:	f00c fcb9 	bl	801435a <__cxa_guard_acquire>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <cppLoop+0x1b6>
 80079f8:	4849      	ldr	r0, [pc, #292]	; (8007b20 <cppLoop+0x2c8>)
 80079fa:	f7fc f8d8 	bl	8003bae <_ZN9LineTrace9getKdFastEv>
 80079fe:	eef0 7a40 	vmov.f32	s15, s0
 8007a02:	4b52      	ldr	r3, [pc, #328]	; (8007b4c <cppLoop+0x2f4>)
 8007a04:	edc3 7a00 	vstr	s15, [r3]
 8007a08:	484f      	ldr	r0, [pc, #316]	; (8007b48 <cppLoop+0x2f0>)
 8007a0a:	f00c fcb2 	bl	8014372 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007a0e:	4b50      	ldr	r3, [pc, #320]	; (8007b50 <cppLoop+0x2f8>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f3bf 8f5b 	dmb	ish
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <cppLoop+0x1fe>
 8007a2a:	4849      	ldr	r0, [pc, #292]	; (8007b50 <cppLoop+0x2f8>)
 8007a2c:	f00c fc95 	bl	801435a <__cxa_guard_acquire>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <cppLoop+0x1fe>
 8007a40:	4837      	ldr	r0, [pc, #220]	; (8007b20 <cppLoop+0x2c8>)
 8007a42:	f7fc f913 	bl	8003c6c <_ZN9LineTrace17getTargetVelocityEv>
 8007a46:	eef0 7a40 	vmov.f32	s15, s0
 8007a4a:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <cppLoop+0x2fc>)
 8007a4c:	edc3 7a00 	vstr	s15, [r3]
 8007a50:	483f      	ldr	r0, [pc, #252]	; (8007b50 <cppLoop+0x2f8>)
 8007a52:	f00c fc8e 	bl	8014372 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007a56:	4b40      	ldr	r3, [pc, #256]	; (8007b58 <cppLoop+0x300>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f3bf 8f5b 	dmb	ish
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d015      	beq.n	8007a9e <cppLoop+0x246>
 8007a72:	4839      	ldr	r0, [pc, #228]	; (8007b58 <cppLoop+0x300>)
 8007a74:	f00c fc71 	bl	801435a <__cxa_guard_acquire>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bf14      	ite	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	2300      	moveq	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <cppLoop+0x246>
 8007a88:	4825      	ldr	r0, [pc, #148]	; (8007b20 <cppLoop+0x2c8>)
 8007a8a:	f7fc f8ff 	bl	8003c8c <_ZN9LineTrace14getMaxVelocityEv>
 8007a8e:	eef0 7a40 	vmov.f32	s15, s0
 8007a92:	4b32      	ldr	r3, [pc, #200]	; (8007b5c <cppLoop+0x304>)
 8007a94:	edc3 7a00 	vstr	s15, [r3]
 8007a98:	482f      	ldr	r0, [pc, #188]	; (8007b58 <cppLoop+0x300>)
 8007a9a:	f00c fc6a 	bl	8014372 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007a9e:	4b30      	ldr	r3, [pc, #192]	; (8007b60 <cppLoop+0x308>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f3bf 8f5b 	dmb	ish
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d015      	beq.n	8007ae6 <cppLoop+0x28e>
 8007aba:	4829      	ldr	r0, [pc, #164]	; (8007b60 <cppLoop+0x308>)
 8007abc:	f00c fc4d 	bl	801435a <__cxa_guard_acquire>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <cppLoop+0x28e>
 8007ad0:	4813      	ldr	r0, [pc, #76]	; (8007b20 <cppLoop+0x2c8>)
 8007ad2:	f7fc f8eb 	bl	8003cac <_ZN9LineTrace15getMaxVelocity2Ev>
 8007ad6:	eef0 7a40 	vmov.f32	s15, s0
 8007ada:	4b22      	ldr	r3, [pc, #136]	; (8007b64 <cppLoop+0x30c>)
 8007adc:	edc3 7a00 	vstr	s15, [r3]
 8007ae0:	481f      	ldr	r0, [pc, #124]	; (8007b60 <cppLoop+0x308>)
 8007ae2:	f00c fc46 	bl	8014372 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007ae6:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <cppLoop+0x310>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f3bf 8f5b 	dmb	ish
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d03f      	beq.n	8007b82 <cppLoop+0x32a>
 8007b02:	4819      	ldr	r0, [pc, #100]	; (8007b68 <cppLoop+0x310>)
 8007b04:	f00c fc29 	bl	801435a <__cxa_guard_acquire>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bf14      	ite	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	2300      	moveq	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d034      	beq.n	8007b82 <cppLoop+0x32a>
 8007b18:	e028      	b.n	8007b6c <cppLoop+0x314>
 8007b1a:	bf00      	nop
 8007b1c:	200412b0 	.word	0x200412b0
 8007b20:	2001bc10 	.word	0x2001bc10
 8007b24:	200412ac 	.word	0x200412ac
 8007b28:	200412b8 	.word	0x200412b8
 8007b2c:	200412b4 	.word	0x200412b4
 8007b30:	200412c0 	.word	0x200412c0
 8007b34:	200412bc 	.word	0x200412bc
 8007b38:	200412c8 	.word	0x200412c8
 8007b3c:	200412c4 	.word	0x200412c4
 8007b40:	200412d0 	.word	0x200412d0
 8007b44:	200412cc 	.word	0x200412cc
 8007b48:	200412d8 	.word	0x200412d8
 8007b4c:	200412d4 	.word	0x200412d4
 8007b50:	200412e0 	.word	0x200412e0
 8007b54:	200412dc 	.word	0x200412dc
 8007b58:	200412e8 	.word	0x200412e8
 8007b5c:	200412e4 	.word	0x200412e4
 8007b60:	200412f0 	.word	0x200412f0
 8007b64:	200412ec 	.word	0x200412ec
 8007b68:	200412f8 	.word	0x200412f8
 8007b6c:	48af      	ldr	r0, [pc, #700]	; (8007e2c <cppLoop+0x5d4>)
 8007b6e:	f7fc f8ad 	bl	8003ccc <_ZN9LineTrace14getMinVelocityEv>
 8007b72:	eef0 7a40 	vmov.f32	s15, s0
 8007b76:	4bae      	ldr	r3, [pc, #696]	; (8007e30 <cppLoop+0x5d8>)
 8007b78:	edc3 7a00 	vstr	s15, [r3]
 8007b7c:	48ad      	ldr	r0, [pc, #692]	; (8007e34 <cppLoop+0x5dc>)
 8007b7e:	f00c fbf8 	bl	8014372 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007b82:	4bad      	ldr	r3, [pc, #692]	; (8007e38 <cppLoop+0x5e0>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	f3bf 8f5b 	dmb	ish
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d015      	beq.n	8007bca <cppLoop+0x372>
 8007b9e:	48a6      	ldr	r0, [pc, #664]	; (8007e38 <cppLoop+0x5e0>)
 8007ba0:	f00c fbdb 	bl	801435a <__cxa_guard_acquire>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <cppLoop+0x372>
 8007bb4:	489d      	ldr	r0, [pc, #628]	; (8007e2c <cppLoop+0x5d4>)
 8007bb6:	f7fc f899 	bl	8003cec <_ZN9LineTrace15getMinVelocity2Ev>
 8007bba:	eef0 7a40 	vmov.f32	s15, s0
 8007bbe:	4b9f      	ldr	r3, [pc, #636]	; (8007e3c <cppLoop+0x5e4>)
 8007bc0:	edc3 7a00 	vstr	s15, [r3]
 8007bc4:	489c      	ldr	r0, [pc, #624]	; (8007e38 <cppLoop+0x5e0>)
 8007bc6:	f00c fbd4 	bl	8014372 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007bca:	4b9d      	ldr	r3, [pc, #628]	; (8007e40 <cppLoop+0x5e8>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	f3bf 8f5b 	dmb	ish
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d015      	beq.n	8007c12 <cppLoop+0x3ba>
 8007be6:	4896      	ldr	r0, [pc, #600]	; (8007e40 <cppLoop+0x5e8>)
 8007be8:	f00c fbb7 	bl	801435a <__cxa_guard_acquire>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bf14      	ite	ne
 8007bf2:	2301      	movne	r3, #1
 8007bf4:	2300      	moveq	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <cppLoop+0x3ba>
 8007bfc:	488b      	ldr	r0, [pc, #556]	; (8007e2c <cppLoop+0x5d4>)
 8007bfe:	f7fc f8b9 	bl	8003d74 <_ZN9LineTrace9getMaxAccEv>
 8007c02:	eef0 7a40 	vmov.f32	s15, s0
 8007c06:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <cppLoop+0x5ec>)
 8007c08:	edc3 7a00 	vstr	s15, [r3]
 8007c0c:	488c      	ldr	r0, [pc, #560]	; (8007e40 <cppLoop+0x5e8>)
 8007c0e:	f00c fbb0 	bl	8014372 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007c12:	4b8d      	ldr	r3, [pc, #564]	; (8007e48 <cppLoop+0x5f0>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	f3bf 8f5b 	dmb	ish
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bf0c      	ite	eq
 8007c24:	2301      	moveq	r3, #1
 8007c26:	2300      	movne	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d015      	beq.n	8007c5a <cppLoop+0x402>
 8007c2e:	4886      	ldr	r0, [pc, #536]	; (8007e48 <cppLoop+0x5f0>)
 8007c30:	f00c fb93 	bl	801435a <__cxa_guard_acquire>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bf14      	ite	ne
 8007c3a:	2301      	movne	r3, #1
 8007c3c:	2300      	moveq	r3, #0
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <cppLoop+0x402>
 8007c44:	4879      	ldr	r0, [pc, #484]	; (8007e2c <cppLoop+0x5d4>)
 8007c46:	f7fc f8cb 	bl	8003de0 <_ZN9LineTrace9getMaxDecEv>
 8007c4a:	eef0 7a40 	vmov.f32	s15, s0
 8007c4e:	4b7f      	ldr	r3, [pc, #508]	; (8007e4c <cppLoop+0x5f4>)
 8007c50:	edc3 7a00 	vstr	s15, [r3]
 8007c54:	487c      	ldr	r0, [pc, #496]	; (8007e48 <cppLoop+0x5f0>)
 8007c56:	f00c fb8c 	bl	8014372 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007c5a:	4b7d      	ldr	r3, [pc, #500]	; (8007e50 <cppLoop+0x5f8>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f3bf 8f5b 	dmb	ish
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d015      	beq.n	8007ca2 <cppLoop+0x44a>
 8007c76:	4876      	ldr	r0, [pc, #472]	; (8007e50 <cppLoop+0x5f8>)
 8007c78:	f00c fb6f 	bl	801435a <__cxa_guard_acquire>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <cppLoop+0x44a>
 8007c8c:	4867      	ldr	r0, [pc, #412]	; (8007e2c <cppLoop+0x5d4>)
 8007c8e:	f7fc f895 	bl	8003dbc <_ZN9LineTrace10getMaxAcc2Ev>
 8007c92:	eef0 7a40 	vmov.f32	s15, s0
 8007c96:	4b6f      	ldr	r3, [pc, #444]	; (8007e54 <cppLoop+0x5fc>)
 8007c98:	edc3 7a00 	vstr	s15, [r3]
 8007c9c:	486c      	ldr	r0, [pc, #432]	; (8007e50 <cppLoop+0x5f8>)
 8007c9e:	f00c fb68 	bl	8014372 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007ca2:	4b6d      	ldr	r3, [pc, #436]	; (8007e58 <cppLoop+0x600>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f3bf 8f5b 	dmb	ish
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bf0c      	ite	eq
 8007cb4:	2301      	moveq	r3, #1
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d015      	beq.n	8007cea <cppLoop+0x492>
 8007cbe:	4866      	ldr	r0, [pc, #408]	; (8007e58 <cppLoop+0x600>)
 8007cc0:	f00c fb4b 	bl	801435a <__cxa_guard_acquire>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bf14      	ite	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	2300      	moveq	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <cppLoop+0x492>
 8007cd4:	4855      	ldr	r0, [pc, #340]	; (8007e2c <cppLoop+0x5d4>)
 8007cd6:	f7fc f85f 	bl	8003d98 <_ZN9LineTrace10getMaxDec2Ev>
 8007cda:	eef0 7a40 	vmov.f32	s15, s0
 8007cde:	4b5f      	ldr	r3, [pc, #380]	; (8007e5c <cppLoop+0x604>)
 8007ce0:	edc3 7a00 	vstr	s15, [r3]
 8007ce4:	485c      	ldr	r0, [pc, #368]	; (8007e58 <cppLoop+0x600>)
 8007ce6:	f00c fb44 	bl	8014372 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007cea:	485d      	ldr	r0, [pc, #372]	; (8007e60 <cppLoop+0x608>)
 8007cec:	f7fd fb46 	bl	800537c <_ZN12RotarySwitch8getValueEv>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	f201 8503 	bhi.w	80096fe <cppLoop+0x1ea6>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <cppLoop+0x4a8>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d41 	.word	0x08007d41
 8007d04:	0800812d 	.word	0x0800812d
 8007d08:	080081e5 	.word	0x080081e5
 8007d0c:	08008337 	.word	0x08008337
 8007d10:	08008449 	.word	0x08008449
 8007d14:	080086cd 	.word	0x080086cd
 8007d18:	08008799 	.word	0x08008799
 8007d1c:	08008a19 	.word	0x08008a19
 8007d20:	08008cad 	.word	0x08008cad
 8007d24:	08008f2d 	.word	0x08008f2d
 8007d28:	080092b7 	.word	0x080092b7
 8007d2c:	08009357 	.word	0x08009357
 8007d30:	080093dd 	.word	0x080093dd
 8007d34:	08009477 	.word	0x08009477
 8007d38:	08009591 	.word	0x08009591
 8007d3c:	08009649 	.word	0x08009649
	case 0:
		led.fullColor('W');
 8007d40:	2157      	movs	r1, #87	; 0x57
 8007d42:	4848      	ldr	r0, [pc, #288]	; (8007e64 <cppLoop+0x60c>)
 8007d44:	f7fa f9a2 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d48:	f7f9 f9aa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f7f9 f9b6 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007d54:	4835      	ldr	r0, [pc, #212]	; (8007e2c <cppLoop+0x5d4>)
 8007d56:	f7fb fedf 	bl	8003b18 <_ZN9LineTrace5getKpEv>
 8007d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d5e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007e68 <cppLoop+0x610>
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	ee17 0a90 	vmov	r0, s15
 8007d6a:	f7f8 fc05 	bl	8000578 <__aeabi_f2d>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	461a      	mov	r2, r3
 8007d74:	4623      	mov	r3, r4
 8007d76:	483d      	ldr	r0, [pc, #244]	; (8007e6c <cppLoop+0x614>)
 8007d78:	f7f9 f9cc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	2000      	movs	r0, #0
 8007d80:	f7f9 f99e 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007d84:	4829      	ldr	r0, [pc, #164]	; (8007e2c <cppLoop+0x5d4>)
 8007d86:	f7fb fed6 	bl	8003b36 <_ZN9LineTrace5getKiEv>
 8007d8a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d8e:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007e70 <cppLoop+0x618>
 8007d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d96:	ee17 0a90 	vmov	r0, s15
 8007d9a:	f7f8 fbed 	bl	8000578 <__aeabi_f2d>
 8007d9e:	4605      	mov	r5, r0
 8007da0:	460e      	mov	r6, r1
 8007da2:	4822      	ldr	r0, [pc, #136]	; (8007e2c <cppLoop+0x5d4>)
 8007da4:	f7fb fed6 	bl	8003b54 <_ZN9LineTrace5getKdEv>
 8007da8:	eeb0 7a40 	vmov.f32	s14, s0
 8007dac:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007e74 <cppLoop+0x61c>
 8007db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db4:	ee17 0a90 	vmov	r0, s15
 8007db8:	f7f8 fbde 	bl	8000578 <__aeabi_f2d>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	e9cd 3400 	strd	r3, r4, [sp]
 8007dc4:	462a      	mov	r2, r5
 8007dc6:	4633      	mov	r3, r6
 8007dc8:	482b      	ldr	r0, [pc, #172]	; (8007e78 <cppLoop+0x620>)
 8007dca:	f7f9 f9a3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007dce:	482b      	ldr	r0, [pc, #172]	; (8007e7c <cppLoop+0x624>)
 8007dd0:	f7fa f8f8 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d04f      	beq.n	8007e84 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007de4:	2201      	movs	r2, #1
 8007de6:	f04f 31ff 	mov.w	r1, #4294967295
 8007dea:	481e      	ldr	r0, [pc, #120]	; (8007e64 <cppLoop+0x60c>)
 8007dec:	f7fa fa0a 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007df0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007df4:	f001 fdcc 	bl	8009990 <HAL_Delay>

			selector++;
 8007df8:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <cppLoop+0x628>)
 8007dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3301      	adds	r3, #1
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	b21a      	sxth	r2, r3
 8007e06:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <cppLoop+0x628>)
 8007e08:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007e0a:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <cppLoop+0x628>)
 8007e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	dd02      	ble.n	8007e1a <cppLoop+0x5c2>
 8007e14:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <cppLoop+0x628>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e20:	4810      	ldr	r0, [pc, #64]	; (8007e64 <cppLoop+0x60c>)
 8007e22:	f7fa f9ef 	bl	8002204 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007e26:	f001 bc6c 	b.w	8009702 <cppLoop+0x1eaa>
 8007e2a:	bf00      	nop
 8007e2c:	2001bc10 	.word	0x2001bc10
 8007e30:	200412f4 	.word	0x200412f4
 8007e34:	200412f8 	.word	0x200412f8
 8007e38:	20041300 	.word	0x20041300
 8007e3c:	200412fc 	.word	0x200412fc
 8007e40:	20041308 	.word	0x20041308
 8007e44:	20041304 	.word	0x20041304
 8007e48:	20041310 	.word	0x20041310
 8007e4c:	2004130c 	.word	0x2004130c
 8007e50:	20041318 	.word	0x20041318
 8007e54:	20041314 	.word	0x20041314
 8007e58:	20041320 	.word	0x20041320
 8007e5c:	2004131c 	.word	0x2004131c
 8007e60:	200005c0 	.word	0x200005c0
 8007e64:	200005c8 	.word	0x200005c8
 8007e68:	447a0000 	.word	0x447a0000
 8007e6c:	08019cb8 	.word	0x08019cb8
 8007e70:	42c80000 	.word	0x42c80000
 8007e74:	461c4000 	.word	0x461c4000
 8007e78:	08019cc4 	.word	0x08019cc4
 8007e7c:	200005bc 	.word	0x200005bc
 8007e80:	2004129e 	.word	0x2004129e
		else if(joy_stick.getValue() == JOY_R){
 8007e84:	489e      	ldr	r0, [pc, #632]	; (8008100 <cppLoop+0x8a8>)
 8007e86:	f7fa f89d 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b10      	cmp	r3, #16
 8007e8e:	bf0c      	ite	eq
 8007e90:	2301      	moveq	r3, #1
 8007e92:	2300      	movne	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d059      	beq.n	8007f4e <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007ea0:	4898      	ldr	r0, [pc, #608]	; (8008104 <cppLoop+0x8ac>)
 8007ea2:	f7fa f9af 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007ea6:	2064      	movs	r0, #100	; 0x64
 8007ea8:	f001 fd72 	bl	8009990 <HAL_Delay>
			if(selector == 0){
 8007eac:	4b96      	ldr	r3, [pc, #600]	; (8008108 <cppLoop+0x8b0>)
 8007eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d113      	bne.n	8007ede <cppLoop+0x686>
				adj_kp = adj_kp + 0.00001;
 8007eb6:	4b95      	ldr	r3, [pc, #596]	; (800810c <cppLoop+0x8b4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f8 fb5c 	bl	8000578 <__aeabi_f2d>
 8007ec0:	a389      	add	r3, pc, #548	; (adr r3, 80080e8 <cppLoop+0x890>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 f9f9 	bl	80002bc <__adddf3>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	4618      	mov	r0, r3
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	f7f8 fea1 	bl	8000c18 <__aeabi_d2f>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	4b8c      	ldr	r3, [pc, #560]	; (800810c <cppLoop+0x8b4>)
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e02b      	b.n	8007f36 <cppLoop+0x6de>
			else if(selector == 1){
 8007ede:	4b8a      	ldr	r3, [pc, #552]	; (8008108 <cppLoop+0x8b0>)
 8007ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d113      	bne.n	8007f10 <cppLoop+0x6b8>
				adj_ki = adj_ki + 0.0001;
 8007ee8:	4b89      	ldr	r3, [pc, #548]	; (8008110 <cppLoop+0x8b8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7f8 fb43 	bl	8000578 <__aeabi_f2d>
 8007ef2:	a37f      	add	r3, pc, #508	; (adr r3, 80080f0 <cppLoop+0x898>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f9e0 	bl	80002bc <__adddf3>
 8007efc:	4603      	mov	r3, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	4618      	mov	r0, r3
 8007f02:	4621      	mov	r1, r4
 8007f04:	f7f8 fe88 	bl	8000c18 <__aeabi_d2f>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	4b81      	ldr	r3, [pc, #516]	; (8008110 <cppLoop+0x8b8>)
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e012      	b.n	8007f36 <cppLoop+0x6de>
				adj_kd = adj_kd + 0.000001;
 8007f10:	4b80      	ldr	r3, [pc, #512]	; (8008114 <cppLoop+0x8bc>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7f8 fb2f 	bl	8000578 <__aeabi_f2d>
 8007f1a:	a377      	add	r3, pc, #476	; (adr r3, 80080f8 <cppLoop+0x8a0>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f7f8 f9cc 	bl	80002bc <__adddf3>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4618      	mov	r0, r3
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	f7f8 fe74 	bl	8000c18 <__aeabi_d2f>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b78      	ldr	r3, [pc, #480]	; (8008114 <cppLoop+0x8bc>)
 8007f34:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007f36:	2152      	movs	r1, #82	; 0x52
 8007f38:	4872      	ldr	r0, [pc, #456]	; (8008104 <cppLoop+0x8ac>)
 8007f3a:	f7fa f8a7 	bl	800208c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f04f 31ff 	mov.w	r1, #4294967295
 8007f44:	486f      	ldr	r0, [pc, #444]	; (8008104 <cppLoop+0x8ac>)
 8007f46:	f7fa f95d 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8007f4a:	f001 bbda 	b.w	8009702 <cppLoop+0x1eaa>
		else if(joy_stick.getValue() == JOY_L){
 8007f4e:	486c      	ldr	r0, [pc, #432]	; (8008100 <cppLoop+0x8a8>)
 8007f50:	f7fa f838 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	bf0c      	ite	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	2300      	movne	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d059      	beq.n	8008018 <cppLoop+0x7c0>
			led.LR(-1, 1);
 8007f64:	2201      	movs	r2, #1
 8007f66:	f04f 31ff 	mov.w	r1, #4294967295
 8007f6a:	4866      	ldr	r0, [pc, #408]	; (8008104 <cppLoop+0x8ac>)
 8007f6c:	f7fa f94a 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f70:	2064      	movs	r0, #100	; 0x64
 8007f72:	f001 fd0d 	bl	8009990 <HAL_Delay>
			if(selector == 0){
 8007f76:	4b64      	ldr	r3, [pc, #400]	; (8008108 <cppLoop+0x8b0>)
 8007f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d113      	bne.n	8007fa8 <cppLoop+0x750>
				adj_kp = adj_kp - 0.00001;
 8007f80:	4b62      	ldr	r3, [pc, #392]	; (800810c <cppLoop+0x8b4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7f8 faf7 	bl	8000578 <__aeabi_f2d>
 8007f8a:	a357      	add	r3, pc, #348	; (adr r3, 80080e8 <cppLoop+0x890>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 f992 	bl	80002b8 <__aeabi_dsub>
 8007f94:	4603      	mov	r3, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	4618      	mov	r0, r3
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	f7f8 fe3c 	bl	8000c18 <__aeabi_d2f>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	4b5a      	ldr	r3, [pc, #360]	; (800810c <cppLoop+0x8b4>)
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e02b      	b.n	8008000 <cppLoop+0x7a8>
			else if(selector == 1){
 8007fa8:	4b57      	ldr	r3, [pc, #348]	; (8008108 <cppLoop+0x8b0>)
 8007faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d113      	bne.n	8007fda <cppLoop+0x782>
				adj_ki = adj_ki - 0.0001;
 8007fb2:	4b57      	ldr	r3, [pc, #348]	; (8008110 <cppLoop+0x8b8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7f8 fade 	bl	8000578 <__aeabi_f2d>
 8007fbc:	a34c      	add	r3, pc, #304	; (adr r3, 80080f0 <cppLoop+0x898>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 f979 	bl	80002b8 <__aeabi_dsub>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f7f8 fe23 	bl	8000c18 <__aeabi_d2f>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b4e      	ldr	r3, [pc, #312]	; (8008110 <cppLoop+0x8b8>)
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e012      	b.n	8008000 <cppLoop+0x7a8>
				adj_kd = adj_kd - 0.000001;
 8007fda:	4b4e      	ldr	r3, [pc, #312]	; (8008114 <cppLoop+0x8bc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f8 faca 	bl	8000578 <__aeabi_f2d>
 8007fe4:	a344      	add	r3, pc, #272	; (adr r3, 80080f8 <cppLoop+0x8a0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 f965 	bl	80002b8 <__aeabi_dsub>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	f7f8 fe0f 	bl	8000c18 <__aeabi_d2f>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	4b45      	ldr	r3, [pc, #276]	; (8008114 <cppLoop+0x8bc>)
 8007ffe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008000:	2152      	movs	r1, #82	; 0x52
 8008002:	4840      	ldr	r0, [pc, #256]	; (8008104 <cppLoop+0x8ac>)
 8008004:	f7fa f842 	bl	800208c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008008:	2200      	movs	r2, #0
 800800a:	f04f 31ff 	mov.w	r1, #4294967295
 800800e:	483d      	ldr	r0, [pc, #244]	; (8008104 <cppLoop+0x8ac>)
 8008010:	f7fa f8f8 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008014:	f001 bb75 	b.w	8009702 <cppLoop+0x1eaa>
		else if(joy_stick.getValue() == JOY_D){
 8008018:	4839      	ldr	r0, [pc, #228]	; (8008100 <cppLoop+0x8a8>)
 800801a:	f7f9 ffd3 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 800801e:	4603      	mov	r3, r0
 8008020:	2b04      	cmp	r3, #4
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d011      	beq.n	8008052 <cppLoop+0x7fa>
			led.LR(-1, 1);
 800802e:	2201      	movs	r2, #1
 8008030:	f04f 31ff 	mov.w	r1, #4294967295
 8008034:	4833      	ldr	r0, [pc, #204]	; (8008104 <cppLoop+0x8ac>)
 8008036:	f7fa f8e5 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800803a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800803e:	f001 fca7 	bl	8009990 <HAL_Delay>
			led.LR(-1, 0);
 8008042:	2200      	movs	r2, #0
 8008044:	f04f 31ff 	mov.w	r1, #4294967295
 8008048:	482e      	ldr	r0, [pc, #184]	; (8008104 <cppLoop+0x8ac>)
 800804a:	f7fa f8db 	bl	8002204 <_ZN3LED2LREaa>
		break;
 800804e:	f001 bb58 	b.w	8009702 <cppLoop+0x1eaa>
		else if(joy_stick.getValue() == JOY_C){
 8008052:	482b      	ldr	r0, [pc, #172]	; (8008100 <cppLoop+0x8a8>)
 8008054:	f7f9 ffb6 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008058:	4603      	mov	r3, r0
 800805a:	2b02      	cmp	r3, #2
 800805c:	bf0c      	ite	eq
 800805e:	2301      	moveq	r3, #1
 8008060:	2300      	movne	r3, #0
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	f001 834c 	beq.w	8009702 <cppLoop+0x1eaa>
			led.LR(-1, 1);
 800806a:	2201      	movs	r2, #1
 800806c:	f04f 31ff 	mov.w	r1, #4294967295
 8008070:	4824      	ldr	r0, [pc, #144]	; (8008104 <cppLoop+0x8ac>)
 8008072:	f7fa f8c7 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008076:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800807a:	f001 fc89 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800807e:	2300      	movs	r3, #0
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	4b22      	ldr	r3, [pc, #136]	; (800810c <cppLoop+0x8b4>)
 8008084:	2201      	movs	r2, #1
 8008086:	4924      	ldr	r1, [pc, #144]	; (8008118 <cppLoop+0x8c0>)
 8008088:	4824      	ldr	r0, [pc, #144]	; (800811c <cppLoop+0x8c4>)
 800808a:	f7f9 fb83 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800808e:	2300      	movs	r3, #0
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	4b1f      	ldr	r3, [pc, #124]	; (8008110 <cppLoop+0x8b8>)
 8008094:	2201      	movs	r2, #1
 8008096:	4922      	ldr	r1, [pc, #136]	; (8008120 <cppLoop+0x8c8>)
 8008098:	4820      	ldr	r0, [pc, #128]	; (800811c <cppLoop+0x8c4>)
 800809a:	f7f9 fb7b 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <cppLoop+0x8bc>)
 80080a4:	2201      	movs	r2, #1
 80080a6:	491f      	ldr	r1, [pc, #124]	; (8008124 <cppLoop+0x8cc>)
 80080a8:	481c      	ldr	r0, [pc, #112]	; (800811c <cppLoop+0x8c4>)
 80080aa:	f7f9 fb73 	bl	8001794 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80080ae:	4b17      	ldr	r3, [pc, #92]	; (800810c <cppLoop+0x8b4>)
 80080b0:	edd3 7a00 	vldr	s15, [r3]
 80080b4:	4b16      	ldr	r3, [pc, #88]	; (8008110 <cppLoop+0x8b8>)
 80080b6:	ed93 7a00 	vldr	s14, [r3]
 80080ba:	4b16      	ldr	r3, [pc, #88]	; (8008114 <cppLoop+0x8bc>)
 80080bc:	edd3 6a00 	vldr	s13, [r3]
 80080c0:	eeb0 1a66 	vmov.f32	s2, s13
 80080c4:	eef0 0a47 	vmov.f32	s1, s14
 80080c8:	eeb0 0a67 	vmov.f32	s0, s15
 80080cc:	4816      	ldr	r0, [pc, #88]	; (8008128 <cppLoop+0x8d0>)
 80080ce:	f7fb fcf1 	bl	8003ab4 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80080d2:	2200      	movs	r2, #0
 80080d4:	f04f 31ff 	mov.w	r1, #4294967295
 80080d8:	480a      	ldr	r0, [pc, #40]	; (8008104 <cppLoop+0x8ac>)
 80080da:	f7fa f893 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80080de:	f001 bb10 	b.w	8009702 <cppLoop+0x1eaa>
 80080e2:	bf00      	nop
 80080e4:	f3af 8000 	nop.w
 80080e8:	88e368f1 	.word	0x88e368f1
 80080ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80080f0:	eb1c432d 	.word	0xeb1c432d
 80080f4:	3f1a36e2 	.word	0x3f1a36e2
 80080f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80080fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8008100:	200005bc 	.word	0x200005bc
 8008104:	200005c8 	.word	0x200005c8
 8008108:	2004129e 	.word	0x2004129e
 800810c:	200412ac 	.word	0x200412ac
 8008110:	200412b4 	.word	0x200412b4
 8008114:	200412bc 	.word	0x200412bc
 8008118:	08019cd4 	.word	0x08019cd4
 800811c:	08019cdc 	.word	0x08019cdc
 8008120:	08019ce4 	.word	0x08019ce4
 8008124:	08019cec 	.word	0x08019cec
 8008128:	2001bc10 	.word	0x2001bc10

	case 1:
		led.fullColor('C');
 800812c:	2143      	movs	r1, #67	; 0x43
 800812e:	48b8      	ldr	r0, [pc, #736]	; (8008410 <cppLoop+0xbb8>)
 8008130:	f7f9 ffac 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008134:	f7f8 ffb4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008138:	2100      	movs	r1, #0
 800813a:	2000      	movs	r0, #0
 800813c:	f7f8 ffc0 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008140:	48b4      	ldr	r0, [pc, #720]	; (8008414 <cppLoop+0xbbc>)
 8008142:	f7f8 ffe7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008146:	2101      	movs	r1, #1
 8008148:	2000      	movs	r0, #0
 800814a:	f7f8 ffb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800814e:	4bb2      	ldr	r3, [pc, #712]	; (8008418 <cppLoop+0xbc0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 fa10 	bl	8000578 <__aeabi_f2d>
 8008158:	4603      	mov	r3, r0
 800815a:	460c      	mov	r4, r1
 800815c:	461a      	mov	r2, r3
 800815e:	4623      	mov	r3, r4
 8008160:	48ae      	ldr	r0, [pc, #696]	; (800841c <cppLoop+0xbc4>)
 8008162:	f7f8 ffd7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008166:	48ae      	ldr	r0, [pc, #696]	; (8008420 <cppLoop+0xbc8>)
 8008168:	f7f9 ff2c 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 800816c:	4603      	mov	r3, r0
 800816e:	2b02      	cmp	r3, #2
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	f001 82c4 	beq.w	8009706 <cppLoop+0x1eae>
			HAL_Delay(500);
 800817e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008182:	f001 fc05 	bl	8009990 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008186:	4ba4      	ldr	r3, [pc, #656]	; (8008418 <cppLoop+0xbc0>)
 8008188:	edd3 7a00 	vldr	s15, [r3]
 800818c:	eeb0 0a67 	vmov.f32	s0, s15
 8008190:	48a4      	ldr	r0, [pc, #656]	; (8008424 <cppLoop+0xbcc>)
 8008192:	f7fb fd1b 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008196:	f04f 32ff 	mov.w	r2, #4294967295
 800819a:	2101      	movs	r1, #1
 800819c:	489c      	ldr	r0, [pc, #624]	; (8008410 <cppLoop+0xbb8>)
 800819e:	f7fa f831 	bl	8002204 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 80081a2:	2100      	movs	r1, #0
 80081a4:	489f      	ldr	r0, [pc, #636]	; (8008424 <cppLoop+0xbcc>)
 80081a6:	f7fc f94d 	bl	8004444 <_ZN9LineTrace7setModeEs>
			HAL_Delay(1000);
 80081aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081ae:	f001 fbef 	bl	8009990 <HAL_Delay>
			esc.on(0., 0., 0., 0.);
 80081b2:	eddf 1a9d 	vldr	s3, [pc, #628]	; 8008428 <cppLoop+0xbd0>
 80081b6:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8008428 <cppLoop+0xbd0>
 80081ba:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8008428 <cppLoop+0xbd0>
 80081be:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8008428 <cppLoop+0xbd0>
 80081c2:	489a      	ldr	r0, [pc, #616]	; (800842c <cppLoop+0xbd4>)
 80081c4:	f7f9 f844 	bl	8001250 <_ZN3ESC2onEffff>
			line_trace.running();
 80081c8:	4896      	ldr	r0, [pc, #600]	; (8008424 <cppLoop+0xbcc>)
 80081ca:	f7fc f82d 	bl	8004228 <_ZN9LineTrace7runningEv>
			esc.off();
 80081ce:	4897      	ldr	r0, [pc, #604]	; (800842c <cppLoop+0xbd4>)
 80081d0:	f7f9 f8d8 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80081d4:	f04f 32ff 	mov.w	r2, #4294967295
 80081d8:	2100      	movs	r1, #0
 80081da:	488d      	ldr	r0, [pc, #564]	; (8008410 <cppLoop+0xbb8>)
 80081dc:	f7fa f812 	bl	8002204 <_ZN3LED2LREaa>
		}

		break;
 80081e0:	f001 ba91 	b.w	8009706 <cppLoop+0x1eae>

	case 2:
		led.fullColor('B');
 80081e4:	2142      	movs	r1, #66	; 0x42
 80081e6:	488a      	ldr	r0, [pc, #552]	; (8008410 <cppLoop+0xbb8>)
 80081e8:	f7f9 ff50 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 80081ec:	f7f8 ff58 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081f0:	2100      	movs	r1, #0
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7f8 ff64 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80081f8:	4886      	ldr	r0, [pc, #536]	; (8008414 <cppLoop+0xbbc>)
 80081fa:	f7f8 ff8b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081fe:	2101      	movs	r1, #1
 8008200:	2000      	movs	r0, #0
 8008202:	f7f8 ff5d 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008206:	4b84      	ldr	r3, [pc, #528]	; (8008418 <cppLoop+0xbc0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7f8 f9b4 	bl	8000578 <__aeabi_f2d>
 8008210:	4603      	mov	r3, r0
 8008212:	460c      	mov	r4, r1
 8008214:	461a      	mov	r2, r3
 8008216:	4623      	mov	r3, r4
 8008218:	4885      	ldr	r0, [pc, #532]	; (8008430 <cppLoop+0xbd8>)
 800821a:	f7f8 ff7b 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800821e:	4880      	ldr	r0, [pc, #512]	; (8008420 <cppLoop+0xbc8>)
 8008220:	f7f9 fed0 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008224:	4603      	mov	r3, r0
 8008226:	2b10      	cmp	r3, #16
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d023      	beq.n	800827c <cppLoop+0xa24>
			led.LR(-1, 1);
 8008234:	2201      	movs	r2, #1
 8008236:	f04f 31ff 	mov.w	r1, #4294967295
 800823a:	4875      	ldr	r0, [pc, #468]	; (8008410 <cppLoop+0xbb8>)
 800823c:	f7f9 ffe2 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008240:	2064      	movs	r0, #100	; 0x64
 8008242:	f001 fba5 	bl	8009990 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008246:	4b74      	ldr	r3, [pc, #464]	; (8008418 <cppLoop+0xbc0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f7f8 f994 	bl	8000578 <__aeabi_f2d>
 8008250:	a36d      	add	r3, pc, #436	; (adr r3, 8008408 <cppLoop+0xbb0>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f831 	bl	80002bc <__adddf3>
 800825a:	4603      	mov	r3, r0
 800825c:	460c      	mov	r4, r1
 800825e:	4618      	mov	r0, r3
 8008260:	4621      	mov	r1, r4
 8008262:	f7f8 fcd9 	bl	8000c18 <__aeabi_d2f>
 8008266:	4602      	mov	r2, r0
 8008268:	4b6b      	ldr	r3, [pc, #428]	; (8008418 <cppLoop+0xbc0>)
 800826a:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 800826c:	2200      	movs	r2, #0
 800826e:	f04f 31ff 	mov.w	r1, #4294967295
 8008272:	4867      	ldr	r0, [pc, #412]	; (8008410 <cppLoop+0xbb8>)
 8008274:	f7f9 ffc6 	bl	8002204 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008278:	f001 ba47 	b.w	800970a <cppLoop+0x1eb2>
		else if(joy_stick.getValue() == JOY_L){
 800827c:	4868      	ldr	r0, [pc, #416]	; (8008420 <cppLoop+0xbc8>)
 800827e:	f7f9 fea1 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008282:	4603      	mov	r3, r0
 8008284:	2b01      	cmp	r3, #1
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d023      	beq.n	80082da <cppLoop+0xa82>
			led.LR(-1, 1);
 8008292:	2201      	movs	r2, #1
 8008294:	f04f 31ff 	mov.w	r1, #4294967295
 8008298:	485d      	ldr	r0, [pc, #372]	; (8008410 <cppLoop+0xbb8>)
 800829a:	f7f9 ffb3 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800829e:	2064      	movs	r0, #100	; 0x64
 80082a0:	f001 fb76 	bl	8009990 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80082a4:	4b5c      	ldr	r3, [pc, #368]	; (8008418 <cppLoop+0xbc0>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7f8 f965 	bl	8000578 <__aeabi_f2d>
 80082ae:	a356      	add	r3, pc, #344	; (adr r3, 8008408 <cppLoop+0xbb0>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f8 f800 	bl	80002b8 <__aeabi_dsub>
 80082b8:	4603      	mov	r3, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4618      	mov	r0, r3
 80082be:	4621      	mov	r1, r4
 80082c0:	f7f8 fcaa 	bl	8000c18 <__aeabi_d2f>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b54      	ldr	r3, [pc, #336]	; (8008418 <cppLoop+0xbc0>)
 80082c8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80082ca:	2200      	movs	r2, #0
 80082cc:	f04f 31ff 	mov.w	r1, #4294967295
 80082d0:	484f      	ldr	r0, [pc, #316]	; (8008410 <cppLoop+0xbb8>)
 80082d2:	f7f9 ff97 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80082d6:	f001 ba18 	b.w	800970a <cppLoop+0x1eb2>
		else if(joy_stick.getValue() == JOY_C){
 80082da:	4851      	ldr	r0, [pc, #324]	; (8008420 <cppLoop+0xbc8>)
 80082dc:	f7f9 fe72 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f001 820c 	beq.w	800970a <cppLoop+0x1eb2>
			led.LR(-1, 1);
 80082f2:	2201      	movs	r2, #1
 80082f4:	f04f 31ff 	mov.w	r1, #4294967295
 80082f8:	4845      	ldr	r0, [pc, #276]	; (8008410 <cppLoop+0xbb8>)
 80082fa:	f7f9 ff83 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008302:	f001 fb45 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4b43      	ldr	r3, [pc, #268]	; (8008418 <cppLoop+0xbc0>)
 800830c:	2201      	movs	r2, #1
 800830e:	4949      	ldr	r1, [pc, #292]	; (8008434 <cppLoop+0xbdc>)
 8008310:	4849      	ldr	r0, [pc, #292]	; (8008438 <cppLoop+0xbe0>)
 8008312:	f7f9 fa3f 	bl	8001794 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008316:	4b40      	ldr	r3, [pc, #256]	; (8008418 <cppLoop+0xbc0>)
 8008318:	edd3 7a00 	vldr	s15, [r3]
 800831c:	eeb0 0a67 	vmov.f32	s0, s15
 8008320:	4840      	ldr	r0, [pc, #256]	; (8008424 <cppLoop+0xbcc>)
 8008322:	f7fb fc53 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008326:	2200      	movs	r2, #0
 8008328:	f04f 31ff 	mov.w	r1, #4294967295
 800832c:	4838      	ldr	r0, [pc, #224]	; (8008410 <cppLoop+0xbb8>)
 800832e:	f7f9 ff69 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008332:	f001 b9ea 	b.w	800970a <cppLoop+0x1eb2>

	case 3:
		led.fullColor('Y');
 8008336:	2159      	movs	r1, #89	; 0x59
 8008338:	4835      	ldr	r0, [pc, #212]	; (8008410 <cppLoop+0xbb8>)
 800833a:	f7f9 fea7 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 800833e:	f7f8 feaf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008342:	2100      	movs	r1, #0
 8008344:	2000      	movs	r0, #0
 8008346:	f7f8 febb 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800834a:	4b3c      	ldr	r3, [pc, #240]	; (800843c <cppLoop+0xbe4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7f8 f912 	bl	8000578 <__aeabi_f2d>
 8008354:	4603      	mov	r3, r0
 8008356:	460c      	mov	r4, r1
 8008358:	461a      	mov	r2, r3
 800835a:	4623      	mov	r3, r4
 800835c:	4838      	ldr	r0, [pc, #224]	; (8008440 <cppLoop+0xbe8>)
 800835e:	f7f8 fed9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008362:	2101      	movs	r1, #1
 8008364:	2000      	movs	r0, #0
 8008366:	f7f8 feab 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800836a:	4b36      	ldr	r3, [pc, #216]	; (8008444 <cppLoop+0xbec>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f7f8 f902 	bl	8000578 <__aeabi_f2d>
 8008374:	4603      	mov	r3, r0
 8008376:	460c      	mov	r4, r1
 8008378:	461a      	mov	r2, r3
 800837a:	4623      	mov	r3, r4
 800837c:	4827      	ldr	r0, [pc, #156]	; (800841c <cppLoop+0xbc4>)
 800837e:	f7f8 fec9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008382:	4827      	ldr	r0, [pc, #156]	; (8008420 <cppLoop+0xbc8>)
 8008384:	f7f9 fe1e 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008388:	4603      	mov	r3, r0
 800838a:	2b02      	cmp	r3, #2
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	f001 81ba 	beq.w	800970e <cppLoop+0x1eb6>
			HAL_Delay(500);
 800839a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800839e:	f001 faf7 	bl	8009990 <HAL_Delay>

			led.LR(1, -1);
 80083a2:	f04f 32ff 	mov.w	r2, #4294967295
 80083a6:	2101      	movs	r1, #1
 80083a8:	4819      	ldr	r0, [pc, #100]	; (8008410 <cppLoop+0xbb8>)
 80083aa:	f7f9 ff2b 	bl	8002204 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80083ae:	2101      	movs	r1, #1
 80083b0:	481c      	ldr	r0, [pc, #112]	; (8008424 <cppLoop+0xbcc>)
 80083b2:	f7fc f847 	bl	8004444 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80083b6:	4b23      	ldr	r3, [pc, #140]	; (8008444 <cppLoop+0xbec>)
 80083b8:	edd3 7a00 	vldr	s15, [r3]
 80083bc:	eeb0 0a67 	vmov.f32	s0, s15
 80083c0:	4818      	ldr	r0, [pc, #96]	; (8008424 <cppLoop+0xbcc>)
 80083c2:	f7fb fc03 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80083c6:	4b1d      	ldr	r3, [pc, #116]	; (800843c <cppLoop+0xbe4>)
 80083c8:	edd3 7a00 	vldr	s15, [r3]
 80083cc:	eeb0 0a67 	vmov.f32	s0, s15
 80083d0:	4814      	ldr	r0, [pc, #80]	; (8008424 <cppLoop+0xbcc>)
 80083d2:	f7fb fc0b 	bl	8003bec <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80083d6:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <cppLoop+0xbec>)
 80083d8:	edd3 7a00 	vldr	s15, [r3]
 80083dc:	eeb0 0a67 	vmov.f32	s0, s15
 80083e0:	4810      	ldr	r0, [pc, #64]	; (8008424 <cppLoop+0xbcc>)
 80083e2:	f7fb fc23 	bl	8003c2c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80083e6:	480f      	ldr	r0, [pc, #60]	; (8008424 <cppLoop+0xbcc>)
 80083e8:	f7fa fe60 	bl	80030ac <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80083ec:	480d      	ldr	r0, [pc, #52]	; (8008424 <cppLoop+0xbcc>)
 80083ee:	f7fb ff1b 	bl	8004228 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	2100      	movs	r1, #0
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <cppLoop+0xbb8>)
 80083fa:	f7f9 ff03 	bl	8002204 <_ZN3LED2LREaa>
		}

		break;
 80083fe:	f001 b986 	b.w	800970e <cppLoop+0x1eb6>
 8008402:	bf00      	nop
 8008404:	f3af 8000 	nop.w
 8008408:	9999999a 	.word	0x9999999a
 800840c:	3fb99999 	.word	0x3fb99999
 8008410:	200005c8 	.word	0x200005c8
 8008414:	08019cf4 	.word	0x08019cf4
 8008418:	200412dc 	.word	0x200412dc
 800841c:	08019d00 	.word	0x08019d00
 8008420:	200005bc 	.word	0x200005bc
 8008424:	2001bc10 	.word	0x2001bc10
 8008428:	00000000 	.word	0x00000000
 800842c:	20041298 	.word	0x20041298
 8008430:	08019d0c 	.word	0x08019d0c
 8008434:	08019d18 	.word	0x08019d18
 8008438:	08019cdc 	.word	0x08019cdc
 800843c:	200412e4 	.word	0x200412e4
 8008440:	08019d24 	.word	0x08019d24
 8008444:	200412f4 	.word	0x200412f4

	case 4:
		led.fullColor('G');
 8008448:	2147      	movs	r1, #71	; 0x47
 800844a:	4895      	ldr	r0, [pc, #596]	; (80086a0 <cppLoop+0xe48>)
 800844c:	f7f9 fe1e 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008450:	f7f8 fe26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008454:	2100      	movs	r1, #0
 8008456:	2000      	movs	r0, #0
 8008458:	f7f8 fe32 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800845c:	4891      	ldr	r0, [pc, #580]	; (80086a4 <cppLoop+0xe4c>)
 800845e:	f7fb fc15 	bl	8003c8c <_ZN9LineTrace14getMaxVelocityEv>
 8008462:	ee10 3a10 	vmov	r3, s0
 8008466:	4618      	mov	r0, r3
 8008468:	f7f8 f886 	bl	8000578 <__aeabi_f2d>
 800846c:	4603      	mov	r3, r0
 800846e:	460c      	mov	r4, r1
 8008470:	461a      	mov	r2, r3
 8008472:	4623      	mov	r3, r4
 8008474:	488c      	ldr	r0, [pc, #560]	; (80086a8 <cppLoop+0xe50>)
 8008476:	f7f8 fe4d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800847a:	2101      	movs	r1, #1
 800847c:	2000      	movs	r0, #0
 800847e:	f7f8 fe1f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008482:	4888      	ldr	r0, [pc, #544]	; (80086a4 <cppLoop+0xe4c>)
 8008484:	f7fb fc22 	bl	8003ccc <_ZN9LineTrace14getMinVelocityEv>
 8008488:	ee10 3a10 	vmov	r3, s0
 800848c:	4618      	mov	r0, r3
 800848e:	f7f8 f873 	bl	8000578 <__aeabi_f2d>
 8008492:	4603      	mov	r3, r0
 8008494:	460c      	mov	r4, r1
 8008496:	461a      	mov	r2, r3
 8008498:	4623      	mov	r3, r4
 800849a:	4884      	ldr	r0, [pc, #528]	; (80086ac <cppLoop+0xe54>)
 800849c:	f7f8 fe3a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084a0:	4883      	ldr	r0, [pc, #524]	; (80086b0 <cppLoop+0xe58>)
 80084a2:	f7f9 fd8f 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	bf0c      	ite	eq
 80084ac:	2301      	moveq	r3, #1
 80084ae:	2300      	movne	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d022      	beq.n	80084fc <cppLoop+0xca4>
			led.LR(-1, 1);
 80084b6:	2201      	movs	r2, #1
 80084b8:	f04f 31ff 	mov.w	r1, #4294967295
 80084bc:	4878      	ldr	r0, [pc, #480]	; (80086a0 <cppLoop+0xe48>)
 80084be:	f7f9 fea1 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084c6:	f001 fa63 	bl	8009990 <HAL_Delay>

			selector_vel++;
 80084ca:	4b7a      	ldr	r3, [pc, #488]	; (80086b4 <cppLoop+0xe5c>)
 80084cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3301      	adds	r3, #1
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	b21a      	sxth	r2, r3
 80084d8:	4b76      	ldr	r3, [pc, #472]	; (80086b4 <cppLoop+0xe5c>)
 80084da:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80084dc:	4b75      	ldr	r3, [pc, #468]	; (80086b4 <cppLoop+0xe5c>)
 80084de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	dd02      	ble.n	80084ec <cppLoop+0xc94>
 80084e6:	4b73      	ldr	r3, [pc, #460]	; (80086b4 <cppLoop+0xe5c>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80084ec:	2200      	movs	r2, #0
 80084ee:	f04f 31ff 	mov.w	r1, #4294967295
 80084f2:	486b      	ldr	r0, [pc, #428]	; (80086a0 <cppLoop+0xe48>)
 80084f4:	f7f9 fe86 	bl	8002204 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80084f8:	f001 b90b 	b.w	8009712 <cppLoop+0x1eba>
		else if(joy_stick.getValue() == JOY_R){
 80084fc:	486c      	ldr	r0, [pc, #432]	; (80086b0 <cppLoop+0xe58>)
 80084fe:	f7f9 fd61 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008502:	4603      	mov	r3, r0
 8008504:	2b10      	cmp	r3, #16
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d03c      	beq.n	800858c <cppLoop+0xd34>
			led.LR(-1, 1);
 8008512:	2201      	movs	r2, #1
 8008514:	f04f 31ff 	mov.w	r1, #4294967295
 8008518:	4861      	ldr	r0, [pc, #388]	; (80086a0 <cppLoop+0xe48>)
 800851a:	f7f9 fe73 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800851e:	2064      	movs	r0, #100	; 0x64
 8008520:	f001 fa36 	bl	8009990 <HAL_Delay>
			if(selector_vel == 0)
 8008524:	4b63      	ldr	r3, [pc, #396]	; (80086b4 <cppLoop+0xe5c>)
 8008526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d113      	bne.n	8008556 <cppLoop+0xcfe>
				adj_max_velocity = adj_max_velocity + 0.1;
 800852e:	4b62      	ldr	r3, [pc, #392]	; (80086b8 <cppLoop+0xe60>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f7f8 f820 	bl	8000578 <__aeabi_f2d>
 8008538:	a357      	add	r3, pc, #348	; (adr r3, 8008698 <cppLoop+0xe40>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f7 febd 	bl	80002bc <__adddf3>
 8008542:	4603      	mov	r3, r0
 8008544:	460c      	mov	r4, r1
 8008546:	4618      	mov	r0, r3
 8008548:	4621      	mov	r1, r4
 800854a:	f7f8 fb65 	bl	8000c18 <__aeabi_d2f>
 800854e:	4602      	mov	r2, r0
 8008550:	4b59      	ldr	r3, [pc, #356]	; (80086b8 <cppLoop+0xe60>)
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e012      	b.n	800857c <cppLoop+0xd24>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <cppLoop+0xe64>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f7f8 f80c 	bl	8000578 <__aeabi_f2d>
 8008560:	a34d      	add	r3, pc, #308	; (adr r3, 8008698 <cppLoop+0xe40>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f7 fea9 	bl	80002bc <__adddf3>
 800856a:	4603      	mov	r3, r0
 800856c:	460c      	mov	r4, r1
 800856e:	4618      	mov	r0, r3
 8008570:	4621      	mov	r1, r4
 8008572:	f7f8 fb51 	bl	8000c18 <__aeabi_d2f>
 8008576:	4602      	mov	r2, r0
 8008578:	4b50      	ldr	r3, [pc, #320]	; (80086bc <cppLoop+0xe64>)
 800857a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800857c:	2200      	movs	r2, #0
 800857e:	f04f 31ff 	mov.w	r1, #4294967295
 8008582:	4847      	ldr	r0, [pc, #284]	; (80086a0 <cppLoop+0xe48>)
 8008584:	f7f9 fe3e 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008588:	f001 b8c3 	b.w	8009712 <cppLoop+0x1eba>
		else if(joy_stick.getValue() == JOY_L){
 800858c:	4848      	ldr	r0, [pc, #288]	; (80086b0 <cppLoop+0xe58>)
 800858e:	f7f9 fd19 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008592:	4603      	mov	r3, r0
 8008594:	2b01      	cmp	r3, #1
 8008596:	bf0c      	ite	eq
 8008598:	2301      	moveq	r3, #1
 800859a:	2300      	movne	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d03c      	beq.n	800861c <cppLoop+0xdc4>
			led.LR(-1, 1);
 80085a2:	2201      	movs	r2, #1
 80085a4:	f04f 31ff 	mov.w	r1, #4294967295
 80085a8:	483d      	ldr	r0, [pc, #244]	; (80086a0 <cppLoop+0xe48>)
 80085aa:	f7f9 fe2b 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085ae:	2064      	movs	r0, #100	; 0x64
 80085b0:	f001 f9ee 	bl	8009990 <HAL_Delay>
			if(selector_vel == 0)
 80085b4:	4b3f      	ldr	r3, [pc, #252]	; (80086b4 <cppLoop+0xe5c>)
 80085b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d113      	bne.n	80085e6 <cppLoop+0xd8e>
				adj_max_velocity = adj_max_velocity - 0.1;
 80085be:	4b3e      	ldr	r3, [pc, #248]	; (80086b8 <cppLoop+0xe60>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f7 ffd8 	bl	8000578 <__aeabi_f2d>
 80085c8:	a333      	add	r3, pc, #204	; (adr r3, 8008698 <cppLoop+0xe40>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f7 fe73 	bl	80002b8 <__aeabi_dsub>
 80085d2:	4603      	mov	r3, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	4618      	mov	r0, r3
 80085d8:	4621      	mov	r1, r4
 80085da:	f7f8 fb1d 	bl	8000c18 <__aeabi_d2f>
 80085de:	4602      	mov	r2, r0
 80085e0:	4b35      	ldr	r3, [pc, #212]	; (80086b8 <cppLoop+0xe60>)
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	e012      	b.n	800860c <cppLoop+0xdb4>
				adj_min_velocity = adj_min_velocity - 0.1;
 80085e6:	4b35      	ldr	r3, [pc, #212]	; (80086bc <cppLoop+0xe64>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f7 ffc4 	bl	8000578 <__aeabi_f2d>
 80085f0:	a329      	add	r3, pc, #164	; (adr r3, 8008698 <cppLoop+0xe40>)
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	f7f7 fe5f 	bl	80002b8 <__aeabi_dsub>
 80085fa:	4603      	mov	r3, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	4618      	mov	r0, r3
 8008600:	4621      	mov	r1, r4
 8008602:	f7f8 fb09 	bl	8000c18 <__aeabi_d2f>
 8008606:	4602      	mov	r2, r0
 8008608:	4b2c      	ldr	r3, [pc, #176]	; (80086bc <cppLoop+0xe64>)
 800860a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800860c:	2200      	movs	r2, #0
 800860e:	f04f 31ff 	mov.w	r1, #4294967295
 8008612:	4823      	ldr	r0, [pc, #140]	; (80086a0 <cppLoop+0xe48>)
 8008614:	f7f9 fdf6 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008618:	f001 b87b 	b.w	8009712 <cppLoop+0x1eba>
		else if(joy_stick.getValue() == JOY_C){
 800861c:	4824      	ldr	r0, [pc, #144]	; (80086b0 <cppLoop+0xe58>)
 800861e:	f7f9 fcd1 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008622:	4603      	mov	r3, r0
 8008624:	2b02      	cmp	r3, #2
 8008626:	bf0c      	ite	eq
 8008628:	2301      	moveq	r3, #1
 800862a:	2300      	movne	r3, #0
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	f001 806f 	beq.w	8009712 <cppLoop+0x1eba>
			led.LR(-1, 1);
 8008634:	2201      	movs	r2, #1
 8008636:	f04f 31ff 	mov.w	r1, #4294967295
 800863a:	4819      	ldr	r0, [pc, #100]	; (80086a0 <cppLoop+0xe48>)
 800863c:	f7f9 fde2 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008640:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008644:	f001 f9a4 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008648:	2300      	movs	r3, #0
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <cppLoop+0xe60>)
 800864e:	2201      	movs	r2, #1
 8008650:	491b      	ldr	r1, [pc, #108]	; (80086c0 <cppLoop+0xe68>)
 8008652:	481c      	ldr	r0, [pc, #112]	; (80086c4 <cppLoop+0xe6c>)
 8008654:	f7f9 f89e 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008658:	2300      	movs	r3, #0
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	4b17      	ldr	r3, [pc, #92]	; (80086bc <cppLoop+0xe64>)
 800865e:	2201      	movs	r2, #1
 8008660:	4919      	ldr	r1, [pc, #100]	; (80086c8 <cppLoop+0xe70>)
 8008662:	4818      	ldr	r0, [pc, #96]	; (80086c4 <cppLoop+0xe6c>)
 8008664:	f7f9 f896 	bl	8001794 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008668:	4b13      	ldr	r3, [pc, #76]	; (80086b8 <cppLoop+0xe60>)
 800866a:	edd3 7a00 	vldr	s15, [r3]
 800866e:	eeb0 0a67 	vmov.f32	s0, s15
 8008672:	480c      	ldr	r0, [pc, #48]	; (80086a4 <cppLoop+0xe4c>)
 8008674:	f7fb faba 	bl	8003bec <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <cppLoop+0xe64>)
 800867a:	edd3 7a00 	vldr	s15, [r3]
 800867e:	eeb0 0a67 	vmov.f32	s0, s15
 8008682:	4808      	ldr	r0, [pc, #32]	; (80086a4 <cppLoop+0xe4c>)
 8008684:	f7fb fad2 	bl	8003c2c <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008688:	2200      	movs	r2, #0
 800868a:	f04f 31ff 	mov.w	r1, #4294967295
 800868e:	4804      	ldr	r0, [pc, #16]	; (80086a0 <cppLoop+0xe48>)
 8008690:	f7f9 fdb8 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008694:	f001 b83d 	b.w	8009712 <cppLoop+0x1eba>
 8008698:	9999999a 	.word	0x9999999a
 800869c:	3fb99999 	.word	0x3fb99999
 80086a0:	200005c8 	.word	0x200005c8
 80086a4:	2001bc10 	.word	0x2001bc10
 80086a8:	08019d24 	.word	0x08019d24
 80086ac:	08019d0c 	.word	0x08019d0c
 80086b0:	200005bc 	.word	0x200005bc
 80086b4:	200412a4 	.word	0x200412a4
 80086b8:	200412e4 	.word	0x200412e4
 80086bc:	200412f4 	.word	0x200412f4
 80086c0:	08019d30 	.word	0x08019d30
 80086c4:	08019cdc 	.word	0x08019cdc
 80086c8:	08019d3c 	.word	0x08019d3c

	case 5:
		led.fullColor('M');
 80086cc:	214d      	movs	r1, #77	; 0x4d
 80086ce:	48aa      	ldr	r0, [pc, #680]	; (8008978 <cppLoop+0x1120>)
 80086d0:	f7f9 fcdc 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 80086d4:	f7f8 fce4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086d8:	2100      	movs	r1, #0
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f8 fcf0 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80086e0:	4ba6      	ldr	r3, [pc, #664]	; (800897c <cppLoop+0x1124>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7f7 ff47 	bl	8000578 <__aeabi_f2d>
 80086ea:	4603      	mov	r3, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	461a      	mov	r2, r3
 80086f0:	4623      	mov	r3, r4
 80086f2:	48a3      	ldr	r0, [pc, #652]	; (8008980 <cppLoop+0x1128>)
 80086f4:	f7f8 fd0e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086f8:	2101      	movs	r1, #1
 80086fa:	2000      	movs	r0, #0
 80086fc:	f7f8 fce0 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008700:	4ba0      	ldr	r3, [pc, #640]	; (8008984 <cppLoop+0x112c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f7f7 ff37 	bl	8000578 <__aeabi_f2d>
 800870a:	4603      	mov	r3, r0
 800870c:	460c      	mov	r4, r1
 800870e:	461a      	mov	r2, r3
 8008710:	4623      	mov	r3, r4
 8008712:	489d      	ldr	r0, [pc, #628]	; (8008988 <cppLoop+0x1130>)
 8008714:	f7f8 fcfe 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008718:	489c      	ldr	r0, [pc, #624]	; (800898c <cppLoop+0x1134>)
 800871a:	f7f9 fc53 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 800871e:	4603      	mov	r3, r0
 8008720:	2b02      	cmp	r3, #2
 8008722:	bf0c      	ite	eq
 8008724:	2301      	moveq	r3, #1
 8008726:	2300      	movne	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 87f3 	beq.w	8009716 <cppLoop+0x1ebe>
			HAL_Delay(500);
 8008730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008734:	f001 f92c 	bl	8009990 <HAL_Delay>

			led.LR(1, -1);
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	2101      	movs	r1, #1
 800873e:	488e      	ldr	r0, [pc, #568]	; (8008978 <cppLoop+0x1120>)
 8008740:	f7f9 fd60 	bl	8002204 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008744:	2102      	movs	r1, #2
 8008746:	4892      	ldr	r0, [pc, #584]	; (8008990 <cppLoop+0x1138>)
 8008748:	f7fb fe7c 	bl	8004444 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800874c:	4b8d      	ldr	r3, [pc, #564]	; (8008984 <cppLoop+0x112c>)
 800874e:	edd3 7a00 	vldr	s15, [r3]
 8008752:	eeb0 0a67 	vmov.f32	s0, s15
 8008756:	488e      	ldr	r0, [pc, #568]	; (8008990 <cppLoop+0x1138>)
 8008758:	f7fb fa38 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800875c:	4b87      	ldr	r3, [pc, #540]	; (800897c <cppLoop+0x1124>)
 800875e:	edd3 7a00 	vldr	s15, [r3]
 8008762:	eeb0 0a67 	vmov.f32	s0, s15
 8008766:	488a      	ldr	r0, [pc, #552]	; (8008990 <cppLoop+0x1138>)
 8008768:	f7fb fa50 	bl	8003c0c <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800876c:	4b85      	ldr	r3, [pc, #532]	; (8008984 <cppLoop+0x112c>)
 800876e:	edd3 7a00 	vldr	s15, [r3]
 8008772:	eeb0 0a67 	vmov.f32	s0, s15
 8008776:	4886      	ldr	r0, [pc, #536]	; (8008990 <cppLoop+0x1138>)
 8008778:	f7fb fa68 	bl	8003c4c <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800877c:	4884      	ldr	r0, [pc, #528]	; (8008990 <cppLoop+0x1138>)
 800877e:	f7fa fc95 	bl	80030ac <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008782:	4883      	ldr	r0, [pc, #524]	; (8008990 <cppLoop+0x1138>)
 8008784:	f7fb fd50 	bl	8004228 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008788:	f04f 32ff 	mov.w	r2, #4294967295
 800878c:	2100      	movs	r1, #0
 800878e:	487a      	ldr	r0, [pc, #488]	; (8008978 <cppLoop+0x1120>)
 8008790:	f7f9 fd38 	bl	8002204 <_ZN3LED2LREaa>
		}

		break;
 8008794:	f000 bfbf 	b.w	8009716 <cppLoop+0x1ebe>

	case 6:
		led.fullColor('R');
 8008798:	2152      	movs	r1, #82	; 0x52
 800879a:	4877      	ldr	r0, [pc, #476]	; (8008978 <cppLoop+0x1120>)
 800879c:	f7f9 fc76 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 80087a0:	f7f8 fc7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087a4:	2100      	movs	r1, #0
 80087a6:	2000      	movs	r0, #0
 80087a8:	f7f8 fc8a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80087ac:	4878      	ldr	r0, [pc, #480]	; (8008990 <cppLoop+0x1138>)
 80087ae:	f7fb fa7d 	bl	8003cac <_ZN9LineTrace15getMaxVelocity2Ev>
 80087b2:	ee10 3a10 	vmov	r3, s0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 fede 	bl	8000578 <__aeabi_f2d>
 80087bc:	4603      	mov	r3, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	461a      	mov	r2, r3
 80087c2:	4623      	mov	r3, r4
 80087c4:	486e      	ldr	r0, [pc, #440]	; (8008980 <cppLoop+0x1128>)
 80087c6:	f7f8 fca5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087ca:	2101      	movs	r1, #1
 80087cc:	2000      	movs	r0, #0
 80087ce:	f7f8 fc77 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80087d2:	486f      	ldr	r0, [pc, #444]	; (8008990 <cppLoop+0x1138>)
 80087d4:	f7fb fa8a 	bl	8003cec <_ZN9LineTrace15getMinVelocity2Ev>
 80087d8:	ee10 3a10 	vmov	r3, s0
 80087dc:	4618      	mov	r0, r3
 80087de:	f7f7 fecb 	bl	8000578 <__aeabi_f2d>
 80087e2:	4603      	mov	r3, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	461a      	mov	r2, r3
 80087e8:	4623      	mov	r3, r4
 80087ea:	486a      	ldr	r0, [pc, #424]	; (8008994 <cppLoop+0x113c>)
 80087ec:	f7f8 fc92 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80087f0:	4866      	ldr	r0, [pc, #408]	; (800898c <cppLoop+0x1134>)
 80087f2:	f7f9 fbe7 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d022      	beq.n	800884c <cppLoop+0xff4>
			led.LR(-1, 1);
 8008806:	2201      	movs	r2, #1
 8008808:	f04f 31ff 	mov.w	r1, #4294967295
 800880c:	485a      	ldr	r0, [pc, #360]	; (8008978 <cppLoop+0x1120>)
 800880e:	f7f9 fcf9 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008812:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008816:	f001 f8bb 	bl	8009990 <HAL_Delay>

			selector_vel2++;
 800881a:	4b5f      	ldr	r3, [pc, #380]	; (8008998 <cppLoop+0x1140>)
 800881c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008820:	b29b      	uxth	r3, r3
 8008822:	3301      	adds	r3, #1
 8008824:	b29b      	uxth	r3, r3
 8008826:	b21a      	sxth	r2, r3
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <cppLoop+0x1140>)
 800882a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 800882c:	4b5a      	ldr	r3, [pc, #360]	; (8008998 <cppLoop+0x1140>)
 800882e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008832:	2b01      	cmp	r3, #1
 8008834:	dd02      	ble.n	800883c <cppLoop+0xfe4>
 8008836:	4b58      	ldr	r3, [pc, #352]	; (8008998 <cppLoop+0x1140>)
 8008838:	2200      	movs	r2, #0
 800883a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800883c:	2200      	movs	r2, #0
 800883e:	f04f 31ff 	mov.w	r1, #4294967295
 8008842:	484d      	ldr	r0, [pc, #308]	; (8008978 <cppLoop+0x1120>)
 8008844:	f7f9 fcde 	bl	8002204 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008848:	f000 bf67 	b.w	800971a <cppLoop+0x1ec2>
		else if(joy_stick.getValue() == JOY_R){
 800884c:	484f      	ldr	r0, [pc, #316]	; (800898c <cppLoop+0x1134>)
 800884e:	f7f9 fbb9 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008852:	4603      	mov	r3, r0
 8008854:	2b10      	cmp	r3, #16
 8008856:	bf0c      	ite	eq
 8008858:	2301      	moveq	r3, #1
 800885a:	2300      	movne	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d03c      	beq.n	80088dc <cppLoop+0x1084>
			led.LR(-1, 1);
 8008862:	2201      	movs	r2, #1
 8008864:	f04f 31ff 	mov.w	r1, #4294967295
 8008868:	4843      	ldr	r0, [pc, #268]	; (8008978 <cppLoop+0x1120>)
 800886a:	f7f9 fccb 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800886e:	2064      	movs	r0, #100	; 0x64
 8008870:	f001 f88e 	bl	8009990 <HAL_Delay>
			if(selector_vel2 == 0)
 8008874:	4b48      	ldr	r3, [pc, #288]	; (8008998 <cppLoop+0x1140>)
 8008876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d113      	bne.n	80088a6 <cppLoop+0x104e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800887e:	4b3f      	ldr	r3, [pc, #252]	; (800897c <cppLoop+0x1124>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7f7 fe78 	bl	8000578 <__aeabi_f2d>
 8008888:	a339      	add	r3, pc, #228	; (adr r3, 8008970 <cppLoop+0x1118>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fd15 	bl	80002bc <__adddf3>
 8008892:	4603      	mov	r3, r0
 8008894:	460c      	mov	r4, r1
 8008896:	4618      	mov	r0, r3
 8008898:	4621      	mov	r1, r4
 800889a:	f7f8 f9bd 	bl	8000c18 <__aeabi_d2f>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b36      	ldr	r3, [pc, #216]	; (800897c <cppLoop+0x1124>)
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e012      	b.n	80088cc <cppLoop+0x1074>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <cppLoop+0x112c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f7 fe64 	bl	8000578 <__aeabi_f2d>
 80088b0:	a32f      	add	r3, pc, #188	; (adr r3, 8008970 <cppLoop+0x1118>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fd01 	bl	80002bc <__adddf3>
 80088ba:	4603      	mov	r3, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	4618      	mov	r0, r3
 80088c0:	4621      	mov	r1, r4
 80088c2:	f7f8 f9a9 	bl	8000c18 <__aeabi_d2f>
 80088c6:	4602      	mov	r2, r0
 80088c8:	4b2e      	ldr	r3, [pc, #184]	; (8008984 <cppLoop+0x112c>)
 80088ca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088cc:	2200      	movs	r2, #0
 80088ce:	f04f 31ff 	mov.w	r1, #4294967295
 80088d2:	4829      	ldr	r0, [pc, #164]	; (8008978 <cppLoop+0x1120>)
 80088d4:	f7f9 fc96 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80088d8:	f000 bf1f 	b.w	800971a <cppLoop+0x1ec2>
		else if(joy_stick.getValue() == JOY_L){
 80088dc:	482b      	ldr	r0, [pc, #172]	; (800898c <cppLoop+0x1134>)
 80088de:	f7f9 fb71 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	bf0c      	ite	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	2300      	movne	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d054      	beq.n	800899c <cppLoop+0x1144>
			led.LR(-1, 1);
 80088f2:	2201      	movs	r2, #1
 80088f4:	f04f 31ff 	mov.w	r1, #4294967295
 80088f8:	481f      	ldr	r0, [pc, #124]	; (8008978 <cppLoop+0x1120>)
 80088fa:	f7f9 fc83 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80088fe:	2064      	movs	r0, #100	; 0x64
 8008900:	f001 f846 	bl	8009990 <HAL_Delay>
			if(selector_vel2 == 0)
 8008904:	4b24      	ldr	r3, [pc, #144]	; (8008998 <cppLoop+0x1140>)
 8008906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d113      	bne.n	8008936 <cppLoop+0x10de>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800890e:	4b1b      	ldr	r3, [pc, #108]	; (800897c <cppLoop+0x1124>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7f7 fe30 	bl	8000578 <__aeabi_f2d>
 8008918:	a315      	add	r3, pc, #84	; (adr r3, 8008970 <cppLoop+0x1118>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fccb 	bl	80002b8 <__aeabi_dsub>
 8008922:	4603      	mov	r3, r0
 8008924:	460c      	mov	r4, r1
 8008926:	4618      	mov	r0, r3
 8008928:	4621      	mov	r1, r4
 800892a:	f7f8 f975 	bl	8000c18 <__aeabi_d2f>
 800892e:	4602      	mov	r2, r0
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <cppLoop+0x1124>)
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e012      	b.n	800895c <cppLoop+0x1104>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008936:	4b13      	ldr	r3, [pc, #76]	; (8008984 <cppLoop+0x112c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe1c 	bl	8000578 <__aeabi_f2d>
 8008940:	a30b      	add	r3, pc, #44	; (adr r3, 8008970 <cppLoop+0x1118>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fcb7 	bl	80002b8 <__aeabi_dsub>
 800894a:	4603      	mov	r3, r0
 800894c:	460c      	mov	r4, r1
 800894e:	4618      	mov	r0, r3
 8008950:	4621      	mov	r1, r4
 8008952:	f7f8 f961 	bl	8000c18 <__aeabi_d2f>
 8008956:	4602      	mov	r2, r0
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <cppLoop+0x112c>)
 800895a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800895c:	2200      	movs	r2, #0
 800895e:	f04f 31ff 	mov.w	r1, #4294967295
 8008962:	4805      	ldr	r0, [pc, #20]	; (8008978 <cppLoop+0x1120>)
 8008964:	f7f9 fc4e 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008968:	f000 bed7 	b.w	800971a <cppLoop+0x1ec2>
 800896c:	f3af 8000 	nop.w
 8008970:	9999999a 	.word	0x9999999a
 8008974:	3fb99999 	.word	0x3fb99999
 8008978:	200005c8 	.word	0x200005c8
 800897c:	200412ec 	.word	0x200412ec
 8008980:	08019d48 	.word	0x08019d48
 8008984:	200412fc 	.word	0x200412fc
 8008988:	08019d00 	.word	0x08019d00
 800898c:	200005bc 	.word	0x200005bc
 8008990:	2001bc10 	.word	0x2001bc10
 8008994:	08019d0c 	.word	0x08019d0c
 8008998:	200412a6 	.word	0x200412a6
		else if(joy_stick.getValue() == JOY_C){
 800899c:	48b4      	ldr	r0, [pc, #720]	; (8008c70 <cppLoop+0x1418>)
 800899e:	f7f9 fb11 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 86b3 	beq.w	800971a <cppLoop+0x1ec2>
			led.LR(-1, 1);
 80089b4:	2201      	movs	r2, #1
 80089b6:	f04f 31ff 	mov.w	r1, #4294967295
 80089ba:	48ae      	ldr	r0, [pc, #696]	; (8008c74 <cppLoop+0x141c>)
 80089bc:	f7f9 fc22 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089c4:	f000 ffe4 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80089c8:	2300      	movs	r3, #0
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4baa      	ldr	r3, [pc, #680]	; (8008c78 <cppLoop+0x1420>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	49aa      	ldr	r1, [pc, #680]	; (8008c7c <cppLoop+0x1424>)
 80089d2:	48ab      	ldr	r0, [pc, #684]	; (8008c80 <cppLoop+0x1428>)
 80089d4:	f7f8 fede 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80089d8:	2300      	movs	r3, #0
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4ba9      	ldr	r3, [pc, #676]	; (8008c84 <cppLoop+0x142c>)
 80089de:	2201      	movs	r2, #1
 80089e0:	49a9      	ldr	r1, [pc, #676]	; (8008c88 <cppLoop+0x1430>)
 80089e2:	48a7      	ldr	r0, [pc, #668]	; (8008c80 <cppLoop+0x1428>)
 80089e4:	f7f8 fed6 	bl	8001794 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80089e8:	4ba3      	ldr	r3, [pc, #652]	; (8008c78 <cppLoop+0x1420>)
 80089ea:	edd3 7a00 	vldr	s15, [r3]
 80089ee:	eeb0 0a67 	vmov.f32	s0, s15
 80089f2:	48a6      	ldr	r0, [pc, #664]	; (8008c8c <cppLoop+0x1434>)
 80089f4:	f7fb f90a 	bl	8003c0c <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80089f8:	4ba2      	ldr	r3, [pc, #648]	; (8008c84 <cppLoop+0x142c>)
 80089fa:	edd3 7a00 	vldr	s15, [r3]
 80089fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008a02:	48a2      	ldr	r0, [pc, #648]	; (8008c8c <cppLoop+0x1434>)
 8008a04:	f7fb f922 	bl	8003c4c <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0e:	4899      	ldr	r0, [pc, #612]	; (8008c74 <cppLoop+0x141c>)
 8008a10:	f7f9 fbf8 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008a14:	f000 be81 	b.w	800971a <cppLoop+0x1ec2>

	case 7:
		led.fullColor('W');
 8008a18:	2157      	movs	r1, #87	; 0x57
 8008a1a:	4896      	ldr	r0, [pc, #600]	; (8008c74 <cppLoop+0x141c>)
 8008a1c:	f7f9 fb36 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a20:	f7f8 fb3e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a24:	2100      	movs	r1, #0
 8008a26:	2000      	movs	r0, #0
 8008a28:	f7f8 fb4a 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008a2c:	4897      	ldr	r0, [pc, #604]	; (8008c8c <cppLoop+0x1434>)
 8008a2e:	f7fb f9a1 	bl	8003d74 <_ZN9LineTrace9getMaxAccEv>
 8008a32:	ee10 3a10 	vmov	r3, s0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f7 fd9e 	bl	8000578 <__aeabi_f2d>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	461a      	mov	r2, r3
 8008a42:	4623      	mov	r3, r4
 8008a44:	4892      	ldr	r0, [pc, #584]	; (8008c90 <cppLoop+0x1438>)
 8008a46:	f7f8 fb65 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f8 fb37 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008a52:	488e      	ldr	r0, [pc, #568]	; (8008c8c <cppLoop+0x1434>)
 8008a54:	f7fb f9c4 	bl	8003de0 <_ZN9LineTrace9getMaxDecEv>
 8008a58:	ee10 3a10 	vmov	r3, s0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7f7 fd8b 	bl	8000578 <__aeabi_f2d>
 8008a62:	4603      	mov	r3, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	461a      	mov	r2, r3
 8008a68:	4623      	mov	r3, r4
 8008a6a:	488a      	ldr	r0, [pc, #552]	; (8008c94 <cppLoop+0x143c>)
 8008a6c:	f7f8 fb52 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a70:	487f      	ldr	r0, [pc, #508]	; (8008c70 <cppLoop+0x1418>)
 8008a72:	f7f9 faa7 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2301      	moveq	r3, #1
 8008a7e:	2300      	movne	r3, #0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d022      	beq.n	8008acc <cppLoop+0x1274>
			led.LR(-1, 1);
 8008a86:	2201      	movs	r2, #1
 8008a88:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8c:	4879      	ldr	r0, [pc, #484]	; (8008c74 <cppLoop+0x141c>)
 8008a8e:	f7f9 fbb9 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a96:	f000 ff7b 	bl	8009990 <HAL_Delay>

			selector_acc++;
 8008a9a:	4b7f      	ldr	r3, [pc, #508]	; (8008c98 <cppLoop+0x1440>)
 8008a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	b21a      	sxth	r2, r3
 8008aa8:	4b7b      	ldr	r3, [pc, #492]	; (8008c98 <cppLoop+0x1440>)
 8008aaa:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008aac:	4b7a      	ldr	r3, [pc, #488]	; (8008c98 <cppLoop+0x1440>)
 8008aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	dd02      	ble.n	8008abc <cppLoop+0x1264>
 8008ab6:	4b78      	ldr	r3, [pc, #480]	; (8008c98 <cppLoop+0x1440>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008abc:	2200      	movs	r2, #0
 8008abe:	f04f 31ff 	mov.w	r1, #4294967295
 8008ac2:	486c      	ldr	r0, [pc, #432]	; (8008c74 <cppLoop+0x141c>)
 8008ac4:	f7f9 fb9e 	bl	8002204 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008ac8:	f000 be29 	b.w	800971e <cppLoop+0x1ec6>
		else if(joy_stick.getValue() == JOY_R){
 8008acc:	4868      	ldr	r0, [pc, #416]	; (8008c70 <cppLoop+0x1418>)
 8008ace:	f7f9 fa79 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	bf0c      	ite	eq
 8008ad8:	2301      	moveq	r3, #1
 8008ada:	2300      	movne	r3, #0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d03c      	beq.n	8008b5c <cppLoop+0x1304>
			led.LR(-1, 1);
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae8:	4862      	ldr	r0, [pc, #392]	; (8008c74 <cppLoop+0x141c>)
 8008aea:	f7f9 fb8b 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008aee:	2064      	movs	r0, #100	; 0x64
 8008af0:	f000 ff4e 	bl	8009990 <HAL_Delay>
			if(selector_acc == 0){
 8008af4:	4b68      	ldr	r3, [pc, #416]	; (8008c98 <cppLoop+0x1440>)
 8008af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d113      	bne.n	8008b26 <cppLoop+0x12ce>
				adj_acc = adj_acc + 0.1;
 8008afe:	4b67      	ldr	r3, [pc, #412]	; (8008c9c <cppLoop+0x1444>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f7 fd38 	bl	8000578 <__aeabi_f2d>
 8008b08:	a357      	add	r3, pc, #348	; (adr r3, 8008c68 <cppLoop+0x1410>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fbd5 	bl	80002bc <__adddf3>
 8008b12:	4603      	mov	r3, r0
 8008b14:	460c      	mov	r4, r1
 8008b16:	4618      	mov	r0, r3
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f7f8 f87d 	bl	8000c18 <__aeabi_d2f>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b5e      	ldr	r3, [pc, #376]	; (8008c9c <cppLoop+0x1444>)
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	e012      	b.n	8008b4c <cppLoop+0x12f4>
				adj_dec = adj_dec + 0.1;
 8008b26:	4b5e      	ldr	r3, [pc, #376]	; (8008ca0 <cppLoop+0x1448>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f7 fd24 	bl	8000578 <__aeabi_f2d>
 8008b30:	a34d      	add	r3, pc, #308	; (adr r3, 8008c68 <cppLoop+0x1410>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fbc1 	bl	80002bc <__adddf3>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	4618      	mov	r0, r3
 8008b40:	4621      	mov	r1, r4
 8008b42:	f7f8 f869 	bl	8000c18 <__aeabi_d2f>
 8008b46:	4602      	mov	r2, r0
 8008b48:	4b55      	ldr	r3, [pc, #340]	; (8008ca0 <cppLoop+0x1448>)
 8008b4a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b52:	4848      	ldr	r0, [pc, #288]	; (8008c74 <cppLoop+0x141c>)
 8008b54:	f7f9 fb56 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008b58:	f000 bde1 	b.w	800971e <cppLoop+0x1ec6>
		else if(joy_stick.getValue() == JOY_L){
 8008b5c:	4844      	ldr	r0, [pc, #272]	; (8008c70 <cppLoop+0x1418>)
 8008b5e:	f7f9 fa31 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d03c      	beq.n	8008bec <cppLoop+0x1394>
			led.LR(-1, 1);
 8008b72:	2201      	movs	r2, #1
 8008b74:	f04f 31ff 	mov.w	r1, #4294967295
 8008b78:	483e      	ldr	r0, [pc, #248]	; (8008c74 <cppLoop+0x141c>)
 8008b7a:	f7f9 fb43 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b7e:	2064      	movs	r0, #100	; 0x64
 8008b80:	f000 ff06 	bl	8009990 <HAL_Delay>
			if(selector_acc == 0){
 8008b84:	4b44      	ldr	r3, [pc, #272]	; (8008c98 <cppLoop+0x1440>)
 8008b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d113      	bne.n	8008bb6 <cppLoop+0x135e>
				adj_acc = adj_acc - 0.1;
 8008b8e:	4b43      	ldr	r3, [pc, #268]	; (8008c9c <cppLoop+0x1444>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f7 fcf0 	bl	8000578 <__aeabi_f2d>
 8008b98:	a333      	add	r3, pc, #204	; (adr r3, 8008c68 <cppLoop+0x1410>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb8b 	bl	80002b8 <__aeabi_dsub>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	4621      	mov	r1, r4
 8008baa:	f7f8 f835 	bl	8000c18 <__aeabi_d2f>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	4b3a      	ldr	r3, [pc, #232]	; (8008c9c <cppLoop+0x1444>)
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e012      	b.n	8008bdc <cppLoop+0x1384>
				adj_dec = adj_dec - 0.1;
 8008bb6:	4b3a      	ldr	r3, [pc, #232]	; (8008ca0 <cppLoop+0x1448>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f7 fcdc 	bl	8000578 <__aeabi_f2d>
 8008bc0:	a329      	add	r3, pc, #164	; (adr r3, 8008c68 <cppLoop+0x1410>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fb77 	bl	80002b8 <__aeabi_dsub>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	460c      	mov	r4, r1
 8008bce:	4618      	mov	r0, r3
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	f7f8 f821 	bl	8000c18 <__aeabi_d2f>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	4b31      	ldr	r3, [pc, #196]	; (8008ca0 <cppLoop+0x1448>)
 8008bda:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f04f 31ff 	mov.w	r1, #4294967295
 8008be2:	4824      	ldr	r0, [pc, #144]	; (8008c74 <cppLoop+0x141c>)
 8008be4:	f7f9 fb0e 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008be8:	f000 bd99 	b.w	800971e <cppLoop+0x1ec6>
		else if(joy_stick.getValue() == JOY_C){
 8008bec:	4820      	ldr	r0, [pc, #128]	; (8008c70 <cppLoop+0x1418>)
 8008bee:	f7f9 f9e9 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 858d 	beq.w	800971e <cppLoop+0x1ec6>
			led.LR(-1, 1);
 8008c04:	2201      	movs	r2, #1
 8008c06:	f04f 31ff 	mov.w	r1, #4294967295
 8008c0a:	481a      	ldr	r0, [pc, #104]	; (8008c74 <cppLoop+0x141c>)
 8008c0c:	f7f9 fafa 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c14:	f000 febc 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <cppLoop+0x1444>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4920      	ldr	r1, [pc, #128]	; (8008ca4 <cppLoop+0x144c>)
 8008c22:	4817      	ldr	r0, [pc, #92]	; (8008c80 <cppLoop+0x1428>)
 8008c24:	f7f8 fdb6 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <cppLoop+0x1448>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	491d      	ldr	r1, [pc, #116]	; (8008ca8 <cppLoop+0x1450>)
 8008c32:	4813      	ldr	r0, [pc, #76]	; (8008c80 <cppLoop+0x1428>)
 8008c34:	f7f8 fdae 	bl	8001794 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008c38:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <cppLoop+0x1444>)
 8008c3a:	edd3 7a00 	vldr	s15, [r3]
 8008c3e:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <cppLoop+0x1448>)
 8008c40:	ed93 7a00 	vldr	s14, [r3]
 8008c44:	eef0 0a47 	vmov.f32	s1, s14
 8008c48:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4c:	480f      	ldr	r0, [pc, #60]	; (8008c8c <cppLoop+0x1434>)
 8008c4e:	f7fb f85d 	bl	8003d0c <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008c52:	2200      	movs	r2, #0
 8008c54:	f04f 31ff 	mov.w	r1, #4294967295
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <cppLoop+0x141c>)
 8008c5a:	f7f9 fad3 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008c5e:	f000 bd5e 	b.w	800971e <cppLoop+0x1ec6>
 8008c62:	bf00      	nop
 8008c64:	f3af 8000 	nop.w
 8008c68:	9999999a 	.word	0x9999999a
 8008c6c:	3fb99999 	.word	0x3fb99999
 8008c70:	200005bc 	.word	0x200005bc
 8008c74:	200005c8 	.word	0x200005c8
 8008c78:	200412ec 	.word	0x200412ec
 8008c7c:	08019d54 	.word	0x08019d54
 8008c80:	08019cdc 	.word	0x08019cdc
 8008c84:	200412fc 	.word	0x200412fc
 8008c88:	08019d60 	.word	0x08019d60
 8008c8c:	2001bc10 	.word	0x2001bc10
 8008c90:	08019d6c 	.word	0x08019d6c
 8008c94:	08019d78 	.word	0x08019d78
 8008c98:	200412a0 	.word	0x200412a0
 8008c9c:	20041304 	.word	0x20041304
 8008ca0:	2004130c 	.word	0x2004130c
 8008ca4:	08019d84 	.word	0x08019d84
 8008ca8:	08019d8c 	.word	0x08019d8c

	case 8:
		led.fullColor('W');
 8008cac:	2157      	movs	r1, #87	; 0x57
 8008cae:	4894      	ldr	r0, [pc, #592]	; (8008f00 <cppLoop+0x16a8>)
 8008cb0:	f7f9 f9ec 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008cb4:	f7f8 f9f4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008cb8:	2100      	movs	r1, #0
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f7f8 fa00 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008cc0:	4890      	ldr	r0, [pc, #576]	; (8008f04 <cppLoop+0x16ac>)
 8008cc2:	f7fb f87b 	bl	8003dbc <_ZN9LineTrace10getMaxAcc2Ev>
 8008cc6:	ee10 3a10 	vmov	r3, s0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f7 fc54 	bl	8000578 <__aeabi_f2d>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	488b      	ldr	r0, [pc, #556]	; (8008f08 <cppLoop+0x16b0>)
 8008cda:	f7f8 fa1b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008cde:	2101      	movs	r1, #1
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f7f8 f9ed 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008ce6:	4887      	ldr	r0, [pc, #540]	; (8008f04 <cppLoop+0x16ac>)
 8008ce8:	f7fb f856 	bl	8003d98 <_ZN9LineTrace10getMaxDec2Ev>
 8008cec:	ee10 3a10 	vmov	r3, s0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f7 fc41 	bl	8000578 <__aeabi_f2d>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	4623      	mov	r3, r4
 8008cfe:	4883      	ldr	r0, [pc, #524]	; (8008f0c <cppLoop+0x16b4>)
 8008d00:	f7f8 fa08 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d04:	4882      	ldr	r0, [pc, #520]	; (8008f10 <cppLoop+0x16b8>)
 8008d06:	f7f9 f95d 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d022      	beq.n	8008d60 <cppLoop+0x1508>
			led.LR(-1, 1);
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d20:	4877      	ldr	r0, [pc, #476]	; (8008f00 <cppLoop+0x16a8>)
 8008d22:	f7f9 fa6f 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d2a:	f000 fe31 	bl	8009990 <HAL_Delay>

			selector_acc2++;
 8008d2e:	4b79      	ldr	r3, [pc, #484]	; (8008f14 <cppLoop+0x16bc>)
 8008d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3301      	adds	r3, #1
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	b21a      	sxth	r2, r3
 8008d3c:	4b75      	ldr	r3, [pc, #468]	; (8008f14 <cppLoop+0x16bc>)
 8008d3e:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008d40:	4b74      	ldr	r3, [pc, #464]	; (8008f14 <cppLoop+0x16bc>)
 8008d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	dd02      	ble.n	8008d50 <cppLoop+0x14f8>
 8008d4a:	4b72      	ldr	r3, [pc, #456]	; (8008f14 <cppLoop+0x16bc>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d50:	2200      	movs	r2, #0
 8008d52:	f04f 31ff 	mov.w	r1, #4294967295
 8008d56:	486a      	ldr	r0, [pc, #424]	; (8008f00 <cppLoop+0x16a8>)
 8008d58:	f7f9 fa54 	bl	8002204 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008d5c:	f000 bce1 	b.w	8009722 <cppLoop+0x1eca>
		else if(joy_stick.getValue() == JOY_R){
 8008d60:	486b      	ldr	r0, [pc, #428]	; (8008f10 <cppLoop+0x16b8>)
 8008d62:	f7f9 f92f 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	bf0c      	ite	eq
 8008d6c:	2301      	moveq	r3, #1
 8008d6e:	2300      	movne	r3, #0
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d03c      	beq.n	8008df0 <cppLoop+0x1598>
			led.LR(-1, 1);
 8008d76:	2201      	movs	r2, #1
 8008d78:	f04f 31ff 	mov.w	r1, #4294967295
 8008d7c:	4860      	ldr	r0, [pc, #384]	; (8008f00 <cppLoop+0x16a8>)
 8008d7e:	f7f9 fa41 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d82:	2064      	movs	r0, #100	; 0x64
 8008d84:	f000 fe04 	bl	8009990 <HAL_Delay>
			if(selector_acc2 == 0){
 8008d88:	4b62      	ldr	r3, [pc, #392]	; (8008f14 <cppLoop+0x16bc>)
 8008d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d113      	bne.n	8008dba <cppLoop+0x1562>
				adj_acc2 = adj_acc2 + 0.1;
 8008d92:	4b61      	ldr	r3, [pc, #388]	; (8008f18 <cppLoop+0x16c0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f7 fbee 	bl	8000578 <__aeabi_f2d>
 8008d9c:	a356      	add	r3, pc, #344	; (adr r3, 8008ef8 <cppLoop+0x16a0>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fa8b 	bl	80002bc <__adddf3>
 8008da6:	4603      	mov	r3, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	4618      	mov	r0, r3
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7f7 ff33 	bl	8000c18 <__aeabi_d2f>
 8008db2:	4602      	mov	r2, r0
 8008db4:	4b58      	ldr	r3, [pc, #352]	; (8008f18 <cppLoop+0x16c0>)
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	e012      	b.n	8008de0 <cppLoop+0x1588>
				adj_dec2 = adj_dec2 + 0.1;
 8008dba:	4b58      	ldr	r3, [pc, #352]	; (8008f1c <cppLoop+0x16c4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f7 fbda 	bl	8000578 <__aeabi_f2d>
 8008dc4:	a34c      	add	r3, pc, #304	; (adr r3, 8008ef8 <cppLoop+0x16a0>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fa77 	bl	80002bc <__adddf3>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7f7 ff1f 	bl	8000c18 <__aeabi_d2f>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4b4f      	ldr	r3, [pc, #316]	; (8008f1c <cppLoop+0x16c4>)
 8008dde:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008de0:	2200      	movs	r2, #0
 8008de2:	f04f 31ff 	mov.w	r1, #4294967295
 8008de6:	4846      	ldr	r0, [pc, #280]	; (8008f00 <cppLoop+0x16a8>)
 8008de8:	f7f9 fa0c 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008dec:	f000 bc99 	b.w	8009722 <cppLoop+0x1eca>
		else if(joy_stick.getValue() == JOY_L){
 8008df0:	4847      	ldr	r0, [pc, #284]	; (8008f10 <cppLoop+0x16b8>)
 8008df2:	f7f9 f8e7 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	bf0c      	ite	eq
 8008dfc:	2301      	moveq	r3, #1
 8008dfe:	2300      	movne	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d03c      	beq.n	8008e80 <cppLoop+0x1628>
			led.LR(-1, 1);
 8008e06:	2201      	movs	r2, #1
 8008e08:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0c:	483c      	ldr	r0, [pc, #240]	; (8008f00 <cppLoop+0x16a8>)
 8008e0e:	f7f9 f9f9 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e12:	2064      	movs	r0, #100	; 0x64
 8008e14:	f000 fdbc 	bl	8009990 <HAL_Delay>
			if(selector_acc2 == 0){
 8008e18:	4b3e      	ldr	r3, [pc, #248]	; (8008f14 <cppLoop+0x16bc>)
 8008e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d113      	bne.n	8008e4a <cppLoop+0x15f2>
				adj_acc2 = adj_acc2 - 0.1;
 8008e22:	4b3d      	ldr	r3, [pc, #244]	; (8008f18 <cppLoop+0x16c0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7f7 fba6 	bl	8000578 <__aeabi_f2d>
 8008e2c:	a332      	add	r3, pc, #200	; (adr r3, 8008ef8 <cppLoop+0x16a0>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 fa41 	bl	80002b8 <__aeabi_dsub>
 8008e36:	4603      	mov	r3, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	f7f7 feeb 	bl	8000c18 <__aeabi_d2f>
 8008e42:	4602      	mov	r2, r0
 8008e44:	4b34      	ldr	r3, [pc, #208]	; (8008f18 <cppLoop+0x16c0>)
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e012      	b.n	8008e70 <cppLoop+0x1618>
				adj_dec2 = adj_dec2 - 0.1;
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <cppLoop+0x16c4>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f7 fb92 	bl	8000578 <__aeabi_f2d>
 8008e54:	a328      	add	r3, pc, #160	; (adr r3, 8008ef8 <cppLoop+0x16a0>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 fa2d 	bl	80002b8 <__aeabi_dsub>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	4618      	mov	r0, r3
 8008e64:	4621      	mov	r1, r4
 8008e66:	f7f7 fed7 	bl	8000c18 <__aeabi_d2f>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b2b      	ldr	r3, [pc, #172]	; (8008f1c <cppLoop+0x16c4>)
 8008e6e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e70:	2200      	movs	r2, #0
 8008e72:	f04f 31ff 	mov.w	r1, #4294967295
 8008e76:	4822      	ldr	r0, [pc, #136]	; (8008f00 <cppLoop+0x16a8>)
 8008e78:	f7f9 f9c4 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008e7c:	f000 bc51 	b.w	8009722 <cppLoop+0x1eca>
		else if(joy_stick.getValue() == JOY_C){
 8008e80:	4823      	ldr	r0, [pc, #140]	; (8008f10 <cppLoop+0x16b8>)
 8008e82:	f7f9 f89f 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	bf0c      	ite	eq
 8008e8c:	2301      	moveq	r3, #1
 8008e8e:	2300      	movne	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 8445 	beq.w	8009722 <cppLoop+0x1eca>
			led.LR(-1, 1);
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e9e:	4818      	ldr	r0, [pc, #96]	; (8008f00 <cppLoop+0x16a8>)
 8008ea0:	f7f9 f9b0 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ea4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ea8:	f000 fd72 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008eac:	2300      	movs	r3, #0
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4b19      	ldr	r3, [pc, #100]	; (8008f18 <cppLoop+0x16c0>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	491a      	ldr	r1, [pc, #104]	; (8008f20 <cppLoop+0x16c8>)
 8008eb6:	481b      	ldr	r0, [pc, #108]	; (8008f24 <cppLoop+0x16cc>)
 8008eb8:	f7f8 fc6c 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <cppLoop+0x16c4>)
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	4918      	ldr	r1, [pc, #96]	; (8008f28 <cppLoop+0x16d0>)
 8008ec6:	4817      	ldr	r0, [pc, #92]	; (8008f24 <cppLoop+0x16cc>)
 8008ec8:	f7f8 fc64 	bl	8001794 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <cppLoop+0x16c0>)
 8008ece:	edd3 7a00 	vldr	s15, [r3]
 8008ed2:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <cppLoop+0x16c4>)
 8008ed4:	ed93 7a00 	vldr	s14, [r3]
 8008ed8:	eef0 0a47 	vmov.f32	s1, s14
 8008edc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ee0:	4808      	ldr	r0, [pc, #32]	; (8008f04 <cppLoop+0x16ac>)
 8008ee2:	f7fa ff2d 	bl	8003d40 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8008eec:	4804      	ldr	r0, [pc, #16]	; (8008f00 <cppLoop+0x16a8>)
 8008eee:	f7f9 f989 	bl	8002204 <_ZN3LED2LREaa>
		break;
 8008ef2:	f000 bc16 	b.w	8009722 <cppLoop+0x1eca>
 8008ef6:	bf00      	nop
 8008ef8:	9999999a 	.word	0x9999999a
 8008efc:	3fb99999 	.word	0x3fb99999
 8008f00:	200005c8 	.word	0x200005c8
 8008f04:	2001bc10 	.word	0x2001bc10
 8008f08:	08019d94 	.word	0x08019d94
 8008f0c:	08019da0 	.word	0x08019da0
 8008f10:	200005bc 	.word	0x200005bc
 8008f14:	200412a2 	.word	0x200412a2
 8008f18:	20041314 	.word	0x20041314
 8008f1c:	2004131c 	.word	0x2004131c
 8008f20:	08019dac 	.word	0x08019dac
 8008f24:	08019cdc 	.word	0x08019cdc
 8008f28:	08019db8 	.word	0x08019db8

	case 9:
		led.fullColor('W');
 8008f2c:	2157      	movs	r1, #87	; 0x57
 8008f2e:	48b2      	ldr	r0, [pc, #712]	; (80091f8 <cppLoop+0x19a0>)
 8008f30:	f7f9 f8ac 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f34:	f7f8 f8b4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f38:	2100      	movs	r1, #0
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	f7f8 f8c0 	bl	80010c0 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008f40:	48ae      	ldr	r0, [pc, #696]	; (80091fc <cppLoop+0x19a4>)
 8008f42:	f7fa fe16 	bl	8003b72 <_ZN9LineTrace9getKpFastEv>
 8008f46:	eeb0 7a40 	vmov.f32	s14, s0
 8008f4a:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009200 <cppLoop+0x19a8>
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	ee17 0a90 	vmov	r0, s15
 8008f56:	f7f7 fb0f 	bl	8000578 <__aeabi_f2d>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	461a      	mov	r2, r3
 8008f60:	4623      	mov	r3, r4
 8008f62:	48a8      	ldr	r0, [pc, #672]	; (8009204 <cppLoop+0x19ac>)
 8008f64:	f7f8 f8d6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f68:	2101      	movs	r1, #1
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	f7f8 f8a8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008f70:	48a2      	ldr	r0, [pc, #648]	; (80091fc <cppLoop+0x19a4>)
 8008f72:	f7fa fe0d 	bl	8003b90 <_ZN9LineTrace9getKiFastEv>
 8008f76:	eeb0 7a40 	vmov.f32	s14, s0
 8008f7a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8009208 <cppLoop+0x19b0>
 8008f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f82:	ee17 0a90 	vmov	r0, s15
 8008f86:	f7f7 faf7 	bl	8000578 <__aeabi_f2d>
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	460e      	mov	r6, r1
 8008f8e:	489b      	ldr	r0, [pc, #620]	; (80091fc <cppLoop+0x19a4>)
 8008f90:	f7fa fe0d 	bl	8003bae <_ZN9LineTrace9getKdFastEv>
 8008f94:	eeb0 7a40 	vmov.f32	s14, s0
 8008f98:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800920c <cppLoop+0x19b4>
 8008f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa0:	ee17 0a90 	vmov	r0, s15
 8008fa4:	f7f7 fae8 	bl	8000578 <__aeabi_f2d>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	e9cd 3400 	strd	r3, r4, [sp]
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	4633      	mov	r3, r6
 8008fb4:	4896      	ldr	r0, [pc, #600]	; (8009210 <cppLoop+0x19b8>)
 8008fb6:	f7f8 f8ad 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fba:	4896      	ldr	r0, [pc, #600]	; (8009214 <cppLoop+0x19bc>)
 8008fbc:	f7f9 f802 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	bf0c      	ite	eq
 8008fc6:	2301      	moveq	r3, #1
 8008fc8:	2300      	movne	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d021      	beq.n	8009014 <cppLoop+0x17bc>
			led.LR(-1, 1);
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8008fd6:	4888      	ldr	r0, [pc, #544]	; (80091f8 <cppLoop+0x19a0>)
 8008fd8:	f7f9 f914 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fe0:	f000 fcd6 	bl	8009990 <HAL_Delay>

			selector_fast++;
 8008fe4:	4b8c      	ldr	r3, [pc, #560]	; (8009218 <cppLoop+0x19c0>)
 8008fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3301      	adds	r3, #1
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	b21a      	sxth	r2, r3
 8008ff2:	4b89      	ldr	r3, [pc, #548]	; (8009218 <cppLoop+0x19c0>)
 8008ff4:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008ff6:	4b88      	ldr	r3, [pc, #544]	; (8009218 <cppLoop+0x19c0>)
 8008ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	dd02      	ble.n	8009006 <cppLoop+0x17ae>
 8009000:	4b85      	ldr	r3, [pc, #532]	; (8009218 <cppLoop+0x19c0>)
 8009002:	2200      	movs	r2, #0
 8009004:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009006:	2200      	movs	r2, #0
 8009008:	f04f 31ff 	mov.w	r1, #4294967295
 800900c:	487a      	ldr	r0, [pc, #488]	; (80091f8 <cppLoop+0x19a0>)
 800900e:	f7f9 f8f9 	bl	8002204 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8009012:	e388      	b.n	8009726 <cppLoop+0x1ece>
		else if(joy_stick.getValue() == JOY_R){
 8009014:	487f      	ldr	r0, [pc, #508]	; (8009214 <cppLoop+0x19bc>)
 8009016:	f7f8 ffd5 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 800901a:	4603      	mov	r3, r0
 800901c:	2b10      	cmp	r3, #16
 800901e:	bf0c      	ite	eq
 8009020:	2301      	moveq	r3, #1
 8009022:	2300      	movne	r3, #0
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d058      	beq.n	80090dc <cppLoop+0x1884>
			led.LR(-1, 1);
 800902a:	2201      	movs	r2, #1
 800902c:	f04f 31ff 	mov.w	r1, #4294967295
 8009030:	4871      	ldr	r0, [pc, #452]	; (80091f8 <cppLoop+0x19a0>)
 8009032:	f7f9 f8e7 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009036:	2064      	movs	r0, #100	; 0x64
 8009038:	f000 fcaa 	bl	8009990 <HAL_Delay>
			if(selector_fast == 0){
 800903c:	4b76      	ldr	r3, [pc, #472]	; (8009218 <cppLoop+0x19c0>)
 800903e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d113      	bne.n	800906e <cppLoop+0x1816>
				adj_kp_fast = adj_kp_fast + 0.00001;
 8009046:	4b75      	ldr	r3, [pc, #468]	; (800921c <cppLoop+0x19c4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 fa94 	bl	8000578 <__aeabi_f2d>
 8009050:	a363      	add	r3, pc, #396	; (adr r3, 80091e0 <cppLoop+0x1988>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 f931 	bl	80002bc <__adddf3>
 800905a:	4603      	mov	r3, r0
 800905c:	460c      	mov	r4, r1
 800905e:	4618      	mov	r0, r3
 8009060:	4621      	mov	r1, r4
 8009062:	f7f7 fdd9 	bl	8000c18 <__aeabi_d2f>
 8009066:	4602      	mov	r2, r0
 8009068:	4b6c      	ldr	r3, [pc, #432]	; (800921c <cppLoop+0x19c4>)
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	e02b      	b.n	80090c6 <cppLoop+0x186e>
			else if(selector_fast == 1){
 800906e:	4b6a      	ldr	r3, [pc, #424]	; (8009218 <cppLoop+0x19c0>)
 8009070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d113      	bne.n	80090a0 <cppLoop+0x1848>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8009078:	4b69      	ldr	r3, [pc, #420]	; (8009220 <cppLoop+0x19c8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4618      	mov	r0, r3
 800907e:	f7f7 fa7b 	bl	8000578 <__aeabi_f2d>
 8009082:	a359      	add	r3, pc, #356	; (adr r3, 80091e8 <cppLoop+0x1990>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f918 	bl	80002bc <__adddf3>
 800908c:	4603      	mov	r3, r0
 800908e:	460c      	mov	r4, r1
 8009090:	4618      	mov	r0, r3
 8009092:	4621      	mov	r1, r4
 8009094:	f7f7 fdc0 	bl	8000c18 <__aeabi_d2f>
 8009098:	4602      	mov	r2, r0
 800909a:	4b61      	ldr	r3, [pc, #388]	; (8009220 <cppLoop+0x19c8>)
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e012      	b.n	80090c6 <cppLoop+0x186e>
				adj_kd_fast = adj_kd_fast + 0.000001;
 80090a0:	4b60      	ldr	r3, [pc, #384]	; (8009224 <cppLoop+0x19cc>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f7 fa67 	bl	8000578 <__aeabi_f2d>
 80090aa:	a351      	add	r3, pc, #324	; (adr r3, 80091f0 <cppLoop+0x1998>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 f904 	bl	80002bc <__adddf3>
 80090b4:	4603      	mov	r3, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4618      	mov	r0, r3
 80090ba:	4621      	mov	r1, r4
 80090bc:	f7f7 fdac 	bl	8000c18 <__aeabi_d2f>
 80090c0:	4602      	mov	r2, r0
 80090c2:	4b58      	ldr	r3, [pc, #352]	; (8009224 <cppLoop+0x19cc>)
 80090c4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80090c6:	2152      	movs	r1, #82	; 0x52
 80090c8:	484b      	ldr	r0, [pc, #300]	; (80091f8 <cppLoop+0x19a0>)
 80090ca:	f7f8 ffdf 	bl	800208c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80090ce:	2200      	movs	r2, #0
 80090d0:	f04f 31ff 	mov.w	r1, #4294967295
 80090d4:	4848      	ldr	r0, [pc, #288]	; (80091f8 <cppLoop+0x19a0>)
 80090d6:	f7f9 f895 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80090da:	e324      	b.n	8009726 <cppLoop+0x1ece>
		else if(joy_stick.getValue() == JOY_L){
 80090dc:	484d      	ldr	r0, [pc, #308]	; (8009214 <cppLoop+0x19bc>)
 80090de:	f7f8 ff71 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	bf0c      	ite	eq
 80090e8:	2301      	moveq	r3, #1
 80090ea:	2300      	movne	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d058      	beq.n	80091a4 <cppLoop+0x194c>
			led.LR(-1, 1);
 80090f2:	2201      	movs	r2, #1
 80090f4:	f04f 31ff 	mov.w	r1, #4294967295
 80090f8:	483f      	ldr	r0, [pc, #252]	; (80091f8 <cppLoop+0x19a0>)
 80090fa:	f7f9 f883 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090fe:	2064      	movs	r0, #100	; 0x64
 8009100:	f000 fc46 	bl	8009990 <HAL_Delay>
			if(selector_fast == 0){
 8009104:	4b44      	ldr	r3, [pc, #272]	; (8009218 <cppLoop+0x19c0>)
 8009106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d113      	bne.n	8009136 <cppLoop+0x18de>
				adj_kp_fast = adj_kp_fast - 0.00001;
 800910e:	4b43      	ldr	r3, [pc, #268]	; (800921c <cppLoop+0x19c4>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f7f7 fa30 	bl	8000578 <__aeabi_f2d>
 8009118:	a331      	add	r3, pc, #196	; (adr r3, 80091e0 <cppLoop+0x1988>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 f8cb 	bl	80002b8 <__aeabi_dsub>
 8009122:	4603      	mov	r3, r0
 8009124:	460c      	mov	r4, r1
 8009126:	4618      	mov	r0, r3
 8009128:	4621      	mov	r1, r4
 800912a:	f7f7 fd75 	bl	8000c18 <__aeabi_d2f>
 800912e:	4602      	mov	r2, r0
 8009130:	4b3a      	ldr	r3, [pc, #232]	; (800921c <cppLoop+0x19c4>)
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e02b      	b.n	800918e <cppLoop+0x1936>
			else if(selector_fast == 1){
 8009136:	4b38      	ldr	r3, [pc, #224]	; (8009218 <cppLoop+0x19c0>)
 8009138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d113      	bne.n	8009168 <cppLoop+0x1910>
				adj_ki_fast = adj_ki_fast - 0.0001;
 8009140:	4b37      	ldr	r3, [pc, #220]	; (8009220 <cppLoop+0x19c8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f7f7 fa17 	bl	8000578 <__aeabi_f2d>
 800914a:	a327      	add	r3, pc, #156	; (adr r3, 80091e8 <cppLoop+0x1990>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 f8b2 	bl	80002b8 <__aeabi_dsub>
 8009154:	4603      	mov	r3, r0
 8009156:	460c      	mov	r4, r1
 8009158:	4618      	mov	r0, r3
 800915a:	4621      	mov	r1, r4
 800915c:	f7f7 fd5c 	bl	8000c18 <__aeabi_d2f>
 8009160:	4602      	mov	r2, r0
 8009162:	4b2f      	ldr	r3, [pc, #188]	; (8009220 <cppLoop+0x19c8>)
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	e012      	b.n	800918e <cppLoop+0x1936>
				adj_kd_fast = adj_kd_fast - 0.000001;
 8009168:	4b2e      	ldr	r3, [pc, #184]	; (8009224 <cppLoop+0x19cc>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f7f7 fa03 	bl	8000578 <__aeabi_f2d>
 8009172:	a31f      	add	r3, pc, #124	; (adr r3, 80091f0 <cppLoop+0x1998>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 f89e 	bl	80002b8 <__aeabi_dsub>
 800917c:	4603      	mov	r3, r0
 800917e:	460c      	mov	r4, r1
 8009180:	4618      	mov	r0, r3
 8009182:	4621      	mov	r1, r4
 8009184:	f7f7 fd48 	bl	8000c18 <__aeabi_d2f>
 8009188:	4602      	mov	r2, r0
 800918a:	4b26      	ldr	r3, [pc, #152]	; (8009224 <cppLoop+0x19cc>)
 800918c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800918e:	2152      	movs	r1, #82	; 0x52
 8009190:	4819      	ldr	r0, [pc, #100]	; (80091f8 <cppLoop+0x19a0>)
 8009192:	f7f8 ff7b 	bl	800208c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009196:	2200      	movs	r2, #0
 8009198:	f04f 31ff 	mov.w	r1, #4294967295
 800919c:	4816      	ldr	r0, [pc, #88]	; (80091f8 <cppLoop+0x19a0>)
 800919e:	f7f9 f831 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80091a2:	e2c0      	b.n	8009726 <cppLoop+0x1ece>
		else if(joy_stick.getValue() == JOY_D){
 80091a4:	481b      	ldr	r0, [pc, #108]	; (8009214 <cppLoop+0x19bc>)
 80091a6:	f7f8 ff0d 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	bf0c      	ite	eq
 80091b0:	2301      	moveq	r3, #1
 80091b2:	2300      	movne	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d036      	beq.n	8009228 <cppLoop+0x19d0>
			led.LR(-1, 1);
 80091ba:	2201      	movs	r2, #1
 80091bc:	f04f 31ff 	mov.w	r1, #4294967295
 80091c0:	480d      	ldr	r0, [pc, #52]	; (80091f8 <cppLoop+0x19a0>)
 80091c2:	f7f9 f81f 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091ca:	f000 fbe1 	bl	8009990 <HAL_Delay>
			led.LR(-1, 0);
 80091ce:	2200      	movs	r2, #0
 80091d0:	f04f 31ff 	mov.w	r1, #4294967295
 80091d4:	4808      	ldr	r0, [pc, #32]	; (80091f8 <cppLoop+0x19a0>)
 80091d6:	f7f9 f815 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80091da:	e2a4      	b.n	8009726 <cppLoop+0x1ece>
 80091dc:	f3af 8000 	nop.w
 80091e0:	88e368f1 	.word	0x88e368f1
 80091e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80091e8:	eb1c432d 	.word	0xeb1c432d
 80091ec:	3f1a36e2 	.word	0x3f1a36e2
 80091f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80091f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80091f8:	200005c8 	.word	0x200005c8
 80091fc:	2001bc10 	.word	0x2001bc10
 8009200:	447a0000 	.word	0x447a0000
 8009204:	08019dc4 	.word	0x08019dc4
 8009208:	42c80000 	.word	0x42c80000
 800920c:	461c4000 	.word	0x461c4000
 8009210:	08019cc4 	.word	0x08019cc4
 8009214:	200005bc 	.word	0x200005bc
 8009218:	200412a8 	.word	0x200412a8
 800921c:	200412c4 	.word	0x200412c4
 8009220:	200412cc 	.word	0x200412cc
 8009224:	200412d4 	.word	0x200412d4
		else if(joy_stick.getValue() == JOY_C){
 8009228:	48bb      	ldr	r0, [pc, #748]	; (8009518 <cppLoop+0x1cc0>)
 800922a:	f7f8 fecb 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 800922e:	4603      	mov	r3, r0
 8009230:	2b02      	cmp	r3, #2
 8009232:	bf0c      	ite	eq
 8009234:	2301      	moveq	r3, #1
 8009236:	2300      	movne	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8273 	beq.w	8009726 <cppLoop+0x1ece>
			led.LR(-1, 1);
 8009240:	2201      	movs	r2, #1
 8009242:	f04f 31ff 	mov.w	r1, #4294967295
 8009246:	48b5      	ldr	r0, [pc, #724]	; (800951c <cppLoop+0x1cc4>)
 8009248:	f7f8 ffdc 	bl	8002204 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800924c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009250:	f000 fb9e 	bl	8009990 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 8009254:	2300      	movs	r3, #0
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	4bb1      	ldr	r3, [pc, #708]	; (8009520 <cppLoop+0x1cc8>)
 800925a:	2201      	movs	r2, #1
 800925c:	49b1      	ldr	r1, [pc, #708]	; (8009524 <cppLoop+0x1ccc>)
 800925e:	48b2      	ldr	r0, [pc, #712]	; (8009528 <cppLoop+0x1cd0>)
 8009260:	f7f8 fa98 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 8009264:	2300      	movs	r3, #0
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	4bb0      	ldr	r3, [pc, #704]	; (800952c <cppLoop+0x1cd4>)
 800926a:	2201      	movs	r2, #1
 800926c:	49b0      	ldr	r1, [pc, #704]	; (8009530 <cppLoop+0x1cd8>)
 800926e:	48ae      	ldr	r0, [pc, #696]	; (8009528 <cppLoop+0x1cd0>)
 8009270:	f7f8 fa90 	bl	8001794 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 8009274:	2300      	movs	r3, #0
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4bae      	ldr	r3, [pc, #696]	; (8009534 <cppLoop+0x1cdc>)
 800927a:	2201      	movs	r2, #1
 800927c:	49ae      	ldr	r1, [pc, #696]	; (8009538 <cppLoop+0x1ce0>)
 800927e:	48aa      	ldr	r0, [pc, #680]	; (8009528 <cppLoop+0x1cd0>)
 8009280:	f7f8 fa88 	bl	8001794 <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 8009284:	4ba6      	ldr	r3, [pc, #664]	; (8009520 <cppLoop+0x1cc8>)
 8009286:	edd3 7a00 	vldr	s15, [r3]
 800928a:	4ba8      	ldr	r3, [pc, #672]	; (800952c <cppLoop+0x1cd4>)
 800928c:	ed93 7a00 	vldr	s14, [r3]
 8009290:	4ba8      	ldr	r3, [pc, #672]	; (8009534 <cppLoop+0x1cdc>)
 8009292:	edd3 6a00 	vldr	s13, [r3]
 8009296:	eeb0 1a66 	vmov.f32	s2, s13
 800929a:	eef0 0a47 	vmov.f32	s1, s14
 800929e:	eeb0 0a67 	vmov.f32	s0, s15
 80092a2:	48a6      	ldr	r0, [pc, #664]	; (800953c <cppLoop+0x1ce4>)
 80092a4:	f7fa fc1f 	bl	8003ae6 <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 80092a8:	2200      	movs	r2, #0
 80092aa:	f04f 31ff 	mov.w	r1, #4294967295
 80092ae:	489b      	ldr	r0, [pc, #620]	; (800951c <cppLoop+0x1cc4>)
 80092b0:	f7f8 ffa8 	bl	8002204 <_ZN3LED2LREaa>
		break;
 80092b4:	e237      	b.n	8009726 <cppLoop+0x1ece>

	case 10:
		led.fullColor('~');
 80092b6:	217e      	movs	r1, #126	; 0x7e
 80092b8:	4898      	ldr	r0, [pc, #608]	; (800951c <cppLoop+0x1cc4>)
 80092ba:	f7f8 fee7 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 80092be:	f7f7 feef 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092c2:	2100      	movs	r1, #0
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7f7 fefb 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80092ca:	489d      	ldr	r0, [pc, #628]	; (8009540 <cppLoop+0x1ce8>)
 80092cc:	f7f7 ff22 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092d0:	2101      	movs	r1, #1
 80092d2:	2000      	movs	r0, #0
 80092d4:	f7f7 fef4 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80092d8:	489a      	ldr	r0, [pc, #616]	; (8009544 <cppLoop+0x1cec>)
 80092da:	f7f7 ff1b 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80092de:	488e      	ldr	r0, [pc, #568]	; (8009518 <cppLoop+0x1cc0>)
 80092e0:	f7f8 fe70 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	bf0c      	ite	eq
 80092ea:	2301      	moveq	r3, #1
 80092ec:	2300      	movne	r3, #0
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 821a 	beq.w	800972a <cppLoop+0x1ed2>
			HAL_Delay(500);
 80092f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092fa:	f000 fb49 	bl	8009990 <HAL_Delay>
			led.LR(-1, 1);
 80092fe:	2201      	movs	r2, #1
 8009300:	f04f 31ff 	mov.w	r1, #4294967295
 8009304:	4885      	ldr	r0, [pc, #532]	; (800951c <cppLoop+0x1cc4>)
 8009306:	f7f8 ff7d 	bl	8002204 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800930a:	2102      	movs	r1, #2
 800930c:	488b      	ldr	r0, [pc, #556]	; (800953c <cppLoop+0x1ce4>)
 800930e:	f7fb f899 	bl	8004444 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009312:	4b8d      	ldr	r3, [pc, #564]	; (8009548 <cppLoop+0x1cf0>)
 8009314:	edd3 7a00 	vldr	s15, [r3]
 8009318:	eeb0 0a67 	vmov.f32	s0, s15
 800931c:	4887      	ldr	r0, [pc, #540]	; (800953c <cppLoop+0x1ce4>)
 800931e:	f7fa fc55 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009322:	4b89      	ldr	r3, [pc, #548]	; (8009548 <cppLoop+0x1cf0>)
 8009324:	edd3 7a00 	vldr	s15, [r3]
 8009328:	eeb0 0a67 	vmov.f32	s0, s15
 800932c:	4883      	ldr	r0, [pc, #524]	; (800953c <cppLoop+0x1ce4>)
 800932e:	f7fa fc5d 	bl	8003bec <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009332:	4b85      	ldr	r3, [pc, #532]	; (8009548 <cppLoop+0x1cf0>)
 8009334:	edd3 7a00 	vldr	s15, [r3]
 8009338:	eeb0 0a67 	vmov.f32	s0, s15
 800933c:	487f      	ldr	r0, [pc, #508]	; (800953c <cppLoop+0x1ce4>)
 800933e:	f7fa fc75 	bl	8003c2c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009342:	487e      	ldr	r0, [pc, #504]	; (800953c <cppLoop+0x1ce4>)
 8009344:	f7f9 ff80 	bl	8003248 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009348:	2200      	movs	r2, #0
 800934a:	f04f 31ff 	mov.w	r1, #4294967295
 800934e:	4873      	ldr	r0, [pc, #460]	; (800951c <cppLoop+0x1cc4>)
 8009350:	f7f8 ff58 	bl	8002204 <_ZN3LED2LREaa>
		}

		break;
 8009354:	e1e9      	b.n	800972a <cppLoop+0x1ed2>

	case 11:
		led.fullColor('~');
 8009356:	217e      	movs	r1, #126	; 0x7e
 8009358:	4870      	ldr	r0, [pc, #448]	; (800951c <cppLoop+0x1cc4>)
 800935a:	f7f8 fe97 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 800935e:	f7f7 fe9f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009362:	2100      	movs	r1, #0
 8009364:	2000      	movs	r0, #0
 8009366:	f7f7 feab 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 800936a:	4878      	ldr	r0, [pc, #480]	; (800954c <cppLoop+0x1cf4>)
 800936c:	f7f7 fed2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009370:	2101      	movs	r1, #1
 8009372:	2000      	movs	r0, #0
 8009374:	f7f7 fea4 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009378:	4875      	ldr	r0, [pc, #468]	; (8009550 <cppLoop+0x1cf8>)
 800937a:	f7f7 fecb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800937e:	4866      	ldr	r0, [pc, #408]	; (8009518 <cppLoop+0x1cc0>)
 8009380:	f7f8 fe20 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8009384:	4603      	mov	r3, r0
 8009386:	2b02      	cmp	r3, #2
 8009388:	bf0c      	ite	eq
 800938a:	2301      	moveq	r3, #1
 800938c:	2300      	movne	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 81cc 	beq.w	800972e <cppLoop+0x1ed6>
			HAL_Delay(1000);
 8009396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800939a:	f000 faf9 	bl	8009990 <HAL_Delay>
			led.LR(-1, 1);
 800939e:	2201      	movs	r2, #1
 80093a0:	f04f 31ff 	mov.w	r1, #4294967295
 80093a4:	485d      	ldr	r0, [pc, #372]	; (800951c <cppLoop+0x1cc4>)
 80093a6:	f7f8 ff2d 	bl	8002204 <_ZN3LED2LREaa>

			esc.on(0.5, 0.5, 0.5, 0.5);
 80093aa:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80093ae:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80093b2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80093b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80093ba:	4866      	ldr	r0, [pc, #408]	; (8009554 <cppLoop+0x1cfc>)
 80093bc:	f7f7 ff48 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(2000);
 80093c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80093c4:	f000 fae4 	bl	8009990 <HAL_Delay>
			esc.off();
 80093c8:	4862      	ldr	r0, [pc, #392]	; (8009554 <cppLoop+0x1cfc>)
 80093ca:	f7f7 ffdb 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80093ce:	2200      	movs	r2, #0
 80093d0:	f04f 31ff 	mov.w	r1, #4294967295
 80093d4:	4851      	ldr	r0, [pc, #324]	; (800951c <cppLoop+0x1cc4>)
 80093d6:	f7f8 ff15 	bl	8002204 <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 80093da:	e1a8      	b.n	800972e <cppLoop+0x1ed6>

	case 12:
		led.fullColor('~');
 80093dc:	217e      	movs	r1, #126	; 0x7e
 80093de:	484f      	ldr	r0, [pc, #316]	; (800951c <cppLoop+0x1cc4>)
 80093e0:	f7f8 fe54 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 80093e4:	f7f7 fe5c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093e8:	2100      	movs	r1, #0
 80093ea:	2000      	movs	r0, #0
 80093ec:	f7f7 fe68 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80093f0:	4859      	ldr	r0, [pc, #356]	; (8009558 <cppLoop+0x1d00>)
 80093f2:	f7f7 fe8f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80093f6:	2101      	movs	r1, #1
 80093f8:	2000      	movs	r0, #0
 80093fa:	f7f7 fe61 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80093fe:	4857      	ldr	r0, [pc, #348]	; (800955c <cppLoop+0x1d04>)
 8009400:	f7f7 fe88 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009404:	4844      	ldr	r0, [pc, #272]	; (8009518 <cppLoop+0x1cc0>)
 8009406:	f7f8 fddd 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 800940a:	4603      	mov	r3, r0
 800940c:	2b02      	cmp	r3, #2
 800940e:	bf0c      	ite	eq
 8009410:	2301      	moveq	r3, #1
 8009412:	2300      	movne	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 818b 	beq.w	8009732 <cppLoop+0x1eda>
			HAL_Delay(1500);
 800941c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009420:	f000 fab6 	bl	8009990 <HAL_Delay>
			led.LR(-1, 1);
 8009424:	2201      	movs	r2, #1
 8009426:	f04f 31ff 	mov.w	r1, #4294967295
 800942a:	483c      	ldr	r0, [pc, #240]	; (800951c <cppLoop+0x1cc4>)
 800942c:	f7f8 feea 	bl	8002204 <_ZN3LED2LREaa>

			logger.start();
 8009430:	484b      	ldr	r0, [pc, #300]	; (8009560 <cppLoop+0x1d08>)
 8009432:	f7fb fbf9 	bl	8004c28 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009436:	484b      	ldr	r0, [pc, #300]	; (8009564 <cppLoop+0x1d0c>)
 8009438:	f7fc fb77 	bl	8005b2a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 800943c:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8009568 <cppLoop+0x1d10>
 8009440:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800956c <cppLoop+0x1d14>
 8009444:	4847      	ldr	r0, [pc, #284]	; (8009564 <cppLoop+0x1d0c>)
 8009446:	f7fc fb03 	bl	8005a50 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800944a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800944e:	f000 fa9f 	bl	8009990 <HAL_Delay>

			logger.stop();
 8009452:	4843      	ldr	r0, [pc, #268]	; (8009560 <cppLoop+0x1d08>)
 8009454:	f7fb fbf9 	bl	8004c4a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009458:	4842      	ldr	r0, [pc, #264]	; (8009564 <cppLoop+0x1d0c>)
 800945a:	f7fc fb79 	bl	8005b50 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800945e:	4a44      	ldr	r2, [pc, #272]	; (8009570 <cppLoop+0x1d18>)
 8009460:	4944      	ldr	r1, [pc, #272]	; (8009574 <cppLoop+0x1d1c>)
 8009462:	483f      	ldr	r0, [pc, #252]	; (8009560 <cppLoop+0x1d08>)
 8009464:	f7fb faed 	bl	8004a42 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009468:	2200      	movs	r2, #0
 800946a:	f04f 31ff 	mov.w	r1, #4294967295
 800946e:	482b      	ldr	r0, [pc, #172]	; (800951c <cppLoop+0x1cc4>)
 8009470:	f7f8 fec8 	bl	8002204 <_ZN3LED2LREaa>
		}
		break;
 8009474:	e15d      	b.n	8009732 <cppLoop+0x1eda>

	case 13:

		led.fullColor('~');
 8009476:	217e      	movs	r1, #126	; 0x7e
 8009478:	4828      	ldr	r0, [pc, #160]	; (800951c <cppLoop+0x1cc4>)
 800947a:	f7f8 fe07 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 800947e:	f7f7 fe0f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009482:	2100      	movs	r1, #0
 8009484:	2000      	movs	r0, #0
 8009486:	f7f7 fe1b 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 800948a:	483b      	ldr	r0, [pc, #236]	; (8009578 <cppLoop+0x1d20>)
 800948c:	f7f7 fe42 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009490:	2101      	movs	r1, #1
 8009492:	2000      	movs	r0, #0
 8009494:	f7f7 fe14 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8009498:	4838      	ldr	r0, [pc, #224]	; (800957c <cppLoop+0x1d24>)
 800949a:	f7f7 fe3b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800949e:	481e      	ldr	r0, [pc, #120]	; (8009518 <cppLoop+0x1cc0>)
 80094a0:	f7f8 fd90 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	bf0c      	ite	eq
 80094aa:	2301      	moveq	r3, #1
 80094ac:	2300      	movne	r3, #0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 8140 	beq.w	8009736 <cppLoop+0x1ede>
			HAL_Delay(500);
 80094b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094ba:	f000 fa69 	bl	8009990 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 80094be:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009580 <cppLoop+0x1d28>
 80094c2:	481e      	ldr	r0, [pc, #120]	; (800953c <cppLoop+0x1ce4>)
 80094c4:	f7fa fb82 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80094c8:	f04f 32ff 	mov.w	r2, #4294967295
 80094cc:	2101      	movs	r1, #1
 80094ce:	4813      	ldr	r0, [pc, #76]	; (800951c <cppLoop+0x1cc4>)
 80094d0:	f7f8 fe98 	bl	8002204 <_ZN3LED2LREaa>

			logger.resetIdx();
 80094d4:	4822      	ldr	r0, [pc, #136]	; (8009560 <cppLoop+0x1d08>)
 80094d6:	f7fb fb8f 	bl	8004bf8 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 80094da:	2100      	movs	r1, #0
 80094dc:	4817      	ldr	r0, [pc, #92]	; (800953c <cppLoop+0x1ce4>)
 80094de:	f7fa ffb1 	bl	8004444 <_ZN9LineTrace7setModeEs>
			logger.start();
 80094e2:	481f      	ldr	r0, [pc, #124]	; (8009560 <cppLoop+0x1d08>)
 80094e4:	f7fb fba0 	bl	8004c28 <_ZN6Logger5startEv>
			line_trace.running();
 80094e8:	4814      	ldr	r0, [pc, #80]	; (800953c <cppLoop+0x1ce4>)
 80094ea:	f7fa fe9d 	bl	8004228 <_ZN9LineTrace7runningEv>
			logger.stop();
 80094ee:	481c      	ldr	r0, [pc, #112]	; (8009560 <cppLoop+0x1d08>)
 80094f0:	f7fb fbab 	bl	8004c4a <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 80094f4:	4a23      	ldr	r2, [pc, #140]	; (8009584 <cppLoop+0x1d2c>)
 80094f6:	4924      	ldr	r1, [pc, #144]	; (8009588 <cppLoop+0x1d30>)
 80094f8:	4819      	ldr	r0, [pc, #100]	; (8009560 <cppLoop+0x1d08>)
 80094fa:	f7fb faa2 	bl	8004a42 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 80094fe:	4a23      	ldr	r2, [pc, #140]	; (800958c <cppLoop+0x1d34>)
 8009500:	4921      	ldr	r1, [pc, #132]	; (8009588 <cppLoop+0x1d30>)
 8009502:	4817      	ldr	r0, [pc, #92]	; (8009560 <cppLoop+0x1d08>)
 8009504:	f7fb fab1 	bl	8004a6a <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	2100      	movs	r1, #0
 800950e:	4803      	ldr	r0, [pc, #12]	; (800951c <cppLoop+0x1cc4>)
 8009510:	f7f8 fe78 	bl	8002204 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009514:	e10f      	b.n	8009736 <cppLoop+0x1ede>
 8009516:	bf00      	nop
 8009518:	200005bc 	.word	0x200005bc
 800951c:	200005c8 	.word	0x200005c8
 8009520:	200412c4 	.word	0x200412c4
 8009524:	08019dd0 	.word	0x08019dd0
 8009528:	08019cdc 	.word	0x08019cdc
 800952c:	200412cc 	.word	0x200412cc
 8009530:	08019ddc 	.word	0x08019ddc
 8009534:	200412d4 	.word	0x200412d4
 8009538:	08019de8 	.word	0x08019de8
 800953c:	2001bc10 	.word	0x2001bc10
 8009540:	08019df4 	.word	0x08019df4
 8009544:	08019e00 	.word	0x08019e00
 8009548:	200412ec 	.word	0x200412ec
 800954c:	08019e0c 	.word	0x08019e0c
 8009550:	08019e10 	.word	0x08019e10
 8009554:	20041298 	.word	0x20041298
 8009558:	08019e18 	.word	0x08019e18
 800955c:	08019e1c 	.word	0x08019e1c
 8009560:	200005ec 	.word	0x200005ec
 8009564:	2001bb94 	.word	0x2001bb94
 8009568:	4048f5c3 	.word	0x4048f5c3
 800956c:	00000000 	.word	0x00000000
 8009570:	08019e28 	.word	0x08019e28
 8009574:	08019e34 	.word	0x08019e34
 8009578:	08019e40 	.word	0x08019e40
 800957c:	08019e48 	.word	0x08019e48
 8009580:	3e99999a 	.word	0x3e99999a
 8009584:	08019e50 	.word	0x08019e50
 8009588:	08019e5c 	.word	0x08019e5c
 800958c:	08019e68 	.word	0x08019e68

	case 14:
		led.fullColor('W');
 8009590:	2157      	movs	r1, #87	; 0x57
 8009592:	486f      	ldr	r0, [pc, #444]	; (8009750 <cppLoop+0x1ef8>)
 8009594:	f7f8 fd7a 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009598:	f7f7 fd82 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800959c:	2100      	movs	r1, #0
 800959e:	2000      	movs	r0, #0
 80095a0:	f7f7 fd8e 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80095a4:	486b      	ldr	r0, [pc, #428]	; (8009754 <cppLoop+0x1efc>)
 80095a6:	f7f7 fdb5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095aa:	2101      	movs	r1, #1
 80095ac:	2000      	movs	r0, #0
 80095ae:	f7f7 fd87 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80095b2:	4b69      	ldr	r3, [pc, #420]	; (8009758 <cppLoop+0x1f00>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f6 ffde 	bl	8000578 <__aeabi_f2d>
 80095bc:	4603      	mov	r3, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	461a      	mov	r2, r3
 80095c2:	4623      	mov	r3, r4
 80095c4:	4865      	ldr	r0, [pc, #404]	; (800975c <cppLoop+0x1f04>)
 80095c6:	f7f7 fda5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095ca:	4865      	ldr	r0, [pc, #404]	; (8009760 <cppLoop+0x1f08>)
 80095cc:	f7f8 fcfa 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	bf0c      	ite	eq
 80095d6:	2301      	moveq	r3, #1
 80095d8:	2300      	movne	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80ac 	beq.w	800973a <cppLoop+0x1ee2>
			HAL_Delay(500);
 80095e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095e6:	f000 f9d3 	bl	8009990 <HAL_Delay>

			led.LR(1, -1);
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295
 80095ee:	2101      	movs	r1, #1
 80095f0:	4857      	ldr	r0, [pc, #348]	; (8009750 <cppLoop+0x1ef8>)
 80095f2:	f7f8 fe07 	bl	8002204 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80095f6:	2102      	movs	r1, #2
 80095f8:	485a      	ldr	r0, [pc, #360]	; (8009764 <cppLoop+0x1f0c>)
 80095fa:	f7fa ff23 	bl	8004444 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80095fe:	4b5a      	ldr	r3, [pc, #360]	; (8009768 <cppLoop+0x1f10>)
 8009600:	edd3 7a00 	vldr	s15, [r3]
 8009604:	eeb0 0a67 	vmov.f32	s0, s15
 8009608:	4856      	ldr	r0, [pc, #344]	; (8009764 <cppLoop+0x1f0c>)
 800960a:	f7fa fadf 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800960e:	4b52      	ldr	r3, [pc, #328]	; (8009758 <cppLoop+0x1f00>)
 8009610:	edd3 7a00 	vldr	s15, [r3]
 8009614:	eeb0 0a67 	vmov.f32	s0, s15
 8009618:	4852      	ldr	r0, [pc, #328]	; (8009764 <cppLoop+0x1f0c>)
 800961a:	f7fa fae7 	bl	8003bec <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800961e:	4b4e      	ldr	r3, [pc, #312]	; (8009758 <cppLoop+0x1f00>)
 8009620:	edd3 7a00 	vldr	s15, [r3]
 8009624:	eeb0 0a67 	vmov.f32	s0, s15
 8009628:	484e      	ldr	r0, [pc, #312]	; (8009764 <cppLoop+0x1f0c>)
 800962a:	f7fa faff 	bl	8003c2c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800962e:	484d      	ldr	r0, [pc, #308]	; (8009764 <cppLoop+0x1f0c>)
 8009630:	f7f9 fe0a 	bl	8003248 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009634:	484b      	ldr	r0, [pc, #300]	; (8009764 <cppLoop+0x1f0c>)
 8009636:	f7fa fdf7 	bl	8004228 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800963a:	f04f 32ff 	mov.w	r2, #4294967295
 800963e:	2100      	movs	r1, #0
 8009640:	4843      	ldr	r0, [pc, #268]	; (8009750 <cppLoop+0x1ef8>)
 8009642:	f7f8 fddf 	bl	8002204 <_ZN3LED2LREaa>
		}

		break;
 8009646:	e078      	b.n	800973a <cppLoop+0x1ee2>

	case 15:
		led.fullColor('W');
 8009648:	2157      	movs	r1, #87	; 0x57
 800964a:	4841      	ldr	r0, [pc, #260]	; (8009750 <cppLoop+0x1ef8>)
 800964c:	f7f8 fd1e 	bl	800208c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009650:	f7f7 fd26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009654:	2100      	movs	r1, #0
 8009656:	2000      	movs	r0, #0
 8009658:	f7f7 fd32 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800965c:	4843      	ldr	r0, [pc, #268]	; (800976c <cppLoop+0x1f14>)
 800965e:	f7f7 fd59 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009662:	2101      	movs	r1, #1
 8009664:	2000      	movs	r0, #0
 8009666:	f7f7 fd2b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800966a:	4b41      	ldr	r3, [pc, #260]	; (8009770 <cppLoop+0x1f18>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f7f6 ff82 	bl	8000578 <__aeabi_f2d>
 8009674:	4603      	mov	r3, r0
 8009676:	460c      	mov	r4, r1
 8009678:	461a      	mov	r2, r3
 800967a:	4623      	mov	r3, r4
 800967c:	4837      	ldr	r0, [pc, #220]	; (800975c <cppLoop+0x1f04>)
 800967e:	f7f7 fd49 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009682:	4837      	ldr	r0, [pc, #220]	; (8009760 <cppLoop+0x1f08>)
 8009684:	f7f8 fc9e 	bl	8001fc4 <_ZN8JoyStick8getValueEv>
 8009688:	4603      	mov	r3, r0
 800968a:	2b02      	cmp	r3, #2
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d052      	beq.n	800973e <cppLoop+0x1ee6>
			HAL_Delay(500);
 8009698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800969c:	f000 f978 	bl	8009990 <HAL_Delay>

			led.LR(1, -1);
 80096a0:	f04f 32ff 	mov.w	r2, #4294967295
 80096a4:	2101      	movs	r1, #1
 80096a6:	482a      	ldr	r0, [pc, #168]	; (8009750 <cppLoop+0x1ef8>)
 80096a8:	f7f8 fdac 	bl	8002204 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80096ac:	2101      	movs	r1, #1
 80096ae:	482d      	ldr	r0, [pc, #180]	; (8009764 <cppLoop+0x1f0c>)
 80096b0:	f7fa fec8 	bl	8004444 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80096b4:	4b2f      	ldr	r3, [pc, #188]	; (8009774 <cppLoop+0x1f1c>)
 80096b6:	edd3 7a00 	vldr	s15, [r3]
 80096ba:	eeb0 0a67 	vmov.f32	s0, s15
 80096be:	4829      	ldr	r0, [pc, #164]	; (8009764 <cppLoop+0x1f0c>)
 80096c0:	f7fa fa84 	bl	8003bcc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80096c4:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <cppLoop+0x1f18>)
 80096c6:	edd3 7a00 	vldr	s15, [r3]
 80096ca:	eeb0 0a67 	vmov.f32	s0, s15
 80096ce:	4825      	ldr	r0, [pc, #148]	; (8009764 <cppLoop+0x1f0c>)
 80096d0:	f7fa fa8c 	bl	8003bec <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80096d4:	4b27      	ldr	r3, [pc, #156]	; (8009774 <cppLoop+0x1f1c>)
 80096d6:	edd3 7a00 	vldr	s15, [r3]
 80096da:	eeb0 0a67 	vmov.f32	s0, s15
 80096de:	4821      	ldr	r0, [pc, #132]	; (8009764 <cppLoop+0x1f0c>)
 80096e0:	f7fa faa4 	bl	8003c2c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096e4:	481f      	ldr	r0, [pc, #124]	; (8009764 <cppLoop+0x1f0c>)
 80096e6:	f7f9 fdaf 	bl	8003248 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80096ea:	481e      	ldr	r0, [pc, #120]	; (8009764 <cppLoop+0x1f0c>)
 80096ec:	f7fa fd9c 	bl	8004228 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	2100      	movs	r1, #0
 80096f6:	4816      	ldr	r0, [pc, #88]	; (8009750 <cppLoop+0x1ef8>)
 80096f8:	f7f8 fd84 	bl	8002204 <_ZN3LED2LREaa>
		}
		break;
 80096fc:	e01f      	b.n	800973e <cppLoop+0x1ee6>

	default:
		break;
 80096fe:	bf00      	nop
 8009700:	e01e      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009702:	bf00      	nop
 8009704:	e01c      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009706:	bf00      	nop
 8009708:	e01a      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800970a:	bf00      	nop
 800970c:	e018      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800970e:	bf00      	nop
 8009710:	e016      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009712:	bf00      	nop
 8009714:	e014      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009716:	bf00      	nop
 8009718:	e012      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800971a:	bf00      	nop
 800971c:	e010      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800971e:	bf00      	nop
 8009720:	e00e      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009722:	bf00      	nop
 8009724:	e00c      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009726:	bf00      	nop
 8009728:	e00a      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800972a:	bf00      	nop
 800972c:	e008      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800972e:	bf00      	nop
 8009730:	e006      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <cppLoop+0x1ee8>
		break;
 800973e:	bf00      	nop

	}

	HAL_Delay(30);
 8009740:	201e      	movs	r0, #30
 8009742:	f000 f925 	bl	8009990 <HAL_Delay>

}
 8009746:	bf00      	nop
 8009748:	3704      	adds	r7, #4
 800974a:	46bd      	mov	sp, r7
 800974c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800974e:	bf00      	nop
 8009750:	200005c8 	.word	0x200005c8
 8009754:	08019e74 	.word	0x08019e74
 8009758:	200412ec 	.word	0x200412ec
 800975c:	08019d00 	.word	0x08019d00
 8009760:	200005bc 	.word	0x200005bc
 8009764:	2001bc10 	.word	0x2001bc10
 8009768:	200412fc 	.word	0x200412fc
 800976c:	08019e80 	.word	0x08019e80
 8009770:	200412e4 	.word	0x200412e4
 8009774:	200412f4 	.word	0x200412f4

08009778 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af06      	add	r7, sp, #24
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d140      	bne.n	800980a <_Z41__static_initialization_and_destruction_0ii+0x92>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800978e:	4293      	cmp	r3, r2
 8009790:	d13b      	bne.n	800980a <_Z41__static_initialization_and_destruction_0ii+0x92>
LineSensor line_sensor;
 8009792:	4820      	ldr	r0, [pc, #128]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009794:	f7f8 fd6e 	bl	8002274 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009798:	481f      	ldr	r0, [pc, #124]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800979a:	f7fb fe3d 	bl	8005418 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800979e:	481f      	ldr	r0, [pc, #124]	; (800981c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097a0:	f7f8 fc04 	bl	8001fac <_ZN8JoyStickC1Ev>
Motor motor;
 80097a4:	481e      	ldr	r0, [pc, #120]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097a6:	f7fb fa61 	bl	8004c6c <_ZN5MotorC1Ev>
IMU imu;
 80097aa:	481e      	ldr	r0, [pc, #120]	; (8009824 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097ac:	f7f8 fa0a 	bl	8001bc4 <_ZN3IMUC1Ev>
Logger logger;
 80097b0:	481d      	ldr	r0, [pc, #116]	; (8009828 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097b2:	f7fa ffaf 	bl	8004714 <_ZN6LoggerC1Ev>
Encoder encoder;
 80097b6:	481d      	ldr	r0, [pc, #116]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097b8:	f7f7 fe08 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80097bc:	4b19      	ldr	r3, [pc, #100]	; (8009824 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097be:	4a1b      	ldr	r2, [pc, #108]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097c0:	4917      	ldr	r1, [pc, #92]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097c2:	481b      	ldr	r0, [pc, #108]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80097c4:	f7fc f818 	bl	80057f8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80097c8:	4b19      	ldr	r3, [pc, #100]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80097ca:	4a16      	ldr	r2, [pc, #88]	; (8009824 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097cc:	4917      	ldr	r1, [pc, #92]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097ce:	4819      	ldr	r0, [pc, #100]	; (8009834 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80097d0:	f7fb fb32 	bl	8004e38 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80097d4:	4b13      	ldr	r3, [pc, #76]	; (8009824 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	4b15      	ldr	r3, [pc, #84]	; (8009834 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80097de:	9302      	str	r3, [sp, #8]
 80097e0:	4b12      	ldr	r3, [pc, #72]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	4b11      	ldr	r3, [pc, #68]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80097ea:	4a0a      	ldr	r2, [pc, #40]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80097ec:	490c      	ldr	r1, [pc, #48]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097ee:	4812      	ldr	r0, [pc, #72]	; (8009838 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80097f0:	f7f9 f86e 	bl	80028d0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80097f4:	4a0a      	ldr	r2, [pc, #40]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097f6:	490c      	ldr	r1, [pc, #48]	; (8009828 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097f8:	4810      	ldr	r0, [pc, #64]	; (800983c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80097fa:	f7fb ff5d 	bl	80056b8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80097fe:	4810      	ldr	r0, [pc, #64]	; (8009840 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009800:	f7fb fc9c 	bl	800513c <_ZN13PathFollowingC1Ev>
ESC esc;
 8009804:	480f      	ldr	r0, [pc, #60]	; (8009844 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009806:	f7f7 fce5 	bl	80011d4 <_ZN3ESCC1Ev>
}
 800980a:	bf00      	nop
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	200002bc 	.word	0x200002bc
 8009818:	200005b4 	.word	0x200005b4
 800981c:	200005bc 	.word	0x200005bc
 8009820:	200005c4 	.word	0x200005c4
 8009824:	200005d8 	.word	0x200005d8
 8009828:	200005ec 	.word	0x200005ec
 800982c:	2001bb74 	.word	0x2001bb74
 8009830:	2001bb94 	.word	0x2001bb94
 8009834:	2001bbd0 	.word	0x2001bbd0
 8009838:	2001bc10 	.word	0x2001bc10
 800983c:	20029960 	.word	0x20029960
 8009840:	20029b70 	.word	0x20029b70
 8009844:	20041298 	.word	0x20041298

08009848 <_GLOBAL__sub_I_line_sensor>:
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
 800984c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009850:	2001      	movs	r0, #1
 8009852:	f7ff ff91 	bl	8009778 <_Z41__static_initialization_and_destruction_0ii>
 8009856:	bd80      	pop	{r7, pc}

08009858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009890 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800985c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800985e:	e003      	b.n	8009868 <LoopCopyDataInit>

08009860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009860:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009866:	3104      	adds	r1, #4

08009868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009868:	480b      	ldr	r0, [pc, #44]	; (8009898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800986c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800986e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009870:	d3f6      	bcc.n	8009860 <CopyDataInit>
  ldr  r2, =_sbss
 8009872:	4a0b      	ldr	r2, [pc, #44]	; (80098a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009874:	e002      	b.n	800987c <LoopFillZerobss>

08009876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009878:	f842 3b04 	str.w	r3, [r2], #4

0800987c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800987e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009880:	d3f9      	bcc.n	8009876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009882:	f7fd fec3 	bl	800760c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009886:	f00b fdd3 	bl	8015430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800988a:	f7fc f9fd 	bl	8005c88 <main>
  bx  lr    
 800988e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009890:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009894:	0801a480 	.word	0x0801a480
  ldr  r0, =_sdata
 8009898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800989c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80098a0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80098a4:	20045d00 	.word	0x20045d00

080098a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80098a8:	e7fe      	b.n	80098a8 <ADC_IRQHandler>
	...

080098ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80098b0:	4b0e      	ldr	r3, [pc, #56]	; (80098ec <HAL_Init+0x40>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a0d      	ldr	r2, [pc, #52]	; (80098ec <HAL_Init+0x40>)
 80098b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80098bc:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <HAL_Init+0x40>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <HAL_Init+0x40>)
 80098c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098c8:	4b08      	ldr	r3, [pc, #32]	; (80098ec <HAL_Init+0x40>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a07      	ldr	r2, [pc, #28]	; (80098ec <HAL_Init+0x40>)
 80098ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098d4:	2003      	movs	r0, #3
 80098d6:	f000 fd51 	bl	800a37c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80098da:	2000      	movs	r0, #0
 80098dc:	f000 f808 	bl	80098f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098e0:	f7fd f8e4 	bl	8006aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	40023c00 	.word	0x40023c00

080098f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80098f8:	4b12      	ldr	r3, [pc, #72]	; (8009944 <HAL_InitTick+0x54>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	4b12      	ldr	r3, [pc, #72]	; (8009948 <HAL_InitTick+0x58>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009906:	fbb3 f3f1 	udiv	r3, r3, r1
 800990a:	fbb2 f3f3 	udiv	r3, r2, r3
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fd69 	bl	800a3e6 <HAL_SYSTICK_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e00e      	b.n	800993c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b0f      	cmp	r3, #15
 8009922:	d80a      	bhi.n	800993a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009924:	2200      	movs	r2, #0
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	f000 fd31 	bl	800a392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009930:	4a06      	ldr	r2, [pc, #24]	; (800994c <HAL_InitTick+0x5c>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	e000      	b.n	800993c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20000000 	.word	0x20000000
 8009948:	20000008 	.word	0x20000008
 800994c:	20000004 	.word	0x20000004

08009950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009950:	b480      	push	{r7}
 8009952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009954:	4b06      	ldr	r3, [pc, #24]	; (8009970 <HAL_IncTick+0x20>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <HAL_IncTick+0x24>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4413      	add	r3, r2
 8009960:	4a04      	ldr	r2, [pc, #16]	; (8009974 <HAL_IncTick+0x24>)
 8009962:	6013      	str	r3, [r2, #0]
}
 8009964:	bf00      	nop
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000008 	.word	0x20000008
 8009974:	20043c88 	.word	0x20043c88

08009978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
  return uwTick;
 800997c:	4b03      	ldr	r3, [pc, #12]	; (800998c <HAL_GetTick+0x14>)
 800997e:	681b      	ldr	r3, [r3, #0]
}
 8009980:	4618      	mov	r0, r3
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	20043c88 	.word	0x20043c88

08009990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009998:	f7ff ffee 	bl	8009978 <HAL_GetTick>
 800999c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a8:	d005      	beq.n	80099b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <HAL_Delay+0x40>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80099b6:	bf00      	nop
 80099b8:	f7ff ffde 	bl	8009978 <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d8f7      	bhi.n	80099b8 <HAL_Delay+0x28>
  {
  }
}
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20000008 	.word	0x20000008

080099d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e033      	b.n	8009a52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fd f882 	bl	8006afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	f003 0310 	and.w	r3, r3, #16
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d118      	bne.n	8009a44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a1a:	f023 0302 	bic.w	r3, r3, #2
 8009a1e:	f043 0202 	orr.w	r2, r3, #2
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa5a 	bl	8009ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	f023 0303 	bic.w	r3, r3, #3
 8009a3a:	f043 0201 	orr.w	r2, r3, #1
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	641a      	str	r2, [r3, #64]	; 0x40
 8009a42:	e001      	b.n	8009a48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_ADC_Start_DMA+0x1e>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e0cc      	b.n	8009c14 <HAL_ADC_Start_DMA+0x1b8>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d018      	beq.n	8009ac2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689a      	ldr	r2, [r3, #8]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009aa0:	4b5e      	ldr	r3, [pc, #376]	; (8009c1c <HAL_ADC_Start_DMA+0x1c0>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a5e      	ldr	r2, [pc, #376]	; (8009c20 <HAL_ADC_Start_DMA+0x1c4>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	0c9a      	lsrs	r2, r3, #18
 8009aac:	4613      	mov	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4413      	add	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009ab4:	e002      	b.n	8009abc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f9      	bne.n	8009ab6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	f040 80a0 	bne.w	8009c12 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ada:	f023 0301 	bic.w	r3, r3, #1
 8009ade:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009afc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b10:	d106      	bne.n	8009b20 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b16:	f023 0206 	bic.w	r2, r3, #6
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8009b1e:	e002      	b.n	8009b26 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b2e:	4b3d      	ldr	r3, [pc, #244]	; (8009c24 <HAL_ADC_Start_DMA+0x1c8>)
 8009b30:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	4a3c      	ldr	r2, [pc, #240]	; (8009c28 <HAL_ADC_Start_DMA+0x1cc>)
 8009b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	4a3b      	ldr	r2, [pc, #236]	; (8009c2c <HAL_ADC_Start_DMA+0x1d0>)
 8009b40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	4a3a      	ldr	r2, [pc, #232]	; (8009c30 <HAL_ADC_Start_DMA+0x1d4>)
 8009b48:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009b52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009b62:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b72:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	334c      	adds	r3, #76	; 0x4c
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f000 fcea 	bl	800a55c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f003 031f 	and.w	r3, r3, #31
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d12a      	bne.n	8009bea <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a26      	ldr	r2, [pc, #152]	; (8009c34 <HAL_ADC_Start_DMA+0x1d8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d015      	beq.n	8009bca <HAL_ADC_Start_DMA+0x16e>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a25      	ldr	r2, [pc, #148]	; (8009c38 <HAL_ADC_Start_DMA+0x1dc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d105      	bne.n	8009bb4 <HAL_ADC_Start_DMA+0x158>
 8009ba8:	4b1e      	ldr	r3, [pc, #120]	; (8009c24 <HAL_ADC_Start_DMA+0x1c8>)
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a20      	ldr	r2, [pc, #128]	; (8009c3c <HAL_ADC_Start_DMA+0x1e0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d129      	bne.n	8009c12 <HAL_ADC_Start_DMA+0x1b6>
 8009bbe:	4b19      	ldr	r3, [pc, #100]	; (8009c24 <HAL_ADC_Start_DMA+0x1c8>)
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	d823      	bhi.n	8009c12 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11c      	bne.n	8009c12 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689a      	ldr	r2, [r3, #8]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009be6:	609a      	str	r2, [r3, #8]
 8009be8:	e013      	b.n	8009c12 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a11      	ldr	r2, [pc, #68]	; (8009c34 <HAL_ADC_Start_DMA+0x1d8>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d10e      	bne.n	8009c12 <HAL_ADC_Start_DMA+0x1b6>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009c10:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20000000 	.word	0x20000000
 8009c20:	431bde83 	.word	0x431bde83
 8009c24:	40012300 	.word	0x40012300
 8009c28:	0800a0d9 	.word	0x0800a0d9
 8009c2c:	0800a193 	.word	0x0800a193
 8009c30:	0800a1af 	.word	0x0800a1af
 8009c34:	40012000 	.word	0x40012000
 8009c38:	40012100 	.word	0x40012100
 8009c3c:	40012200 	.word	0x40012200

08009c40 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_ADC_ConfigChannel+0x1c>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e113      	b.n	8009ec0 <HAL_ADC_ConfigChannel+0x244>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d925      	bls.n	8009cf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68d9      	ldr	r1, [r3, #12]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4413      	add	r3, r2
 8009cbc:	3b1e      	subs	r3, #30
 8009cbe:	2207      	movs	r2, #7
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	43da      	mvns	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	400a      	ands	r2, r1
 8009ccc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68d9      	ldr	r1, [r3, #12]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4618      	mov	r0, r3
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	4403      	add	r3, r0
 8009ce6:	3b1e      	subs	r3, #30
 8009ce8:	409a      	lsls	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e022      	b.n	8009d3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6919      	ldr	r1, [r3, #16]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	2207      	movs	r2, #7
 8009d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0e:	43da      	mvns	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	400a      	ands	r2, r1
 8009d16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6919      	ldr	r1, [r3, #16]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	689a      	ldr	r2, [r3, #8]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4618      	mov	r0, r3
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4403      	add	r3, r0
 8009d30:	409a      	lsls	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b06      	cmp	r3, #6
 8009d40:	d824      	bhi.n	8009d8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	3b05      	subs	r3, #5
 8009d54:	221f      	movs	r2, #31
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	43da      	mvns	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	400a      	ands	r2, r1
 8009d62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4618      	mov	r0, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3b05      	subs	r3, #5
 8009d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	635a      	str	r2, [r3, #52]	; 0x34
 8009d8a:	e04c      	b.n	8009e26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	2b0c      	cmp	r3, #12
 8009d92:	d824      	bhi.n	8009dde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	3b23      	subs	r3, #35	; 0x23
 8009da6:	221f      	movs	r2, #31
 8009da8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dac:	43da      	mvns	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	400a      	ands	r2, r1
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	3b23      	subs	r3, #35	; 0x23
 8009dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	631a      	str	r2, [r3, #48]	; 0x30
 8009ddc:	e023      	b.n	8009e26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	3b41      	subs	r3, #65	; 0x41
 8009df0:	221f      	movs	r2, #31
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	43da      	mvns	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	400a      	ands	r2, r1
 8009dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	3b41      	subs	r3, #65	; 0x41
 8009e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e26:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <HAL_ADC_ConfigChannel+0x250>)
 8009e28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a28      	ldr	r2, [pc, #160]	; (8009ed0 <HAL_ADC_ConfigChannel+0x254>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d10f      	bne.n	8009e54 <HAL_ADC_ConfigChannel+0x1d8>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b12      	cmp	r3, #18
 8009e3a:	d10b      	bne.n	8009e54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <HAL_ADC_ConfigChannel+0x254>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d12b      	bne.n	8009eb6 <HAL_ADC_ConfigChannel+0x23a>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1c      	ldr	r2, [pc, #112]	; (8009ed4 <HAL_ADC_ConfigChannel+0x258>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d003      	beq.n	8009e70 <HAL_ADC_ConfigChannel+0x1f4>
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b11      	cmp	r3, #17
 8009e6e:	d122      	bne.n	8009eb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a11      	ldr	r2, [pc, #68]	; (8009ed4 <HAL_ADC_ConfigChannel+0x258>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d111      	bne.n	8009eb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e92:	4b11      	ldr	r3, [pc, #68]	; (8009ed8 <HAL_ADC_ConfigChannel+0x25c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a11      	ldr	r2, [pc, #68]	; (8009edc <HAL_ADC_ConfigChannel+0x260>)
 8009e98:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9c:	0c9a      	lsrs	r2, r3, #18
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009ea8:	e002      	b.n	8009eb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f9      	bne.n	8009eaa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	40012300 	.word	0x40012300
 8009ed0:	40012000 	.word	0x40012000
 8009ed4:	10000012 	.word	0x10000012
 8009ed8:	20000000 	.word	0x20000000
 8009edc:	431bde83 	.word	0x431bde83

08009ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ee8:	4b79      	ldr	r3, [pc, #484]	; (800a0d0 <ADC_Init+0x1f0>)
 8009eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6859      	ldr	r1, [r3, #4]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	021a      	lsls	r2, r3, #8
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6859      	ldr	r1, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6899      	ldr	r1, [r3, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f72:	4a58      	ldr	r2, [pc, #352]	; (800a0d4 <ADC_Init+0x1f4>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d022      	beq.n	8009fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6899      	ldr	r1, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6899      	ldr	r1, [r3, #8]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	e00f      	b.n	8009fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0202 	bic.w	r2, r2, #2
 8009fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6899      	ldr	r1, [r3, #8]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7e1b      	ldrb	r3, [r3, #24]
 8009ff8:	005a      	lsls	r2, r3, #1
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01b      	beq.n	800a044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a01a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a02a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	3b01      	subs	r3, #1
 800a038:	035a      	lsls	r2, r3, #13
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	605a      	str	r2, [r3, #4]
 800a042:	e007      	b.n	800a054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	3b01      	subs	r3, #1
 800a070:	051a      	lsls	r2, r3, #20
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6899      	ldr	r1, [r3, #8]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a096:	025a      	lsls	r2, r3, #9
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	430a      	orrs	r2, r1
 800a09e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689a      	ldr	r2, [r3, #8]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6899      	ldr	r1, [r3, #8]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	029a      	lsls	r2, r3, #10
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	609a      	str	r2, [r3, #8]
}
 800a0c4:	bf00      	nop
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	40012300 	.word	0x40012300
 800a0d4:	0f000001 	.word	0x0f000001

0800a0d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d13c      	bne.n	800a16c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d12b      	bne.n	800a164 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a110:	2b00      	cmp	r3, #0
 800a112:	d127      	bne.n	800a164 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d119      	bne.n	800a164 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0220 	bic.w	r2, r2, #32
 800a13e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d105      	bne.n	800a164 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15c:	f043 0201 	orr.w	r2, r3, #1
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fd6b 	bl	8009c40 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a16a:	e00e      	b.n	800a18a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b00      	cmp	r3, #0
 800a176:	d003      	beq.n	800a180 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fd75 	bl	8009c68 <HAL_ADC_ErrorCallback>
}
 800a17e:	e004      	b.n	800a18a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	4798      	blx	r3
}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff fd57 	bl	8009c54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1a6:	bf00      	nop
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2240      	movs	r2, #64	; 0x40
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c6:	f043 0204 	orr.w	r2, r3, #4
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fd4a 	bl	8009c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1ec:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <__NVIC_SetPriorityGrouping+0x44>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a20c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a20e:	4a04      	ldr	r2, [pc, #16]	; (800a220 <__NVIC_SetPriorityGrouping+0x44>)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	60d3      	str	r3, [r2, #12]
}
 800a214:	bf00      	nop
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	e000ed00 	.word	0xe000ed00

0800a224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <__NVIC_GetPriorityGrouping+0x18>)
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	f003 0307 	and.w	r3, r3, #7
}
 800a232:	4618      	mov	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	e000ed00 	.word	0xe000ed00

0800a240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a24a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	db0b      	blt.n	800a26a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	f003 021f 	and.w	r2, r3, #31
 800a258:	4907      	ldr	r1, [pc, #28]	; (800a278 <__NVIC_EnableIRQ+0x38>)
 800a25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a25e:	095b      	lsrs	r3, r3, #5
 800a260:	2001      	movs	r0, #1
 800a262:	fa00 f202 	lsl.w	r2, r0, r2
 800a266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	e000e100 	.word	0xe000e100

0800a27c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	db0a      	blt.n	800a2a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	b2da      	uxtb	r2, r3
 800a294:	490c      	ldr	r1, [pc, #48]	; (800a2c8 <__NVIC_SetPriority+0x4c>)
 800a296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a29a:	0112      	lsls	r2, r2, #4
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	440b      	add	r3, r1
 800a2a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a2a4:	e00a      	b.n	800a2bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	4908      	ldr	r1, [pc, #32]	; (800a2cc <__NVIC_SetPriority+0x50>)
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	3b04      	subs	r3, #4
 800a2b4:	0112      	lsls	r2, r2, #4
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	440b      	add	r3, r1
 800a2ba:	761a      	strb	r2, [r3, #24]
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	e000e100 	.word	0xe000e100
 800a2cc:	e000ed00 	.word	0xe000ed00

0800a2d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b089      	sub	sp, #36	; 0x24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f003 0307 	and.w	r3, r3, #7
 800a2e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	f1c3 0307 	rsb	r3, r3, #7
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	bf28      	it	cs
 800a2ee:	2304      	movcs	r3, #4
 800a2f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	2b06      	cmp	r3, #6
 800a2f8:	d902      	bls.n	800a300 <NVIC_EncodePriority+0x30>
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	3b03      	subs	r3, #3
 800a2fe:	e000      	b.n	800a302 <NVIC_EncodePriority+0x32>
 800a300:	2300      	movs	r3, #0
 800a302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a304:	f04f 32ff 	mov.w	r2, #4294967295
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43da      	mvns	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	401a      	ands	r2, r3
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a318:	f04f 31ff 	mov.w	r1, #4294967295
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	fa01 f303 	lsl.w	r3, r1, r3
 800a322:	43d9      	mvns	r1, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a328:	4313      	orrs	r3, r2
         );
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3724      	adds	r7, #36	; 0x24
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
	...

0800a338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3b01      	subs	r3, #1
 800a344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a348:	d301      	bcc.n	800a34e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a34a:	2301      	movs	r3, #1
 800a34c:	e00f      	b.n	800a36e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a34e:	4a0a      	ldr	r2, [pc, #40]	; (800a378 <SysTick_Config+0x40>)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3b01      	subs	r3, #1
 800a354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a356:	210f      	movs	r1, #15
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	f7ff ff8e 	bl	800a27c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a360:	4b05      	ldr	r3, [pc, #20]	; (800a378 <SysTick_Config+0x40>)
 800a362:	2200      	movs	r2, #0
 800a364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a366:	4b04      	ldr	r3, [pc, #16]	; (800a378 <SysTick_Config+0x40>)
 800a368:	2207      	movs	r2, #7
 800a36a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	e000e010 	.word	0xe000e010

0800a37c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff ff29 	bl	800a1dc <__NVIC_SetPriorityGrouping>
}
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	4603      	mov	r3, r0
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a3a4:	f7ff ff3e 	bl	800a224 <__NVIC_GetPriorityGrouping>
 800a3a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	6978      	ldr	r0, [r7, #20]
 800a3b0:	f7ff ff8e 	bl	800a2d0 <NVIC_EncodePriority>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7ff ff5d 	bl	800a27c <__NVIC_SetPriority>
}
 800a3c2:	bf00      	nop
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff ff31 	bl	800a240 <__NVIC_EnableIRQ>
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff ffa2 	bl	800a338 <SysTick_Config>
 800a3f4:	4603      	mov	r3, r0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a40c:	f7ff fab4 	bl	8009978 <HAL_GetTick>
 800a410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e099      	b.n	800a550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0201 	bic.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a43c:	e00f      	b.n	800a45e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a43e:	f7ff fa9b 	bl	8009978 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b05      	cmp	r3, #5
 800a44a:	d908      	bls.n	800a45e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2203      	movs	r2, #3
 800a456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e078      	b.n	800a550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e8      	bne.n	800a43e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	4b38      	ldr	r3, [pc, #224]	; (800a558 <HAL_DMA_Init+0x158>)
 800a478:	4013      	ands	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a48a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a4a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	d107      	bne.n	800a4c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f023 0307 	bic.w	r3, r3, #7
 800a4de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d117      	bne.n	800a522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00e      	beq.n	800a522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa9d 	bl	800aa44 <DMA_CheckFifoParam>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d008      	beq.n	800a522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2240      	movs	r2, #64	; 0x40
 800a514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a51e:	2301      	movs	r3, #1
 800a520:	e016      	b.n	800a550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa54 	bl	800a9d8 <DMA_CalcBaseAndBitshift>
 800a530:	4603      	mov	r3, r0
 800a532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a538:	223f      	movs	r2, #63	; 0x3f
 800a53a:	409a      	lsls	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	f010803f 	.word	0xf010803f

0800a55c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <HAL_DMA_Start_IT+0x26>
 800a57e:	2302      	movs	r3, #2
 800a580:	e040      	b.n	800a604 <HAL_DMA_Start_IT+0xa8>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b01      	cmp	r3, #1
 800a594:	d12f      	bne.n	800a5f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2202      	movs	r2, #2
 800a59a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	68b9      	ldr	r1, [r7, #8]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 f9e6 	bl	800a97c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b4:	223f      	movs	r2, #63	; 0x3f
 800a5b6:	409a      	lsls	r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0216 	orr.w	r2, r2, #22
 800a5ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0208 	orr.w	r2, r2, #8
 800a5e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	e005      	b.n	800a602 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
 800a600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d004      	beq.n	800a62a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2280      	movs	r2, #128	; 0x80
 800a624:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e00c      	b.n	800a644 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2205      	movs	r2, #5
 800a62e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0201 	bic.w	r2, r2, #1
 800a640:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a65c:	4b92      	ldr	r3, [pc, #584]	; (800a8a8 <HAL_DMA_IRQHandler+0x258>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a92      	ldr	r2, [pc, #584]	; (800a8ac <HAL_DMA_IRQHandler+0x25c>)
 800a662:	fba2 2303 	umull	r2, r3, r2, r3
 800a666:	0a9b      	lsrs	r3, r3, #10
 800a668:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a66e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67a:	2208      	movs	r2, #8
 800a67c:	409a      	lsls	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4013      	ands	r3, r2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d01a      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d013      	beq.n	800a6bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0204 	bic.w	r2, r2, #4
 800a6a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	409a      	lsls	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b4:	f043 0201 	orr.w	r2, r3, #1
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	409a      	lsls	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d012      	beq.n	800a6f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00b      	beq.n	800a6f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6de:	2201      	movs	r2, #1
 800a6e0:	409a      	lsls	r2, r3
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ea:	f043 0202 	orr.w	r2, r3, #2
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f6:	2204      	movs	r2, #4
 800a6f8:	409a      	lsls	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d012      	beq.n	800a728 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a714:	2204      	movs	r2, #4
 800a716:	409a      	lsls	r2, r3
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a720:	f043 0204 	orr.w	r2, r3, #4
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72c:	2210      	movs	r2, #16
 800a72e:	409a      	lsls	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4013      	ands	r3, r2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d043      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0308 	and.w	r3, r3, #8
 800a742:	2b00      	cmp	r3, #0
 800a744:	d03c      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a74a:	2210      	movs	r2, #16
 800a74c:	409a      	lsls	r2, r3
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d018      	beq.n	800a792 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d108      	bne.n	800a780 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d024      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
 800a77e:	e01f      	b.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01b      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
 800a790:	e016      	b.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d107      	bne.n	800a7b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0208 	bic.w	r2, r2, #8
 800a7ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	409a      	lsls	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 808e 	beq.w	800a8ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 8086 	beq.w	800a8ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	409a      	lsls	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d136      	bne.n	800a868 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0216 	bic.w	r2, r2, #22
 800a808:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	695a      	ldr	r2, [r3, #20]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a818:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d103      	bne.n	800a82a <HAL_DMA_IRQHandler+0x1da>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 0208 	bic.w	r2, r2, #8
 800a838:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83e:	223f      	movs	r2, #63	; 0x3f
 800a840:	409a      	lsls	r2, r3
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d07d      	beq.n	800a95a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
        }
        return;
 800a866:	e078      	b.n	800a95a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01c      	beq.n	800a8b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d108      	bne.n	800a896 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d030      	beq.n	800a8ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	4798      	blx	r3
 800a894:	e02b      	b.n	800a8ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d027      	beq.n	800a8ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	4798      	blx	r3
 800a8a6:	e022      	b.n	800a8ee <HAL_DMA_IRQHandler+0x29e>
 800a8a8:	20000000 	.word	0x20000000
 800a8ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10f      	bne.n	800a8de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 0210 	bic.w	r2, r2, #16
 800a8cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d032      	beq.n	800a95c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d022      	beq.n	800a948 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2205      	movs	r2, #5
 800a906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	3301      	adds	r3, #1
 800a91e:	60bb      	str	r3, [r7, #8]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	429a      	cmp	r2, r3
 800a924:	d307      	bcc.n	800a936 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1f2      	bne.n	800a91a <HAL_DMA_IRQHandler+0x2ca>
 800a934:	e000      	b.n	800a938 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a936:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	4798      	blx	r3
 800a958:	e000      	b.n	800a95c <HAL_DMA_IRQHandler+0x30c>
        return;
 800a95a:	bf00      	nop
    }
  }
}
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop

0800a964 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	2b40      	cmp	r3, #64	; 0x40
 800a9a8:	d108      	bne.n	800a9bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a9ba:	e007      	b.n	800a9cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]
}
 800a9cc:	bf00      	nop
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	3b10      	subs	r3, #16
 800a9e8:	4a14      	ldr	r2, [pc, #80]	; (800aa3c <DMA_CalcBaseAndBitshift+0x64>)
 800a9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ee:	091b      	lsrs	r3, r3, #4
 800a9f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9f2:	4a13      	ldr	r2, [pc, #76]	; (800aa40 <DMA_CalcBaseAndBitshift+0x68>)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d909      	bls.n	800aa1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	1d1a      	adds	r2, r3, #4
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	659a      	str	r2, [r3, #88]	; 0x58
 800aa18:	e007      	b.n	800aa2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa22:	f023 0303 	bic.w	r3, r3, #3
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	aaaaaaab 	.word	0xaaaaaaab
 800aa40:	08019ec0 	.word	0x08019ec0

0800aa44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d11f      	bne.n	800aa9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d855      	bhi.n	800ab10 <DMA_CheckFifoParam+0xcc>
 800aa64:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <DMA_CheckFifoParam+0x28>)
 800aa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6a:	bf00      	nop
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aa8f 	.word	0x0800aa8f
 800aa74:	0800aa7d 	.word	0x0800aa7d
 800aa78:	0800ab11 	.word	0x0800ab11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d045      	beq.n	800ab14 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa8c:	e042      	b.n	800ab14 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa96:	d13f      	bne.n	800ab18 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa9c:	e03c      	b.n	800ab18 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaa6:	d121      	bne.n	800aaec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d836      	bhi.n	800ab1c <DMA_CheckFifoParam+0xd8>
 800aaae:	a201      	add	r2, pc, #4	; (adr r2, 800aab4 <DMA_CheckFifoParam+0x70>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800aac5 	.word	0x0800aac5
 800aab8:	0800aacb 	.word	0x0800aacb
 800aabc:	0800aac5 	.word	0x0800aac5
 800aac0:	0800aadd 	.word	0x0800aadd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	73fb      	strb	r3, [r7, #15]
      break;
 800aac8:	e02f      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d024      	beq.n	800ab20 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aada:	e021      	b.n	800ab20 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aae4:	d11e      	bne.n	800ab24 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aaea:	e01b      	b.n	800ab24 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d902      	bls.n	800aaf8 <DMA_CheckFifoParam+0xb4>
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d003      	beq.n	800aafe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aaf6:	e018      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	73fb      	strb	r3, [r7, #15]
      break;
 800aafc:	e015      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00e      	beq.n	800ab28 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0e:	e00b      	b.n	800ab28 <DMA_CheckFifoParam+0xe4>
      break;
 800ab10:	bf00      	nop
 800ab12:	e00a      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      break;
 800ab14:	bf00      	nop
 800ab16:	e008      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e006      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e004      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      break;
 800ab20:	bf00      	nop
 800ab22:	e002      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      break;   
 800ab24:	bf00      	nop
 800ab26:	e000      	b.n	800ab2a <DMA_CheckFifoParam+0xe6>
      break;
 800ab28:	bf00      	nop
    }
  } 
  
  return status; 
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b089      	sub	sp, #36	; 0x24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
 800ab52:	e177      	b.n	800ae44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab54:	2201      	movs	r2, #1
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4013      	ands	r3, r2
 800ab66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	f040 8166 	bne.w	800ae3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d00b      	beq.n	800ab92 <HAL_GPIO_Init+0x5a>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d007      	beq.n	800ab92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab86:	2b11      	cmp	r3, #17
 800ab88:	d003      	beq.n	800ab92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	2b12      	cmp	r3, #18
 800ab90:	d130      	bne.n	800abf4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	2203      	movs	r2, #3
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	43db      	mvns	r3, r3
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	4013      	ands	r3, r2
 800aba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	fa02 f303 	lsl.w	r3, r2, r3
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	4313      	orrs	r3, r2
 800abba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abc8:	2201      	movs	r2, #1
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	fa02 f303 	lsl.w	r3, r2, r3
 800abd0:	43db      	mvns	r3, r3
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	4013      	ands	r3, r2
 800abd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	091b      	lsrs	r3, r3, #4
 800abde:	f003 0201 	and.w	r2, r3, #1
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	fa02 f303 	lsl.w	r3, r2, r3
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	4313      	orrs	r3, r2
 800abec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	2203      	movs	r2, #3
 800ac00:	fa02 f303 	lsl.w	r3, r2, r3
 800ac04:	43db      	mvns	r3, r3
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	689a      	ldr	r2, [r3, #8]
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	fa02 f303 	lsl.w	r3, r2, r3
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	69ba      	ldr	r2, [r7, #24]
 800ac22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d003      	beq.n	800ac34 <HAL_GPIO_Init+0xfc>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	2b12      	cmp	r3, #18
 800ac32:	d123      	bne.n	800ac7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	08da      	lsrs	r2, r3, #3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3208      	adds	r2, #8
 800ac3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	f003 0307 	and.w	r3, r3, #7
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	220f      	movs	r2, #15
 800ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac50:	43db      	mvns	r3, r3
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	4013      	ands	r3, r2
 800ac56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	08da      	lsrs	r2, r3, #3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3208      	adds	r2, #8
 800ac76:	69b9      	ldr	r1, [r7, #24]
 800ac78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	2203      	movs	r2, #3
 800ac88:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8c:	43db      	mvns	r3, r3
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	4013      	ands	r3, r2
 800ac92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f003 0203 	and.w	r2, r3, #3
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	fa02 f303 	lsl.w	r3, r2, r3
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 80c0 	beq.w	800ae3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	4b65      	ldr	r3, [pc, #404]	; (800ae58 <HAL_GPIO_Init+0x320>)
 800acc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc6:	4a64      	ldr	r2, [pc, #400]	; (800ae58 <HAL_GPIO_Init+0x320>)
 800acc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800accc:	6453      	str	r3, [r2, #68]	; 0x44
 800acce:	4b62      	ldr	r3, [pc, #392]	; (800ae58 <HAL_GPIO_Init+0x320>)
 800acd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acda:	4a60      	ldr	r2, [pc, #384]	; (800ae5c <HAL_GPIO_Init+0x324>)
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	089b      	lsrs	r3, r3, #2
 800ace0:	3302      	adds	r3, #2
 800ace2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	220f      	movs	r2, #15
 800acf2:	fa02 f303 	lsl.w	r3, r2, r3
 800acf6:	43db      	mvns	r3, r3
 800acf8:	69ba      	ldr	r2, [r7, #24]
 800acfa:	4013      	ands	r3, r2
 800acfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a57      	ldr	r2, [pc, #348]	; (800ae60 <HAL_GPIO_Init+0x328>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d037      	beq.n	800ad76 <HAL_GPIO_Init+0x23e>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a56      	ldr	r2, [pc, #344]	; (800ae64 <HAL_GPIO_Init+0x32c>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d031      	beq.n	800ad72 <HAL_GPIO_Init+0x23a>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a55      	ldr	r2, [pc, #340]	; (800ae68 <HAL_GPIO_Init+0x330>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d02b      	beq.n	800ad6e <HAL_GPIO_Init+0x236>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a54      	ldr	r2, [pc, #336]	; (800ae6c <HAL_GPIO_Init+0x334>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d025      	beq.n	800ad6a <HAL_GPIO_Init+0x232>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a53      	ldr	r2, [pc, #332]	; (800ae70 <HAL_GPIO_Init+0x338>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d01f      	beq.n	800ad66 <HAL_GPIO_Init+0x22e>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a52      	ldr	r2, [pc, #328]	; (800ae74 <HAL_GPIO_Init+0x33c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d019      	beq.n	800ad62 <HAL_GPIO_Init+0x22a>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a51      	ldr	r2, [pc, #324]	; (800ae78 <HAL_GPIO_Init+0x340>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d013      	beq.n	800ad5e <HAL_GPIO_Init+0x226>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a50      	ldr	r2, [pc, #320]	; (800ae7c <HAL_GPIO_Init+0x344>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00d      	beq.n	800ad5a <HAL_GPIO_Init+0x222>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a4f      	ldr	r2, [pc, #316]	; (800ae80 <HAL_GPIO_Init+0x348>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d007      	beq.n	800ad56 <HAL_GPIO_Init+0x21e>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a4e      	ldr	r2, [pc, #312]	; (800ae84 <HAL_GPIO_Init+0x34c>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d101      	bne.n	800ad52 <HAL_GPIO_Init+0x21a>
 800ad4e:	2309      	movs	r3, #9
 800ad50:	e012      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad52:	230a      	movs	r3, #10
 800ad54:	e010      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad56:	2308      	movs	r3, #8
 800ad58:	e00e      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad5a:	2307      	movs	r3, #7
 800ad5c:	e00c      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad5e:	2306      	movs	r3, #6
 800ad60:	e00a      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad62:	2305      	movs	r3, #5
 800ad64:	e008      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad66:	2304      	movs	r3, #4
 800ad68:	e006      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e004      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e002      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <HAL_GPIO_Init+0x240>
 800ad76:	2300      	movs	r3, #0
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	f002 0203 	and.w	r2, r2, #3
 800ad7e:	0092      	lsls	r2, r2, #2
 800ad80:	4093      	lsls	r3, r2
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad88:	4934      	ldr	r1, [pc, #208]	; (800ae5c <HAL_GPIO_Init+0x324>)
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	089b      	lsrs	r3, r3, #2
 800ad8e:	3302      	adds	r3, #2
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad96:	4b3c      	ldr	r3, [pc, #240]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	43db      	mvns	r3, r3
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	4013      	ands	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800adba:	4a33      	ldr	r2, [pc, #204]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800adc0:	4b31      	ldr	r3, [pc, #196]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	43db      	mvns	r3, r3
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	4013      	ands	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ade4:	4a28      	ldr	r2, [pc, #160]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800adea:	4b27      	ldr	r3, [pc, #156]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	43db      	mvns	r3, r3
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	4013      	ands	r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae14:	4b1c      	ldr	r3, [pc, #112]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	43db      	mvns	r3, r3
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	4013      	ands	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae38:	4a13      	ldr	r2, [pc, #76]	; (800ae88 <HAL_GPIO_Init+0x350>)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	3301      	adds	r3, #1
 800ae42:	61fb      	str	r3, [r7, #28]
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2b0f      	cmp	r3, #15
 800ae48:	f67f ae84 	bls.w	800ab54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	3724      	adds	r7, #36	; 0x24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	40023800 	.word	0x40023800
 800ae5c:	40013800 	.word	0x40013800
 800ae60:	40020000 	.word	0x40020000
 800ae64:	40020400 	.word	0x40020400
 800ae68:	40020800 	.word	0x40020800
 800ae6c:	40020c00 	.word	0x40020c00
 800ae70:	40021000 	.word	0x40021000
 800ae74:	40021400 	.word	0x40021400
 800ae78:	40021800 	.word	0x40021800
 800ae7c:	40021c00 	.word	0x40021c00
 800ae80:	40022000 	.word	0x40022000
 800ae84:	40022400 	.word	0x40022400
 800ae88:	40013c00 	.word	0x40013c00

0800ae8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	691a      	ldr	r2, [r3, #16]
 800ae9c:	887b      	ldrh	r3, [r7, #2]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
 800aea8:	e001      	b.n	800aeae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	807b      	strh	r3, [r7, #2]
 800aec8:	4613      	mov	r3, r2
 800aeca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aecc:	787b      	ldrb	r3, [r7, #1]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aed2:	887a      	ldrh	r2, [r7, #2]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aed8:	e003      	b.n	800aee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aeda:	887b      	ldrh	r3, [r7, #2]
 800aedc:	041a      	lsls	r2, r3, #16
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	619a      	str	r2, [r3, #24]
}
 800aee2:	bf00      	nop
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e11f      	b.n	800b142 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7fb fea2 	bl	8006c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2224      	movs	r2, #36	; 0x24
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0201 	bic.w	r2, r2, #1
 800af32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af54:	f001 f96e 	bl	800c234 <HAL_RCC_GetPCLK1Freq>
 800af58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4a7b      	ldr	r2, [pc, #492]	; (800b14c <HAL_I2C_Init+0x25c>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d807      	bhi.n	800af74 <HAL_I2C_Init+0x84>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4a7a      	ldr	r2, [pc, #488]	; (800b150 <HAL_I2C_Init+0x260>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	bf94      	ite	ls
 800af6c:	2301      	movls	r3, #1
 800af6e:	2300      	movhi	r3, #0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	e006      	b.n	800af82 <HAL_I2C_Init+0x92>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4a77      	ldr	r2, [pc, #476]	; (800b154 <HAL_I2C_Init+0x264>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	bf94      	ite	ls
 800af7c:	2301      	movls	r3, #1
 800af7e:	2300      	movhi	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e0db      	b.n	800b142 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	4a72      	ldr	r2, [pc, #456]	; (800b158 <HAL_I2C_Init+0x268>)
 800af8e:	fba2 2303 	umull	r2, r3, r2, r3
 800af92:	0c9b      	lsrs	r3, r3, #18
 800af94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	4a64      	ldr	r2, [pc, #400]	; (800b14c <HAL_I2C_Init+0x25c>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d802      	bhi.n	800afc4 <HAL_I2C_Init+0xd4>
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	3301      	adds	r3, #1
 800afc2:	e009      	b.n	800afd8 <HAL_I2C_Init+0xe8>
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afca:	fb02 f303 	mul.w	r3, r2, r3
 800afce:	4a63      	ldr	r2, [pc, #396]	; (800b15c <HAL_I2C_Init+0x26c>)
 800afd0:	fba2 2303 	umull	r2, r3, r2, r3
 800afd4:	099b      	lsrs	r3, r3, #6
 800afd6:	3301      	adds	r3, #1
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	6812      	ldr	r2, [r2, #0]
 800afdc:	430b      	orrs	r3, r1
 800afde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800afea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	4956      	ldr	r1, [pc, #344]	; (800b14c <HAL_I2C_Init+0x25c>)
 800aff4:	428b      	cmp	r3, r1
 800aff6:	d80d      	bhi.n	800b014 <HAL_I2C_Init+0x124>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	1e59      	subs	r1, r3, #1
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	fbb1 f3f3 	udiv	r3, r1, r3
 800b006:	3301      	adds	r3, #1
 800b008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	bf38      	it	cc
 800b010:	2304      	movcc	r3, #4
 800b012:	e04f      	b.n	800b0b4 <HAL_I2C_Init+0x1c4>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d111      	bne.n	800b040 <HAL_I2C_Init+0x150>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	1e58      	subs	r0, r3, #1
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6859      	ldr	r1, [r3, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	005b      	lsls	r3, r3, #1
 800b028:	440b      	add	r3, r1
 800b02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b02e:	3301      	adds	r3, #1
 800b030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b034:	2b00      	cmp	r3, #0
 800b036:	bf0c      	ite	eq
 800b038:	2301      	moveq	r3, #1
 800b03a:	2300      	movne	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	e012      	b.n	800b066 <HAL_I2C_Init+0x176>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	1e58      	subs	r0, r3, #1
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6859      	ldr	r1, [r3, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	440b      	add	r3, r1
 800b04e:	0099      	lsls	r1, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	fbb0 f3f3 	udiv	r3, r0, r3
 800b056:	3301      	adds	r3, #1
 800b058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bf0c      	ite	eq
 800b060:	2301      	moveq	r3, #1
 800b062:	2300      	movne	r3, #0
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <HAL_I2C_Init+0x17e>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e022      	b.n	800b0b4 <HAL_I2C_Init+0x1c4>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10e      	bne.n	800b094 <HAL_I2C_Init+0x1a4>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	1e58      	subs	r0, r3, #1
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6859      	ldr	r1, [r3, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	440b      	add	r3, r1
 800b084:	fbb0 f3f3 	udiv	r3, r0, r3
 800b088:	3301      	adds	r3, #1
 800b08a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b092:	e00f      	b.n	800b0b4 <HAL_I2C_Init+0x1c4>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	1e58      	subs	r0, r3, #1
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6859      	ldr	r1, [r3, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	440b      	add	r3, r1
 800b0a2:	0099      	lsls	r1, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	6809      	ldr	r1, [r1, #0]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	69da      	ldr	r2, [r3, #28]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b0e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6911      	ldr	r1, [r2, #16]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	68d2      	ldr	r2, [r2, #12]
 800b0ee:	4311      	orrs	r1, r2
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6812      	ldr	r2, [r2, #0]
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	431a      	orrs	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0201 	orr.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	000186a0 	.word	0x000186a0
 800b150:	001e847f 	.word	0x001e847f
 800b154:	003d08ff 	.word	0x003d08ff
 800b158:	431bde83 	.word	0x431bde83
 800b15c:	10624dd3 	.word	0x10624dd3

0800b160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af02      	add	r7, sp, #8
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	461a      	mov	r2, r3
 800b16c:	460b      	mov	r3, r1
 800b16e:	817b      	strh	r3, [r7, #10]
 800b170:	4613      	mov	r3, r2
 800b172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b174:	f7fe fc00 	bl	8009978 <HAL_GetTick>
 800b178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b20      	cmp	r3, #32
 800b184:	f040 80e0 	bne.w	800b348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	2319      	movs	r3, #25
 800b18e:	2201      	movs	r2, #1
 800b190:	4970      	ldr	r1, [pc, #448]	; (800b354 <HAL_I2C_Master_Transmit+0x1f4>)
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 fc58 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e0d3      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d101      	bne.n	800b1b0 <HAL_I2C_Master_Transmit+0x50>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e0cc      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d007      	beq.n	800b1d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f042 0201 	orr.w	r2, r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2221      	movs	r2, #33	; 0x21
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2210      	movs	r2, #16
 800b1f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	893a      	ldrh	r2, [r7, #8]
 800b206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a50      	ldr	r2, [pc, #320]	; (800b358 <HAL_I2C_Master_Transmit+0x1f8>)
 800b216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b218:	8979      	ldrh	r1, [r7, #10]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	6a3a      	ldr	r2, [r7, #32]
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fac2 	bl	800b7a8 <I2C_MasterRequestWrite>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e08d      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b22e:	2300      	movs	r3, #0
 800b230:	613b      	str	r3, [r7, #16]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	613b      	str	r3, [r7, #16]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b244:	e066      	b.n	800b314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	6a39      	ldr	r1, [r7, #32]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fcd2 	bl	800bbf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00d      	beq.n	800b272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d107      	bne.n	800b26e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b26c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e06b      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	781a      	ldrb	r2, [r3, #0]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	b29a      	uxth	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d11b      	bne.n	800b2e8 <HAL_I2C_Master_Transmit+0x188>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d017      	beq.n	800b2e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	6a39      	ldr	r1, [r7, #32]
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fcc2 	bl	800bc76 <I2C_WaitOnBTFFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00d      	beq.n	800b314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d107      	bne.n	800b310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b30e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e01a      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d194      	bne.n	800b246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b32a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2220      	movs	r2, #32
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	e000      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b348:	2302      	movs	r3, #2
  }
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	00100002 	.word	0x00100002
 800b358:	ffff0000 	.word	0xffff0000

0800b35c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08c      	sub	sp, #48	; 0x30
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	461a      	mov	r2, r3
 800b368:	460b      	mov	r3, r1
 800b36a:	817b      	strh	r3, [r7, #10]
 800b36c:	4613      	mov	r3, r2
 800b36e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b370:	f7fe fb02 	bl	8009978 <HAL_GetTick>
 800b374:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b20      	cmp	r3, #32
 800b380:	f040 820b 	bne.w	800b79a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	2319      	movs	r3, #25
 800b38a:	2201      	movs	r2, #1
 800b38c:	497c      	ldr	r1, [pc, #496]	; (800b580 <HAL_I2C_Master_Receive+0x224>)
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 fb5a 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b39a:	2302      	movs	r3, #2
 800b39c:	e1fe      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_I2C_Master_Receive+0x50>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e1f7      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d007      	beq.n	800b3d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0201 	orr.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2222      	movs	r2, #34	; 0x22
 800b3e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2210      	movs	r2, #16
 800b3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	893a      	ldrh	r2, [r7, #8]
 800b402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	4a5c      	ldr	r2, [pc, #368]	; (800b584 <HAL_I2C_Master_Receive+0x228>)
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b414:	8979      	ldrh	r1, [r7, #10]
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fa46 	bl	800b8ac <I2C_MasterRequestRead>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e1b8      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d113      	bne.n	800b45a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b432:	2300      	movs	r3, #0
 800b434:	623b      	str	r3, [r7, #32]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	623b      	str	r3, [r7, #32]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	623b      	str	r3, [r7, #32]
 800b446:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e18c      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d11b      	bne.n	800b49a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b472:	2300      	movs	r3, #0
 800b474:	61fb      	str	r3, [r7, #28]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	e16c      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d11b      	bne.n	800b4da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	e14c      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b500:	e138      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b506:	2b03      	cmp	r3, #3
 800b508:	f200 80f1 	bhi.w	800b6ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b510:	2b01      	cmp	r3, #1
 800b512:	d123      	bne.n	800b55c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 fbed 	bl	800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e139      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	691a      	ldr	r2, [r3, #16]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b550:	b29b      	uxth	r3, r3
 800b552:	3b01      	subs	r3, #1
 800b554:	b29a      	uxth	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b55a:	e10b      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b560:	2b02      	cmp	r3, #2
 800b562:	d14e      	bne.n	800b602 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	2200      	movs	r2, #0
 800b56c:	4906      	ldr	r1, [pc, #24]	; (800b588 <HAL_I2C_Master_Receive+0x22c>)
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fa6a 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d008      	beq.n	800b58c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e10e      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
 800b57e:	bf00      	nop
 800b580:	00100002 	.word	0x00100002
 800b584:	ffff0000 	.word	0xffff0000
 800b588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b59a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	b2d2      	uxtb	r2, r2
 800b5da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b600:	e0b8      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	2200      	movs	r2, #0
 800b60a:	4966      	ldr	r1, [pc, #408]	; (800b7a4 <HAL_I2C_Master_Receive+0x448>)
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fa1b 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e0bf      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b62a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691a      	ldr	r2, [r3, #16]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	b2d2      	uxtb	r2, r2
 800b638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b654:	b29b      	uxth	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	2200      	movs	r2, #0
 800b666:	494f      	ldr	r1, [pc, #316]	; (800b7a4 <HAL_I2C_Master_Receive+0x448>)
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f9ed 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e091      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	691a      	ldr	r2, [r3, #16]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6ec:	e042      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 fb00 	bl	800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e04c      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	691a      	ldr	r2, [r3, #16]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	b2d2      	uxtb	r2, r2
 800b70e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29a      	uxth	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	f003 0304 	and.w	r3, r3, #4
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d118      	bne.n	800b774 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75e:	3b01      	subs	r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	3b01      	subs	r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f47f aec2 	bne.w	800b502 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2220      	movs	r2, #32
 800b782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	e000      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b79a:	2302      	movs	r3, #2
  }
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3728      	adds	r7, #40	; 0x28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	00010004 	.word	0x00010004

0800b7a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d006      	beq.n	800b7d2 <I2C_MasterRequestWrite+0x2a>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d003      	beq.n	800b7d2 <I2C_MasterRequestWrite+0x2a>
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b7d0:	d108      	bne.n	800b7e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	e00b      	b.n	800b7fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e8:	2b12      	cmp	r3, #18
 800b7ea:	d107      	bne.n	800b7fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f91d 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00d      	beq.n	800b830 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b822:	d103      	bne.n	800b82c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b82a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e035      	b.n	800b89c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b838:	d108      	bne.n	800b84c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b83a:	897b      	ldrh	r3, [r7, #10]
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	461a      	mov	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b848:	611a      	str	r2, [r3, #16]
 800b84a:	e01b      	b.n	800b884 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b84c:	897b      	ldrh	r3, [r7, #10]
 800b84e:	11db      	asrs	r3, r3, #7
 800b850:	b2db      	uxtb	r3, r3
 800b852:	f003 0306 	and.w	r3, r3, #6
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f063 030f 	orn	r3, r3, #15
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	490e      	ldr	r1, [pc, #56]	; (800b8a4 <I2C_MasterRequestWrite+0xfc>)
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 f943 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e010      	b.n	800b89c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b87a:	897b      	ldrh	r3, [r7, #10]
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4907      	ldr	r1, [pc, #28]	; (800b8a8 <I2C_MasterRequestWrite+0x100>)
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 f933 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e000      	b.n	800b89c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	00010008 	.word	0x00010008
 800b8a8:	00010002 	.word	0x00010002

0800b8ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	607a      	str	r2, [r7, #4]
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d006      	beq.n	800b8e6 <I2C_MasterRequestRead+0x3a>
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d003      	beq.n	800b8e6 <I2C_MasterRequestRead+0x3a>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8e4:	d108      	bne.n	800b8f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	e00b      	b.n	800b910 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fc:	2b11      	cmp	r3, #17
 800b8fe:	d107      	bne.n	800b910 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b90e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 f893 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00d      	beq.n	800b944 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b936:	d103      	bne.n	800b940 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b93e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e079      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b94c:	d108      	bne.n	800b960 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b94e:	897b      	ldrh	r3, [r7, #10]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	b2da      	uxtb	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	611a      	str	r2, [r3, #16]
 800b95e:	e05f      	b.n	800ba20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b960:	897b      	ldrh	r3, [r7, #10]
 800b962:	11db      	asrs	r3, r3, #7
 800b964:	b2db      	uxtb	r3, r3
 800b966:	f003 0306 	and.w	r3, r3, #6
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	f063 030f 	orn	r3, r3, #15
 800b970:	b2da      	uxtb	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	4930      	ldr	r1, [pc, #192]	; (800ba40 <I2C_MasterRequestRead+0x194>)
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 f8b9 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e054      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b98e:	897b      	ldrh	r3, [r7, #10]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4929      	ldr	r1, [pc, #164]	; (800ba44 <I2C_MasterRequestRead+0x198>)
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 f8a9 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e044      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	613b      	str	r3, [r7, #16]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	613b      	str	r3, [r7, #16]
 800b9c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f831 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00d      	beq.n	800ba08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fa:	d103      	bne.n	800ba04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e017      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ba08:	897b      	ldrh	r3, [r7, #10]
 800ba0a:	11db      	asrs	r3, r3, #7
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 0306 	and.w	r3, r3, #6
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f063 030e 	orn	r3, r3, #14
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	4907      	ldr	r1, [pc, #28]	; (800ba44 <I2C_MasterRequestRead+0x198>)
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 f865 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e000      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	00010008 	.word	0x00010008
 800ba44:	00010002 	.word	0x00010002

0800ba48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	4613      	mov	r3, r2
 800ba56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba58:	e025      	b.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba60:	d021      	beq.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba62:	f7fd ff89 	bl	8009978 <HAL_GetTick>
 800ba66:	4602      	mov	r2, r0
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d302      	bcc.n	800ba78 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d116      	bne.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2220      	movs	r2, #32
 800ba82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	f043 0220 	orr.w	r2, r3, #32
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e023      	b.n	800baee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	0c1b      	lsrs	r3, r3, #16
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b01      	cmp	r3, #1
 800baae:	d10d      	bne.n	800bacc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	43da      	mvns	r2, r3
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	4013      	ands	r3, r2
 800babc:	b29b      	uxth	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf0c      	ite	eq
 800bac2:	2301      	moveq	r3, #1
 800bac4:	2300      	movne	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	461a      	mov	r2, r3
 800baca:	e00c      	b.n	800bae6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	43da      	mvns	r2, r3
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	4013      	ands	r3, r2
 800bad8:	b29b      	uxth	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	bf0c      	ite	eq
 800bade:	2301      	moveq	r3, #1
 800bae0:	2300      	movne	r3, #0
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d0b6      	beq.n	800ba5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb04:	e051      	b.n	800bbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb14:	d123      	bne.n	800bb5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4a:	f043 0204 	orr.w	r2, r3, #4
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e046      	b.n	800bbec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb64:	d021      	beq.n	800bbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb66:	f7fd ff07 	bl	8009978 <HAL_GetTick>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d302      	bcc.n	800bb7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d116      	bne.n	800bbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb96:	f043 0220 	orr.w	r2, r3, #32
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e020      	b.n	800bbec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d10c      	bne.n	800bbce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	43da      	mvns	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bf14      	ite	ne
 800bbc6:	2301      	movne	r3, #1
 800bbc8:	2300      	moveq	r3, #0
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	e00b      	b.n	800bbe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	43da      	mvns	r2, r3
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bf14      	ite	ne
 800bbe0:	2301      	movne	r3, #1
 800bbe2:	2300      	moveq	r3, #0
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d18d      	bne.n	800bb06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc00:	e02d      	b.n	800bc5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 f8ce 	bl	800bda4 <I2C_IsAcknowledgeFailed>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e02d      	b.n	800bc6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc18:	d021      	beq.n	800bc5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1a:	f7fd fead 	bl	8009978 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d302      	bcc.n	800bc30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d116      	bne.n	800bc5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	f043 0220 	orr.w	r2, r3, #32
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e007      	b.n	800bc6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc68:	2b80      	cmp	r3, #128	; 0x80
 800bc6a:	d1ca      	bne.n	800bc02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc82:	e02d      	b.n	800bce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 f88d 	bl	800bda4 <I2C_IsAcknowledgeFailed>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e02d      	b.n	800bcf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9a:	d021      	beq.n	800bce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc9c:	f7fd fe6c 	bl	8009978 <HAL_GetTick>
 800bca0:	4602      	mov	r2, r0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d302      	bcc.n	800bcb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d116      	bne.n	800bce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	f043 0220 	orr.w	r2, r3, #32
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e007      	b.n	800bcf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	f003 0304 	and.w	r3, r3, #4
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d1ca      	bne.n	800bc84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd04:	e042      	b.n	800bd8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	f003 0310 	and.w	r3, r3, #16
 800bd10:	2b10      	cmp	r3, #16
 800bd12:	d119      	bne.n	800bd48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f06f 0210 	mvn.w	r2, #16
 800bd1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2220      	movs	r2, #32
 800bd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e029      	b.n	800bd9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd48:	f7fd fe16 	bl	8009978 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d302      	bcc.n	800bd5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d116      	bne.n	800bd8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	f043 0220 	orr.w	r2, r3, #32
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e007      	b.n	800bd9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b40      	cmp	r3, #64	; 0x40
 800bd98:	d1b5      	bne.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdba:	d11b      	bne.n	800bdf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde0:	f043 0204 	orr.w	r2, r3, #4
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e000      	b.n	800bdf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
	...

0800be04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800be0e:	2300      	movs	r3, #0
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	4b20      	ldr	r3, [pc, #128]	; (800be94 <HAL_PWREx_EnableOverDrive+0x90>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	4a1f      	ldr	r2, [pc, #124]	; (800be94 <HAL_PWREx_EnableOverDrive+0x90>)
 800be18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be1c:	6413      	str	r3, [r2, #64]	; 0x40
 800be1e:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <HAL_PWREx_EnableOverDrive+0x90>)
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be26:	603b      	str	r3, [r7, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800be2a:	4b1b      	ldr	r3, [pc, #108]	; (800be98 <HAL_PWREx_EnableOverDrive+0x94>)
 800be2c:	2201      	movs	r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be30:	f7fd fda2 	bl	8009978 <HAL_GetTick>
 800be34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be36:	e009      	b.n	800be4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be38:	f7fd fd9e 	bl	8009978 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be46:	d901      	bls.n	800be4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e01f      	b.n	800be8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be4c:	4b13      	ldr	r3, [pc, #76]	; (800be9c <HAL_PWREx_EnableOverDrive+0x98>)
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be58:	d1ee      	bne.n	800be38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800be5a:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be5c:	2201      	movs	r2, #1
 800be5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be60:	f7fd fd8a 	bl	8009978 <HAL_GetTick>
 800be64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be66:	e009      	b.n	800be7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be68:	f7fd fd86 	bl	8009978 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be76:	d901      	bls.n	800be7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e007      	b.n	800be8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be7c:	4b07      	ldr	r3, [pc, #28]	; (800be9c <HAL_PWREx_EnableOverDrive+0x98>)
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be88:	d1ee      	bne.n	800be68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	40023800 	.word	0x40023800
 800be98:	420e0040 	.word	0x420e0040
 800be9c:	40007000 	.word	0x40007000
 800bea0:	420e0044 	.word	0x420e0044

0800bea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e0cc      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800beb8:	4b68      	ldr	r3, [pc, #416]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 030f 	and.w	r3, r3, #15
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d90c      	bls.n	800bee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bec6:	4b65      	ldr	r3, [pc, #404]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	b2d2      	uxtb	r2, r2
 800becc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bece:	4b63      	ldr	r3, [pc, #396]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 030f 	and.w	r3, r3, #15
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d001      	beq.n	800bee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	e0b8      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d020      	beq.n	800bf2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bef8:	4b59      	ldr	r3, [pc, #356]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	4a58      	ldr	r2, [pc, #352]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800befe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d005      	beq.n	800bf1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf10:	4b53      	ldr	r3, [pc, #332]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	4a52      	ldr	r2, [pc, #328]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bf1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf1c:	4b50      	ldr	r3, [pc, #320]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	494d      	ldr	r1, [pc, #308]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d044      	beq.n	800bfc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d107      	bne.n	800bf52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf42:	4b47      	ldr	r3, [pc, #284]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d119      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e07f      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d003      	beq.n	800bf62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d107      	bne.n	800bf72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf62:	4b3f      	ldr	r3, [pc, #252]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e06f      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf72:	4b3b      	ldr	r3, [pc, #236]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e067      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf82:	4b37      	ldr	r3, [pc, #220]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f023 0203 	bic.w	r2, r3, #3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4934      	ldr	r1, [pc, #208]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf90:	4313      	orrs	r3, r2
 800bf92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf94:	f7fd fcf0 	bl	8009978 <HAL_GetTick>
 800bf98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf9a:	e00a      	b.n	800bfb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf9c:	f7fd fcec 	bl	8009978 <HAL_GetTick>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e04f      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfb2:	4b2b      	ldr	r3, [pc, #172]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f003 020c 	and.w	r2, r3, #12
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d1eb      	bne.n	800bf9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bfc4:	4b25      	ldr	r3, [pc, #148]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d20c      	bcs.n	800bfec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfd2:	4b22      	ldr	r3, [pc, #136]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	b2d2      	uxtb	r2, r2
 800bfd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfda:	4b20      	ldr	r3, [pc, #128]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d001      	beq.n	800bfec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e032      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bff8:	4b19      	ldr	r3, [pc, #100]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	4916      	ldr	r1, [pc, #88]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c006:	4313      	orrs	r3, r2
 800c008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0308 	and.w	r3, r3, #8
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c016:	4b12      	ldr	r3, [pc, #72]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	490e      	ldr	r1, [pc, #56]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c026:	4313      	orrs	r3, r2
 800c028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c02a:	f000 f821 	bl	800c070 <HAL_RCC_GetSysClockFreq>
 800c02e:	4601      	mov	r1, r0
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	091b      	lsrs	r3, r3, #4
 800c036:	f003 030f 	and.w	r3, r3, #15
 800c03a:	4a0a      	ldr	r2, [pc, #40]	; (800c064 <HAL_RCC_ClockConfig+0x1c0>)
 800c03c:	5cd3      	ldrb	r3, [r2, r3]
 800c03e:	fa21 f303 	lsr.w	r3, r1, r3
 800c042:	4a09      	ldr	r2, [pc, #36]	; (800c068 <HAL_RCC_ClockConfig+0x1c4>)
 800c044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c046:	4b09      	ldr	r3, [pc, #36]	; (800c06c <HAL_RCC_ClockConfig+0x1c8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd fc50 	bl	80098f0 <HAL_InitTick>

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	40023c00 	.word	0x40023c00
 800c060:	40023800 	.word	0x40023800
 800c064:	08019ea8 	.word	0x08019ea8
 800c068:	20000000 	.word	0x20000000
 800c06c:	20000004 	.word	0x20000004

0800c070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c076:	2300      	movs	r3, #0
 800c078:	607b      	str	r3, [r7, #4]
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	2300      	movs	r3, #0
 800c080:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c082:	2300      	movs	r3, #0
 800c084:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c086:	4b63      	ldr	r3, [pc, #396]	; (800c214 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	f003 030c 	and.w	r3, r3, #12
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d007      	beq.n	800c0a2 <HAL_RCC_GetSysClockFreq+0x32>
 800c092:	2b08      	cmp	r3, #8
 800c094:	d008      	beq.n	800c0a8 <HAL_RCC_GetSysClockFreq+0x38>
 800c096:	2b00      	cmp	r3, #0
 800c098:	f040 80b4 	bne.w	800c204 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c09c:	4b5e      	ldr	r3, [pc, #376]	; (800c218 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c09e:	60bb      	str	r3, [r7, #8]
       break;
 800c0a0:	e0b3      	b.n	800c20a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c0a2:	4b5d      	ldr	r3, [pc, #372]	; (800c218 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c0a4:	60bb      	str	r3, [r7, #8]
      break;
 800c0a6:	e0b0      	b.n	800c20a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c0a8:	4b5a      	ldr	r3, [pc, #360]	; (800c214 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c0b2:	4b58      	ldr	r3, [pc, #352]	; (800c214 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d04a      	beq.n	800c154 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0be:	4b55      	ldr	r3, [pc, #340]	; (800c214 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	099b      	lsrs	r3, r3, #6
 800c0c4:	f04f 0400 	mov.w	r4, #0
 800c0c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c0cc:	f04f 0200 	mov.w	r2, #0
 800c0d0:	ea03 0501 	and.w	r5, r3, r1
 800c0d4:	ea04 0602 	and.w	r6, r4, r2
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4632      	mov	r2, r6
 800c0dc:	f04f 0300 	mov.w	r3, #0
 800c0e0:	f04f 0400 	mov.w	r4, #0
 800c0e4:	0154      	lsls	r4, r2, #5
 800c0e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c0ea:	014b      	lsls	r3, r1, #5
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	1b49      	subs	r1, r1, r5
 800c0f2:	eb62 0206 	sbc.w	r2, r2, r6
 800c0f6:	f04f 0300 	mov.w	r3, #0
 800c0fa:	f04f 0400 	mov.w	r4, #0
 800c0fe:	0194      	lsls	r4, r2, #6
 800c100:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c104:	018b      	lsls	r3, r1, #6
 800c106:	1a5b      	subs	r3, r3, r1
 800c108:	eb64 0402 	sbc.w	r4, r4, r2
 800c10c:	f04f 0100 	mov.w	r1, #0
 800c110:	f04f 0200 	mov.w	r2, #0
 800c114:	00e2      	lsls	r2, r4, #3
 800c116:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c11a:	00d9      	lsls	r1, r3, #3
 800c11c:	460b      	mov	r3, r1
 800c11e:	4614      	mov	r4, r2
 800c120:	195b      	adds	r3, r3, r5
 800c122:	eb44 0406 	adc.w	r4, r4, r6
 800c126:	f04f 0100 	mov.w	r1, #0
 800c12a:	f04f 0200 	mov.w	r2, #0
 800c12e:	02a2      	lsls	r2, r4, #10
 800c130:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c134:	0299      	lsls	r1, r3, #10
 800c136:	460b      	mov	r3, r1
 800c138:	4614      	mov	r4, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	4621      	mov	r1, r4
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f04f 0400 	mov.w	r4, #0
 800c144:	461a      	mov	r2, r3
 800c146:	4623      	mov	r3, r4
 800c148:	f7f4 fdb6 	bl	8000cb8 <__aeabi_uldivmod>
 800c14c:	4603      	mov	r3, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e049      	b.n	800c1e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c154:	4b2f      	ldr	r3, [pc, #188]	; (800c214 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	099b      	lsrs	r3, r3, #6
 800c15a:	f04f 0400 	mov.w	r4, #0
 800c15e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c162:	f04f 0200 	mov.w	r2, #0
 800c166:	ea03 0501 	and.w	r5, r3, r1
 800c16a:	ea04 0602 	and.w	r6, r4, r2
 800c16e:	4629      	mov	r1, r5
 800c170:	4632      	mov	r2, r6
 800c172:	f04f 0300 	mov.w	r3, #0
 800c176:	f04f 0400 	mov.w	r4, #0
 800c17a:	0154      	lsls	r4, r2, #5
 800c17c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c180:	014b      	lsls	r3, r1, #5
 800c182:	4619      	mov	r1, r3
 800c184:	4622      	mov	r2, r4
 800c186:	1b49      	subs	r1, r1, r5
 800c188:	eb62 0206 	sbc.w	r2, r2, r6
 800c18c:	f04f 0300 	mov.w	r3, #0
 800c190:	f04f 0400 	mov.w	r4, #0
 800c194:	0194      	lsls	r4, r2, #6
 800c196:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c19a:	018b      	lsls	r3, r1, #6
 800c19c:	1a5b      	subs	r3, r3, r1
 800c19e:	eb64 0402 	sbc.w	r4, r4, r2
 800c1a2:	f04f 0100 	mov.w	r1, #0
 800c1a6:	f04f 0200 	mov.w	r2, #0
 800c1aa:	00e2      	lsls	r2, r4, #3
 800c1ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c1b0:	00d9      	lsls	r1, r3, #3
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	195b      	adds	r3, r3, r5
 800c1b8:	eb44 0406 	adc.w	r4, r4, r6
 800c1bc:	f04f 0100 	mov.w	r1, #0
 800c1c0:	f04f 0200 	mov.w	r2, #0
 800c1c4:	02a2      	lsls	r2, r4, #10
 800c1c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c1ca:	0299      	lsls	r1, r3, #10
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4614      	mov	r4, r2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f04f 0400 	mov.w	r4, #0
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4623      	mov	r3, r4
 800c1de:	f7f4 fd6b 	bl	8000cb8 <__aeabi_uldivmod>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	0c1b      	lsrs	r3, r3, #16
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c200:	60bb      	str	r3, [r7, #8]
      break;
 800c202:	e002      	b.n	800c20a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c206:	60bb      	str	r3, [r7, #8]
      break;
 800c208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c20a:	68bb      	ldr	r3, [r7, #8]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c214:	40023800 	.word	0x40023800
 800c218:	00f42400 	.word	0x00f42400

0800c21c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c21c:	b480      	push	{r7}
 800c21e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c220:	4b03      	ldr	r3, [pc, #12]	; (800c230 <HAL_RCC_GetHCLKFreq+0x14>)
 800c222:	681b      	ldr	r3, [r3, #0]
}
 800c224:	4618      	mov	r0, r3
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	20000000 	.word	0x20000000

0800c234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c238:	f7ff fff0 	bl	800c21c <HAL_RCC_GetHCLKFreq>
 800c23c:	4601      	mov	r1, r0
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	0a9b      	lsrs	r3, r3, #10
 800c244:	f003 0307 	and.w	r3, r3, #7
 800c248:	4a03      	ldr	r2, [pc, #12]	; (800c258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c24a:	5cd3      	ldrb	r3, [r2, r3]
 800c24c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c250:	4618      	mov	r0, r3
 800c252:	bd80      	pop	{r7, pc}
 800c254:	40023800 	.word	0x40023800
 800c258:	08019eb8 	.word	0x08019eb8

0800c25c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c260:	f7ff ffdc 	bl	800c21c <HAL_RCC_GetHCLKFreq>
 800c264:	4601      	mov	r1, r0
 800c266:	4b05      	ldr	r3, [pc, #20]	; (800c27c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	0b5b      	lsrs	r3, r3, #13
 800c26c:	f003 0307 	and.w	r3, r3, #7
 800c270:	4a03      	ldr	r2, [pc, #12]	; (800c280 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c272:	5cd3      	ldrb	r3, [r2, r3]
 800c274:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c278:	4618      	mov	r0, r3
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	40023800 	.word	0x40023800
 800c280:	08019eb8 	.word	0x08019eb8

0800c284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c29c:	2300      	movs	r3, #0
 800c29e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00a      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c2ac:	4b66      	ldr	r3, [pc, #408]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2b2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ba:	4963      	ldr	r1, [pc, #396]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00a      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c2ce:	4b5e      	ldr	r3, [pc, #376]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	495a      	ldr	r1, [pc, #360]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10b      	bne.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d105      	bne.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c304:	2b00      	cmp	r3, #0
 800c306:	d075      	beq.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c308:	4b50      	ldr	r3, [pc, #320]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c30e:	f7fd fb33 	bl	8009978 <HAL_GetTick>
 800c312:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c314:	e008      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c316:	f7fd fb2f 	bl	8009978 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d901      	bls.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e1dc      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c328:	4b47      	ldr	r3, [pc, #284]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1f0      	bne.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d009      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	019a      	lsls	r2, r3, #6
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	071b      	lsls	r3, r3, #28
 800c34c:	493e      	ldr	r1, [pc, #248]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 0302 	and.w	r3, r3, #2
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d01f      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c360:	4b39      	ldr	r3, [pc, #228]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c366:	0f1b      	lsrs	r3, r3, #28
 800c368:	f003 0307 	and.w	r3, r3, #7
 800c36c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	019a      	lsls	r2, r3, #6
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	061b      	lsls	r3, r3, #24
 800c37a:	431a      	orrs	r2, r3
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	071b      	lsls	r3, r3, #28
 800c380:	4931      	ldr	r1, [pc, #196]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c382:	4313      	orrs	r3, r2
 800c384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c388:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38e:	f023 021f 	bic.w	r2, r3, #31
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	3b01      	subs	r3, #1
 800c398:	492b      	ldr	r1, [pc, #172]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c39a:	4313      	orrs	r3, r2
 800c39c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00d      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	019a      	lsls	r2, r3, #6
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	061b      	lsls	r3, r3, #24
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	071b      	lsls	r3, r3, #28
 800c3c0:	4921      	ldr	r1, [pc, #132]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c3c8:	4b20      	ldr	r3, [pc, #128]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3ce:	f7fd fad3 	bl	8009978 <HAL_GetTick>
 800c3d2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3d4:	e008      	b.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3d6:	f7fd facf 	bl	8009978 <HAL_GetTick>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d901      	bls.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e17c      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3e8:	4b17      	ldr	r3, [pc, #92]	; (800c448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0f0      	beq.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0304 	and.w	r3, r3, #4
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d112      	bne.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10c      	bne.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 80ce 	beq.w	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c41e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c422:	f040 80c8 	bne.w	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c426:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c42c:	f7fd faa4 	bl	8009978 <HAL_GetTick>
 800c430:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c432:	e00f      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c434:	f7fd faa0 	bl	8009978 <HAL_GetTick>
 800c438:	4602      	mov	r2, r0
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d908      	bls.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e14d      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c446:	bf00      	nop
 800c448:	40023800 	.word	0x40023800
 800c44c:	42470068 	.word	0x42470068
 800c450:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c454:	4ba5      	ldr	r3, [pc, #660]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c45c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c460:	d0e8      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0304 	and.w	r3, r3, #4
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d02e      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c46e:	4b9f      	ldr	r3, [pc, #636]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c474:	0c1b      	lsrs	r3, r3, #16
 800c476:	f003 0303 	and.w	r3, r3, #3
 800c47a:	3301      	adds	r3, #1
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c480:	4b9a      	ldr	r3, [pc, #616]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c486:	0f1b      	lsrs	r3, r3, #28
 800c488:	f003 0307 	and.w	r3, r3, #7
 800c48c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	019a      	lsls	r2, r3, #6
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	085b      	lsrs	r3, r3, #1
 800c498:	3b01      	subs	r3, #1
 800c49a:	041b      	lsls	r3, r3, #16
 800c49c:	431a      	orrs	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	061b      	lsls	r3, r3, #24
 800c4a4:	431a      	orrs	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	071b      	lsls	r3, r3, #28
 800c4aa:	4990      	ldr	r1, [pc, #576]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c4b2:	4b8e      	ldr	r3, [pc, #568]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	021b      	lsls	r3, r3, #8
 800c4c4:	4989      	ldr	r1, [pc, #548]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 0308 	and.w	r3, r3, #8
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d02c      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c4d8:	4b84      	ldr	r3, [pc, #528]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4de:	0c1b      	lsrs	r3, r3, #16
 800c4e0:	f003 0303 	and.w	r3, r3, #3
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c4ea:	4b80      	ldr	r3, [pc, #512]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f0:	0e1b      	lsrs	r3, r3, #24
 800c4f2:	f003 030f 	and.w	r3, r3, #15
 800c4f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	019a      	lsls	r2, r3, #6
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	085b      	lsrs	r3, r3, #1
 800c502:	3b01      	subs	r3, #1
 800c504:	041b      	lsls	r3, r3, #16
 800c506:	431a      	orrs	r2, r3
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	061b      	lsls	r3, r3, #24
 800c50c:	431a      	orrs	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	071b      	lsls	r3, r3, #28
 800c514:	4975      	ldr	r1, [pc, #468]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c516:	4313      	orrs	r3, r2
 800c518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c51c:	4b73      	ldr	r3, [pc, #460]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52a:	4970      	ldr	r1, [pc, #448]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c52c:	4313      	orrs	r3, r2
 800c52e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d024      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c546:	d11f      	bne.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c548:	4b68      	ldr	r3, [pc, #416]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c54e:	0e1b      	lsrs	r3, r3, #24
 800c550:	f003 030f 	and.w	r3, r3, #15
 800c554:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c556:	4b65      	ldr	r3, [pc, #404]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c55c:	0f1b      	lsrs	r3, r3, #28
 800c55e:	f003 0307 	and.w	r3, r3, #7
 800c562:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	019a      	lsls	r2, r3, #6
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	085b      	lsrs	r3, r3, #1
 800c570:	3b01      	subs	r3, #1
 800c572:	041b      	lsls	r3, r3, #16
 800c574:	431a      	orrs	r2, r3
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	061b      	lsls	r3, r3, #24
 800c57a:	431a      	orrs	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	071b      	lsls	r3, r3, #28
 800c580:	495a      	ldr	r1, [pc, #360]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c582:	4313      	orrs	r3, r2
 800c584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c588:	4b59      	ldr	r3, [pc, #356]	; (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c58a:	2201      	movs	r2, #1
 800c58c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c58e:	f7fd f9f3 	bl	8009978 <HAL_GetTick>
 800c592:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c594:	e008      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c596:	f7fd f9ef 	bl	8009978 <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d901      	bls.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e09c      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5a8:	4b50      	ldr	r3, [pc, #320]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5b4:	d1ef      	bne.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 0320 	and.w	r3, r3, #32
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 8083 	beq.w	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	60bb      	str	r3, [r7, #8]
 800c5c8:	4b48      	ldr	r3, [pc, #288]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5cc:	4a47      	ldr	r2, [pc, #284]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d2:	6413      	str	r3, [r2, #64]	; 0x40
 800c5d4:	4b45      	ldr	r3, [pc, #276]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5dc:	60bb      	str	r3, [r7, #8]
 800c5de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c5e0:	4b44      	ldr	r3, [pc, #272]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a43      	ldr	r2, [pc, #268]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5ec:	f7fd f9c4 	bl	8009978 <HAL_GetTick>
 800c5f0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c5f2:	e008      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c5f4:	f7fd f9c0 	bl	8009978 <HAL_GetTick>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d901      	bls.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e06d      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c606:	4b3b      	ldr	r3, [pc, #236]	; (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0f0      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c612:	4b36      	ldr	r3, [pc, #216]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c61a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d02f      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d028      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c630:	4b2e      	ldr	r3, [pc, #184]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c638:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c63a:	4b2f      	ldr	r3, [pc, #188]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c63c:	2201      	movs	r2, #1
 800c63e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c640:	4b2d      	ldr	r3, [pc, #180]	; (800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c646:	4a29      	ldr	r2, [pc, #164]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c64c:	4b27      	ldr	r3, [pc, #156]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c64e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	2b01      	cmp	r3, #1
 800c656:	d114      	bne.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c658:	f7fd f98e 	bl	8009978 <HAL_GetTick>
 800c65c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c65e:	e00a      	b.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c660:	f7fd f98a 	bl	8009978 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66e:	4293      	cmp	r3, r2
 800c670:	d901      	bls.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c672:	2303      	movs	r3, #3
 800c674:	e035      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c676:	4b1d      	ldr	r3, [pc, #116]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67a:	f003 0302 	and.w	r3, r3, #2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0ee      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c68a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c68e:	d10d      	bne.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c690:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c6a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6a4:	4911      	ldr	r1, [pc, #68]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	608b      	str	r3, [r1, #8]
 800c6aa:	e005      	b.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c6ac:	4b0f      	ldr	r3, [pc, #60]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	4a0e      	ldr	r2, [pc, #56]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c6b6:	6093      	str	r3, [r2, #8]
 800c6b8:	4b0c      	ldr	r3, [pc, #48]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6c4:	4909      	ldr	r1, [pc, #36]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c6dc:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c6de:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3720      	adds	r7, #32
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	40023800 	.word	0x40023800
 800c6f0:	42470070 	.word	0x42470070
 800c6f4:	40007000 	.word	0x40007000
 800c6f8:	42470e40 	.word	0x42470e40
 800c6fc:	424711e0 	.word	0x424711e0

0800c700 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d075      	beq.n	800c804 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c718:	4ba2      	ldr	r3, [pc, #648]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f003 030c 	and.w	r3, r3, #12
 800c720:	2b04      	cmp	r3, #4
 800c722:	d00c      	beq.n	800c73e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c724:	4b9f      	ldr	r3, [pc, #636]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c72c:	2b08      	cmp	r3, #8
 800c72e:	d112      	bne.n	800c756 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c730:	4b9c      	ldr	r3, [pc, #624]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c73c:	d10b      	bne.n	800c756 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c73e:	4b99      	ldr	r3, [pc, #612]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d05b      	beq.n	800c802 <HAL_RCC_OscConfig+0x102>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d157      	bne.n	800c802 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	e20b      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c75e:	d106      	bne.n	800c76e <HAL_RCC_OscConfig+0x6e>
 800c760:	4b90      	ldr	r3, [pc, #576]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a8f      	ldr	r2, [pc, #572]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c76a:	6013      	str	r3, [r2, #0]
 800c76c:	e01d      	b.n	800c7aa <HAL_RCC_OscConfig+0xaa>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c776:	d10c      	bne.n	800c792 <HAL_RCC_OscConfig+0x92>
 800c778:	4b8a      	ldr	r3, [pc, #552]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a89      	ldr	r2, [pc, #548]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c77e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	4b87      	ldr	r3, [pc, #540]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a86      	ldr	r2, [pc, #536]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c78a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	e00b      	b.n	800c7aa <HAL_RCC_OscConfig+0xaa>
 800c792:	4b84      	ldr	r3, [pc, #528]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a83      	ldr	r2, [pc, #524]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	4b81      	ldr	r3, [pc, #516]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a80      	ldr	r2, [pc, #512]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c7a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d013      	beq.n	800c7da <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7b2:	f7fd f8e1 	bl	8009978 <HAL_GetTick>
 800c7b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7b8:	e008      	b.n	800c7cc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7ba:	f7fd f8dd 	bl	8009978 <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b64      	cmp	r3, #100	; 0x64
 800c7c6:	d901      	bls.n	800c7cc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e1d0      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7cc:	4b75      	ldr	r3, [pc, #468]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0f0      	beq.n	800c7ba <HAL_RCC_OscConfig+0xba>
 800c7d8:	e014      	b.n	800c804 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7da:	f7fd f8cd 	bl	8009978 <HAL_GetTick>
 800c7de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7e0:	e008      	b.n	800c7f4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7e2:	f7fd f8c9 	bl	8009978 <HAL_GetTick>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	2b64      	cmp	r3, #100	; 0x64
 800c7ee:	d901      	bls.n	800c7f4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e1bc      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7f4:	4b6b      	ldr	r3, [pc, #428]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1f0      	bne.n	800c7e2 <HAL_RCC_OscConfig+0xe2>
 800c800:	e000      	b.n	800c804 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c802:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0302 	and.w	r3, r3, #2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d063      	beq.n	800c8d8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c810:	4b64      	ldr	r3, [pc, #400]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f003 030c 	and.w	r3, r3, #12
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00b      	beq.n	800c834 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c81c:	4b61      	ldr	r3, [pc, #388]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c824:	2b08      	cmp	r3, #8
 800c826:	d11c      	bne.n	800c862 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c828:	4b5e      	ldr	r3, [pc, #376]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d116      	bne.n	800c862 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c834:	4b5b      	ldr	r3, [pc, #364]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0302 	and.w	r3, r3, #2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d005      	beq.n	800c84c <HAL_RCC_OscConfig+0x14c>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d001      	beq.n	800c84c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	e190      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c84c:	4b55      	ldr	r3, [pc, #340]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	4952      	ldr	r1, [pc, #328]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c85c:	4313      	orrs	r3, r2
 800c85e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c860:	e03a      	b.n	800c8d8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d020      	beq.n	800c8ac <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c86a:	4b4f      	ldr	r3, [pc, #316]	; (800c9a8 <HAL_RCC_OscConfig+0x2a8>)
 800c86c:	2201      	movs	r2, #1
 800c86e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c870:	f7fd f882 	bl	8009978 <HAL_GetTick>
 800c874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c876:	e008      	b.n	800c88a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c878:	f7fd f87e 	bl	8009978 <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b02      	cmp	r3, #2
 800c884:	d901      	bls.n	800c88a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e171      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c88a:	4b46      	ldr	r3, [pc, #280]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0f0      	beq.n	800c878 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c896:	4b43      	ldr	r3, [pc, #268]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	00db      	lsls	r3, r3, #3
 800c8a4:	493f      	ldr	r1, [pc, #252]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	600b      	str	r3, [r1, #0]
 800c8aa:	e015      	b.n	800c8d8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8ac:	4b3e      	ldr	r3, [pc, #248]	; (800c9a8 <HAL_RCC_OscConfig+0x2a8>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b2:	f7fd f861 	bl	8009978 <HAL_GetTick>
 800c8b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8b8:	e008      	b.n	800c8cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8ba:	f7fd f85d 	bl	8009978 <HAL_GetTick>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d901      	bls.n	800c8cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	e150      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8cc:	4b35      	ldr	r3, [pc, #212]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1f0      	bne.n	800c8ba <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 0308 	and.w	r3, r3, #8
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d030      	beq.n	800c946 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d016      	beq.n	800c91a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8ec:	4b2f      	ldr	r3, [pc, #188]	; (800c9ac <HAL_RCC_OscConfig+0x2ac>)
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8f2:	f7fd f841 	bl	8009978 <HAL_GetTick>
 800c8f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8f8:	e008      	b.n	800c90c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8fa:	f7fd f83d 	bl	8009978 <HAL_GetTick>
 800c8fe:	4602      	mov	r2, r0
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	2b02      	cmp	r3, #2
 800c906:	d901      	bls.n	800c90c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c908:	2303      	movs	r3, #3
 800c90a:	e130      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c90c:	4b25      	ldr	r3, [pc, #148]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c90e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0f0      	beq.n	800c8fa <HAL_RCC_OscConfig+0x1fa>
 800c918:	e015      	b.n	800c946 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c91a:	4b24      	ldr	r3, [pc, #144]	; (800c9ac <HAL_RCC_OscConfig+0x2ac>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c920:	f7fd f82a 	bl	8009978 <HAL_GetTick>
 800c924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c926:	e008      	b.n	800c93a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c928:	f7fd f826 	bl	8009978 <HAL_GetTick>
 800c92c:	4602      	mov	r2, r0
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	2b02      	cmp	r3, #2
 800c934:	d901      	bls.n	800c93a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c936:	2303      	movs	r3, #3
 800c938:	e119      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c93a:	4b1a      	ldr	r3, [pc, #104]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c93e:	f003 0302 	and.w	r3, r3, #2
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1f0      	bne.n	800c928 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f000 809f 	beq.w	800ca92 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c954:	2300      	movs	r3, #0
 800c956:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c958:	4b12      	ldr	r3, [pc, #72]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10f      	bne.n	800c984 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c964:	2300      	movs	r3, #0
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	4b0e      	ldr	r3, [pc, #56]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96c:	4a0d      	ldr	r2, [pc, #52]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c972:	6413      	str	r3, [r2, #64]	; 0x40
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <HAL_RCC_OscConfig+0x2a4>)
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c97c:	60fb      	str	r3, [r7, #12]
 800c97e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c980:	2301      	movs	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c984:	4b0a      	ldr	r3, [pc, #40]	; (800c9b0 <HAL_RCC_OscConfig+0x2b0>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d120      	bne.n	800c9d2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <HAL_RCC_OscConfig+0x2b0>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a06      	ldr	r2, [pc, #24]	; (800c9b0 <HAL_RCC_OscConfig+0x2b0>)
 800c996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c99a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c99c:	f7fc ffec 	bl	8009978 <HAL_GetTick>
 800c9a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9a2:	e010      	b.n	800c9c6 <HAL_RCC_OscConfig+0x2c6>
 800c9a4:	40023800 	.word	0x40023800
 800c9a8:	42470000 	.word	0x42470000
 800c9ac:	42470e80 	.word	0x42470e80
 800c9b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9b4:	f7fc ffe0 	bl	8009978 <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e0d3      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9c6:	4b6c      	ldr	r3, [pc, #432]	; (800cb78 <HAL_RCC_OscConfig+0x478>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0f0      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d106      	bne.n	800c9e8 <HAL_RCC_OscConfig+0x2e8>
 800c9da:	4b68      	ldr	r3, [pc, #416]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800c9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9de:	4a67      	ldr	r2, [pc, #412]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800c9e0:	f043 0301 	orr.w	r3, r3, #1
 800c9e4:	6713      	str	r3, [r2, #112]	; 0x70
 800c9e6:	e01c      	b.n	800ca22 <HAL_RCC_OscConfig+0x322>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	2b05      	cmp	r3, #5
 800c9ee:	d10c      	bne.n	800ca0a <HAL_RCC_OscConfig+0x30a>
 800c9f0:	4b62      	ldr	r3, [pc, #392]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800c9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f4:	4a61      	ldr	r2, [pc, #388]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800c9f6:	f043 0304 	orr.w	r3, r3, #4
 800c9fa:	6713      	str	r3, [r2, #112]	; 0x70
 800c9fc:	4b5f      	ldr	r3, [pc, #380]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800c9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca00:	4a5e      	ldr	r2, [pc, #376]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca02:	f043 0301 	orr.w	r3, r3, #1
 800ca06:	6713      	str	r3, [r2, #112]	; 0x70
 800ca08:	e00b      	b.n	800ca22 <HAL_RCC_OscConfig+0x322>
 800ca0a:	4b5c      	ldr	r3, [pc, #368]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0e:	4a5b      	ldr	r2, [pc, #364]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca10:	f023 0301 	bic.w	r3, r3, #1
 800ca14:	6713      	str	r3, [r2, #112]	; 0x70
 800ca16:	4b59      	ldr	r3, [pc, #356]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1a:	4a58      	ldr	r2, [pc, #352]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca1c:	f023 0304 	bic.w	r3, r3, #4
 800ca20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d015      	beq.n	800ca56 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca2a:	f7fc ffa5 	bl	8009978 <HAL_GetTick>
 800ca2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca30:	e00a      	b.n	800ca48 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca32:	f7fc ffa1 	bl	8009978 <HAL_GetTick>
 800ca36:	4602      	mov	r2, r0
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d901      	bls.n	800ca48 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e092      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca48:	4b4c      	ldr	r3, [pc, #304]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4c:	f003 0302 	and.w	r3, r3, #2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d0ee      	beq.n	800ca32 <HAL_RCC_OscConfig+0x332>
 800ca54:	e014      	b.n	800ca80 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca56:	f7fc ff8f 	bl	8009978 <HAL_GetTick>
 800ca5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca5c:	e00a      	b.n	800ca74 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca5e:	f7fc ff8b 	bl	8009978 <HAL_GetTick>
 800ca62:	4602      	mov	r2, r0
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d901      	bls.n	800ca74 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e07c      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca74:	4b41      	ldr	r3, [pc, #260]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca78:	f003 0302 	and.w	r3, r3, #2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1ee      	bne.n	800ca5e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d105      	bne.n	800ca92 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca86:	4b3d      	ldr	r3, [pc, #244]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	4a3c      	ldr	r2, [pc, #240]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d068      	beq.n	800cb6c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca9a:	4b38      	ldr	r3, [pc, #224]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f003 030c 	and.w	r3, r3, #12
 800caa2:	2b08      	cmp	r3, #8
 800caa4:	d060      	beq.n	800cb68 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d145      	bne.n	800cb3a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caae:	4b34      	ldr	r3, [pc, #208]	; (800cb80 <HAL_RCC_OscConfig+0x480>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab4:	f7fc ff60 	bl	8009978 <HAL_GetTick>
 800cab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800caba:	e008      	b.n	800cace <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cabc:	f7fc ff5c 	bl	8009978 <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d901      	bls.n	800cace <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e04f      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cace:	4b2b      	ldr	r3, [pc, #172]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1f0      	bne.n	800cabc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	69da      	ldr	r2, [r3, #28]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	431a      	orrs	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	019b      	lsls	r3, r3, #6
 800caea:	431a      	orrs	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf0:	085b      	lsrs	r3, r3, #1
 800caf2:	3b01      	subs	r3, #1
 800caf4:	041b      	lsls	r3, r3, #16
 800caf6:	431a      	orrs	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafc:	061b      	lsls	r3, r3, #24
 800cafe:	431a      	orrs	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb04:	071b      	lsls	r3, r3, #28
 800cb06:	491d      	ldr	r1, [pc, #116]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb0c:	4b1c      	ldr	r3, [pc, #112]	; (800cb80 <HAL_RCC_OscConfig+0x480>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb12:	f7fc ff31 	bl	8009978 <HAL_GetTick>
 800cb16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb18:	e008      	b.n	800cb2c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb1a:	f7fc ff2d 	bl	8009978 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d901      	bls.n	800cb2c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e020      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb2c:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0f0      	beq.n	800cb1a <HAL_RCC_OscConfig+0x41a>
 800cb38:	e018      	b.n	800cb6c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb3a:	4b11      	ldr	r3, [pc, #68]	; (800cb80 <HAL_RCC_OscConfig+0x480>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb40:	f7fc ff1a 	bl	8009978 <HAL_GetTick>
 800cb44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb46:	e008      	b.n	800cb5a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb48:	f7fc ff16 	bl	8009978 <HAL_GetTick>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d901      	bls.n	800cb5a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cb56:	2303      	movs	r3, #3
 800cb58:	e009      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb5a:	4b08      	ldr	r3, [pc, #32]	; (800cb7c <HAL_RCC_OscConfig+0x47c>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1f0      	bne.n	800cb48 <HAL_RCC_OscConfig+0x448>
 800cb66:	e001      	b.n	800cb6c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e000      	b.n	800cb6e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	40007000 	.word	0x40007000
 800cb7c:	40023800 	.word	0x40023800
 800cb80:	42470060 	.word	0x42470060

0800cb84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e022      	b.n	800cbdc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d105      	bne.n	800cbae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7fa f8d5 	bl	8006d58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2203      	movs	r2, #3
 800cbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f814 	bl	800cbe4 <HAL_SD_InitCard>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e00a      	b.n	800cbdc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cbe4:	b5b0      	push	{r4, r5, r7, lr}
 800cbe6:	b08e      	sub	sp, #56	; 0x38
 800cbe8:	af04      	add	r7, sp, #16
 800cbea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cbec:	2300      	movs	r3, #0
 800cbee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cc00:	2376      	movs	r3, #118	; 0x76
 800cc02:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681d      	ldr	r5, [r3, #0]
 800cc08:	466c      	mov	r4, sp
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc16:	f107 0308 	add.w	r3, r7, #8
 800cc1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f003 fa87 	bl	8010130 <SDIO_Init>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e031      	b.n	800cc98 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cc34:	4b1a      	ldr	r3, [pc, #104]	; (800cca0 <HAL_SD_InitCard+0xbc>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f003 fabf 	bl	80101c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cc44:	4b16      	ldr	r3, [pc, #88]	; (800cca0 <HAL_SD_InitCard+0xbc>)
 800cc46:	2201      	movs	r2, #1
 800cc48:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 ffc6 	bl	800dbdc <SD_PowerON>
 800cc50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	431a      	orrs	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e013      	b.n	800cc98 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fee5 	bl	800da40 <SD_InitCard>
 800cc76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc78:	6a3b      	ldr	r3, [r7, #32]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00b      	beq.n	800cc96 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e000      	b.n	800cc98 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3728      	adds	r7, #40	; 0x28
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bdb0      	pop	{r4, r5, r7, pc}
 800cca0:	422580a0 	.word	0x422580a0

0800cca4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08c      	sub	sp, #48	; 0x30
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d107      	bne.n	800cccc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e0c7      	b.n	800ce5c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	f040 80c0 	bne.w	800ce5a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	441a      	add	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d907      	bls.n	800ccfe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e0ae      	b.n	800ce5c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2203      	movs	r2, #3
 800cd02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cd1c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd22:	4a50      	ldr	r2, [pc, #320]	; (800ce64 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cd24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2a:	4a4f      	ldr	r2, [pc, #316]	; (800ce68 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cd2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	2200      	movs	r2, #0
 800cd34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3380      	adds	r3, #128	; 0x80
 800cd40:	4619      	mov	r1, r3
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	025b      	lsls	r3, r3, #9
 800cd48:	089b      	lsrs	r3, r3, #2
 800cd4a:	f7fd fc07 	bl	800a55c <HAL_DMA_Start_IT>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d017      	beq.n	800cd84 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cd62:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a40      	ldr	r2, [pc, #256]	; (800ce6c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd80:	2301      	movs	r3, #1
 800cd82:	e06b      	b.n	800ce5c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cd84:	4b3a      	ldr	r3, [pc, #232]	; (800ce70 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cd86:	2201      	movs	r2, #1
 800cd88:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d002      	beq.n	800cd98 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd94:	025b      	lsls	r3, r3, #9
 800cd96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cda0:	4618      	mov	r0, r3
 800cda2:	f003 faa1 	bl	80102e8 <SDMMC_CmdBlockLength>
 800cda6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00f      	beq.n	800cdce <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a2e      	ldr	r2, [pc, #184]	; (800ce6c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e046      	b.n	800ce5c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cdce:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	025b      	lsls	r3, r3, #9
 800cdd8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cdda:	2390      	movs	r3, #144	; 0x90
 800cddc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cdde:	2302      	movs	r3, #2
 800cde0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cde6:	2301      	movs	r3, #1
 800cde8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f107 0210 	add.w	r2, r7, #16
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f003 fa4b 	bl	8010290 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d90a      	bls.n	800ce16 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2282      	movs	r2, #130	; 0x82
 800ce04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f003 faaf 	bl	8010370 <SDMMC_CmdReadMultiBlock>
 800ce12:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ce14:	e009      	b.n	800ce2a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2281      	movs	r2, #129	; 0x81
 800ce1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce22:	4618      	mov	r0, r3
 800ce24:	f003 fa82 	bl	801032c <SDMMC_CmdReadSingleBlock>
 800ce28:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d012      	beq.n	800ce56 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a0d      	ldr	r2, [pc, #52]	; (800ce6c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e002      	b.n	800ce5c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	e000      	b.n	800ce5c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce5a:	2302      	movs	r3, #2
  }
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3730      	adds	r7, #48	; 0x30
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	0800d84f 	.word	0x0800d84f
 800ce68:	0800d8c1 	.word	0x0800d8c1
 800ce6c:	004005ff 	.word	0x004005ff
 800ce70:	4225858c 	.word	0x4225858c

0800ce74 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08c      	sub	sp, #48	; 0x30
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d107      	bne.n	800ce9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e0ca      	b.n	800d032 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	f040 80c3 	bne.w	800d030 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ceb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	441a      	add	r2, r3
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d907      	bls.n	800cece <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e0b1      	b.n	800d032 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2203      	movs	r2, #3
 800ced2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f042 021a 	orr.w	r2, r2, #26
 800ceec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef2:	4a52      	ldr	r2, [pc, #328]	; (800d03c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefa:	4a51      	ldr	r2, [pc, #324]	; (800d040 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cefc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf02:	2200      	movs	r2, #0
 800cf04:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d002      	beq.n	800cf14 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf10:	025b      	lsls	r3, r3, #9
 800cf12:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f003 f9e3 	bl	80102e8 <SDMMC_CmdBlockLength>
 800cf22:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00f      	beq.n	800cf4a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a45      	ldr	r2, [pc, #276]	; (800d044 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e073      	b.n	800d032 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d90a      	bls.n	800cf66 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	22a0      	movs	r2, #160	; 0xa0
 800cf54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f003 fa4b 	bl	80103f8 <SDMMC_CmdWriteMultiBlock>
 800cf62:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf64:	e009      	b.n	800cf7a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2290      	movs	r2, #144	; 0x90
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf72:	4618      	mov	r0, r3
 800cf74:	f003 fa1e 	bl	80103b4 <SDMMC_CmdWriteSingleBlock>
 800cf78:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d012      	beq.n	800cfa6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a2f      	ldr	r2, [pc, #188]	; (800d044 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e045      	b.n	800d032 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cfa6:	4b28      	ldr	r3, [pc, #160]	; (800d048 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	3380      	adds	r3, #128	; 0x80
 800cfb8:	461a      	mov	r2, r3
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	025b      	lsls	r3, r3, #9
 800cfbe:	089b      	lsrs	r3, r3, #2
 800cfc0:	f7fd facc 	bl	800a55c <HAL_DMA_Start_IT>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d01a      	beq.n	800d000 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f022 021a 	bic.w	r2, r2, #26
 800cfd8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a19      	ldr	r2, [pc, #100]	; (800d044 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cfe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e018      	b.n	800d032 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	025b      	lsls	r3, r3, #9
 800d00a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d00c:	2390      	movs	r3, #144	; 0x90
 800d00e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d010:	2300      	movs	r3, #0
 800d012:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d014:	2300      	movs	r3, #0
 800d016:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d018:	2301      	movs	r3, #1
 800d01a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f107 0210 	add.w	r2, r7, #16
 800d024:	4611      	mov	r1, r2
 800d026:	4618      	mov	r0, r3
 800d028:	f003 f932 	bl	8010290 <SDIO_ConfigData>

      return HAL_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	e000      	b.n	800d032 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d030:	2302      	movs	r3, #2
  }
}
 800d032:	4618      	mov	r0, r3
 800d034:	3730      	adds	r7, #48	; 0x30
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	0800d825 	.word	0x0800d825
 800d040:	0800d8c1 	.word	0x0800d8c1
 800d044:	004005ff 	.word	0x004005ff
 800d048:	4225858c 	.word	0x4225858c

0800d04c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d064:	2b00      	cmp	r3, #0
 800d066:	d008      	beq.n	800d07a <HAL_SD_IRQHandler+0x2e>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f003 0308 	and.w	r3, r3, #8
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 ffc8 	bl	800e008 <SD_Read_IT>
 800d078:	e155      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 808f 	beq.w	800d1a8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d092:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	6812      	ldr	r2, [r2, #0]
 800d09e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d0a2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d0a6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f022 0201 	bic.w	r2, r2, #1
 800d0b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f003 0308 	and.w	r3, r3, #8
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d039      	beq.n	800d136 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f003 0302 	and.w	r3, r3, #2
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d104      	bne.n	800d0d6 <HAL_SD_IRQHandler+0x8a>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f003 0320 	and.w	r3, r3, #32
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d011      	beq.n	800d0fa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f003 f9ae 	bl	801043c <SDMMC_CmdStopTransfer>
 800d0e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d008      	beq.n	800d0fa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f91f 	bl	800d338 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800d102:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d104      	bne.n	800d126 <HAL_SD_IRQHandler+0xda>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d003      	beq.n	800d12e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f003 fe04 	bl	8010d34 <HAL_SD_RxCpltCallback>
 800d12c:	e0fb      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f003 fdf6 	bl	8010d20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d134:	e0f7      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 80f2 	beq.w	800d326 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f003 0320 	and.w	r3, r3, #32
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d011      	beq.n	800d170 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4618      	mov	r0, r3
 800d152:	f003 f973 	bl	801043c <SDMMC_CmdStopTransfer>
 800d156:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d008      	beq.n	800d170 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	431a      	orrs	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f8e4 	bl	800d338 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	2b00      	cmp	r3, #0
 800d178:	f040 80d5 	bne.w	800d326 <HAL_SD_IRQHandler+0x2da>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f003 0302 	and.w	r3, r3, #2
 800d182:	2b00      	cmp	r3, #0
 800d184:	f040 80cf 	bne.w	800d326 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f022 0208 	bic.w	r2, r2, #8
 800d196:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f003 fdbd 	bl	8010d20 <HAL_SD_TxCpltCallback>
}
 800d1a6:	e0be      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d008      	beq.n	800d1c8 <HAL_SD_IRQHandler+0x17c>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f003 0308 	and.w	r3, r3, #8
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 ff72 	bl	800e0aa <SD_Write_IT>
 800d1c6:	e0ae      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 80a7 	beq.w	800d326 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d005      	beq.n	800d1f2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ea:	f043 0202 	orr.w	r2, r3, #2
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f8:	f003 0308 	and.w	r3, r3, #8
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d005      	beq.n	800d20c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d204:	f043 0208 	orr.w	r2, r3, #8
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d212:	f003 0320 	and.w	r3, r3, #32
 800d216:	2b00      	cmp	r3, #0
 800d218:	d005      	beq.n	800d226 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21e:	f043 0220 	orr.w	r2, r3, #32
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22c:	f003 0310 	and.w	r3, r3, #16
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	f043 0210 	orr.w	r2, r3, #16
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f240 523a 	movw	r2, #1338	; 0x53a
 800d248:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d258:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4618      	mov	r0, r3
 800d260:	f003 f8ec 	bl	801043c <SDMMC_CmdStopTransfer>
 800d264:	4602      	mov	r2, r0
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	431a      	orrs	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f003 0308 	and.w	r3, r3, #8
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2201      	movs	r2, #1
 800d27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f855 	bl	800d338 <HAL_SD_ErrorCallback>
}
 800d28e:	e04a      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d296:	2b00      	cmp	r3, #0
 800d298:	d045      	beq.n	800d326 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f003 0310 	and.w	r3, r3, #16
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d104      	bne.n	800d2ae <HAL_SD_IRQHandler+0x262>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f003 0320 	and.w	r3, r3, #32
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d011      	beq.n	800d2d2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b2:	4a1f      	ldr	r2, [pc, #124]	; (800d330 <HAL_SD_IRQHandler+0x2e4>)
 800d2b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd f9a6 	bl	800a60c <HAL_DMA_Abort_IT>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d02f      	beq.n	800d326 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 fb4a 	bl	800d964 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d2d0:	e029      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d104      	bne.n	800d2e6 <HAL_SD_IRQHandler+0x29a>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f003 0302 	and.w	r3, r3, #2
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d011      	beq.n	800d30a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ea:	4a12      	ldr	r2, [pc, #72]	; (800d334 <HAL_SD_IRQHandler+0x2e8>)
 800d2ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fd f98a 	bl	800a60c <HAL_DMA_Abort_IT>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d013      	beq.n	800d326 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fb65 	bl	800d9d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d308:	e00d      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f003 fcf4 	bl	8010d0c <HAL_SD_AbortCallback>
}
 800d324:	e7ff      	b.n	800d326 <HAL_SD_IRQHandler+0x2da>
 800d326:	bf00      	nop
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	0800d965 	.word	0x0800d965
 800d334:	0800d9d3 	.word	0x0800d9d3

0800d338 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d35a:	0f9b      	lsrs	r3, r3, #30
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d366:	0e9b      	lsrs	r3, r3, #26
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d378:	0e1b      	lsrs	r3, r3, #24
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 0303 	and.w	r3, r3, #3
 800d380:	b2da      	uxtb	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d38a:	0c1b      	lsrs	r3, r3, #16
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d396:	0a1b      	lsrs	r3, r3, #8
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ac:	0d1b      	lsrs	r3, r3, #20
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3b8:	0c1b      	lsrs	r3, r3, #16
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	f003 030f 	and.w	r3, r3, #15
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ca:	0bdb      	lsrs	r3, r3, #15
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3dc:	0b9b      	lsrs	r3, r3, #14
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f003 0301 	and.w	r3, r3, #1
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ee:	0b5b      	lsrs	r3, r3, #13
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d400:	0b1b      	lsrs	r3, r3, #12
 800d402:	b2db      	uxtb	r3, r3
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2200      	movs	r2, #0
 800d412:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d163      	bne.n	800d4e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d420:	009a      	lsls	r2, r3, #2
 800d422:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d426:	4013      	ands	r3, r2
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d42c:	0f92      	lsrs	r2, r2, #30
 800d42e:	431a      	orrs	r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d438:	0edb      	lsrs	r3, r3, #27
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0307 	and.w	r3, r3, #7
 800d440:	b2da      	uxtb	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d44a:	0e1b      	lsrs	r3, r3, #24
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	f003 0307 	and.w	r3, r3, #7
 800d452:	b2da      	uxtb	r2, r3
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d45c:	0d5b      	lsrs	r3, r3, #21
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	f003 0307 	and.w	r3, r3, #7
 800d464:	b2da      	uxtb	r2, r3
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46e:	0c9b      	lsrs	r3, r3, #18
 800d470:	b2db      	uxtb	r3, r3
 800d472:	f003 0307 	and.w	r3, r3, #7
 800d476:	b2da      	uxtb	r2, r3
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d480:	0bdb      	lsrs	r3, r3, #15
 800d482:	b2db      	uxtb	r3, r3
 800d484:	f003 0307 	and.w	r3, r3, #7
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	7e1b      	ldrb	r3, [r3, #24]
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	f003 0307 	and.w	r3, r3, #7
 800d4a2:	3302      	adds	r3, #2
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d4ae:	fb02 f203 	mul.w	r2, r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	7a1b      	ldrb	r3, [r3, #8]
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	409a      	lsls	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d4d0:	0a52      	lsrs	r2, r2, #9
 800d4d2:	fb02 f203 	mul.w	r2, r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4e0:	661a      	str	r2, [r3, #96]	; 0x60
 800d4e2:	e031      	b.n	800d548 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d11d      	bne.n	800d528 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4f0:	041b      	lsls	r3, r3, #16
 800d4f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4fa:	0c1b      	lsrs	r3, r3, #16
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	3301      	adds	r3, #1
 800d508:	029a      	lsls	r2, r3, #10
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d51c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	661a      	str	r2, [r3, #96]	; 0x60
 800d526:	e00f      	b.n	800d548 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a58      	ldr	r2, [pc, #352]	; (800d690 <HAL_SD_GetCardCSD+0x344>)
 800d52e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d534:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	e09d      	b.n	800d684 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d54c:	0b9b      	lsrs	r3, r3, #14
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	b2da      	uxtb	r2, r3
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d55e:	09db      	lsrs	r3, r3, #7
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d566:	b2da      	uxtb	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d570:	b2db      	uxtb	r3, r3
 800d572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d576:	b2da      	uxtb	r2, r3
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d580:	0fdb      	lsrs	r3, r3, #31
 800d582:	b2da      	uxtb	r2, r3
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d58c:	0f5b      	lsrs	r3, r3, #29
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	b2da      	uxtb	r2, r3
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d59e:	0e9b      	lsrs	r3, r3, #26
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 0307 	and.w	r3, r3, #7
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b0:	0d9b      	lsrs	r3, r3, #22
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5c2:	0d5b      	lsrs	r3, r3, #21
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5de:	0c1b      	lsrs	r3, r3, #16
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5f2:	0bdb      	lsrs	r3, r3, #15
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d606:	0b9b      	lsrs	r3, r3, #14
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61a:	0b5b      	lsrs	r3, r3, #13
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	b2da      	uxtb	r2, r3
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d62e:	0b1b      	lsrs	r3, r3, #12
 800d630:	b2db      	uxtb	r3, r3
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	b2da      	uxtb	r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d642:	0a9b      	lsrs	r3, r3, #10
 800d644:	b2db      	uxtb	r3, r3
 800d646:	f003 0303 	and.w	r3, r3, #3
 800d64a:	b2da      	uxtb	r2, r3
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d656:	0a1b      	lsrs	r3, r3, #8
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	f003 0303 	and.w	r3, r3, #3
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d66a:	085b      	lsrs	r3, r3, #1
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d672:	b2da      	uxtb	r2, r3
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d682:	2300      	movs	r3, #0
}
 800d684:	4618      	mov	r0, r3
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	004005ff 	.word	0x004005ff

0800d694 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d6ec:	b5b0      	push	{r4, r5, r7, lr}
 800d6ee:	b08e      	sub	sp, #56	; 0x38
 800d6f0:	af04      	add	r7, sp, #16
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d702:	2b03      	cmp	r3, #3
 800d704:	d02e      	beq.n	800d764 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d70c:	d106      	bne.n	800d71c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d712:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	639a      	str	r2, [r3, #56]	; 0x38
 800d71a:	e029      	b.n	800d770 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d722:	d10a      	bne.n	800d73a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fb0f 	bl	800dd48 <SD_WideBus_Enable>
 800d72a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	639a      	str	r2, [r3, #56]	; 0x38
 800d738:	e01a      	b.n	800d770 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10a      	bne.n	800d756 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fb4c 	bl	800ddde <SD_WideBus_Disable>
 800d746:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	431a      	orrs	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	639a      	str	r2, [r3, #56]	; 0x38
 800d754:	e00c      	b.n	800d770 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	639a      	str	r2, [r3, #56]	; 0x38
 800d762:	e005      	b.n	800d770 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d768:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d774:	2b00      	cmp	r3, #0
 800d776:	d009      	beq.n	800d78c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a18      	ldr	r2, [pc, #96]	; (800d7e0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d77e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	e024      	b.n	800d7d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681d      	ldr	r5, [r3, #0]
 800d7b2:	466c      	mov	r4, sp
 800d7b4:	f107 0318 	add.w	r3, r7, #24
 800d7b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f002 fcb2 	bl	8010130 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3728      	adds	r7, #40	; 0x28
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	004005ff 	.word	0x004005ff

0800d7e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d7f0:	f107 030c 	add.w	r3, r7, #12
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fa7e 	bl	800dcf8 <SD_SendStatus>
 800d7fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d005      	beq.n	800d810 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	431a      	orrs	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	0a5b      	lsrs	r3, r3, #9
 800d814:	f003 030f 	and.w	r3, r3, #15
 800d818:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d81a:	693b      	ldr	r3, [r7, #16]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d830:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d840:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d842:	bf00      	nop
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d860:	2b82      	cmp	r3, #130	; 0x82
 800d862:	d111      	bne.n	800d888 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4618      	mov	r0, r3
 800d86a:	f002 fde7 	bl	801043c <SDMMC_CmdStopTransfer>
 800d86e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d008      	beq.n	800d888 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	431a      	orrs	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f7ff fd58 	bl	800d338 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f022 0208 	bic.w	r2, r2, #8
 800d896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d8a0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f003 fa3f 	bl	8010d34 <HAL_SD_RxCpltCallback>
#endif
}
 800d8b6:	bf00      	nop
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8cc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7fd f848 	bl	800a964 <HAL_DMA_GetError>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d03e      	beq.n	800d958 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d002      	beq.n	800d8f6 <SD_DMAError+0x36>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d12d      	bne.n	800d952 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a19      	ldr	r2, [pc, #100]	; (800d960 <SD_DMAError+0xa0>)
 800d8fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d90c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d91a:	6978      	ldr	r0, [r7, #20]
 800d91c:	f7ff ff62 	bl	800d7e4 <HAL_SD_GetCardState>
 800d920:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b06      	cmp	r3, #6
 800d926:	d002      	beq.n	800d92e <SD_DMAError+0x6e>
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b05      	cmp	r3, #5
 800d92c:	d10a      	bne.n	800d944 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4618      	mov	r0, r3
 800d934:	f002 fd82 	bl	801043c <SDMMC_CmdStopTransfer>
 800d938:	4602      	mov	r2, r0
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93e:	431a      	orrs	r2, r3
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2200      	movs	r2, #0
 800d950:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d952:	6978      	ldr	r0, [r7, #20]
 800d954:	f7ff fcf0 	bl	800d338 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d958:	bf00      	nop
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	004005ff 	.word	0x004005ff

0800d964 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f240 523a 	movw	r2, #1338	; 0x53a
 800d97a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7ff ff31 	bl	800d7e4 <HAL_SD_GetCardState>
 800d982:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2b06      	cmp	r3, #6
 800d996:	d002      	beq.n	800d99e <SD_DMATxAbort+0x3a>
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2b05      	cmp	r3, #5
 800d99c:	d10a      	bne.n	800d9b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fd4a 	bl	801043c <SDMMC_CmdStopTransfer>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d103      	bne.n	800d9c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f003 f9a5 	bl	8010d0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d9c2:	e002      	b.n	800d9ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f7ff fcb7 	bl	800d338 <HAL_SD_ErrorCallback>
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9e8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7ff fefa 	bl	800d7e4 <HAL_SD_GetCardState>
 800d9f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b06      	cmp	r3, #6
 800da04:	d002      	beq.n	800da0c <SD_DMARxAbort+0x3a>
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	2b05      	cmp	r3, #5
 800da0a:	d10a      	bne.n	800da22 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4618      	mov	r0, r3
 800da12:	f002 fd13 	bl	801043c <SDMMC_CmdStopTransfer>
 800da16:	4602      	mov	r2, r0
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	431a      	orrs	r2, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da26:	2b00      	cmp	r3, #0
 800da28:	d103      	bne.n	800da32 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f003 f96e 	bl	8010d0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800da30:	e002      	b.n	800da38 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7ff fc80 	bl	800d338 <HAL_SD_ErrorCallback>
}
 800da38:	bf00      	nop
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da40:	b5b0      	push	{r4, r5, r7, lr}
 800da42:	b094      	sub	sp, #80	; 0x50
 800da44:	af04      	add	r7, sp, #16
 800da46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da48:	2301      	movs	r3, #1
 800da4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4618      	mov	r0, r3
 800da52:	f002 fbc5 	bl	80101e0 <SDIO_GetPowerState>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d102      	bne.n	800da62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da60:	e0b7      	b.n	800dbd2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da66:	2b03      	cmp	r3, #3
 800da68:	d02f      	beq.n	800daca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4618      	mov	r0, r3
 800da70:	f002 fdee 	bl	8010650 <SDMMC_CmdSendCID>
 800da74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d001      	beq.n	800da80 <SD_InitCard+0x40>
    {
      return errorstate;
 800da7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da7e:	e0a8      	b.n	800dbd2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2100      	movs	r1, #0
 800da86:	4618      	mov	r0, r3
 800da88:	f002 fbef 	bl	801026a <SDIO_GetResponse>
 800da8c:	4602      	mov	r2, r0
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2104      	movs	r1, #4
 800da98:	4618      	mov	r0, r3
 800da9a:	f002 fbe6 	bl	801026a <SDIO_GetResponse>
 800da9e:	4602      	mov	r2, r0
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2108      	movs	r1, #8
 800daaa:	4618      	mov	r0, r3
 800daac:	f002 fbdd 	bl	801026a <SDIO_GetResponse>
 800dab0:	4602      	mov	r2, r0
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	210c      	movs	r1, #12
 800dabc:	4618      	mov	r0, r3
 800dabe:	f002 fbd4 	bl	801026a <SDIO_GetResponse>
 800dac2:	4602      	mov	r2, r0
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d00d      	beq.n	800daee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f107 020e 	add.w	r2, r7, #14
 800dada:	4611      	mov	r1, r2
 800dadc:	4618      	mov	r0, r3
 800dade:	f002 fdf4 	bl	80106ca <SDMMC_CmdSetRelAdd>
 800dae2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <SD_InitCard+0xae>
    {
      return errorstate;
 800daea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daec:	e071      	b.n	800dbd2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d036      	beq.n	800db64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800daf6:	89fb      	ldrh	r3, [r7, #14]
 800daf8:	461a      	mov	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db06:	041b      	lsls	r3, r3, #16
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f002 fdbe 	bl	801068c <SDMMC_CmdSendCSD>
 800db10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <SD_InitCard+0xdc>
    {
      return errorstate;
 800db18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1a:	e05a      	b.n	800dbd2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f002 fba1 	bl	801026a <SDIO_GetResponse>
 800db28:	4602      	mov	r2, r0
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2104      	movs	r1, #4
 800db34:	4618      	mov	r0, r3
 800db36:	f002 fb98 	bl	801026a <SDIO_GetResponse>
 800db3a:	4602      	mov	r2, r0
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2108      	movs	r1, #8
 800db46:	4618      	mov	r0, r3
 800db48:	f002 fb8f 	bl	801026a <SDIO_GetResponse>
 800db4c:	4602      	mov	r2, r0
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	210c      	movs	r1, #12
 800db58:	4618      	mov	r0, r3
 800db5a:	f002 fb86 	bl	801026a <SDIO_GetResponse>
 800db5e:	4602      	mov	r2, r0
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2104      	movs	r1, #4
 800db6a:	4618      	mov	r0, r3
 800db6c:	f002 fb7d 	bl	801026a <SDIO_GetResponse>
 800db70:	4603      	mov	r3, r0
 800db72:	0d1a      	lsrs	r2, r3, #20
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db78:	f107 0310 	add.w	r3, r7, #16
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff fbe4 	bl	800d34c <HAL_SD_GetCardCSD>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db8e:	e020      	b.n	800dbd2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6819      	ldr	r1, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db98:	041b      	lsls	r3, r3, #16
 800db9a:	f04f 0400 	mov.w	r4, #0
 800db9e:	461a      	mov	r2, r3
 800dba0:	4623      	mov	r3, r4
 800dba2:	4608      	mov	r0, r1
 800dba4:	f002 fc6c 	bl	8010480 <SDMMC_CmdSelDesel>
 800dba8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <SD_InitCard+0x174>
  {
    return errorstate;
 800dbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb2:	e00e      	b.n	800dbd2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681d      	ldr	r5, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	466c      	mov	r4, sp
 800dbbc:	f103 0210 	add.w	r2, r3, #16
 800dbc0:	ca07      	ldmia	r2, {r0, r1, r2}
 800dbc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f002 fab0 	bl	8010130 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3740      	adds	r7, #64	; 0x40
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dbdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	617b      	str	r3, [r7, #20]
 800dbec:	2300      	movs	r3, #0
 800dbee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f002 fc66 	bl	80104c6 <SDMMC_CmdGoIdleState>
 800dbfa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	e072      	b.n	800dcec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f002 fc79 	bl	8010502 <SDMMC_CmdOperCond>
 800dc10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00d      	beq.n	800dc34 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f002 fc4f 	bl	80104c6 <SDMMC_CmdGoIdleState>
 800dc28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d004      	beq.n	800dc3a <SD_PowerON+0x5e>
    {
      return errorstate;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	e05b      	b.n	800dcec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d137      	bne.n	800dcb2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2100      	movs	r1, #0
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f002 fc79 	bl	8010540 <SDMMC_CmdAppCommand>
 800dc4e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d02d      	beq.n	800dcb2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc5a:	e047      	b.n	800dcec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2100      	movs	r1, #0
 800dc62:	4618      	mov	r0, r3
 800dc64:	f002 fc6c 	bl	8010540 <SDMMC_CmdAppCommand>
 800dc68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <SD_PowerON+0x98>
    {
      return errorstate;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	e03b      	b.n	800dcec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	491e      	ldr	r1, [pc, #120]	; (800dcf4 <SD_PowerON+0x118>)
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 fc82 	bl	8010584 <SDMMC_CmdAppOperCommand>
 800dc80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc8c:	e02e      	b.n	800dcec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2100      	movs	r1, #0
 800dc94:	4618      	mov	r0, r3
 800dc96:	f002 fae8 	bl	801026a <SDIO_GetResponse>
 800dc9a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	0fdb      	lsrs	r3, r3, #31
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d101      	bne.n	800dca8 <SD_PowerON+0xcc>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <SD_PowerON+0xce>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	613b      	str	r3, [r7, #16]

    count++;
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d802      	bhi.n	800dcc2 <SD_PowerON+0xe6>
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0cc      	beq.n	800dc5c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d902      	bls.n	800dcd2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dcd0:	e00c      	b.n	800dcec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	645a      	str	r2, [r3, #68]	; 0x44
 800dce2:	e002      	b.n	800dcea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3718      	adds	r7, #24
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	c1100000 	.word	0xc1100000

0800dcf8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dd08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd0c:	e018      	b.n	800dd40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd16:	041b      	lsls	r3, r3, #16
 800dd18:	4619      	mov	r1, r3
 800dd1a:	4610      	mov	r0, r2
 800dd1c:	f002 fcf6 	bl	801070c <SDMMC_CmdSendStatus>
 800dd20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <SD_SendStatus+0x34>
  {
    return errorstate;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	e009      	b.n	800dd40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2100      	movs	r1, #0
 800dd32:	4618      	mov	r0, r3
 800dd34:	f002 fa99 	bl	801026a <SDIO_GetResponse>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd50:	2300      	movs	r3, #0
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	2300      	movs	r3, #0
 800dd56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f002 fa83 	bl	801026a <SDIO_GetResponse>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd6e:	d102      	bne.n	800dd76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd74:	e02f      	b.n	800ddd6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd76:	f107 030c 	add.w	r3, r7, #12
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f879 	bl	800de74 <SD_FindSCR>
 800dd82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	e023      	b.n	800ddd6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d01c      	beq.n	800ddd2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda0:	041b      	lsls	r3, r3, #16
 800dda2:	4619      	mov	r1, r3
 800dda4:	4610      	mov	r0, r2
 800dda6:	f002 fbcb 	bl	8010540 <SDMMC_CmdAppCommand>
 800ddaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	e00f      	b.n	800ddd6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2102      	movs	r1, #2
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f002 fc04 	bl	80105ca <SDMMC_CmdBusWidth>
 800ddc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	e003      	b.n	800ddd6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e001      	b.n	800ddd6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ddd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b086      	sub	sp, #24
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]
 800ddea:	2300      	movs	r3, #0
 800ddec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f002 fa38 	bl	801026a <SDIO_GetResponse>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de04:	d102      	bne.n	800de0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de0a:	e02f      	b.n	800de6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800de0c:	f107 030c 	add.w	r3, r7, #12
 800de10:	4619      	mov	r1, r3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 f82e 	bl	800de74 <SD_FindSCR>
 800de18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	e023      	b.n	800de6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d01c      	beq.n	800de68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de36:	041b      	lsls	r3, r3, #16
 800de38:	4619      	mov	r1, r3
 800de3a:	4610      	mov	r0, r2
 800de3c:	f002 fb80 	bl	8010540 <SDMMC_CmdAppCommand>
 800de40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	e00f      	b.n	800de6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f002 fbb9 	bl	80105ca <SDMMC_CmdBusWidth>
 800de58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	e003      	b.n	800de6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de64:	2300      	movs	r3, #0
 800de66:	e001      	b.n	800de6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3718      	adds	r7, #24
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800de74:	b590      	push	{r4, r7, lr}
 800de76:	b08f      	sub	sp, #60	; 0x3c
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de7e:	f7fb fd7b 	bl	8009978 <HAL_GetTick>
 800de82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800de88:	2300      	movs	r3, #0
 800de8a:	60bb      	str	r3, [r7, #8]
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2108      	movs	r1, #8
 800de9a:	4618      	mov	r0, r3
 800de9c:	f002 fa24 	bl	80102e8 <SDMMC_CmdBlockLength>
 800dea0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <SD_FindSCR+0x38>
  {
    return errorstate;
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	e0a9      	b.n	800e000 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deb4:	041b      	lsls	r3, r3, #16
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f002 fb41 	bl	8010540 <SDMMC_CmdAppCommand>
 800debe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <SD_FindSCR+0x56>
  {
    return errorstate;
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	e09a      	b.n	800e000 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800deca:	f04f 33ff 	mov.w	r3, #4294967295
 800dece:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ded0:	2308      	movs	r3, #8
 800ded2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ded4:	2330      	movs	r3, #48	; 0x30
 800ded6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ded8:	2302      	movs	r3, #2
 800deda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dedc:	2300      	movs	r3, #0
 800dede:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dee0:	2301      	movs	r3, #1
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f107 0210 	add.w	r2, r7, #16
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f002 f9ce 	bl	8010290 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f002 fb88 	bl	801060e <SDMMC_CmdSendSCR>
 800defe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	2b00      	cmp	r3, #0
 800df04:	d022      	beq.n	800df4c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	e07a      	b.n	800e000 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00e      	beq.n	800df36 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6819      	ldr	r1, [r3, #0]
 800df1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	f107 0208 	add.w	r2, r7, #8
 800df24:	18d4      	adds	r4, r2, r3
 800df26:	4608      	mov	r0, r1
 800df28:	f002 f92d 	bl	8010186 <SDIO_ReadFIFO>
 800df2c:	4603      	mov	r3, r0
 800df2e:	6023      	str	r3, [r4, #0]
      index++;
 800df30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df32:	3301      	adds	r3, #1
 800df34:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df36:	f7fb fd1f 	bl	8009978 <HAL_GetTick>
 800df3a:	4602      	mov	r2, r0
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df44:	d102      	bne.n	800df4c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800df46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df4a:	e059      	b.n	800e000 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df52:	f240 432a 	movw	r3, #1066	; 0x42a
 800df56:	4013      	ands	r3, r2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d0d6      	beq.n	800df0a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df62:	f003 0308 	and.w	r3, r3, #8
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2208      	movs	r2, #8
 800df70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df72:	2308      	movs	r3, #8
 800df74:	e044      	b.n	800e000 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7c:	f003 0302 	and.w	r3, r3, #2
 800df80:	2b00      	cmp	r3, #0
 800df82:	d005      	beq.n	800df90 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2202      	movs	r2, #2
 800df8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800df8c:	2302      	movs	r3, #2
 800df8e:	e037      	b.n	800e000 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df96:	f003 0320 	and.w	r3, r3, #32
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d005      	beq.n	800dfaa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2220      	movs	r2, #32
 800dfa4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dfa6:	2320      	movs	r3, #32
 800dfa8:	e02a      	b.n	800e000 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfb2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	061a      	lsls	r2, r3, #24
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	021b      	lsls	r3, r3, #8
 800dfbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dfc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	0a1b      	lsrs	r3, r3, #8
 800dfc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	0e1b      	lsrs	r3, r3, #24
 800dfd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd4:	601a      	str	r2, [r3, #0]
    scr++;
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	3304      	adds	r3, #4
 800dfda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	061a      	lsls	r2, r3, #24
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	021b      	lsls	r3, r3, #8
 800dfe4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dfe8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	0a1b      	lsrs	r3, r3, #8
 800dfee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dff2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	0e1b      	lsrs	r3, r3, #24
 800dff8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	373c      	adds	r7, #60	; 0x3c
 800e004:	46bd      	mov	sp, r7
 800e006:	bd90      	pop	{r4, r7, pc}

0800e008 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e014:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d03f      	beq.n	800e0a2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e022:	2300      	movs	r3, #0
 800e024:	617b      	str	r3, [r7, #20]
 800e026:	e033      	b.n	800e090 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 f8aa 	bl	8010186 <SDIO_ReadFIFO>
 800e032:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	b2da      	uxtb	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	3301      	adds	r3, #1
 800e040:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	3b01      	subs	r3, #1
 800e046:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	0a1b      	lsrs	r3, r3, #8
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3301      	adds	r3, #1
 800e056:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	0c1b      	lsrs	r3, r3, #16
 800e062:	b2da      	uxtb	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	3301      	adds	r3, #1
 800e06c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	3b01      	subs	r3, #1
 800e072:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	0e1b      	lsrs	r3, r3, #24
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3301      	adds	r3, #1
 800e082:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	3b01      	subs	r3, #1
 800e088:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	3301      	adds	r3, #1
 800e08e:	617b      	str	r3, [r7, #20]
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	2b07      	cmp	r3, #7
 800e094:	d9c8      	bls.n	800e028 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e0a2:	bf00      	nop
 800e0a4:	3718      	adds	r7, #24
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b086      	sub	sp, #24
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0bc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d043      	beq.n	800e14c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	e037      	b.n	800e13a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	021a      	lsls	r2, r3, #8
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	041a      	lsls	r2, r3, #16
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3301      	adds	r3, #1
 800e104:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3b01      	subs	r3, #1
 800e10a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	061a      	lsls	r2, r3, #24
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	4313      	orrs	r3, r2
 800e116:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3301      	adds	r3, #1
 800e11c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	3b01      	subs	r3, #1
 800e122:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f107 0208 	add.w	r2, r7, #8
 800e12c:	4611      	mov	r1, r2
 800e12e:	4618      	mov	r0, r3
 800e130:	f002 f836 	bl	80101a0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	3301      	adds	r3, #1
 800e138:	617b      	str	r3, [r7, #20]
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2b07      	cmp	r3, #7
 800e13e:	d9c4      	bls.n	800e0ca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e14c:	bf00      	nop
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e056      	b.n	800e214 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	d106      	bne.n	800e186 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7f8 fedb 	bl	8006f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2202      	movs	r2, #2
 800e18a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e19c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	431a      	orrs	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	431a      	orrs	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	691b      	ldr	r3, [r3, #16]
 800e1b2:	431a      	orrs	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	431a      	orrs	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	69db      	ldr	r3, [r3, #28]
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	ea42 0103 	orr.w	r1, r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	0c1b      	lsrs	r3, r3, #16
 800e1e4:	f003 0104 	and.w	r1, r3, #4
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	430a      	orrs	r2, r1
 800e1f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	69da      	ldr	r2, [r3, #28]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e202:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	603b      	str	r3, [r7, #0]
 800e228:	4613      	mov	r3, r2
 800e22a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e236:	2b01      	cmp	r3, #1
 800e238:	d101      	bne.n	800e23e <HAL_SPI_Transmit+0x22>
 800e23a:	2302      	movs	r3, #2
 800e23c:	e11e      	b.n	800e47c <HAL_SPI_Transmit+0x260>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e246:	f7fb fb97 	bl	8009978 <HAL_GetTick>
 800e24a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e24c:	88fb      	ldrh	r3, [r7, #6]
 800e24e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d002      	beq.n	800e262 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e25c:	2302      	movs	r3, #2
 800e25e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e260:	e103      	b.n	800e46a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <HAL_SPI_Transmit+0x52>
 800e268:	88fb      	ldrh	r3, [r7, #6]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e26e:	2301      	movs	r3, #1
 800e270:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e272:	e0fa      	b.n	800e46a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2203      	movs	r2, #3
 800e278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	88fa      	ldrh	r2, [r7, #6]
 800e28c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	88fa      	ldrh	r2, [r7, #6]
 800e292:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ba:	d107      	bne.n	800e2cc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d6:	2b40      	cmp	r3, #64	; 0x40
 800e2d8:	d007      	beq.n	800e2ea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2f2:	d14b      	bne.n	800e38c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <HAL_SPI_Transmit+0xe6>
 800e2fc:	8afb      	ldrh	r3, [r7, #22]
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d13e      	bne.n	800e380 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e306:	881a      	ldrh	r2, [r3, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	1c9a      	adds	r2, r3, #2
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	b29a      	uxth	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e326:	e02b      	b.n	800e380 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	f003 0302 	and.w	r3, r3, #2
 800e332:	2b02      	cmp	r3, #2
 800e334:	d112      	bne.n	800e35c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e33a:	881a      	ldrh	r2, [r3, #0]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e346:	1c9a      	adds	r2, r3, #2
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e350:	b29b      	uxth	r3, r3
 800e352:	3b01      	subs	r3, #1
 800e354:	b29a      	uxth	r2, r3
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	86da      	strh	r2, [r3, #54]	; 0x36
 800e35a:	e011      	b.n	800e380 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e35c:	f7fb fb0c 	bl	8009978 <HAL_GetTick>
 800e360:	4602      	mov	r2, r0
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	683a      	ldr	r2, [r7, #0]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d803      	bhi.n	800e374 <HAL_SPI_Transmit+0x158>
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e372:	d102      	bne.n	800e37a <HAL_SPI_Transmit+0x15e>
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d102      	bne.n	800e380 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e37a:	2303      	movs	r3, #3
 800e37c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e37e:	e074      	b.n	800e46a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e384:	b29b      	uxth	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1ce      	bne.n	800e328 <HAL_SPI_Transmit+0x10c>
 800e38a:	e04c      	b.n	800e426 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d002      	beq.n	800e39a <HAL_SPI_Transmit+0x17e>
 800e394:	8afb      	ldrh	r3, [r7, #22]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d140      	bne.n	800e41c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	330c      	adds	r3, #12
 800e3a4:	7812      	ldrb	r2, [r2, #0]
 800e3a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e3c0:	e02c      	b.n	800e41c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d113      	bne.n	800e3f8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	330c      	adds	r3, #12
 800e3da:	7812      	ldrb	r2, [r2, #0]
 800e3dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	86da      	strh	r2, [r3, #54]	; 0x36
 800e3f6:	e011      	b.n	800e41c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3f8:	f7fb fabe 	bl	8009978 <HAL_GetTick>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	429a      	cmp	r2, r3
 800e406:	d803      	bhi.n	800e410 <HAL_SPI_Transmit+0x1f4>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40e:	d102      	bne.n	800e416 <HAL_SPI_Transmit+0x1fa>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d102      	bne.n	800e41c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e416:	2303      	movs	r3, #3
 800e418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e41a:	e026      	b.n	800e46a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e420:	b29b      	uxth	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1cd      	bne.n	800e3c2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	6839      	ldr	r1, [r7, #0]
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f000 fba4 	bl	800eb78 <SPI_EndRxTxTransaction>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2220      	movs	r2, #32
 800e43a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e444:	2300      	movs	r3, #0
 800e446:	613b      	str	r3, [r7, #16]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	613b      	str	r3, [r7, #16]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d002      	beq.n	800e468 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	77fb      	strb	r3, [r7, #31]
 800e466:	e000      	b.n	800e46a <HAL_SPI_Transmit+0x24e>
  }

error:
 800e468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2201      	movs	r2, #1
 800e46e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e47a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3720      	adds	r7, #32
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b088      	sub	sp, #32
 800e488:	af02      	add	r7, sp, #8
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	603b      	str	r3, [r7, #0]
 800e490:	4613      	mov	r3, r2
 800e492:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e494:	2300      	movs	r3, #0
 800e496:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4a0:	d112      	bne.n	800e4c8 <HAL_SPI_Receive+0x44>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10e      	bne.n	800e4c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2204      	movs	r2, #4
 800e4ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e4b2:	88fa      	ldrh	r2, [r7, #6]
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	68b9      	ldr	r1, [r7, #8]
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f000 f8e9 	bl	800e696 <HAL_SPI_TransmitReceive>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	e0e2      	b.n	800e68e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d101      	bne.n	800e4d6 <HAL_SPI_Receive+0x52>
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	e0db      	b.n	800e68e <HAL_SPI_Receive+0x20a>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4de:	f7fb fa4b 	bl	8009978 <HAL_GetTick>
 800e4e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d002      	beq.n	800e4f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4f4:	e0c2      	b.n	800e67c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <HAL_SPI_Receive+0x7e>
 800e4fc:	88fb      	ldrh	r3, [r7, #6]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d102      	bne.n	800e508 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e506:	e0b9      	b.n	800e67c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2204      	movs	r2, #4
 800e50c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	88fa      	ldrh	r2, [r7, #6]
 800e520:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	88fa      	ldrh	r2, [r7, #6]
 800e526:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2200      	movs	r2, #0
 800e52c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e54e:	d107      	bne.n	800e560 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e55e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56a:	2b40      	cmp	r3, #64	; 0x40
 800e56c:	d007      	beq.n	800e57e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e57c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d162      	bne.n	800e64c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e586:	e02e      	b.n	800e5e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	2b01      	cmp	r3, #1
 800e594:	d115      	bne.n	800e5c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f103 020c 	add.w	r2, r3, #12
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5c0:	e011      	b.n	800e5e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5c2:	f7fb f9d9 	bl	8009978 <HAL_GetTick>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d803      	bhi.n	800e5da <HAL_SPI_Receive+0x156>
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d8:	d102      	bne.n	800e5e0 <HAL_SPI_Receive+0x15c>
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e5e0:	2303      	movs	r3, #3
 800e5e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e5e4:	e04a      	b.n	800e67c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d1cb      	bne.n	800e588 <HAL_SPI_Receive+0x104>
 800e5f0:	e031      	b.n	800e656 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d113      	bne.n	800e628 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68da      	ldr	r2, [r3, #12]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	b292      	uxth	r2, r2
 800e60c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e612:	1c9a      	adds	r2, r3, #2
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	3b01      	subs	r3, #1
 800e620:	b29a      	uxth	r2, r3
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e626:	e011      	b.n	800e64c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e628:	f7fb f9a6 	bl	8009978 <HAL_GetTick>
 800e62c:	4602      	mov	r2, r0
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	d803      	bhi.n	800e640 <HAL_SPI_Receive+0x1bc>
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63e:	d102      	bne.n	800e646 <HAL_SPI_Receive+0x1c2>
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d102      	bne.n	800e64c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e64a:	e017      	b.n	800e67c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1cd      	bne.n	800e5f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	6839      	ldr	r1, [r7, #0]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 fa27 	bl	800eaae <SPI_EndRxTransaction>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2220      	movs	r2, #32
 800e66a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	75fb      	strb	r3, [r7, #23]
 800e678:	e000      	b.n	800e67c <HAL_SPI_Receive+0x1f8>
  }

error :
 800e67a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3718      	adds	r7, #24
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b08c      	sub	sp, #48	; 0x30
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	60b9      	str	r1, [r7, #8]
 800e6a0:	607a      	str	r2, [r7, #4]
 800e6a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d101      	bne.n	800e6bc <HAL_SPI_TransmitReceive+0x26>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	e18a      	b.n	800e9d2 <HAL_SPI_TransmitReceive+0x33c>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6c4:	f7fb f958 	bl	8009978 <HAL_GetTick>
 800e6c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e6da:	887b      	ldrh	r3, [r7, #2]
 800e6dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e6de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d00f      	beq.n	800e706 <HAL_SPI_TransmitReceive+0x70>
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6ec:	d107      	bne.n	800e6fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d103      	bne.n	800e6fe <HAL_SPI_TransmitReceive+0x68>
 800e6f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6fa:	2b04      	cmp	r3, #4
 800e6fc:	d003      	beq.n	800e706 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e6fe:	2302      	movs	r3, #2
 800e700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e704:	e15b      	b.n	800e9be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d005      	beq.n	800e718 <HAL_SPI_TransmitReceive+0x82>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d002      	beq.n	800e718 <HAL_SPI_TransmitReceive+0x82>
 800e712:	887b      	ldrh	r3, [r7, #2]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d103      	bne.n	800e720 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e71e:	e14e      	b.n	800e9be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b04      	cmp	r3, #4
 800e72a:	d003      	beq.n	800e734 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2205      	movs	r2, #5
 800e730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	887a      	ldrh	r2, [r7, #2]
 800e744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	887a      	ldrh	r2, [r7, #2]
 800e74a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	887a      	ldrh	r2, [r7, #2]
 800e756:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	887a      	ldrh	r2, [r7, #2]
 800e75c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e774:	2b40      	cmp	r3, #64	; 0x40
 800e776:	d007      	beq.n	800e788 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e786:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e790:	d178      	bne.n	800e884 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <HAL_SPI_TransmitReceive+0x10a>
 800e79a:	8b7b      	ldrh	r3, [r7, #26]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d166      	bne.n	800e86e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a4:	881a      	ldrh	r2, [r3, #0]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b0:	1c9a      	adds	r2, r3, #2
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7c4:	e053      	b.n	800e86e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	f003 0302 	and.w	r3, r3, #2
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d11b      	bne.n	800e80c <HAL_SPI_TransmitReceive+0x176>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d016      	beq.n	800e80c <HAL_SPI_TransmitReceive+0x176>
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d113      	bne.n	800e80c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e8:	881a      	ldrh	r2, [r3, #0]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f4:	1c9a      	adds	r2, r3, #2
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	3b01      	subs	r3, #1
 800e802:	b29a      	uxth	r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e808:	2300      	movs	r3, #0
 800e80a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	2b01      	cmp	r3, #1
 800e818:	d119      	bne.n	800e84e <HAL_SPI_TransmitReceive+0x1b8>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e81e:	b29b      	uxth	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d014      	beq.n	800e84e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	68da      	ldr	r2, [r3, #12]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82e:	b292      	uxth	r2, r2
 800e830:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e836:	1c9a      	adds	r2, r3, #2
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e840:	b29b      	uxth	r3, r3
 800e842:	3b01      	subs	r3, #1
 800e844:	b29a      	uxth	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e84a:	2301      	movs	r3, #1
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e84e:	f7fb f893 	bl	8009978 <HAL_GetTick>
 800e852:	4602      	mov	r2, r0
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d807      	bhi.n	800e86e <HAL_SPI_TransmitReceive+0x1d8>
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e864:	d003      	beq.n	800e86e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e866:	2303      	movs	r3, #3
 800e868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e86c:	e0a7      	b.n	800e9be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e872:	b29b      	uxth	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1a6      	bne.n	800e7c6 <HAL_SPI_TransmitReceive+0x130>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1a1      	bne.n	800e7c6 <HAL_SPI_TransmitReceive+0x130>
 800e882:	e07c      	b.n	800e97e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d002      	beq.n	800e892 <HAL_SPI_TransmitReceive+0x1fc>
 800e88c:	8b7b      	ldrh	r3, [r7, #26]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d16b      	bne.n	800e96a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	330c      	adds	r3, #12
 800e89c:	7812      	ldrb	r2, [r2, #0]
 800e89e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a4:	1c5a      	adds	r2, r3, #1
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e8b8:	e057      	b.n	800e96a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	f003 0302 	and.w	r3, r3, #2
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d11c      	bne.n	800e902 <HAL_SPI_TransmitReceive+0x26c>
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d017      	beq.n	800e902 <HAL_SPI_TransmitReceive+0x26c>
 800e8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d114      	bne.n	800e902 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	330c      	adds	r3, #12
 800e8e2:	7812      	ldrb	r2, [r2, #0]
 800e8e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	1c5a      	adds	r2, r3, #1
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	f003 0301 	and.w	r3, r3, #1
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d119      	bne.n	800e944 <HAL_SPI_TransmitReceive+0x2ae>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e914:	b29b      	uxth	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d014      	beq.n	800e944 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68da      	ldr	r2, [r3, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e924:	b2d2      	uxtb	r2, r2
 800e926:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e92c:	1c5a      	adds	r2, r3, #1
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e936:	b29b      	uxth	r3, r3
 800e938:	3b01      	subs	r3, #1
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e940:	2301      	movs	r3, #1
 800e942:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e944:	f7fb f818 	bl	8009978 <HAL_GetTick>
 800e948:	4602      	mov	r2, r0
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e950:	429a      	cmp	r2, r3
 800e952:	d803      	bhi.n	800e95c <HAL_SPI_TransmitReceive+0x2c6>
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e95a:	d102      	bne.n	800e962 <HAL_SPI_TransmitReceive+0x2cc>
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d103      	bne.n	800e96a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e968:	e029      	b.n	800e9be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e96e:	b29b      	uxth	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1a2      	bne.n	800e8ba <HAL_SPI_TransmitReceive+0x224>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e978:	b29b      	uxth	r3, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d19d      	bne.n	800e8ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e980:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f000 f8f8 	bl	800eb78 <SPI_EndRxTxTransaction>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d006      	beq.n	800e99c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2220      	movs	r2, #32
 800e998:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e99a:	e010      	b.n	800e9be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10b      	bne.n	800e9bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	617b      	str	r3, [r7, #20]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	617b      	str	r3, [r7, #20]
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	e000      	b.n	800e9be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e9bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3730      	adds	r7, #48	; 0x30
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b084      	sub	sp, #16
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	60b9      	str	r1, [r7, #8]
 800e9e4:	603b      	str	r3, [r7, #0]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9ea:	e04c      	b.n	800ea86 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f2:	d048      	beq.n	800ea86 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e9f4:	f7fa ffc0 	bl	8009978 <HAL_GetTick>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d902      	bls.n	800ea0a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d13d      	bne.n	800ea86 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	685a      	ldr	r2, [r3, #4]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ea18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea22:	d111      	bne.n	800ea48 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea2c:	d004      	beq.n	800ea38 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea36:	d107      	bne.n	800ea48 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea50:	d10f      	bne.n	800ea72 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2201      	movs	r2, #1
 800ea76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ea82:	2303      	movs	r3, #3
 800ea84:	e00f      	b.n	800eaa6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	689a      	ldr	r2, [r3, #8]
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	4013      	ands	r3, r2
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	bf0c      	ite	eq
 800ea96:	2301      	moveq	r3, #1
 800ea98:	2300      	movne	r3, #0
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d1a3      	bne.n	800e9ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af02      	add	r7, sp, #8
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eac2:	d111      	bne.n	800eae8 <SPI_EndRxTransaction+0x3a>
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eacc:	d004      	beq.n	800ead8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ead6:	d107      	bne.n	800eae8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eae6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaf0:	d12a      	bne.n	800eb48 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eafa:	d012      	beq.n	800eb22 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2200      	movs	r2, #0
 800eb04:	2180      	movs	r1, #128	; 0x80
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7ff ff67 	bl	800e9da <SPI_WaitFlagStateUntilTimeout>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d02d      	beq.n	800eb6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb16:	f043 0220 	orr.w	r2, r3, #32
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	e026      	b.n	800eb70 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f7ff ff54 	bl	800e9da <SPI_WaitFlagStateUntilTimeout>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d01a      	beq.n	800eb6e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb3c:	f043 0220 	orr.w	r2, r3, #32
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb44:	2303      	movs	r3, #3
 800eb46:	e013      	b.n	800eb70 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2101      	movs	r1, #1
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f7ff ff41 	bl	800e9da <SPI_WaitFlagStateUntilTimeout>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d007      	beq.n	800eb6e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb62:	f043 0220 	orr.w	r2, r3, #32
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	e000      	b.n	800eb70 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b088      	sub	sp, #32
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb84:	4b1b      	ldr	r3, [pc, #108]	; (800ebf4 <SPI_EndRxTxTransaction+0x7c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a1b      	ldr	r2, [pc, #108]	; (800ebf8 <SPI_EndRxTxTransaction+0x80>)
 800eb8a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb8e:	0d5b      	lsrs	r3, r3, #21
 800eb90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb94:	fb02 f303 	mul.w	r3, r2, r3
 800eb98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eba2:	d112      	bne.n	800ebca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	2180      	movs	r1, #128	; 0x80
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f7ff ff13 	bl	800e9da <SPI_WaitFlagStateUntilTimeout>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d016      	beq.n	800ebe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebbe:	f043 0220 	orr.w	r2, r3, #32
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	e00f      	b.n	800ebea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00a      	beq.n	800ebe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe0:	2b80      	cmp	r3, #128	; 0x80
 800ebe2:	d0f2      	beq.n	800ebca <SPI_EndRxTxTransaction+0x52>
 800ebe4:	e000      	b.n	800ebe8 <SPI_EndRxTxTransaction+0x70>
        break;
 800ebe6:	bf00      	nop
  }

  return HAL_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3718      	adds	r7, #24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20000000 	.word	0x20000000
 800ebf8:	165e9f81 	.word	0x165e9f81

0800ebfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d101      	bne.n	800ec0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e01d      	b.n	800ec4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7f8 fa46 	bl	80070b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3304      	adds	r3, #4
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	f000 fb56 	bl	800f2ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b085      	sub	sp, #20
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68da      	ldr	r2, [r3, #12]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f042 0201 	orr.w	r2, r2, #1
 800ec68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	f003 0307 	and.w	r3, r3, #7
 800ec74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b06      	cmp	r3, #6
 800ec7a:	d007      	beq.n	800ec8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f042 0201 	orr.w	r2, r2, #1
 800ec8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr

0800ec9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b082      	sub	sp, #8
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e01d      	b.n	800ece8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d106      	bne.n	800ecc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7f8 f983 	bl	8006fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2202      	movs	r2, #2
 800ecca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3304      	adds	r3, #4
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	4610      	mov	r0, r2
 800ecda:	f000 fb07 	bl	800f2ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 fd42 	bl	800f78c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a15      	ldr	r2, [pc, #84]	; (800ed64 <HAL_TIM_PWM_Start+0x74>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d004      	beq.n	800ed1c <HAL_TIM_PWM_Start+0x2c>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a14      	ldr	r2, [pc, #80]	; (800ed68 <HAL_TIM_PWM_Start+0x78>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d101      	bne.n	800ed20 <HAL_TIM_PWM_Start+0x30>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e000      	b.n	800ed22 <HAL_TIM_PWM_Start+0x32>
 800ed20:	2300      	movs	r3, #0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d007      	beq.n	800ed36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	f003 0307 	and.w	r3, r3, #7
 800ed40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2b06      	cmp	r3, #6
 800ed46:	d007      	beq.n	800ed58 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f042 0201 	orr.w	r2, r2, #1
 800ed56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	40010000 	.word	0x40010000
 800ed68:	40010400 	.word	0x40010400

0800ed6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d101      	bne.n	800ed80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e083      	b.n	800ee88 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d106      	bne.n	800ed9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7f8 fa1d 	bl	80071d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2202      	movs	r2, #2
 800ed9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	6812      	ldr	r2, [r2, #0]
 800edac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edb0:	f023 0307 	bic.w	r3, r3, #7
 800edb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f000 fa93 	bl	800f2ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	699b      	ldr	r3, [r3, #24]
 800edd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	6a1b      	ldr	r3, [r3, #32]
 800eddc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edee:	f023 0303 	bic.w	r3, r3, #3
 800edf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	689a      	ldr	r2, [r3, #8]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	021b      	lsls	r3, r3, #8
 800edfe:	4313      	orrs	r3, r2
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ee0c:	f023 030c 	bic.w	r3, r3, #12
 800ee10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	68da      	ldr	r2, [r3, #12]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	69db      	ldr	r3, [r3, #28]
 800ee26:	021b      	lsls	r3, r3, #8
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	693a      	ldr	r2, [r7, #16]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	011a      	lsls	r2, r3, #4
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	6a1b      	ldr	r3, [r3, #32]
 800ee3a:	031b      	lsls	r3, r3, #12
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	693a      	ldr	r2, [r7, #16]
 800ee40:	4313      	orrs	r3, r2
 800ee42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ee4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ee52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	695b      	ldr	r3, [r3, #20]
 800ee5c:	011b      	lsls	r3, r3, #4
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	693a      	ldr	r2, [r7, #16]
 800ee74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68fa      	ldr	r2, [r7, #12]
 800ee7c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <HAL_TIM_Encoder_Start+0x16>
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	d008      	beq.n	800eeb6 <HAL_TIM_Encoder_Start+0x26>
 800eea4:	e00f      	b.n	800eec6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	2100      	movs	r1, #0
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f000 fc6c 	bl	800f78c <TIM_CCxChannelCmd>
      break;
 800eeb4:	e016      	b.n	800eee4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2201      	movs	r2, #1
 800eebc:	2104      	movs	r1, #4
 800eebe:	4618      	mov	r0, r3
 800eec0:	f000 fc64 	bl	800f78c <TIM_CCxChannelCmd>
      break;
 800eec4:	e00e      	b.n	800eee4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2201      	movs	r2, #1
 800eecc:	2100      	movs	r1, #0
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 fc5c 	bl	800f78c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2201      	movs	r2, #1
 800eeda:	2104      	movs	r1, #4
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fc55 	bl	800f78c <TIM_CCxChannelCmd>
      break;
 800eee2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f042 0201 	orr.w	r2, r2, #1
 800eef2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	691b      	ldr	r3, [r3, #16]
 800ef0c:	f003 0302 	and.w	r3, r3, #2
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d122      	bne.n	800ef5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f003 0302 	and.w	r3, r3, #2
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d11b      	bne.n	800ef5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f06f 0202 	mvn.w	r2, #2
 800ef2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d003      	beq.n	800ef48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f9b5 	bl	800f2b0 <HAL_TIM_IC_CaptureCallback>
 800ef46:	e005      	b.n	800ef54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f9a7 	bl	800f29c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f9b8 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	f003 0304 	and.w	r3, r3, #4
 800ef64:	2b04      	cmp	r3, #4
 800ef66:	d122      	bne.n	800efae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	f003 0304 	and.w	r3, r3, #4
 800ef72:	2b04      	cmp	r3, #4
 800ef74:	d11b      	bne.n	800efae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f06f 0204 	mvn.w	r2, #4
 800ef7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d003      	beq.n	800ef9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 f98b 	bl	800f2b0 <HAL_TIM_IC_CaptureCallback>
 800ef9a:	e005      	b.n	800efa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 f97d 	bl	800f29c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f98e 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	f003 0308 	and.w	r3, r3, #8
 800efb8:	2b08      	cmp	r3, #8
 800efba:	d122      	bne.n	800f002 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	f003 0308 	and.w	r3, r3, #8
 800efc6:	2b08      	cmp	r3, #8
 800efc8:	d11b      	bne.n	800f002 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f06f 0208 	mvn.w	r2, #8
 800efd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2204      	movs	r2, #4
 800efd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	f003 0303 	and.w	r3, r3, #3
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d003      	beq.n	800eff0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 f961 	bl	800f2b0 <HAL_TIM_IC_CaptureCallback>
 800efee:	e005      	b.n	800effc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f953 	bl	800f29c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f964 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	691b      	ldr	r3, [r3, #16]
 800f008:	f003 0310 	and.w	r3, r3, #16
 800f00c:	2b10      	cmp	r3, #16
 800f00e:	d122      	bne.n	800f056 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	f003 0310 	and.w	r3, r3, #16
 800f01a:	2b10      	cmp	r3, #16
 800f01c:	d11b      	bne.n	800f056 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f06f 0210 	mvn.w	r2, #16
 800f026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2208      	movs	r2, #8
 800f02c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	69db      	ldr	r3, [r3, #28]
 800f034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d003      	beq.n	800f044 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 f937 	bl	800f2b0 <HAL_TIM_IC_CaptureCallback>
 800f042:	e005      	b.n	800f050 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f000 f929 	bl	800f29c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 f93a 	bl	800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	f003 0301 	and.w	r3, r3, #1
 800f060:	2b01      	cmp	r3, #1
 800f062:	d10e      	bne.n	800f082 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d107      	bne.n	800f082 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f06f 0201 	mvn.w	r2, #1
 800f07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f7f6 fd93 	bl	8005ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f08c:	2b80      	cmp	r3, #128	; 0x80
 800f08e:	d10e      	bne.n	800f0ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f09a:	2b80      	cmp	r3, #128	; 0x80
 800f09c:	d107      	bne.n	800f0ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fc6d 	bl	800f988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0b8:	2b40      	cmp	r3, #64	; 0x40
 800f0ba:	d10e      	bne.n	800f0da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c6:	2b40      	cmp	r3, #64	; 0x40
 800f0c8:	d107      	bne.n	800f0da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f8ff 	bl	800f2d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	f003 0320 	and.w	r3, r3, #32
 800f0e4:	2b20      	cmp	r3, #32
 800f0e6:	d10e      	bne.n	800f106 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	f003 0320 	and.w	r3, r3, #32
 800f0f2:	2b20      	cmp	r3, #32
 800f0f4:	d107      	bne.n	800f106 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f06f 0220 	mvn.w	r2, #32
 800f0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 fc37 	bl	800f974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f106:	bf00      	nop
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f122:	2b01      	cmp	r3, #1
 800f124:	d101      	bne.n	800f12a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f126:	2302      	movs	r3, #2
 800f128:	e0b4      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2201      	movs	r2, #1
 800f12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2202      	movs	r2, #2
 800f136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b0c      	cmp	r3, #12
 800f13e:	f200 809f 	bhi.w	800f280 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f142:	a201      	add	r2, pc, #4	; (adr r2, 800f148 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f148:	0800f17d 	.word	0x0800f17d
 800f14c:	0800f281 	.word	0x0800f281
 800f150:	0800f281 	.word	0x0800f281
 800f154:	0800f281 	.word	0x0800f281
 800f158:	0800f1bd 	.word	0x0800f1bd
 800f15c:	0800f281 	.word	0x0800f281
 800f160:	0800f281 	.word	0x0800f281
 800f164:	0800f281 	.word	0x0800f281
 800f168:	0800f1ff 	.word	0x0800f1ff
 800f16c:	0800f281 	.word	0x0800f281
 800f170:	0800f281 	.word	0x0800f281
 800f174:	0800f281 	.word	0x0800f281
 800f178:	0800f23f 	.word	0x0800f23f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	4618      	mov	r0, r3
 800f184:	f000 f952 	bl	800f42c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	699a      	ldr	r2, [r3, #24]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f042 0208 	orr.w	r2, r2, #8
 800f196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	699a      	ldr	r2, [r3, #24]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f022 0204 	bic.w	r2, r2, #4
 800f1a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6999      	ldr	r1, [r3, #24]
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	691a      	ldr	r2, [r3, #16]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	430a      	orrs	r2, r1
 800f1b8:	619a      	str	r2, [r3, #24]
      break;
 800f1ba:	e062      	b.n	800f282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68b9      	ldr	r1, [r7, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f9a2 	bl	800f50c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	699a      	ldr	r2, [r3, #24]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	699a      	ldr	r2, [r3, #24]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	6999      	ldr	r1, [r3, #24]
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	021a      	lsls	r2, r3, #8
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	430a      	orrs	r2, r1
 800f1fa:	619a      	str	r2, [r3, #24]
      break;
 800f1fc:	e041      	b.n	800f282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	68b9      	ldr	r1, [r7, #8]
 800f204:	4618      	mov	r0, r3
 800f206:	f000 f9f7 	bl	800f5f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	69da      	ldr	r2, [r3, #28]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f042 0208 	orr.w	r2, r2, #8
 800f218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69da      	ldr	r2, [r3, #28]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f022 0204 	bic.w	r2, r2, #4
 800f228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	69d9      	ldr	r1, [r3, #28]
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	691a      	ldr	r2, [r3, #16]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	430a      	orrs	r2, r1
 800f23a:	61da      	str	r2, [r3, #28]
      break;
 800f23c:	e021      	b.n	800f282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	4618      	mov	r0, r3
 800f246:	f000 fa4b 	bl	800f6e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69da      	ldr	r2, [r3, #28]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69d9      	ldr	r1, [r3, #28]
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	021a      	lsls	r2, r3, #8
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	430a      	orrs	r2, r1
 800f27c:	61da      	str	r2, [r3, #28]
      break;
 800f27e:	e000      	b.n	800f282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f280:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2201      	movs	r2, #1
 800f286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f292:	2300      	movs	r3, #0
}
 800f294:	4618      	mov	r0, r3
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a40      	ldr	r2, [pc, #256]	; (800f400 <TIM_Base_SetConfig+0x114>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d013      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f30a:	d00f      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a3d      	ldr	r2, [pc, #244]	; (800f404 <TIM_Base_SetConfig+0x118>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d00b      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a3c      	ldr	r2, [pc, #240]	; (800f408 <TIM_Base_SetConfig+0x11c>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d007      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a3b      	ldr	r2, [pc, #236]	; (800f40c <TIM_Base_SetConfig+0x120>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d003      	beq.n	800f32c <TIM_Base_SetConfig+0x40>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a3a      	ldr	r2, [pc, #232]	; (800f410 <TIM_Base_SetConfig+0x124>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d108      	bne.n	800f33e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	4313      	orrs	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a2f      	ldr	r2, [pc, #188]	; (800f400 <TIM_Base_SetConfig+0x114>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d02b      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f34c:	d027      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a2c      	ldr	r2, [pc, #176]	; (800f404 <TIM_Base_SetConfig+0x118>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d023      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a2b      	ldr	r2, [pc, #172]	; (800f408 <TIM_Base_SetConfig+0x11c>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d01f      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a2a      	ldr	r2, [pc, #168]	; (800f40c <TIM_Base_SetConfig+0x120>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d01b      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a29      	ldr	r2, [pc, #164]	; (800f410 <TIM_Base_SetConfig+0x124>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d017      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a28      	ldr	r2, [pc, #160]	; (800f414 <TIM_Base_SetConfig+0x128>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d013      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a27      	ldr	r2, [pc, #156]	; (800f418 <TIM_Base_SetConfig+0x12c>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d00f      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a26      	ldr	r2, [pc, #152]	; (800f41c <TIM_Base_SetConfig+0x130>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d00b      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a25      	ldr	r2, [pc, #148]	; (800f420 <TIM_Base_SetConfig+0x134>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d007      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a24      	ldr	r2, [pc, #144]	; (800f424 <TIM_Base_SetConfig+0x138>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d003      	beq.n	800f39e <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a23      	ldr	r2, [pc, #140]	; (800f428 <TIM_Base_SetConfig+0x13c>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d108      	bne.n	800f3b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	695b      	ldr	r3, [r3, #20]
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	689a      	ldr	r2, [r3, #8]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a0a      	ldr	r2, [pc, #40]	; (800f400 <TIM_Base_SetConfig+0x114>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d003      	beq.n	800f3e4 <TIM_Base_SetConfig+0xf8>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a0c      	ldr	r2, [pc, #48]	; (800f410 <TIM_Base_SetConfig+0x124>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d103      	bne.n	800f3ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	691a      	ldr	r2, [r3, #16]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	615a      	str	r2, [r3, #20]
}
 800f3f2:	bf00      	nop
 800f3f4:	3714      	adds	r7, #20
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	40010000 	.word	0x40010000
 800f404:	40000400 	.word	0x40000400
 800f408:	40000800 	.word	0x40000800
 800f40c:	40000c00 	.word	0x40000c00
 800f410:	40010400 	.word	0x40010400
 800f414:	40014000 	.word	0x40014000
 800f418:	40014400 	.word	0x40014400
 800f41c:	40014800 	.word	0x40014800
 800f420:	40001800 	.word	0x40001800
 800f424:	40001c00 	.word	0x40001c00
 800f428:	40002000 	.word	0x40002000

0800f42c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	f023 0201 	bic.w	r2, r3, #1
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	699b      	ldr	r3, [r3, #24]
 800f452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f45a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f023 0303 	bic.w	r3, r3, #3
 800f462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f023 0302 	bic.w	r3, r3, #2
 800f474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a20      	ldr	r2, [pc, #128]	; (800f504 <TIM_OC1_SetConfig+0xd8>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d003      	beq.n	800f490 <TIM_OC1_SetConfig+0x64>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a1f      	ldr	r2, [pc, #124]	; (800f508 <TIM_OC1_SetConfig+0xdc>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d10c      	bne.n	800f4aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f023 0308 	bic.w	r3, r3, #8
 800f496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	f023 0304 	bic.w	r3, r3, #4
 800f4a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a15      	ldr	r2, [pc, #84]	; (800f504 <TIM_OC1_SetConfig+0xd8>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d003      	beq.n	800f4ba <TIM_OC1_SetConfig+0x8e>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a14      	ldr	r2, [pc, #80]	; (800f508 <TIM_OC1_SetConfig+0xdc>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d111      	bne.n	800f4de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	4313      	orrs	r3, r2
 800f4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	621a      	str	r2, [r3, #32]
}
 800f4f8:	bf00      	nop
 800f4fa:	371c      	adds	r7, #28
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	40010000 	.word	0x40010000
 800f508:	40010400 	.word	0x40010400

0800f50c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b087      	sub	sp, #28
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	f023 0210 	bic.w	r2, r3, #16
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	699b      	ldr	r3, [r3, #24]
 800f532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f53a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	021b      	lsls	r3, r3, #8
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	4313      	orrs	r3, r2
 800f54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	f023 0320 	bic.w	r3, r3, #32
 800f556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	011b      	lsls	r3, r3, #4
 800f55e:	697a      	ldr	r2, [r7, #20]
 800f560:	4313      	orrs	r3, r2
 800f562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a22      	ldr	r2, [pc, #136]	; (800f5f0 <TIM_OC2_SetConfig+0xe4>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d003      	beq.n	800f574 <TIM_OC2_SetConfig+0x68>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a21      	ldr	r2, [pc, #132]	; (800f5f4 <TIM_OC2_SetConfig+0xe8>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d10d      	bne.n	800f590 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f57a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	011b      	lsls	r3, r3, #4
 800f582:	697a      	ldr	r2, [r7, #20]
 800f584:	4313      	orrs	r3, r2
 800f586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f58e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a17      	ldr	r2, [pc, #92]	; (800f5f0 <TIM_OC2_SetConfig+0xe4>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_OC2_SetConfig+0x94>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a16      	ldr	r2, [pc, #88]	; (800f5f4 <TIM_OC2_SetConfig+0xe8>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d113      	bne.n	800f5c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	695b      	ldr	r3, [r3, #20]
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	699b      	ldr	r3, [r3, #24]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	693a      	ldr	r2, [r7, #16]
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	693a      	ldr	r2, [r7, #16]
 800f5cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	685a      	ldr	r2, [r3, #4]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	621a      	str	r2, [r3, #32]
}
 800f5e2:	bf00      	nop
 800f5e4:	371c      	adds	r7, #28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	40010000 	.word	0x40010000
 800f5f4:	40010400 	.word	0x40010400

0800f5f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6a1b      	ldr	r3, [r3, #32]
 800f606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a1b      	ldr	r3, [r3, #32]
 800f612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	69db      	ldr	r3, [r3, #28]
 800f61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f023 0303 	bic.w	r3, r3, #3
 800f62e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	4313      	orrs	r3, r2
 800f638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	021b      	lsls	r3, r3, #8
 800f648:	697a      	ldr	r2, [r7, #20]
 800f64a:	4313      	orrs	r3, r2
 800f64c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a21      	ldr	r2, [pc, #132]	; (800f6d8 <TIM_OC3_SetConfig+0xe0>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d003      	beq.n	800f65e <TIM_OC3_SetConfig+0x66>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a20      	ldr	r2, [pc, #128]	; (800f6dc <TIM_OC3_SetConfig+0xe4>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d10d      	bne.n	800f67a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	021b      	lsls	r3, r3, #8
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	4313      	orrs	r3, r2
 800f670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4a16      	ldr	r2, [pc, #88]	; (800f6d8 <TIM_OC3_SetConfig+0xe0>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d003      	beq.n	800f68a <TIM_OC3_SetConfig+0x92>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a15      	ldr	r2, [pc, #84]	; (800f6dc <TIM_OC3_SetConfig+0xe4>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d113      	bne.n	800f6b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	695b      	ldr	r3, [r3, #20]
 800f69e:	011b      	lsls	r3, r3, #4
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	011b      	lsls	r3, r3, #4
 800f6ac:	693a      	ldr	r2, [r7, #16]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	685a      	ldr	r2, [r3, #4]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	621a      	str	r2, [r3, #32]
}
 800f6cc:	bf00      	nop
 800f6ce:	371c      	adds	r7, #28
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	40010000 	.word	0x40010000
 800f6dc:	40010400 	.word	0x40010400

0800f6e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b087      	sub	sp, #28
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	021b      	lsls	r3, r3, #8
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	4313      	orrs	r3, r2
 800f722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f72a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	031b      	lsls	r3, r3, #12
 800f732:	693a      	ldr	r2, [r7, #16]
 800f734:	4313      	orrs	r3, r2
 800f736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a12      	ldr	r2, [pc, #72]	; (800f784 <TIM_OC4_SetConfig+0xa4>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d003      	beq.n	800f748 <TIM_OC4_SetConfig+0x68>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a11      	ldr	r2, [pc, #68]	; (800f788 <TIM_OC4_SetConfig+0xa8>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d109      	bne.n	800f75c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f74e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	695b      	ldr	r3, [r3, #20]
 800f754:	019b      	lsls	r3, r3, #6
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	4313      	orrs	r3, r2
 800f75a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	697a      	ldr	r2, [r7, #20]
 800f760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	621a      	str	r2, [r3, #32]
}
 800f776:	bf00      	nop
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	40010000 	.word	0x40010000
 800f788:	40010400 	.word	0x40010400

0800f78c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f003 031f 	and.w	r3, r3, #31
 800f79e:	2201      	movs	r2, #1
 800f7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6a1a      	ldr	r2, [r3, #32]
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	43db      	mvns	r3, r3
 800f7ae:	401a      	ands	r2, r3
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6a1a      	ldr	r2, [r3, #32]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	f003 031f 	and.w	r3, r3, #31
 800f7be:	6879      	ldr	r1, [r7, #4]
 800f7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f7c4:	431a      	orrs	r2, r3
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	621a      	str	r2, [r3, #32]
}
 800f7ca:	bf00      	nop
 800f7cc:	371c      	adds	r7, #28
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
	...

0800f7d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d101      	bne.n	800f7f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	e05a      	b.n	800f8a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2202      	movs	r2, #2
 800f7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	4313      	orrs	r3, r2
 800f820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a21      	ldr	r2, [pc, #132]	; (800f8b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d022      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f83c:	d01d      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a1d      	ldr	r2, [pc, #116]	; (800f8b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d018      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a1b      	ldr	r2, [pc, #108]	; (800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d013      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a1a      	ldr	r2, [pc, #104]	; (800f8c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d00e      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a18      	ldr	r2, [pc, #96]	; (800f8c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d009      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a17      	ldr	r2, [pc, #92]	; (800f8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d004      	beq.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a15      	ldr	r2, [pc, #84]	; (800f8cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d10c      	bne.n	800f894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	4313      	orrs	r3, r2
 800f88a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3714      	adds	r7, #20
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	40010000 	.word	0x40010000
 800f8b8:	40000400 	.word	0x40000400
 800f8bc:	40000800 	.word	0x40000800
 800f8c0:	40000c00 	.word	0x40000c00
 800f8c4:	40010400 	.word	0x40010400
 800f8c8:	40014000 	.word	0x40014000
 800f8cc:	40001800 	.word	0x40001800

0800f8d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d101      	bne.n	800f8ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	e03d      	b.n	800f968 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4313      	orrs	r3, r2
 800f92a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	4313      	orrs	r3, r2
 800f938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	695b      	ldr	r3, [r3, #20]
 800f944:	4313      	orrs	r3, r2
 800f946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	69db      	ldr	r3, [r3, #28]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f966:	2300      	movs	r3, #0
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3714      	adds	r7, #20
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f990:	bf00      	nop
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e03f      	b.n	800fa2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7f7 fd30 	bl	8007428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2224      	movs	r2, #36	; 0x24
 800f9cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68da      	ldr	r2, [r3, #12]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 f829 	bl	800fa38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	691a      	ldr	r2, [r3, #16]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	695a      	ldr	r2, [r3, #20]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	68da      	ldr	r2, [r3, #12]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2220      	movs	r2, #32
 800fa20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2220      	movs	r2, #32
 800fa28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3c:	b085      	sub	sp, #20
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	691b      	ldr	r3, [r3, #16]
 800fa48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68da      	ldr	r2, [r3, #12]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	430a      	orrs	r2, r1
 800fa56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	689a      	ldr	r2, [r3, #8]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	431a      	orrs	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	695b      	ldr	r3, [r3, #20]
 800fa66:	431a      	orrs	r2, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	69db      	ldr	r3, [r3, #28]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fa7a:	f023 030c 	bic.w	r3, r3, #12
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	6812      	ldr	r2, [r2, #0]
 800fa82:	68f9      	ldr	r1, [r7, #12]
 800fa84:	430b      	orrs	r3, r1
 800fa86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	699a      	ldr	r2, [r3, #24]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	69db      	ldr	r3, [r3, #28]
 800faa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faa6:	f040 818b 	bne.w	800fdc0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4ac1      	ldr	r2, [pc, #772]	; (800fdb4 <UART_SetConfig+0x37c>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d005      	beq.n	800fac0 <UART_SetConfig+0x88>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4abf      	ldr	r2, [pc, #764]	; (800fdb8 <UART_SetConfig+0x380>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	f040 80bd 	bne.w	800fc3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fac0:	f7fc fbcc 	bl	800c25c <HAL_RCC_GetPCLK2Freq>
 800fac4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	461d      	mov	r5, r3
 800faca:	f04f 0600 	mov.w	r6, #0
 800face:	46a8      	mov	r8, r5
 800fad0:	46b1      	mov	r9, r6
 800fad2:	eb18 0308 	adds.w	r3, r8, r8
 800fad6:	eb49 0409 	adc.w	r4, r9, r9
 800fada:	4698      	mov	r8, r3
 800fadc:	46a1      	mov	r9, r4
 800fade:	eb18 0805 	adds.w	r8, r8, r5
 800fae2:	eb49 0906 	adc.w	r9, r9, r6
 800fae6:	f04f 0100 	mov.w	r1, #0
 800faea:	f04f 0200 	mov.w	r2, #0
 800faee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800faf2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800faf6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fafa:	4688      	mov	r8, r1
 800fafc:	4691      	mov	r9, r2
 800fafe:	eb18 0005 	adds.w	r0, r8, r5
 800fb02:	eb49 0106 	adc.w	r1, r9, r6
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	461d      	mov	r5, r3
 800fb0c:	f04f 0600 	mov.w	r6, #0
 800fb10:	196b      	adds	r3, r5, r5
 800fb12:	eb46 0406 	adc.w	r4, r6, r6
 800fb16:	461a      	mov	r2, r3
 800fb18:	4623      	mov	r3, r4
 800fb1a:	f7f1 f8cd 	bl	8000cb8 <__aeabi_uldivmod>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	460c      	mov	r4, r1
 800fb22:	461a      	mov	r2, r3
 800fb24:	4ba5      	ldr	r3, [pc, #660]	; (800fdbc <UART_SetConfig+0x384>)
 800fb26:	fba3 2302 	umull	r2, r3, r3, r2
 800fb2a:	095b      	lsrs	r3, r3, #5
 800fb2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	461d      	mov	r5, r3
 800fb34:	f04f 0600 	mov.w	r6, #0
 800fb38:	46a9      	mov	r9, r5
 800fb3a:	46b2      	mov	sl, r6
 800fb3c:	eb19 0309 	adds.w	r3, r9, r9
 800fb40:	eb4a 040a 	adc.w	r4, sl, sl
 800fb44:	4699      	mov	r9, r3
 800fb46:	46a2      	mov	sl, r4
 800fb48:	eb19 0905 	adds.w	r9, r9, r5
 800fb4c:	eb4a 0a06 	adc.w	sl, sl, r6
 800fb50:	f04f 0100 	mov.w	r1, #0
 800fb54:	f04f 0200 	mov.w	r2, #0
 800fb58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb64:	4689      	mov	r9, r1
 800fb66:	4692      	mov	sl, r2
 800fb68:	eb19 0005 	adds.w	r0, r9, r5
 800fb6c:	eb4a 0106 	adc.w	r1, sl, r6
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	461d      	mov	r5, r3
 800fb76:	f04f 0600 	mov.w	r6, #0
 800fb7a:	196b      	adds	r3, r5, r5
 800fb7c:	eb46 0406 	adc.w	r4, r6, r6
 800fb80:	461a      	mov	r2, r3
 800fb82:	4623      	mov	r3, r4
 800fb84:	f7f1 f898 	bl	8000cb8 <__aeabi_uldivmod>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	460c      	mov	r4, r1
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4b8b      	ldr	r3, [pc, #556]	; (800fdbc <UART_SetConfig+0x384>)
 800fb90:	fba3 1302 	umull	r1, r3, r3, r2
 800fb94:	095b      	lsrs	r3, r3, #5
 800fb96:	2164      	movs	r1, #100	; 0x64
 800fb98:	fb01 f303 	mul.w	r3, r1, r3
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	00db      	lsls	r3, r3, #3
 800fba0:	3332      	adds	r3, #50	; 0x32
 800fba2:	4a86      	ldr	r2, [pc, #536]	; (800fdbc <UART_SetConfig+0x384>)
 800fba4:	fba2 2303 	umull	r2, r3, r2, r3
 800fba8:	095b      	lsrs	r3, r3, #5
 800fbaa:	005b      	lsls	r3, r3, #1
 800fbac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fbb0:	4498      	add	r8, r3
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	461d      	mov	r5, r3
 800fbb6:	f04f 0600 	mov.w	r6, #0
 800fbba:	46a9      	mov	r9, r5
 800fbbc:	46b2      	mov	sl, r6
 800fbbe:	eb19 0309 	adds.w	r3, r9, r9
 800fbc2:	eb4a 040a 	adc.w	r4, sl, sl
 800fbc6:	4699      	mov	r9, r3
 800fbc8:	46a2      	mov	sl, r4
 800fbca:	eb19 0905 	adds.w	r9, r9, r5
 800fbce:	eb4a 0a06 	adc.w	sl, sl, r6
 800fbd2:	f04f 0100 	mov.w	r1, #0
 800fbd6:	f04f 0200 	mov.w	r2, #0
 800fbda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbe6:	4689      	mov	r9, r1
 800fbe8:	4692      	mov	sl, r2
 800fbea:	eb19 0005 	adds.w	r0, r9, r5
 800fbee:	eb4a 0106 	adc.w	r1, sl, r6
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	461d      	mov	r5, r3
 800fbf8:	f04f 0600 	mov.w	r6, #0
 800fbfc:	196b      	adds	r3, r5, r5
 800fbfe:	eb46 0406 	adc.w	r4, r6, r6
 800fc02:	461a      	mov	r2, r3
 800fc04:	4623      	mov	r3, r4
 800fc06:	f7f1 f857 	bl	8000cb8 <__aeabi_uldivmod>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	460c      	mov	r4, r1
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4b6a      	ldr	r3, [pc, #424]	; (800fdbc <UART_SetConfig+0x384>)
 800fc12:	fba3 1302 	umull	r1, r3, r3, r2
 800fc16:	095b      	lsrs	r3, r3, #5
 800fc18:	2164      	movs	r1, #100	; 0x64
 800fc1a:	fb01 f303 	mul.w	r3, r1, r3
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	00db      	lsls	r3, r3, #3
 800fc22:	3332      	adds	r3, #50	; 0x32
 800fc24:	4a65      	ldr	r2, [pc, #404]	; (800fdbc <UART_SetConfig+0x384>)
 800fc26:	fba2 2303 	umull	r2, r3, r2, r3
 800fc2a:	095b      	lsrs	r3, r3, #5
 800fc2c:	f003 0207 	and.w	r2, r3, #7
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4442      	add	r2, r8
 800fc36:	609a      	str	r2, [r3, #8]
 800fc38:	e26f      	b.n	801011a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fc3a:	f7fc fafb 	bl	800c234 <HAL_RCC_GetPCLK1Freq>
 800fc3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	461d      	mov	r5, r3
 800fc44:	f04f 0600 	mov.w	r6, #0
 800fc48:	46a8      	mov	r8, r5
 800fc4a:	46b1      	mov	r9, r6
 800fc4c:	eb18 0308 	adds.w	r3, r8, r8
 800fc50:	eb49 0409 	adc.w	r4, r9, r9
 800fc54:	4698      	mov	r8, r3
 800fc56:	46a1      	mov	r9, r4
 800fc58:	eb18 0805 	adds.w	r8, r8, r5
 800fc5c:	eb49 0906 	adc.w	r9, r9, r6
 800fc60:	f04f 0100 	mov.w	r1, #0
 800fc64:	f04f 0200 	mov.w	r2, #0
 800fc68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fc6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fc70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fc74:	4688      	mov	r8, r1
 800fc76:	4691      	mov	r9, r2
 800fc78:	eb18 0005 	adds.w	r0, r8, r5
 800fc7c:	eb49 0106 	adc.w	r1, r9, r6
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	461d      	mov	r5, r3
 800fc86:	f04f 0600 	mov.w	r6, #0
 800fc8a:	196b      	adds	r3, r5, r5
 800fc8c:	eb46 0406 	adc.w	r4, r6, r6
 800fc90:	461a      	mov	r2, r3
 800fc92:	4623      	mov	r3, r4
 800fc94:	f7f1 f810 	bl	8000cb8 <__aeabi_uldivmod>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	4b47      	ldr	r3, [pc, #284]	; (800fdbc <UART_SetConfig+0x384>)
 800fca0:	fba3 2302 	umull	r2, r3, r3, r2
 800fca4:	095b      	lsrs	r3, r3, #5
 800fca6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	461d      	mov	r5, r3
 800fcae:	f04f 0600 	mov.w	r6, #0
 800fcb2:	46a9      	mov	r9, r5
 800fcb4:	46b2      	mov	sl, r6
 800fcb6:	eb19 0309 	adds.w	r3, r9, r9
 800fcba:	eb4a 040a 	adc.w	r4, sl, sl
 800fcbe:	4699      	mov	r9, r3
 800fcc0:	46a2      	mov	sl, r4
 800fcc2:	eb19 0905 	adds.w	r9, r9, r5
 800fcc6:	eb4a 0a06 	adc.w	sl, sl, r6
 800fcca:	f04f 0100 	mov.w	r1, #0
 800fcce:	f04f 0200 	mov.w	r2, #0
 800fcd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fcd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fcda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcde:	4689      	mov	r9, r1
 800fce0:	4692      	mov	sl, r2
 800fce2:	eb19 0005 	adds.w	r0, r9, r5
 800fce6:	eb4a 0106 	adc.w	r1, sl, r6
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	461d      	mov	r5, r3
 800fcf0:	f04f 0600 	mov.w	r6, #0
 800fcf4:	196b      	adds	r3, r5, r5
 800fcf6:	eb46 0406 	adc.w	r4, r6, r6
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	4623      	mov	r3, r4
 800fcfe:	f7f0 ffdb 	bl	8000cb8 <__aeabi_uldivmod>
 800fd02:	4603      	mov	r3, r0
 800fd04:	460c      	mov	r4, r1
 800fd06:	461a      	mov	r2, r3
 800fd08:	4b2c      	ldr	r3, [pc, #176]	; (800fdbc <UART_SetConfig+0x384>)
 800fd0a:	fba3 1302 	umull	r1, r3, r3, r2
 800fd0e:	095b      	lsrs	r3, r3, #5
 800fd10:	2164      	movs	r1, #100	; 0x64
 800fd12:	fb01 f303 	mul.w	r3, r1, r3
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	00db      	lsls	r3, r3, #3
 800fd1a:	3332      	adds	r3, #50	; 0x32
 800fd1c:	4a27      	ldr	r2, [pc, #156]	; (800fdbc <UART_SetConfig+0x384>)
 800fd1e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd22:	095b      	lsrs	r3, r3, #5
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fd2a:	4498      	add	r8, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	461d      	mov	r5, r3
 800fd30:	f04f 0600 	mov.w	r6, #0
 800fd34:	46a9      	mov	r9, r5
 800fd36:	46b2      	mov	sl, r6
 800fd38:	eb19 0309 	adds.w	r3, r9, r9
 800fd3c:	eb4a 040a 	adc.w	r4, sl, sl
 800fd40:	4699      	mov	r9, r3
 800fd42:	46a2      	mov	sl, r4
 800fd44:	eb19 0905 	adds.w	r9, r9, r5
 800fd48:	eb4a 0a06 	adc.w	sl, sl, r6
 800fd4c:	f04f 0100 	mov.w	r1, #0
 800fd50:	f04f 0200 	mov.w	r2, #0
 800fd54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd60:	4689      	mov	r9, r1
 800fd62:	4692      	mov	sl, r2
 800fd64:	eb19 0005 	adds.w	r0, r9, r5
 800fd68:	eb4a 0106 	adc.w	r1, sl, r6
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	461d      	mov	r5, r3
 800fd72:	f04f 0600 	mov.w	r6, #0
 800fd76:	196b      	adds	r3, r5, r5
 800fd78:	eb46 0406 	adc.w	r4, r6, r6
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4623      	mov	r3, r4
 800fd80:	f7f0 ff9a 	bl	8000cb8 <__aeabi_uldivmod>
 800fd84:	4603      	mov	r3, r0
 800fd86:	460c      	mov	r4, r1
 800fd88:	461a      	mov	r2, r3
 800fd8a:	4b0c      	ldr	r3, [pc, #48]	; (800fdbc <UART_SetConfig+0x384>)
 800fd8c:	fba3 1302 	umull	r1, r3, r3, r2
 800fd90:	095b      	lsrs	r3, r3, #5
 800fd92:	2164      	movs	r1, #100	; 0x64
 800fd94:	fb01 f303 	mul.w	r3, r1, r3
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	00db      	lsls	r3, r3, #3
 800fd9c:	3332      	adds	r3, #50	; 0x32
 800fd9e:	4a07      	ldr	r2, [pc, #28]	; (800fdbc <UART_SetConfig+0x384>)
 800fda0:	fba2 2303 	umull	r2, r3, r2, r3
 800fda4:	095b      	lsrs	r3, r3, #5
 800fda6:	f003 0207 	and.w	r2, r3, #7
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4442      	add	r2, r8
 800fdb0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fdb2:	e1b2      	b.n	801011a <UART_SetConfig+0x6e2>
 800fdb4:	40011000 	.word	0x40011000
 800fdb8:	40011400 	.word	0x40011400
 800fdbc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4ad7      	ldr	r2, [pc, #860]	; (8010124 <UART_SetConfig+0x6ec>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d005      	beq.n	800fdd6 <UART_SetConfig+0x39e>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4ad6      	ldr	r2, [pc, #856]	; (8010128 <UART_SetConfig+0x6f0>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	f040 80d1 	bne.w	800ff78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fdd6:	f7fc fa41 	bl	800c25c <HAL_RCC_GetPCLK2Freq>
 800fdda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	469a      	mov	sl, r3
 800fde0:	f04f 0b00 	mov.w	fp, #0
 800fde4:	46d0      	mov	r8, sl
 800fde6:	46d9      	mov	r9, fp
 800fde8:	eb18 0308 	adds.w	r3, r8, r8
 800fdec:	eb49 0409 	adc.w	r4, r9, r9
 800fdf0:	4698      	mov	r8, r3
 800fdf2:	46a1      	mov	r9, r4
 800fdf4:	eb18 080a 	adds.w	r8, r8, sl
 800fdf8:	eb49 090b 	adc.w	r9, r9, fp
 800fdfc:	f04f 0100 	mov.w	r1, #0
 800fe00:	f04f 0200 	mov.w	r2, #0
 800fe04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fe0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fe10:	4688      	mov	r8, r1
 800fe12:	4691      	mov	r9, r2
 800fe14:	eb1a 0508 	adds.w	r5, sl, r8
 800fe18:	eb4b 0609 	adc.w	r6, fp, r9
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	4619      	mov	r1, r3
 800fe22:	f04f 0200 	mov.w	r2, #0
 800fe26:	f04f 0300 	mov.w	r3, #0
 800fe2a:	f04f 0400 	mov.w	r4, #0
 800fe2e:	0094      	lsls	r4, r2, #2
 800fe30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe34:	008b      	lsls	r3, r1, #2
 800fe36:	461a      	mov	r2, r3
 800fe38:	4623      	mov	r3, r4
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	f7f0 ff3b 	bl	8000cb8 <__aeabi_uldivmod>
 800fe42:	4603      	mov	r3, r0
 800fe44:	460c      	mov	r4, r1
 800fe46:	461a      	mov	r2, r3
 800fe48:	4bb8      	ldr	r3, [pc, #736]	; (801012c <UART_SetConfig+0x6f4>)
 800fe4a:	fba3 2302 	umull	r2, r3, r3, r2
 800fe4e:	095b      	lsrs	r3, r3, #5
 800fe50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	469b      	mov	fp, r3
 800fe58:	f04f 0c00 	mov.w	ip, #0
 800fe5c:	46d9      	mov	r9, fp
 800fe5e:	46e2      	mov	sl, ip
 800fe60:	eb19 0309 	adds.w	r3, r9, r9
 800fe64:	eb4a 040a 	adc.w	r4, sl, sl
 800fe68:	4699      	mov	r9, r3
 800fe6a:	46a2      	mov	sl, r4
 800fe6c:	eb19 090b 	adds.w	r9, r9, fp
 800fe70:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fe74:	f04f 0100 	mov.w	r1, #0
 800fe78:	f04f 0200 	mov.w	r2, #0
 800fe7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe88:	4689      	mov	r9, r1
 800fe8a:	4692      	mov	sl, r2
 800fe8c:	eb1b 0509 	adds.w	r5, fp, r9
 800fe90:	eb4c 060a 	adc.w	r6, ip, sl
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	f04f 0200 	mov.w	r2, #0
 800fe9e:	f04f 0300 	mov.w	r3, #0
 800fea2:	f04f 0400 	mov.w	r4, #0
 800fea6:	0094      	lsls	r4, r2, #2
 800fea8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800feac:	008b      	lsls	r3, r1, #2
 800feae:	461a      	mov	r2, r3
 800feb0:	4623      	mov	r3, r4
 800feb2:	4628      	mov	r0, r5
 800feb4:	4631      	mov	r1, r6
 800feb6:	f7f0 feff 	bl	8000cb8 <__aeabi_uldivmod>
 800feba:	4603      	mov	r3, r0
 800febc:	460c      	mov	r4, r1
 800febe:	461a      	mov	r2, r3
 800fec0:	4b9a      	ldr	r3, [pc, #616]	; (801012c <UART_SetConfig+0x6f4>)
 800fec2:	fba3 1302 	umull	r1, r3, r3, r2
 800fec6:	095b      	lsrs	r3, r3, #5
 800fec8:	2164      	movs	r1, #100	; 0x64
 800feca:	fb01 f303 	mul.w	r3, r1, r3
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	011b      	lsls	r3, r3, #4
 800fed2:	3332      	adds	r3, #50	; 0x32
 800fed4:	4a95      	ldr	r2, [pc, #596]	; (801012c <UART_SetConfig+0x6f4>)
 800fed6:	fba2 2303 	umull	r2, r3, r2, r3
 800feda:	095b      	lsrs	r3, r3, #5
 800fedc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fee0:	4498      	add	r8, r3
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	469b      	mov	fp, r3
 800fee6:	f04f 0c00 	mov.w	ip, #0
 800feea:	46d9      	mov	r9, fp
 800feec:	46e2      	mov	sl, ip
 800feee:	eb19 0309 	adds.w	r3, r9, r9
 800fef2:	eb4a 040a 	adc.w	r4, sl, sl
 800fef6:	4699      	mov	r9, r3
 800fef8:	46a2      	mov	sl, r4
 800fefa:	eb19 090b 	adds.w	r9, r9, fp
 800fefe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ff02:	f04f 0100 	mov.w	r1, #0
 800ff06:	f04f 0200 	mov.w	r2, #0
 800ff0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff16:	4689      	mov	r9, r1
 800ff18:	4692      	mov	sl, r2
 800ff1a:	eb1b 0509 	adds.w	r5, fp, r9
 800ff1e:	eb4c 060a 	adc.w	r6, ip, sl
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	4619      	mov	r1, r3
 800ff28:	f04f 0200 	mov.w	r2, #0
 800ff2c:	f04f 0300 	mov.w	r3, #0
 800ff30:	f04f 0400 	mov.w	r4, #0
 800ff34:	0094      	lsls	r4, r2, #2
 800ff36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ff3a:	008b      	lsls	r3, r1, #2
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	4623      	mov	r3, r4
 800ff40:	4628      	mov	r0, r5
 800ff42:	4631      	mov	r1, r6
 800ff44:	f7f0 feb8 	bl	8000cb8 <__aeabi_uldivmod>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	4b77      	ldr	r3, [pc, #476]	; (801012c <UART_SetConfig+0x6f4>)
 800ff50:	fba3 1302 	umull	r1, r3, r3, r2
 800ff54:	095b      	lsrs	r3, r3, #5
 800ff56:	2164      	movs	r1, #100	; 0x64
 800ff58:	fb01 f303 	mul.w	r3, r1, r3
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	011b      	lsls	r3, r3, #4
 800ff60:	3332      	adds	r3, #50	; 0x32
 800ff62:	4a72      	ldr	r2, [pc, #456]	; (801012c <UART_SetConfig+0x6f4>)
 800ff64:	fba2 2303 	umull	r2, r3, r2, r3
 800ff68:	095b      	lsrs	r3, r3, #5
 800ff6a:	f003 020f 	and.w	r2, r3, #15
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4442      	add	r2, r8
 800ff74:	609a      	str	r2, [r3, #8]
 800ff76:	e0d0      	b.n	801011a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ff78:	f7fc f95c 	bl	800c234 <HAL_RCC_GetPCLK1Freq>
 800ff7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	469a      	mov	sl, r3
 800ff82:	f04f 0b00 	mov.w	fp, #0
 800ff86:	46d0      	mov	r8, sl
 800ff88:	46d9      	mov	r9, fp
 800ff8a:	eb18 0308 	adds.w	r3, r8, r8
 800ff8e:	eb49 0409 	adc.w	r4, r9, r9
 800ff92:	4698      	mov	r8, r3
 800ff94:	46a1      	mov	r9, r4
 800ff96:	eb18 080a 	adds.w	r8, r8, sl
 800ff9a:	eb49 090b 	adc.w	r9, r9, fp
 800ff9e:	f04f 0100 	mov.w	r1, #0
 800ffa2:	f04f 0200 	mov.w	r2, #0
 800ffa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ffaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ffae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ffb2:	4688      	mov	r8, r1
 800ffb4:	4691      	mov	r9, r2
 800ffb6:	eb1a 0508 	adds.w	r5, sl, r8
 800ffba:	eb4b 0609 	adc.w	r6, fp, r9
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	f04f 0200 	mov.w	r2, #0
 800ffc8:	f04f 0300 	mov.w	r3, #0
 800ffcc:	f04f 0400 	mov.w	r4, #0
 800ffd0:	0094      	lsls	r4, r2, #2
 800ffd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ffd6:	008b      	lsls	r3, r1, #2
 800ffd8:	461a      	mov	r2, r3
 800ffda:	4623      	mov	r3, r4
 800ffdc:	4628      	mov	r0, r5
 800ffde:	4631      	mov	r1, r6
 800ffe0:	f7f0 fe6a 	bl	8000cb8 <__aeabi_uldivmod>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	460c      	mov	r4, r1
 800ffe8:	461a      	mov	r2, r3
 800ffea:	4b50      	ldr	r3, [pc, #320]	; (801012c <UART_SetConfig+0x6f4>)
 800ffec:	fba3 2302 	umull	r2, r3, r3, r2
 800fff0:	095b      	lsrs	r3, r3, #5
 800fff2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	469b      	mov	fp, r3
 800fffa:	f04f 0c00 	mov.w	ip, #0
 800fffe:	46d9      	mov	r9, fp
 8010000:	46e2      	mov	sl, ip
 8010002:	eb19 0309 	adds.w	r3, r9, r9
 8010006:	eb4a 040a 	adc.w	r4, sl, sl
 801000a:	4699      	mov	r9, r3
 801000c:	46a2      	mov	sl, r4
 801000e:	eb19 090b 	adds.w	r9, r9, fp
 8010012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010016:	f04f 0100 	mov.w	r1, #0
 801001a:	f04f 0200 	mov.w	r2, #0
 801001e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801002a:	4689      	mov	r9, r1
 801002c:	4692      	mov	sl, r2
 801002e:	eb1b 0509 	adds.w	r5, fp, r9
 8010032:	eb4c 060a 	adc.w	r6, ip, sl
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	4619      	mov	r1, r3
 801003c:	f04f 0200 	mov.w	r2, #0
 8010040:	f04f 0300 	mov.w	r3, #0
 8010044:	f04f 0400 	mov.w	r4, #0
 8010048:	0094      	lsls	r4, r2, #2
 801004a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801004e:	008b      	lsls	r3, r1, #2
 8010050:	461a      	mov	r2, r3
 8010052:	4623      	mov	r3, r4
 8010054:	4628      	mov	r0, r5
 8010056:	4631      	mov	r1, r6
 8010058:	f7f0 fe2e 	bl	8000cb8 <__aeabi_uldivmod>
 801005c:	4603      	mov	r3, r0
 801005e:	460c      	mov	r4, r1
 8010060:	461a      	mov	r2, r3
 8010062:	4b32      	ldr	r3, [pc, #200]	; (801012c <UART_SetConfig+0x6f4>)
 8010064:	fba3 1302 	umull	r1, r3, r3, r2
 8010068:	095b      	lsrs	r3, r3, #5
 801006a:	2164      	movs	r1, #100	; 0x64
 801006c:	fb01 f303 	mul.w	r3, r1, r3
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	011b      	lsls	r3, r3, #4
 8010074:	3332      	adds	r3, #50	; 0x32
 8010076:	4a2d      	ldr	r2, [pc, #180]	; (801012c <UART_SetConfig+0x6f4>)
 8010078:	fba2 2303 	umull	r2, r3, r2, r3
 801007c:	095b      	lsrs	r3, r3, #5
 801007e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010082:	4498      	add	r8, r3
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	469b      	mov	fp, r3
 8010088:	f04f 0c00 	mov.w	ip, #0
 801008c:	46d9      	mov	r9, fp
 801008e:	46e2      	mov	sl, ip
 8010090:	eb19 0309 	adds.w	r3, r9, r9
 8010094:	eb4a 040a 	adc.w	r4, sl, sl
 8010098:	4699      	mov	r9, r3
 801009a:	46a2      	mov	sl, r4
 801009c:	eb19 090b 	adds.w	r9, r9, fp
 80100a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80100a4:	f04f 0100 	mov.w	r1, #0
 80100a8:	f04f 0200 	mov.w	r2, #0
 80100ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100b8:	4689      	mov	r9, r1
 80100ba:	4692      	mov	sl, r2
 80100bc:	eb1b 0509 	adds.w	r5, fp, r9
 80100c0:	eb4c 060a 	adc.w	r6, ip, sl
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	4619      	mov	r1, r3
 80100ca:	f04f 0200 	mov.w	r2, #0
 80100ce:	f04f 0300 	mov.w	r3, #0
 80100d2:	f04f 0400 	mov.w	r4, #0
 80100d6:	0094      	lsls	r4, r2, #2
 80100d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80100dc:	008b      	lsls	r3, r1, #2
 80100de:	461a      	mov	r2, r3
 80100e0:	4623      	mov	r3, r4
 80100e2:	4628      	mov	r0, r5
 80100e4:	4631      	mov	r1, r6
 80100e6:	f7f0 fde7 	bl	8000cb8 <__aeabi_uldivmod>
 80100ea:	4603      	mov	r3, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b0e      	ldr	r3, [pc, #56]	; (801012c <UART_SetConfig+0x6f4>)
 80100f2:	fba3 1302 	umull	r1, r3, r3, r2
 80100f6:	095b      	lsrs	r3, r3, #5
 80100f8:	2164      	movs	r1, #100	; 0x64
 80100fa:	fb01 f303 	mul.w	r3, r1, r3
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	011b      	lsls	r3, r3, #4
 8010102:	3332      	adds	r3, #50	; 0x32
 8010104:	4a09      	ldr	r2, [pc, #36]	; (801012c <UART_SetConfig+0x6f4>)
 8010106:	fba2 2303 	umull	r2, r3, r2, r3
 801010a:	095b      	lsrs	r3, r3, #5
 801010c:	f003 020f 	and.w	r2, r3, #15
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	4442      	add	r2, r8
 8010116:	609a      	str	r2, [r3, #8]
}
 8010118:	e7ff      	b.n	801011a <UART_SetConfig+0x6e2>
 801011a:	bf00      	nop
 801011c:	3714      	adds	r7, #20
 801011e:	46bd      	mov	sp, r7
 8010120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010124:	40011000 	.word	0x40011000
 8010128:	40011400 	.word	0x40011400
 801012c:	51eb851f 	.word	0x51eb851f

08010130 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010130:	b084      	sub	sp, #16
 8010132:	b480      	push	{r7}
 8010134:	b085      	sub	sp, #20
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
 801013a:	f107 001c 	add.w	r0, r7, #28
 801013e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010142:	2300      	movs	r3, #0
 8010144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010146:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010148:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801014a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801014e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010150:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010152:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010156:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801015a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	4313      	orrs	r3, r2
 8010160:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801016a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	431a      	orrs	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	b004      	add	sp, #16
 8010184:	4770      	bx	lr

08010186 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010186:	b480      	push	{r7}
 8010188:	b083      	sub	sp, #12
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010194:	4618      	mov	r0, r3
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	370c      	adds	r7, #12
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr

080101c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b082      	sub	sp, #8
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2203      	movs	r2, #3
 80101ce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80101d0:	2002      	movs	r0, #2
 80101d2:	f7f9 fbdd 	bl	8009990 <HAL_Delay>
  
  return HAL_OK;
 80101d6:	2300      	movs	r3, #0
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 0303 	and.w	r3, r3, #3
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b085      	sub	sp, #20
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801021a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010220:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	4313      	orrs	r3, r2
 801022c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010236:	f023 030f 	bic.w	r3, r3, #15
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	431a      	orrs	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3714      	adds	r7, #20
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr

08010250 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	b2db      	uxtb	r3, r3
}
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801026a:	b480      	push	{r7}
 801026c:	b085      	sub	sp, #20
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3314      	adds	r3, #20
 8010278:	461a      	mov	r2, r3
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	4413      	add	r3, r2
 801027e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
}  
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80102bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80102c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	4313      	orrs	r3, r2
 80102c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	431a      	orrs	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102da:	2300      	movs	r3, #0

}
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b088      	sub	sp, #32
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102f6:	2310      	movs	r3, #16
 80102f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102fa:	2340      	movs	r3, #64	; 0x40
 80102fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102fe:	2300      	movs	r3, #0
 8010300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010306:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010308:	f107 0308 	add.w	r3, r7, #8
 801030c:	4619      	mov	r1, r3
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7ff ff74 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010314:	f241 3288 	movw	r2, #5000	; 0x1388
 8010318:	2110      	movs	r1, #16
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fa40 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010322:	69fb      	ldr	r3, [r7, #28]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3720      	adds	r7, #32
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801033a:	2311      	movs	r3, #17
 801033c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801033e:	2340      	movs	r3, #64	; 0x40
 8010340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010342:	2300      	movs	r3, #0
 8010344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801034a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801034c:	f107 0308 	add.w	r3, r7, #8
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff ff52 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010358:	f241 3288 	movw	r2, #5000	; 0x1388
 801035c:	2111      	movs	r1, #17
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 fa1e 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010366:	69fb      	ldr	r3, [r7, #28]
}
 8010368:	4618      	mov	r0, r3
 801036a:	3720      	adds	r7, #32
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b088      	sub	sp, #32
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801037e:	2312      	movs	r3, #18
 8010380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010382:	2340      	movs	r3, #64	; 0x40
 8010384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010386:	2300      	movs	r3, #0
 8010388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801038e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010390:	f107 0308 	add.w	r3, r7, #8
 8010394:	4619      	mov	r1, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff ff30 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801039c:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a0:	2112      	movs	r1, #18
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 f9fc 	bl	80107a0 <SDMMC_GetCmdResp1>
 80103a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103aa:	69fb      	ldr	r3, [r7, #28]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3720      	adds	r7, #32
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b088      	sub	sp, #32
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103c2:	2318      	movs	r3, #24
 80103c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103c6:	2340      	movs	r3, #64	; 0x40
 80103c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103ca:	2300      	movs	r3, #0
 80103cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103d4:	f107 0308 	add.w	r3, r7, #8
 80103d8:	4619      	mov	r1, r3
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7ff ff0e 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80103e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80103e4:	2118      	movs	r1, #24
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f9da 	bl	80107a0 <SDMMC_GetCmdResp1>
 80103ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ee:	69fb      	ldr	r3, [r7, #28]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3720      	adds	r7, #32
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010406:	2319      	movs	r3, #25
 8010408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801040a:	2340      	movs	r3, #64	; 0x40
 801040c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801040e:	2300      	movs	r3, #0
 8010410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010418:	f107 0308 	add.w	r3, r7, #8
 801041c:	4619      	mov	r1, r3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff feec 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010424:	f241 3288 	movw	r2, #5000	; 0x1388
 8010428:	2119      	movs	r1, #25
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f9b8 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010432:	69fb      	ldr	r3, [r7, #28]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3720      	adds	r7, #32
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b088      	sub	sp, #32
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010444:	2300      	movs	r3, #0
 8010446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010448:	230c      	movs	r3, #12
 801044a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801044c:	2340      	movs	r3, #64	; 0x40
 801044e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010450:	2300      	movs	r3, #0
 8010452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010458:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801045a:	f107 0308 	add.w	r3, r7, #8
 801045e:	4619      	mov	r1, r3
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7ff fecb 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010466:	4a05      	ldr	r2, [pc, #20]	; (801047c <SDMMC_CmdStopTransfer+0x40>)
 8010468:	210c      	movs	r1, #12
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 f998 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010472:	69fb      	ldr	r3, [r7, #28]
}
 8010474:	4618      	mov	r0, r3
 8010476:	3720      	adds	r7, #32
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	05f5e100 	.word	0x05f5e100

08010480 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b08a      	sub	sp, #40	; 0x28
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010490:	2307      	movs	r3, #7
 8010492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010494:	2340      	movs	r3, #64	; 0x40
 8010496:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010498:	2300      	movs	r3, #0
 801049a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801049c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104a2:	f107 0310 	add.w	r3, r7, #16
 80104a6:	4619      	mov	r1, r3
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7ff fea7 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80104ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80104b2:	2107      	movs	r1, #7
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 f973 	bl	80107a0 <SDMMC_GetCmdResp1>
 80104ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80104bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3728      	adds	r7, #40	; 0x28
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b088      	sub	sp, #32
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80104ce:	2300      	movs	r3, #0
 80104d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104d2:	2300      	movs	r3, #0
 80104d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80104d6:	2300      	movs	r3, #0
 80104d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104da:	2300      	movs	r3, #0
 80104dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104e4:	f107 0308 	add.w	r3, r7, #8
 80104e8:	4619      	mov	r1, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7ff fe86 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 f92d 	bl	8010750 <SDMMC_GetCmdError>
 80104f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104f8:	69fb      	ldr	r3, [r7, #28]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b088      	sub	sp, #32
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801050a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801050e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010510:	2308      	movs	r3, #8
 8010512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010514:	2340      	movs	r3, #64	; 0x40
 8010516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010518:	2300      	movs	r3, #0
 801051a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010522:	f107 0308 	add.w	r3, r7, #8
 8010526:	4619      	mov	r1, r3
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f7ff fe67 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 fb16 	bl	8010b60 <SDMMC_GetCmdResp7>
 8010534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010536:	69fb      	ldr	r3, [r7, #28]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3720      	adds	r7, #32
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b088      	sub	sp, #32
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801054e:	2337      	movs	r3, #55	; 0x37
 8010550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010552:	2340      	movs	r3, #64	; 0x40
 8010554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010556:	2300      	movs	r3, #0
 8010558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801055a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801055e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010560:	f107 0308 	add.w	r3, r7, #8
 8010564:	4619      	mov	r1, r3
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f7ff fe48 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801056c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010570:	2137      	movs	r1, #55	; 0x37
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f914 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801057a:	69fb      	ldr	r3, [r7, #28]
}
 801057c:	4618      	mov	r0, r3
 801057e:	3720      	adds	r7, #32
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b088      	sub	sp, #32
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801059a:	2329      	movs	r3, #41	; 0x29
 801059c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801059e:	2340      	movs	r3, #64	; 0x40
 80105a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105a2:	2300      	movs	r3, #0
 80105a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105ac:	f107 0308 	add.w	r3, r7, #8
 80105b0:	4619      	mov	r1, r3
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f7ff fe22 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 fa23 	bl	8010a04 <SDMMC_GetCmdResp3>
 80105be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105c0:	69fb      	ldr	r3, [r7, #28]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3720      	adds	r7, #32
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b088      	sub	sp, #32
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80105d8:	2306      	movs	r3, #6
 80105da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105dc:	2340      	movs	r3, #64	; 0x40
 80105de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105e0:	2300      	movs	r3, #0
 80105e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	4619      	mov	r1, r3
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7ff fe03 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80105f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80105fa:	2106      	movs	r1, #6
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 f8cf 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010604:	69fb      	ldr	r3, [r7, #28]
}
 8010606:	4618      	mov	r0, r3
 8010608:	3720      	adds	r7, #32
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b088      	sub	sp, #32
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010616:	2300      	movs	r3, #0
 8010618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801061a:	2333      	movs	r3, #51	; 0x33
 801061c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801061e:	2340      	movs	r3, #64	; 0x40
 8010620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010622:	2300      	movs	r3, #0
 8010624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801062a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801062c:	f107 0308 	add.w	r3, r7, #8
 8010630:	4619      	mov	r1, r3
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7ff fde2 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010638:	f241 3288 	movw	r2, #5000	; 0x1388
 801063c:	2133      	movs	r1, #51	; 0x33
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 f8ae 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010646:	69fb      	ldr	r3, [r7, #28]
}
 8010648:	4618      	mov	r0, r3
 801064a:	3720      	adds	r7, #32
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b088      	sub	sp, #32
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010658:	2300      	movs	r3, #0
 801065a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801065c:	2302      	movs	r3, #2
 801065e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010660:	23c0      	movs	r3, #192	; 0xc0
 8010662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010664:	2300      	movs	r3, #0
 8010666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801066c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801066e:	f107 0308 	add.w	r3, r7, #8
 8010672:	4619      	mov	r1, r3
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7ff fdc1 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 f97c 	bl	8010978 <SDMMC_GetCmdResp2>
 8010680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010682:	69fb      	ldr	r3, [r7, #28]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3720      	adds	r7, #32
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b088      	sub	sp, #32
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801069a:	2309      	movs	r3, #9
 801069c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801069e:	23c0      	movs	r3, #192	; 0xc0
 80106a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106a2:	2300      	movs	r3, #0
 80106a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106ac:	f107 0308 	add.w	r3, r7, #8
 80106b0:	4619      	mov	r1, r3
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7ff fda2 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f000 f95d 	bl	8010978 <SDMMC_GetCmdResp2>
 80106be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106c0:	69fb      	ldr	r3, [r7, #28]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3720      	adds	r7, #32
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b088      	sub	sp, #32
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80106d4:	2300      	movs	r3, #0
 80106d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80106d8:	2303      	movs	r3, #3
 80106da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106dc:	2340      	movs	r3, #64	; 0x40
 80106de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106e0:	2300      	movs	r3, #0
 80106e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106ea:	f107 0308 	add.w	r3, r7, #8
 80106ee:	4619      	mov	r1, r3
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7ff fd83 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	2103      	movs	r1, #3
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 f9bc 	bl	8010a78 <SDMMC_GetCmdResp6>
 8010700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010702:	69fb      	ldr	r3, [r7, #28]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3720      	adds	r7, #32
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b088      	sub	sp, #32
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801071a:	230d      	movs	r3, #13
 801071c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801071e:	2340      	movs	r3, #64	; 0x40
 8010720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010722:	2300      	movs	r3, #0
 8010724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801072a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801072c:	f107 0308 	add.w	r3, r7, #8
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f7ff fd62 	bl	80101fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010738:	f241 3288 	movw	r2, #5000	; 0x1388
 801073c:	210d      	movs	r1, #13
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f82e 	bl	80107a0 <SDMMC_GetCmdResp1>
 8010744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010746:	69fb      	ldr	r3, [r7, #28]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3720      	adds	r7, #32
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010750:	b490      	push	{r4, r7}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010758:	4b0f      	ldr	r3, [pc, #60]	; (8010798 <SDMMC_GetCmdError+0x48>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4a0f      	ldr	r2, [pc, #60]	; (801079c <SDMMC_GetCmdError+0x4c>)
 801075e:	fba2 2303 	umull	r2, r3, r2, r3
 8010762:	0a5b      	lsrs	r3, r3, #9
 8010764:	f241 3288 	movw	r2, #5000	; 0x1388
 8010768:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801076c:	4623      	mov	r3, r4
 801076e:	1e5c      	subs	r4, r3, #1
 8010770:	2b00      	cmp	r3, #0
 8010772:	d102      	bne.n	801077a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010778:	e009      	b.n	801078e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010782:	2b00      	cmp	r3, #0
 8010784:	d0f2      	beq.n	801076c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	22c5      	movs	r2, #197	; 0xc5
 801078a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801078c:	2300      	movs	r3, #0
}
 801078e:	4618      	mov	r0, r3
 8010790:	3708      	adds	r7, #8
 8010792:	46bd      	mov	sp, r7
 8010794:	bc90      	pop	{r4, r7}
 8010796:	4770      	bx	lr
 8010798:	20000000 	.word	0x20000000
 801079c:	10624dd3 	.word	0x10624dd3

080107a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107a0:	b590      	push	{r4, r7, lr}
 80107a2:	b087      	sub	sp, #28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	460b      	mov	r3, r1
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80107ae:	4b6f      	ldr	r3, [pc, #444]	; (801096c <SDMMC_GetCmdResp1+0x1cc>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4a6f      	ldr	r2, [pc, #444]	; (8010970 <SDMMC_GetCmdResp1+0x1d0>)
 80107b4:	fba2 2303 	umull	r2, r3, r2, r3
 80107b8:	0a5b      	lsrs	r3, r3, #9
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107c0:	4623      	mov	r3, r4
 80107c2:	1e5c      	subs	r4, r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107cc:	e0c9      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0f0      	beq.n	80107c0 <SDMMC_GetCmdResp1+0x20>
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1eb      	bne.n	80107c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ec:	f003 0304 	and.w	r3, r3, #4
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d004      	beq.n	80107fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2204      	movs	r2, #4
 80107f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107fa:	2304      	movs	r3, #4
 80107fc:	e0b1      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	2b00      	cmp	r3, #0
 8010808:	d004      	beq.n	8010814 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2201      	movs	r2, #1
 801080e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010810:	2301      	movs	r3, #1
 8010812:	e0a6      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	22c5      	movs	r2, #197	; 0xc5
 8010818:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	f7ff fd18 	bl	8010250 <SDIO_GetCommandResponse>
 8010820:	4603      	mov	r3, r0
 8010822:	461a      	mov	r2, r3
 8010824:	7afb      	ldrb	r3, [r7, #11]
 8010826:	4293      	cmp	r3, r2
 8010828:	d001      	beq.n	801082e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801082a:	2301      	movs	r3, #1
 801082c:	e099      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801082e:	2100      	movs	r1, #0
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f7ff fd1a 	bl	801026a <SDIO_GetResponse>
 8010836:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	4b4e      	ldr	r3, [pc, #312]	; (8010974 <SDMMC_GetCmdResp1+0x1d4>)
 801083c:	4013      	ands	r3, r2
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010842:	2300      	movs	r3, #0
 8010844:	e08d      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	2b00      	cmp	r3, #0
 801084a:	da02      	bge.n	8010852 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801084c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010850:	e087      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d001      	beq.n	8010860 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801085c:	2340      	movs	r3, #64	; 0x40
 801085e:	e080      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801086a:	2380      	movs	r3, #128	; 0x80
 801086c:	e079      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010878:	f44f 7380 	mov.w	r3, #256	; 0x100
 801087c:	e071      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010888:	f44f 7300 	mov.w	r3, #512	; 0x200
 801088c:	e069      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801089c:	e061      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d002      	beq.n	80108ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108ac:	e059      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108bc:	e051      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d002      	beq.n	80108ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108cc:	e049      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80108d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80108dc:	e041      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80108e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108ec:	e039      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80108f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80108fc:	e031      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010908:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801090c:	e029      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801091c:	e021      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010928:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801092c:	e019      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010938:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801093c:	e011      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801094c:	e009      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	f003 0308 	and.w	r3, r3, #8
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010958:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801095c:	e001      	b.n	8010962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010962:	4618      	mov	r0, r3
 8010964:	371c      	adds	r7, #28
 8010966:	46bd      	mov	sp, r7
 8010968:	bd90      	pop	{r4, r7, pc}
 801096a:	bf00      	nop
 801096c:	20000000 	.word	0x20000000
 8010970:	10624dd3 	.word	0x10624dd3
 8010974:	fdffe008 	.word	0xfdffe008

08010978 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010978:	b490      	push	{r4, r7}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010980:	4b1e      	ldr	r3, [pc, #120]	; (80109fc <SDMMC_GetCmdResp2+0x84>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a1e      	ldr	r2, [pc, #120]	; (8010a00 <SDMMC_GetCmdResp2+0x88>)
 8010986:	fba2 2303 	umull	r2, r3, r2, r3
 801098a:	0a5b      	lsrs	r3, r3, #9
 801098c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010990:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010994:	4623      	mov	r3, r4
 8010996:	1e5c      	subs	r4, r3, #1
 8010998:	2b00      	cmp	r3, #0
 801099a:	d102      	bne.n	80109a2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801099c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109a0:	e026      	b.n	80109f0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d0f0      	beq.n	8010994 <SDMMC_GetCmdResp2+0x1c>
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1eb      	bne.n	8010994 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c0:	f003 0304 	and.w	r3, r3, #4
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d004      	beq.n	80109d2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2204      	movs	r2, #4
 80109cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109ce:	2304      	movs	r3, #4
 80109d0:	e00e      	b.n	80109f0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d6:	f003 0301 	and.w	r3, r3, #1
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d004      	beq.n	80109e8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2201      	movs	r2, #1
 80109e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109e4:	2301      	movs	r3, #1
 80109e6:	e003      	b.n	80109f0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	22c5      	movs	r2, #197	; 0xc5
 80109ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3710      	adds	r7, #16
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bc90      	pop	{r4, r7}
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	20000000 	.word	0x20000000
 8010a00:	10624dd3 	.word	0x10624dd3

08010a04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010a04:	b490      	push	{r4, r7}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a0c:	4b18      	ldr	r3, [pc, #96]	; (8010a70 <SDMMC_GetCmdResp3+0x6c>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a18      	ldr	r2, [pc, #96]	; (8010a74 <SDMMC_GetCmdResp3+0x70>)
 8010a12:	fba2 2303 	umull	r2, r3, r2, r3
 8010a16:	0a5b      	lsrs	r3, r3, #9
 8010a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a20:	4623      	mov	r3, r4
 8010a22:	1e5c      	subs	r4, r3, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a2c:	e01b      	b.n	8010a66 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d0f0      	beq.n	8010a20 <SDMMC_GetCmdResp3+0x1c>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1eb      	bne.n	8010a20 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a4c:	f003 0304 	and.w	r3, r3, #4
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d004      	beq.n	8010a5e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2204      	movs	r2, #4
 8010a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a5a:	2304      	movs	r3, #4
 8010a5c:	e003      	b.n	8010a66 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	22c5      	movs	r2, #197	; 0xc5
 8010a62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bc90      	pop	{r4, r7}
 8010a6e:	4770      	bx	lr
 8010a70:	20000000 	.word	0x20000000
 8010a74:	10624dd3 	.word	0x10624dd3

08010a78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b087      	sub	sp, #28
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	460b      	mov	r3, r1
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a86:	4b34      	ldr	r3, [pc, #208]	; (8010b58 <SDMMC_GetCmdResp6+0xe0>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a34      	ldr	r2, [pc, #208]	; (8010b5c <SDMMC_GetCmdResp6+0xe4>)
 8010a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a90:	0a5b      	lsrs	r3, r3, #9
 8010a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a96:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a9a:	4623      	mov	r3, r4
 8010a9c:	1e5c      	subs	r4, r3, #1
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010aa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010aa6:	e052      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d0f0      	beq.n	8010a9a <SDMMC_GetCmdResp6+0x22>
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1eb      	bne.n	8010a9a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac6:	f003 0304 	and.w	r3, r3, #4
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d004      	beq.n	8010ad8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2204      	movs	r2, #4
 8010ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ad4:	2304      	movs	r3, #4
 8010ad6:	e03a      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010adc:	f003 0301 	and.w	r3, r3, #1
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d004      	beq.n	8010aee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010aea:	2301      	movs	r3, #1
 8010aec:	e02f      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f7ff fbae 	bl	8010250 <SDIO_GetCommandResponse>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	7afb      	ldrb	r3, [r7, #11]
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d001      	beq.n	8010b02 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010afe:	2301      	movs	r3, #1
 8010b00:	e025      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	22c5      	movs	r2, #197	; 0xc5
 8010b06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b08:	2100      	movs	r1, #0
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f7ff fbad 	bl	801026a <SDIO_GetResponse>
 8010b10:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d106      	bne.n	8010b2a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	0c1b      	lsrs	r3, r3, #16
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010b26:	2300      	movs	r3, #0
 8010b28:	e011      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d002      	beq.n	8010b3a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b38:	e009      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b48:	e001      	b.n	8010b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	371c      	adds	r7, #28
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd90      	pop	{r4, r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20000000 	.word	0x20000000
 8010b5c:	10624dd3 	.word	0x10624dd3

08010b60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010b60:	b490      	push	{r4, r7}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b68:	4b21      	ldr	r3, [pc, #132]	; (8010bf0 <SDMMC_GetCmdResp7+0x90>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4a21      	ldr	r2, [pc, #132]	; (8010bf4 <SDMMC_GetCmdResp7+0x94>)
 8010b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8010b72:	0a5b      	lsrs	r3, r3, #9
 8010b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b7c:	4623      	mov	r3, r4
 8010b7e:	1e5c      	subs	r4, r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d102      	bne.n	8010b8a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b88:	e02c      	b.n	8010be4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d0f0      	beq.n	8010b7c <SDMMC_GetCmdResp7+0x1c>
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1eb      	bne.n	8010b7c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba8:	f003 0304 	and.w	r3, r3, #4
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d004      	beq.n	8010bba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2204      	movs	r2, #4
 8010bb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bb6:	2304      	movs	r3, #4
 8010bb8:	e014      	b.n	8010be4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bbe:	f003 0301 	and.w	r3, r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d004      	beq.n	8010bd0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	e009      	b.n	8010be4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2240      	movs	r2, #64	; 0x40
 8010be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010be2:	2300      	movs	r3, #0
  
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bc90      	pop	{r4, r7}
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	20000000 	.word	0x20000000
 8010bf4:	10624dd3 	.word	0x10624dd3

08010bf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010bfc:	4904      	ldr	r1, [pc, #16]	; (8010c10 <MX_FATFS_Init+0x18>)
 8010bfe:	4805      	ldr	r0, [pc, #20]	; (8010c14 <MX_FATFS_Init+0x1c>)
 8010c00:	f003 fb9c 	bl	801433c <FATFS_LinkDriver>
 8010c04:	4603      	mov	r3, r0
 8010c06:	461a      	mov	r2, r3
 8010c08:	4b03      	ldr	r3, [pc, #12]	; (8010c18 <MX_FATFS_Init+0x20>)
 8010c0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c0c:	bf00      	nop
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	20043c90 	.word	0x20043c90
 8010c14:	08019ec8 	.word	0x08019ec8
 8010c18:	20043c8c 	.word	0x20043c8c

08010c1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c26:	f000 f896 	bl	8010d56 <BSP_SD_IsDetected>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d001      	beq.n	8010c34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010c30:	2301      	movs	r3, #1
 8010c32:	e012      	b.n	8010c5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010c34:	480b      	ldr	r0, [pc, #44]	; (8010c64 <BSP_SD_Init+0x48>)
 8010c36:	f7fb ffa5 	bl	800cb84 <HAL_SD_Init>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c3e:	79fb      	ldrb	r3, [r7, #7]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d109      	bne.n	8010c58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c48:	4806      	ldr	r0, [pc, #24]	; (8010c64 <BSP_SD_Init+0x48>)
 8010c4a:	f7fc fd4f 	bl	800d6ec <HAL_SD_ConfigWideBusOperation>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d001      	beq.n	8010c58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010c54:	2301      	movs	r3, #1
 8010c56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010c58:	79fb      	ldrb	r3, [r7, #7]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3708      	adds	r7, #8
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	20043a8c 	.word	0x20043a8c

08010c68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c74:	2300      	movs	r3, #0
 8010c76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68ba      	ldr	r2, [r7, #8]
 8010c7c:	68f9      	ldr	r1, [r7, #12]
 8010c7e:	4806      	ldr	r0, [pc, #24]	; (8010c98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010c80:	f7fc f810 	bl	800cca4 <HAL_SD_ReadBlocks_DMA>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d001      	beq.n	8010c8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3718      	adds	r7, #24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	20043a8c 	.word	0x20043a8c

08010c9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	68f9      	ldr	r1, [r7, #12]
 8010cb2:	4806      	ldr	r0, [pc, #24]	; (8010ccc <BSP_SD_WriteBlocks_DMA+0x30>)
 8010cb4:	f7fc f8de 	bl	800ce74 <HAL_SD_WriteBlocks_DMA>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	20043a8c 	.word	0x20043a8c

08010cd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010cd4:	4805      	ldr	r0, [pc, #20]	; (8010cec <BSP_SD_GetCardState+0x1c>)
 8010cd6:	f7fc fd85 	bl	800d7e4 <HAL_SD_GetCardState>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b04      	cmp	r3, #4
 8010cde:	bf14      	ite	ne
 8010ce0:	2301      	movne	r3, #1
 8010ce2:	2300      	moveq	r3, #0
 8010ce4:	b2db      	uxtb	r3, r3
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20043a8c 	.word	0x20043a8c

08010cf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010cf8:	6879      	ldr	r1, [r7, #4]
 8010cfa:	4803      	ldr	r0, [pc, #12]	; (8010d08 <BSP_SD_GetCardInfo+0x18>)
 8010cfc:	f7fc fcca 	bl	800d694 <HAL_SD_GetCardInfo>
}
 8010d00:	bf00      	nop
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	20043a8c 	.word	0x20043a8c

08010d0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010d14:	f000 f818 	bl	8010d48 <BSP_SD_AbortCallback>
}
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010d28:	f000 f9a8 	bl	801107c <BSP_SD_WriteCpltCallback>
}
 8010d2c:	bf00      	nop
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010d3c:	f000 f9aa 	bl	8011094 <BSP_SD_ReadCpltCallback>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	af00      	add	r7, sp, #0

}
 8010d4c:	bf00      	nop
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010d60:	f000 f80c 	bl	8010d7c <BSP_PlatformIsDetected>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	b2db      	uxtb	r3, r3
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
	...

08010d7c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010d82:	2301      	movs	r3, #1
 8010d84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010d8a:	4806      	ldr	r0, [pc, #24]	; (8010da4 <BSP_PlatformIsDetected+0x28>)
 8010d8c:	f7fa f87e 	bl	800ae8c <HAL_GPIO_ReadPin>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d001      	beq.n	8010d9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010d96:	2300      	movs	r3, #0
 8010d98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	40020000 	.word	0x40020000

08010da8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010db0:	f7f8 fde2 	bl	8009978 <HAL_GetTick>
 8010db4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010db6:	e006      	b.n	8010dc6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010db8:	f7ff ff8a 	bl	8010cd0 <BSP_SD_GetCardState>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d101      	bne.n	8010dc6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	e009      	b.n	8010dda <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010dc6:	f7f8 fdd7 	bl	8009978 <HAL_GetTick>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d8f0      	bhi.n	8010db8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010dee:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <SD_CheckStatus+0x38>)
 8010df0:	2201      	movs	r2, #1
 8010df2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010df4:	f7ff ff6c 	bl	8010cd0 <BSP_SD_GetCardState>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d107      	bne.n	8010e0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010dfe:	4b07      	ldr	r3, [pc, #28]	; (8010e1c <SD_CheckStatus+0x38>)
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	f023 0301 	bic.w	r3, r3, #1
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <SD_CheckStatus+0x38>)
 8010e0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e0e:	4b03      	ldr	r3, [pc, #12]	; (8010e1c <SD_CheckStatus+0x38>)
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	b2db      	uxtb	r3, r3
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	20000009 	.word	0x20000009

08010e20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e2a:	f7ff fef7 	bl	8010c1c <BSP_SD_Init>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d107      	bne.n	8010e44 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010e34:	79fb      	ldrb	r3, [r7, #7]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff ffd4 	bl	8010de4 <SD_CheckStatus>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	461a      	mov	r2, r3
 8010e40:	4b04      	ldr	r3, [pc, #16]	; (8010e54 <SD_initialize+0x34>)
 8010e42:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e44:	4b03      	ldr	r3, [pc, #12]	; (8010e54 <SD_initialize+0x34>)
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	b2db      	uxtb	r3, r3
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	20000009 	.word	0x20000009

08010e58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff ffbd 	bl	8010de4 <SD_CheckStatus>
 8010e6a:	4603      	mov	r3, r0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
 8010e7e:	603b      	str	r3, [r7, #0]
 8010e80:	4603      	mov	r3, r0
 8010e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e84:	2301      	movs	r3, #1
 8010e86:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e88:	f247 5030 	movw	r0, #30000	; 0x7530
 8010e8c:	f7ff ff8c 	bl	8010da8 <SD_CheckStatusWithTimeout>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	da01      	bge.n	8010e9a <SD_read+0x26>
  {
    return res;
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	e03b      	b.n	8010f12 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	68b8      	ldr	r0, [r7, #8]
 8010ea0:	f7ff fee2 	bl	8010c68 <BSP_SD_ReadBlocks_DMA>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d132      	bne.n	8010f10 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010eaa:	4b1c      	ldr	r3, [pc, #112]	; (8010f1c <SD_read+0xa8>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010eb0:	f7f8 fd62 	bl	8009978 <HAL_GetTick>
 8010eb4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010eb6:	bf00      	nop
 8010eb8:	4b18      	ldr	r3, [pc, #96]	; (8010f1c <SD_read+0xa8>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d108      	bne.n	8010ed2 <SD_read+0x5e>
 8010ec0:	f7f8 fd5a 	bl	8009978 <HAL_GetTick>
 8010ec4:	4602      	mov	r2, r0
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	1ad3      	subs	r3, r2, r3
 8010eca:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d9f2      	bls.n	8010eb8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010ed2:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <SD_read+0xa8>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d102      	bne.n	8010ee0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010eda:	2301      	movs	r3, #1
 8010edc:	75fb      	strb	r3, [r7, #23]
 8010ede:	e017      	b.n	8010f10 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <SD_read+0xa8>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010ee6:	f7f8 fd47 	bl	8009978 <HAL_GetTick>
 8010eea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010eec:	e007      	b.n	8010efe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010eee:	f7ff feef 	bl	8010cd0 <BSP_SD_GetCardState>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d102      	bne.n	8010efe <SD_read+0x8a>
          {
            res = RES_OK;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010efc:	e008      	b.n	8010f10 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010efe:	f7f8 fd3b 	bl	8009978 <HAL_GetTick>
 8010f02:	4602      	mov	r2, r0
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d9ee      	bls.n	8010eee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3718      	adds	r7, #24
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	20041328 	.word	0x20041328

08010f20 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b086      	sub	sp, #24
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60b9      	str	r1, [r7, #8]
 8010f28:	607a      	str	r2, [r7, #4]
 8010f2a:	603b      	str	r3, [r7, #0]
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f30:	2301      	movs	r3, #1
 8010f32:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010f34:	4b24      	ldr	r3, [pc, #144]	; (8010fc8 <SD_write+0xa8>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f3a:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f3e:	f7ff ff33 	bl	8010da8 <SD_CheckStatusWithTimeout>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	da01      	bge.n	8010f4c <SD_write+0x2c>
  {
    return res;
 8010f48:	7dfb      	ldrb	r3, [r7, #23]
 8010f4a:	e038      	b.n	8010fbe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010f4c:	683a      	ldr	r2, [r7, #0]
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	68b8      	ldr	r0, [r7, #8]
 8010f52:	f7ff fea3 	bl	8010c9c <BSP_SD_WriteBlocks_DMA>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d12f      	bne.n	8010fbc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010f5c:	f7f8 fd0c 	bl	8009978 <HAL_GetTick>
 8010f60:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f62:	bf00      	nop
 8010f64:	4b18      	ldr	r3, [pc, #96]	; (8010fc8 <SD_write+0xa8>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d108      	bne.n	8010f7e <SD_write+0x5e>
 8010f6c:	f7f8 fd04 	bl	8009978 <HAL_GetTick>
 8010f70:	4602      	mov	r2, r0
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d9f2      	bls.n	8010f64 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010f7e:	4b12      	ldr	r3, [pc, #72]	; (8010fc8 <SD_write+0xa8>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d102      	bne.n	8010f8c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010f86:	2301      	movs	r3, #1
 8010f88:	75fb      	strb	r3, [r7, #23]
 8010f8a:	e017      	b.n	8010fbc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010f8c:	4b0e      	ldr	r3, [pc, #56]	; (8010fc8 <SD_write+0xa8>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f92:	f7f8 fcf1 	bl	8009978 <HAL_GetTick>
 8010f96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f98:	e007      	b.n	8010faa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f9a:	f7ff fe99 	bl	8010cd0 <BSP_SD_GetCardState>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <SD_write+0x8a>
          {
            res = RES_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	75fb      	strb	r3, [r7, #23]
            break;
 8010fa8:	e008      	b.n	8010fbc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010faa:	f7f8 fce5 	bl	8009978 <HAL_GetTick>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d9ee      	bls.n	8010f9a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3718      	adds	r7, #24
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	20041324 	.word	0x20041324

08010fcc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b08c      	sub	sp, #48	; 0x30
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	603a      	str	r2, [r7, #0]
 8010fd6:	71fb      	strb	r3, [r7, #7]
 8010fd8:	460b      	mov	r3, r1
 8010fda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010fe2:	4b25      	ldr	r3, [pc, #148]	; (8011078 <SD_ioctl+0xac>)
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d001      	beq.n	8010ff4 <SD_ioctl+0x28>
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	e03c      	b.n	801106e <SD_ioctl+0xa2>

  switch (cmd)
 8010ff4:	79bb      	ldrb	r3, [r7, #6]
 8010ff6:	2b03      	cmp	r3, #3
 8010ff8:	d834      	bhi.n	8011064 <SD_ioctl+0x98>
 8010ffa:	a201      	add	r2, pc, #4	; (adr r2, 8011000 <SD_ioctl+0x34>)
 8010ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011000:	08011011 	.word	0x08011011
 8011004:	08011019 	.word	0x08011019
 8011008:	08011031 	.word	0x08011031
 801100c:	0801104b 	.word	0x0801104b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011016:	e028      	b.n	801106a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011018:	f107 030c 	add.w	r3, r7, #12
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff fe67 	bl	8010cf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011028:	2300      	movs	r3, #0
 801102a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801102e:	e01c      	b.n	801106a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011030:	f107 030c 	add.w	r3, r7, #12
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fe5b 	bl	8010cf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103c:	b29a      	uxth	r2, r3
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011048:	e00f      	b.n	801106a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801104a:	f107 030c 	add.w	r3, r7, #12
 801104e:	4618      	mov	r0, r3
 8011050:	f7ff fe4e 	bl	8010cf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011056:	0a5a      	lsrs	r2, r3, #9
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801105c:	2300      	movs	r3, #0
 801105e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011062:	e002      	b.n	801106a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011064:	2304      	movs	r3, #4
 8011066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801106a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801106e:	4618      	mov	r0, r3
 8011070:	3730      	adds	r7, #48	; 0x30
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	20000009 	.word	0x20000009

0801107c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801107c:	b480      	push	{r7}
 801107e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011080:	4b03      	ldr	r3, [pc, #12]	; (8011090 <BSP_SD_WriteCpltCallback+0x14>)
 8011082:	2201      	movs	r2, #1
 8011084:	601a      	str	r2, [r3, #0]
}
 8011086:	bf00      	nop
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr
 8011090:	20041324 	.word	0x20041324

08011094 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011094:	b480      	push	{r7}
 8011096:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011098:	4b03      	ldr	r3, [pc, #12]	; (80110a8 <BSP_SD_ReadCpltCallback+0x14>)
 801109a:	2201      	movs	r2, #1
 801109c:	601a      	str	r2, [r3, #0]
}
 801109e:	bf00      	nop
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr
 80110a8:	20041328 	.word	0x20041328

080110ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	4603      	mov	r3, r0
 80110b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80110b6:	79fb      	ldrb	r3, [r7, #7]
 80110b8:	4a08      	ldr	r2, [pc, #32]	; (80110dc <disk_status+0x30>)
 80110ba:	009b      	lsls	r3, r3, #2
 80110bc:	4413      	add	r3, r2
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	79fa      	ldrb	r2, [r7, #7]
 80110c4:	4905      	ldr	r1, [pc, #20]	; (80110dc <disk_status+0x30>)
 80110c6:	440a      	add	r2, r1
 80110c8:	7a12      	ldrb	r2, [r2, #8]
 80110ca:	4610      	mov	r0, r2
 80110cc:	4798      	blx	r3
 80110ce:	4603      	mov	r3, r0
 80110d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80110d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	20041354 	.word	0x20041354

080110e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	4603      	mov	r3, r0
 80110e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80110ea:	2300      	movs	r3, #0
 80110ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80110ee:	79fb      	ldrb	r3, [r7, #7]
 80110f0:	4a0d      	ldr	r2, [pc, #52]	; (8011128 <disk_initialize+0x48>)
 80110f2:	5cd3      	ldrb	r3, [r2, r3]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d111      	bne.n	801111c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80110f8:	79fb      	ldrb	r3, [r7, #7]
 80110fa:	4a0b      	ldr	r2, [pc, #44]	; (8011128 <disk_initialize+0x48>)
 80110fc:	2101      	movs	r1, #1
 80110fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	4a09      	ldr	r2, [pc, #36]	; (8011128 <disk_initialize+0x48>)
 8011104:	009b      	lsls	r3, r3, #2
 8011106:	4413      	add	r3, r2
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	79fa      	ldrb	r2, [r7, #7]
 801110e:	4906      	ldr	r1, [pc, #24]	; (8011128 <disk_initialize+0x48>)
 8011110:	440a      	add	r2, r1
 8011112:	7a12      	ldrb	r2, [r2, #8]
 8011114:	4610      	mov	r0, r2
 8011116:	4798      	blx	r3
 8011118:	4603      	mov	r3, r0
 801111a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801111c:	7bfb      	ldrb	r3, [r7, #15]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3710      	adds	r7, #16
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20041354 	.word	0x20041354

0801112c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801112c:	b590      	push	{r4, r7, lr}
 801112e:	b087      	sub	sp, #28
 8011130:	af00      	add	r7, sp, #0
 8011132:	60b9      	str	r1, [r7, #8]
 8011134:	607a      	str	r2, [r7, #4]
 8011136:	603b      	str	r3, [r7, #0]
 8011138:	4603      	mov	r3, r0
 801113a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801113c:	7bfb      	ldrb	r3, [r7, #15]
 801113e:	4a0a      	ldr	r2, [pc, #40]	; (8011168 <disk_read+0x3c>)
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4413      	add	r3, r2
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	689c      	ldr	r4, [r3, #8]
 8011148:	7bfb      	ldrb	r3, [r7, #15]
 801114a:	4a07      	ldr	r2, [pc, #28]	; (8011168 <disk_read+0x3c>)
 801114c:	4413      	add	r3, r2
 801114e:	7a18      	ldrb	r0, [r3, #8]
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	68b9      	ldr	r1, [r7, #8]
 8011156:	47a0      	blx	r4
 8011158:	4603      	mov	r3, r0
 801115a:	75fb      	strb	r3, [r7, #23]
  return res;
 801115c:	7dfb      	ldrb	r3, [r7, #23]
}
 801115e:	4618      	mov	r0, r3
 8011160:	371c      	adds	r7, #28
 8011162:	46bd      	mov	sp, r7
 8011164:	bd90      	pop	{r4, r7, pc}
 8011166:	bf00      	nop
 8011168:	20041354 	.word	0x20041354

0801116c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801116c:	b590      	push	{r4, r7, lr}
 801116e:	b087      	sub	sp, #28
 8011170:	af00      	add	r7, sp, #0
 8011172:	60b9      	str	r1, [r7, #8]
 8011174:	607a      	str	r2, [r7, #4]
 8011176:	603b      	str	r3, [r7, #0]
 8011178:	4603      	mov	r3, r0
 801117a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801117c:	7bfb      	ldrb	r3, [r7, #15]
 801117e:	4a0a      	ldr	r2, [pc, #40]	; (80111a8 <disk_write+0x3c>)
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	4413      	add	r3, r2
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	68dc      	ldr	r4, [r3, #12]
 8011188:	7bfb      	ldrb	r3, [r7, #15]
 801118a:	4a07      	ldr	r2, [pc, #28]	; (80111a8 <disk_write+0x3c>)
 801118c:	4413      	add	r3, r2
 801118e:	7a18      	ldrb	r0, [r3, #8]
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	68b9      	ldr	r1, [r7, #8]
 8011196:	47a0      	blx	r4
 8011198:	4603      	mov	r3, r0
 801119a:	75fb      	strb	r3, [r7, #23]
  return res;
 801119c:	7dfb      	ldrb	r3, [r7, #23]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	371c      	adds	r7, #28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd90      	pop	{r4, r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20041354 	.word	0x20041354

080111ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4603      	mov	r3, r0
 80111b4:	603a      	str	r2, [r7, #0]
 80111b6:	71fb      	strb	r3, [r7, #7]
 80111b8:	460b      	mov	r3, r1
 80111ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80111bc:	79fb      	ldrb	r3, [r7, #7]
 80111be:	4a09      	ldr	r2, [pc, #36]	; (80111e4 <disk_ioctl+0x38>)
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4413      	add	r3, r2
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	79fa      	ldrb	r2, [r7, #7]
 80111ca:	4906      	ldr	r1, [pc, #24]	; (80111e4 <disk_ioctl+0x38>)
 80111cc:	440a      	add	r2, r1
 80111ce:	7a10      	ldrb	r0, [r2, #8]
 80111d0:	79b9      	ldrb	r1, [r7, #6]
 80111d2:	683a      	ldr	r2, [r7, #0]
 80111d4:	4798      	blx	r3
 80111d6:	4603      	mov	r3, r0
 80111d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80111da:	7bfb      	ldrb	r3, [r7, #15]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3710      	adds	r7, #16
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	20041354 	.word	0x20041354

080111e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80111e8:	b480      	push	{r7}
 80111ea:	b085      	sub	sp, #20
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	3301      	adds	r3, #1
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80111f8:	89fb      	ldrh	r3, [r7, #14]
 80111fa:	021b      	lsls	r3, r3, #8
 80111fc:	b21a      	sxth	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	b21b      	sxth	r3, r3
 8011204:	4313      	orrs	r3, r2
 8011206:	b21b      	sxth	r3, r3
 8011208:	81fb      	strh	r3, [r7, #14]
	return rv;
 801120a:	89fb      	ldrh	r3, [r7, #14]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3714      	adds	r7, #20
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	3303      	adds	r3, #3
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	021b      	lsls	r3, r3, #8
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	3202      	adds	r2, #2
 8011230:	7812      	ldrb	r2, [r2, #0]
 8011232:	4313      	orrs	r3, r2
 8011234:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	021b      	lsls	r3, r3, #8
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	3201      	adds	r2, #1
 801123e:	7812      	ldrb	r2, [r2, #0]
 8011240:	4313      	orrs	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	021b      	lsls	r3, r3, #8
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	7812      	ldrb	r2, [r2, #0]
 801124c:	4313      	orrs	r3, r2
 801124e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011250:	68fb      	ldr	r3, [r7, #12]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3714      	adds	r7, #20
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr

0801125e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801125e:	b480      	push	{r7}
 8011260:	b083      	sub	sp, #12
 8011262:	af00      	add	r7, sp, #0
 8011264:	6078      	str	r0, [r7, #4]
 8011266:	460b      	mov	r3, r1
 8011268:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	1c5a      	adds	r2, r3, #1
 801126e:	607a      	str	r2, [r7, #4]
 8011270:	887a      	ldrh	r2, [r7, #2]
 8011272:	b2d2      	uxtb	r2, r2
 8011274:	701a      	strb	r2, [r3, #0]
 8011276:	887b      	ldrh	r3, [r7, #2]
 8011278:	0a1b      	lsrs	r3, r3, #8
 801127a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	1c5a      	adds	r2, r3, #1
 8011280:	607a      	str	r2, [r7, #4]
 8011282:	887a      	ldrh	r2, [r7, #2]
 8011284:	b2d2      	uxtb	r2, r2
 8011286:	701a      	strb	r2, [r3, #0]
}
 8011288:	bf00      	nop
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	1c5a      	adds	r2, r3, #1
 80112a2:	607a      	str	r2, [r7, #4]
 80112a4:	683a      	ldr	r2, [r7, #0]
 80112a6:	b2d2      	uxtb	r2, r2
 80112a8:	701a      	strb	r2, [r3, #0]
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	0a1b      	lsrs	r3, r3, #8
 80112ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	1c5a      	adds	r2, r3, #1
 80112b4:	607a      	str	r2, [r7, #4]
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	b2d2      	uxtb	r2, r2
 80112ba:	701a      	strb	r2, [r3, #0]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	0a1b      	lsrs	r3, r3, #8
 80112c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	1c5a      	adds	r2, r3, #1
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	683a      	ldr	r2, [r7, #0]
 80112ca:	b2d2      	uxtb	r2, r2
 80112cc:	701a      	strb	r2, [r3, #0]
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	0a1b      	lsrs	r3, r3, #8
 80112d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	607a      	str	r2, [r7, #4]
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	b2d2      	uxtb	r2, r2
 80112de:	701a      	strb	r2, [r3, #0]
}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80112ec:	b480      	push	{r7}
 80112ee:	b087      	sub	sp, #28
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00d      	beq.n	8011322 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011306:	693a      	ldr	r2, [r7, #16]
 8011308:	1c53      	adds	r3, r2, #1
 801130a:	613b      	str	r3, [r7, #16]
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	1c59      	adds	r1, r3, #1
 8011310:	6179      	str	r1, [r7, #20]
 8011312:	7812      	ldrb	r2, [r2, #0]
 8011314:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	3b01      	subs	r3, #1
 801131a:	607b      	str	r3, [r7, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1f1      	bne.n	8011306 <mem_cpy+0x1a>
	}
}
 8011322:	bf00      	nop
 8011324:	371c      	adds	r7, #28
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr

0801132e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801132e:	b480      	push	{r7}
 8011330:	b087      	sub	sp, #28
 8011332:	af00      	add	r7, sp, #0
 8011334:	60f8      	str	r0, [r7, #12]
 8011336:	60b9      	str	r1, [r7, #8]
 8011338:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	617a      	str	r2, [r7, #20]
 8011344:	68ba      	ldr	r2, [r7, #8]
 8011346:	b2d2      	uxtb	r2, r2
 8011348:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	3b01      	subs	r3, #1
 801134e:	607b      	str	r3, [r7, #4]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d1f3      	bne.n	801133e <mem_set+0x10>
}
 8011356:	bf00      	nop
 8011358:	371c      	adds	r7, #28
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr

08011362 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011362:	b480      	push	{r7}
 8011364:	b089      	sub	sp, #36	; 0x24
 8011366:	af00      	add	r7, sp, #0
 8011368:	60f8      	str	r0, [r7, #12]
 801136a:	60b9      	str	r1, [r7, #8]
 801136c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	61fb      	str	r3, [r7, #28]
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	61fa      	str	r2, [r7, #28]
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	4619      	mov	r1, r3
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	61ba      	str	r2, [r7, #24]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	1acb      	subs	r3, r1, r3
 801138e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	3b01      	subs	r3, #1
 8011394:	607b      	str	r3, [r7, #4]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d002      	beq.n	80113a2 <mem_cmp+0x40>
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0eb      	beq.n	801137a <mem_cmp+0x18>

	return r;
 80113a2:	697b      	ldr	r3, [r7, #20]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3724      	adds	r7, #36	; 0x24
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80113ba:	e002      	b.n	80113c2 <chk_chr+0x12>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	3301      	adds	r3, #1
 80113c0:	607b      	str	r3, [r7, #4]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d005      	beq.n	80113d6 <chk_chr+0x26>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	461a      	mov	r2, r3
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d1f2      	bne.n	80113bc <chk_chr+0xc>
	return *str;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	781b      	ldrb	r3, [r3, #0]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	370c      	adds	r7, #12
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
	...

080113e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80113f2:	2300      	movs	r3, #0
 80113f4:	60bb      	str	r3, [r7, #8]
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	60fb      	str	r3, [r7, #12]
 80113fa:	e029      	b.n	8011450 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80113fc:	4a27      	ldr	r2, [pc, #156]	; (801149c <chk_lock+0xb4>)
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	011b      	lsls	r3, r3, #4
 8011402:	4413      	add	r3, r2
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d01d      	beq.n	8011446 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801140a:	4a24      	ldr	r2, [pc, #144]	; (801149c <chk_lock+0xb4>)
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	011b      	lsls	r3, r3, #4
 8011410:	4413      	add	r3, r2
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	429a      	cmp	r2, r3
 801141a:	d116      	bne.n	801144a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801141c:	4a1f      	ldr	r2, [pc, #124]	; (801149c <chk_lock+0xb4>)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	011b      	lsls	r3, r3, #4
 8011422:	4413      	add	r3, r2
 8011424:	3304      	adds	r3, #4
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801142c:	429a      	cmp	r2, r3
 801142e:	d10c      	bne.n	801144a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011430:	4a1a      	ldr	r2, [pc, #104]	; (801149c <chk_lock+0xb4>)
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	011b      	lsls	r3, r3, #4
 8011436:	4413      	add	r3, r2
 8011438:	3308      	adds	r3, #8
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011440:	429a      	cmp	r2, r3
 8011442:	d102      	bne.n	801144a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011444:	e007      	b.n	8011456 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011446:	2301      	movs	r3, #1
 8011448:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	3301      	adds	r3, #1
 801144e:	60fb      	str	r3, [r7, #12]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2b01      	cmp	r3, #1
 8011454:	d9d2      	bls.n	80113fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2b02      	cmp	r3, #2
 801145a:	d109      	bne.n	8011470 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d102      	bne.n	8011468 <chk_lock+0x80>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	2b02      	cmp	r3, #2
 8011466:	d101      	bne.n	801146c <chk_lock+0x84>
 8011468:	2300      	movs	r3, #0
 801146a:	e010      	b.n	801148e <chk_lock+0xa6>
 801146c:	2312      	movs	r3, #18
 801146e:	e00e      	b.n	801148e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d108      	bne.n	8011488 <chk_lock+0xa0>
 8011476:	4a09      	ldr	r2, [pc, #36]	; (801149c <chk_lock+0xb4>)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	011b      	lsls	r3, r3, #4
 801147c:	4413      	add	r3, r2
 801147e:	330c      	adds	r3, #12
 8011480:	881b      	ldrh	r3, [r3, #0]
 8011482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011486:	d101      	bne.n	801148c <chk_lock+0xa4>
 8011488:	2310      	movs	r3, #16
 801148a:	e000      	b.n	801148e <chk_lock+0xa6>
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3714      	adds	r7, #20
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	20041334 	.word	0x20041334

080114a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80114a6:	2300      	movs	r3, #0
 80114a8:	607b      	str	r3, [r7, #4]
 80114aa:	e002      	b.n	80114b2 <enq_lock+0x12>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	3301      	adds	r3, #1
 80114b0:	607b      	str	r3, [r7, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d806      	bhi.n	80114c6 <enq_lock+0x26>
 80114b8:	4a09      	ldr	r2, [pc, #36]	; (80114e0 <enq_lock+0x40>)
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	011b      	lsls	r3, r3, #4
 80114be:	4413      	add	r3, r2
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d1f2      	bne.n	80114ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b02      	cmp	r3, #2
 80114ca:	bf14      	ite	ne
 80114cc:	2301      	movne	r3, #1
 80114ce:	2300      	moveq	r3, #0
 80114d0:	b2db      	uxtb	r3, r3
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	20041334 	.word	0x20041334

080114e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b085      	sub	sp, #20
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80114ee:	2300      	movs	r3, #0
 80114f0:	60fb      	str	r3, [r7, #12]
 80114f2:	e01f      	b.n	8011534 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80114f4:	4a41      	ldr	r2, [pc, #260]	; (80115fc <inc_lock+0x118>)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	011b      	lsls	r3, r3, #4
 80114fa:	4413      	add	r3, r2
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	429a      	cmp	r2, r3
 8011504:	d113      	bne.n	801152e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011506:	4a3d      	ldr	r2, [pc, #244]	; (80115fc <inc_lock+0x118>)
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	011b      	lsls	r3, r3, #4
 801150c:	4413      	add	r3, r2
 801150e:	3304      	adds	r3, #4
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011516:	429a      	cmp	r2, r3
 8011518:	d109      	bne.n	801152e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801151a:	4a38      	ldr	r2, [pc, #224]	; (80115fc <inc_lock+0x118>)
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	011b      	lsls	r3, r3, #4
 8011520:	4413      	add	r3, r2
 8011522:	3308      	adds	r3, #8
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801152a:	429a      	cmp	r2, r3
 801152c:	d006      	beq.n	801153c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3301      	adds	r3, #1
 8011532:	60fb      	str	r3, [r7, #12]
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2b01      	cmp	r3, #1
 8011538:	d9dc      	bls.n	80114f4 <inc_lock+0x10>
 801153a:	e000      	b.n	801153e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801153c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2b02      	cmp	r3, #2
 8011542:	d132      	bne.n	80115aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011544:	2300      	movs	r3, #0
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	e002      	b.n	8011550 <inc_lock+0x6c>
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	3301      	adds	r3, #1
 801154e:	60fb      	str	r3, [r7, #12]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2b01      	cmp	r3, #1
 8011554:	d806      	bhi.n	8011564 <inc_lock+0x80>
 8011556:	4a29      	ldr	r2, [pc, #164]	; (80115fc <inc_lock+0x118>)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	011b      	lsls	r3, r3, #4
 801155c:	4413      	add	r3, r2
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1f2      	bne.n	801154a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2b02      	cmp	r3, #2
 8011568:	d101      	bne.n	801156e <inc_lock+0x8a>
 801156a:	2300      	movs	r3, #0
 801156c:	e040      	b.n	80115f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	4922      	ldr	r1, [pc, #136]	; (80115fc <inc_lock+0x118>)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	011b      	lsls	r3, r3, #4
 8011578:	440b      	add	r3, r1
 801157a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	689a      	ldr	r2, [r3, #8]
 8011580:	491e      	ldr	r1, [pc, #120]	; (80115fc <inc_lock+0x118>)
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	011b      	lsls	r3, r3, #4
 8011586:	440b      	add	r3, r1
 8011588:	3304      	adds	r3, #4
 801158a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	695a      	ldr	r2, [r3, #20]
 8011590:	491a      	ldr	r1, [pc, #104]	; (80115fc <inc_lock+0x118>)
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	011b      	lsls	r3, r3, #4
 8011596:	440b      	add	r3, r1
 8011598:	3308      	adds	r3, #8
 801159a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801159c:	4a17      	ldr	r2, [pc, #92]	; (80115fc <inc_lock+0x118>)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	4413      	add	r3, r2
 80115a4:	330c      	adds	r3, #12
 80115a6:	2200      	movs	r2, #0
 80115a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d009      	beq.n	80115c4 <inc_lock+0xe0>
 80115b0:	4a12      	ldr	r2, [pc, #72]	; (80115fc <inc_lock+0x118>)
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	011b      	lsls	r3, r3, #4
 80115b6:	4413      	add	r3, r2
 80115b8:	330c      	adds	r3, #12
 80115ba:	881b      	ldrh	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <inc_lock+0xe0>
 80115c0:	2300      	movs	r3, #0
 80115c2:	e015      	b.n	80115f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d108      	bne.n	80115dc <inc_lock+0xf8>
 80115ca:	4a0c      	ldr	r2, [pc, #48]	; (80115fc <inc_lock+0x118>)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	011b      	lsls	r3, r3, #4
 80115d0:	4413      	add	r3, r2
 80115d2:	330c      	adds	r3, #12
 80115d4:	881b      	ldrh	r3, [r3, #0]
 80115d6:	3301      	adds	r3, #1
 80115d8:	b29a      	uxth	r2, r3
 80115da:	e001      	b.n	80115e0 <inc_lock+0xfc>
 80115dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115e0:	4906      	ldr	r1, [pc, #24]	; (80115fc <inc_lock+0x118>)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	011b      	lsls	r3, r3, #4
 80115e6:	440b      	add	r3, r1
 80115e8:	330c      	adds	r3, #12
 80115ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	3301      	adds	r3, #1
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	20041334 	.word	0x20041334

08011600 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011600:	b480      	push	{r7}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	3b01      	subs	r3, #1
 801160c:	607b      	str	r3, [r7, #4]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d825      	bhi.n	8011660 <dec_lock+0x60>
		n = Files[i].ctr;
 8011614:	4a17      	ldr	r2, [pc, #92]	; (8011674 <dec_lock+0x74>)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	011b      	lsls	r3, r3, #4
 801161a:	4413      	add	r3, r2
 801161c:	330c      	adds	r3, #12
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011622:	89fb      	ldrh	r3, [r7, #14]
 8011624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011628:	d101      	bne.n	801162e <dec_lock+0x2e>
 801162a:	2300      	movs	r3, #0
 801162c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801162e:	89fb      	ldrh	r3, [r7, #14]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <dec_lock+0x3a>
 8011634:	89fb      	ldrh	r3, [r7, #14]
 8011636:	3b01      	subs	r3, #1
 8011638:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801163a:	4a0e      	ldr	r2, [pc, #56]	; (8011674 <dec_lock+0x74>)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	011b      	lsls	r3, r3, #4
 8011640:	4413      	add	r3, r2
 8011642:	330c      	adds	r3, #12
 8011644:	89fa      	ldrh	r2, [r7, #14]
 8011646:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011648:	89fb      	ldrh	r3, [r7, #14]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d105      	bne.n	801165a <dec_lock+0x5a>
 801164e:	4a09      	ldr	r2, [pc, #36]	; (8011674 <dec_lock+0x74>)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	011b      	lsls	r3, r3, #4
 8011654:	4413      	add	r3, r2
 8011656:	2200      	movs	r2, #0
 8011658:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801165a:	2300      	movs	r3, #0
 801165c:	737b      	strb	r3, [r7, #13]
 801165e:	e001      	b.n	8011664 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011660:	2302      	movs	r3, #2
 8011662:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011664:	7b7b      	ldrb	r3, [r7, #13]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3714      	adds	r7, #20
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	20041334 	.word	0x20041334

08011678 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011678:	b480      	push	{r7}
 801167a:	b085      	sub	sp, #20
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011680:	2300      	movs	r3, #0
 8011682:	60fb      	str	r3, [r7, #12]
 8011684:	e010      	b.n	80116a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011686:	4a0d      	ldr	r2, [pc, #52]	; (80116bc <clear_lock+0x44>)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	011b      	lsls	r3, r3, #4
 801168c:	4413      	add	r3, r2
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	429a      	cmp	r2, r3
 8011694:	d105      	bne.n	80116a2 <clear_lock+0x2a>
 8011696:	4a09      	ldr	r2, [pc, #36]	; (80116bc <clear_lock+0x44>)
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	011b      	lsls	r3, r3, #4
 801169c:	4413      	add	r3, r2
 801169e:	2200      	movs	r2, #0
 80116a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	3301      	adds	r3, #1
 80116a6:	60fb      	str	r3, [r7, #12]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d9eb      	bls.n	8011686 <clear_lock+0xe>
	}
}
 80116ae:	bf00      	nop
 80116b0:	3714      	adds	r7, #20
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr
 80116ba:	bf00      	nop
 80116bc:	20041334 	.word	0x20041334

080116c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80116c8:	2300      	movs	r3, #0
 80116ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	78db      	ldrb	r3, [r3, #3]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d034      	beq.n	801173e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	7858      	ldrb	r0, [r3, #1]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80116e4:	2301      	movs	r3, #1
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	f7ff fd40 	bl	801116c <disk_write>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d002      	beq.n	80116f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80116f2:	2301      	movs	r3, #1
 80116f4:	73fb      	strb	r3, [r7, #15]
 80116f6:	e022      	b.n	801173e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011702:	697a      	ldr	r2, [r7, #20]
 8011704:	1ad2      	subs	r2, r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	429a      	cmp	r2, r3
 801170c:	d217      	bcs.n	801173e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	789b      	ldrb	r3, [r3, #2]
 8011712:	613b      	str	r3, [r7, #16]
 8011714:	e010      	b.n	8011738 <sync_window+0x78>
					wsect += fs->fsize;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6a1b      	ldr	r3, [r3, #32]
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	4413      	add	r3, r2
 801171e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	7858      	ldrb	r0, [r3, #1]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801172a:	2301      	movs	r3, #1
 801172c:	697a      	ldr	r2, [r7, #20]
 801172e:	f7ff fd1d 	bl	801116c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	3b01      	subs	r3, #1
 8011736:	613b      	str	r3, [r7, #16]
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	2b01      	cmp	r3, #1
 801173c:	d8eb      	bhi.n	8011716 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3718      	adds	r7, #24
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	429a      	cmp	r2, r3
 801175e:	d01b      	beq.n	8011798 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff ffad 	bl	80116c0 <sync_window>
 8011766:	4603      	mov	r3, r0
 8011768:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d113      	bne.n	8011798 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	7858      	ldrb	r0, [r3, #1]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801177a:	2301      	movs	r3, #1
 801177c:	683a      	ldr	r2, [r7, #0]
 801177e:	f7ff fcd5 	bl	801112c <disk_read>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d004      	beq.n	8011792 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011788:	f04f 33ff 	mov.w	r3, #4294967295
 801178c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801178e:	2301      	movs	r3, #1
 8011790:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011798:	7bfb      	ldrb	r3, [r7, #15]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
	...

080117a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff ff87 	bl	80116c0 <sync_window>
 80117b2:	4603      	mov	r3, r0
 80117b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80117b6:	7bfb      	ldrb	r3, [r7, #15]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d159      	bne.n	8011870 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b03      	cmp	r3, #3
 80117c2:	d149      	bne.n	8011858 <sync_fs+0xb4>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	791b      	ldrb	r3, [r3, #4]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d145      	bne.n	8011858 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	461a      	mov	r2, r3
 80117d8:	2100      	movs	r1, #0
 80117da:	f7ff fda8 	bl	801132e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	3338      	adds	r3, #56	; 0x38
 80117e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80117e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff fd37 	bl	801125e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	3338      	adds	r3, #56	; 0x38
 80117f4:	4921      	ldr	r1, [pc, #132]	; (801187c <sync_fs+0xd8>)
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7ff fd4c 	bl	8011294 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3338      	adds	r3, #56	; 0x38
 8011800:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011804:	491e      	ldr	r1, [pc, #120]	; (8011880 <sync_fs+0xdc>)
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff fd44 	bl	8011294 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	3338      	adds	r3, #56	; 0x38
 8011810:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	695b      	ldr	r3, [r3, #20]
 8011818:	4619      	mov	r1, r3
 801181a:	4610      	mov	r0, r2
 801181c:	f7ff fd3a 	bl	8011294 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	3338      	adds	r3, #56	; 0x38
 8011824:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	691b      	ldr	r3, [r3, #16]
 801182c:	4619      	mov	r1, r3
 801182e:	4610      	mov	r0, r2
 8011830:	f7ff fd30 	bl	8011294 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	7858      	ldrb	r0, [r3, #1]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801184c:	2301      	movs	r3, #1
 801184e:	f7ff fc8d 	bl	801116c <disk_write>
			fs->fsi_flag = 0;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2200      	movs	r2, #0
 8011856:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	785b      	ldrb	r3, [r3, #1]
 801185c:	2200      	movs	r2, #0
 801185e:	2100      	movs	r1, #0
 8011860:	4618      	mov	r0, r3
 8011862:	f7ff fca3 	bl	80111ac <disk_ioctl>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d001      	beq.n	8011870 <sync_fs+0xcc>
 801186c:	2301      	movs	r3, #1
 801186e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011870:	7bfb      	ldrb	r3, [r7, #15]
}
 8011872:	4618      	mov	r0, r3
 8011874:	3710      	adds	r7, #16
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	41615252 	.word	0x41615252
 8011880:	61417272 	.word	0x61417272

08011884 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	3b02      	subs	r3, #2
 8011892:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	3b02      	subs	r3, #2
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	429a      	cmp	r2, r3
 801189e:	d301      	bcc.n	80118a4 <clust2sect+0x20>
 80118a0:	2300      	movs	r3, #0
 80118a2:	e008      	b.n	80118b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	895b      	ldrh	r3, [r3, #10]
 80118a8:	461a      	mov	r2, r3
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	fb03 f202 	mul.w	r2, r3, r2
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118b4:	4413      	add	r3, r2
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	370c      	adds	r7, #12
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr

080118c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b086      	sub	sp, #24
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d904      	bls.n	80118e2 <get_fat+0x20>
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	69db      	ldr	r3, [r3, #28]
 80118dc:	683a      	ldr	r2, [r7, #0]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d302      	bcc.n	80118e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80118e2:	2301      	movs	r3, #1
 80118e4:	617b      	str	r3, [r7, #20]
 80118e6:	e0b7      	b.n	8011a58 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80118e8:	f04f 33ff 	mov.w	r3, #4294967295
 80118ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d05a      	beq.n	80119ac <get_fat+0xea>
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d07d      	beq.n	80119f6 <get_fat+0x134>
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	f040 80a2 	bne.w	8011a44 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	085b      	lsrs	r3, r3, #1
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	4413      	add	r3, r2
 801190c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	899b      	ldrh	r3, [r3, #12]
 8011916:	4619      	mov	r1, r3
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	fbb3 f3f1 	udiv	r3, r3, r1
 801191e:	4413      	add	r3, r2
 8011920:	4619      	mov	r1, r3
 8011922:	6938      	ldr	r0, [r7, #16]
 8011924:	f7ff ff10 	bl	8011748 <move_window>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	f040 808d 	bne.w	8011a4a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	1c5a      	adds	r2, r3, #1
 8011934:	60fa      	str	r2, [r7, #12]
 8011936:	693a      	ldr	r2, [r7, #16]
 8011938:	8992      	ldrh	r2, [r2, #12]
 801193a:	fbb3 f1f2 	udiv	r1, r3, r2
 801193e:	fb02 f201 	mul.w	r2, r2, r1
 8011942:	1a9b      	subs	r3, r3, r2
 8011944:	693a      	ldr	r2, [r7, #16]
 8011946:	4413      	add	r3, r2
 8011948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801194c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	899b      	ldrh	r3, [r3, #12]
 8011956:	4619      	mov	r1, r3
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	fbb3 f3f1 	udiv	r3, r3, r1
 801195e:	4413      	add	r3, r2
 8011960:	4619      	mov	r1, r3
 8011962:	6938      	ldr	r0, [r7, #16]
 8011964:	f7ff fef0 	bl	8011748 <move_window>
 8011968:	4603      	mov	r3, r0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d16f      	bne.n	8011a4e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	899b      	ldrh	r3, [r3, #12]
 8011972:	461a      	mov	r2, r3
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	fbb3 f1f2 	udiv	r1, r3, r2
 801197a:	fb02 f201 	mul.w	r2, r2, r1
 801197e:	1a9b      	subs	r3, r3, r2
 8011980:	693a      	ldr	r2, [r7, #16]
 8011982:	4413      	add	r3, r2
 8011984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011988:	021b      	lsls	r3, r3, #8
 801198a:	461a      	mov	r2, r3
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	4313      	orrs	r3, r2
 8011990:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	2b00      	cmp	r3, #0
 801199a:	d002      	beq.n	80119a2 <get_fat+0xe0>
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	091b      	lsrs	r3, r3, #4
 80119a0:	e002      	b.n	80119a8 <get_fat+0xe6>
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80119a8:	617b      	str	r3, [r7, #20]
			break;
 80119aa:	e055      	b.n	8011a58 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	899b      	ldrh	r3, [r3, #12]
 80119b4:	085b      	lsrs	r3, r3, #1
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	4619      	mov	r1, r3
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80119c0:	4413      	add	r3, r2
 80119c2:	4619      	mov	r1, r3
 80119c4:	6938      	ldr	r0, [r7, #16]
 80119c6:	f7ff febf 	bl	8011748 <move_window>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d140      	bne.n	8011a52 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	005b      	lsls	r3, r3, #1
 80119da:	693a      	ldr	r2, [r7, #16]
 80119dc:	8992      	ldrh	r2, [r2, #12]
 80119de:	fbb3 f0f2 	udiv	r0, r3, r2
 80119e2:	fb02 f200 	mul.w	r2, r2, r0
 80119e6:	1a9b      	subs	r3, r3, r2
 80119e8:	440b      	add	r3, r1
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fbfc 	bl	80111e8 <ld_word>
 80119f0:	4603      	mov	r3, r0
 80119f2:	617b      	str	r3, [r7, #20]
			break;
 80119f4:	e030      	b.n	8011a58 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	899b      	ldrh	r3, [r3, #12]
 80119fe:	089b      	lsrs	r3, r3, #2
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	4619      	mov	r1, r3
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	6938      	ldr	r0, [r7, #16]
 8011a10:	f7ff fe9a 	bl	8011748 <move_window>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d11d      	bne.n	8011a56 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	693a      	ldr	r2, [r7, #16]
 8011a26:	8992      	ldrh	r2, [r2, #12]
 8011a28:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a2c:	fb02 f200 	mul.w	r2, r2, r0
 8011a30:	1a9b      	subs	r3, r3, r2
 8011a32:	440b      	add	r3, r1
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7ff fbef 	bl	8011218 <ld_dword>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011a40:	617b      	str	r3, [r7, #20]
			break;
 8011a42:	e009      	b.n	8011a58 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011a44:	2301      	movs	r3, #1
 8011a46:	617b      	str	r3, [r7, #20]
 8011a48:	e006      	b.n	8011a58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a4a:	bf00      	nop
 8011a4c:	e004      	b.n	8011a58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a4e:	bf00      	nop
 8011a50:	e002      	b.n	8011a58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a52:	bf00      	nop
 8011a54:	e000      	b.n	8011a58 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a56:	bf00      	nop
		}
	}

	return val;
 8011a58:	697b      	ldr	r3, [r7, #20]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3718      	adds	r7, #24
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011a62:	b590      	push	{r4, r7, lr}
 8011a64:	b089      	sub	sp, #36	; 0x24
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	60f8      	str	r0, [r7, #12]
 8011a6a:	60b9      	str	r1, [r7, #8]
 8011a6c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011a6e:	2302      	movs	r3, #2
 8011a70:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	f240 8106 	bls.w	8011c86 <put_fat+0x224>
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	69db      	ldr	r3, [r3, #28]
 8011a7e:	68ba      	ldr	r2, [r7, #8]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	f080 8100 	bcs.w	8011c86 <put_fat+0x224>
		switch (fs->fs_type) {
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	2b02      	cmp	r3, #2
 8011a8c:	f000 8088 	beq.w	8011ba0 <put_fat+0x13e>
 8011a90:	2b03      	cmp	r3, #3
 8011a92:	f000 80b0 	beq.w	8011bf6 <put_fat+0x194>
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	f040 80f5 	bne.w	8011c86 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	61bb      	str	r3, [r7, #24]
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	085b      	lsrs	r3, r3, #1
 8011aa4:	69ba      	ldr	r2, [r7, #24]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011aba:	4413      	add	r3, r2
 8011abc:	4619      	mov	r1, r3
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f7ff fe42 	bl	8011748 <move_window>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ac8:	7ffb      	ldrb	r3, [r7, #31]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f040 80d4 	bne.w	8011c78 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	1c5a      	adds	r2, r3, #1
 8011ada:	61ba      	str	r2, [r7, #24]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	8992      	ldrh	r2, [r2, #12]
 8011ae0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ae4:	fb02 f200 	mul.w	r2, r2, r0
 8011ae8:	1a9b      	subs	r3, r3, r2
 8011aea:	440b      	add	r3, r1
 8011aec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	f003 0301 	and.w	r3, r3, #1
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00d      	beq.n	8011b14 <put_fat+0xb2>
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	b25b      	sxtb	r3, r3
 8011afe:	f003 030f 	and.w	r3, r3, #15
 8011b02:	b25a      	sxtb	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	011b      	lsls	r3, r3, #4
 8011b0a:	b25b      	sxtb	r3, r3
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	b25b      	sxtb	r3, r3
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	e001      	b.n	8011b18 <put_fat+0xb6>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	697a      	ldr	r2, [r7, #20]
 8011b1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	899b      	ldrh	r3, [r3, #12]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b32:	4413      	add	r3, r2
 8011b34:	4619      	mov	r1, r3
 8011b36:	68f8      	ldr	r0, [r7, #12]
 8011b38:	f7ff fe06 	bl	8011748 <move_window>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b40:	7ffb      	ldrb	r3, [r7, #31]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	f040 809a 	bne.w	8011c7c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	899b      	ldrh	r3, [r3, #12]
 8011b52:	461a      	mov	r2, r3
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b5a:	fb02 f200 	mul.w	r2, r2, r0
 8011b5e:	1a9b      	subs	r3, r3, r2
 8011b60:	440b      	add	r3, r1
 8011b62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	f003 0301 	and.w	r3, r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d003      	beq.n	8011b76 <put_fat+0x114>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	091b      	lsrs	r3, r3, #4
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	e00e      	b.n	8011b94 <put_fat+0x132>
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	b25b      	sxtb	r3, r3
 8011b7c:	f023 030f 	bic.w	r3, r3, #15
 8011b80:	b25a      	sxtb	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	0a1b      	lsrs	r3, r3, #8
 8011b86:	b25b      	sxtb	r3, r3
 8011b88:	f003 030f 	and.w	r3, r3, #15
 8011b8c:	b25b      	sxtb	r3, r3
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	b25b      	sxtb	r3, r3
 8011b92:	b2db      	uxtb	r3, r3
 8011b94:	697a      	ldr	r2, [r7, #20]
 8011b96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	70da      	strb	r2, [r3, #3]
			break;
 8011b9e:	e072      	b.n	8011c86 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	899b      	ldrh	r3, [r3, #12]
 8011ba8:	085b      	lsrs	r3, r3, #1
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	4619      	mov	r1, r3
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bb4:	4413      	add	r3, r2
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f7ff fdc5 	bl	8011748 <move_window>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bc2:	7ffb      	ldrb	r3, [r7, #31]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d15b      	bne.n	8011c80 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	005b      	lsls	r3, r3, #1
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	8992      	ldrh	r2, [r2, #12]
 8011bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bda:	fb02 f200 	mul.w	r2, r2, r0
 8011bde:	1a9b      	subs	r3, r3, r2
 8011be0:	440b      	add	r3, r1
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	b292      	uxth	r2, r2
 8011be6:	4611      	mov	r1, r2
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7ff fb38 	bl	801125e <st_word>
			fs->wflag = 1;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	70da      	strb	r2, [r3, #3]
			break;
 8011bf4:	e047      	b.n	8011c86 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	899b      	ldrh	r3, [r3, #12]
 8011bfe:	089b      	lsrs	r3, r3, #2
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	4619      	mov	r1, r3
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c0a:	4413      	add	r3, r2
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	68f8      	ldr	r0, [r7, #12]
 8011c10:	f7ff fd9a 	bl	8011748 <move_window>
 8011c14:	4603      	mov	r3, r0
 8011c16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c18:	7ffb      	ldrb	r3, [r7, #31]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d132      	bne.n	8011c84 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	8992      	ldrh	r2, [r2, #12]
 8011c32:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c36:	fb02 f200 	mul.w	r2, r2, r0
 8011c3a:	1a9b      	subs	r3, r3, r2
 8011c3c:	440b      	add	r3, r1
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7ff faea 	bl	8011218 <ld_dword>
 8011c44:	4603      	mov	r3, r0
 8011c46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011c4a:	4323      	orrs	r3, r4
 8011c4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	8992      	ldrh	r2, [r2, #12]
 8011c5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c60:	fb02 f200 	mul.w	r2, r2, r0
 8011c64:	1a9b      	subs	r3, r3, r2
 8011c66:	440b      	add	r3, r1
 8011c68:	6879      	ldr	r1, [r7, #4]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7ff fb12 	bl	8011294 <st_dword>
			fs->wflag = 1;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2201      	movs	r2, #1
 8011c74:	70da      	strb	r2, [r3, #3]
			break;
 8011c76:	e006      	b.n	8011c86 <put_fat+0x224>
			if (res != FR_OK) break;
 8011c78:	bf00      	nop
 8011c7a:	e004      	b.n	8011c86 <put_fat+0x224>
			if (res != FR_OK) break;
 8011c7c:	bf00      	nop
 8011c7e:	e002      	b.n	8011c86 <put_fat+0x224>
			if (res != FR_OK) break;
 8011c80:	bf00      	nop
 8011c82:	e000      	b.n	8011c86 <put_fat+0x224>
			if (res != FR_OK) break;
 8011c84:	bf00      	nop
		}
	}
	return res;
 8011c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3724      	adds	r7, #36	; 0x24
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd90      	pop	{r4, r7, pc}

08011c90 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b088      	sub	sp, #32
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d904      	bls.n	8011cb6 <remove_chain+0x26>
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	69db      	ldr	r3, [r3, #28]
 8011cb0:	68ba      	ldr	r2, [r7, #8]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d301      	bcc.n	8011cba <remove_chain+0x2a>
 8011cb6:	2302      	movs	r3, #2
 8011cb8:	e04b      	b.n	8011d52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00c      	beq.n	8011cda <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc4:	6879      	ldr	r1, [r7, #4]
 8011cc6:	69b8      	ldr	r0, [r7, #24]
 8011cc8:	f7ff fecb 	bl	8011a62 <put_fat>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011cd0:	7ffb      	ldrb	r3, [r7, #31]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d001      	beq.n	8011cda <remove_chain+0x4a>
 8011cd6:	7ffb      	ldrb	r3, [r7, #31]
 8011cd8:	e03b      	b.n	8011d52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011cda:	68b9      	ldr	r1, [r7, #8]
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f7ff fdf0 	bl	80118c2 <get_fat>
 8011ce2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d031      	beq.n	8011d4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2b01      	cmp	r3, #1
 8011cee:	d101      	bne.n	8011cf4 <remove_chain+0x64>
 8011cf0:	2302      	movs	r3, #2
 8011cf2:	e02e      	b.n	8011d52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfa:	d101      	bne.n	8011d00 <remove_chain+0x70>
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e028      	b.n	8011d52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011d00:	2200      	movs	r2, #0
 8011d02:	68b9      	ldr	r1, [r7, #8]
 8011d04:	69b8      	ldr	r0, [r7, #24]
 8011d06:	f7ff feac 	bl	8011a62 <put_fat>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011d0e:	7ffb      	ldrb	r3, [r7, #31]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <remove_chain+0x88>
 8011d14:	7ffb      	ldrb	r3, [r7, #31]
 8011d16:	e01c      	b.n	8011d52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	695a      	ldr	r2, [r3, #20]
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	69db      	ldr	r3, [r3, #28]
 8011d20:	3b02      	subs	r3, #2
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d20b      	bcs.n	8011d3e <remove_chain+0xae>
			fs->free_clst++;
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	695b      	ldr	r3, [r3, #20]
 8011d2a:	1c5a      	adds	r2, r3, #1
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	791b      	ldrb	r3, [r3, #4]
 8011d34:	f043 0301 	orr.w	r3, r3, #1
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	69db      	ldr	r3, [r3, #28]
 8011d46:	68ba      	ldr	r2, [r7, #8]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d3c6      	bcc.n	8011cda <remove_chain+0x4a>
 8011d4c:	e000      	b.n	8011d50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011d4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3720      	adds	r7, #32
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b088      	sub	sp, #32
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
 8011d62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d10d      	bne.n	8011d8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d004      	beq.n	8011d86 <create_chain+0x2c>
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	69db      	ldr	r3, [r3, #28]
 8011d80:	69ba      	ldr	r2, [r7, #24]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d31b      	bcc.n	8011dbe <create_chain+0x64>
 8011d86:	2301      	movs	r3, #1
 8011d88:	61bb      	str	r3, [r7, #24]
 8011d8a:	e018      	b.n	8011dbe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7ff fd97 	bl	80118c2 <get_fat>
 8011d94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d801      	bhi.n	8011da0 <create_chain+0x46>
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	e070      	b.n	8011e82 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011da6:	d101      	bne.n	8011dac <create_chain+0x52>
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	e06a      	b.n	8011e82 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	69db      	ldr	r3, [r3, #28]
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d201      	bcs.n	8011dba <create_chain+0x60>
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	e063      	b.n	8011e82 <create_chain+0x128>
		scl = clst;
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011dbe:	69bb      	ldr	r3, [r7, #24]
 8011dc0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	69db      	ldr	r3, [r3, #28]
 8011dcc:	69fa      	ldr	r2, [r7, #28]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d307      	bcc.n	8011de2 <create_chain+0x88>
				ncl = 2;
 8011dd2:	2302      	movs	r3, #2
 8011dd4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011dd6:	69fa      	ldr	r2, [r7, #28]
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d901      	bls.n	8011de2 <create_chain+0x88>
 8011dde:	2300      	movs	r3, #0
 8011de0:	e04f      	b.n	8011e82 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011de2:	69f9      	ldr	r1, [r7, #28]
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7ff fd6c 	bl	80118c2 <get_fat>
 8011dea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d00e      	beq.n	8011e10 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d003      	beq.n	8011e00 <create_chain+0xa6>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfe:	d101      	bne.n	8011e04 <create_chain+0xaa>
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	e03e      	b.n	8011e82 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011e04:	69fa      	ldr	r2, [r7, #28]
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d1da      	bne.n	8011dc2 <create_chain+0x68>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	e038      	b.n	8011e82 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011e10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011e12:	f04f 32ff 	mov.w	r2, #4294967295
 8011e16:	69f9      	ldr	r1, [r7, #28]
 8011e18:	6938      	ldr	r0, [r7, #16]
 8011e1a:	f7ff fe22 	bl	8011a62 <put_fat>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011e22:	7dfb      	ldrb	r3, [r7, #23]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d109      	bne.n	8011e3c <create_chain+0xe2>
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d006      	beq.n	8011e3c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011e2e:	69fa      	ldr	r2, [r7, #28]
 8011e30:	6839      	ldr	r1, [r7, #0]
 8011e32:	6938      	ldr	r0, [r7, #16]
 8011e34:	f7ff fe15 	bl	8011a62 <put_fat>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011e3c:	7dfb      	ldrb	r3, [r7, #23]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d116      	bne.n	8011e70 <create_chain+0x116>
		fs->last_clst = ncl;
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	69fa      	ldr	r2, [r7, #28]
 8011e46:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	695a      	ldr	r2, [r3, #20]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	69db      	ldr	r3, [r3, #28]
 8011e50:	3b02      	subs	r3, #2
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d804      	bhi.n	8011e60 <create_chain+0x106>
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	695b      	ldr	r3, [r3, #20]
 8011e5a:	1e5a      	subs	r2, r3, #1
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	791b      	ldrb	r3, [r3, #4]
 8011e64:	f043 0301 	orr.w	r3, r3, #1
 8011e68:	b2da      	uxtb	r2, r3
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	711a      	strb	r2, [r3, #4]
 8011e6e:	e007      	b.n	8011e80 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011e70:	7dfb      	ldrb	r3, [r7, #23]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d102      	bne.n	8011e7c <create_chain+0x122>
 8011e76:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7a:	e000      	b.n	8011e7e <create_chain+0x124>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011e80:	69fb      	ldr	r3, [r7, #28]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3720      	adds	r7, #32
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011e8a:	b480      	push	{r7}
 8011e8c:	b087      	sub	sp, #28
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9e:	3304      	adds	r3, #4
 8011ea0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8011eae:	68fa      	ldr	r2, [r7, #12]
 8011eb0:	8952      	ldrh	r2, [r2, #10]
 8011eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011eb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	1d1a      	adds	r2, r3, #4
 8011ebc:	613a      	str	r2, [r7, #16]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d101      	bne.n	8011ecc <clmt_clust+0x42>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	e010      	b.n	8011eee <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011ecc:	697a      	ldr	r2, [r7, #20]
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d307      	bcc.n	8011ee4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ed4:	697a      	ldr	r2, [r7, #20]
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	1ad3      	subs	r3, r2, r3
 8011eda:	617b      	str	r3, [r7, #20]
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	3304      	adds	r3, #4
 8011ee0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ee2:	e7e9      	b.n	8011eb8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011ee4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	4413      	add	r3, r2
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	371c      	adds	r7, #28
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr

08011efa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b086      	sub	sp, #24
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
 8011f02:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f10:	d204      	bcs.n	8011f1c <dir_sdi+0x22>
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	f003 031f 	and.w	r3, r3, #31
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d001      	beq.n	8011f20 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011f1c:	2302      	movs	r3, #2
 8011f1e:	e071      	b.n	8012004 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	683a      	ldr	r2, [r7, #0]
 8011f24:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	689b      	ldr	r3, [r3, #8]
 8011f2a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d106      	bne.n	8011f40 <dir_sdi+0x46>
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	2b02      	cmp	r3, #2
 8011f38:	d902      	bls.n	8011f40 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d10c      	bne.n	8011f60 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	095b      	lsrs	r3, r3, #5
 8011f4a:	693a      	ldr	r2, [r7, #16]
 8011f4c:	8912      	ldrh	r2, [r2, #8]
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d301      	bcc.n	8011f56 <dir_sdi+0x5c>
 8011f52:	2302      	movs	r3, #2
 8011f54:	e056      	b.n	8012004 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	61da      	str	r2, [r3, #28]
 8011f5e:	e02d      	b.n	8011fbc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	895b      	ldrh	r3, [r3, #10]
 8011f64:	461a      	mov	r2, r3
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	899b      	ldrh	r3, [r3, #12]
 8011f6a:	fb03 f302 	mul.w	r3, r3, r2
 8011f6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011f70:	e019      	b.n	8011fa6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6979      	ldr	r1, [r7, #20]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fca3 	bl	80118c2 <get_fat>
 8011f7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f84:	d101      	bne.n	8011f8a <dir_sdi+0x90>
 8011f86:	2301      	movs	r3, #1
 8011f88:	e03c      	b.n	8012004 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d904      	bls.n	8011f9a <dir_sdi+0xa0>
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	69db      	ldr	r3, [r3, #28]
 8011f94:	697a      	ldr	r2, [r7, #20]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d301      	bcc.n	8011f9e <dir_sdi+0xa4>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	e032      	b.n	8012004 <dir_sdi+0x10a>
			ofs -= csz;
 8011f9e:	683a      	ldr	r2, [r7, #0]
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	1ad3      	subs	r3, r2, r3
 8011fa4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d2e1      	bcs.n	8011f72 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011fae:	6979      	ldr	r1, [r7, #20]
 8011fb0:	6938      	ldr	r0, [r7, #16]
 8011fb2:	f7ff fc67 	bl	8011884 <clust2sect>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	697a      	ldr	r2, [r7, #20]
 8011fc0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	69db      	ldr	r3, [r3, #28]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d101      	bne.n	8011fce <dir_sdi+0xd4>
 8011fca:	2302      	movs	r3, #2
 8011fcc:	e01a      	b.n	8012004 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	69da      	ldr	r2, [r3, #28]
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	899b      	ldrh	r3, [r3, #12]
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fde:	441a      	add	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	899b      	ldrh	r3, [r3, #12]
 8011fee:	461a      	mov	r2, r3
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ff6:	fb02 f200 	mul.w	r2, r2, r0
 8011ffa:	1a9b      	subs	r3, r3, r2
 8011ffc:	18ca      	adds	r2, r1, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3718      	adds	r7, #24
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b086      	sub	sp, #24
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	695b      	ldr	r3, [r3, #20]
 8012020:	3320      	adds	r3, #32
 8012022:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d003      	beq.n	8012034 <dir_next+0x28>
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012032:	d301      	bcc.n	8012038 <dir_next+0x2c>
 8012034:	2304      	movs	r3, #4
 8012036:	e0bb      	b.n	80121b0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	899b      	ldrh	r3, [r3, #12]
 801203c:	461a      	mov	r2, r3
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	fbb3 f1f2 	udiv	r1, r3, r2
 8012044:	fb02 f201 	mul.w	r2, r2, r1
 8012048:	1a9b      	subs	r3, r3, r2
 801204a:	2b00      	cmp	r3, #0
 801204c:	f040 809d 	bne.w	801218a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	69db      	ldr	r3, [r3, #28]
 8012054:	1c5a      	adds	r2, r3, #1
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	699b      	ldr	r3, [r3, #24]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d10b      	bne.n	801207a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	095b      	lsrs	r3, r3, #5
 8012066:	68fa      	ldr	r2, [r7, #12]
 8012068:	8912      	ldrh	r2, [r2, #8]
 801206a:	4293      	cmp	r3, r2
 801206c:	f0c0 808d 	bcc.w	801218a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	61da      	str	r2, [r3, #28]
 8012076:	2304      	movs	r3, #4
 8012078:	e09a      	b.n	80121b0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	899b      	ldrh	r3, [r3, #12]
 801207e:	461a      	mov	r2, r3
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	fbb3 f3f2 	udiv	r3, r3, r2
 8012086:	68fa      	ldr	r2, [r7, #12]
 8012088:	8952      	ldrh	r2, [r2, #10]
 801208a:	3a01      	subs	r2, #1
 801208c:	4013      	ands	r3, r2
 801208e:	2b00      	cmp	r3, #0
 8012090:	d17b      	bne.n	801218a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	699b      	ldr	r3, [r3, #24]
 8012098:	4619      	mov	r1, r3
 801209a:	4610      	mov	r0, r2
 801209c:	f7ff fc11 	bl	80118c2 <get_fat>
 80120a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d801      	bhi.n	80120ac <dir_next+0xa0>
 80120a8:	2302      	movs	r3, #2
 80120aa:	e081      	b.n	80121b0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b2:	d101      	bne.n	80120b8 <dir_next+0xac>
 80120b4:	2301      	movs	r3, #1
 80120b6:	e07b      	b.n	80121b0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	69db      	ldr	r3, [r3, #28]
 80120bc:	697a      	ldr	r2, [r7, #20]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d359      	bcc.n	8012176 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d104      	bne.n	80120d2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	61da      	str	r2, [r3, #28]
 80120ce:	2304      	movs	r3, #4
 80120d0:	e06e      	b.n	80121b0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	4619      	mov	r1, r3
 80120da:	4610      	mov	r0, r2
 80120dc:	f7ff fe3d 	bl	8011d5a <create_chain>
 80120e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d101      	bne.n	80120ec <dir_next+0xe0>
 80120e8:	2307      	movs	r3, #7
 80120ea:	e061      	b.n	80121b0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d101      	bne.n	80120f6 <dir_next+0xea>
 80120f2:	2302      	movs	r3, #2
 80120f4:	e05c      	b.n	80121b0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120fc:	d101      	bne.n	8012102 <dir_next+0xf6>
 80120fe:	2301      	movs	r3, #1
 8012100:	e056      	b.n	80121b0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f7ff fadc 	bl	80116c0 <sync_window>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d001      	beq.n	8012112 <dir_next+0x106>
 801210e:	2301      	movs	r3, #1
 8012110:	e04e      	b.n	80121b0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	899b      	ldrh	r3, [r3, #12]
 801211c:	461a      	mov	r2, r3
 801211e:	2100      	movs	r1, #0
 8012120:	f7ff f905 	bl	801132e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012124:	2300      	movs	r3, #0
 8012126:	613b      	str	r3, [r7, #16]
 8012128:	6979      	ldr	r1, [r7, #20]
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	f7ff fbaa 	bl	8011884 <clust2sect>
 8012130:	4602      	mov	r2, r0
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	635a      	str	r2, [r3, #52]	; 0x34
 8012136:	e012      	b.n	801215e <dir_next+0x152>
						fs->wflag = 1;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2201      	movs	r2, #1
 801213c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801213e:	68f8      	ldr	r0, [r7, #12]
 8012140:	f7ff fabe 	bl	80116c0 <sync_window>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	d001      	beq.n	801214e <dir_next+0x142>
 801214a:	2301      	movs	r3, #1
 801214c:	e030      	b.n	80121b0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	3301      	adds	r3, #1
 8012152:	613b      	str	r3, [r7, #16]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012158:	1c5a      	adds	r2, r3, #1
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	635a      	str	r2, [r3, #52]	; 0x34
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	895b      	ldrh	r3, [r3, #10]
 8012162:	461a      	mov	r2, r3
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	4293      	cmp	r3, r2
 8012168:	d3e6      	bcc.n	8012138 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	1ad2      	subs	r2, r2, r3
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	697a      	ldr	r2, [r7, #20]
 801217a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801217c:	6979      	ldr	r1, [r7, #20]
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	f7ff fb80 	bl	8011884 <clust2sect>
 8012184:	4602      	mov	r2, r0
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	68ba      	ldr	r2, [r7, #8]
 801218e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	899b      	ldrh	r3, [r3, #12]
 801219a:	461a      	mov	r2, r3
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	fbb3 f0f2 	udiv	r0, r3, r2
 80121a2:	fb02 f200 	mul.w	r2, r2, r0
 80121a6:	1a9b      	subs	r3, r3, r2
 80121a8:	18ca      	adds	r2, r1, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3718      	adds	r7, #24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b086      	sub	sp, #24
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80121c8:	2100      	movs	r1, #0
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7ff fe95 	bl	8011efa <dir_sdi>
 80121d0:	4603      	mov	r3, r0
 80121d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80121d4:	7dfb      	ldrb	r3, [r7, #23]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d12b      	bne.n	8012232 <dir_alloc+0x7a>
		n = 0;
 80121da:	2300      	movs	r3, #0
 80121dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	69db      	ldr	r3, [r3, #28]
 80121e2:	4619      	mov	r1, r3
 80121e4:	68f8      	ldr	r0, [r7, #12]
 80121e6:	f7ff faaf 	bl	8011748 <move_window>
 80121ea:	4603      	mov	r3, r0
 80121ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80121ee:	7dfb      	ldrb	r3, [r7, #23]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d11d      	bne.n	8012230 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6a1b      	ldr	r3, [r3, #32]
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	2be5      	cmp	r3, #229	; 0xe5
 80121fc:	d004      	beq.n	8012208 <dir_alloc+0x50>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a1b      	ldr	r3, [r3, #32]
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d107      	bne.n	8012218 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	3301      	adds	r3, #1
 801220c:	613b      	str	r3, [r7, #16]
 801220e:	693a      	ldr	r2, [r7, #16]
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	429a      	cmp	r2, r3
 8012214:	d102      	bne.n	801221c <dir_alloc+0x64>
 8012216:	e00c      	b.n	8012232 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012218:	2300      	movs	r3, #0
 801221a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801221c:	2101      	movs	r1, #1
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ff fef4 	bl	801200c <dir_next>
 8012224:	4603      	mov	r3, r0
 8012226:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012228:	7dfb      	ldrb	r3, [r7, #23]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d0d7      	beq.n	80121de <dir_alloc+0x26>
 801222e:	e000      	b.n	8012232 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012230:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012232:	7dfb      	ldrb	r3, [r7, #23]
 8012234:	2b04      	cmp	r3, #4
 8012236:	d101      	bne.n	801223c <dir_alloc+0x84>
 8012238:	2307      	movs	r3, #7
 801223a:	75fb      	strb	r3, [r7, #23]
	return res;
 801223c:	7dfb      	ldrb	r3, [r7, #23]
}
 801223e:	4618      	mov	r0, r3
 8012240:	3718      	adds	r7, #24
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b084      	sub	sp, #16
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
 801224e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	331a      	adds	r3, #26
 8012254:	4618      	mov	r0, r3
 8012256:	f7fe ffc7 	bl	80111e8 <ld_word>
 801225a:	4603      	mov	r3, r0
 801225c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	2b03      	cmp	r3, #3
 8012264:	d109      	bne.n	801227a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	3314      	adds	r3, #20
 801226a:	4618      	mov	r0, r3
 801226c:	f7fe ffbc 	bl	80111e8 <ld_word>
 8012270:	4603      	mov	r3, r0
 8012272:	041b      	lsls	r3, r3, #16
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	4313      	orrs	r3, r2
 8012278:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801227a:	68fb      	ldr	r3, [r7, #12]
}
 801227c:	4618      	mov	r0, r3
 801227e:	3710      	adds	r7, #16
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}

08012284 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b084      	sub	sp, #16
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	331a      	adds	r3, #26
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	b292      	uxth	r2, r2
 8012298:	4611      	mov	r1, r2
 801229a:	4618      	mov	r0, r3
 801229c:	f7fe ffdf 	bl	801125e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b03      	cmp	r3, #3
 80122a6:	d109      	bne.n	80122bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	f103 0214 	add.w	r2, r3, #20
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	0c1b      	lsrs	r3, r3, #16
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	4619      	mov	r1, r3
 80122b6:	4610      	mov	r0, r2
 80122b8:	f7fe ffd1 	bl	801125e <st_word>
	}
}
 80122bc:	bf00      	nop
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80122ce:	2304      	movs	r3, #4
 80122d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80122d8:	e03c      	b.n	8012354 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	69db      	ldr	r3, [r3, #28]
 80122de:	4619      	mov	r1, r3
 80122e0:	6938      	ldr	r0, [r7, #16]
 80122e2:	f7ff fa31 	bl	8011748 <move_window>
 80122e6:	4603      	mov	r3, r0
 80122e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d136      	bne.n	801235e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6a1b      	ldr	r3, [r3, #32]
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80122f8:	7bfb      	ldrb	r3, [r7, #15]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d102      	bne.n	8012304 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80122fe:	2304      	movs	r3, #4
 8012300:	75fb      	strb	r3, [r7, #23]
 8012302:	e031      	b.n	8012368 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6a1b      	ldr	r3, [r3, #32]
 8012308:	330b      	adds	r3, #11
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012310:	73bb      	strb	r3, [r7, #14]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	7bba      	ldrb	r2, [r7, #14]
 8012316:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012318:	7bfb      	ldrb	r3, [r7, #15]
 801231a:	2be5      	cmp	r3, #229	; 0xe5
 801231c:	d011      	beq.n	8012342 <dir_read+0x7e>
 801231e:	7bfb      	ldrb	r3, [r7, #15]
 8012320:	2b2e      	cmp	r3, #46	; 0x2e
 8012322:	d00e      	beq.n	8012342 <dir_read+0x7e>
 8012324:	7bbb      	ldrb	r3, [r7, #14]
 8012326:	2b0f      	cmp	r3, #15
 8012328:	d00b      	beq.n	8012342 <dir_read+0x7e>
 801232a:	7bbb      	ldrb	r3, [r7, #14]
 801232c:	f023 0320 	bic.w	r3, r3, #32
 8012330:	2b08      	cmp	r3, #8
 8012332:	bf0c      	ite	eq
 8012334:	2301      	moveq	r3, #1
 8012336:	2300      	movne	r3, #0
 8012338:	b2db      	uxtb	r3, r3
 801233a:	461a      	mov	r2, r3
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	4293      	cmp	r3, r2
 8012340:	d00f      	beq.n	8012362 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012342:	2100      	movs	r1, #0
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff fe61 	bl	801200c <dir_next>
 801234a:	4603      	mov	r3, r0
 801234c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d108      	bne.n	8012366 <dir_read+0xa2>
	while (dp->sect) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	69db      	ldr	r3, [r3, #28]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d1be      	bne.n	80122da <dir_read+0x16>
 801235c:	e004      	b.n	8012368 <dir_read+0xa4>
		if (res != FR_OK) break;
 801235e:	bf00      	nop
 8012360:	e002      	b.n	8012368 <dir_read+0xa4>
				break;
 8012362:	bf00      	nop
 8012364:	e000      	b.n	8012368 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012366:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012368:	7dfb      	ldrb	r3, [r7, #23]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d002      	beq.n	8012374 <dir_read+0xb0>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2200      	movs	r2, #0
 8012372:	61da      	str	r2, [r3, #28]
	return res;
 8012374:	7dfb      	ldrb	r3, [r7, #23]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3718      	adds	r7, #24
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b086      	sub	sp, #24
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801238c:	2100      	movs	r1, #0
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7ff fdb3 	bl	8011efa <dir_sdi>
 8012394:	4603      	mov	r3, r0
 8012396:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012398:	7dfb      	ldrb	r3, [r7, #23]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d001      	beq.n	80123a2 <dir_find+0x24>
 801239e:	7dfb      	ldrb	r3, [r7, #23]
 80123a0:	e03e      	b.n	8012420 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	69db      	ldr	r3, [r3, #28]
 80123a6:	4619      	mov	r1, r3
 80123a8:	6938      	ldr	r0, [r7, #16]
 80123aa:	f7ff f9cd 	bl	8011748 <move_window>
 80123ae:	4603      	mov	r3, r0
 80123b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123b2:	7dfb      	ldrb	r3, [r7, #23]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d12f      	bne.n	8012418 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6a1b      	ldr	r3, [r3, #32]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80123c0:	7bfb      	ldrb	r3, [r7, #15]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d102      	bne.n	80123cc <dir_find+0x4e>
 80123c6:	2304      	movs	r3, #4
 80123c8:	75fb      	strb	r3, [r7, #23]
 80123ca:	e028      	b.n	801241e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6a1b      	ldr	r3, [r3, #32]
 80123d0:	330b      	adds	r3, #11
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6a1b      	ldr	r3, [r3, #32]
 80123e2:	330b      	adds	r3, #11
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	f003 0308 	and.w	r3, r3, #8
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d10a      	bne.n	8012404 <dir_find+0x86>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6a18      	ldr	r0, [r3, #32]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3324      	adds	r3, #36	; 0x24
 80123f6:	220b      	movs	r2, #11
 80123f8:	4619      	mov	r1, r3
 80123fa:	f7fe ffb2 	bl	8011362 <mem_cmp>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00b      	beq.n	801241c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012404:	2100      	movs	r1, #0
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff fe00 	bl	801200c <dir_next>
 801240c:	4603      	mov	r3, r0
 801240e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012410:	7dfb      	ldrb	r3, [r7, #23]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d0c5      	beq.n	80123a2 <dir_find+0x24>
 8012416:	e002      	b.n	801241e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012418:	bf00      	nop
 801241a:	e000      	b.n	801241e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801241c:	bf00      	nop

	return res;
 801241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012436:	2101      	movs	r1, #1
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff febd 	bl	80121b8 <dir_alloc>
 801243e:	4603      	mov	r3, r0
 8012440:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012442:	7bfb      	ldrb	r3, [r7, #15]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d11c      	bne.n	8012482 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	69db      	ldr	r3, [r3, #28]
 801244c:	4619      	mov	r1, r3
 801244e:	68b8      	ldr	r0, [r7, #8]
 8012450:	f7ff f97a 	bl	8011748 <move_window>
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012458:	7bfb      	ldrb	r3, [r7, #15]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d111      	bne.n	8012482 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6a1b      	ldr	r3, [r3, #32]
 8012462:	2220      	movs	r2, #32
 8012464:	2100      	movs	r1, #0
 8012466:	4618      	mov	r0, r3
 8012468:	f7fe ff61 	bl	801132e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a18      	ldr	r0, [r3, #32]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	3324      	adds	r3, #36	; 0x24
 8012474:	220b      	movs	r2, #11
 8012476:	4619      	mov	r1, r3
 8012478:	f7fe ff38 	bl	80112ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2201      	movs	r2, #1
 8012480:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012482:	7bfb      	ldrb	r3, [r7, #15]
}
 8012484:	4618      	mov	r0, r3
 8012486:	3710      	adds	r7, #16
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	69db      	ldr	r3, [r3, #28]
 801249e:	4619      	mov	r1, r3
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f7ff f951 	bl	8011748 <move_window>
 80124a6:	4603      	mov	r3, r0
 80124a8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80124aa:	7afb      	ldrb	r3, [r7, #11]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d106      	bne.n	80124be <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6a1b      	ldr	r3, [r3, #32]
 80124b4:	22e5      	movs	r2, #229	; 0xe5
 80124b6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2201      	movs	r2, #1
 80124bc:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80124be:	7afb      	ldrb	r3, [r7, #11]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3710      	adds	r7, #16
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b088      	sub	sp, #32
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	60fb      	str	r3, [r7, #12]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	3324      	adds	r3, #36	; 0x24
 80124dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80124de:	220b      	movs	r2, #11
 80124e0:	2120      	movs	r1, #32
 80124e2:	68b8      	ldr	r0, [r7, #8]
 80124e4:	f7fe ff23 	bl	801132e <mem_set>
	si = i = 0; ni = 8;
 80124e8:	2300      	movs	r3, #0
 80124ea:	613b      	str	r3, [r7, #16]
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	617b      	str	r3, [r7, #20]
 80124f0:	2308      	movs	r3, #8
 80124f2:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80124f4:	68fa      	ldr	r2, [r7, #12]
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	4413      	add	r3, r2
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b2e      	cmp	r3, #46	; 0x2e
 80124fe:	d12f      	bne.n	8012560 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	1c5a      	adds	r2, r3, #1
 8012504:	617a      	str	r2, [r7, #20]
 8012506:	68fa      	ldr	r2, [r7, #12]
 8012508:	4413      	add	r3, r2
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801250e:	7ffb      	ldrb	r3, [r7, #31]
 8012510:	2b2e      	cmp	r3, #46	; 0x2e
 8012512:	d10a      	bne.n	801252a <create_name+0x62>
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	2b02      	cmp	r3, #2
 8012518:	d807      	bhi.n	801252a <create_name+0x62>
			sfn[i++] = c;
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	1c5a      	adds	r2, r3, #1
 801251e:	613a      	str	r2, [r7, #16]
 8012520:	68ba      	ldr	r2, [r7, #8]
 8012522:	4413      	add	r3, r2
 8012524:	7ffa      	ldrb	r2, [r7, #31]
 8012526:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012528:	e7ea      	b.n	8012500 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801252a:	7ffb      	ldrb	r3, [r7, #31]
 801252c:	2b2f      	cmp	r3, #47	; 0x2f
 801252e:	d007      	beq.n	8012540 <create_name+0x78>
 8012530:	7ffb      	ldrb	r3, [r7, #31]
 8012532:	2b5c      	cmp	r3, #92	; 0x5c
 8012534:	d004      	beq.n	8012540 <create_name+0x78>
 8012536:	7ffb      	ldrb	r3, [r7, #31]
 8012538:	2b20      	cmp	r3, #32
 801253a:	d901      	bls.n	8012540 <create_name+0x78>
 801253c:	2306      	movs	r3, #6
 801253e:	e084      	b.n	801264a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	441a      	add	r2, r3
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801254a:	7ffb      	ldrb	r3, [r7, #31]
 801254c:	2b20      	cmp	r3, #32
 801254e:	d801      	bhi.n	8012554 <create_name+0x8c>
 8012550:	2224      	movs	r2, #36	; 0x24
 8012552:	e000      	b.n	8012556 <create_name+0x8e>
 8012554:	2220      	movs	r2, #32
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	330b      	adds	r3, #11
 801255a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801255c:	2300      	movs	r3, #0
 801255e:	e074      	b.n	801264a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	1c5a      	adds	r2, r3, #1
 8012564:	617a      	str	r2, [r7, #20]
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	4413      	add	r3, r2
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801256e:	7ffb      	ldrb	r3, [r7, #31]
 8012570:	2b20      	cmp	r3, #32
 8012572:	d94e      	bls.n	8012612 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012574:	7ffb      	ldrb	r3, [r7, #31]
 8012576:	2b2f      	cmp	r3, #47	; 0x2f
 8012578:	d006      	beq.n	8012588 <create_name+0xc0>
 801257a:	7ffb      	ldrb	r3, [r7, #31]
 801257c:	2b5c      	cmp	r3, #92	; 0x5c
 801257e:	d110      	bne.n	80125a2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012580:	e002      	b.n	8012588 <create_name+0xc0>
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	3301      	adds	r3, #1
 8012586:	617b      	str	r3, [r7, #20]
 8012588:	68fa      	ldr	r2, [r7, #12]
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	4413      	add	r3, r2
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	2b2f      	cmp	r3, #47	; 0x2f
 8012592:	d0f6      	beq.n	8012582 <create_name+0xba>
 8012594:	68fa      	ldr	r2, [r7, #12]
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	4413      	add	r3, r2
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	2b5c      	cmp	r3, #92	; 0x5c
 801259e:	d0f0      	beq.n	8012582 <create_name+0xba>
			break;
 80125a0:	e038      	b.n	8012614 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80125a2:	7ffb      	ldrb	r3, [r7, #31]
 80125a4:	2b2e      	cmp	r3, #46	; 0x2e
 80125a6:	d003      	beq.n	80125b0 <create_name+0xe8>
 80125a8:	693a      	ldr	r2, [r7, #16]
 80125aa:	69bb      	ldr	r3, [r7, #24]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d30c      	bcc.n	80125ca <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	2b0b      	cmp	r3, #11
 80125b4:	d002      	beq.n	80125bc <create_name+0xf4>
 80125b6:	7ffb      	ldrb	r3, [r7, #31]
 80125b8:	2b2e      	cmp	r3, #46	; 0x2e
 80125ba:	d001      	beq.n	80125c0 <create_name+0xf8>
 80125bc:	2306      	movs	r3, #6
 80125be:	e044      	b.n	801264a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80125c0:	2308      	movs	r3, #8
 80125c2:	613b      	str	r3, [r7, #16]
 80125c4:	230b      	movs	r3, #11
 80125c6:	61bb      	str	r3, [r7, #24]
			continue;
 80125c8:	e022      	b.n	8012610 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80125ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	da04      	bge.n	80125dc <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80125d2:	7ffb      	ldrb	r3, [r7, #31]
 80125d4:	3b80      	subs	r3, #128	; 0x80
 80125d6:	4a1f      	ldr	r2, [pc, #124]	; (8012654 <create_name+0x18c>)
 80125d8:	5cd3      	ldrb	r3, [r2, r3]
 80125da:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80125dc:	7ffb      	ldrb	r3, [r7, #31]
 80125de:	4619      	mov	r1, r3
 80125e0:	481d      	ldr	r0, [pc, #116]	; (8012658 <create_name+0x190>)
 80125e2:	f7fe fee5 	bl	80113b0 <chk_chr>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d001      	beq.n	80125f0 <create_name+0x128>
 80125ec:	2306      	movs	r3, #6
 80125ee:	e02c      	b.n	801264a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80125f0:	7ffb      	ldrb	r3, [r7, #31]
 80125f2:	2b60      	cmp	r3, #96	; 0x60
 80125f4:	d905      	bls.n	8012602 <create_name+0x13a>
 80125f6:	7ffb      	ldrb	r3, [r7, #31]
 80125f8:	2b7a      	cmp	r3, #122	; 0x7a
 80125fa:	d802      	bhi.n	8012602 <create_name+0x13a>
 80125fc:	7ffb      	ldrb	r3, [r7, #31]
 80125fe:	3b20      	subs	r3, #32
 8012600:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	1c5a      	adds	r2, r3, #1
 8012606:	613a      	str	r2, [r7, #16]
 8012608:	68ba      	ldr	r2, [r7, #8]
 801260a:	4413      	add	r3, r2
 801260c:	7ffa      	ldrb	r2, [r7, #31]
 801260e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012610:	e7a6      	b.n	8012560 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012612:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012614:	68fa      	ldr	r2, [r7, #12]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	441a      	add	r2, r3
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d101      	bne.n	8012628 <create_name+0x160>
 8012624:	2306      	movs	r3, #6
 8012626:	e010      	b.n	801264a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2be5      	cmp	r3, #229	; 0xe5
 801262e:	d102      	bne.n	8012636 <create_name+0x16e>
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2205      	movs	r2, #5
 8012634:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012636:	7ffb      	ldrb	r3, [r7, #31]
 8012638:	2b20      	cmp	r3, #32
 801263a:	d801      	bhi.n	8012640 <create_name+0x178>
 801263c:	2204      	movs	r2, #4
 801263e:	e000      	b.n	8012642 <create_name+0x17a>
 8012640:	2200      	movs	r2, #0
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	330b      	adds	r3, #11
 8012646:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012648:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801264a:	4618      	mov	r0, r3
 801264c:	3720      	adds	r7, #32
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	08019edc 	.word	0x08019edc
 8012658:	08019e8c 	.word	0x08019e8c

0801265c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b086      	sub	sp, #24
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	2b2f      	cmp	r3, #47	; 0x2f
 8012676:	d00b      	beq.n	8012690 <follow_path+0x34>
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b5c      	cmp	r3, #92	; 0x5c
 801267e:	d007      	beq.n	8012690 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	699a      	ldr	r2, [r3, #24]
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	609a      	str	r2, [r3, #8]
 8012688:	e00d      	b.n	80126a6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	3301      	adds	r3, #1
 801268e:	603b      	str	r3, [r7, #0]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	2b2f      	cmp	r3, #47	; 0x2f
 8012696:	d0f8      	beq.n	801268a <follow_path+0x2e>
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	2b5c      	cmp	r3, #92	; 0x5c
 801269e:	d0f4      	beq.n	801268a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	2200      	movs	r2, #0
 80126a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	2b1f      	cmp	r3, #31
 80126ac:	d80a      	bhi.n	80126c4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2280      	movs	r2, #128	; 0x80
 80126b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80126b6:	2100      	movs	r1, #0
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ff fc1e 	bl	8011efa <dir_sdi>
 80126be:	4603      	mov	r3, r0
 80126c0:	75fb      	strb	r3, [r7, #23]
 80126c2:	e05b      	b.n	801277c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80126c4:	463b      	mov	r3, r7
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7ff fefd 	bl	80124c8 <create_name>
 80126ce:	4603      	mov	r3, r0
 80126d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d14c      	bne.n	8012772 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7ff fe50 	bl	801237e <dir_find>
 80126de:	4603      	mov	r3, r0
 80126e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80126e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d01b      	beq.n	8012728 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80126f0:	7dfb      	ldrb	r3, [r7, #23]
 80126f2:	2b04      	cmp	r3, #4
 80126f4:	d13f      	bne.n	8012776 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80126f6:	7afb      	ldrb	r3, [r7, #11]
 80126f8:	f003 0320 	and.w	r3, r3, #32
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00b      	beq.n	8012718 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012700:	7afb      	ldrb	r3, [r7, #11]
 8012702:	f003 0304 	and.w	r3, r3, #4
 8012706:	2b00      	cmp	r3, #0
 8012708:	d031      	beq.n	801276e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2280      	movs	r2, #128	; 0x80
 801270e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012712:	2300      	movs	r3, #0
 8012714:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012716:	e02e      	b.n	8012776 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012718:	7afb      	ldrb	r3, [r7, #11]
 801271a:	f003 0304 	and.w	r3, r3, #4
 801271e:	2b00      	cmp	r3, #0
 8012720:	d129      	bne.n	8012776 <follow_path+0x11a>
 8012722:	2305      	movs	r3, #5
 8012724:	75fb      	strb	r3, [r7, #23]
				break;
 8012726:	e026      	b.n	8012776 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012728:	7afb      	ldrb	r3, [r7, #11]
 801272a:	f003 0304 	and.w	r3, r3, #4
 801272e:	2b00      	cmp	r3, #0
 8012730:	d123      	bne.n	801277a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	799b      	ldrb	r3, [r3, #6]
 8012736:	f003 0310 	and.w	r3, r3, #16
 801273a:	2b00      	cmp	r3, #0
 801273c:	d102      	bne.n	8012744 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801273e:	2305      	movs	r3, #5
 8012740:	75fb      	strb	r3, [r7, #23]
 8012742:	e01b      	b.n	801277c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	695b      	ldr	r3, [r3, #20]
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	8992      	ldrh	r2, [r2, #12]
 8012752:	fbb3 f0f2 	udiv	r0, r3, r2
 8012756:	fb02 f200 	mul.w	r2, r2, r0
 801275a:	1a9b      	subs	r3, r3, r2
 801275c:	440b      	add	r3, r1
 801275e:	4619      	mov	r1, r3
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f7ff fd70 	bl	8012246 <ld_clust>
 8012766:	4602      	mov	r2, r0
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	609a      	str	r2, [r3, #8]
 801276c:	e7aa      	b.n	80126c4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801276e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012770:	e7a8      	b.n	80126c4 <follow_path+0x68>
			if (res != FR_OK) break;
 8012772:	bf00      	nop
 8012774:	e002      	b.n	801277c <follow_path+0x120>
				break;
 8012776:	bf00      	nop
 8012778:	e000      	b.n	801277c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801277a:	bf00      	nop
			}
		}
	}

	return res;
 801277c:	7dfb      	ldrb	r3, [r7, #23]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3718      	adds	r7, #24
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}

08012786 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012786:	b480      	push	{r7}
 8012788:	b087      	sub	sp, #28
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801278e:	f04f 33ff 	mov.w	r3, #4294967295
 8012792:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d031      	beq.n	8012800 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	617b      	str	r3, [r7, #20]
 80127a2:	e002      	b.n	80127aa <get_ldnumber+0x24>
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	3301      	adds	r3, #1
 80127a8:	617b      	str	r3, [r7, #20]
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	2b20      	cmp	r3, #32
 80127b0:	d903      	bls.n	80127ba <get_ldnumber+0x34>
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b3a      	cmp	r3, #58	; 0x3a
 80127b8:	d1f4      	bne.n	80127a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2b3a      	cmp	r3, #58	; 0x3a
 80127c0:	d11c      	bne.n	80127fc <get_ldnumber+0x76>
			tp = *path;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	1c5a      	adds	r2, r3, #1
 80127cc:	60fa      	str	r2, [r7, #12]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	3b30      	subs	r3, #48	; 0x30
 80127d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	2b09      	cmp	r3, #9
 80127d8:	d80e      	bhi.n	80127f8 <get_ldnumber+0x72>
 80127da:	68fa      	ldr	r2, [r7, #12]
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d10a      	bne.n	80127f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d107      	bne.n	80127f8 <get_ldnumber+0x72>
					vol = (int)i;
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	3301      	adds	r3, #1
 80127f0:	617b      	str	r3, [r7, #20]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	697a      	ldr	r2, [r7, #20]
 80127f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	e002      	b.n	8012802 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80127fc:	2300      	movs	r3, #0
 80127fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012800:	693b      	ldr	r3, [r7, #16]
}
 8012802:	4618      	mov	r0, r3
 8012804:	371c      	adds	r7, #28
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
	...

08012810 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2200      	movs	r2, #0
 801281e:	70da      	strb	r2, [r3, #3]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f04f 32ff 	mov.w	r2, #4294967295
 8012826:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012828:	6839      	ldr	r1, [r7, #0]
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7fe ff8c 	bl	8011748 <move_window>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <check_fs+0x2a>
 8012836:	2304      	movs	r3, #4
 8012838:	e038      	b.n	80128ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	3338      	adds	r3, #56	; 0x38
 801283e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012842:	4618      	mov	r0, r3
 8012844:	f7fe fcd0 	bl	80111e8 <ld_word>
 8012848:	4603      	mov	r3, r0
 801284a:	461a      	mov	r2, r3
 801284c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012850:	429a      	cmp	r2, r3
 8012852:	d001      	beq.n	8012858 <check_fs+0x48>
 8012854:	2303      	movs	r3, #3
 8012856:	e029      	b.n	80128ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801285e:	2be9      	cmp	r3, #233	; 0xe9
 8012860:	d009      	beq.n	8012876 <check_fs+0x66>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012868:	2beb      	cmp	r3, #235	; 0xeb
 801286a:	d11e      	bne.n	80128aa <check_fs+0x9a>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012872:	2b90      	cmp	r3, #144	; 0x90
 8012874:	d119      	bne.n	80128aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	3338      	adds	r3, #56	; 0x38
 801287a:	3336      	adds	r3, #54	; 0x36
 801287c:	4618      	mov	r0, r3
 801287e:	f7fe fccb 	bl	8011218 <ld_dword>
 8012882:	4603      	mov	r3, r0
 8012884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012888:	4a0a      	ldr	r2, [pc, #40]	; (80128b4 <check_fs+0xa4>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d101      	bne.n	8012892 <check_fs+0x82>
 801288e:	2300      	movs	r3, #0
 8012890:	e00c      	b.n	80128ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	3338      	adds	r3, #56	; 0x38
 8012896:	3352      	adds	r3, #82	; 0x52
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe fcbd 	bl	8011218 <ld_dword>
 801289e:	4602      	mov	r2, r0
 80128a0:	4b05      	ldr	r3, [pc, #20]	; (80128b8 <check_fs+0xa8>)
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d101      	bne.n	80128aa <check_fs+0x9a>
 80128a6:	2300      	movs	r3, #0
 80128a8:	e000      	b.n	80128ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80128aa:	2302      	movs	r3, #2
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	00544146 	.word	0x00544146
 80128b8:	33544146 	.word	0x33544146

080128bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b096      	sub	sp, #88	; 0x58
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	4613      	mov	r3, r2
 80128c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2200      	movs	r2, #0
 80128ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80128d0:	68f8      	ldr	r0, [r7, #12]
 80128d2:	f7ff ff58 	bl	8012786 <get_ldnumber>
 80128d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80128d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128da:	2b00      	cmp	r3, #0
 80128dc:	da01      	bge.n	80128e2 <find_volume+0x26>
 80128de:	230b      	movs	r3, #11
 80128e0:	e268      	b.n	8012db4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80128e2:	4ab0      	ldr	r2, [pc, #704]	; (8012ba4 <find_volume+0x2e8>)
 80128e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80128ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d101      	bne.n	80128f6 <find_volume+0x3a>
 80128f2:	230c      	movs	r3, #12
 80128f4:	e25e      	b.n	8012db4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80128fc:	79fb      	ldrb	r3, [r7, #7]
 80128fe:	f023 0301 	bic.w	r3, r3, #1
 8012902:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d01a      	beq.n	8012942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290e:	785b      	ldrb	r3, [r3, #1]
 8012910:	4618      	mov	r0, r3
 8012912:	f7fe fbcb 	bl	80110ac <disk_status>
 8012916:	4603      	mov	r3, r0
 8012918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801291c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012920:	f003 0301 	and.w	r3, r3, #1
 8012924:	2b00      	cmp	r3, #0
 8012926:	d10c      	bne.n	8012942 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012928:	79fb      	ldrb	r3, [r7, #7]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d007      	beq.n	801293e <find_volume+0x82>
 801292e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012932:	f003 0304 	and.w	r3, r3, #4
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801293a:	230a      	movs	r3, #10
 801293c:	e23a      	b.n	8012db4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801293e:	2300      	movs	r3, #0
 8012940:	e238      	b.n	8012db4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012944:	2200      	movs	r2, #0
 8012946:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801294a:	b2da      	uxtb	r2, r3
 801294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012952:	785b      	ldrb	r3, [r3, #1]
 8012954:	4618      	mov	r0, r3
 8012956:	f7fe fbc3 	bl	80110e0 <disk_initialize>
 801295a:	4603      	mov	r3, r0
 801295c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012964:	f003 0301 	and.w	r3, r3, #1
 8012968:	2b00      	cmp	r3, #0
 801296a:	d001      	beq.n	8012970 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801296c:	2303      	movs	r3, #3
 801296e:	e221      	b.n	8012db4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012970:	79fb      	ldrb	r3, [r7, #7]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d007      	beq.n	8012986 <find_volume+0xca>
 8012976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801297a:	f003 0304 	and.w	r3, r3, #4
 801297e:	2b00      	cmp	r3, #0
 8012980:	d001      	beq.n	8012986 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012982:	230a      	movs	r3, #10
 8012984:	e216      	b.n	8012db4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012988:	7858      	ldrb	r0, [r3, #1]
 801298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298c:	330c      	adds	r3, #12
 801298e:	461a      	mov	r2, r3
 8012990:	2102      	movs	r1, #2
 8012992:	f7fe fc0b 	bl	80111ac <disk_ioctl>
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d001      	beq.n	80129a0 <find_volume+0xe4>
 801299c:	2301      	movs	r3, #1
 801299e:	e209      	b.n	8012db4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80129a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a2:	899b      	ldrh	r3, [r3, #12]
 80129a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129a8:	d80d      	bhi.n	80129c6 <find_volume+0x10a>
 80129aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ac:	899b      	ldrh	r3, [r3, #12]
 80129ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129b2:	d308      	bcc.n	80129c6 <find_volume+0x10a>
 80129b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b6:	899b      	ldrh	r3, [r3, #12]
 80129b8:	461a      	mov	r2, r3
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	899b      	ldrh	r3, [r3, #12]
 80129be:	3b01      	subs	r3, #1
 80129c0:	4013      	ands	r3, r2
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d001      	beq.n	80129ca <find_volume+0x10e>
 80129c6:	2301      	movs	r3, #1
 80129c8:	e1f4      	b.n	8012db4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80129ca:	2300      	movs	r3, #0
 80129cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80129ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80129d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129d2:	f7ff ff1d 	bl	8012810 <check_fs>
 80129d6:	4603      	mov	r3, r0
 80129d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80129dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129e0:	2b02      	cmp	r3, #2
 80129e2:	d14b      	bne.n	8012a7c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80129e4:	2300      	movs	r3, #0
 80129e6:	643b      	str	r3, [r7, #64]	; 0x40
 80129e8:	e01f      	b.n	8012a2a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80129f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129f2:	011b      	lsls	r3, r3, #4
 80129f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80129f8:	4413      	add	r3, r2
 80129fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80129fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fe:	3304      	adds	r3, #4
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d006      	beq.n	8012a14 <find_volume+0x158>
 8012a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a08:	3308      	adds	r3, #8
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fe fc04 	bl	8011218 <ld_dword>
 8012a10:	4602      	mov	r2, r0
 8012a12:	e000      	b.n	8012a16 <find_volume+0x15a>
 8012a14:	2200      	movs	r2, #0
 8012a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a1e:	440b      	add	r3, r1
 8012a20:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a26:	3301      	adds	r3, #1
 8012a28:	643b      	str	r3, [r7, #64]	; 0x40
 8012a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a2c:	2b03      	cmp	r3, #3
 8012a2e:	d9dc      	bls.n	80129ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012a30:	2300      	movs	r3, #0
 8012a32:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d002      	beq.n	8012a40 <find_volume+0x184>
 8012a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012a48:	4413      	add	r3, r2
 8012a4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012a4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d005      	beq.n	8012a62 <find_volume+0x1a6>
 8012a56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a5a:	f7ff fed9 	bl	8012810 <check_fs>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	e000      	b.n	8012a64 <find_volume+0x1a8>
 8012a62:	2303      	movs	r3, #3
 8012a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d905      	bls.n	8012a7c <find_volume+0x1c0>
 8012a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a72:	3301      	adds	r3, #1
 8012a74:	643b      	str	r3, [r7, #64]	; 0x40
 8012a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a78:	2b03      	cmp	r3, #3
 8012a7a:	d9e1      	bls.n	8012a40 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a80:	2b04      	cmp	r3, #4
 8012a82:	d101      	bne.n	8012a88 <find_volume+0x1cc>
 8012a84:	2301      	movs	r3, #1
 8012a86:	e195      	b.n	8012db4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d901      	bls.n	8012a94 <find_volume+0x1d8>
 8012a90:	230d      	movs	r3, #13
 8012a92:	e18f      	b.n	8012db4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a96:	3338      	adds	r3, #56	; 0x38
 8012a98:	330b      	adds	r3, #11
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe fba4 	bl	80111e8 <ld_word>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa6:	899b      	ldrh	r3, [r3, #12]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d001      	beq.n	8012ab0 <find_volume+0x1f4>
 8012aac:	230d      	movs	r3, #13
 8012aae:	e181      	b.n	8012db4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab2:	3338      	adds	r3, #56	; 0x38
 8012ab4:	3316      	adds	r3, #22
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fe fb96 	bl	80111e8 <ld_word>
 8012abc:	4603      	mov	r3, r0
 8012abe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d106      	bne.n	8012ad4 <find_volume+0x218>
 8012ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac8:	3338      	adds	r3, #56	; 0x38
 8012aca:	3324      	adds	r3, #36	; 0x24
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7fe fba3 	bl	8011218 <ld_dword>
 8012ad2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ad8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012adc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	789b      	ldrb	r3, [r3, #2]
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d005      	beq.n	8012af8 <find_volume+0x23c>
 8012aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aee:	789b      	ldrb	r3, [r3, #2]
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d001      	beq.n	8012af8 <find_volume+0x23c>
 8012af4:	230d      	movs	r3, #13
 8012af6:	e15d      	b.n	8012db4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	789b      	ldrb	r3, [r3, #2]
 8012afc:	461a      	mov	r2, r3
 8012afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b00:	fb02 f303 	mul.w	r3, r2, r3
 8012b04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b14:	895b      	ldrh	r3, [r3, #10]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d008      	beq.n	8012b2c <find_volume+0x270>
 8012b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1c:	895b      	ldrh	r3, [r3, #10]
 8012b1e:	461a      	mov	r2, r3
 8012b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b22:	895b      	ldrh	r3, [r3, #10]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	4013      	ands	r3, r2
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d001      	beq.n	8012b30 <find_volume+0x274>
 8012b2c:	230d      	movs	r3, #13
 8012b2e:	e141      	b.n	8012db4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	3338      	adds	r3, #56	; 0x38
 8012b34:	3311      	adds	r3, #17
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7fe fb56 	bl	80111e8 <ld_word>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	461a      	mov	r2, r3
 8012b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b46:	891b      	ldrh	r3, [r3, #8]
 8012b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b4a:	8992      	ldrh	r2, [r2, #12]
 8012b4c:	0952      	lsrs	r2, r2, #5
 8012b4e:	b292      	uxth	r2, r2
 8012b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b54:	fb02 f201 	mul.w	r2, r2, r1
 8012b58:	1a9b      	subs	r3, r3, r2
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <find_volume+0x2a8>
 8012b60:	230d      	movs	r3, #13
 8012b62:	e127      	b.n	8012db4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b66:	3338      	adds	r3, #56	; 0x38
 8012b68:	3313      	adds	r3, #19
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7fe fb3c 	bl	80111e8 <ld_word>
 8012b70:	4603      	mov	r3, r0
 8012b72:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <find_volume+0x2cc>
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	3338      	adds	r3, #56	; 0x38
 8012b7e:	3320      	adds	r3, #32
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fe fb49 	bl	8011218 <ld_dword>
 8012b86:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8a:	3338      	adds	r3, #56	; 0x38
 8012b8c:	330e      	adds	r3, #14
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fe fb2a 	bl	80111e8 <ld_word>
 8012b94:	4603      	mov	r3, r0
 8012b96:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012b98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d104      	bne.n	8012ba8 <find_volume+0x2ec>
 8012b9e:	230d      	movs	r3, #13
 8012ba0:	e108      	b.n	8012db4 <find_volume+0x4f8>
 8012ba2:	bf00      	nop
 8012ba4:	2004132c 	.word	0x2004132c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012ba8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bac:	4413      	add	r3, r2
 8012bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bb0:	8911      	ldrh	r1, [r2, #8]
 8012bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bb4:	8992      	ldrh	r2, [r2, #12]
 8012bb6:	0952      	lsrs	r2, r2, #5
 8012bb8:	b292      	uxth	r2, r2
 8012bba:	fbb1 f2f2 	udiv	r2, r1, r2
 8012bbe:	b292      	uxth	r2, r2
 8012bc0:	4413      	add	r3, r2
 8012bc2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d201      	bcs.n	8012bd0 <find_volume+0x314>
 8012bcc:	230d      	movs	r3, #13
 8012bce:	e0f1      	b.n	8012db4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd4:	1ad3      	subs	r3, r2, r3
 8012bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bd8:	8952      	ldrh	r2, [r2, #10]
 8012bda:	fbb3 f3f2 	udiv	r3, r3, r2
 8012bde:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d101      	bne.n	8012bea <find_volume+0x32e>
 8012be6:	230d      	movs	r3, #13
 8012be8:	e0e4      	b.n	8012db4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012bea:	2303      	movs	r3, #3
 8012bec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d802      	bhi.n	8012c00 <find_volume+0x344>
 8012bfa:	2302      	movs	r3, #2
 8012bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d802      	bhi.n	8012c10 <find_volume+0x354>
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	1c9a      	adds	r2, r3, #2
 8012c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c16:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c1c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c22:	441a      	add	r2, r3
 8012c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c26:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012c28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2c:	441a      	add	r2, r3
 8012c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c30:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012c32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c36:	2b03      	cmp	r3, #3
 8012c38:	d11e      	bne.n	8012c78 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3c:	3338      	adds	r3, #56	; 0x38
 8012c3e:	332a      	adds	r3, #42	; 0x2a
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fe fad1 	bl	80111e8 <ld_word>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d001      	beq.n	8012c50 <find_volume+0x394>
 8012c4c:	230d      	movs	r3, #13
 8012c4e:	e0b1      	b.n	8012db4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c52:	891b      	ldrh	r3, [r3, #8]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <find_volume+0x3a0>
 8012c58:	230d      	movs	r3, #13
 8012c5a:	e0ab      	b.n	8012db4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5e:	3338      	adds	r3, #56	; 0x38
 8012c60:	332c      	adds	r3, #44	; 0x2c
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7fe fad8 	bl	8011218 <ld_dword>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c70:	69db      	ldr	r3, [r3, #28]
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	647b      	str	r3, [r7, #68]	; 0x44
 8012c76:	e01f      	b.n	8012cb8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	891b      	ldrh	r3, [r3, #8]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d101      	bne.n	8012c84 <find_volume+0x3c8>
 8012c80:	230d      	movs	r3, #13
 8012c82:	e097      	b.n	8012db4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c8a:	441a      	add	r2, r3
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012c90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c94:	2b02      	cmp	r3, #2
 8012c96:	d103      	bne.n	8012ca0 <find_volume+0x3e4>
 8012c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9a:	69db      	ldr	r3, [r3, #28]
 8012c9c:	005b      	lsls	r3, r3, #1
 8012c9e:	e00a      	b.n	8012cb6 <find_volume+0x3fa>
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca2:	69da      	ldr	r2, [r3, #28]
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	005b      	lsls	r3, r3, #1
 8012ca8:	4413      	add	r3, r2
 8012caa:	085a      	lsrs	r2, r3, #1
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	69db      	ldr	r3, [r3, #28]
 8012cb0:	f003 0301 	and.w	r3, r3, #1
 8012cb4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012cb6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cba:	6a1a      	ldr	r2, [r3, #32]
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbe:	899b      	ldrh	r3, [r3, #12]
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cc4:	440b      	add	r3, r1
 8012cc6:	3b01      	subs	r3, #1
 8012cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cca:	8989      	ldrh	r1, [r1, #12]
 8012ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d201      	bcs.n	8012cd8 <find_volume+0x41c>
 8012cd4:	230d      	movs	r3, #13
 8012cd6:	e06d      	b.n	8012db4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cda:	f04f 32ff 	mov.w	r2, #4294967295
 8012cde:	615a      	str	r2, [r3, #20]
 8012ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce2:	695a      	ldr	r2, [r3, #20]
 8012ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	2280      	movs	r2, #128	; 0x80
 8012cec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cf2:	2b03      	cmp	r3, #3
 8012cf4:	d149      	bne.n	8012d8a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf8:	3338      	adds	r3, #56	; 0x38
 8012cfa:	3330      	adds	r3, #48	; 0x30
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fe fa73 	bl	80111e8 <ld_word>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d140      	bne.n	8012d8a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d10:	f7fe fd1a 	bl	8011748 <move_window>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d137      	bne.n	8012d8a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	3338      	adds	r3, #56	; 0x38
 8012d24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7fe fa5d 	bl	80111e8 <ld_word>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	461a      	mov	r2, r3
 8012d32:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d127      	bne.n	8012d8a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3c:	3338      	adds	r3, #56	; 0x38
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fe fa6a 	bl	8011218 <ld_dword>
 8012d44:	4602      	mov	r2, r0
 8012d46:	4b1d      	ldr	r3, [pc, #116]	; (8012dbc <find_volume+0x500>)
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d11e      	bne.n	8012d8a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4e:	3338      	adds	r3, #56	; 0x38
 8012d50:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe fa5f 	bl	8011218 <ld_dword>
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	4b18      	ldr	r3, [pc, #96]	; (8012dc0 <find_volume+0x504>)
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d113      	bne.n	8012d8a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d64:	3338      	adds	r3, #56	; 0x38
 8012d66:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fe fa54 	bl	8011218 <ld_dword>
 8012d70:	4602      	mov	r2, r0
 8012d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d74:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d78:	3338      	adds	r3, #56	; 0x38
 8012d7a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fe fa4a 	bl	8011218 <ld_dword>
 8012d84:	4602      	mov	r2, r0
 8012d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d88:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012d90:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012d92:	4b0c      	ldr	r3, [pc, #48]	; (8012dc4 <find_volume+0x508>)
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	3301      	adds	r3, #1
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	4b0a      	ldr	r3, [pc, #40]	; (8012dc4 <find_volume+0x508>)
 8012d9c:	801a      	strh	r2, [r3, #0]
 8012d9e:	4b09      	ldr	r3, [pc, #36]	; (8012dc4 <find_volume+0x508>)
 8012da0:	881a      	ldrh	r2, [r3, #0]
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	2200      	movs	r2, #0
 8012daa:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dae:	f7fe fc63 	bl	8011678 <clear_lock>
#endif
	return FR_OK;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3758      	adds	r7, #88	; 0x58
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	41615252 	.word	0x41615252
 8012dc0:	61417272 	.word	0x61417272
 8012dc4:	20041330 	.word	0x20041330

08012dc8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012dd2:	2309      	movs	r3, #9
 8012dd4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d01c      	beq.n	8012e16 <validate+0x4e>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d018      	beq.n	8012e16 <validate+0x4e>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d013      	beq.n	8012e16 <validate+0x4e>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	889a      	ldrh	r2, [r3, #4]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	88db      	ldrh	r3, [r3, #6]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d10c      	bne.n	8012e16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	785b      	ldrb	r3, [r3, #1]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe f952 	bl	80110ac <disk_status>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	f003 0301 	and.w	r3, r3, #1
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d101      	bne.n	8012e16 <validate+0x4e>
			res = FR_OK;
 8012e12:	2300      	movs	r3, #0
 8012e14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e16:	7bfb      	ldrb	r3, [r7, #15]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d102      	bne.n	8012e22 <validate+0x5a>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	e000      	b.n	8012e24 <validate+0x5c>
 8012e22:	2300      	movs	r3, #0
 8012e24:	683a      	ldr	r2, [r7, #0]
 8012e26:	6013      	str	r3, [r2, #0]
	return res;
 8012e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3710      	adds	r7, #16
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
	...

08012e34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b088      	sub	sp, #32
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012e46:	f107 0310 	add.w	r3, r7, #16
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7ff fc9b 	bl	8012786 <get_ldnumber>
 8012e50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	da01      	bge.n	8012e5c <f_mount+0x28>
 8012e58:	230b      	movs	r3, #11
 8012e5a:	e02b      	b.n	8012eb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012e5c:	4a17      	ldr	r2, [pc, #92]	; (8012ebc <f_mount+0x88>)
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d005      	beq.n	8012e78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012e6c:	69b8      	ldr	r0, [r7, #24]
 8012e6e:	f7fe fc03 	bl	8011678 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	2200      	movs	r2, #0
 8012e76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d002      	beq.n	8012e84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2200      	movs	r2, #0
 8012e82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	490d      	ldr	r1, [pc, #52]	; (8012ebc <f_mount+0x88>)
 8012e88:	69fb      	ldr	r3, [r7, #28]
 8012e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <f_mount+0x66>
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d001      	beq.n	8012e9e <f_mount+0x6a>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	e00a      	b.n	8012eb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012e9e:	f107 010c 	add.w	r1, r7, #12
 8012ea2:	f107 0308 	add.w	r3, r7, #8
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7ff fd07 	bl	80128bc <find_volume>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3720      	adds	r7, #32
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2004132c 	.word	0x2004132c

08012ec0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b098      	sub	sp, #96	; 0x60
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	4613      	mov	r3, r2
 8012ecc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d101      	bne.n	8012ed8 <f_open+0x18>
 8012ed4:	2309      	movs	r3, #9
 8012ed6:	e1ba      	b.n	801324e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ed8:	79fb      	ldrb	r3, [r7, #7]
 8012eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ede:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012ee0:	79fa      	ldrb	r2, [r7, #7]
 8012ee2:	f107 0110 	add.w	r1, r7, #16
 8012ee6:	f107 0308 	add.w	r3, r7, #8
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff fce6 	bl	80128bc <find_volume>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f040 819e 	bne.w	801323c <f_open+0x37c>
		dj.obj.fs = fs;
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f04:	68ba      	ldr	r2, [r7, #8]
 8012f06:	f107 0314 	add.w	r3, r7, #20
 8012f0a:	4611      	mov	r1, r2
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff fba5 	bl	801265c <follow_path>
 8012f12:	4603      	mov	r3, r0
 8012f14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d11a      	bne.n	8012f56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012f20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f24:	b25b      	sxtb	r3, r3
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	da03      	bge.n	8012f32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012f2a:	2306      	movs	r3, #6
 8012f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f30:	e011      	b.n	8012f56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f32:	79fb      	ldrb	r3, [r7, #7]
 8012f34:	f023 0301 	bic.w	r3, r3, #1
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	bf14      	ite	ne
 8012f3c:	2301      	movne	r3, #1
 8012f3e:	2300      	moveq	r3, #0
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	461a      	mov	r2, r3
 8012f44:	f107 0314 	add.w	r3, r7, #20
 8012f48:	4611      	mov	r1, r2
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7fe fa4c 	bl	80113e8 <chk_lock>
 8012f50:	4603      	mov	r3, r0
 8012f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012f56:	79fb      	ldrb	r3, [r7, #7]
 8012f58:	f003 031c 	and.w	r3, r3, #28
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d07e      	beq.n	801305e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d017      	beq.n	8012f98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f6c:	2b04      	cmp	r3, #4
 8012f6e:	d10e      	bne.n	8012f8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012f70:	f7fe fa96 	bl	80114a0 <enq_lock>
 8012f74:	4603      	mov	r3, r0
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d006      	beq.n	8012f88 <f_open+0xc8>
 8012f7a:	f107 0314 	add.w	r3, r7, #20
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7ff fa52 	bl	8012428 <dir_register>
 8012f84:	4603      	mov	r3, r0
 8012f86:	e000      	b.n	8012f8a <f_open+0xca>
 8012f88:	2312      	movs	r3, #18
 8012f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012f8e:	79fb      	ldrb	r3, [r7, #7]
 8012f90:	f043 0308 	orr.w	r3, r3, #8
 8012f94:	71fb      	strb	r3, [r7, #7]
 8012f96:	e010      	b.n	8012fba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012f98:	7ebb      	ldrb	r3, [r7, #26]
 8012f9a:	f003 0311 	and.w	r3, r3, #17
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d003      	beq.n	8012faa <f_open+0xea>
					res = FR_DENIED;
 8012fa2:	2307      	movs	r3, #7
 8012fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fa8:	e007      	b.n	8012fba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	f003 0304 	and.w	r3, r3, #4
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d002      	beq.n	8012fba <f_open+0xfa>
 8012fb4:	2308      	movs	r3, #8
 8012fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d167      	bne.n	8013092 <f_open+0x1d2>
 8012fc2:	79fb      	ldrb	r3, [r7, #7]
 8012fc4:	f003 0308 	and.w	r3, r3, #8
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d062      	beq.n	8013092 <f_open+0x1d2>
				dw = GET_FATTIME();
 8012fcc:	4ba2      	ldr	r3, [pc, #648]	; (8013258 <f_open+0x398>)
 8012fce:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd2:	330e      	adds	r3, #14
 8012fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fe f95c 	bl	8011294 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fde:	3316      	adds	r3, #22
 8012fe0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fe f956 	bl	8011294 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fea:	330b      	adds	r3, #11
 8012fec:	2220      	movs	r2, #32
 8012fee:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff f925 	bl	8012246 <ld_clust>
 8012ffc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013002:	2200      	movs	r2, #0
 8013004:	4618      	mov	r0, r3
 8013006:	f7ff f93d 	bl	8012284 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801300c:	331c      	adds	r3, #28
 801300e:	2100      	movs	r1, #0
 8013010:	4618      	mov	r0, r3
 8013012:	f7fe f93f 	bl	8011294 <st_dword>
					fs->wflag = 1;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	2201      	movs	r2, #1
 801301a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801301c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801301e:	2b00      	cmp	r3, #0
 8013020:	d037      	beq.n	8013092 <f_open+0x1d2>
						dw = fs->winsect;
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013026:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013028:	f107 0314 	add.w	r3, r7, #20
 801302c:	2200      	movs	r2, #0
 801302e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013030:	4618      	mov	r0, r3
 8013032:	f7fe fe2d 	bl	8011c90 <remove_chain>
 8013036:	4603      	mov	r3, r0
 8013038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801303c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013040:	2b00      	cmp	r3, #0
 8013042:	d126      	bne.n	8013092 <f_open+0x1d2>
							res = move_window(fs, dw);
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013048:	4618      	mov	r0, r3
 801304a:	f7fe fb7d 	bl	8011748 <move_window>
 801304e:	4603      	mov	r3, r0
 8013050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013058:	3a01      	subs	r2, #1
 801305a:	611a      	str	r2, [r3, #16]
 801305c:	e019      	b.n	8013092 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801305e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013062:	2b00      	cmp	r3, #0
 8013064:	d115      	bne.n	8013092 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013066:	7ebb      	ldrb	r3, [r7, #26]
 8013068:	f003 0310 	and.w	r3, r3, #16
 801306c:	2b00      	cmp	r3, #0
 801306e:	d003      	beq.n	8013078 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013070:	2304      	movs	r3, #4
 8013072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013076:	e00c      	b.n	8013092 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013078:	79fb      	ldrb	r3, [r7, #7]
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d007      	beq.n	8013092 <f_open+0x1d2>
 8013082:	7ebb      	ldrb	r3, [r7, #26]
 8013084:	f003 0301 	and.w	r3, r3, #1
 8013088:	2b00      	cmp	r3, #0
 801308a:	d002      	beq.n	8013092 <f_open+0x1d2>
						res = FR_DENIED;
 801308c:	2307      	movs	r3, #7
 801308e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013096:	2b00      	cmp	r3, #0
 8013098:	d128      	bne.n	80130ec <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	f003 0308 	and.w	r3, r3, #8
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d003      	beq.n	80130ac <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80130a4:	79fb      	ldrb	r3, [r7, #7]
 80130a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130aa:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80130b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80130ba:	79fb      	ldrb	r3, [r7, #7]
 80130bc:	f023 0301 	bic.w	r3, r3, #1
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	bf14      	ite	ne
 80130c4:	2301      	movne	r3, #1
 80130c6:	2300      	moveq	r3, #0
 80130c8:	b2db      	uxtb	r3, r3
 80130ca:	461a      	mov	r2, r3
 80130cc:	f107 0314 	add.w	r3, r7, #20
 80130d0:	4611      	mov	r1, r2
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fe fa06 	bl	80114e4 <inc_lock>
 80130d8:	4602      	mov	r2, r0
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d102      	bne.n	80130ec <f_open+0x22c>
 80130e6:	2302      	movs	r3, #2
 80130e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80130ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f040 80a3 	bne.w	801323c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130fa:	4611      	mov	r1, r2
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff f8a2 	bl	8012246 <ld_clust>
 8013102:	4602      	mov	r2, r0
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310a:	331c      	adds	r3, #28
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe f883 	bl	8011218 <ld_dword>
 8013112:	4602      	mov	r2, r0
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801311e:	693a      	ldr	r2, [r7, #16]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	88da      	ldrh	r2, [r3, #6]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	79fa      	ldrb	r2, [r7, #7]
 8013130:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2200      	movs	r2, #0
 8013136:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2200      	movs	r2, #0
 801313c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2200      	movs	r2, #0
 8013142:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	3330      	adds	r3, #48	; 0x30
 8013148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801314c:	2100      	movs	r1, #0
 801314e:	4618      	mov	r0, r3
 8013150:	f7fe f8ed 	bl	801132e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013154:	79fb      	ldrb	r3, [r7, #7]
 8013156:	f003 0320 	and.w	r3, r3, #32
 801315a:	2b00      	cmp	r3, #0
 801315c:	d06e      	beq.n	801323c <f_open+0x37c>
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d06a      	beq.n	801323c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	68da      	ldr	r2, [r3, #12]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	895b      	ldrh	r3, [r3, #10]
 8013172:	461a      	mov	r2, r3
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	899b      	ldrh	r3, [r3, #12]
 8013178:	fb03 f302 	mul.w	r3, r3, r2
 801317c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	689b      	ldr	r3, [r3, #8]
 8013182:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	657b      	str	r3, [r7, #84]	; 0x54
 801318a:	e016      	b.n	80131ba <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013190:	4618      	mov	r0, r3
 8013192:	f7fe fb96 	bl	80118c2 <get_fat>
 8013196:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801319a:	2b01      	cmp	r3, #1
 801319c:	d802      	bhi.n	80131a4 <f_open+0x2e4>
 801319e:	2302      	movs	r3, #2
 80131a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80131a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131aa:	d102      	bne.n	80131b2 <f_open+0x2f2>
 80131ac:	2301      	movs	r3, #1
 80131ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80131b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	657b      	str	r3, [r7, #84]	; 0x54
 80131ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d103      	bne.n	80131ca <f_open+0x30a>
 80131c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d8e0      	bhi.n	801318c <f_open+0x2cc>
				}
				fp->clust = clst;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131ce:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80131d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d131      	bne.n	801323c <f_open+0x37c>
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	899b      	ldrh	r3, [r3, #12]
 80131dc:	461a      	mov	r2, r3
 80131de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80131e4:	fb02 f201 	mul.w	r2, r2, r1
 80131e8:	1a9b      	subs	r3, r3, r2
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d026      	beq.n	801323c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fe fb46 	bl	8011884 <clust2sect>
 80131f8:	6478      	str	r0, [r7, #68]	; 0x44
 80131fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d103      	bne.n	8013208 <f_open+0x348>
						res = FR_INT_ERR;
 8013200:	2302      	movs	r3, #2
 8013202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013206:	e019      	b.n	801323c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	899b      	ldrh	r3, [r3, #12]
 801320c:	461a      	mov	r2, r3
 801320e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013210:	fbb3 f2f2 	udiv	r2, r3, r2
 8013214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013216:	441a      	add	r2, r3
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	7858      	ldrb	r0, [r3, #1]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	6a1a      	ldr	r2, [r3, #32]
 801322a:	2301      	movs	r3, #1
 801322c:	f7fd ff7e 	bl	801112c <disk_read>
 8013230:	4603      	mov	r3, r0
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <f_open+0x37c>
 8013236:	2301      	movs	r3, #1
 8013238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801323c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013240:	2b00      	cmp	r3, #0
 8013242:	d002      	beq.n	801324a <f_open+0x38a>
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2200      	movs	r2, #0
 8013248:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801324a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801324e:	4618      	mov	r0, r3
 8013250:	3760      	adds	r7, #96	; 0x60
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	274a0000 	.word	0x274a0000

0801325c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b08e      	sub	sp, #56	; 0x38
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
 8013268:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	2200      	movs	r2, #0
 8013272:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f107 0214 	add.w	r2, r7, #20
 801327a:	4611      	mov	r1, r2
 801327c:	4618      	mov	r0, r3
 801327e:	f7ff fda3 	bl	8012dc8 <validate>
 8013282:	4603      	mov	r3, r0
 8013284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801328c:	2b00      	cmp	r3, #0
 801328e:	d107      	bne.n	80132a0 <f_read+0x44>
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	7d5b      	ldrb	r3, [r3, #21]
 8013294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013298:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801329c:	2b00      	cmp	r3, #0
 801329e:	d002      	beq.n	80132a6 <f_read+0x4a>
 80132a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132a4:	e135      	b.n	8013512 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	7d1b      	ldrb	r3, [r3, #20]
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d101      	bne.n	80132b6 <f_read+0x5a>
 80132b2:	2307      	movs	r3, #7
 80132b4:	e12d      	b.n	8013512 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	68da      	ldr	r2, [r3, #12]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	699b      	ldr	r3, [r3, #24]
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	6a3b      	ldr	r3, [r7, #32]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	f240 811e 	bls.w	8013508 <f_read+0x2ac>
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80132d0:	e11a      	b.n	8013508 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	699b      	ldr	r3, [r3, #24]
 80132d6:	697a      	ldr	r2, [r7, #20]
 80132d8:	8992      	ldrh	r2, [r2, #12]
 80132da:	fbb3 f1f2 	udiv	r1, r3, r2
 80132de:	fb02 f201 	mul.w	r2, r2, r1
 80132e2:	1a9b      	subs	r3, r3, r2
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f040 80d5 	bne.w	8013494 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	699b      	ldr	r3, [r3, #24]
 80132ee:	697a      	ldr	r2, [r7, #20]
 80132f0:	8992      	ldrh	r2, [r2, #12]
 80132f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80132f6:	697a      	ldr	r2, [r7, #20]
 80132f8:	8952      	ldrh	r2, [r2, #10]
 80132fa:	3a01      	subs	r2, #1
 80132fc:	4013      	ands	r3, r2
 80132fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d12f      	bne.n	8013366 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	699b      	ldr	r3, [r3, #24]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d103      	bne.n	8013316 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	633b      	str	r3, [r7, #48]	; 0x30
 8013314:	e013      	b.n	801333e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801331a:	2b00      	cmp	r3, #0
 801331c:	d007      	beq.n	801332e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	699b      	ldr	r3, [r3, #24]
 8013322:	4619      	mov	r1, r3
 8013324:	68f8      	ldr	r0, [r7, #12]
 8013326:	f7fe fdb0 	bl	8011e8a <clmt_clust>
 801332a:	6338      	str	r0, [r7, #48]	; 0x30
 801332c:	e007      	b.n	801333e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801332e:	68fa      	ldr	r2, [r7, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	69db      	ldr	r3, [r3, #28]
 8013334:	4619      	mov	r1, r3
 8013336:	4610      	mov	r0, r2
 8013338:	f7fe fac3 	bl	80118c2 <get_fat>
 801333c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013340:	2b01      	cmp	r3, #1
 8013342:	d804      	bhi.n	801334e <f_read+0xf2>
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2202      	movs	r2, #2
 8013348:	755a      	strb	r2, [r3, #21]
 801334a:	2302      	movs	r3, #2
 801334c:	e0e1      	b.n	8013512 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013354:	d104      	bne.n	8013360 <f_read+0x104>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2201      	movs	r2, #1
 801335a:	755a      	strb	r2, [r3, #21]
 801335c:	2301      	movs	r3, #1
 801335e:	e0d8      	b.n	8013512 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013364:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013366:	697a      	ldr	r2, [r7, #20]
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	69db      	ldr	r3, [r3, #28]
 801336c:	4619      	mov	r1, r3
 801336e:	4610      	mov	r0, r2
 8013370:	f7fe fa88 	bl	8011884 <clust2sect>
 8013374:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d104      	bne.n	8013386 <f_read+0x12a>
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	2202      	movs	r2, #2
 8013380:	755a      	strb	r2, [r3, #21]
 8013382:	2302      	movs	r3, #2
 8013384:	e0c5      	b.n	8013512 <f_read+0x2b6>
			sect += csect;
 8013386:	69ba      	ldr	r2, [r7, #24]
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	4413      	add	r3, r2
 801338c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	899b      	ldrh	r3, [r3, #12]
 8013392:	461a      	mov	r2, r3
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	fbb3 f3f2 	udiv	r3, r3, r2
 801339a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d041      	beq.n	8013426 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80133a2:	69fa      	ldr	r2, [r7, #28]
 80133a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a6:	4413      	add	r3, r2
 80133a8:	697a      	ldr	r2, [r7, #20]
 80133aa:	8952      	ldrh	r2, [r2, #10]
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d905      	bls.n	80133bc <f_read+0x160>
					cc = fs->csize - csect;
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	895b      	ldrh	r3, [r3, #10]
 80133b4:	461a      	mov	r2, r3
 80133b6:	69fb      	ldr	r3, [r7, #28]
 80133b8:	1ad3      	subs	r3, r2, r3
 80133ba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	7858      	ldrb	r0, [r3, #1]
 80133c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c2:	69ba      	ldr	r2, [r7, #24]
 80133c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133c6:	f7fd feb1 	bl	801112c <disk_read>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d004      	beq.n	80133da <f_read+0x17e>
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2201      	movs	r2, #1
 80133d4:	755a      	strb	r2, [r3, #21]
 80133d6:	2301      	movs	r3, #1
 80133d8:	e09b      	b.n	8013512 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	7d1b      	ldrb	r3, [r3, #20]
 80133de:	b25b      	sxtb	r3, r3
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	da18      	bge.n	8013416 <f_read+0x1ba>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	6a1a      	ldr	r2, [r3, #32]
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d911      	bls.n	8013416 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6a1a      	ldr	r2, [r3, #32]
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	1ad3      	subs	r3, r2, r3
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	8992      	ldrh	r2, [r2, #12]
 80133fe:	fb02 f303 	mul.w	r3, r2, r3
 8013402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013404:	18d0      	adds	r0, r2, r3
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	899b      	ldrh	r3, [r3, #12]
 8013410:	461a      	mov	r2, r3
 8013412:	f7fd ff6b 	bl	80112ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	899b      	ldrh	r3, [r3, #12]
 801341a:	461a      	mov	r2, r3
 801341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341e:	fb02 f303 	mul.w	r3, r2, r3
 8013422:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013424:	e05c      	b.n	80134e0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6a1b      	ldr	r3, [r3, #32]
 801342a:	69ba      	ldr	r2, [r7, #24]
 801342c:	429a      	cmp	r2, r3
 801342e:	d02e      	beq.n	801348e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	7d1b      	ldrb	r3, [r3, #20]
 8013434:	b25b      	sxtb	r3, r3
 8013436:	2b00      	cmp	r3, #0
 8013438:	da18      	bge.n	801346c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	7858      	ldrb	r0, [r3, #1]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6a1a      	ldr	r2, [r3, #32]
 8013448:	2301      	movs	r3, #1
 801344a:	f7fd fe8f 	bl	801116c <disk_write>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d004      	beq.n	801345e <f_read+0x202>
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2201      	movs	r2, #1
 8013458:	755a      	strb	r2, [r3, #21]
 801345a:	2301      	movs	r3, #1
 801345c:	e059      	b.n	8013512 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	7d1b      	ldrb	r3, [r3, #20]
 8013462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013466:	b2da      	uxtb	r2, r3
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	7858      	ldrb	r0, [r3, #1]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013476:	2301      	movs	r3, #1
 8013478:	69ba      	ldr	r2, [r7, #24]
 801347a:	f7fd fe57 	bl	801112c <disk_read>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d004      	beq.n	801348e <f_read+0x232>
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2201      	movs	r2, #1
 8013488:	755a      	strb	r2, [r3, #21]
 801348a:	2301      	movs	r3, #1
 801348c:	e041      	b.n	8013512 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	69ba      	ldr	r2, [r7, #24]
 8013492:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	899b      	ldrh	r3, [r3, #12]
 8013498:	4618      	mov	r0, r3
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	699b      	ldr	r3, [r3, #24]
 801349e:	697a      	ldr	r2, [r7, #20]
 80134a0:	8992      	ldrh	r2, [r2, #12]
 80134a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80134a6:	fb02 f201 	mul.w	r2, r2, r1
 80134aa:	1a9b      	subs	r3, r3, r2
 80134ac:	1ac3      	subs	r3, r0, r3
 80134ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80134b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d901      	bls.n	80134bc <f_read+0x260>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	699b      	ldr	r3, [r3, #24]
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	8992      	ldrh	r2, [r2, #12]
 80134ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80134ce:	fb02 f200 	mul.w	r2, r2, r0
 80134d2:	1a9b      	subs	r3, r3, r2
 80134d4:	440b      	add	r3, r1
 80134d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134d8:	4619      	mov	r1, r3
 80134da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134dc:	f7fd ff06 	bl	80112ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80134e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e4:	4413      	add	r3, r2
 80134e6:	627b      	str	r3, [r7, #36]	; 0x24
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	699a      	ldr	r2, [r3, #24]
 80134ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ee:	441a      	add	r2, r3
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	619a      	str	r2, [r3, #24]
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134fa:	441a      	add	r2, r3
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	601a      	str	r2, [r3, #0]
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013504:	1ad3      	subs	r3, r2, r3
 8013506:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	f47f aee1 	bne.w	80132d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3738      	adds	r7, #56	; 0x38
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}

0801351a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801351a:	b580      	push	{r7, lr}
 801351c:	b08c      	sub	sp, #48	; 0x30
 801351e:	af00      	add	r7, sp, #0
 8013520:	60f8      	str	r0, [r7, #12]
 8013522:	60b9      	str	r1, [r7, #8]
 8013524:	607a      	str	r2, [r7, #4]
 8013526:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	2200      	movs	r2, #0
 8013530:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	f107 0210 	add.w	r2, r7, #16
 8013538:	4611      	mov	r1, r2
 801353a:	4618      	mov	r0, r3
 801353c:	f7ff fc44 	bl	8012dc8 <validate>
 8013540:	4603      	mov	r3, r0
 8013542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801354a:	2b00      	cmp	r3, #0
 801354c:	d107      	bne.n	801355e <f_write+0x44>
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	7d5b      	ldrb	r3, [r3, #21]
 8013552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801355a:	2b00      	cmp	r3, #0
 801355c:	d002      	beq.n	8013564 <f_write+0x4a>
 801355e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013562:	e16a      	b.n	801383a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	7d1b      	ldrb	r3, [r3, #20]
 8013568:	f003 0302 	and.w	r3, r3, #2
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <f_write+0x5a>
 8013570:	2307      	movs	r3, #7
 8013572:	e162      	b.n	801383a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	699a      	ldr	r2, [r3, #24]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	441a      	add	r2, r3
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	699b      	ldr	r3, [r3, #24]
 8013580:	429a      	cmp	r2, r3
 8013582:	f080 814c 	bcs.w	801381e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	699b      	ldr	r3, [r3, #24]
 801358a:	43db      	mvns	r3, r3
 801358c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801358e:	e146      	b.n	801381e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	699b      	ldr	r3, [r3, #24]
 8013594:	693a      	ldr	r2, [r7, #16]
 8013596:	8992      	ldrh	r2, [r2, #12]
 8013598:	fbb3 f1f2 	udiv	r1, r3, r2
 801359c:	fb02 f201 	mul.w	r2, r2, r1
 80135a0:	1a9b      	subs	r3, r3, r2
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	f040 80f1 	bne.w	801378a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	699b      	ldr	r3, [r3, #24]
 80135ac:	693a      	ldr	r2, [r7, #16]
 80135ae:	8992      	ldrh	r2, [r2, #12]
 80135b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80135b4:	693a      	ldr	r2, [r7, #16]
 80135b6:	8952      	ldrh	r2, [r2, #10]
 80135b8:	3a01      	subs	r2, #1
 80135ba:	4013      	ands	r3, r2
 80135bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d143      	bne.n	801364c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	699b      	ldr	r3, [r3, #24]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10c      	bne.n	80135e6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	689b      	ldr	r3, [r3, #8]
 80135d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80135d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d11a      	bne.n	801360e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2100      	movs	r1, #0
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe fbbc 	bl	8011d5a <create_chain>
 80135e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80135e4:	e013      	b.n	801360e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d007      	beq.n	80135fe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	699b      	ldr	r3, [r3, #24]
 80135f2:	4619      	mov	r1, r3
 80135f4:	68f8      	ldr	r0, [r7, #12]
 80135f6:	f7fe fc48 	bl	8011e8a <clmt_clust>
 80135fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80135fc:	e007      	b.n	801360e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	69db      	ldr	r3, [r3, #28]
 8013604:	4619      	mov	r1, r3
 8013606:	4610      	mov	r0, r2
 8013608:	f7fe fba7 	bl	8011d5a <create_chain>
 801360c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013610:	2b00      	cmp	r3, #0
 8013612:	f000 8109 	beq.w	8013828 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	2b01      	cmp	r3, #1
 801361a:	d104      	bne.n	8013626 <f_write+0x10c>
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2202      	movs	r2, #2
 8013620:	755a      	strb	r2, [r3, #21]
 8013622:	2302      	movs	r3, #2
 8013624:	e109      	b.n	801383a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	f1b3 3fff 	cmp.w	r3, #4294967295
 801362c:	d104      	bne.n	8013638 <f_write+0x11e>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2201      	movs	r2, #1
 8013632:	755a      	strb	r2, [r3, #21]
 8013634:	2301      	movs	r3, #1
 8013636:	e100      	b.n	801383a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801363c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d102      	bne.n	801364c <f_write+0x132>
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801364a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	7d1b      	ldrb	r3, [r3, #20]
 8013650:	b25b      	sxtb	r3, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	da18      	bge.n	8013688 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	7858      	ldrb	r0, [r3, #1]
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6a1a      	ldr	r2, [r3, #32]
 8013664:	2301      	movs	r3, #1
 8013666:	f7fd fd81 	bl	801116c <disk_write>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d004      	beq.n	801367a <f_write+0x160>
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2201      	movs	r2, #1
 8013674:	755a      	strb	r2, [r3, #21]
 8013676:	2301      	movs	r3, #1
 8013678:	e0df      	b.n	801383a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	7d1b      	ldrb	r3, [r3, #20]
 801367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013682:	b2da      	uxtb	r2, r3
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013688:	693a      	ldr	r2, [r7, #16]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	69db      	ldr	r3, [r3, #28]
 801368e:	4619      	mov	r1, r3
 8013690:	4610      	mov	r0, r2
 8013692:	f7fe f8f7 	bl	8011884 <clust2sect>
 8013696:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d104      	bne.n	80136a8 <f_write+0x18e>
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2202      	movs	r2, #2
 80136a2:	755a      	strb	r2, [r3, #21]
 80136a4:	2302      	movs	r3, #2
 80136a6:	e0c8      	b.n	801383a <f_write+0x320>
			sect += csect;
 80136a8:	697a      	ldr	r2, [r7, #20]
 80136aa:	69bb      	ldr	r3, [r7, #24]
 80136ac:	4413      	add	r3, r2
 80136ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	899b      	ldrh	r3, [r3, #12]
 80136b4:	461a      	mov	r2, r3
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80136bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80136be:	6a3b      	ldr	r3, [r7, #32]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d043      	beq.n	801374c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80136c4:	69ba      	ldr	r2, [r7, #24]
 80136c6:	6a3b      	ldr	r3, [r7, #32]
 80136c8:	4413      	add	r3, r2
 80136ca:	693a      	ldr	r2, [r7, #16]
 80136cc:	8952      	ldrh	r2, [r2, #10]
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d905      	bls.n	80136de <f_write+0x1c4>
					cc = fs->csize - csect;
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	895b      	ldrh	r3, [r3, #10]
 80136d6:	461a      	mov	r2, r3
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	1ad3      	subs	r3, r2, r3
 80136dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	7858      	ldrb	r0, [r3, #1]
 80136e2:	6a3b      	ldr	r3, [r7, #32]
 80136e4:	697a      	ldr	r2, [r7, #20]
 80136e6:	69f9      	ldr	r1, [r7, #28]
 80136e8:	f7fd fd40 	bl	801116c <disk_write>
 80136ec:	4603      	mov	r3, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d004      	beq.n	80136fc <f_write+0x1e2>
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	2201      	movs	r2, #1
 80136f6:	755a      	strb	r2, [r3, #21]
 80136f8:	2301      	movs	r3, #1
 80136fa:	e09e      	b.n	801383a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	6a1a      	ldr	r2, [r3, #32]
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	1ad3      	subs	r3, r2, r3
 8013704:	6a3a      	ldr	r2, [r7, #32]
 8013706:	429a      	cmp	r2, r3
 8013708:	d918      	bls.n	801373c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	6a1a      	ldr	r2, [r3, #32]
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	693a      	ldr	r2, [r7, #16]
 801371a:	8992      	ldrh	r2, [r2, #12]
 801371c:	fb02 f303 	mul.w	r3, r2, r3
 8013720:	69fa      	ldr	r2, [r7, #28]
 8013722:	18d1      	adds	r1, r2, r3
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	899b      	ldrh	r3, [r3, #12]
 8013728:	461a      	mov	r2, r3
 801372a:	f7fd fddf 	bl	80112ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	7d1b      	ldrb	r3, [r3, #20]
 8013732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013736:	b2da      	uxtb	r2, r3
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	899b      	ldrh	r3, [r3, #12]
 8013740:	461a      	mov	r2, r3
 8013742:	6a3b      	ldr	r3, [r7, #32]
 8013744:	fb02 f303 	mul.w	r3, r2, r3
 8013748:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801374a:	e04b      	b.n	80137e4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	6a1b      	ldr	r3, [r3, #32]
 8013750:	697a      	ldr	r2, [r7, #20]
 8013752:	429a      	cmp	r2, r3
 8013754:	d016      	beq.n	8013784 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	699a      	ldr	r2, [r3, #24]
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801375e:	429a      	cmp	r2, r3
 8013760:	d210      	bcs.n	8013784 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	7858      	ldrb	r0, [r3, #1]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801376c:	2301      	movs	r3, #1
 801376e:	697a      	ldr	r2, [r7, #20]
 8013770:	f7fd fcdc 	bl	801112c <disk_read>
 8013774:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013776:	2b00      	cmp	r3, #0
 8013778:	d004      	beq.n	8013784 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	2201      	movs	r2, #1
 801377e:	755a      	strb	r2, [r3, #21]
 8013780:	2301      	movs	r3, #1
 8013782:	e05a      	b.n	801383a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	899b      	ldrh	r3, [r3, #12]
 801378e:	4618      	mov	r0, r3
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	699b      	ldr	r3, [r3, #24]
 8013794:	693a      	ldr	r2, [r7, #16]
 8013796:	8992      	ldrh	r2, [r2, #12]
 8013798:	fbb3 f1f2 	udiv	r1, r3, r2
 801379c:	fb02 f201 	mul.w	r2, r2, r1
 80137a0:	1a9b      	subs	r3, r3, r2
 80137a2:	1ac3      	subs	r3, r0, r3
 80137a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80137a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d901      	bls.n	80137b2 <f_write+0x298>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	699b      	ldr	r3, [r3, #24]
 80137bc:	693a      	ldr	r2, [r7, #16]
 80137be:	8992      	ldrh	r2, [r2, #12]
 80137c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80137c4:	fb02 f200 	mul.w	r2, r2, r0
 80137c8:	1a9b      	subs	r3, r3, r2
 80137ca:	440b      	add	r3, r1
 80137cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ce:	69f9      	ldr	r1, [r7, #28]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fd fd8b 	bl	80112ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	7d1b      	ldrb	r3, [r3, #20]
 80137da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80137de:	b2da      	uxtb	r2, r3
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80137e4:	69fa      	ldr	r2, [r7, #28]
 80137e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e8:	4413      	add	r3, r2
 80137ea:	61fb      	str	r3, [r7, #28]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	699a      	ldr	r2, [r3, #24]
 80137f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f2:	441a      	add	r2, r3
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	619a      	str	r2, [r3, #24]
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	68da      	ldr	r2, [r3, #12]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	699b      	ldr	r3, [r3, #24]
 8013800:	429a      	cmp	r2, r3
 8013802:	bf38      	it	cc
 8013804:	461a      	movcc	r2, r3
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	60da      	str	r2, [r3, #12]
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013810:	441a      	add	r2, r3
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	1ad3      	subs	r3, r2, r3
 801381c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2b00      	cmp	r3, #0
 8013822:	f47f aeb5 	bne.w	8013590 <f_write+0x76>
 8013826:	e000      	b.n	801382a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013828:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	7d1b      	ldrb	r3, [r3, #20]
 801382e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013832:	b2da      	uxtb	r2, r3
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3730      	adds	r7, #48	; 0x30
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b086      	sub	sp, #24
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f107 0208 	add.w	r2, r7, #8
 8013852:	4611      	mov	r1, r2
 8013854:	4618      	mov	r0, r3
 8013856:	f7ff fab7 	bl	8012dc8 <validate>
 801385a:	4603      	mov	r3, r0
 801385c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801385e:	7dfb      	ldrb	r3, [r7, #23]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d167      	bne.n	8013934 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	7d1b      	ldrb	r3, [r3, #20]
 8013868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801386c:	2b00      	cmp	r3, #0
 801386e:	d061      	beq.n	8013934 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	7d1b      	ldrb	r3, [r3, #20]
 8013874:	b25b      	sxtb	r3, r3
 8013876:	2b00      	cmp	r3, #0
 8013878:	da15      	bge.n	80138a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	7858      	ldrb	r0, [r3, #1]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6a1a      	ldr	r2, [r3, #32]
 8013888:	2301      	movs	r3, #1
 801388a:	f7fd fc6f 	bl	801116c <disk_write>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d001      	beq.n	8013898 <f_sync+0x54>
 8013894:	2301      	movs	r3, #1
 8013896:	e04e      	b.n	8013936 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	7d1b      	ldrb	r3, [r3, #20]
 801389c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138a0:	b2da      	uxtb	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80138a6:	4b26      	ldr	r3, [pc, #152]	; (8013940 <f_sync+0xfc>)
 80138a8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b0:	4619      	mov	r1, r3
 80138b2:	4610      	mov	r0, r2
 80138b4:	f7fd ff48 	bl	8011748 <move_window>
 80138b8:	4603      	mov	r3, r0
 80138ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80138bc:	7dfb      	ldrb	r3, [r7, #23]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d138      	bne.n	8013934 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	330b      	adds	r3, #11
 80138cc:	781a      	ldrb	r2, [r3, #0]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	330b      	adds	r3, #11
 80138d2:	f042 0220 	orr.w	r2, r2, #32
 80138d6:	b2d2      	uxtb	r2, r2
 80138d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6818      	ldr	r0, [r3, #0]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	461a      	mov	r2, r3
 80138e4:	68f9      	ldr	r1, [r7, #12]
 80138e6:	f7fe fccd 	bl	8012284 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f103 021c 	add.w	r2, r3, #28
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	4619      	mov	r1, r3
 80138f6:	4610      	mov	r0, r2
 80138f8:	f7fd fccc 	bl	8011294 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	3316      	adds	r3, #22
 8013900:	6939      	ldr	r1, [r7, #16]
 8013902:	4618      	mov	r0, r3
 8013904:	f7fd fcc6 	bl	8011294 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	3312      	adds	r3, #18
 801390c:	2100      	movs	r1, #0
 801390e:	4618      	mov	r0, r3
 8013910:	f7fd fca5 	bl	801125e <st_word>
					fs->wflag = 1;
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	2201      	movs	r2, #1
 8013918:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	4618      	mov	r0, r3
 801391e:	f7fd ff41 	bl	80117a4 <sync_fs>
 8013922:	4603      	mov	r3, r0
 8013924:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	7d1b      	ldrb	r3, [r3, #20]
 801392a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801392e:	b2da      	uxtb	r2, r3
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013934:	7dfb      	ldrb	r3, [r7, #23]
}
 8013936:	4618      	mov	r0, r3
 8013938:	3718      	adds	r7, #24
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	274a0000 	.word	0x274a0000

08013944 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7ff ff79 	bl	8013844 <f_sync>
 8013952:	4603      	mov	r3, r0
 8013954:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013956:	7bfb      	ldrb	r3, [r7, #15]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d118      	bne.n	801398e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f107 0208 	add.w	r2, r7, #8
 8013962:	4611      	mov	r1, r2
 8013964:	4618      	mov	r0, r3
 8013966:	f7ff fa2f 	bl	8012dc8 <validate>
 801396a:	4603      	mov	r3, r0
 801396c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801396e:	7bfb      	ldrb	r3, [r7, #15]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d10c      	bne.n	801398e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	691b      	ldr	r3, [r3, #16]
 8013978:	4618      	mov	r0, r3
 801397a:	f7fd fe41 	bl	8011600 <dec_lock>
 801397e:	4603      	mov	r3, r0
 8013980:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013982:	7bfb      	ldrb	r3, [r7, #15]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d102      	bne.n	801398e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2200      	movs	r2, #0
 801398c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013998:	b590      	push	{r4, r7, lr}
 801399a:	b091      	sub	sp, #68	; 0x44
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80139a0:	f107 0108 	add.w	r1, r7, #8
 80139a4:	1d3b      	adds	r3, r7, #4
 80139a6:	2200      	movs	r2, #0
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fe ff87 	bl	80128bc <find_volume>
 80139ae:	4603      	mov	r3, r0
 80139b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80139b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d131      	bne.n	8013a20 <f_chdir+0x88>
		dj.obj.fs = fs;
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	f107 030c 	add.w	r3, r7, #12
 80139c6:	4611      	mov	r1, r2
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fe fe47 	bl	801265c <follow_path>
 80139ce:	4603      	mov	r3, r0
 80139d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80139d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d11a      	bne.n	8013a12 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80139dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80139e0:	b25b      	sxtb	r3, r3
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	da03      	bge.n	80139ee <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	697a      	ldr	r2, [r7, #20]
 80139ea:	619a      	str	r2, [r3, #24]
 80139ec:	e011      	b.n	8013a12 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80139ee:	7cbb      	ldrb	r3, [r7, #18]
 80139f0:	f003 0310 	and.w	r3, r3, #16
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d009      	beq.n	8013a0c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139fc:	68bc      	ldr	r4, [r7, #8]
 80139fe:	4611      	mov	r1, r2
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fe fc20 	bl	8012246 <ld_clust>
 8013a06:	4603      	mov	r3, r0
 8013a08:	61a3      	str	r3, [r4, #24]
 8013a0a:	e002      	b.n	8013a12 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013a0c:	2305      	movs	r3, #5
 8013a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013a12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a16:	2b04      	cmp	r3, #4
 8013a18:	d102      	bne.n	8013a20 <f_chdir+0x88>
 8013a1a:	2305      	movs	r3, #5
 8013a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3744      	adds	r7, #68	; 0x44
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd90      	pop	{r4, r7, pc}

08013a2c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b090      	sub	sp, #64	; 0x40
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f107 0208 	add.w	r2, r7, #8
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7ff f9c2 	bl	8012dc8 <validate>
 8013a44:	4603      	mov	r3, r0
 8013a46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d103      	bne.n	8013a5a <f_lseek+0x2e>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	7d5b      	ldrb	r3, [r3, #21]
 8013a56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013a5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d002      	beq.n	8013a68 <f_lseek+0x3c>
 8013a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a66:	e201      	b.n	8013e6c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	f000 80d9 	beq.w	8013c24 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a78:	d15a      	bne.n	8013b30 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a82:	1d1a      	adds	r2, r3, #4
 8013a84:	627a      	str	r2, [r7, #36]	; 0x24
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	617b      	str	r3, [r7, #20]
 8013a8a:	2302      	movs	r3, #2
 8013a8c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	689b      	ldr	r3, [r3, #8]
 8013a92:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d03a      	beq.n	8013b10 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9c:	613b      	str	r3, [r7, #16]
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	3302      	adds	r3, #2
 8013aa6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aaa:	60fb      	str	r3, [r7, #12]
 8013aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aae:	3301      	adds	r3, #1
 8013ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fd ff03 	bl	80118c2 <get_fat>
 8013abc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d804      	bhi.n	8013ace <f_lseek+0xa2>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2202      	movs	r2, #2
 8013ac8:	755a      	strb	r2, [r3, #21]
 8013aca:	2302      	movs	r3, #2
 8013acc:	e1ce      	b.n	8013e6c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad4:	d104      	bne.n	8013ae0 <f_lseek+0xb4>
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	755a      	strb	r2, [r3, #21]
 8013adc:	2301      	movs	r3, #1
 8013ade:	e1c5      	b.n	8013e6c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d0de      	beq.n	8013aa8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d809      	bhi.n	8013b06 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af4:	1d1a      	adds	r2, r3, #4
 8013af6:	627a      	str	r2, [r7, #36]	; 0x24
 8013af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013afa:	601a      	str	r2, [r3, #0]
 8013afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afe:	1d1a      	adds	r2, r3, #4
 8013b00:	627a      	str	r2, [r7, #36]	; 0x24
 8013b02:	693a      	ldr	r2, [r7, #16]
 8013b04:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	69db      	ldr	r3, [r3, #28]
 8013b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d3c4      	bcc.n	8013a9a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b16:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d803      	bhi.n	8013b28 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	2200      	movs	r2, #0
 8013b24:	601a      	str	r2, [r3, #0]
 8013b26:	e19f      	b.n	8013e68 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013b28:	2311      	movs	r3, #17
 8013b2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b2e:	e19b      	b.n	8013e68 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	68db      	ldr	r3, [r3, #12]
 8013b34:	683a      	ldr	r2, [r7, #0]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d902      	bls.n	8013b40 <f_lseek+0x114>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	68db      	ldr	r3, [r3, #12]
 8013b3e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	683a      	ldr	r2, [r7, #0]
 8013b44:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f000 818d 	beq.w	8013e68 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	3b01      	subs	r3, #1
 8013b52:	4619      	mov	r1, r3
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7fe f998 	bl	8011e8a <clmt_clust>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013b60:	68ba      	ldr	r2, [r7, #8]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	69db      	ldr	r3, [r3, #28]
 8013b66:	4619      	mov	r1, r3
 8013b68:	4610      	mov	r0, r2
 8013b6a:	f7fd fe8b 	bl	8011884 <clust2sect>
 8013b6e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d104      	bne.n	8013b80 <f_lseek+0x154>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2202      	movs	r2, #2
 8013b7a:	755a      	strb	r2, [r3, #21]
 8013b7c:	2302      	movs	r3, #2
 8013b7e:	e175      	b.n	8013e6c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	3b01      	subs	r3, #1
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	8992      	ldrh	r2, [r2, #12]
 8013b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b8c:	68ba      	ldr	r2, [r7, #8]
 8013b8e:	8952      	ldrh	r2, [r2, #10]
 8013b90:	3a01      	subs	r2, #1
 8013b92:	4013      	ands	r3, r2
 8013b94:	69ba      	ldr	r2, [r7, #24]
 8013b96:	4413      	add	r3, r2
 8013b98:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	699b      	ldr	r3, [r3, #24]
 8013b9e:	68ba      	ldr	r2, [r7, #8]
 8013ba0:	8992      	ldrh	r2, [r2, #12]
 8013ba2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ba6:	fb02 f201 	mul.w	r2, r2, r1
 8013baa:	1a9b      	subs	r3, r3, r2
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f000 815b 	beq.w	8013e68 <f_lseek+0x43c>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6a1b      	ldr	r3, [r3, #32]
 8013bb6:	69ba      	ldr	r2, [r7, #24]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	f000 8155 	beq.w	8013e68 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	7d1b      	ldrb	r3, [r3, #20]
 8013bc2:	b25b      	sxtb	r3, r3
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	da18      	bge.n	8013bfa <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	7858      	ldrb	r0, [r3, #1]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6a1a      	ldr	r2, [r3, #32]
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	f7fd fac8 	bl	801116c <disk_write>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d004      	beq.n	8013bec <f_lseek+0x1c0>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2201      	movs	r2, #1
 8013be6:	755a      	strb	r2, [r3, #21]
 8013be8:	2301      	movs	r3, #1
 8013bea:	e13f      	b.n	8013e6c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	7d1b      	ldrb	r3, [r3, #20]
 8013bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bf4:	b2da      	uxtb	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	7858      	ldrb	r0, [r3, #1]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c04:	2301      	movs	r3, #1
 8013c06:	69ba      	ldr	r2, [r7, #24]
 8013c08:	f7fd fa90 	bl	801112c <disk_read>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d004      	beq.n	8013c1c <f_lseek+0x1f0>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2201      	movs	r2, #1
 8013c16:	755a      	strb	r2, [r3, #21]
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e127      	b.n	8013e6c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	69ba      	ldr	r2, [r7, #24]
 8013c20:	621a      	str	r2, [r3, #32]
 8013c22:	e121      	b.n	8013e68 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	683a      	ldr	r2, [r7, #0]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d908      	bls.n	8013c40 <f_lseek+0x214>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	7d1b      	ldrb	r3, [r3, #20]
 8013c32:	f003 0302 	and.w	r3, r3, #2
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d102      	bne.n	8013c40 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	699b      	ldr	r3, [r3, #24]
 8013c44:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	637b      	str	r3, [r7, #52]	; 0x34
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c4e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	f000 80b5 	beq.w	8013dc2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	895b      	ldrh	r3, [r3, #10]
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	899b      	ldrh	r3, [r3, #12]
 8013c62:	fb03 f302 	mul.w	r3, r3, r2
 8013c66:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013c68:	6a3b      	ldr	r3, [r7, #32]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d01b      	beq.n	8013ca6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	1e5a      	subs	r2, r3, #1
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	1e59      	subs	r1, r3, #1
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d30f      	bcc.n	8013ca6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013c86:	6a3b      	ldr	r3, [r7, #32]
 8013c88:	1e5a      	subs	r2, r3, #1
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	425b      	negs	r3, r3
 8013c8e:	401a      	ands	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	699b      	ldr	r3, [r3, #24]
 8013c98:	683a      	ldr	r2, [r7, #0]
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	69db      	ldr	r3, [r3, #28]
 8013ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8013ca4:	e022      	b.n	8013cec <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d119      	bne.n	8013ce6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7fe f84f 	bl	8011d5a <create_chain>
 8013cbc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d104      	bne.n	8013cce <f_lseek+0x2a2>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2202      	movs	r2, #2
 8013cc8:	755a      	strb	r2, [r3, #21]
 8013cca:	2302      	movs	r3, #2
 8013ccc:	e0ce      	b.n	8013e6c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cd4:	d104      	bne.n	8013ce0 <f_lseek+0x2b4>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2201      	movs	r2, #1
 8013cda:	755a      	strb	r2, [r3, #21]
 8013cdc:	2301      	movs	r3, #1
 8013cde:	e0c5      	b.n	8013e6c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ce4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cea:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d067      	beq.n	8013dc2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013cf2:	e03a      	b.n	8013d6a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013cf4:	683a      	ldr	r2, [r7, #0]
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	603b      	str	r3, [r7, #0]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	699a      	ldr	r2, [r3, #24]
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	441a      	add	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	7d1b      	ldrb	r3, [r3, #20]
 8013d0c:	f003 0302 	and.w	r3, r3, #2
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d00b      	beq.n	8013d2c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fe f81e 	bl	8011d5a <create_chain>
 8013d1e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d108      	bne.n	8013d38 <f_lseek+0x30c>
							ofs = 0; break;
 8013d26:	2300      	movs	r3, #0
 8013d28:	603b      	str	r3, [r7, #0]
 8013d2a:	e022      	b.n	8013d72 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fd fdc6 	bl	80118c2 <get_fat>
 8013d36:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3e:	d104      	bne.n	8013d4a <f_lseek+0x31e>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2201      	movs	r2, #1
 8013d44:	755a      	strb	r2, [r3, #21]
 8013d46:	2301      	movs	r3, #1
 8013d48:	e090      	b.n	8013e6c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d904      	bls.n	8013d5a <f_lseek+0x32e>
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	69db      	ldr	r3, [r3, #28]
 8013d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d304      	bcc.n	8013d64 <f_lseek+0x338>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2202      	movs	r2, #2
 8013d5e:	755a      	strb	r2, [r3, #21]
 8013d60:	2302      	movs	r3, #2
 8013d62:	e083      	b.n	8013e6c <f_lseek+0x440>
					fp->clust = clst;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d68:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013d6a:	683a      	ldr	r2, [r7, #0]
 8013d6c:	69fb      	ldr	r3, [r7, #28]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d8c0      	bhi.n	8013cf4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	699a      	ldr	r2, [r3, #24]
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	441a      	add	r2, r3
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	899b      	ldrh	r3, [r3, #12]
 8013d82:	461a      	mov	r2, r3
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d8a:	fb02 f201 	mul.w	r2, r2, r1
 8013d8e:	1a9b      	subs	r3, r3, r2
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d016      	beq.n	8013dc2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fd fd73 	bl	8011884 <clust2sect>
 8013d9e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d104      	bne.n	8013db0 <f_lseek+0x384>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2202      	movs	r2, #2
 8013daa:	755a      	strb	r2, [r3, #21]
 8013dac:	2302      	movs	r3, #2
 8013dae:	e05d      	b.n	8013e6c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	899b      	ldrh	r3, [r3, #12]
 8013db4:	461a      	mov	r2, r3
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dbe:	4413      	add	r3, r2
 8013dc0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	699a      	ldr	r2, [r3, #24]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	68db      	ldr	r3, [r3, #12]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d90a      	bls.n	8013de4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	699a      	ldr	r2, [r3, #24]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	7d1b      	ldrb	r3, [r3, #20]
 8013dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dde:	b2da      	uxtb	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	68ba      	ldr	r2, [r7, #8]
 8013dea:	8992      	ldrh	r2, [r2, #12]
 8013dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8013df0:	fb02 f201 	mul.w	r2, r2, r1
 8013df4:	1a9b      	subs	r3, r3, r2
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d036      	beq.n	8013e68 <f_lseek+0x43c>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6a1b      	ldr	r3, [r3, #32]
 8013dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d031      	beq.n	8013e68 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	7d1b      	ldrb	r3, [r3, #20]
 8013e08:	b25b      	sxtb	r3, r3
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	da18      	bge.n	8013e40 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	7858      	ldrb	r0, [r3, #1]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6a1a      	ldr	r2, [r3, #32]
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	f7fd f9a5 	bl	801116c <disk_write>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d004      	beq.n	8013e32 <f_lseek+0x406>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	755a      	strb	r2, [r3, #21]
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e01c      	b.n	8013e6c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	7d1b      	ldrb	r3, [r3, #20]
 8013e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e3a:	b2da      	uxtb	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	7858      	ldrb	r0, [r3, #1]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e4e:	f7fd f96d 	bl	801112c <disk_read>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d004      	beq.n	8013e62 <f_lseek+0x436>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	755a      	strb	r2, [r3, #21]
 8013e5e:	2301      	movs	r3, #1
 8013e60:	e004      	b.n	8013e6c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e66:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013e68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3740      	adds	r7, #64	; 0x40
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b09e      	sub	sp, #120	; 0x78
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e80:	f107 010c 	add.w	r1, r7, #12
 8013e84:	1d3b      	adds	r3, r7, #4
 8013e86:	2202      	movs	r2, #2
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7fe fd17 	bl	80128bc <find_volume>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013e98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	f040 80a4 	bne.w	8013fea <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ea8:	4611      	mov	r1, r2
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fe fbd6 	bl	801265c <follow_path>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013eb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d108      	bne.n	8013ed0 <f_unlink+0x5c>
 8013ebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013ec2:	f003 0320 	and.w	r3, r3, #32
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d002      	beq.n	8013ed0 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013eca:	2306      	movs	r3, #6
 8013ecc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013ed0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d108      	bne.n	8013eea <f_unlink+0x76>
 8013ed8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013edc:	2102      	movs	r1, #2
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fd fa82 	bl	80113e8 <chk_lock>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013eea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d17b      	bne.n	8013fea <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013ef6:	b25b      	sxtb	r3, r3
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	da03      	bge.n	8013f04 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013efc:	2306      	movs	r3, #6
 8013efe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f02:	e008      	b.n	8013f16 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013f04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f08:	f003 0301 	and.w	r3, r3, #1
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d002      	beq.n	8013f16 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013f10:	2307      	movs	r3, #7
 8013f12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013f16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d13d      	bne.n	8013f9a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f22:	4611      	mov	r1, r2
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7fe f98e 	bl	8012246 <ld_clust>
 8013f2a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013f2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f30:	f003 0310 	and.w	r3, r3, #16
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d030      	beq.n	8013f9a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	699b      	ldr	r3, [r3, #24]
 8013f3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d103      	bne.n	8013f4a <f_unlink+0xd6>
						res = FR_DENIED;
 8013f42:	2307      	movs	r3, #7
 8013f44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f48:	e027      	b.n	8013f9a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f50:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013f52:	f107 0310 	add.w	r3, r7, #16
 8013f56:	2100      	movs	r1, #0
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fd ffce 	bl	8011efa <dir_sdi>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013f64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d116      	bne.n	8013f9a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013f6c:	f107 0310 	add.w	r3, r7, #16
 8013f70:	2100      	movs	r1, #0
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fe f9a6 	bl	80122c4 <dir_read>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013f7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d102      	bne.n	8013f8c <f_unlink+0x118>
 8013f86:	2307      	movs	r3, #7
 8013f88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013f8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f90:	2b04      	cmp	r3, #4
 8013f92:	d102      	bne.n	8013f9a <f_unlink+0x126>
 8013f94:	2300      	movs	r3, #0
 8013f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013f9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d123      	bne.n	8013fea <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013fa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7fe fa70 	bl	801248c <dir_remove>
 8013fac:	4603      	mov	r3, r0
 8013fae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013fb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10c      	bne.n	8013fd4 <f_unlink+0x160>
 8013fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d009      	beq.n	8013fd4 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fd fe61 	bl	8011c90 <remove_chain>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013fd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d106      	bne.n	8013fea <f_unlink+0x176>
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fd fbe0 	bl	80117a4 <sync_fs>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013fea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3778      	adds	r7, #120	; 0x78
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
	...

08013ff8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b096      	sub	sp, #88	; 0x58
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014000:	f107 0108 	add.w	r1, r7, #8
 8014004:	1d3b      	adds	r3, r7, #4
 8014006:	2202      	movs	r2, #2
 8014008:	4618      	mov	r0, r3
 801400a:	f7fe fc57 	bl	80128bc <find_volume>
 801400e:	4603      	mov	r3, r0
 8014010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801401c:	2b00      	cmp	r3, #0
 801401e:	f040 80fe 	bne.w	801421e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	f107 030c 	add.w	r3, r7, #12
 8014028:	4611      	mov	r1, r2
 801402a:	4618      	mov	r0, r3
 801402c:	f7fe fb16 	bl	801265c <follow_path>
 8014030:	4603      	mov	r3, r0
 8014032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801403a:	2b00      	cmp	r3, #0
 801403c:	d102      	bne.n	8014044 <f_mkdir+0x4c>
 801403e:	2308      	movs	r3, #8
 8014040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014048:	2b04      	cmp	r3, #4
 801404a:	d108      	bne.n	801405e <f_mkdir+0x66>
 801404c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014050:	f003 0320 	and.w	r3, r3, #32
 8014054:	2b00      	cmp	r3, #0
 8014056:	d002      	beq.n	801405e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014058:	2306      	movs	r3, #6
 801405a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801405e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014062:	2b04      	cmp	r3, #4
 8014064:	f040 80db 	bne.w	801421e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014068:	f107 030c 	add.w	r3, r7, #12
 801406c:	2100      	movs	r1, #0
 801406e:	4618      	mov	r0, r3
 8014070:	f7fd fe73 	bl	8011d5a <create_chain>
 8014074:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	895b      	ldrh	r3, [r3, #10]
 801407a:	461a      	mov	r2, r3
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	899b      	ldrh	r3, [r3, #12]
 8014080:	fb03 f302 	mul.w	r3, r3, r2
 8014084:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014086:	2300      	movs	r3, #0
 8014088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801408c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801408e:	2b00      	cmp	r3, #0
 8014090:	d102      	bne.n	8014098 <f_mkdir+0xa0>
 8014092:	2307      	movs	r3, #7
 8014094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801409a:	2b01      	cmp	r3, #1
 801409c:	d102      	bne.n	80140a4 <f_mkdir+0xac>
 801409e:	2302      	movs	r3, #2
 80140a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80140a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140aa:	d102      	bne.n	80140b2 <f_mkdir+0xba>
 80140ac:	2301      	movs	r3, #1
 80140ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80140b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d106      	bne.n	80140c8 <f_mkdir+0xd0>
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fd faff 	bl	80116c0 <sync_window>
 80140c2:	4603      	mov	r3, r0
 80140c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80140c8:	4b58      	ldr	r3, [pc, #352]	; (801422c <f_mkdir+0x234>)
 80140ca:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80140cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d16c      	bne.n	80141ae <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fd fbd3 	bl	8011884 <clust2sect>
 80140de:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	3338      	adds	r3, #56	; 0x38
 80140e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	899b      	ldrh	r3, [r3, #12]
 80140ea:	461a      	mov	r2, r3
 80140ec:	2100      	movs	r1, #0
 80140ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80140f0:	f7fd f91d 	bl	801132e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80140f4:	220b      	movs	r2, #11
 80140f6:	2120      	movs	r1, #32
 80140f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80140fa:	f7fd f918 	bl	801132e <mem_set>
					dir[DIR_Name] = '.';
 80140fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014100:	222e      	movs	r2, #46	; 0x2e
 8014102:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014106:	330b      	adds	r3, #11
 8014108:	2210      	movs	r2, #16
 801410a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801410e:	3316      	adds	r3, #22
 8014110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014112:	4618      	mov	r0, r3
 8014114:	f7fd f8be 	bl	8011294 <st_dword>
					st_clust(fs, dir, dcl);
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801411c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801411e:	4618      	mov	r0, r3
 8014120:	f7fe f8b0 	bl	8012284 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014126:	3320      	adds	r3, #32
 8014128:	2220      	movs	r2, #32
 801412a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801412c:	4618      	mov	r0, r3
 801412e:	f7fd f8dd 	bl	80112ec <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014134:	3321      	adds	r3, #33	; 0x21
 8014136:	222e      	movs	r2, #46	; 0x2e
 8014138:	701a      	strb	r2, [r3, #0]
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	2b03      	cmp	r3, #3
 8014144:	d106      	bne.n	8014154 <f_mkdir+0x15c>
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801414c:	429a      	cmp	r2, r3
 801414e:	d101      	bne.n	8014154 <f_mkdir+0x15c>
 8014150:	2300      	movs	r3, #0
 8014152:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014154:	68b8      	ldr	r0, [r7, #8]
 8014156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014158:	3320      	adds	r3, #32
 801415a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801415c:	4619      	mov	r1, r3
 801415e:	f7fe f891 	bl	8012284 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	895b      	ldrh	r3, [r3, #10]
 8014166:	653b      	str	r3, [r7, #80]	; 0x50
 8014168:	e01c      	b.n	80141a4 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801416c:	1c5a      	adds	r2, r3, #1
 801416e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014170:	68ba      	ldr	r2, [r7, #8]
 8014172:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	2201      	movs	r2, #1
 8014178:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	4618      	mov	r0, r3
 801417e:	f7fd fa9f 	bl	80116c0 <sync_window>
 8014182:	4603      	mov	r3, r0
 8014184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801418c:	2b00      	cmp	r3, #0
 801418e:	d10d      	bne.n	80141ac <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	899b      	ldrh	r3, [r3, #12]
 8014194:	461a      	mov	r2, r3
 8014196:	2100      	movs	r1, #0
 8014198:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801419a:	f7fd f8c8 	bl	801132e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801419e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141a0:	3b01      	subs	r3, #1
 80141a2:	653b      	str	r3, [r7, #80]	; 0x50
 80141a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d1df      	bne.n	801416a <f_mkdir+0x172>
 80141aa:	e000      	b.n	80141ae <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80141ac:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80141ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d107      	bne.n	80141c6 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80141b6:	f107 030c 	add.w	r3, r7, #12
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fe f934 	bl	8012428 <dir_register>
 80141c0:	4603      	mov	r3, r0
 80141c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80141c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d120      	bne.n	8014210 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80141ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80141d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141d4:	3316      	adds	r3, #22
 80141d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fd f85b 	bl	8011294 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80141e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7fe f84d 	bl	8012284 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80141ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ec:	330b      	adds	r3, #11
 80141ee:	2210      	movs	r2, #16
 80141f0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	2201      	movs	r2, #1
 80141f6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80141f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d10e      	bne.n	801421e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	4618      	mov	r0, r3
 8014204:	f7fd face 	bl	80117a4 <sync_fs>
 8014208:	4603      	mov	r3, r0
 801420a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801420e:	e006      	b.n	801421e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014210:	f107 030c 	add.w	r3, r7, #12
 8014214:	2200      	movs	r2, #0
 8014216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014218:	4618      	mov	r0, r3
 801421a:	f7fd fd39 	bl	8011c90 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801421e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014222:	4618      	mov	r0, r3
 8014224:	3758      	adds	r7, #88	; 0x58
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}
 801422a:	bf00      	nop
 801422c:	274a0000 	.word	0x274a0000

08014230 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b088      	sub	sp, #32
 8014234:	af00      	add	r7, sp, #0
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014244:	e017      	b.n	8014276 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014246:	f107 0310 	add.w	r3, r7, #16
 801424a:	f107 0114 	add.w	r1, r7, #20
 801424e:	2201      	movs	r2, #1
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7ff f803 	bl	801325c <f_read>
		if (rc != 1) break;
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d112      	bne.n	8014282 <f_gets+0x52>
		c = s[0];
 801425c:	7d3b      	ldrb	r3, [r7, #20]
 801425e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014260:	69bb      	ldr	r3, [r7, #24]
 8014262:	1c5a      	adds	r2, r3, #1
 8014264:	61ba      	str	r2, [r7, #24]
 8014266:	7dfa      	ldrb	r2, [r7, #23]
 8014268:	701a      	strb	r2, [r3, #0]
		n++;
 801426a:	69fb      	ldr	r3, [r7, #28]
 801426c:	3301      	adds	r3, #1
 801426e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014270:	7dfb      	ldrb	r3, [r7, #23]
 8014272:	2b0a      	cmp	r3, #10
 8014274:	d007      	beq.n	8014286 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	3b01      	subs	r3, #1
 801427a:	69fa      	ldr	r2, [r7, #28]
 801427c:	429a      	cmp	r2, r3
 801427e:	dbe2      	blt.n	8014246 <f_gets+0x16>
 8014280:	e002      	b.n	8014288 <f_gets+0x58>
		if (rc != 1) break;
 8014282:	bf00      	nop
 8014284:	e000      	b.n	8014288 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014286:	bf00      	nop
	}
	*p = 0;
 8014288:	69bb      	ldr	r3, [r7, #24]
 801428a:	2200      	movs	r2, #0
 801428c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <f_gets+0x68>
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	e000      	b.n	801429a <f_gets+0x6a>
 8014298:	2300      	movs	r3, #0
}
 801429a:	4618      	mov	r0, r3
 801429c:	3720      	adds	r7, #32
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
	...

080142a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80142a4:	b480      	push	{r7}
 80142a6:	b087      	sub	sp, #28
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	4613      	mov	r3, r2
 80142b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80142b2:	2301      	movs	r3, #1
 80142b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80142b6:	2300      	movs	r3, #0
 80142b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80142ba:	4b1f      	ldr	r3, [pc, #124]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142bc:	7a5b      	ldrb	r3, [r3, #9]
 80142be:	b2db      	uxtb	r3, r3
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d131      	bne.n	8014328 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80142c4:	4b1c      	ldr	r3, [pc, #112]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142c6:	7a5b      	ldrb	r3, [r3, #9]
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	461a      	mov	r2, r3
 80142cc:	4b1a      	ldr	r3, [pc, #104]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142ce:	2100      	movs	r1, #0
 80142d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80142d2:	4b19      	ldr	r3, [pc, #100]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142d4:	7a5b      	ldrb	r3, [r3, #9]
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	4a17      	ldr	r2, [pc, #92]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142da:	009b      	lsls	r3, r3, #2
 80142dc:	4413      	add	r3, r2
 80142de:	68fa      	ldr	r2, [r7, #12]
 80142e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80142e2:	4b15      	ldr	r3, [pc, #84]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142e4:	7a5b      	ldrb	r3, [r3, #9]
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	461a      	mov	r2, r3
 80142ea:	4b13      	ldr	r3, [pc, #76]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142ec:	4413      	add	r3, r2
 80142ee:	79fa      	ldrb	r2, [r7, #7]
 80142f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80142f2:	4b11      	ldr	r3, [pc, #68]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142f4:	7a5b      	ldrb	r3, [r3, #9]
 80142f6:	b2db      	uxtb	r3, r3
 80142f8:	1c5a      	adds	r2, r3, #1
 80142fa:	b2d1      	uxtb	r1, r2
 80142fc:	4a0e      	ldr	r2, [pc, #56]	; (8014338 <FATFS_LinkDriverEx+0x94>)
 80142fe:	7251      	strb	r1, [r2, #9]
 8014300:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014302:	7dbb      	ldrb	r3, [r7, #22]
 8014304:	3330      	adds	r3, #48	; 0x30
 8014306:	b2da      	uxtb	r2, r3
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	3301      	adds	r3, #1
 8014310:	223a      	movs	r2, #58	; 0x3a
 8014312:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	3302      	adds	r3, #2
 8014318:	222f      	movs	r2, #47	; 0x2f
 801431a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	3303      	adds	r3, #3
 8014320:	2200      	movs	r2, #0
 8014322:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014324:	2300      	movs	r3, #0
 8014326:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014328:	7dfb      	ldrb	r3, [r7, #23]
}
 801432a:	4618      	mov	r0, r3
 801432c:	371c      	adds	r7, #28
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	20041354 	.word	0x20041354

0801433c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014346:	2200      	movs	r2, #0
 8014348:	6839      	ldr	r1, [r7, #0]
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f7ff ffaa 	bl	80142a4 <FATFS_LinkDriverEx>
 8014350:	4603      	mov	r3, r0
}
 8014352:	4618      	mov	r0, r3
 8014354:	3708      	adds	r7, #8
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <__cxa_guard_acquire>:
 801435a:	6803      	ldr	r3, [r0, #0]
 801435c:	07db      	lsls	r3, r3, #31
 801435e:	d406      	bmi.n	801436e <__cxa_guard_acquire+0x14>
 8014360:	7843      	ldrb	r3, [r0, #1]
 8014362:	b103      	cbz	r3, 8014366 <__cxa_guard_acquire+0xc>
 8014364:	deff      	udf	#255	; 0xff
 8014366:	2301      	movs	r3, #1
 8014368:	7043      	strb	r3, [r0, #1]
 801436a:	4618      	mov	r0, r3
 801436c:	4770      	bx	lr
 801436e:	2000      	movs	r0, #0
 8014370:	4770      	bx	lr

08014372 <__cxa_guard_release>:
 8014372:	2301      	movs	r3, #1
 8014374:	6003      	str	r3, [r0, #0]
 8014376:	4770      	bx	lr

08014378 <cos>:
 8014378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801437a:	ec51 0b10 	vmov	r0, r1, d0
 801437e:	4a1e      	ldr	r2, [pc, #120]	; (80143f8 <cos+0x80>)
 8014380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014384:	4293      	cmp	r3, r2
 8014386:	dc06      	bgt.n	8014396 <cos+0x1e>
 8014388:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80143f0 <cos+0x78>
 801438c:	f000 fa74 	bl	8014878 <__kernel_cos>
 8014390:	ec51 0b10 	vmov	r0, r1, d0
 8014394:	e007      	b.n	80143a6 <cos+0x2e>
 8014396:	4a19      	ldr	r2, [pc, #100]	; (80143fc <cos+0x84>)
 8014398:	4293      	cmp	r3, r2
 801439a:	dd09      	ble.n	80143b0 <cos+0x38>
 801439c:	ee10 2a10 	vmov	r2, s0
 80143a0:	460b      	mov	r3, r1
 80143a2:	f7eb ff89 	bl	80002b8 <__aeabi_dsub>
 80143a6:	ec41 0b10 	vmov	d0, r0, r1
 80143aa:	b005      	add	sp, #20
 80143ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80143b0:	4668      	mov	r0, sp
 80143b2:	f000 f86d 	bl	8014490 <__ieee754_rem_pio2>
 80143b6:	f000 0003 	and.w	r0, r0, #3
 80143ba:	2801      	cmp	r0, #1
 80143bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80143c0:	ed9d 0b00 	vldr	d0, [sp]
 80143c4:	d007      	beq.n	80143d6 <cos+0x5e>
 80143c6:	2802      	cmp	r0, #2
 80143c8:	d00e      	beq.n	80143e8 <cos+0x70>
 80143ca:	2800      	cmp	r0, #0
 80143cc:	d0de      	beq.n	801438c <cos+0x14>
 80143ce:	2001      	movs	r0, #1
 80143d0:	f000 fe5a 	bl	8015088 <__kernel_sin>
 80143d4:	e7dc      	b.n	8014390 <cos+0x18>
 80143d6:	f000 fe57 	bl	8015088 <__kernel_sin>
 80143da:	ec53 2b10 	vmov	r2, r3, d0
 80143de:	ee10 0a10 	vmov	r0, s0
 80143e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80143e6:	e7de      	b.n	80143a6 <cos+0x2e>
 80143e8:	f000 fa46 	bl	8014878 <__kernel_cos>
 80143ec:	e7f5      	b.n	80143da <cos+0x62>
 80143ee:	bf00      	nop
	...
 80143f8:	3fe921fb 	.word	0x3fe921fb
 80143fc:	7fefffff 	.word	0x7fefffff

08014400 <sin>:
 8014400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014402:	ec51 0b10 	vmov	r0, r1, d0
 8014406:	4a20      	ldr	r2, [pc, #128]	; (8014488 <sin+0x88>)
 8014408:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801440c:	4293      	cmp	r3, r2
 801440e:	dc07      	bgt.n	8014420 <sin+0x20>
 8014410:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014480 <sin+0x80>
 8014414:	2000      	movs	r0, #0
 8014416:	f000 fe37 	bl	8015088 <__kernel_sin>
 801441a:	ec51 0b10 	vmov	r0, r1, d0
 801441e:	e007      	b.n	8014430 <sin+0x30>
 8014420:	4a1a      	ldr	r2, [pc, #104]	; (801448c <sin+0x8c>)
 8014422:	4293      	cmp	r3, r2
 8014424:	dd09      	ble.n	801443a <sin+0x3a>
 8014426:	ee10 2a10 	vmov	r2, s0
 801442a:	460b      	mov	r3, r1
 801442c:	f7eb ff44 	bl	80002b8 <__aeabi_dsub>
 8014430:	ec41 0b10 	vmov	d0, r0, r1
 8014434:	b005      	add	sp, #20
 8014436:	f85d fb04 	ldr.w	pc, [sp], #4
 801443a:	4668      	mov	r0, sp
 801443c:	f000 f828 	bl	8014490 <__ieee754_rem_pio2>
 8014440:	f000 0003 	and.w	r0, r0, #3
 8014444:	2801      	cmp	r0, #1
 8014446:	ed9d 1b02 	vldr	d1, [sp, #8]
 801444a:	ed9d 0b00 	vldr	d0, [sp]
 801444e:	d004      	beq.n	801445a <sin+0x5a>
 8014450:	2802      	cmp	r0, #2
 8014452:	d005      	beq.n	8014460 <sin+0x60>
 8014454:	b970      	cbnz	r0, 8014474 <sin+0x74>
 8014456:	2001      	movs	r0, #1
 8014458:	e7dd      	b.n	8014416 <sin+0x16>
 801445a:	f000 fa0d 	bl	8014878 <__kernel_cos>
 801445e:	e7dc      	b.n	801441a <sin+0x1a>
 8014460:	2001      	movs	r0, #1
 8014462:	f000 fe11 	bl	8015088 <__kernel_sin>
 8014466:	ec53 2b10 	vmov	r2, r3, d0
 801446a:	ee10 0a10 	vmov	r0, s0
 801446e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014472:	e7dd      	b.n	8014430 <sin+0x30>
 8014474:	f000 fa00 	bl	8014878 <__kernel_cos>
 8014478:	e7f5      	b.n	8014466 <sin+0x66>
 801447a:	bf00      	nop
 801447c:	f3af 8000 	nop.w
	...
 8014488:	3fe921fb 	.word	0x3fe921fb
 801448c:	7fefffff 	.word	0x7fefffff

08014490 <__ieee754_rem_pio2>:
 8014490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014494:	ec57 6b10 	vmov	r6, r7, d0
 8014498:	4bc3      	ldr	r3, [pc, #780]	; (80147a8 <__ieee754_rem_pio2+0x318>)
 801449a:	b08d      	sub	sp, #52	; 0x34
 801449c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80144a0:	4598      	cmp	r8, r3
 80144a2:	4604      	mov	r4, r0
 80144a4:	9704      	str	r7, [sp, #16]
 80144a6:	dc07      	bgt.n	80144b8 <__ieee754_rem_pio2+0x28>
 80144a8:	2200      	movs	r2, #0
 80144aa:	2300      	movs	r3, #0
 80144ac:	ed84 0b00 	vstr	d0, [r4]
 80144b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80144b4:	2500      	movs	r5, #0
 80144b6:	e027      	b.n	8014508 <__ieee754_rem_pio2+0x78>
 80144b8:	4bbc      	ldr	r3, [pc, #752]	; (80147ac <__ieee754_rem_pio2+0x31c>)
 80144ba:	4598      	cmp	r8, r3
 80144bc:	dc75      	bgt.n	80145aa <__ieee754_rem_pio2+0x11a>
 80144be:	9b04      	ldr	r3, [sp, #16]
 80144c0:	4dbb      	ldr	r5, [pc, #748]	; (80147b0 <__ieee754_rem_pio2+0x320>)
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	ee10 0a10 	vmov	r0, s0
 80144c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8014770 <__ieee754_rem_pio2+0x2e0>)
 80144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ce:	4639      	mov	r1, r7
 80144d0:	dd36      	ble.n	8014540 <__ieee754_rem_pio2+0xb0>
 80144d2:	f7eb fef1 	bl	80002b8 <__aeabi_dsub>
 80144d6:	45a8      	cmp	r8, r5
 80144d8:	4606      	mov	r6, r0
 80144da:	460f      	mov	r7, r1
 80144dc:	d018      	beq.n	8014510 <__ieee754_rem_pio2+0x80>
 80144de:	a3a6      	add	r3, pc, #664	; (adr r3, 8014778 <__ieee754_rem_pio2+0x2e8>)
 80144e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e4:	f7eb fee8 	bl	80002b8 <__aeabi_dsub>
 80144e8:	4602      	mov	r2, r0
 80144ea:	460b      	mov	r3, r1
 80144ec:	e9c4 2300 	strd	r2, r3, [r4]
 80144f0:	4630      	mov	r0, r6
 80144f2:	4639      	mov	r1, r7
 80144f4:	f7eb fee0 	bl	80002b8 <__aeabi_dsub>
 80144f8:	a39f      	add	r3, pc, #636	; (adr r3, 8014778 <__ieee754_rem_pio2+0x2e8>)
 80144fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fe:	f7eb fedb 	bl	80002b8 <__aeabi_dsub>
 8014502:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014506:	2501      	movs	r5, #1
 8014508:	4628      	mov	r0, r5
 801450a:	b00d      	add	sp, #52	; 0x34
 801450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014510:	a39b      	add	r3, pc, #620	; (adr r3, 8014780 <__ieee754_rem_pio2+0x2f0>)
 8014512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014516:	f7eb fecf 	bl	80002b8 <__aeabi_dsub>
 801451a:	a39b      	add	r3, pc, #620	; (adr r3, 8014788 <__ieee754_rem_pio2+0x2f8>)
 801451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014520:	4606      	mov	r6, r0
 8014522:	460f      	mov	r7, r1
 8014524:	f7eb fec8 	bl	80002b8 <__aeabi_dsub>
 8014528:	4602      	mov	r2, r0
 801452a:	460b      	mov	r3, r1
 801452c:	e9c4 2300 	strd	r2, r3, [r4]
 8014530:	4630      	mov	r0, r6
 8014532:	4639      	mov	r1, r7
 8014534:	f7eb fec0 	bl	80002b8 <__aeabi_dsub>
 8014538:	a393      	add	r3, pc, #588	; (adr r3, 8014788 <__ieee754_rem_pio2+0x2f8>)
 801453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453e:	e7de      	b.n	80144fe <__ieee754_rem_pio2+0x6e>
 8014540:	f7eb febc 	bl	80002bc <__adddf3>
 8014544:	45a8      	cmp	r8, r5
 8014546:	4606      	mov	r6, r0
 8014548:	460f      	mov	r7, r1
 801454a:	d016      	beq.n	801457a <__ieee754_rem_pio2+0xea>
 801454c:	a38a      	add	r3, pc, #552	; (adr r3, 8014778 <__ieee754_rem_pio2+0x2e8>)
 801454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014552:	f7eb feb3 	bl	80002bc <__adddf3>
 8014556:	4602      	mov	r2, r0
 8014558:	460b      	mov	r3, r1
 801455a:	e9c4 2300 	strd	r2, r3, [r4]
 801455e:	4630      	mov	r0, r6
 8014560:	4639      	mov	r1, r7
 8014562:	f7eb fea9 	bl	80002b8 <__aeabi_dsub>
 8014566:	a384      	add	r3, pc, #528	; (adr r3, 8014778 <__ieee754_rem_pio2+0x2e8>)
 8014568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456c:	f7eb fea6 	bl	80002bc <__adddf3>
 8014570:	f04f 35ff 	mov.w	r5, #4294967295
 8014574:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014578:	e7c6      	b.n	8014508 <__ieee754_rem_pio2+0x78>
 801457a:	a381      	add	r3, pc, #516	; (adr r3, 8014780 <__ieee754_rem_pio2+0x2f0>)
 801457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014580:	f7eb fe9c 	bl	80002bc <__adddf3>
 8014584:	a380      	add	r3, pc, #512	; (adr r3, 8014788 <__ieee754_rem_pio2+0x2f8>)
 8014586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458a:	4606      	mov	r6, r0
 801458c:	460f      	mov	r7, r1
 801458e:	f7eb fe95 	bl	80002bc <__adddf3>
 8014592:	4602      	mov	r2, r0
 8014594:	460b      	mov	r3, r1
 8014596:	e9c4 2300 	strd	r2, r3, [r4]
 801459a:	4630      	mov	r0, r6
 801459c:	4639      	mov	r1, r7
 801459e:	f7eb fe8b 	bl	80002b8 <__aeabi_dsub>
 80145a2:	a379      	add	r3, pc, #484	; (adr r3, 8014788 <__ieee754_rem_pio2+0x2f8>)
 80145a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a8:	e7e0      	b.n	801456c <__ieee754_rem_pio2+0xdc>
 80145aa:	4b82      	ldr	r3, [pc, #520]	; (80147b4 <__ieee754_rem_pio2+0x324>)
 80145ac:	4598      	cmp	r8, r3
 80145ae:	f300 80d0 	bgt.w	8014752 <__ieee754_rem_pio2+0x2c2>
 80145b2:	f000 fe23 	bl	80151fc <fabs>
 80145b6:	ec57 6b10 	vmov	r6, r7, d0
 80145ba:	ee10 0a10 	vmov	r0, s0
 80145be:	a374      	add	r3, pc, #464	; (adr r3, 8014790 <__ieee754_rem_pio2+0x300>)
 80145c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c4:	4639      	mov	r1, r7
 80145c6:	f7ec f82f 	bl	8000628 <__aeabi_dmul>
 80145ca:	2200      	movs	r2, #0
 80145cc:	4b7a      	ldr	r3, [pc, #488]	; (80147b8 <__ieee754_rem_pio2+0x328>)
 80145ce:	f7eb fe75 	bl	80002bc <__adddf3>
 80145d2:	f7ec fad9 	bl	8000b88 <__aeabi_d2iz>
 80145d6:	4605      	mov	r5, r0
 80145d8:	f7eb ffbc 	bl	8000554 <__aeabi_i2d>
 80145dc:	a364      	add	r3, pc, #400	; (adr r3, 8014770 <__ieee754_rem_pio2+0x2e0>)
 80145de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145e6:	f7ec f81f 	bl	8000628 <__aeabi_dmul>
 80145ea:	4602      	mov	r2, r0
 80145ec:	460b      	mov	r3, r1
 80145ee:	4630      	mov	r0, r6
 80145f0:	4639      	mov	r1, r7
 80145f2:	f7eb fe61 	bl	80002b8 <__aeabi_dsub>
 80145f6:	a360      	add	r3, pc, #384	; (adr r3, 8014778 <__ieee754_rem_pio2+0x2e8>)
 80145f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fc:	4682      	mov	sl, r0
 80145fe:	468b      	mov	fp, r1
 8014600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014604:	f7ec f810 	bl	8000628 <__aeabi_dmul>
 8014608:	2d1f      	cmp	r5, #31
 801460a:	4606      	mov	r6, r0
 801460c:	460f      	mov	r7, r1
 801460e:	dc0c      	bgt.n	801462a <__ieee754_rem_pio2+0x19a>
 8014610:	1e6a      	subs	r2, r5, #1
 8014612:	4b6a      	ldr	r3, [pc, #424]	; (80147bc <__ieee754_rem_pio2+0x32c>)
 8014614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014618:	4543      	cmp	r3, r8
 801461a:	d006      	beq.n	801462a <__ieee754_rem_pio2+0x19a>
 801461c:	4632      	mov	r2, r6
 801461e:	463b      	mov	r3, r7
 8014620:	4650      	mov	r0, sl
 8014622:	4659      	mov	r1, fp
 8014624:	f7eb fe48 	bl	80002b8 <__aeabi_dsub>
 8014628:	e00e      	b.n	8014648 <__ieee754_rem_pio2+0x1b8>
 801462a:	4632      	mov	r2, r6
 801462c:	463b      	mov	r3, r7
 801462e:	4650      	mov	r0, sl
 8014630:	4659      	mov	r1, fp
 8014632:	f7eb fe41 	bl	80002b8 <__aeabi_dsub>
 8014636:	ea4f 5328 	mov.w	r3, r8, asr #20
 801463a:	9305      	str	r3, [sp, #20]
 801463c:	9a05      	ldr	r2, [sp, #20]
 801463e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	2b10      	cmp	r3, #16
 8014646:	dc02      	bgt.n	801464e <__ieee754_rem_pio2+0x1be>
 8014648:	e9c4 0100 	strd	r0, r1, [r4]
 801464c:	e039      	b.n	80146c2 <__ieee754_rem_pio2+0x232>
 801464e:	a34c      	add	r3, pc, #304	; (adr r3, 8014780 <__ieee754_rem_pio2+0x2f0>)
 8014650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014658:	f7eb ffe6 	bl	8000628 <__aeabi_dmul>
 801465c:	4606      	mov	r6, r0
 801465e:	460f      	mov	r7, r1
 8014660:	4602      	mov	r2, r0
 8014662:	460b      	mov	r3, r1
 8014664:	4650      	mov	r0, sl
 8014666:	4659      	mov	r1, fp
 8014668:	f7eb fe26 	bl	80002b8 <__aeabi_dsub>
 801466c:	4602      	mov	r2, r0
 801466e:	460b      	mov	r3, r1
 8014670:	4680      	mov	r8, r0
 8014672:	4689      	mov	r9, r1
 8014674:	4650      	mov	r0, sl
 8014676:	4659      	mov	r1, fp
 8014678:	f7eb fe1e 	bl	80002b8 <__aeabi_dsub>
 801467c:	4632      	mov	r2, r6
 801467e:	463b      	mov	r3, r7
 8014680:	f7eb fe1a 	bl	80002b8 <__aeabi_dsub>
 8014684:	a340      	add	r3, pc, #256	; (adr r3, 8014788 <__ieee754_rem_pio2+0x2f8>)
 8014686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468a:	4606      	mov	r6, r0
 801468c:	460f      	mov	r7, r1
 801468e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014692:	f7eb ffc9 	bl	8000628 <__aeabi_dmul>
 8014696:	4632      	mov	r2, r6
 8014698:	463b      	mov	r3, r7
 801469a:	f7eb fe0d 	bl	80002b8 <__aeabi_dsub>
 801469e:	4602      	mov	r2, r0
 80146a0:	460b      	mov	r3, r1
 80146a2:	4606      	mov	r6, r0
 80146a4:	460f      	mov	r7, r1
 80146a6:	4640      	mov	r0, r8
 80146a8:	4649      	mov	r1, r9
 80146aa:	f7eb fe05 	bl	80002b8 <__aeabi_dsub>
 80146ae:	9a05      	ldr	r2, [sp, #20]
 80146b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146b4:	1ad3      	subs	r3, r2, r3
 80146b6:	2b31      	cmp	r3, #49	; 0x31
 80146b8:	dc20      	bgt.n	80146fc <__ieee754_rem_pio2+0x26c>
 80146ba:	e9c4 0100 	strd	r0, r1, [r4]
 80146be:	46c2      	mov	sl, r8
 80146c0:	46cb      	mov	fp, r9
 80146c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80146c6:	4650      	mov	r0, sl
 80146c8:	4642      	mov	r2, r8
 80146ca:	464b      	mov	r3, r9
 80146cc:	4659      	mov	r1, fp
 80146ce:	f7eb fdf3 	bl	80002b8 <__aeabi_dsub>
 80146d2:	463b      	mov	r3, r7
 80146d4:	4632      	mov	r2, r6
 80146d6:	f7eb fdef 	bl	80002b8 <__aeabi_dsub>
 80146da:	9b04      	ldr	r3, [sp, #16]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80146e2:	f6bf af11 	bge.w	8014508 <__ieee754_rem_pio2+0x78>
 80146e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80146ea:	6063      	str	r3, [r4, #4]
 80146ec:	f8c4 8000 	str.w	r8, [r4]
 80146f0:	60a0      	str	r0, [r4, #8]
 80146f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146f6:	60e3      	str	r3, [r4, #12]
 80146f8:	426d      	negs	r5, r5
 80146fa:	e705      	b.n	8014508 <__ieee754_rem_pio2+0x78>
 80146fc:	a326      	add	r3, pc, #152	; (adr r3, 8014798 <__ieee754_rem_pio2+0x308>)
 80146fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014706:	f7eb ff8f 	bl	8000628 <__aeabi_dmul>
 801470a:	4606      	mov	r6, r0
 801470c:	460f      	mov	r7, r1
 801470e:	4602      	mov	r2, r0
 8014710:	460b      	mov	r3, r1
 8014712:	4640      	mov	r0, r8
 8014714:	4649      	mov	r1, r9
 8014716:	f7eb fdcf 	bl	80002b8 <__aeabi_dsub>
 801471a:	4602      	mov	r2, r0
 801471c:	460b      	mov	r3, r1
 801471e:	4682      	mov	sl, r0
 8014720:	468b      	mov	fp, r1
 8014722:	4640      	mov	r0, r8
 8014724:	4649      	mov	r1, r9
 8014726:	f7eb fdc7 	bl	80002b8 <__aeabi_dsub>
 801472a:	4632      	mov	r2, r6
 801472c:	463b      	mov	r3, r7
 801472e:	f7eb fdc3 	bl	80002b8 <__aeabi_dsub>
 8014732:	a31b      	add	r3, pc, #108	; (adr r3, 80147a0 <__ieee754_rem_pio2+0x310>)
 8014734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014738:	4606      	mov	r6, r0
 801473a:	460f      	mov	r7, r1
 801473c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014740:	f7eb ff72 	bl	8000628 <__aeabi_dmul>
 8014744:	4632      	mov	r2, r6
 8014746:	463b      	mov	r3, r7
 8014748:	f7eb fdb6 	bl	80002b8 <__aeabi_dsub>
 801474c:	4606      	mov	r6, r0
 801474e:	460f      	mov	r7, r1
 8014750:	e764      	b.n	801461c <__ieee754_rem_pio2+0x18c>
 8014752:	4b1b      	ldr	r3, [pc, #108]	; (80147c0 <__ieee754_rem_pio2+0x330>)
 8014754:	4598      	cmp	r8, r3
 8014756:	dd35      	ble.n	80147c4 <__ieee754_rem_pio2+0x334>
 8014758:	ee10 2a10 	vmov	r2, s0
 801475c:	463b      	mov	r3, r7
 801475e:	4630      	mov	r0, r6
 8014760:	4639      	mov	r1, r7
 8014762:	f7eb fda9 	bl	80002b8 <__aeabi_dsub>
 8014766:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801476a:	e9c4 0100 	strd	r0, r1, [r4]
 801476e:	e6a1      	b.n	80144b4 <__ieee754_rem_pio2+0x24>
 8014770:	54400000 	.word	0x54400000
 8014774:	3ff921fb 	.word	0x3ff921fb
 8014778:	1a626331 	.word	0x1a626331
 801477c:	3dd0b461 	.word	0x3dd0b461
 8014780:	1a600000 	.word	0x1a600000
 8014784:	3dd0b461 	.word	0x3dd0b461
 8014788:	2e037073 	.word	0x2e037073
 801478c:	3ba3198a 	.word	0x3ba3198a
 8014790:	6dc9c883 	.word	0x6dc9c883
 8014794:	3fe45f30 	.word	0x3fe45f30
 8014798:	2e000000 	.word	0x2e000000
 801479c:	3ba3198a 	.word	0x3ba3198a
 80147a0:	252049c1 	.word	0x252049c1
 80147a4:	397b839a 	.word	0x397b839a
 80147a8:	3fe921fb 	.word	0x3fe921fb
 80147ac:	4002d97b 	.word	0x4002d97b
 80147b0:	3ff921fb 	.word	0x3ff921fb
 80147b4:	413921fb 	.word	0x413921fb
 80147b8:	3fe00000 	.word	0x3fe00000
 80147bc:	08019f5c 	.word	0x08019f5c
 80147c0:	7fefffff 	.word	0x7fefffff
 80147c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80147c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80147cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80147d0:	4630      	mov	r0, r6
 80147d2:	460f      	mov	r7, r1
 80147d4:	f7ec f9d8 	bl	8000b88 <__aeabi_d2iz>
 80147d8:	f7eb febc 	bl	8000554 <__aeabi_i2d>
 80147dc:	4602      	mov	r2, r0
 80147de:	460b      	mov	r3, r1
 80147e0:	4630      	mov	r0, r6
 80147e2:	4639      	mov	r1, r7
 80147e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80147e8:	f7eb fd66 	bl	80002b8 <__aeabi_dsub>
 80147ec:	2200      	movs	r2, #0
 80147ee:	4b1f      	ldr	r3, [pc, #124]	; (801486c <__ieee754_rem_pio2+0x3dc>)
 80147f0:	f7eb ff1a 	bl	8000628 <__aeabi_dmul>
 80147f4:	460f      	mov	r7, r1
 80147f6:	4606      	mov	r6, r0
 80147f8:	f7ec f9c6 	bl	8000b88 <__aeabi_d2iz>
 80147fc:	f7eb feaa 	bl	8000554 <__aeabi_i2d>
 8014800:	4602      	mov	r2, r0
 8014802:	460b      	mov	r3, r1
 8014804:	4630      	mov	r0, r6
 8014806:	4639      	mov	r1, r7
 8014808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801480c:	f7eb fd54 	bl	80002b8 <__aeabi_dsub>
 8014810:	2200      	movs	r2, #0
 8014812:	4b16      	ldr	r3, [pc, #88]	; (801486c <__ieee754_rem_pio2+0x3dc>)
 8014814:	f7eb ff08 	bl	8000628 <__aeabi_dmul>
 8014818:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801481c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014820:	f04f 0803 	mov.w	r8, #3
 8014824:	2600      	movs	r6, #0
 8014826:	2700      	movs	r7, #0
 8014828:	4632      	mov	r2, r6
 801482a:	463b      	mov	r3, r7
 801482c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014830:	f108 3aff 	add.w	sl, r8, #4294967295
 8014834:	f7ec f960 	bl	8000af8 <__aeabi_dcmpeq>
 8014838:	b9b0      	cbnz	r0, 8014868 <__ieee754_rem_pio2+0x3d8>
 801483a:	4b0d      	ldr	r3, [pc, #52]	; (8014870 <__ieee754_rem_pio2+0x3e0>)
 801483c:	9301      	str	r3, [sp, #4]
 801483e:	2302      	movs	r3, #2
 8014840:	9300      	str	r3, [sp, #0]
 8014842:	462a      	mov	r2, r5
 8014844:	4643      	mov	r3, r8
 8014846:	4621      	mov	r1, r4
 8014848:	a806      	add	r0, sp, #24
 801484a:	f000 f8dd 	bl	8014a08 <__kernel_rem_pio2>
 801484e:	9b04      	ldr	r3, [sp, #16]
 8014850:	2b00      	cmp	r3, #0
 8014852:	4605      	mov	r5, r0
 8014854:	f6bf ae58 	bge.w	8014508 <__ieee754_rem_pio2+0x78>
 8014858:	6863      	ldr	r3, [r4, #4]
 801485a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801485e:	6063      	str	r3, [r4, #4]
 8014860:	68e3      	ldr	r3, [r4, #12]
 8014862:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014866:	e746      	b.n	80146f6 <__ieee754_rem_pio2+0x266>
 8014868:	46d0      	mov	r8, sl
 801486a:	e7dd      	b.n	8014828 <__ieee754_rem_pio2+0x398>
 801486c:	41700000 	.word	0x41700000
 8014870:	08019fdc 	.word	0x08019fdc
 8014874:	00000000 	.word	0x00000000

08014878 <__kernel_cos>:
 8014878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801487c:	ec59 8b10 	vmov	r8, r9, d0
 8014880:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014884:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014888:	ed2d 8b02 	vpush	{d8}
 801488c:	eeb0 8a41 	vmov.f32	s16, s2
 8014890:	eef0 8a61 	vmov.f32	s17, s3
 8014894:	da07      	bge.n	80148a6 <__kernel_cos+0x2e>
 8014896:	ee10 0a10 	vmov	r0, s0
 801489a:	4649      	mov	r1, r9
 801489c:	f7ec f974 	bl	8000b88 <__aeabi_d2iz>
 80148a0:	2800      	cmp	r0, #0
 80148a2:	f000 8089 	beq.w	80149b8 <__kernel_cos+0x140>
 80148a6:	4642      	mov	r2, r8
 80148a8:	464b      	mov	r3, r9
 80148aa:	4640      	mov	r0, r8
 80148ac:	4649      	mov	r1, r9
 80148ae:	f7eb febb 	bl	8000628 <__aeabi_dmul>
 80148b2:	2200      	movs	r2, #0
 80148b4:	4b4e      	ldr	r3, [pc, #312]	; (80149f0 <__kernel_cos+0x178>)
 80148b6:	4604      	mov	r4, r0
 80148b8:	460d      	mov	r5, r1
 80148ba:	f7eb feb5 	bl	8000628 <__aeabi_dmul>
 80148be:	a340      	add	r3, pc, #256	; (adr r3, 80149c0 <__kernel_cos+0x148>)
 80148c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c4:	4682      	mov	sl, r0
 80148c6:	468b      	mov	fp, r1
 80148c8:	4620      	mov	r0, r4
 80148ca:	4629      	mov	r1, r5
 80148cc:	f7eb feac 	bl	8000628 <__aeabi_dmul>
 80148d0:	a33d      	add	r3, pc, #244	; (adr r3, 80149c8 <__kernel_cos+0x150>)
 80148d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d6:	f7eb fcf1 	bl	80002bc <__adddf3>
 80148da:	4622      	mov	r2, r4
 80148dc:	462b      	mov	r3, r5
 80148de:	f7eb fea3 	bl	8000628 <__aeabi_dmul>
 80148e2:	a33b      	add	r3, pc, #236	; (adr r3, 80149d0 <__kernel_cos+0x158>)
 80148e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e8:	f7eb fce6 	bl	80002b8 <__aeabi_dsub>
 80148ec:	4622      	mov	r2, r4
 80148ee:	462b      	mov	r3, r5
 80148f0:	f7eb fe9a 	bl	8000628 <__aeabi_dmul>
 80148f4:	a338      	add	r3, pc, #224	; (adr r3, 80149d8 <__kernel_cos+0x160>)
 80148f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fa:	f7eb fcdf 	bl	80002bc <__adddf3>
 80148fe:	4622      	mov	r2, r4
 8014900:	462b      	mov	r3, r5
 8014902:	f7eb fe91 	bl	8000628 <__aeabi_dmul>
 8014906:	a336      	add	r3, pc, #216	; (adr r3, 80149e0 <__kernel_cos+0x168>)
 8014908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490c:	f7eb fcd4 	bl	80002b8 <__aeabi_dsub>
 8014910:	4622      	mov	r2, r4
 8014912:	462b      	mov	r3, r5
 8014914:	f7eb fe88 	bl	8000628 <__aeabi_dmul>
 8014918:	a333      	add	r3, pc, #204	; (adr r3, 80149e8 <__kernel_cos+0x170>)
 801491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801491e:	f7eb fccd 	bl	80002bc <__adddf3>
 8014922:	4622      	mov	r2, r4
 8014924:	462b      	mov	r3, r5
 8014926:	f7eb fe7f 	bl	8000628 <__aeabi_dmul>
 801492a:	4622      	mov	r2, r4
 801492c:	462b      	mov	r3, r5
 801492e:	f7eb fe7b 	bl	8000628 <__aeabi_dmul>
 8014932:	ec53 2b18 	vmov	r2, r3, d8
 8014936:	4604      	mov	r4, r0
 8014938:	460d      	mov	r5, r1
 801493a:	4640      	mov	r0, r8
 801493c:	4649      	mov	r1, r9
 801493e:	f7eb fe73 	bl	8000628 <__aeabi_dmul>
 8014942:	460b      	mov	r3, r1
 8014944:	4602      	mov	r2, r0
 8014946:	4629      	mov	r1, r5
 8014948:	4620      	mov	r0, r4
 801494a:	f7eb fcb5 	bl	80002b8 <__aeabi_dsub>
 801494e:	4b29      	ldr	r3, [pc, #164]	; (80149f4 <__kernel_cos+0x17c>)
 8014950:	429e      	cmp	r6, r3
 8014952:	4680      	mov	r8, r0
 8014954:	4689      	mov	r9, r1
 8014956:	dc11      	bgt.n	801497c <__kernel_cos+0x104>
 8014958:	4602      	mov	r2, r0
 801495a:	460b      	mov	r3, r1
 801495c:	4650      	mov	r0, sl
 801495e:	4659      	mov	r1, fp
 8014960:	f7eb fcaa 	bl	80002b8 <__aeabi_dsub>
 8014964:	460b      	mov	r3, r1
 8014966:	4924      	ldr	r1, [pc, #144]	; (80149f8 <__kernel_cos+0x180>)
 8014968:	4602      	mov	r2, r0
 801496a:	2000      	movs	r0, #0
 801496c:	f7eb fca4 	bl	80002b8 <__aeabi_dsub>
 8014970:	ecbd 8b02 	vpop	{d8}
 8014974:	ec41 0b10 	vmov	d0, r0, r1
 8014978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801497c:	4b1f      	ldr	r3, [pc, #124]	; (80149fc <__kernel_cos+0x184>)
 801497e:	491e      	ldr	r1, [pc, #120]	; (80149f8 <__kernel_cos+0x180>)
 8014980:	429e      	cmp	r6, r3
 8014982:	bfcc      	ite	gt
 8014984:	4d1e      	ldrgt	r5, [pc, #120]	; (8014a00 <__kernel_cos+0x188>)
 8014986:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801498a:	2400      	movs	r4, #0
 801498c:	4622      	mov	r2, r4
 801498e:	462b      	mov	r3, r5
 8014990:	2000      	movs	r0, #0
 8014992:	f7eb fc91 	bl	80002b8 <__aeabi_dsub>
 8014996:	4622      	mov	r2, r4
 8014998:	4606      	mov	r6, r0
 801499a:	460f      	mov	r7, r1
 801499c:	462b      	mov	r3, r5
 801499e:	4650      	mov	r0, sl
 80149a0:	4659      	mov	r1, fp
 80149a2:	f7eb fc89 	bl	80002b8 <__aeabi_dsub>
 80149a6:	4642      	mov	r2, r8
 80149a8:	464b      	mov	r3, r9
 80149aa:	f7eb fc85 	bl	80002b8 <__aeabi_dsub>
 80149ae:	4602      	mov	r2, r0
 80149b0:	460b      	mov	r3, r1
 80149b2:	4630      	mov	r0, r6
 80149b4:	4639      	mov	r1, r7
 80149b6:	e7d9      	b.n	801496c <__kernel_cos+0xf4>
 80149b8:	2000      	movs	r0, #0
 80149ba:	490f      	ldr	r1, [pc, #60]	; (80149f8 <__kernel_cos+0x180>)
 80149bc:	e7d8      	b.n	8014970 <__kernel_cos+0xf8>
 80149be:	bf00      	nop
 80149c0:	be8838d4 	.word	0xbe8838d4
 80149c4:	bda8fae9 	.word	0xbda8fae9
 80149c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80149cc:	3e21ee9e 	.word	0x3e21ee9e
 80149d0:	809c52ad 	.word	0x809c52ad
 80149d4:	3e927e4f 	.word	0x3e927e4f
 80149d8:	19cb1590 	.word	0x19cb1590
 80149dc:	3efa01a0 	.word	0x3efa01a0
 80149e0:	16c15177 	.word	0x16c15177
 80149e4:	3f56c16c 	.word	0x3f56c16c
 80149e8:	5555554c 	.word	0x5555554c
 80149ec:	3fa55555 	.word	0x3fa55555
 80149f0:	3fe00000 	.word	0x3fe00000
 80149f4:	3fd33332 	.word	0x3fd33332
 80149f8:	3ff00000 	.word	0x3ff00000
 80149fc:	3fe90000 	.word	0x3fe90000
 8014a00:	3fd20000 	.word	0x3fd20000
 8014a04:	00000000 	.word	0x00000000

08014a08 <__kernel_rem_pio2>:
 8014a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a0c:	ed2d 8b02 	vpush	{d8}
 8014a10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014a14:	1ed4      	subs	r4, r2, #3
 8014a16:	9308      	str	r3, [sp, #32]
 8014a18:	9101      	str	r1, [sp, #4]
 8014a1a:	4bc5      	ldr	r3, [pc, #788]	; (8014d30 <__kernel_rem_pio2+0x328>)
 8014a1c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014a1e:	9009      	str	r0, [sp, #36]	; 0x24
 8014a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014a24:	9304      	str	r3, [sp, #16]
 8014a26:	9b08      	ldr	r3, [sp, #32]
 8014a28:	3b01      	subs	r3, #1
 8014a2a:	9307      	str	r3, [sp, #28]
 8014a2c:	2318      	movs	r3, #24
 8014a2e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014a32:	f06f 0317 	mvn.w	r3, #23
 8014a36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014a3a:	fb04 3303 	mla	r3, r4, r3, r3
 8014a3e:	eb03 0a02 	add.w	sl, r3, r2
 8014a42:	9b04      	ldr	r3, [sp, #16]
 8014a44:	9a07      	ldr	r2, [sp, #28]
 8014a46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014d20 <__kernel_rem_pio2+0x318>
 8014a4a:	eb03 0802 	add.w	r8, r3, r2
 8014a4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014a50:	1aa7      	subs	r7, r4, r2
 8014a52:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014a56:	ae22      	add	r6, sp, #136	; 0x88
 8014a58:	2500      	movs	r5, #0
 8014a5a:	4545      	cmp	r5, r8
 8014a5c:	dd13      	ble.n	8014a86 <__kernel_rem_pio2+0x7e>
 8014a5e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014d20 <__kernel_rem_pio2+0x318>
 8014a62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014a66:	2600      	movs	r6, #0
 8014a68:	9b04      	ldr	r3, [sp, #16]
 8014a6a:	429e      	cmp	r6, r3
 8014a6c:	dc32      	bgt.n	8014ad4 <__kernel_rem_pio2+0xcc>
 8014a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a70:	9302      	str	r3, [sp, #8]
 8014a72:	9b08      	ldr	r3, [sp, #32]
 8014a74:	199d      	adds	r5, r3, r6
 8014a76:	ab22      	add	r3, sp, #136	; 0x88
 8014a78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014a7c:	9306      	str	r3, [sp, #24]
 8014a7e:	ec59 8b18 	vmov	r8, r9, d8
 8014a82:	2700      	movs	r7, #0
 8014a84:	e01f      	b.n	8014ac6 <__kernel_rem_pio2+0xbe>
 8014a86:	42ef      	cmn	r7, r5
 8014a88:	d407      	bmi.n	8014a9a <__kernel_rem_pio2+0x92>
 8014a8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014a8e:	f7eb fd61 	bl	8000554 <__aeabi_i2d>
 8014a92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014a96:	3501      	adds	r5, #1
 8014a98:	e7df      	b.n	8014a5a <__kernel_rem_pio2+0x52>
 8014a9a:	ec51 0b18 	vmov	r0, r1, d8
 8014a9e:	e7f8      	b.n	8014a92 <__kernel_rem_pio2+0x8a>
 8014aa0:	9906      	ldr	r1, [sp, #24]
 8014aa2:	9d02      	ldr	r5, [sp, #8]
 8014aa4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014aa8:	9106      	str	r1, [sp, #24]
 8014aaa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014aae:	9502      	str	r5, [sp, #8]
 8014ab0:	f7eb fdba 	bl	8000628 <__aeabi_dmul>
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	460b      	mov	r3, r1
 8014ab8:	4640      	mov	r0, r8
 8014aba:	4649      	mov	r1, r9
 8014abc:	f7eb fbfe 	bl	80002bc <__adddf3>
 8014ac0:	3701      	adds	r7, #1
 8014ac2:	4680      	mov	r8, r0
 8014ac4:	4689      	mov	r9, r1
 8014ac6:	9b07      	ldr	r3, [sp, #28]
 8014ac8:	429f      	cmp	r7, r3
 8014aca:	dde9      	ble.n	8014aa0 <__kernel_rem_pio2+0x98>
 8014acc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014ad0:	3601      	adds	r6, #1
 8014ad2:	e7c9      	b.n	8014a68 <__kernel_rem_pio2+0x60>
 8014ad4:	9b04      	ldr	r3, [sp, #16]
 8014ad6:	aa0e      	add	r2, sp, #56	; 0x38
 8014ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014adc:	930c      	str	r3, [sp, #48]	; 0x30
 8014ade:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ae0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014ae4:	9c04      	ldr	r4, [sp, #16]
 8014ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ae8:	ab9a      	add	r3, sp, #616	; 0x268
 8014aea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014aee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014af2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014af6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014afa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014afe:	ab9a      	add	r3, sp, #616	; 0x268
 8014b00:	445b      	add	r3, fp
 8014b02:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014b06:	2500      	movs	r5, #0
 8014b08:	1b63      	subs	r3, r4, r5
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	dc78      	bgt.n	8014c00 <__kernel_rem_pio2+0x1f8>
 8014b0e:	4650      	mov	r0, sl
 8014b10:	ec49 8b10 	vmov	d0, r8, r9
 8014b14:	f000 fc00 	bl	8015318 <scalbn>
 8014b18:	ec57 6b10 	vmov	r6, r7, d0
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014b22:	ee10 0a10 	vmov	r0, s0
 8014b26:	4639      	mov	r1, r7
 8014b28:	f7eb fd7e 	bl	8000628 <__aeabi_dmul>
 8014b2c:	ec41 0b10 	vmov	d0, r0, r1
 8014b30:	f000 fb6e 	bl	8015210 <floor>
 8014b34:	2200      	movs	r2, #0
 8014b36:	ec51 0b10 	vmov	r0, r1, d0
 8014b3a:	4b7e      	ldr	r3, [pc, #504]	; (8014d34 <__kernel_rem_pio2+0x32c>)
 8014b3c:	f7eb fd74 	bl	8000628 <__aeabi_dmul>
 8014b40:	4602      	mov	r2, r0
 8014b42:	460b      	mov	r3, r1
 8014b44:	4630      	mov	r0, r6
 8014b46:	4639      	mov	r1, r7
 8014b48:	f7eb fbb6 	bl	80002b8 <__aeabi_dsub>
 8014b4c:	460f      	mov	r7, r1
 8014b4e:	4606      	mov	r6, r0
 8014b50:	f7ec f81a 	bl	8000b88 <__aeabi_d2iz>
 8014b54:	9006      	str	r0, [sp, #24]
 8014b56:	f7eb fcfd 	bl	8000554 <__aeabi_i2d>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	4630      	mov	r0, r6
 8014b60:	4639      	mov	r1, r7
 8014b62:	f7eb fba9 	bl	80002b8 <__aeabi_dsub>
 8014b66:	f1ba 0f00 	cmp.w	sl, #0
 8014b6a:	4606      	mov	r6, r0
 8014b6c:	460f      	mov	r7, r1
 8014b6e:	dd6c      	ble.n	8014c4a <__kernel_rem_pio2+0x242>
 8014b70:	1e62      	subs	r2, r4, #1
 8014b72:	ab0e      	add	r3, sp, #56	; 0x38
 8014b74:	f1ca 0118 	rsb	r1, sl, #24
 8014b78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014b7c:	9d06      	ldr	r5, [sp, #24]
 8014b7e:	fa40 f301 	asr.w	r3, r0, r1
 8014b82:	441d      	add	r5, r3
 8014b84:	408b      	lsls	r3, r1
 8014b86:	1ac0      	subs	r0, r0, r3
 8014b88:	ab0e      	add	r3, sp, #56	; 0x38
 8014b8a:	9506      	str	r5, [sp, #24]
 8014b8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014b90:	f1ca 0317 	rsb	r3, sl, #23
 8014b94:	fa40 f303 	asr.w	r3, r0, r3
 8014b98:	9302      	str	r3, [sp, #8]
 8014b9a:	9b02      	ldr	r3, [sp, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	dd62      	ble.n	8014c66 <__kernel_rem_pio2+0x25e>
 8014ba0:	9b06      	ldr	r3, [sp, #24]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	9306      	str	r3, [sp, #24]
 8014ba8:	4615      	mov	r5, r2
 8014baa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014bae:	4294      	cmp	r4, r2
 8014bb0:	f300 8095 	bgt.w	8014cde <__kernel_rem_pio2+0x2d6>
 8014bb4:	f1ba 0f00 	cmp.w	sl, #0
 8014bb8:	dd07      	ble.n	8014bca <__kernel_rem_pio2+0x1c2>
 8014bba:	f1ba 0f01 	cmp.w	sl, #1
 8014bbe:	f000 80a2 	beq.w	8014d06 <__kernel_rem_pio2+0x2fe>
 8014bc2:	f1ba 0f02 	cmp.w	sl, #2
 8014bc6:	f000 80c1 	beq.w	8014d4c <__kernel_rem_pio2+0x344>
 8014bca:	9b02      	ldr	r3, [sp, #8]
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d14a      	bne.n	8014c66 <__kernel_rem_pio2+0x25e>
 8014bd0:	4632      	mov	r2, r6
 8014bd2:	463b      	mov	r3, r7
 8014bd4:	2000      	movs	r0, #0
 8014bd6:	4958      	ldr	r1, [pc, #352]	; (8014d38 <__kernel_rem_pio2+0x330>)
 8014bd8:	f7eb fb6e 	bl	80002b8 <__aeabi_dsub>
 8014bdc:	4606      	mov	r6, r0
 8014bde:	460f      	mov	r7, r1
 8014be0:	2d00      	cmp	r5, #0
 8014be2:	d040      	beq.n	8014c66 <__kernel_rem_pio2+0x25e>
 8014be4:	4650      	mov	r0, sl
 8014be6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014d28 <__kernel_rem_pio2+0x320>
 8014bea:	f000 fb95 	bl	8015318 <scalbn>
 8014bee:	4630      	mov	r0, r6
 8014bf0:	4639      	mov	r1, r7
 8014bf2:	ec53 2b10 	vmov	r2, r3, d0
 8014bf6:	f7eb fb5f 	bl	80002b8 <__aeabi_dsub>
 8014bfa:	4606      	mov	r6, r0
 8014bfc:	460f      	mov	r7, r1
 8014bfe:	e032      	b.n	8014c66 <__kernel_rem_pio2+0x25e>
 8014c00:	2200      	movs	r2, #0
 8014c02:	4b4e      	ldr	r3, [pc, #312]	; (8014d3c <__kernel_rem_pio2+0x334>)
 8014c04:	4640      	mov	r0, r8
 8014c06:	4649      	mov	r1, r9
 8014c08:	f7eb fd0e 	bl	8000628 <__aeabi_dmul>
 8014c0c:	f7eb ffbc 	bl	8000b88 <__aeabi_d2iz>
 8014c10:	f7eb fca0 	bl	8000554 <__aeabi_i2d>
 8014c14:	2200      	movs	r2, #0
 8014c16:	4b4a      	ldr	r3, [pc, #296]	; (8014d40 <__kernel_rem_pio2+0x338>)
 8014c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c1c:	f7eb fd04 	bl	8000628 <__aeabi_dmul>
 8014c20:	4602      	mov	r2, r0
 8014c22:	460b      	mov	r3, r1
 8014c24:	4640      	mov	r0, r8
 8014c26:	4649      	mov	r1, r9
 8014c28:	f7eb fb46 	bl	80002b8 <__aeabi_dsub>
 8014c2c:	f7eb ffac 	bl	8000b88 <__aeabi_d2iz>
 8014c30:	ab0e      	add	r3, sp, #56	; 0x38
 8014c32:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014c36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c3e:	f7eb fb3d 	bl	80002bc <__adddf3>
 8014c42:	3501      	adds	r5, #1
 8014c44:	4680      	mov	r8, r0
 8014c46:	4689      	mov	r9, r1
 8014c48:	e75e      	b.n	8014b08 <__kernel_rem_pio2+0x100>
 8014c4a:	d105      	bne.n	8014c58 <__kernel_rem_pio2+0x250>
 8014c4c:	1e63      	subs	r3, r4, #1
 8014c4e:	aa0e      	add	r2, sp, #56	; 0x38
 8014c50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014c54:	15c3      	asrs	r3, r0, #23
 8014c56:	e79f      	b.n	8014b98 <__kernel_rem_pio2+0x190>
 8014c58:	2200      	movs	r2, #0
 8014c5a:	4b3a      	ldr	r3, [pc, #232]	; (8014d44 <__kernel_rem_pio2+0x33c>)
 8014c5c:	f7eb ff6a 	bl	8000b34 <__aeabi_dcmpge>
 8014c60:	2800      	cmp	r0, #0
 8014c62:	d139      	bne.n	8014cd8 <__kernel_rem_pio2+0x2d0>
 8014c64:	9002      	str	r0, [sp, #8]
 8014c66:	2200      	movs	r2, #0
 8014c68:	2300      	movs	r3, #0
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	4639      	mov	r1, r7
 8014c6e:	f7eb ff43 	bl	8000af8 <__aeabi_dcmpeq>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	f000 80c7 	beq.w	8014e06 <__kernel_rem_pio2+0x3fe>
 8014c78:	1e65      	subs	r5, r4, #1
 8014c7a:	462b      	mov	r3, r5
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	9904      	ldr	r1, [sp, #16]
 8014c80:	428b      	cmp	r3, r1
 8014c82:	da6a      	bge.n	8014d5a <__kernel_rem_pio2+0x352>
 8014c84:	2a00      	cmp	r2, #0
 8014c86:	f000 8088 	beq.w	8014d9a <__kernel_rem_pio2+0x392>
 8014c8a:	ab0e      	add	r3, sp, #56	; 0x38
 8014c8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014c90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	f000 80b4 	beq.w	8014e02 <__kernel_rem_pio2+0x3fa>
 8014c9a:	4650      	mov	r0, sl
 8014c9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014d28 <__kernel_rem_pio2+0x320>
 8014ca0:	f000 fb3a 	bl	8015318 <scalbn>
 8014ca4:	00ec      	lsls	r4, r5, #3
 8014ca6:	ab72      	add	r3, sp, #456	; 0x1c8
 8014ca8:	191e      	adds	r6, r3, r4
 8014caa:	ec59 8b10 	vmov	r8, r9, d0
 8014cae:	f106 0a08 	add.w	sl, r6, #8
 8014cb2:	462f      	mov	r7, r5
 8014cb4:	2f00      	cmp	r7, #0
 8014cb6:	f280 80df 	bge.w	8014e78 <__kernel_rem_pio2+0x470>
 8014cba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014d20 <__kernel_rem_pio2+0x318>
 8014cbe:	f04f 0a00 	mov.w	sl, #0
 8014cc2:	eba5 030a 	sub.w	r3, r5, sl
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	f2c0 810a 	blt.w	8014ee0 <__kernel_rem_pio2+0x4d8>
 8014ccc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014d48 <__kernel_rem_pio2+0x340>
 8014cd0:	ec59 8b18 	vmov	r8, r9, d8
 8014cd4:	2700      	movs	r7, #0
 8014cd6:	e0f5      	b.n	8014ec4 <__kernel_rem_pio2+0x4bc>
 8014cd8:	2302      	movs	r3, #2
 8014cda:	9302      	str	r3, [sp, #8]
 8014cdc:	e760      	b.n	8014ba0 <__kernel_rem_pio2+0x198>
 8014cde:	ab0e      	add	r3, sp, #56	; 0x38
 8014ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce4:	b94d      	cbnz	r5, 8014cfa <__kernel_rem_pio2+0x2f2>
 8014ce6:	b12b      	cbz	r3, 8014cf4 <__kernel_rem_pio2+0x2ec>
 8014ce8:	a80e      	add	r0, sp, #56	; 0x38
 8014cea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014cee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	3201      	adds	r2, #1
 8014cf6:	461d      	mov	r5, r3
 8014cf8:	e759      	b.n	8014bae <__kernel_rem_pio2+0x1a6>
 8014cfa:	a80e      	add	r0, sp, #56	; 0x38
 8014cfc:	1acb      	subs	r3, r1, r3
 8014cfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014d02:	462b      	mov	r3, r5
 8014d04:	e7f6      	b.n	8014cf4 <__kernel_rem_pio2+0x2ec>
 8014d06:	1e62      	subs	r2, r4, #1
 8014d08:	ab0e      	add	r3, sp, #56	; 0x38
 8014d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014d12:	a90e      	add	r1, sp, #56	; 0x38
 8014d14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014d18:	e757      	b.n	8014bca <__kernel_rem_pio2+0x1c2>
 8014d1a:	bf00      	nop
 8014d1c:	f3af 8000 	nop.w
	...
 8014d2c:	3ff00000 	.word	0x3ff00000
 8014d30:	0801a128 	.word	0x0801a128
 8014d34:	40200000 	.word	0x40200000
 8014d38:	3ff00000 	.word	0x3ff00000
 8014d3c:	3e700000 	.word	0x3e700000
 8014d40:	41700000 	.word	0x41700000
 8014d44:	3fe00000 	.word	0x3fe00000
 8014d48:	0801a0e8 	.word	0x0801a0e8
 8014d4c:	1e62      	subs	r2, r4, #1
 8014d4e:	ab0e      	add	r3, sp, #56	; 0x38
 8014d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014d58:	e7db      	b.n	8014d12 <__kernel_rem_pio2+0x30a>
 8014d5a:	a90e      	add	r1, sp, #56	; 0x38
 8014d5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014d60:	3b01      	subs	r3, #1
 8014d62:	430a      	orrs	r2, r1
 8014d64:	e78b      	b.n	8014c7e <__kernel_rem_pio2+0x276>
 8014d66:	3301      	adds	r3, #1
 8014d68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014d6c:	2900      	cmp	r1, #0
 8014d6e:	d0fa      	beq.n	8014d66 <__kernel_rem_pio2+0x35e>
 8014d70:	9a08      	ldr	r2, [sp, #32]
 8014d72:	4422      	add	r2, r4
 8014d74:	00d2      	lsls	r2, r2, #3
 8014d76:	a922      	add	r1, sp, #136	; 0x88
 8014d78:	18e3      	adds	r3, r4, r3
 8014d7a:	9206      	str	r2, [sp, #24]
 8014d7c:	440a      	add	r2, r1
 8014d7e:	9302      	str	r3, [sp, #8]
 8014d80:	f10b 0108 	add.w	r1, fp, #8
 8014d84:	f102 0308 	add.w	r3, r2, #8
 8014d88:	1c66      	adds	r6, r4, #1
 8014d8a:	910a      	str	r1, [sp, #40]	; 0x28
 8014d8c:	2500      	movs	r5, #0
 8014d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8014d90:	9b02      	ldr	r3, [sp, #8]
 8014d92:	42b3      	cmp	r3, r6
 8014d94:	da04      	bge.n	8014da0 <__kernel_rem_pio2+0x398>
 8014d96:	461c      	mov	r4, r3
 8014d98:	e6a6      	b.n	8014ae8 <__kernel_rem_pio2+0xe0>
 8014d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	e7e3      	b.n	8014d68 <__kernel_rem_pio2+0x360>
 8014da0:	9b06      	ldr	r3, [sp, #24]
 8014da2:	18ef      	adds	r7, r5, r3
 8014da4:	ab22      	add	r3, sp, #136	; 0x88
 8014da6:	441f      	add	r7, r3
 8014da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014daa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014dae:	f7eb fbd1 	bl	8000554 <__aeabi_i2d>
 8014db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014db4:	461c      	mov	r4, r3
 8014db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014db8:	e9c7 0100 	strd	r0, r1, [r7]
 8014dbc:	eb03 0b05 	add.w	fp, r3, r5
 8014dc0:	2700      	movs	r7, #0
 8014dc2:	f04f 0800 	mov.w	r8, #0
 8014dc6:	f04f 0900 	mov.w	r9, #0
 8014dca:	9b07      	ldr	r3, [sp, #28]
 8014dcc:	429f      	cmp	r7, r3
 8014dce:	dd08      	ble.n	8014de2 <__kernel_rem_pio2+0x3da>
 8014dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dd2:	aa72      	add	r2, sp, #456	; 0x1c8
 8014dd4:	18eb      	adds	r3, r5, r3
 8014dd6:	4413      	add	r3, r2
 8014dd8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014ddc:	3601      	adds	r6, #1
 8014dde:	3508      	adds	r5, #8
 8014de0:	e7d6      	b.n	8014d90 <__kernel_rem_pio2+0x388>
 8014de2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014de6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014dea:	f7eb fc1d 	bl	8000628 <__aeabi_dmul>
 8014dee:	4602      	mov	r2, r0
 8014df0:	460b      	mov	r3, r1
 8014df2:	4640      	mov	r0, r8
 8014df4:	4649      	mov	r1, r9
 8014df6:	f7eb fa61 	bl	80002bc <__adddf3>
 8014dfa:	3701      	adds	r7, #1
 8014dfc:	4680      	mov	r8, r0
 8014dfe:	4689      	mov	r9, r1
 8014e00:	e7e3      	b.n	8014dca <__kernel_rem_pio2+0x3c2>
 8014e02:	3d01      	subs	r5, #1
 8014e04:	e741      	b.n	8014c8a <__kernel_rem_pio2+0x282>
 8014e06:	f1ca 0000 	rsb	r0, sl, #0
 8014e0a:	ec47 6b10 	vmov	d0, r6, r7
 8014e0e:	f000 fa83 	bl	8015318 <scalbn>
 8014e12:	ec57 6b10 	vmov	r6, r7, d0
 8014e16:	2200      	movs	r2, #0
 8014e18:	4b99      	ldr	r3, [pc, #612]	; (8015080 <__kernel_rem_pio2+0x678>)
 8014e1a:	ee10 0a10 	vmov	r0, s0
 8014e1e:	4639      	mov	r1, r7
 8014e20:	f7eb fe88 	bl	8000b34 <__aeabi_dcmpge>
 8014e24:	b1f8      	cbz	r0, 8014e66 <__kernel_rem_pio2+0x45e>
 8014e26:	2200      	movs	r2, #0
 8014e28:	4b96      	ldr	r3, [pc, #600]	; (8015084 <__kernel_rem_pio2+0x67c>)
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	4639      	mov	r1, r7
 8014e2e:	f7eb fbfb 	bl	8000628 <__aeabi_dmul>
 8014e32:	f7eb fea9 	bl	8000b88 <__aeabi_d2iz>
 8014e36:	4680      	mov	r8, r0
 8014e38:	f7eb fb8c 	bl	8000554 <__aeabi_i2d>
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	4b90      	ldr	r3, [pc, #576]	; (8015080 <__kernel_rem_pio2+0x678>)
 8014e40:	f7eb fbf2 	bl	8000628 <__aeabi_dmul>
 8014e44:	460b      	mov	r3, r1
 8014e46:	4602      	mov	r2, r0
 8014e48:	4639      	mov	r1, r7
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	f7eb fa34 	bl	80002b8 <__aeabi_dsub>
 8014e50:	f7eb fe9a 	bl	8000b88 <__aeabi_d2iz>
 8014e54:	1c65      	adds	r5, r4, #1
 8014e56:	ab0e      	add	r3, sp, #56	; 0x38
 8014e58:	f10a 0a18 	add.w	sl, sl, #24
 8014e5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014e60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014e64:	e719      	b.n	8014c9a <__kernel_rem_pio2+0x292>
 8014e66:	4630      	mov	r0, r6
 8014e68:	4639      	mov	r1, r7
 8014e6a:	f7eb fe8d 	bl	8000b88 <__aeabi_d2iz>
 8014e6e:	ab0e      	add	r3, sp, #56	; 0x38
 8014e70:	4625      	mov	r5, r4
 8014e72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014e76:	e710      	b.n	8014c9a <__kernel_rem_pio2+0x292>
 8014e78:	ab0e      	add	r3, sp, #56	; 0x38
 8014e7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014e7e:	f7eb fb69 	bl	8000554 <__aeabi_i2d>
 8014e82:	4642      	mov	r2, r8
 8014e84:	464b      	mov	r3, r9
 8014e86:	f7eb fbcf 	bl	8000628 <__aeabi_dmul>
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014e90:	4b7c      	ldr	r3, [pc, #496]	; (8015084 <__kernel_rem_pio2+0x67c>)
 8014e92:	4640      	mov	r0, r8
 8014e94:	4649      	mov	r1, r9
 8014e96:	f7eb fbc7 	bl	8000628 <__aeabi_dmul>
 8014e9a:	3f01      	subs	r7, #1
 8014e9c:	4680      	mov	r8, r0
 8014e9e:	4689      	mov	r9, r1
 8014ea0:	e708      	b.n	8014cb4 <__kernel_rem_pio2+0x2ac>
 8014ea2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eaa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014eae:	f7eb fbbb 	bl	8000628 <__aeabi_dmul>
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	4640      	mov	r0, r8
 8014eb8:	4649      	mov	r1, r9
 8014eba:	f7eb f9ff 	bl	80002bc <__adddf3>
 8014ebe:	3701      	adds	r7, #1
 8014ec0:	4680      	mov	r8, r0
 8014ec2:	4689      	mov	r9, r1
 8014ec4:	9b04      	ldr	r3, [sp, #16]
 8014ec6:	429f      	cmp	r7, r3
 8014ec8:	dc01      	bgt.n	8014ece <__kernel_rem_pio2+0x4c6>
 8014eca:	45ba      	cmp	sl, r7
 8014ecc:	dae9      	bge.n	8014ea2 <__kernel_rem_pio2+0x49a>
 8014ece:	ab4a      	add	r3, sp, #296	; 0x128
 8014ed0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014ed4:	e9c3 8900 	strd	r8, r9, [r3]
 8014ed8:	f10a 0a01 	add.w	sl, sl, #1
 8014edc:	3e08      	subs	r6, #8
 8014ede:	e6f0      	b.n	8014cc2 <__kernel_rem_pio2+0x2ba>
 8014ee0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014ee2:	2b03      	cmp	r3, #3
 8014ee4:	d85b      	bhi.n	8014f9e <__kernel_rem_pio2+0x596>
 8014ee6:	e8df f003 	tbb	[pc, r3]
 8014eea:	264a      	.short	0x264a
 8014eec:	0226      	.short	0x0226
 8014eee:	ab9a      	add	r3, sp, #616	; 0x268
 8014ef0:	441c      	add	r4, r3
 8014ef2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014ef6:	46a2      	mov	sl, r4
 8014ef8:	46ab      	mov	fp, r5
 8014efa:	f1bb 0f00 	cmp.w	fp, #0
 8014efe:	dc6c      	bgt.n	8014fda <__kernel_rem_pio2+0x5d2>
 8014f00:	46a2      	mov	sl, r4
 8014f02:	46ab      	mov	fp, r5
 8014f04:	f1bb 0f01 	cmp.w	fp, #1
 8014f08:	f300 8086 	bgt.w	8015018 <__kernel_rem_pio2+0x610>
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	2100      	movs	r1, #0
 8014f10:	2d01      	cmp	r5, #1
 8014f12:	f300 80a0 	bgt.w	8015056 <__kernel_rem_pio2+0x64e>
 8014f16:	9b02      	ldr	r3, [sp, #8]
 8014f18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014f1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	f040 809e 	bne.w	8015062 <__kernel_rem_pio2+0x65a>
 8014f26:	9b01      	ldr	r3, [sp, #4]
 8014f28:	e9c3 7800 	strd	r7, r8, [r3]
 8014f2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014f30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014f34:	e033      	b.n	8014f9e <__kernel_rem_pio2+0x596>
 8014f36:	3408      	adds	r4, #8
 8014f38:	ab4a      	add	r3, sp, #296	; 0x128
 8014f3a:	441c      	add	r4, r3
 8014f3c:	462e      	mov	r6, r5
 8014f3e:	2000      	movs	r0, #0
 8014f40:	2100      	movs	r1, #0
 8014f42:	2e00      	cmp	r6, #0
 8014f44:	da3a      	bge.n	8014fbc <__kernel_rem_pio2+0x5b4>
 8014f46:	9b02      	ldr	r3, [sp, #8]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d03d      	beq.n	8014fc8 <__kernel_rem_pio2+0x5c0>
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f52:	9c01      	ldr	r4, [sp, #4]
 8014f54:	e9c4 2300 	strd	r2, r3, [r4]
 8014f58:	4602      	mov	r2, r0
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014f60:	f7eb f9aa 	bl	80002b8 <__aeabi_dsub>
 8014f64:	ae4c      	add	r6, sp, #304	; 0x130
 8014f66:	2401      	movs	r4, #1
 8014f68:	42a5      	cmp	r5, r4
 8014f6a:	da30      	bge.n	8014fce <__kernel_rem_pio2+0x5c6>
 8014f6c:	9b02      	ldr	r3, [sp, #8]
 8014f6e:	b113      	cbz	r3, 8014f76 <__kernel_rem_pio2+0x56e>
 8014f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f74:	4619      	mov	r1, r3
 8014f76:	9b01      	ldr	r3, [sp, #4]
 8014f78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014f7c:	e00f      	b.n	8014f9e <__kernel_rem_pio2+0x596>
 8014f7e:	ab9a      	add	r3, sp, #616	; 0x268
 8014f80:	441c      	add	r4, r3
 8014f82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014f86:	2000      	movs	r0, #0
 8014f88:	2100      	movs	r1, #0
 8014f8a:	2d00      	cmp	r5, #0
 8014f8c:	da10      	bge.n	8014fb0 <__kernel_rem_pio2+0x5a8>
 8014f8e:	9b02      	ldr	r3, [sp, #8]
 8014f90:	b113      	cbz	r3, 8014f98 <__kernel_rem_pio2+0x590>
 8014f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f96:	4619      	mov	r1, r3
 8014f98:	9b01      	ldr	r3, [sp, #4]
 8014f9a:	e9c3 0100 	strd	r0, r1, [r3]
 8014f9e:	9b06      	ldr	r3, [sp, #24]
 8014fa0:	f003 0007 	and.w	r0, r3, #7
 8014fa4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014fa8:	ecbd 8b02 	vpop	{d8}
 8014fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014fb4:	f7eb f982 	bl	80002bc <__adddf3>
 8014fb8:	3d01      	subs	r5, #1
 8014fba:	e7e6      	b.n	8014f8a <__kernel_rem_pio2+0x582>
 8014fbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014fc0:	f7eb f97c 	bl	80002bc <__adddf3>
 8014fc4:	3e01      	subs	r6, #1
 8014fc6:	e7bc      	b.n	8014f42 <__kernel_rem_pio2+0x53a>
 8014fc8:	4602      	mov	r2, r0
 8014fca:	460b      	mov	r3, r1
 8014fcc:	e7c1      	b.n	8014f52 <__kernel_rem_pio2+0x54a>
 8014fce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014fd2:	f7eb f973 	bl	80002bc <__adddf3>
 8014fd6:	3401      	adds	r4, #1
 8014fd8:	e7c6      	b.n	8014f68 <__kernel_rem_pio2+0x560>
 8014fda:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014fde:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014fe2:	4640      	mov	r0, r8
 8014fe4:	ec53 2b17 	vmov	r2, r3, d7
 8014fe8:	4649      	mov	r1, r9
 8014fea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014fee:	f7eb f965 	bl	80002bc <__adddf3>
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	460f      	mov	r7, r1
 8014ffa:	4640      	mov	r0, r8
 8014ffc:	4649      	mov	r1, r9
 8014ffe:	f7eb f95b 	bl	80002b8 <__aeabi_dsub>
 8015002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015006:	f7eb f959 	bl	80002bc <__adddf3>
 801500a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801500e:	e9ca 0100 	strd	r0, r1, [sl]
 8015012:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015016:	e770      	b.n	8014efa <__kernel_rem_pio2+0x4f2>
 8015018:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801501c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015020:	4630      	mov	r0, r6
 8015022:	ec53 2b17 	vmov	r2, r3, d7
 8015026:	4639      	mov	r1, r7
 8015028:	ed8d 7b04 	vstr	d7, [sp, #16]
 801502c:	f7eb f946 	bl	80002bc <__adddf3>
 8015030:	4602      	mov	r2, r0
 8015032:	460b      	mov	r3, r1
 8015034:	4680      	mov	r8, r0
 8015036:	4689      	mov	r9, r1
 8015038:	4630      	mov	r0, r6
 801503a:	4639      	mov	r1, r7
 801503c:	f7eb f93c 	bl	80002b8 <__aeabi_dsub>
 8015040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015044:	f7eb f93a 	bl	80002bc <__adddf3>
 8015048:	f10b 3bff 	add.w	fp, fp, #4294967295
 801504c:	e9ca 0100 	strd	r0, r1, [sl]
 8015050:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8015054:	e756      	b.n	8014f04 <__kernel_rem_pio2+0x4fc>
 8015056:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801505a:	f7eb f92f 	bl	80002bc <__adddf3>
 801505e:	3d01      	subs	r5, #1
 8015060:	e756      	b.n	8014f10 <__kernel_rem_pio2+0x508>
 8015062:	9b01      	ldr	r3, [sp, #4]
 8015064:	9a01      	ldr	r2, [sp, #4]
 8015066:	601f      	str	r7, [r3, #0]
 8015068:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801506c:	605c      	str	r4, [r3, #4]
 801506e:	609d      	str	r5, [r3, #8]
 8015070:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015074:	60d3      	str	r3, [r2, #12]
 8015076:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801507a:	6110      	str	r0, [r2, #16]
 801507c:	6153      	str	r3, [r2, #20]
 801507e:	e78e      	b.n	8014f9e <__kernel_rem_pio2+0x596>
 8015080:	41700000 	.word	0x41700000
 8015084:	3e700000 	.word	0x3e700000

08015088 <__kernel_sin>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	ec55 4b10 	vmov	r4, r5, d0
 8015090:	b085      	sub	sp, #20
 8015092:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015096:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801509a:	ed8d 1b00 	vstr	d1, [sp]
 801509e:	9002      	str	r0, [sp, #8]
 80150a0:	da06      	bge.n	80150b0 <__kernel_sin+0x28>
 80150a2:	ee10 0a10 	vmov	r0, s0
 80150a6:	4629      	mov	r1, r5
 80150a8:	f7eb fd6e 	bl	8000b88 <__aeabi_d2iz>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d051      	beq.n	8015154 <__kernel_sin+0xcc>
 80150b0:	4622      	mov	r2, r4
 80150b2:	462b      	mov	r3, r5
 80150b4:	4620      	mov	r0, r4
 80150b6:	4629      	mov	r1, r5
 80150b8:	f7eb fab6 	bl	8000628 <__aeabi_dmul>
 80150bc:	4682      	mov	sl, r0
 80150be:	468b      	mov	fp, r1
 80150c0:	4602      	mov	r2, r0
 80150c2:	460b      	mov	r3, r1
 80150c4:	4620      	mov	r0, r4
 80150c6:	4629      	mov	r1, r5
 80150c8:	f7eb faae 	bl	8000628 <__aeabi_dmul>
 80150cc:	a341      	add	r3, pc, #260	; (adr r3, 80151d4 <__kernel_sin+0x14c>)
 80150ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d2:	4680      	mov	r8, r0
 80150d4:	4689      	mov	r9, r1
 80150d6:	4650      	mov	r0, sl
 80150d8:	4659      	mov	r1, fp
 80150da:	f7eb faa5 	bl	8000628 <__aeabi_dmul>
 80150de:	a33f      	add	r3, pc, #252	; (adr r3, 80151dc <__kernel_sin+0x154>)
 80150e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e4:	f7eb f8e8 	bl	80002b8 <__aeabi_dsub>
 80150e8:	4652      	mov	r2, sl
 80150ea:	465b      	mov	r3, fp
 80150ec:	f7eb fa9c 	bl	8000628 <__aeabi_dmul>
 80150f0:	a33c      	add	r3, pc, #240	; (adr r3, 80151e4 <__kernel_sin+0x15c>)
 80150f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f6:	f7eb f8e1 	bl	80002bc <__adddf3>
 80150fa:	4652      	mov	r2, sl
 80150fc:	465b      	mov	r3, fp
 80150fe:	f7eb fa93 	bl	8000628 <__aeabi_dmul>
 8015102:	a33a      	add	r3, pc, #232	; (adr r3, 80151ec <__kernel_sin+0x164>)
 8015104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015108:	f7eb f8d6 	bl	80002b8 <__aeabi_dsub>
 801510c:	4652      	mov	r2, sl
 801510e:	465b      	mov	r3, fp
 8015110:	f7eb fa8a 	bl	8000628 <__aeabi_dmul>
 8015114:	a337      	add	r3, pc, #220	; (adr r3, 80151f4 <__kernel_sin+0x16c>)
 8015116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511a:	f7eb f8cf 	bl	80002bc <__adddf3>
 801511e:	9b02      	ldr	r3, [sp, #8]
 8015120:	4606      	mov	r6, r0
 8015122:	460f      	mov	r7, r1
 8015124:	b9db      	cbnz	r3, 801515e <__kernel_sin+0xd6>
 8015126:	4602      	mov	r2, r0
 8015128:	460b      	mov	r3, r1
 801512a:	4650      	mov	r0, sl
 801512c:	4659      	mov	r1, fp
 801512e:	f7eb fa7b 	bl	8000628 <__aeabi_dmul>
 8015132:	a325      	add	r3, pc, #148	; (adr r3, 80151c8 <__kernel_sin+0x140>)
 8015134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015138:	f7eb f8be 	bl	80002b8 <__aeabi_dsub>
 801513c:	4642      	mov	r2, r8
 801513e:	464b      	mov	r3, r9
 8015140:	f7eb fa72 	bl	8000628 <__aeabi_dmul>
 8015144:	4602      	mov	r2, r0
 8015146:	460b      	mov	r3, r1
 8015148:	4620      	mov	r0, r4
 801514a:	4629      	mov	r1, r5
 801514c:	f7eb f8b6 	bl	80002bc <__adddf3>
 8015150:	4604      	mov	r4, r0
 8015152:	460d      	mov	r5, r1
 8015154:	ec45 4b10 	vmov	d0, r4, r5
 8015158:	b005      	add	sp, #20
 801515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801515e:	2200      	movs	r2, #0
 8015160:	4b1b      	ldr	r3, [pc, #108]	; (80151d0 <__kernel_sin+0x148>)
 8015162:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015166:	f7eb fa5f 	bl	8000628 <__aeabi_dmul>
 801516a:	4632      	mov	r2, r6
 801516c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015170:	463b      	mov	r3, r7
 8015172:	4640      	mov	r0, r8
 8015174:	4649      	mov	r1, r9
 8015176:	f7eb fa57 	bl	8000628 <__aeabi_dmul>
 801517a:	4602      	mov	r2, r0
 801517c:	460b      	mov	r3, r1
 801517e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015182:	f7eb f899 	bl	80002b8 <__aeabi_dsub>
 8015186:	4652      	mov	r2, sl
 8015188:	465b      	mov	r3, fp
 801518a:	f7eb fa4d 	bl	8000628 <__aeabi_dmul>
 801518e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015192:	f7eb f891 	bl	80002b8 <__aeabi_dsub>
 8015196:	a30c      	add	r3, pc, #48	; (adr r3, 80151c8 <__kernel_sin+0x140>)
 8015198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519c:	4606      	mov	r6, r0
 801519e:	460f      	mov	r7, r1
 80151a0:	4640      	mov	r0, r8
 80151a2:	4649      	mov	r1, r9
 80151a4:	f7eb fa40 	bl	8000628 <__aeabi_dmul>
 80151a8:	4602      	mov	r2, r0
 80151aa:	460b      	mov	r3, r1
 80151ac:	4630      	mov	r0, r6
 80151ae:	4639      	mov	r1, r7
 80151b0:	f7eb f884 	bl	80002bc <__adddf3>
 80151b4:	4602      	mov	r2, r0
 80151b6:	460b      	mov	r3, r1
 80151b8:	4620      	mov	r0, r4
 80151ba:	4629      	mov	r1, r5
 80151bc:	f7eb f87c 	bl	80002b8 <__aeabi_dsub>
 80151c0:	e7c6      	b.n	8015150 <__kernel_sin+0xc8>
 80151c2:	bf00      	nop
 80151c4:	f3af 8000 	nop.w
 80151c8:	55555549 	.word	0x55555549
 80151cc:	3fc55555 	.word	0x3fc55555
 80151d0:	3fe00000 	.word	0x3fe00000
 80151d4:	5acfd57c 	.word	0x5acfd57c
 80151d8:	3de5d93a 	.word	0x3de5d93a
 80151dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80151e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80151e4:	57b1fe7d 	.word	0x57b1fe7d
 80151e8:	3ec71de3 	.word	0x3ec71de3
 80151ec:	19c161d5 	.word	0x19c161d5
 80151f0:	3f2a01a0 	.word	0x3f2a01a0
 80151f4:	1110f8a6 	.word	0x1110f8a6
 80151f8:	3f811111 	.word	0x3f811111

080151fc <fabs>:
 80151fc:	ec51 0b10 	vmov	r0, r1, d0
 8015200:	ee10 2a10 	vmov	r2, s0
 8015204:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015208:	ec43 2b10 	vmov	d0, r2, r3
 801520c:	4770      	bx	lr
	...

08015210 <floor>:
 8015210:	ec51 0b10 	vmov	r0, r1, d0
 8015214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015218:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801521c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015220:	2e13      	cmp	r6, #19
 8015222:	460c      	mov	r4, r1
 8015224:	ee10 5a10 	vmov	r5, s0
 8015228:	4680      	mov	r8, r0
 801522a:	dc34      	bgt.n	8015296 <floor+0x86>
 801522c:	2e00      	cmp	r6, #0
 801522e:	da16      	bge.n	801525e <floor+0x4e>
 8015230:	a335      	add	r3, pc, #212	; (adr r3, 8015308 <floor+0xf8>)
 8015232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015236:	f7eb f841 	bl	80002bc <__adddf3>
 801523a:	2200      	movs	r2, #0
 801523c:	2300      	movs	r3, #0
 801523e:	f7eb fc83 	bl	8000b48 <__aeabi_dcmpgt>
 8015242:	b148      	cbz	r0, 8015258 <floor+0x48>
 8015244:	2c00      	cmp	r4, #0
 8015246:	da59      	bge.n	80152fc <floor+0xec>
 8015248:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801524c:	4a30      	ldr	r2, [pc, #192]	; (8015310 <floor+0x100>)
 801524e:	432b      	orrs	r3, r5
 8015250:	2500      	movs	r5, #0
 8015252:	42ab      	cmp	r3, r5
 8015254:	bf18      	it	ne
 8015256:	4614      	movne	r4, r2
 8015258:	4621      	mov	r1, r4
 801525a:	4628      	mov	r0, r5
 801525c:	e025      	b.n	80152aa <floor+0x9a>
 801525e:	4f2d      	ldr	r7, [pc, #180]	; (8015314 <floor+0x104>)
 8015260:	4137      	asrs	r7, r6
 8015262:	ea01 0307 	and.w	r3, r1, r7
 8015266:	4303      	orrs	r3, r0
 8015268:	d01f      	beq.n	80152aa <floor+0x9a>
 801526a:	a327      	add	r3, pc, #156	; (adr r3, 8015308 <floor+0xf8>)
 801526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015270:	f7eb f824 	bl	80002bc <__adddf3>
 8015274:	2200      	movs	r2, #0
 8015276:	2300      	movs	r3, #0
 8015278:	f7eb fc66 	bl	8000b48 <__aeabi_dcmpgt>
 801527c:	2800      	cmp	r0, #0
 801527e:	d0eb      	beq.n	8015258 <floor+0x48>
 8015280:	2c00      	cmp	r4, #0
 8015282:	bfbe      	ittt	lt
 8015284:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015288:	fa43 f606 	asrlt.w	r6, r3, r6
 801528c:	19a4      	addlt	r4, r4, r6
 801528e:	ea24 0407 	bic.w	r4, r4, r7
 8015292:	2500      	movs	r5, #0
 8015294:	e7e0      	b.n	8015258 <floor+0x48>
 8015296:	2e33      	cmp	r6, #51	; 0x33
 8015298:	dd0b      	ble.n	80152b2 <floor+0xa2>
 801529a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801529e:	d104      	bne.n	80152aa <floor+0x9a>
 80152a0:	ee10 2a10 	vmov	r2, s0
 80152a4:	460b      	mov	r3, r1
 80152a6:	f7eb f809 	bl	80002bc <__adddf3>
 80152aa:	ec41 0b10 	vmov	d0, r0, r1
 80152ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80152b6:	f04f 33ff 	mov.w	r3, #4294967295
 80152ba:	fa23 f707 	lsr.w	r7, r3, r7
 80152be:	4207      	tst	r7, r0
 80152c0:	d0f3      	beq.n	80152aa <floor+0x9a>
 80152c2:	a311      	add	r3, pc, #68	; (adr r3, 8015308 <floor+0xf8>)
 80152c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c8:	f7ea fff8 	bl	80002bc <__adddf3>
 80152cc:	2200      	movs	r2, #0
 80152ce:	2300      	movs	r3, #0
 80152d0:	f7eb fc3a 	bl	8000b48 <__aeabi_dcmpgt>
 80152d4:	2800      	cmp	r0, #0
 80152d6:	d0bf      	beq.n	8015258 <floor+0x48>
 80152d8:	2c00      	cmp	r4, #0
 80152da:	da02      	bge.n	80152e2 <floor+0xd2>
 80152dc:	2e14      	cmp	r6, #20
 80152de:	d103      	bne.n	80152e8 <floor+0xd8>
 80152e0:	3401      	adds	r4, #1
 80152e2:	ea25 0507 	bic.w	r5, r5, r7
 80152e6:	e7b7      	b.n	8015258 <floor+0x48>
 80152e8:	2301      	movs	r3, #1
 80152ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80152ee:	fa03 f606 	lsl.w	r6, r3, r6
 80152f2:	4435      	add	r5, r6
 80152f4:	4545      	cmp	r5, r8
 80152f6:	bf38      	it	cc
 80152f8:	18e4      	addcc	r4, r4, r3
 80152fa:	e7f2      	b.n	80152e2 <floor+0xd2>
 80152fc:	2500      	movs	r5, #0
 80152fe:	462c      	mov	r4, r5
 8015300:	e7aa      	b.n	8015258 <floor+0x48>
 8015302:	bf00      	nop
 8015304:	f3af 8000 	nop.w
 8015308:	8800759c 	.word	0x8800759c
 801530c:	7e37e43c 	.word	0x7e37e43c
 8015310:	bff00000 	.word	0xbff00000
 8015314:	000fffff 	.word	0x000fffff

08015318 <scalbn>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	ec55 4b10 	vmov	r4, r5, d0
 801531e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015322:	4606      	mov	r6, r0
 8015324:	462b      	mov	r3, r5
 8015326:	b9aa      	cbnz	r2, 8015354 <scalbn+0x3c>
 8015328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801532c:	4323      	orrs	r3, r4
 801532e:	d03b      	beq.n	80153a8 <scalbn+0x90>
 8015330:	4b31      	ldr	r3, [pc, #196]	; (80153f8 <scalbn+0xe0>)
 8015332:	4629      	mov	r1, r5
 8015334:	2200      	movs	r2, #0
 8015336:	ee10 0a10 	vmov	r0, s0
 801533a:	f7eb f975 	bl	8000628 <__aeabi_dmul>
 801533e:	4b2f      	ldr	r3, [pc, #188]	; (80153fc <scalbn+0xe4>)
 8015340:	429e      	cmp	r6, r3
 8015342:	4604      	mov	r4, r0
 8015344:	460d      	mov	r5, r1
 8015346:	da12      	bge.n	801536e <scalbn+0x56>
 8015348:	a327      	add	r3, pc, #156	; (adr r3, 80153e8 <scalbn+0xd0>)
 801534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801534e:	f7eb f96b 	bl	8000628 <__aeabi_dmul>
 8015352:	e009      	b.n	8015368 <scalbn+0x50>
 8015354:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015358:	428a      	cmp	r2, r1
 801535a:	d10c      	bne.n	8015376 <scalbn+0x5e>
 801535c:	ee10 2a10 	vmov	r2, s0
 8015360:	4620      	mov	r0, r4
 8015362:	4629      	mov	r1, r5
 8015364:	f7ea ffaa 	bl	80002bc <__adddf3>
 8015368:	4604      	mov	r4, r0
 801536a:	460d      	mov	r5, r1
 801536c:	e01c      	b.n	80153a8 <scalbn+0x90>
 801536e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015372:	460b      	mov	r3, r1
 8015374:	3a36      	subs	r2, #54	; 0x36
 8015376:	4432      	add	r2, r6
 8015378:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801537c:	428a      	cmp	r2, r1
 801537e:	dd0b      	ble.n	8015398 <scalbn+0x80>
 8015380:	ec45 4b11 	vmov	d1, r4, r5
 8015384:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80153f0 <scalbn+0xd8>
 8015388:	f000 f83c 	bl	8015404 <copysign>
 801538c:	a318      	add	r3, pc, #96	; (adr r3, 80153f0 <scalbn+0xd8>)
 801538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015392:	ec51 0b10 	vmov	r0, r1, d0
 8015396:	e7da      	b.n	801534e <scalbn+0x36>
 8015398:	2a00      	cmp	r2, #0
 801539a:	dd08      	ble.n	80153ae <scalbn+0x96>
 801539c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80153a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80153a8:	ec45 4b10 	vmov	d0, r4, r5
 80153ac:	bd70      	pop	{r4, r5, r6, pc}
 80153ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80153b2:	da0d      	bge.n	80153d0 <scalbn+0xb8>
 80153b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80153b8:	429e      	cmp	r6, r3
 80153ba:	ec45 4b11 	vmov	d1, r4, r5
 80153be:	dce1      	bgt.n	8015384 <scalbn+0x6c>
 80153c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80153e8 <scalbn+0xd0>
 80153c4:	f000 f81e 	bl	8015404 <copysign>
 80153c8:	a307      	add	r3, pc, #28	; (adr r3, 80153e8 <scalbn+0xd0>)
 80153ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ce:	e7e0      	b.n	8015392 <scalbn+0x7a>
 80153d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153d4:	3236      	adds	r2, #54	; 0x36
 80153d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80153da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80153de:	4620      	mov	r0, r4
 80153e0:	4629      	mov	r1, r5
 80153e2:	2200      	movs	r2, #0
 80153e4:	4b06      	ldr	r3, [pc, #24]	; (8015400 <scalbn+0xe8>)
 80153e6:	e7b2      	b.n	801534e <scalbn+0x36>
 80153e8:	c2f8f359 	.word	0xc2f8f359
 80153ec:	01a56e1f 	.word	0x01a56e1f
 80153f0:	8800759c 	.word	0x8800759c
 80153f4:	7e37e43c 	.word	0x7e37e43c
 80153f8:	43500000 	.word	0x43500000
 80153fc:	ffff3cb0 	.word	0xffff3cb0
 8015400:	3c900000 	.word	0x3c900000

08015404 <copysign>:
 8015404:	ec51 0b10 	vmov	r0, r1, d0
 8015408:	ee11 0a90 	vmov	r0, s3
 801540c:	ee10 2a10 	vmov	r2, s0
 8015410:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015414:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015418:	ea41 0300 	orr.w	r3, r1, r0
 801541c:	ec43 2b10 	vmov	d0, r2, r3
 8015420:	4770      	bx	lr
	...

08015424 <__errno>:
 8015424:	4b01      	ldr	r3, [pc, #4]	; (801542c <__errno+0x8>)
 8015426:	6818      	ldr	r0, [r3, #0]
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	2000000c 	.word	0x2000000c

08015430 <__libc_init_array>:
 8015430:	b570      	push	{r4, r5, r6, lr}
 8015432:	4e0d      	ldr	r6, [pc, #52]	; (8015468 <__libc_init_array+0x38>)
 8015434:	4c0d      	ldr	r4, [pc, #52]	; (801546c <__libc_init_array+0x3c>)
 8015436:	1ba4      	subs	r4, r4, r6
 8015438:	10a4      	asrs	r4, r4, #2
 801543a:	2500      	movs	r5, #0
 801543c:	42a5      	cmp	r5, r4
 801543e:	d109      	bne.n	8015454 <__libc_init_array+0x24>
 8015440:	4e0b      	ldr	r6, [pc, #44]	; (8015470 <__libc_init_array+0x40>)
 8015442:	4c0c      	ldr	r4, [pc, #48]	; (8015474 <__libc_init_array+0x44>)
 8015444:	f004 f9e8 	bl	8019818 <_init>
 8015448:	1ba4      	subs	r4, r4, r6
 801544a:	10a4      	asrs	r4, r4, #2
 801544c:	2500      	movs	r5, #0
 801544e:	42a5      	cmp	r5, r4
 8015450:	d105      	bne.n	801545e <__libc_init_array+0x2e>
 8015452:	bd70      	pop	{r4, r5, r6, pc}
 8015454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015458:	4798      	blx	r3
 801545a:	3501      	adds	r5, #1
 801545c:	e7ee      	b.n	801543c <__libc_init_array+0xc>
 801545e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015462:	4798      	blx	r3
 8015464:	3501      	adds	r5, #1
 8015466:	e7f2      	b.n	801544e <__libc_init_array+0x1e>
 8015468:	0801a474 	.word	0x0801a474
 801546c:	0801a474 	.word	0x0801a474
 8015470:	0801a474 	.word	0x0801a474
 8015474:	0801a47c 	.word	0x0801a47c

08015478 <memcpy>:
 8015478:	b510      	push	{r4, lr}
 801547a:	1e43      	subs	r3, r0, #1
 801547c:	440a      	add	r2, r1
 801547e:	4291      	cmp	r1, r2
 8015480:	d100      	bne.n	8015484 <memcpy+0xc>
 8015482:	bd10      	pop	{r4, pc}
 8015484:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015488:	f803 4f01 	strb.w	r4, [r3, #1]!
 801548c:	e7f7      	b.n	801547e <memcpy+0x6>

0801548e <memset>:
 801548e:	4402      	add	r2, r0
 8015490:	4603      	mov	r3, r0
 8015492:	4293      	cmp	r3, r2
 8015494:	d100      	bne.n	8015498 <memset+0xa>
 8015496:	4770      	bx	lr
 8015498:	f803 1b01 	strb.w	r1, [r3], #1
 801549c:	e7f9      	b.n	8015492 <memset+0x4>

0801549e <__cvt>:
 801549e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154a2:	ec55 4b10 	vmov	r4, r5, d0
 80154a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80154a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80154ac:	2d00      	cmp	r5, #0
 80154ae:	460e      	mov	r6, r1
 80154b0:	4691      	mov	r9, r2
 80154b2:	4619      	mov	r1, r3
 80154b4:	bfb8      	it	lt
 80154b6:	4622      	movlt	r2, r4
 80154b8:	462b      	mov	r3, r5
 80154ba:	f027 0720 	bic.w	r7, r7, #32
 80154be:	bfbb      	ittet	lt
 80154c0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80154c4:	461d      	movlt	r5, r3
 80154c6:	2300      	movge	r3, #0
 80154c8:	232d      	movlt	r3, #45	; 0x2d
 80154ca:	bfb8      	it	lt
 80154cc:	4614      	movlt	r4, r2
 80154ce:	2f46      	cmp	r7, #70	; 0x46
 80154d0:	700b      	strb	r3, [r1, #0]
 80154d2:	d004      	beq.n	80154de <__cvt+0x40>
 80154d4:	2f45      	cmp	r7, #69	; 0x45
 80154d6:	d100      	bne.n	80154da <__cvt+0x3c>
 80154d8:	3601      	adds	r6, #1
 80154da:	2102      	movs	r1, #2
 80154dc:	e000      	b.n	80154e0 <__cvt+0x42>
 80154de:	2103      	movs	r1, #3
 80154e0:	ab03      	add	r3, sp, #12
 80154e2:	9301      	str	r3, [sp, #4]
 80154e4:	ab02      	add	r3, sp, #8
 80154e6:	9300      	str	r3, [sp, #0]
 80154e8:	4632      	mov	r2, r6
 80154ea:	4653      	mov	r3, sl
 80154ec:	ec45 4b10 	vmov	d0, r4, r5
 80154f0:	f001 fdfe 	bl	80170f0 <_dtoa_r>
 80154f4:	2f47      	cmp	r7, #71	; 0x47
 80154f6:	4680      	mov	r8, r0
 80154f8:	d102      	bne.n	8015500 <__cvt+0x62>
 80154fa:	f019 0f01 	tst.w	r9, #1
 80154fe:	d026      	beq.n	801554e <__cvt+0xb0>
 8015500:	2f46      	cmp	r7, #70	; 0x46
 8015502:	eb08 0906 	add.w	r9, r8, r6
 8015506:	d111      	bne.n	801552c <__cvt+0x8e>
 8015508:	f898 3000 	ldrb.w	r3, [r8]
 801550c:	2b30      	cmp	r3, #48	; 0x30
 801550e:	d10a      	bne.n	8015526 <__cvt+0x88>
 8015510:	2200      	movs	r2, #0
 8015512:	2300      	movs	r3, #0
 8015514:	4620      	mov	r0, r4
 8015516:	4629      	mov	r1, r5
 8015518:	f7eb faee 	bl	8000af8 <__aeabi_dcmpeq>
 801551c:	b918      	cbnz	r0, 8015526 <__cvt+0x88>
 801551e:	f1c6 0601 	rsb	r6, r6, #1
 8015522:	f8ca 6000 	str.w	r6, [sl]
 8015526:	f8da 3000 	ldr.w	r3, [sl]
 801552a:	4499      	add	r9, r3
 801552c:	2200      	movs	r2, #0
 801552e:	2300      	movs	r3, #0
 8015530:	4620      	mov	r0, r4
 8015532:	4629      	mov	r1, r5
 8015534:	f7eb fae0 	bl	8000af8 <__aeabi_dcmpeq>
 8015538:	b938      	cbnz	r0, 801554a <__cvt+0xac>
 801553a:	2230      	movs	r2, #48	; 0x30
 801553c:	9b03      	ldr	r3, [sp, #12]
 801553e:	454b      	cmp	r3, r9
 8015540:	d205      	bcs.n	801554e <__cvt+0xb0>
 8015542:	1c59      	adds	r1, r3, #1
 8015544:	9103      	str	r1, [sp, #12]
 8015546:	701a      	strb	r2, [r3, #0]
 8015548:	e7f8      	b.n	801553c <__cvt+0x9e>
 801554a:	f8cd 900c 	str.w	r9, [sp, #12]
 801554e:	9b03      	ldr	r3, [sp, #12]
 8015550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015552:	eba3 0308 	sub.w	r3, r3, r8
 8015556:	4640      	mov	r0, r8
 8015558:	6013      	str	r3, [r2, #0]
 801555a:	b004      	add	sp, #16
 801555c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015560 <__exponent>:
 8015560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015562:	2900      	cmp	r1, #0
 8015564:	4604      	mov	r4, r0
 8015566:	bfba      	itte	lt
 8015568:	4249      	neglt	r1, r1
 801556a:	232d      	movlt	r3, #45	; 0x2d
 801556c:	232b      	movge	r3, #43	; 0x2b
 801556e:	2909      	cmp	r1, #9
 8015570:	f804 2b02 	strb.w	r2, [r4], #2
 8015574:	7043      	strb	r3, [r0, #1]
 8015576:	dd20      	ble.n	80155ba <__exponent+0x5a>
 8015578:	f10d 0307 	add.w	r3, sp, #7
 801557c:	461f      	mov	r7, r3
 801557e:	260a      	movs	r6, #10
 8015580:	fb91 f5f6 	sdiv	r5, r1, r6
 8015584:	fb06 1115 	mls	r1, r6, r5, r1
 8015588:	3130      	adds	r1, #48	; 0x30
 801558a:	2d09      	cmp	r5, #9
 801558c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015590:	f103 32ff 	add.w	r2, r3, #4294967295
 8015594:	4629      	mov	r1, r5
 8015596:	dc09      	bgt.n	80155ac <__exponent+0x4c>
 8015598:	3130      	adds	r1, #48	; 0x30
 801559a:	3b02      	subs	r3, #2
 801559c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80155a0:	42bb      	cmp	r3, r7
 80155a2:	4622      	mov	r2, r4
 80155a4:	d304      	bcc.n	80155b0 <__exponent+0x50>
 80155a6:	1a10      	subs	r0, r2, r0
 80155a8:	b003      	add	sp, #12
 80155aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155ac:	4613      	mov	r3, r2
 80155ae:	e7e7      	b.n	8015580 <__exponent+0x20>
 80155b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155b4:	f804 2b01 	strb.w	r2, [r4], #1
 80155b8:	e7f2      	b.n	80155a0 <__exponent+0x40>
 80155ba:	2330      	movs	r3, #48	; 0x30
 80155bc:	4419      	add	r1, r3
 80155be:	7083      	strb	r3, [r0, #2]
 80155c0:	1d02      	adds	r2, r0, #4
 80155c2:	70c1      	strb	r1, [r0, #3]
 80155c4:	e7ef      	b.n	80155a6 <__exponent+0x46>
	...

080155c8 <_printf_float>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	b08d      	sub	sp, #52	; 0x34
 80155ce:	460c      	mov	r4, r1
 80155d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80155d4:	4616      	mov	r6, r2
 80155d6:	461f      	mov	r7, r3
 80155d8:	4605      	mov	r5, r0
 80155da:	f002 fe7b 	bl	80182d4 <_localeconv_r>
 80155de:	6803      	ldr	r3, [r0, #0]
 80155e0:	9304      	str	r3, [sp, #16]
 80155e2:	4618      	mov	r0, r3
 80155e4:	f7ea fe0c 	bl	8000200 <strlen>
 80155e8:	2300      	movs	r3, #0
 80155ea:	930a      	str	r3, [sp, #40]	; 0x28
 80155ec:	f8d8 3000 	ldr.w	r3, [r8]
 80155f0:	9005      	str	r0, [sp, #20]
 80155f2:	3307      	adds	r3, #7
 80155f4:	f023 0307 	bic.w	r3, r3, #7
 80155f8:	f103 0208 	add.w	r2, r3, #8
 80155fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015600:	f8d4 b000 	ldr.w	fp, [r4]
 8015604:	f8c8 2000 	str.w	r2, [r8]
 8015608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801560c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015610:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015614:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015618:	9307      	str	r3, [sp, #28]
 801561a:	f8cd 8018 	str.w	r8, [sp, #24]
 801561e:	f04f 32ff 	mov.w	r2, #4294967295
 8015622:	4ba7      	ldr	r3, [pc, #668]	; (80158c0 <_printf_float+0x2f8>)
 8015624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015628:	f7eb fa98 	bl	8000b5c <__aeabi_dcmpun>
 801562c:	bb70      	cbnz	r0, 801568c <_printf_float+0xc4>
 801562e:	f04f 32ff 	mov.w	r2, #4294967295
 8015632:	4ba3      	ldr	r3, [pc, #652]	; (80158c0 <_printf_float+0x2f8>)
 8015634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015638:	f7eb fa72 	bl	8000b20 <__aeabi_dcmple>
 801563c:	bb30      	cbnz	r0, 801568c <_printf_float+0xc4>
 801563e:	2200      	movs	r2, #0
 8015640:	2300      	movs	r3, #0
 8015642:	4640      	mov	r0, r8
 8015644:	4649      	mov	r1, r9
 8015646:	f7eb fa61 	bl	8000b0c <__aeabi_dcmplt>
 801564a:	b110      	cbz	r0, 8015652 <_printf_float+0x8a>
 801564c:	232d      	movs	r3, #45	; 0x2d
 801564e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015652:	4a9c      	ldr	r2, [pc, #624]	; (80158c4 <_printf_float+0x2fc>)
 8015654:	4b9c      	ldr	r3, [pc, #624]	; (80158c8 <_printf_float+0x300>)
 8015656:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801565a:	bf8c      	ite	hi
 801565c:	4690      	movhi	r8, r2
 801565e:	4698      	movls	r8, r3
 8015660:	2303      	movs	r3, #3
 8015662:	f02b 0204 	bic.w	r2, fp, #4
 8015666:	6123      	str	r3, [r4, #16]
 8015668:	6022      	str	r2, [r4, #0]
 801566a:	f04f 0900 	mov.w	r9, #0
 801566e:	9700      	str	r7, [sp, #0]
 8015670:	4633      	mov	r3, r6
 8015672:	aa0b      	add	r2, sp, #44	; 0x2c
 8015674:	4621      	mov	r1, r4
 8015676:	4628      	mov	r0, r5
 8015678:	f000 f9e6 	bl	8015a48 <_printf_common>
 801567c:	3001      	adds	r0, #1
 801567e:	f040 808d 	bne.w	801579c <_printf_float+0x1d4>
 8015682:	f04f 30ff 	mov.w	r0, #4294967295
 8015686:	b00d      	add	sp, #52	; 0x34
 8015688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801568c:	4642      	mov	r2, r8
 801568e:	464b      	mov	r3, r9
 8015690:	4640      	mov	r0, r8
 8015692:	4649      	mov	r1, r9
 8015694:	f7eb fa62 	bl	8000b5c <__aeabi_dcmpun>
 8015698:	b110      	cbz	r0, 80156a0 <_printf_float+0xd8>
 801569a:	4a8c      	ldr	r2, [pc, #560]	; (80158cc <_printf_float+0x304>)
 801569c:	4b8c      	ldr	r3, [pc, #560]	; (80158d0 <_printf_float+0x308>)
 801569e:	e7da      	b.n	8015656 <_printf_float+0x8e>
 80156a0:	6861      	ldr	r1, [r4, #4]
 80156a2:	1c4b      	adds	r3, r1, #1
 80156a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80156a8:	a80a      	add	r0, sp, #40	; 0x28
 80156aa:	d13e      	bne.n	801572a <_printf_float+0x162>
 80156ac:	2306      	movs	r3, #6
 80156ae:	6063      	str	r3, [r4, #4]
 80156b0:	2300      	movs	r3, #0
 80156b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80156b6:	ab09      	add	r3, sp, #36	; 0x24
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	ec49 8b10 	vmov	d0, r8, r9
 80156be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80156c2:	6022      	str	r2, [r4, #0]
 80156c4:	f8cd a004 	str.w	sl, [sp, #4]
 80156c8:	6861      	ldr	r1, [r4, #4]
 80156ca:	4628      	mov	r0, r5
 80156cc:	f7ff fee7 	bl	801549e <__cvt>
 80156d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80156d4:	2b47      	cmp	r3, #71	; 0x47
 80156d6:	4680      	mov	r8, r0
 80156d8:	d109      	bne.n	80156ee <_printf_float+0x126>
 80156da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156dc:	1cd8      	adds	r0, r3, #3
 80156de:	db02      	blt.n	80156e6 <_printf_float+0x11e>
 80156e0:	6862      	ldr	r2, [r4, #4]
 80156e2:	4293      	cmp	r3, r2
 80156e4:	dd47      	ble.n	8015776 <_printf_float+0x1ae>
 80156e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80156ea:	fa5f fa8a 	uxtb.w	sl, sl
 80156ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80156f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156f4:	d824      	bhi.n	8015740 <_printf_float+0x178>
 80156f6:	3901      	subs	r1, #1
 80156f8:	4652      	mov	r2, sl
 80156fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80156fe:	9109      	str	r1, [sp, #36]	; 0x24
 8015700:	f7ff ff2e 	bl	8015560 <__exponent>
 8015704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015706:	1813      	adds	r3, r2, r0
 8015708:	2a01      	cmp	r2, #1
 801570a:	4681      	mov	r9, r0
 801570c:	6123      	str	r3, [r4, #16]
 801570e:	dc02      	bgt.n	8015716 <_printf_float+0x14e>
 8015710:	6822      	ldr	r2, [r4, #0]
 8015712:	07d1      	lsls	r1, r2, #31
 8015714:	d501      	bpl.n	801571a <_printf_float+0x152>
 8015716:	3301      	adds	r3, #1
 8015718:	6123      	str	r3, [r4, #16]
 801571a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801571e:	2b00      	cmp	r3, #0
 8015720:	d0a5      	beq.n	801566e <_printf_float+0xa6>
 8015722:	232d      	movs	r3, #45	; 0x2d
 8015724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015728:	e7a1      	b.n	801566e <_printf_float+0xa6>
 801572a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801572e:	f000 8177 	beq.w	8015a20 <_printf_float+0x458>
 8015732:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015736:	d1bb      	bne.n	80156b0 <_printf_float+0xe8>
 8015738:	2900      	cmp	r1, #0
 801573a:	d1b9      	bne.n	80156b0 <_printf_float+0xe8>
 801573c:	2301      	movs	r3, #1
 801573e:	e7b6      	b.n	80156ae <_printf_float+0xe6>
 8015740:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015744:	d119      	bne.n	801577a <_printf_float+0x1b2>
 8015746:	2900      	cmp	r1, #0
 8015748:	6863      	ldr	r3, [r4, #4]
 801574a:	dd0c      	ble.n	8015766 <_printf_float+0x19e>
 801574c:	6121      	str	r1, [r4, #16]
 801574e:	b913      	cbnz	r3, 8015756 <_printf_float+0x18e>
 8015750:	6822      	ldr	r2, [r4, #0]
 8015752:	07d2      	lsls	r2, r2, #31
 8015754:	d502      	bpl.n	801575c <_printf_float+0x194>
 8015756:	3301      	adds	r3, #1
 8015758:	440b      	add	r3, r1
 801575a:	6123      	str	r3, [r4, #16]
 801575c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801575e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015760:	f04f 0900 	mov.w	r9, #0
 8015764:	e7d9      	b.n	801571a <_printf_float+0x152>
 8015766:	b913      	cbnz	r3, 801576e <_printf_float+0x1a6>
 8015768:	6822      	ldr	r2, [r4, #0]
 801576a:	07d0      	lsls	r0, r2, #31
 801576c:	d501      	bpl.n	8015772 <_printf_float+0x1aa>
 801576e:	3302      	adds	r3, #2
 8015770:	e7f3      	b.n	801575a <_printf_float+0x192>
 8015772:	2301      	movs	r3, #1
 8015774:	e7f1      	b.n	801575a <_printf_float+0x192>
 8015776:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801577a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801577e:	4293      	cmp	r3, r2
 8015780:	db05      	blt.n	801578e <_printf_float+0x1c6>
 8015782:	6822      	ldr	r2, [r4, #0]
 8015784:	6123      	str	r3, [r4, #16]
 8015786:	07d1      	lsls	r1, r2, #31
 8015788:	d5e8      	bpl.n	801575c <_printf_float+0x194>
 801578a:	3301      	adds	r3, #1
 801578c:	e7e5      	b.n	801575a <_printf_float+0x192>
 801578e:	2b00      	cmp	r3, #0
 8015790:	bfd4      	ite	le
 8015792:	f1c3 0302 	rsble	r3, r3, #2
 8015796:	2301      	movgt	r3, #1
 8015798:	4413      	add	r3, r2
 801579a:	e7de      	b.n	801575a <_printf_float+0x192>
 801579c:	6823      	ldr	r3, [r4, #0]
 801579e:	055a      	lsls	r2, r3, #21
 80157a0:	d407      	bmi.n	80157b2 <_printf_float+0x1ea>
 80157a2:	6923      	ldr	r3, [r4, #16]
 80157a4:	4642      	mov	r2, r8
 80157a6:	4631      	mov	r1, r6
 80157a8:	4628      	mov	r0, r5
 80157aa:	47b8      	blx	r7
 80157ac:	3001      	adds	r0, #1
 80157ae:	d12b      	bne.n	8015808 <_printf_float+0x240>
 80157b0:	e767      	b.n	8015682 <_printf_float+0xba>
 80157b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80157b6:	f240 80dc 	bls.w	8015972 <_printf_float+0x3aa>
 80157ba:	2200      	movs	r2, #0
 80157bc:	2300      	movs	r3, #0
 80157be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80157c2:	f7eb f999 	bl	8000af8 <__aeabi_dcmpeq>
 80157c6:	2800      	cmp	r0, #0
 80157c8:	d033      	beq.n	8015832 <_printf_float+0x26a>
 80157ca:	2301      	movs	r3, #1
 80157cc:	4a41      	ldr	r2, [pc, #260]	; (80158d4 <_printf_float+0x30c>)
 80157ce:	4631      	mov	r1, r6
 80157d0:	4628      	mov	r0, r5
 80157d2:	47b8      	blx	r7
 80157d4:	3001      	adds	r0, #1
 80157d6:	f43f af54 	beq.w	8015682 <_printf_float+0xba>
 80157da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157de:	429a      	cmp	r2, r3
 80157e0:	db02      	blt.n	80157e8 <_printf_float+0x220>
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	07d8      	lsls	r0, r3, #31
 80157e6:	d50f      	bpl.n	8015808 <_printf_float+0x240>
 80157e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157ec:	4631      	mov	r1, r6
 80157ee:	4628      	mov	r0, r5
 80157f0:	47b8      	blx	r7
 80157f2:	3001      	adds	r0, #1
 80157f4:	f43f af45 	beq.w	8015682 <_printf_float+0xba>
 80157f8:	f04f 0800 	mov.w	r8, #0
 80157fc:	f104 091a 	add.w	r9, r4, #26
 8015800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015802:	3b01      	subs	r3, #1
 8015804:	4543      	cmp	r3, r8
 8015806:	dc09      	bgt.n	801581c <_printf_float+0x254>
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	079b      	lsls	r3, r3, #30
 801580c:	f100 8103 	bmi.w	8015a16 <_printf_float+0x44e>
 8015810:	68e0      	ldr	r0, [r4, #12]
 8015812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015814:	4298      	cmp	r0, r3
 8015816:	bfb8      	it	lt
 8015818:	4618      	movlt	r0, r3
 801581a:	e734      	b.n	8015686 <_printf_float+0xbe>
 801581c:	2301      	movs	r3, #1
 801581e:	464a      	mov	r2, r9
 8015820:	4631      	mov	r1, r6
 8015822:	4628      	mov	r0, r5
 8015824:	47b8      	blx	r7
 8015826:	3001      	adds	r0, #1
 8015828:	f43f af2b 	beq.w	8015682 <_printf_float+0xba>
 801582c:	f108 0801 	add.w	r8, r8, #1
 8015830:	e7e6      	b.n	8015800 <_printf_float+0x238>
 8015832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015834:	2b00      	cmp	r3, #0
 8015836:	dc2b      	bgt.n	8015890 <_printf_float+0x2c8>
 8015838:	2301      	movs	r3, #1
 801583a:	4a26      	ldr	r2, [pc, #152]	; (80158d4 <_printf_float+0x30c>)
 801583c:	4631      	mov	r1, r6
 801583e:	4628      	mov	r0, r5
 8015840:	47b8      	blx	r7
 8015842:	3001      	adds	r0, #1
 8015844:	f43f af1d 	beq.w	8015682 <_printf_float+0xba>
 8015848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801584a:	b923      	cbnz	r3, 8015856 <_printf_float+0x28e>
 801584c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801584e:	b913      	cbnz	r3, 8015856 <_printf_float+0x28e>
 8015850:	6823      	ldr	r3, [r4, #0]
 8015852:	07d9      	lsls	r1, r3, #31
 8015854:	d5d8      	bpl.n	8015808 <_printf_float+0x240>
 8015856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801585a:	4631      	mov	r1, r6
 801585c:	4628      	mov	r0, r5
 801585e:	47b8      	blx	r7
 8015860:	3001      	adds	r0, #1
 8015862:	f43f af0e 	beq.w	8015682 <_printf_float+0xba>
 8015866:	f04f 0900 	mov.w	r9, #0
 801586a:	f104 0a1a 	add.w	sl, r4, #26
 801586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015870:	425b      	negs	r3, r3
 8015872:	454b      	cmp	r3, r9
 8015874:	dc01      	bgt.n	801587a <_printf_float+0x2b2>
 8015876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015878:	e794      	b.n	80157a4 <_printf_float+0x1dc>
 801587a:	2301      	movs	r3, #1
 801587c:	4652      	mov	r2, sl
 801587e:	4631      	mov	r1, r6
 8015880:	4628      	mov	r0, r5
 8015882:	47b8      	blx	r7
 8015884:	3001      	adds	r0, #1
 8015886:	f43f aefc 	beq.w	8015682 <_printf_float+0xba>
 801588a:	f109 0901 	add.w	r9, r9, #1
 801588e:	e7ee      	b.n	801586e <_printf_float+0x2a6>
 8015890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015894:	429a      	cmp	r2, r3
 8015896:	bfa8      	it	ge
 8015898:	461a      	movge	r2, r3
 801589a:	2a00      	cmp	r2, #0
 801589c:	4691      	mov	r9, r2
 801589e:	dd07      	ble.n	80158b0 <_printf_float+0x2e8>
 80158a0:	4613      	mov	r3, r2
 80158a2:	4631      	mov	r1, r6
 80158a4:	4642      	mov	r2, r8
 80158a6:	4628      	mov	r0, r5
 80158a8:	47b8      	blx	r7
 80158aa:	3001      	adds	r0, #1
 80158ac:	f43f aee9 	beq.w	8015682 <_printf_float+0xba>
 80158b0:	f104 031a 	add.w	r3, r4, #26
 80158b4:	f04f 0b00 	mov.w	fp, #0
 80158b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80158bc:	9306      	str	r3, [sp, #24]
 80158be:	e015      	b.n	80158ec <_printf_float+0x324>
 80158c0:	7fefffff 	.word	0x7fefffff
 80158c4:	0801a13c 	.word	0x0801a13c
 80158c8:	0801a138 	.word	0x0801a138
 80158cc:	0801a144 	.word	0x0801a144
 80158d0:	0801a140 	.word	0x0801a140
 80158d4:	0801a363 	.word	0x0801a363
 80158d8:	2301      	movs	r3, #1
 80158da:	9a06      	ldr	r2, [sp, #24]
 80158dc:	4631      	mov	r1, r6
 80158de:	4628      	mov	r0, r5
 80158e0:	47b8      	blx	r7
 80158e2:	3001      	adds	r0, #1
 80158e4:	f43f aecd 	beq.w	8015682 <_printf_float+0xba>
 80158e8:	f10b 0b01 	add.w	fp, fp, #1
 80158ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80158f0:	ebaa 0309 	sub.w	r3, sl, r9
 80158f4:	455b      	cmp	r3, fp
 80158f6:	dcef      	bgt.n	80158d8 <_printf_float+0x310>
 80158f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80158fc:	429a      	cmp	r2, r3
 80158fe:	44d0      	add	r8, sl
 8015900:	db15      	blt.n	801592e <_printf_float+0x366>
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	07da      	lsls	r2, r3, #31
 8015906:	d412      	bmi.n	801592e <_printf_float+0x366>
 8015908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801590a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801590c:	eba3 020a 	sub.w	r2, r3, sl
 8015910:	eba3 0a01 	sub.w	sl, r3, r1
 8015914:	4592      	cmp	sl, r2
 8015916:	bfa8      	it	ge
 8015918:	4692      	movge	sl, r2
 801591a:	f1ba 0f00 	cmp.w	sl, #0
 801591e:	dc0e      	bgt.n	801593e <_printf_float+0x376>
 8015920:	f04f 0800 	mov.w	r8, #0
 8015924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015928:	f104 091a 	add.w	r9, r4, #26
 801592c:	e019      	b.n	8015962 <_printf_float+0x39a>
 801592e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015932:	4631      	mov	r1, r6
 8015934:	4628      	mov	r0, r5
 8015936:	47b8      	blx	r7
 8015938:	3001      	adds	r0, #1
 801593a:	d1e5      	bne.n	8015908 <_printf_float+0x340>
 801593c:	e6a1      	b.n	8015682 <_printf_float+0xba>
 801593e:	4653      	mov	r3, sl
 8015940:	4642      	mov	r2, r8
 8015942:	4631      	mov	r1, r6
 8015944:	4628      	mov	r0, r5
 8015946:	47b8      	blx	r7
 8015948:	3001      	adds	r0, #1
 801594a:	d1e9      	bne.n	8015920 <_printf_float+0x358>
 801594c:	e699      	b.n	8015682 <_printf_float+0xba>
 801594e:	2301      	movs	r3, #1
 8015950:	464a      	mov	r2, r9
 8015952:	4631      	mov	r1, r6
 8015954:	4628      	mov	r0, r5
 8015956:	47b8      	blx	r7
 8015958:	3001      	adds	r0, #1
 801595a:	f43f ae92 	beq.w	8015682 <_printf_float+0xba>
 801595e:	f108 0801 	add.w	r8, r8, #1
 8015962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015966:	1a9b      	subs	r3, r3, r2
 8015968:	eba3 030a 	sub.w	r3, r3, sl
 801596c:	4543      	cmp	r3, r8
 801596e:	dcee      	bgt.n	801594e <_printf_float+0x386>
 8015970:	e74a      	b.n	8015808 <_printf_float+0x240>
 8015972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015974:	2a01      	cmp	r2, #1
 8015976:	dc01      	bgt.n	801597c <_printf_float+0x3b4>
 8015978:	07db      	lsls	r3, r3, #31
 801597a:	d53a      	bpl.n	80159f2 <_printf_float+0x42a>
 801597c:	2301      	movs	r3, #1
 801597e:	4642      	mov	r2, r8
 8015980:	4631      	mov	r1, r6
 8015982:	4628      	mov	r0, r5
 8015984:	47b8      	blx	r7
 8015986:	3001      	adds	r0, #1
 8015988:	f43f ae7b 	beq.w	8015682 <_printf_float+0xba>
 801598c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015990:	4631      	mov	r1, r6
 8015992:	4628      	mov	r0, r5
 8015994:	47b8      	blx	r7
 8015996:	3001      	adds	r0, #1
 8015998:	f108 0801 	add.w	r8, r8, #1
 801599c:	f43f ae71 	beq.w	8015682 <_printf_float+0xba>
 80159a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a2:	2200      	movs	r2, #0
 80159a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80159a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80159ac:	2300      	movs	r3, #0
 80159ae:	f7eb f8a3 	bl	8000af8 <__aeabi_dcmpeq>
 80159b2:	b9c8      	cbnz	r0, 80159e8 <_printf_float+0x420>
 80159b4:	4653      	mov	r3, sl
 80159b6:	4642      	mov	r2, r8
 80159b8:	4631      	mov	r1, r6
 80159ba:	4628      	mov	r0, r5
 80159bc:	47b8      	blx	r7
 80159be:	3001      	adds	r0, #1
 80159c0:	d10e      	bne.n	80159e0 <_printf_float+0x418>
 80159c2:	e65e      	b.n	8015682 <_printf_float+0xba>
 80159c4:	2301      	movs	r3, #1
 80159c6:	4652      	mov	r2, sl
 80159c8:	4631      	mov	r1, r6
 80159ca:	4628      	mov	r0, r5
 80159cc:	47b8      	blx	r7
 80159ce:	3001      	adds	r0, #1
 80159d0:	f43f ae57 	beq.w	8015682 <_printf_float+0xba>
 80159d4:	f108 0801 	add.w	r8, r8, #1
 80159d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159da:	3b01      	subs	r3, #1
 80159dc:	4543      	cmp	r3, r8
 80159de:	dcf1      	bgt.n	80159c4 <_printf_float+0x3fc>
 80159e0:	464b      	mov	r3, r9
 80159e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80159e6:	e6de      	b.n	80157a6 <_printf_float+0x1de>
 80159e8:	f04f 0800 	mov.w	r8, #0
 80159ec:	f104 0a1a 	add.w	sl, r4, #26
 80159f0:	e7f2      	b.n	80159d8 <_printf_float+0x410>
 80159f2:	2301      	movs	r3, #1
 80159f4:	e7df      	b.n	80159b6 <_printf_float+0x3ee>
 80159f6:	2301      	movs	r3, #1
 80159f8:	464a      	mov	r2, r9
 80159fa:	4631      	mov	r1, r6
 80159fc:	4628      	mov	r0, r5
 80159fe:	47b8      	blx	r7
 8015a00:	3001      	adds	r0, #1
 8015a02:	f43f ae3e 	beq.w	8015682 <_printf_float+0xba>
 8015a06:	f108 0801 	add.w	r8, r8, #1
 8015a0a:	68e3      	ldr	r3, [r4, #12]
 8015a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a0e:	1a9b      	subs	r3, r3, r2
 8015a10:	4543      	cmp	r3, r8
 8015a12:	dcf0      	bgt.n	80159f6 <_printf_float+0x42e>
 8015a14:	e6fc      	b.n	8015810 <_printf_float+0x248>
 8015a16:	f04f 0800 	mov.w	r8, #0
 8015a1a:	f104 0919 	add.w	r9, r4, #25
 8015a1e:	e7f4      	b.n	8015a0a <_printf_float+0x442>
 8015a20:	2900      	cmp	r1, #0
 8015a22:	f43f ae8b 	beq.w	801573c <_printf_float+0x174>
 8015a26:	2300      	movs	r3, #0
 8015a28:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015a2c:	ab09      	add	r3, sp, #36	; 0x24
 8015a2e:	9300      	str	r3, [sp, #0]
 8015a30:	ec49 8b10 	vmov	d0, r8, r9
 8015a34:	6022      	str	r2, [r4, #0]
 8015a36:	f8cd a004 	str.w	sl, [sp, #4]
 8015a3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a3e:	4628      	mov	r0, r5
 8015a40:	f7ff fd2d 	bl	801549e <__cvt>
 8015a44:	4680      	mov	r8, r0
 8015a46:	e648      	b.n	80156da <_printf_float+0x112>

08015a48 <_printf_common>:
 8015a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a4c:	4691      	mov	r9, r2
 8015a4e:	461f      	mov	r7, r3
 8015a50:	688a      	ldr	r2, [r1, #8]
 8015a52:	690b      	ldr	r3, [r1, #16]
 8015a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015a58:	4293      	cmp	r3, r2
 8015a5a:	bfb8      	it	lt
 8015a5c:	4613      	movlt	r3, r2
 8015a5e:	f8c9 3000 	str.w	r3, [r9]
 8015a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a66:	4606      	mov	r6, r0
 8015a68:	460c      	mov	r4, r1
 8015a6a:	b112      	cbz	r2, 8015a72 <_printf_common+0x2a>
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	f8c9 3000 	str.w	r3, [r9]
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	0699      	lsls	r1, r3, #26
 8015a76:	bf42      	ittt	mi
 8015a78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015a7c:	3302      	addmi	r3, #2
 8015a7e:	f8c9 3000 	strmi.w	r3, [r9]
 8015a82:	6825      	ldr	r5, [r4, #0]
 8015a84:	f015 0506 	ands.w	r5, r5, #6
 8015a88:	d107      	bne.n	8015a9a <_printf_common+0x52>
 8015a8a:	f104 0a19 	add.w	sl, r4, #25
 8015a8e:	68e3      	ldr	r3, [r4, #12]
 8015a90:	f8d9 2000 	ldr.w	r2, [r9]
 8015a94:	1a9b      	subs	r3, r3, r2
 8015a96:	42ab      	cmp	r3, r5
 8015a98:	dc28      	bgt.n	8015aec <_printf_common+0xa4>
 8015a9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015a9e:	6822      	ldr	r2, [r4, #0]
 8015aa0:	3300      	adds	r3, #0
 8015aa2:	bf18      	it	ne
 8015aa4:	2301      	movne	r3, #1
 8015aa6:	0692      	lsls	r2, r2, #26
 8015aa8:	d42d      	bmi.n	8015b06 <_printf_common+0xbe>
 8015aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015aae:	4639      	mov	r1, r7
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	47c0      	blx	r8
 8015ab4:	3001      	adds	r0, #1
 8015ab6:	d020      	beq.n	8015afa <_printf_common+0xb2>
 8015ab8:	6823      	ldr	r3, [r4, #0]
 8015aba:	68e5      	ldr	r5, [r4, #12]
 8015abc:	f8d9 2000 	ldr.w	r2, [r9]
 8015ac0:	f003 0306 	and.w	r3, r3, #6
 8015ac4:	2b04      	cmp	r3, #4
 8015ac6:	bf08      	it	eq
 8015ac8:	1aad      	subeq	r5, r5, r2
 8015aca:	68a3      	ldr	r3, [r4, #8]
 8015acc:	6922      	ldr	r2, [r4, #16]
 8015ace:	bf0c      	ite	eq
 8015ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ad4:	2500      	movne	r5, #0
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	bfc4      	itt	gt
 8015ada:	1a9b      	subgt	r3, r3, r2
 8015adc:	18ed      	addgt	r5, r5, r3
 8015ade:	f04f 0900 	mov.w	r9, #0
 8015ae2:	341a      	adds	r4, #26
 8015ae4:	454d      	cmp	r5, r9
 8015ae6:	d11a      	bne.n	8015b1e <_printf_common+0xd6>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	e008      	b.n	8015afe <_printf_common+0xb6>
 8015aec:	2301      	movs	r3, #1
 8015aee:	4652      	mov	r2, sl
 8015af0:	4639      	mov	r1, r7
 8015af2:	4630      	mov	r0, r6
 8015af4:	47c0      	blx	r8
 8015af6:	3001      	adds	r0, #1
 8015af8:	d103      	bne.n	8015b02 <_printf_common+0xba>
 8015afa:	f04f 30ff 	mov.w	r0, #4294967295
 8015afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b02:	3501      	adds	r5, #1
 8015b04:	e7c3      	b.n	8015a8e <_printf_common+0x46>
 8015b06:	18e1      	adds	r1, r4, r3
 8015b08:	1c5a      	adds	r2, r3, #1
 8015b0a:	2030      	movs	r0, #48	; 0x30
 8015b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b10:	4422      	add	r2, r4
 8015b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b1a:	3302      	adds	r3, #2
 8015b1c:	e7c5      	b.n	8015aaa <_printf_common+0x62>
 8015b1e:	2301      	movs	r3, #1
 8015b20:	4622      	mov	r2, r4
 8015b22:	4639      	mov	r1, r7
 8015b24:	4630      	mov	r0, r6
 8015b26:	47c0      	blx	r8
 8015b28:	3001      	adds	r0, #1
 8015b2a:	d0e6      	beq.n	8015afa <_printf_common+0xb2>
 8015b2c:	f109 0901 	add.w	r9, r9, #1
 8015b30:	e7d8      	b.n	8015ae4 <_printf_common+0x9c>
	...

08015b34 <_printf_i>:
 8015b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015b3c:	460c      	mov	r4, r1
 8015b3e:	7e09      	ldrb	r1, [r1, #24]
 8015b40:	b085      	sub	sp, #20
 8015b42:	296e      	cmp	r1, #110	; 0x6e
 8015b44:	4617      	mov	r7, r2
 8015b46:	4606      	mov	r6, r0
 8015b48:	4698      	mov	r8, r3
 8015b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b4c:	f000 80b3 	beq.w	8015cb6 <_printf_i+0x182>
 8015b50:	d822      	bhi.n	8015b98 <_printf_i+0x64>
 8015b52:	2963      	cmp	r1, #99	; 0x63
 8015b54:	d036      	beq.n	8015bc4 <_printf_i+0x90>
 8015b56:	d80a      	bhi.n	8015b6e <_printf_i+0x3a>
 8015b58:	2900      	cmp	r1, #0
 8015b5a:	f000 80b9 	beq.w	8015cd0 <_printf_i+0x19c>
 8015b5e:	2958      	cmp	r1, #88	; 0x58
 8015b60:	f000 8083 	beq.w	8015c6a <_printf_i+0x136>
 8015b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015b6c:	e032      	b.n	8015bd4 <_printf_i+0xa0>
 8015b6e:	2964      	cmp	r1, #100	; 0x64
 8015b70:	d001      	beq.n	8015b76 <_printf_i+0x42>
 8015b72:	2969      	cmp	r1, #105	; 0x69
 8015b74:	d1f6      	bne.n	8015b64 <_printf_i+0x30>
 8015b76:	6820      	ldr	r0, [r4, #0]
 8015b78:	6813      	ldr	r3, [r2, #0]
 8015b7a:	0605      	lsls	r5, r0, #24
 8015b7c:	f103 0104 	add.w	r1, r3, #4
 8015b80:	d52a      	bpl.n	8015bd8 <_printf_i+0xa4>
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	6011      	str	r1, [r2, #0]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	da03      	bge.n	8015b92 <_printf_i+0x5e>
 8015b8a:	222d      	movs	r2, #45	; 0x2d
 8015b8c:	425b      	negs	r3, r3
 8015b8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015b92:	486f      	ldr	r0, [pc, #444]	; (8015d50 <_printf_i+0x21c>)
 8015b94:	220a      	movs	r2, #10
 8015b96:	e039      	b.n	8015c0c <_printf_i+0xd8>
 8015b98:	2973      	cmp	r1, #115	; 0x73
 8015b9a:	f000 809d 	beq.w	8015cd8 <_printf_i+0x1a4>
 8015b9e:	d808      	bhi.n	8015bb2 <_printf_i+0x7e>
 8015ba0:	296f      	cmp	r1, #111	; 0x6f
 8015ba2:	d020      	beq.n	8015be6 <_printf_i+0xb2>
 8015ba4:	2970      	cmp	r1, #112	; 0x70
 8015ba6:	d1dd      	bne.n	8015b64 <_printf_i+0x30>
 8015ba8:	6823      	ldr	r3, [r4, #0]
 8015baa:	f043 0320 	orr.w	r3, r3, #32
 8015bae:	6023      	str	r3, [r4, #0]
 8015bb0:	e003      	b.n	8015bba <_printf_i+0x86>
 8015bb2:	2975      	cmp	r1, #117	; 0x75
 8015bb4:	d017      	beq.n	8015be6 <_printf_i+0xb2>
 8015bb6:	2978      	cmp	r1, #120	; 0x78
 8015bb8:	d1d4      	bne.n	8015b64 <_printf_i+0x30>
 8015bba:	2378      	movs	r3, #120	; 0x78
 8015bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015bc0:	4864      	ldr	r0, [pc, #400]	; (8015d54 <_printf_i+0x220>)
 8015bc2:	e055      	b.n	8015c70 <_printf_i+0x13c>
 8015bc4:	6813      	ldr	r3, [r2, #0]
 8015bc6:	1d19      	adds	r1, r3, #4
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	6011      	str	r1, [r2, #0]
 8015bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e08c      	b.n	8015cf2 <_printf_i+0x1be>
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	6011      	str	r1, [r2, #0]
 8015bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015be0:	bf18      	it	ne
 8015be2:	b21b      	sxthne	r3, r3
 8015be4:	e7cf      	b.n	8015b86 <_printf_i+0x52>
 8015be6:	6813      	ldr	r3, [r2, #0]
 8015be8:	6825      	ldr	r5, [r4, #0]
 8015bea:	1d18      	adds	r0, r3, #4
 8015bec:	6010      	str	r0, [r2, #0]
 8015bee:	0628      	lsls	r0, r5, #24
 8015bf0:	d501      	bpl.n	8015bf6 <_printf_i+0xc2>
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	e002      	b.n	8015bfc <_printf_i+0xc8>
 8015bf6:	0668      	lsls	r0, r5, #25
 8015bf8:	d5fb      	bpl.n	8015bf2 <_printf_i+0xbe>
 8015bfa:	881b      	ldrh	r3, [r3, #0]
 8015bfc:	4854      	ldr	r0, [pc, #336]	; (8015d50 <_printf_i+0x21c>)
 8015bfe:	296f      	cmp	r1, #111	; 0x6f
 8015c00:	bf14      	ite	ne
 8015c02:	220a      	movne	r2, #10
 8015c04:	2208      	moveq	r2, #8
 8015c06:	2100      	movs	r1, #0
 8015c08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c0c:	6865      	ldr	r5, [r4, #4]
 8015c0e:	60a5      	str	r5, [r4, #8]
 8015c10:	2d00      	cmp	r5, #0
 8015c12:	f2c0 8095 	blt.w	8015d40 <_printf_i+0x20c>
 8015c16:	6821      	ldr	r1, [r4, #0]
 8015c18:	f021 0104 	bic.w	r1, r1, #4
 8015c1c:	6021      	str	r1, [r4, #0]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d13d      	bne.n	8015c9e <_printf_i+0x16a>
 8015c22:	2d00      	cmp	r5, #0
 8015c24:	f040 808e 	bne.w	8015d44 <_printf_i+0x210>
 8015c28:	4665      	mov	r5, ip
 8015c2a:	2a08      	cmp	r2, #8
 8015c2c:	d10b      	bne.n	8015c46 <_printf_i+0x112>
 8015c2e:	6823      	ldr	r3, [r4, #0]
 8015c30:	07db      	lsls	r3, r3, #31
 8015c32:	d508      	bpl.n	8015c46 <_printf_i+0x112>
 8015c34:	6923      	ldr	r3, [r4, #16]
 8015c36:	6862      	ldr	r2, [r4, #4]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	bfde      	ittt	le
 8015c3c:	2330      	movle	r3, #48	; 0x30
 8015c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015c42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015c46:	ebac 0305 	sub.w	r3, ip, r5
 8015c4a:	6123      	str	r3, [r4, #16]
 8015c4c:	f8cd 8000 	str.w	r8, [sp]
 8015c50:	463b      	mov	r3, r7
 8015c52:	aa03      	add	r2, sp, #12
 8015c54:	4621      	mov	r1, r4
 8015c56:	4630      	mov	r0, r6
 8015c58:	f7ff fef6 	bl	8015a48 <_printf_common>
 8015c5c:	3001      	adds	r0, #1
 8015c5e:	d14d      	bne.n	8015cfc <_printf_i+0x1c8>
 8015c60:	f04f 30ff 	mov.w	r0, #4294967295
 8015c64:	b005      	add	sp, #20
 8015c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c6a:	4839      	ldr	r0, [pc, #228]	; (8015d50 <_printf_i+0x21c>)
 8015c6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015c70:	6813      	ldr	r3, [r2, #0]
 8015c72:	6821      	ldr	r1, [r4, #0]
 8015c74:	1d1d      	adds	r5, r3, #4
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	6015      	str	r5, [r2, #0]
 8015c7a:	060a      	lsls	r2, r1, #24
 8015c7c:	d50b      	bpl.n	8015c96 <_printf_i+0x162>
 8015c7e:	07ca      	lsls	r2, r1, #31
 8015c80:	bf44      	itt	mi
 8015c82:	f041 0120 	orrmi.w	r1, r1, #32
 8015c86:	6021      	strmi	r1, [r4, #0]
 8015c88:	b91b      	cbnz	r3, 8015c92 <_printf_i+0x15e>
 8015c8a:	6822      	ldr	r2, [r4, #0]
 8015c8c:	f022 0220 	bic.w	r2, r2, #32
 8015c90:	6022      	str	r2, [r4, #0]
 8015c92:	2210      	movs	r2, #16
 8015c94:	e7b7      	b.n	8015c06 <_printf_i+0xd2>
 8015c96:	064d      	lsls	r5, r1, #25
 8015c98:	bf48      	it	mi
 8015c9a:	b29b      	uxthmi	r3, r3
 8015c9c:	e7ef      	b.n	8015c7e <_printf_i+0x14a>
 8015c9e:	4665      	mov	r5, ip
 8015ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8015ca4:	fb02 3311 	mls	r3, r2, r1, r3
 8015ca8:	5cc3      	ldrb	r3, [r0, r3]
 8015caa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015cae:	460b      	mov	r3, r1
 8015cb0:	2900      	cmp	r1, #0
 8015cb2:	d1f5      	bne.n	8015ca0 <_printf_i+0x16c>
 8015cb4:	e7b9      	b.n	8015c2a <_printf_i+0xf6>
 8015cb6:	6813      	ldr	r3, [r2, #0]
 8015cb8:	6825      	ldr	r5, [r4, #0]
 8015cba:	6961      	ldr	r1, [r4, #20]
 8015cbc:	1d18      	adds	r0, r3, #4
 8015cbe:	6010      	str	r0, [r2, #0]
 8015cc0:	0628      	lsls	r0, r5, #24
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	d501      	bpl.n	8015cca <_printf_i+0x196>
 8015cc6:	6019      	str	r1, [r3, #0]
 8015cc8:	e002      	b.n	8015cd0 <_printf_i+0x19c>
 8015cca:	066a      	lsls	r2, r5, #25
 8015ccc:	d5fb      	bpl.n	8015cc6 <_printf_i+0x192>
 8015cce:	8019      	strh	r1, [r3, #0]
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	6123      	str	r3, [r4, #16]
 8015cd4:	4665      	mov	r5, ip
 8015cd6:	e7b9      	b.n	8015c4c <_printf_i+0x118>
 8015cd8:	6813      	ldr	r3, [r2, #0]
 8015cda:	1d19      	adds	r1, r3, #4
 8015cdc:	6011      	str	r1, [r2, #0]
 8015cde:	681d      	ldr	r5, [r3, #0]
 8015ce0:	6862      	ldr	r2, [r4, #4]
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	f7ea fa93 	bl	8000210 <memchr>
 8015cea:	b108      	cbz	r0, 8015cf0 <_printf_i+0x1bc>
 8015cec:	1b40      	subs	r0, r0, r5
 8015cee:	6060      	str	r0, [r4, #4]
 8015cf0:	6863      	ldr	r3, [r4, #4]
 8015cf2:	6123      	str	r3, [r4, #16]
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cfa:	e7a7      	b.n	8015c4c <_printf_i+0x118>
 8015cfc:	6923      	ldr	r3, [r4, #16]
 8015cfe:	462a      	mov	r2, r5
 8015d00:	4639      	mov	r1, r7
 8015d02:	4630      	mov	r0, r6
 8015d04:	47c0      	blx	r8
 8015d06:	3001      	adds	r0, #1
 8015d08:	d0aa      	beq.n	8015c60 <_printf_i+0x12c>
 8015d0a:	6823      	ldr	r3, [r4, #0]
 8015d0c:	079b      	lsls	r3, r3, #30
 8015d0e:	d413      	bmi.n	8015d38 <_printf_i+0x204>
 8015d10:	68e0      	ldr	r0, [r4, #12]
 8015d12:	9b03      	ldr	r3, [sp, #12]
 8015d14:	4298      	cmp	r0, r3
 8015d16:	bfb8      	it	lt
 8015d18:	4618      	movlt	r0, r3
 8015d1a:	e7a3      	b.n	8015c64 <_printf_i+0x130>
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	464a      	mov	r2, r9
 8015d20:	4639      	mov	r1, r7
 8015d22:	4630      	mov	r0, r6
 8015d24:	47c0      	blx	r8
 8015d26:	3001      	adds	r0, #1
 8015d28:	d09a      	beq.n	8015c60 <_printf_i+0x12c>
 8015d2a:	3501      	adds	r5, #1
 8015d2c:	68e3      	ldr	r3, [r4, #12]
 8015d2e:	9a03      	ldr	r2, [sp, #12]
 8015d30:	1a9b      	subs	r3, r3, r2
 8015d32:	42ab      	cmp	r3, r5
 8015d34:	dcf2      	bgt.n	8015d1c <_printf_i+0x1e8>
 8015d36:	e7eb      	b.n	8015d10 <_printf_i+0x1dc>
 8015d38:	2500      	movs	r5, #0
 8015d3a:	f104 0919 	add.w	r9, r4, #25
 8015d3e:	e7f5      	b.n	8015d2c <_printf_i+0x1f8>
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d1ac      	bne.n	8015c9e <_printf_i+0x16a>
 8015d44:	7803      	ldrb	r3, [r0, #0]
 8015d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d4e:	e76c      	b.n	8015c2a <_printf_i+0xf6>
 8015d50:	0801a148 	.word	0x0801a148
 8015d54:	0801a159 	.word	0x0801a159

08015d58 <_scanf_float>:
 8015d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5c:	469a      	mov	sl, r3
 8015d5e:	688b      	ldr	r3, [r1, #8]
 8015d60:	4616      	mov	r6, r2
 8015d62:	1e5a      	subs	r2, r3, #1
 8015d64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015d68:	b087      	sub	sp, #28
 8015d6a:	bf83      	ittte	hi
 8015d6c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015d70:	189b      	addhi	r3, r3, r2
 8015d72:	9301      	strhi	r3, [sp, #4]
 8015d74:	2300      	movls	r3, #0
 8015d76:	bf86      	itte	hi
 8015d78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015d7c:	608b      	strhi	r3, [r1, #8]
 8015d7e:	9301      	strls	r3, [sp, #4]
 8015d80:	680b      	ldr	r3, [r1, #0]
 8015d82:	4688      	mov	r8, r1
 8015d84:	f04f 0b00 	mov.w	fp, #0
 8015d88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015d8c:	f848 3b1c 	str.w	r3, [r8], #28
 8015d90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015d94:	4607      	mov	r7, r0
 8015d96:	460c      	mov	r4, r1
 8015d98:	4645      	mov	r5, r8
 8015d9a:	465a      	mov	r2, fp
 8015d9c:	46d9      	mov	r9, fp
 8015d9e:	f8cd b008 	str.w	fp, [sp, #8]
 8015da2:	68a1      	ldr	r1, [r4, #8]
 8015da4:	b181      	cbz	r1, 8015dc8 <_scanf_float+0x70>
 8015da6:	6833      	ldr	r3, [r6, #0]
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b49      	cmp	r3, #73	; 0x49
 8015dac:	d071      	beq.n	8015e92 <_scanf_float+0x13a>
 8015dae:	d84d      	bhi.n	8015e4c <_scanf_float+0xf4>
 8015db0:	2b39      	cmp	r3, #57	; 0x39
 8015db2:	d840      	bhi.n	8015e36 <_scanf_float+0xde>
 8015db4:	2b31      	cmp	r3, #49	; 0x31
 8015db6:	f080 8088 	bcs.w	8015eca <_scanf_float+0x172>
 8015dba:	2b2d      	cmp	r3, #45	; 0x2d
 8015dbc:	f000 8090 	beq.w	8015ee0 <_scanf_float+0x188>
 8015dc0:	d815      	bhi.n	8015dee <_scanf_float+0x96>
 8015dc2:	2b2b      	cmp	r3, #43	; 0x2b
 8015dc4:	f000 808c 	beq.w	8015ee0 <_scanf_float+0x188>
 8015dc8:	f1b9 0f00 	cmp.w	r9, #0
 8015dcc:	d003      	beq.n	8015dd6 <_scanf_float+0x7e>
 8015dce:	6823      	ldr	r3, [r4, #0]
 8015dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015dd4:	6023      	str	r3, [r4, #0]
 8015dd6:	3a01      	subs	r2, #1
 8015dd8:	2a01      	cmp	r2, #1
 8015dda:	f200 80ea 	bhi.w	8015fb2 <_scanf_float+0x25a>
 8015dde:	4545      	cmp	r5, r8
 8015de0:	f200 80dc 	bhi.w	8015f9c <_scanf_float+0x244>
 8015de4:	2601      	movs	r6, #1
 8015de6:	4630      	mov	r0, r6
 8015de8:	b007      	add	sp, #28
 8015dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dee:	2b2e      	cmp	r3, #46	; 0x2e
 8015df0:	f000 809f 	beq.w	8015f32 <_scanf_float+0x1da>
 8015df4:	2b30      	cmp	r3, #48	; 0x30
 8015df6:	d1e7      	bne.n	8015dc8 <_scanf_float+0x70>
 8015df8:	6820      	ldr	r0, [r4, #0]
 8015dfa:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015dfe:	d064      	beq.n	8015eca <_scanf_float+0x172>
 8015e00:	9b01      	ldr	r3, [sp, #4]
 8015e02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015e06:	6020      	str	r0, [r4, #0]
 8015e08:	f109 0901 	add.w	r9, r9, #1
 8015e0c:	b11b      	cbz	r3, 8015e16 <_scanf_float+0xbe>
 8015e0e:	3b01      	subs	r3, #1
 8015e10:	3101      	adds	r1, #1
 8015e12:	9301      	str	r3, [sp, #4]
 8015e14:	60a1      	str	r1, [r4, #8]
 8015e16:	68a3      	ldr	r3, [r4, #8]
 8015e18:	3b01      	subs	r3, #1
 8015e1a:	60a3      	str	r3, [r4, #8]
 8015e1c:	6923      	ldr	r3, [r4, #16]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	6123      	str	r3, [r4, #16]
 8015e22:	6873      	ldr	r3, [r6, #4]
 8015e24:	3b01      	subs	r3, #1
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	6073      	str	r3, [r6, #4]
 8015e2a:	f340 80ac 	ble.w	8015f86 <_scanf_float+0x22e>
 8015e2e:	6833      	ldr	r3, [r6, #0]
 8015e30:	3301      	adds	r3, #1
 8015e32:	6033      	str	r3, [r6, #0]
 8015e34:	e7b5      	b.n	8015da2 <_scanf_float+0x4a>
 8015e36:	2b45      	cmp	r3, #69	; 0x45
 8015e38:	f000 8085 	beq.w	8015f46 <_scanf_float+0x1ee>
 8015e3c:	2b46      	cmp	r3, #70	; 0x46
 8015e3e:	d06a      	beq.n	8015f16 <_scanf_float+0x1be>
 8015e40:	2b41      	cmp	r3, #65	; 0x41
 8015e42:	d1c1      	bne.n	8015dc8 <_scanf_float+0x70>
 8015e44:	2a01      	cmp	r2, #1
 8015e46:	d1bf      	bne.n	8015dc8 <_scanf_float+0x70>
 8015e48:	2202      	movs	r2, #2
 8015e4a:	e046      	b.n	8015eda <_scanf_float+0x182>
 8015e4c:	2b65      	cmp	r3, #101	; 0x65
 8015e4e:	d07a      	beq.n	8015f46 <_scanf_float+0x1ee>
 8015e50:	d818      	bhi.n	8015e84 <_scanf_float+0x12c>
 8015e52:	2b54      	cmp	r3, #84	; 0x54
 8015e54:	d066      	beq.n	8015f24 <_scanf_float+0x1cc>
 8015e56:	d811      	bhi.n	8015e7c <_scanf_float+0x124>
 8015e58:	2b4e      	cmp	r3, #78	; 0x4e
 8015e5a:	d1b5      	bne.n	8015dc8 <_scanf_float+0x70>
 8015e5c:	2a00      	cmp	r2, #0
 8015e5e:	d146      	bne.n	8015eee <_scanf_float+0x196>
 8015e60:	f1b9 0f00 	cmp.w	r9, #0
 8015e64:	d145      	bne.n	8015ef2 <_scanf_float+0x19a>
 8015e66:	6821      	ldr	r1, [r4, #0]
 8015e68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015e6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015e70:	d13f      	bne.n	8015ef2 <_scanf_float+0x19a>
 8015e72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015e76:	6021      	str	r1, [r4, #0]
 8015e78:	2201      	movs	r2, #1
 8015e7a:	e02e      	b.n	8015eda <_scanf_float+0x182>
 8015e7c:	2b59      	cmp	r3, #89	; 0x59
 8015e7e:	d01e      	beq.n	8015ebe <_scanf_float+0x166>
 8015e80:	2b61      	cmp	r3, #97	; 0x61
 8015e82:	e7de      	b.n	8015e42 <_scanf_float+0xea>
 8015e84:	2b6e      	cmp	r3, #110	; 0x6e
 8015e86:	d0e9      	beq.n	8015e5c <_scanf_float+0x104>
 8015e88:	d815      	bhi.n	8015eb6 <_scanf_float+0x15e>
 8015e8a:	2b66      	cmp	r3, #102	; 0x66
 8015e8c:	d043      	beq.n	8015f16 <_scanf_float+0x1be>
 8015e8e:	2b69      	cmp	r3, #105	; 0x69
 8015e90:	d19a      	bne.n	8015dc8 <_scanf_float+0x70>
 8015e92:	f1bb 0f00 	cmp.w	fp, #0
 8015e96:	d138      	bne.n	8015f0a <_scanf_float+0x1b2>
 8015e98:	f1b9 0f00 	cmp.w	r9, #0
 8015e9c:	d197      	bne.n	8015dce <_scanf_float+0x76>
 8015e9e:	6821      	ldr	r1, [r4, #0]
 8015ea0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015ea4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ea8:	d195      	bne.n	8015dd6 <_scanf_float+0x7e>
 8015eaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015eae:	6021      	str	r1, [r4, #0]
 8015eb0:	f04f 0b01 	mov.w	fp, #1
 8015eb4:	e011      	b.n	8015eda <_scanf_float+0x182>
 8015eb6:	2b74      	cmp	r3, #116	; 0x74
 8015eb8:	d034      	beq.n	8015f24 <_scanf_float+0x1cc>
 8015eba:	2b79      	cmp	r3, #121	; 0x79
 8015ebc:	d184      	bne.n	8015dc8 <_scanf_float+0x70>
 8015ebe:	f1bb 0f07 	cmp.w	fp, #7
 8015ec2:	d181      	bne.n	8015dc8 <_scanf_float+0x70>
 8015ec4:	f04f 0b08 	mov.w	fp, #8
 8015ec8:	e007      	b.n	8015eda <_scanf_float+0x182>
 8015eca:	eb12 0f0b 	cmn.w	r2, fp
 8015ece:	f47f af7b 	bne.w	8015dc8 <_scanf_float+0x70>
 8015ed2:	6821      	ldr	r1, [r4, #0]
 8015ed4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015ed8:	6021      	str	r1, [r4, #0]
 8015eda:	702b      	strb	r3, [r5, #0]
 8015edc:	3501      	adds	r5, #1
 8015ede:	e79a      	b.n	8015e16 <_scanf_float+0xbe>
 8015ee0:	6821      	ldr	r1, [r4, #0]
 8015ee2:	0608      	lsls	r0, r1, #24
 8015ee4:	f57f af70 	bpl.w	8015dc8 <_scanf_float+0x70>
 8015ee8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015eec:	e7f4      	b.n	8015ed8 <_scanf_float+0x180>
 8015eee:	2a02      	cmp	r2, #2
 8015ef0:	d047      	beq.n	8015f82 <_scanf_float+0x22a>
 8015ef2:	f1bb 0f01 	cmp.w	fp, #1
 8015ef6:	d003      	beq.n	8015f00 <_scanf_float+0x1a8>
 8015ef8:	f1bb 0f04 	cmp.w	fp, #4
 8015efc:	f47f af64 	bne.w	8015dc8 <_scanf_float+0x70>
 8015f00:	f10b 0b01 	add.w	fp, fp, #1
 8015f04:	fa5f fb8b 	uxtb.w	fp, fp
 8015f08:	e7e7      	b.n	8015eda <_scanf_float+0x182>
 8015f0a:	f1bb 0f03 	cmp.w	fp, #3
 8015f0e:	d0f7      	beq.n	8015f00 <_scanf_float+0x1a8>
 8015f10:	f1bb 0f05 	cmp.w	fp, #5
 8015f14:	e7f2      	b.n	8015efc <_scanf_float+0x1a4>
 8015f16:	f1bb 0f02 	cmp.w	fp, #2
 8015f1a:	f47f af55 	bne.w	8015dc8 <_scanf_float+0x70>
 8015f1e:	f04f 0b03 	mov.w	fp, #3
 8015f22:	e7da      	b.n	8015eda <_scanf_float+0x182>
 8015f24:	f1bb 0f06 	cmp.w	fp, #6
 8015f28:	f47f af4e 	bne.w	8015dc8 <_scanf_float+0x70>
 8015f2c:	f04f 0b07 	mov.w	fp, #7
 8015f30:	e7d3      	b.n	8015eda <_scanf_float+0x182>
 8015f32:	6821      	ldr	r1, [r4, #0]
 8015f34:	0588      	lsls	r0, r1, #22
 8015f36:	f57f af47 	bpl.w	8015dc8 <_scanf_float+0x70>
 8015f3a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015f3e:	6021      	str	r1, [r4, #0]
 8015f40:	f8cd 9008 	str.w	r9, [sp, #8]
 8015f44:	e7c9      	b.n	8015eda <_scanf_float+0x182>
 8015f46:	6821      	ldr	r1, [r4, #0]
 8015f48:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015f4c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015f50:	d006      	beq.n	8015f60 <_scanf_float+0x208>
 8015f52:	0548      	lsls	r0, r1, #21
 8015f54:	f57f af38 	bpl.w	8015dc8 <_scanf_float+0x70>
 8015f58:	f1b9 0f00 	cmp.w	r9, #0
 8015f5c:	f43f af3b 	beq.w	8015dd6 <_scanf_float+0x7e>
 8015f60:	0588      	lsls	r0, r1, #22
 8015f62:	bf58      	it	pl
 8015f64:	9802      	ldrpl	r0, [sp, #8]
 8015f66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015f6a:	bf58      	it	pl
 8015f6c:	eba9 0000 	subpl.w	r0, r9, r0
 8015f70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015f74:	bf58      	it	pl
 8015f76:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015f7a:	6021      	str	r1, [r4, #0]
 8015f7c:	f04f 0900 	mov.w	r9, #0
 8015f80:	e7ab      	b.n	8015eda <_scanf_float+0x182>
 8015f82:	2203      	movs	r2, #3
 8015f84:	e7a9      	b.n	8015eda <_scanf_float+0x182>
 8015f86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015f8a:	9205      	str	r2, [sp, #20]
 8015f8c:	4631      	mov	r1, r6
 8015f8e:	4638      	mov	r0, r7
 8015f90:	4798      	blx	r3
 8015f92:	9a05      	ldr	r2, [sp, #20]
 8015f94:	2800      	cmp	r0, #0
 8015f96:	f43f af04 	beq.w	8015da2 <_scanf_float+0x4a>
 8015f9a:	e715      	b.n	8015dc8 <_scanf_float+0x70>
 8015f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015fa0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015fa4:	4632      	mov	r2, r6
 8015fa6:	4638      	mov	r0, r7
 8015fa8:	4798      	blx	r3
 8015faa:	6923      	ldr	r3, [r4, #16]
 8015fac:	3b01      	subs	r3, #1
 8015fae:	6123      	str	r3, [r4, #16]
 8015fb0:	e715      	b.n	8015dde <_scanf_float+0x86>
 8015fb2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015fb6:	2b06      	cmp	r3, #6
 8015fb8:	d80a      	bhi.n	8015fd0 <_scanf_float+0x278>
 8015fba:	f1bb 0f02 	cmp.w	fp, #2
 8015fbe:	d968      	bls.n	8016092 <_scanf_float+0x33a>
 8015fc0:	f1ab 0b03 	sub.w	fp, fp, #3
 8015fc4:	fa5f fb8b 	uxtb.w	fp, fp
 8015fc8:	eba5 0b0b 	sub.w	fp, r5, fp
 8015fcc:	455d      	cmp	r5, fp
 8015fce:	d14b      	bne.n	8016068 <_scanf_float+0x310>
 8015fd0:	6823      	ldr	r3, [r4, #0]
 8015fd2:	05da      	lsls	r2, r3, #23
 8015fd4:	d51f      	bpl.n	8016016 <_scanf_float+0x2be>
 8015fd6:	055b      	lsls	r3, r3, #21
 8015fd8:	d468      	bmi.n	80160ac <_scanf_float+0x354>
 8015fda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015fde:	6923      	ldr	r3, [r4, #16]
 8015fe0:	2965      	cmp	r1, #101	; 0x65
 8015fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8015fe6:	f105 3bff 	add.w	fp, r5, #4294967295
 8015fea:	6123      	str	r3, [r4, #16]
 8015fec:	d00d      	beq.n	801600a <_scanf_float+0x2b2>
 8015fee:	2945      	cmp	r1, #69	; 0x45
 8015ff0:	d00b      	beq.n	801600a <_scanf_float+0x2b2>
 8015ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ff6:	4632      	mov	r2, r6
 8015ff8:	4638      	mov	r0, r7
 8015ffa:	4798      	blx	r3
 8015ffc:	6923      	ldr	r3, [r4, #16]
 8015ffe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016002:	3b01      	subs	r3, #1
 8016004:	f1a5 0b02 	sub.w	fp, r5, #2
 8016008:	6123      	str	r3, [r4, #16]
 801600a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801600e:	4632      	mov	r2, r6
 8016010:	4638      	mov	r0, r7
 8016012:	4798      	blx	r3
 8016014:	465d      	mov	r5, fp
 8016016:	6826      	ldr	r6, [r4, #0]
 8016018:	f016 0610 	ands.w	r6, r6, #16
 801601c:	d17a      	bne.n	8016114 <_scanf_float+0x3bc>
 801601e:	702e      	strb	r6, [r5, #0]
 8016020:	6823      	ldr	r3, [r4, #0]
 8016022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801602a:	d142      	bne.n	80160b2 <_scanf_float+0x35a>
 801602c:	9b02      	ldr	r3, [sp, #8]
 801602e:	eba9 0303 	sub.w	r3, r9, r3
 8016032:	425a      	negs	r2, r3
 8016034:	2b00      	cmp	r3, #0
 8016036:	d149      	bne.n	80160cc <_scanf_float+0x374>
 8016038:	2200      	movs	r2, #0
 801603a:	4641      	mov	r1, r8
 801603c:	4638      	mov	r0, r7
 801603e:	f000 ff0b 	bl	8016e58 <_strtod_r>
 8016042:	6825      	ldr	r5, [r4, #0]
 8016044:	f8da 3000 	ldr.w	r3, [sl]
 8016048:	f015 0f02 	tst.w	r5, #2
 801604c:	f103 0204 	add.w	r2, r3, #4
 8016050:	ec59 8b10 	vmov	r8, r9, d0
 8016054:	f8ca 2000 	str.w	r2, [sl]
 8016058:	d043      	beq.n	80160e2 <_scanf_float+0x38a>
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	e9c3 8900 	strd	r8, r9, [r3]
 8016060:	68e3      	ldr	r3, [r4, #12]
 8016062:	3301      	adds	r3, #1
 8016064:	60e3      	str	r3, [r4, #12]
 8016066:	e6be      	b.n	8015de6 <_scanf_float+0x8e>
 8016068:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801606c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016070:	4632      	mov	r2, r6
 8016072:	4638      	mov	r0, r7
 8016074:	4798      	blx	r3
 8016076:	6923      	ldr	r3, [r4, #16]
 8016078:	3b01      	subs	r3, #1
 801607a:	6123      	str	r3, [r4, #16]
 801607c:	e7a6      	b.n	8015fcc <_scanf_float+0x274>
 801607e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016082:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016086:	4632      	mov	r2, r6
 8016088:	4638      	mov	r0, r7
 801608a:	4798      	blx	r3
 801608c:	6923      	ldr	r3, [r4, #16]
 801608e:	3b01      	subs	r3, #1
 8016090:	6123      	str	r3, [r4, #16]
 8016092:	4545      	cmp	r5, r8
 8016094:	d8f3      	bhi.n	801607e <_scanf_float+0x326>
 8016096:	e6a5      	b.n	8015de4 <_scanf_float+0x8c>
 8016098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801609c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80160a0:	4632      	mov	r2, r6
 80160a2:	4638      	mov	r0, r7
 80160a4:	4798      	blx	r3
 80160a6:	6923      	ldr	r3, [r4, #16]
 80160a8:	3b01      	subs	r3, #1
 80160aa:	6123      	str	r3, [r4, #16]
 80160ac:	4545      	cmp	r5, r8
 80160ae:	d8f3      	bhi.n	8016098 <_scanf_float+0x340>
 80160b0:	e698      	b.n	8015de4 <_scanf_float+0x8c>
 80160b2:	9b03      	ldr	r3, [sp, #12]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d0bf      	beq.n	8016038 <_scanf_float+0x2e0>
 80160b8:	9904      	ldr	r1, [sp, #16]
 80160ba:	230a      	movs	r3, #10
 80160bc:	4632      	mov	r2, r6
 80160be:	3101      	adds	r1, #1
 80160c0:	4638      	mov	r0, r7
 80160c2:	f000 ff55 	bl	8016f70 <_strtol_r>
 80160c6:	9b03      	ldr	r3, [sp, #12]
 80160c8:	9d04      	ldr	r5, [sp, #16]
 80160ca:	1ac2      	subs	r2, r0, r3
 80160cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80160d0:	429d      	cmp	r5, r3
 80160d2:	bf28      	it	cs
 80160d4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80160d8:	490f      	ldr	r1, [pc, #60]	; (8016118 <_scanf_float+0x3c0>)
 80160da:	4628      	mov	r0, r5
 80160dc:	f000 f858 	bl	8016190 <siprintf>
 80160e0:	e7aa      	b.n	8016038 <_scanf_float+0x2e0>
 80160e2:	f015 0504 	ands.w	r5, r5, #4
 80160e6:	d1b8      	bne.n	801605a <_scanf_float+0x302>
 80160e8:	681f      	ldr	r7, [r3, #0]
 80160ea:	ee10 2a10 	vmov	r2, s0
 80160ee:	464b      	mov	r3, r9
 80160f0:	ee10 0a10 	vmov	r0, s0
 80160f4:	4649      	mov	r1, r9
 80160f6:	f7ea fd31 	bl	8000b5c <__aeabi_dcmpun>
 80160fa:	b128      	cbz	r0, 8016108 <_scanf_float+0x3b0>
 80160fc:	4628      	mov	r0, r5
 80160fe:	f000 f80d 	bl	801611c <nanf>
 8016102:	ed87 0a00 	vstr	s0, [r7]
 8016106:	e7ab      	b.n	8016060 <_scanf_float+0x308>
 8016108:	4640      	mov	r0, r8
 801610a:	4649      	mov	r1, r9
 801610c:	f7ea fd84 	bl	8000c18 <__aeabi_d2f>
 8016110:	6038      	str	r0, [r7, #0]
 8016112:	e7a5      	b.n	8016060 <_scanf_float+0x308>
 8016114:	2600      	movs	r6, #0
 8016116:	e666      	b.n	8015de6 <_scanf_float+0x8e>
 8016118:	0801a16a 	.word	0x0801a16a

0801611c <nanf>:
 801611c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016124 <nanf+0x8>
 8016120:	4770      	bx	lr
 8016122:	bf00      	nop
 8016124:	7fc00000 	.word	0x7fc00000

08016128 <sniprintf>:
 8016128:	b40c      	push	{r2, r3}
 801612a:	b530      	push	{r4, r5, lr}
 801612c:	4b17      	ldr	r3, [pc, #92]	; (801618c <sniprintf+0x64>)
 801612e:	1e0c      	subs	r4, r1, #0
 8016130:	b09d      	sub	sp, #116	; 0x74
 8016132:	681d      	ldr	r5, [r3, #0]
 8016134:	da08      	bge.n	8016148 <sniprintf+0x20>
 8016136:	238b      	movs	r3, #139	; 0x8b
 8016138:	602b      	str	r3, [r5, #0]
 801613a:	f04f 30ff 	mov.w	r0, #4294967295
 801613e:	b01d      	add	sp, #116	; 0x74
 8016140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016144:	b002      	add	sp, #8
 8016146:	4770      	bx	lr
 8016148:	f44f 7302 	mov.w	r3, #520	; 0x208
 801614c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016150:	bf14      	ite	ne
 8016152:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016156:	4623      	moveq	r3, r4
 8016158:	9304      	str	r3, [sp, #16]
 801615a:	9307      	str	r3, [sp, #28]
 801615c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016160:	9002      	str	r0, [sp, #8]
 8016162:	9006      	str	r0, [sp, #24]
 8016164:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016168:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801616a:	ab21      	add	r3, sp, #132	; 0x84
 801616c:	a902      	add	r1, sp, #8
 801616e:	4628      	mov	r0, r5
 8016170:	9301      	str	r3, [sp, #4]
 8016172:	f002 fde7 	bl	8018d44 <_svfiprintf_r>
 8016176:	1c43      	adds	r3, r0, #1
 8016178:	bfbc      	itt	lt
 801617a:	238b      	movlt	r3, #139	; 0x8b
 801617c:	602b      	strlt	r3, [r5, #0]
 801617e:	2c00      	cmp	r4, #0
 8016180:	d0dd      	beq.n	801613e <sniprintf+0x16>
 8016182:	9b02      	ldr	r3, [sp, #8]
 8016184:	2200      	movs	r2, #0
 8016186:	701a      	strb	r2, [r3, #0]
 8016188:	e7d9      	b.n	801613e <sniprintf+0x16>
 801618a:	bf00      	nop
 801618c:	2000000c 	.word	0x2000000c

08016190 <siprintf>:
 8016190:	b40e      	push	{r1, r2, r3}
 8016192:	b500      	push	{lr}
 8016194:	b09c      	sub	sp, #112	; 0x70
 8016196:	ab1d      	add	r3, sp, #116	; 0x74
 8016198:	9002      	str	r0, [sp, #8]
 801619a:	9006      	str	r0, [sp, #24]
 801619c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161a0:	4809      	ldr	r0, [pc, #36]	; (80161c8 <siprintf+0x38>)
 80161a2:	9107      	str	r1, [sp, #28]
 80161a4:	9104      	str	r1, [sp, #16]
 80161a6:	4909      	ldr	r1, [pc, #36]	; (80161cc <siprintf+0x3c>)
 80161a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80161ac:	9105      	str	r1, [sp, #20]
 80161ae:	6800      	ldr	r0, [r0, #0]
 80161b0:	9301      	str	r3, [sp, #4]
 80161b2:	a902      	add	r1, sp, #8
 80161b4:	f002 fdc6 	bl	8018d44 <_svfiprintf_r>
 80161b8:	9b02      	ldr	r3, [sp, #8]
 80161ba:	2200      	movs	r2, #0
 80161bc:	701a      	strb	r2, [r3, #0]
 80161be:	b01c      	add	sp, #112	; 0x70
 80161c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80161c4:	b003      	add	sp, #12
 80161c6:	4770      	bx	lr
 80161c8:	2000000c 	.word	0x2000000c
 80161cc:	ffff0208 	.word	0xffff0208

080161d0 <siscanf>:
 80161d0:	b40e      	push	{r1, r2, r3}
 80161d2:	b530      	push	{r4, r5, lr}
 80161d4:	b09c      	sub	sp, #112	; 0x70
 80161d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80161d8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80161dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80161e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80161e4:	9002      	str	r0, [sp, #8]
 80161e6:	9006      	str	r0, [sp, #24]
 80161e8:	f7ea f80a 	bl	8000200 <strlen>
 80161ec:	4b0b      	ldr	r3, [pc, #44]	; (801621c <siscanf+0x4c>)
 80161ee:	9003      	str	r0, [sp, #12]
 80161f0:	9007      	str	r0, [sp, #28]
 80161f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80161f4:	480a      	ldr	r0, [pc, #40]	; (8016220 <siscanf+0x50>)
 80161f6:	9401      	str	r4, [sp, #4]
 80161f8:	2300      	movs	r3, #0
 80161fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80161fc:	9314      	str	r3, [sp, #80]	; 0x50
 80161fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016202:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016206:	462a      	mov	r2, r5
 8016208:	4623      	mov	r3, r4
 801620a:	a902      	add	r1, sp, #8
 801620c:	6800      	ldr	r0, [r0, #0]
 801620e:	f002 feeb 	bl	8018fe8 <__ssvfiscanf_r>
 8016212:	b01c      	add	sp, #112	; 0x70
 8016214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016218:	b003      	add	sp, #12
 801621a:	4770      	bx	lr
 801621c:	08016225 	.word	0x08016225
 8016220:	2000000c 	.word	0x2000000c

08016224 <__seofread>:
 8016224:	2000      	movs	r0, #0
 8016226:	4770      	bx	lr

08016228 <strcpy>:
 8016228:	4603      	mov	r3, r0
 801622a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801622e:	f803 2b01 	strb.w	r2, [r3], #1
 8016232:	2a00      	cmp	r2, #0
 8016234:	d1f9      	bne.n	801622a <strcpy+0x2>
 8016236:	4770      	bx	lr

08016238 <sulp>:
 8016238:	b570      	push	{r4, r5, r6, lr}
 801623a:	4604      	mov	r4, r0
 801623c:	460d      	mov	r5, r1
 801623e:	ec45 4b10 	vmov	d0, r4, r5
 8016242:	4616      	mov	r6, r2
 8016244:	f002 fb3a 	bl	80188bc <__ulp>
 8016248:	ec51 0b10 	vmov	r0, r1, d0
 801624c:	b17e      	cbz	r6, 801626e <sulp+0x36>
 801624e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016256:	2b00      	cmp	r3, #0
 8016258:	dd09      	ble.n	801626e <sulp+0x36>
 801625a:	051b      	lsls	r3, r3, #20
 801625c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016260:	2400      	movs	r4, #0
 8016262:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016266:	4622      	mov	r2, r4
 8016268:	462b      	mov	r3, r5
 801626a:	f7ea f9dd 	bl	8000628 <__aeabi_dmul>
 801626e:	bd70      	pop	{r4, r5, r6, pc}

08016270 <_strtod_l>:
 8016270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016274:	461f      	mov	r7, r3
 8016276:	b0a1      	sub	sp, #132	; 0x84
 8016278:	2300      	movs	r3, #0
 801627a:	4681      	mov	r9, r0
 801627c:	4638      	mov	r0, r7
 801627e:	460e      	mov	r6, r1
 8016280:	9217      	str	r2, [sp, #92]	; 0x5c
 8016282:	931c      	str	r3, [sp, #112]	; 0x70
 8016284:	f002 f824 	bl	80182d0 <__localeconv_l>
 8016288:	4680      	mov	r8, r0
 801628a:	6800      	ldr	r0, [r0, #0]
 801628c:	f7e9 ffb8 	bl	8000200 <strlen>
 8016290:	f04f 0a00 	mov.w	sl, #0
 8016294:	4604      	mov	r4, r0
 8016296:	f04f 0b00 	mov.w	fp, #0
 801629a:	961b      	str	r6, [sp, #108]	; 0x6c
 801629c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801629e:	781a      	ldrb	r2, [r3, #0]
 80162a0:	2a0d      	cmp	r2, #13
 80162a2:	d832      	bhi.n	801630a <_strtod_l+0x9a>
 80162a4:	2a09      	cmp	r2, #9
 80162a6:	d236      	bcs.n	8016316 <_strtod_l+0xa6>
 80162a8:	2a00      	cmp	r2, #0
 80162aa:	d03e      	beq.n	801632a <_strtod_l+0xba>
 80162ac:	2300      	movs	r3, #0
 80162ae:	930d      	str	r3, [sp, #52]	; 0x34
 80162b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80162b2:	782b      	ldrb	r3, [r5, #0]
 80162b4:	2b30      	cmp	r3, #48	; 0x30
 80162b6:	f040 80ac 	bne.w	8016412 <_strtod_l+0x1a2>
 80162ba:	786b      	ldrb	r3, [r5, #1]
 80162bc:	2b58      	cmp	r3, #88	; 0x58
 80162be:	d001      	beq.n	80162c4 <_strtod_l+0x54>
 80162c0:	2b78      	cmp	r3, #120	; 0x78
 80162c2:	d167      	bne.n	8016394 <_strtod_l+0x124>
 80162c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162c6:	9301      	str	r3, [sp, #4]
 80162c8:	ab1c      	add	r3, sp, #112	; 0x70
 80162ca:	9300      	str	r3, [sp, #0]
 80162cc:	9702      	str	r7, [sp, #8]
 80162ce:	ab1d      	add	r3, sp, #116	; 0x74
 80162d0:	4a88      	ldr	r2, [pc, #544]	; (80164f4 <_strtod_l+0x284>)
 80162d2:	a91b      	add	r1, sp, #108	; 0x6c
 80162d4:	4648      	mov	r0, r9
 80162d6:	f001 fd12 	bl	8017cfe <__gethex>
 80162da:	f010 0407 	ands.w	r4, r0, #7
 80162de:	4606      	mov	r6, r0
 80162e0:	d005      	beq.n	80162ee <_strtod_l+0x7e>
 80162e2:	2c06      	cmp	r4, #6
 80162e4:	d12b      	bne.n	801633e <_strtod_l+0xce>
 80162e6:	3501      	adds	r5, #1
 80162e8:	2300      	movs	r3, #0
 80162ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80162ec:	930d      	str	r3, [sp, #52]	; 0x34
 80162ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	f040 859a 	bne.w	8016e2a <_strtod_l+0xbba>
 80162f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162f8:	b1e3      	cbz	r3, 8016334 <_strtod_l+0xc4>
 80162fa:	4652      	mov	r2, sl
 80162fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016300:	ec43 2b10 	vmov	d0, r2, r3
 8016304:	b021      	add	sp, #132	; 0x84
 8016306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801630a:	2a2b      	cmp	r2, #43	; 0x2b
 801630c:	d015      	beq.n	801633a <_strtod_l+0xca>
 801630e:	2a2d      	cmp	r2, #45	; 0x2d
 8016310:	d004      	beq.n	801631c <_strtod_l+0xac>
 8016312:	2a20      	cmp	r2, #32
 8016314:	d1ca      	bne.n	80162ac <_strtod_l+0x3c>
 8016316:	3301      	adds	r3, #1
 8016318:	931b      	str	r3, [sp, #108]	; 0x6c
 801631a:	e7bf      	b.n	801629c <_strtod_l+0x2c>
 801631c:	2201      	movs	r2, #1
 801631e:	920d      	str	r2, [sp, #52]	; 0x34
 8016320:	1c5a      	adds	r2, r3, #1
 8016322:	921b      	str	r2, [sp, #108]	; 0x6c
 8016324:	785b      	ldrb	r3, [r3, #1]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d1c2      	bne.n	80162b0 <_strtod_l+0x40>
 801632a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801632c:	961b      	str	r6, [sp, #108]	; 0x6c
 801632e:	2b00      	cmp	r3, #0
 8016330:	f040 8579 	bne.w	8016e26 <_strtod_l+0xbb6>
 8016334:	4652      	mov	r2, sl
 8016336:	465b      	mov	r3, fp
 8016338:	e7e2      	b.n	8016300 <_strtod_l+0x90>
 801633a:	2200      	movs	r2, #0
 801633c:	e7ef      	b.n	801631e <_strtod_l+0xae>
 801633e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016340:	b13a      	cbz	r2, 8016352 <_strtod_l+0xe2>
 8016342:	2135      	movs	r1, #53	; 0x35
 8016344:	a81e      	add	r0, sp, #120	; 0x78
 8016346:	f002 fbb1 	bl	8018aac <__copybits>
 801634a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801634c:	4648      	mov	r0, r9
 801634e:	f002 f81d 	bl	801838c <_Bfree>
 8016352:	3c01      	subs	r4, #1
 8016354:	2c04      	cmp	r4, #4
 8016356:	d806      	bhi.n	8016366 <_strtod_l+0xf6>
 8016358:	e8df f004 	tbb	[pc, r4]
 801635c:	1714030a 	.word	0x1714030a
 8016360:	0a          	.byte	0x0a
 8016361:	00          	.byte	0x00
 8016362:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016366:	0730      	lsls	r0, r6, #28
 8016368:	d5c1      	bpl.n	80162ee <_strtod_l+0x7e>
 801636a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801636e:	e7be      	b.n	80162ee <_strtod_l+0x7e>
 8016370:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016374:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016376:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801637a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801637e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016382:	e7f0      	b.n	8016366 <_strtod_l+0xf6>
 8016384:	f8df b170 	ldr.w	fp, [pc, #368]	; 80164f8 <_strtod_l+0x288>
 8016388:	e7ed      	b.n	8016366 <_strtod_l+0xf6>
 801638a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801638e:	f04f 3aff 	mov.w	sl, #4294967295
 8016392:	e7e8      	b.n	8016366 <_strtod_l+0xf6>
 8016394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016396:	1c5a      	adds	r2, r3, #1
 8016398:	921b      	str	r2, [sp, #108]	; 0x6c
 801639a:	785b      	ldrb	r3, [r3, #1]
 801639c:	2b30      	cmp	r3, #48	; 0x30
 801639e:	d0f9      	beq.n	8016394 <_strtod_l+0x124>
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d0a4      	beq.n	80162ee <_strtod_l+0x7e>
 80163a4:	2301      	movs	r3, #1
 80163a6:	2500      	movs	r5, #0
 80163a8:	9306      	str	r3, [sp, #24]
 80163aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163ac:	9308      	str	r3, [sp, #32]
 80163ae:	9507      	str	r5, [sp, #28]
 80163b0:	9505      	str	r5, [sp, #20]
 80163b2:	220a      	movs	r2, #10
 80163b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80163b6:	7807      	ldrb	r7, [r0, #0]
 80163b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80163bc:	b2d9      	uxtb	r1, r3
 80163be:	2909      	cmp	r1, #9
 80163c0:	d929      	bls.n	8016416 <_strtod_l+0x1a6>
 80163c2:	4622      	mov	r2, r4
 80163c4:	f8d8 1000 	ldr.w	r1, [r8]
 80163c8:	f003 f8f8 	bl	80195bc <strncmp>
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d031      	beq.n	8016434 <_strtod_l+0x1c4>
 80163d0:	2000      	movs	r0, #0
 80163d2:	9c05      	ldr	r4, [sp, #20]
 80163d4:	9004      	str	r0, [sp, #16]
 80163d6:	463b      	mov	r3, r7
 80163d8:	4602      	mov	r2, r0
 80163da:	2b65      	cmp	r3, #101	; 0x65
 80163dc:	d001      	beq.n	80163e2 <_strtod_l+0x172>
 80163de:	2b45      	cmp	r3, #69	; 0x45
 80163e0:	d114      	bne.n	801640c <_strtod_l+0x19c>
 80163e2:	b924      	cbnz	r4, 80163ee <_strtod_l+0x17e>
 80163e4:	b910      	cbnz	r0, 80163ec <_strtod_l+0x17c>
 80163e6:	9b06      	ldr	r3, [sp, #24]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d09e      	beq.n	801632a <_strtod_l+0xba>
 80163ec:	2400      	movs	r4, #0
 80163ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80163f0:	1c73      	adds	r3, r6, #1
 80163f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80163f4:	7873      	ldrb	r3, [r6, #1]
 80163f6:	2b2b      	cmp	r3, #43	; 0x2b
 80163f8:	d078      	beq.n	80164ec <_strtod_l+0x27c>
 80163fa:	2b2d      	cmp	r3, #45	; 0x2d
 80163fc:	d070      	beq.n	80164e0 <_strtod_l+0x270>
 80163fe:	f04f 0c00 	mov.w	ip, #0
 8016402:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016406:	2f09      	cmp	r7, #9
 8016408:	d97c      	bls.n	8016504 <_strtod_l+0x294>
 801640a:	961b      	str	r6, [sp, #108]	; 0x6c
 801640c:	f04f 0e00 	mov.w	lr, #0
 8016410:	e09a      	b.n	8016548 <_strtod_l+0x2d8>
 8016412:	2300      	movs	r3, #0
 8016414:	e7c7      	b.n	80163a6 <_strtod_l+0x136>
 8016416:	9905      	ldr	r1, [sp, #20]
 8016418:	2908      	cmp	r1, #8
 801641a:	bfdd      	ittte	le
 801641c:	9907      	ldrle	r1, [sp, #28]
 801641e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016422:	9307      	strle	r3, [sp, #28]
 8016424:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016428:	9b05      	ldr	r3, [sp, #20]
 801642a:	3001      	adds	r0, #1
 801642c:	3301      	adds	r3, #1
 801642e:	9305      	str	r3, [sp, #20]
 8016430:	901b      	str	r0, [sp, #108]	; 0x6c
 8016432:	e7bf      	b.n	80163b4 <_strtod_l+0x144>
 8016434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016436:	191a      	adds	r2, r3, r4
 8016438:	921b      	str	r2, [sp, #108]	; 0x6c
 801643a:	9a05      	ldr	r2, [sp, #20]
 801643c:	5d1b      	ldrb	r3, [r3, r4]
 801643e:	2a00      	cmp	r2, #0
 8016440:	d037      	beq.n	80164b2 <_strtod_l+0x242>
 8016442:	9c05      	ldr	r4, [sp, #20]
 8016444:	4602      	mov	r2, r0
 8016446:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801644a:	2909      	cmp	r1, #9
 801644c:	d913      	bls.n	8016476 <_strtod_l+0x206>
 801644e:	2101      	movs	r1, #1
 8016450:	9104      	str	r1, [sp, #16]
 8016452:	e7c2      	b.n	80163da <_strtod_l+0x16a>
 8016454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016456:	1c5a      	adds	r2, r3, #1
 8016458:	921b      	str	r2, [sp, #108]	; 0x6c
 801645a:	785b      	ldrb	r3, [r3, #1]
 801645c:	3001      	adds	r0, #1
 801645e:	2b30      	cmp	r3, #48	; 0x30
 8016460:	d0f8      	beq.n	8016454 <_strtod_l+0x1e4>
 8016462:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016466:	2a08      	cmp	r2, #8
 8016468:	f200 84e4 	bhi.w	8016e34 <_strtod_l+0xbc4>
 801646c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801646e:	9208      	str	r2, [sp, #32]
 8016470:	4602      	mov	r2, r0
 8016472:	2000      	movs	r0, #0
 8016474:	4604      	mov	r4, r0
 8016476:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801647a:	f100 0101 	add.w	r1, r0, #1
 801647e:	d012      	beq.n	80164a6 <_strtod_l+0x236>
 8016480:	440a      	add	r2, r1
 8016482:	eb00 0c04 	add.w	ip, r0, r4
 8016486:	4621      	mov	r1, r4
 8016488:	270a      	movs	r7, #10
 801648a:	458c      	cmp	ip, r1
 801648c:	d113      	bne.n	80164b6 <_strtod_l+0x246>
 801648e:	1821      	adds	r1, r4, r0
 8016490:	2908      	cmp	r1, #8
 8016492:	f104 0401 	add.w	r4, r4, #1
 8016496:	4404      	add	r4, r0
 8016498:	dc19      	bgt.n	80164ce <_strtod_l+0x25e>
 801649a:	9b07      	ldr	r3, [sp, #28]
 801649c:	210a      	movs	r1, #10
 801649e:	fb01 e303 	mla	r3, r1, r3, lr
 80164a2:	9307      	str	r3, [sp, #28]
 80164a4:	2100      	movs	r1, #0
 80164a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164a8:	1c58      	adds	r0, r3, #1
 80164aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80164ac:	785b      	ldrb	r3, [r3, #1]
 80164ae:	4608      	mov	r0, r1
 80164b0:	e7c9      	b.n	8016446 <_strtod_l+0x1d6>
 80164b2:	9805      	ldr	r0, [sp, #20]
 80164b4:	e7d3      	b.n	801645e <_strtod_l+0x1ee>
 80164b6:	2908      	cmp	r1, #8
 80164b8:	f101 0101 	add.w	r1, r1, #1
 80164bc:	dc03      	bgt.n	80164c6 <_strtod_l+0x256>
 80164be:	9b07      	ldr	r3, [sp, #28]
 80164c0:	437b      	muls	r3, r7
 80164c2:	9307      	str	r3, [sp, #28]
 80164c4:	e7e1      	b.n	801648a <_strtod_l+0x21a>
 80164c6:	2910      	cmp	r1, #16
 80164c8:	bfd8      	it	le
 80164ca:	437d      	mulle	r5, r7
 80164cc:	e7dd      	b.n	801648a <_strtod_l+0x21a>
 80164ce:	2c10      	cmp	r4, #16
 80164d0:	bfdc      	itt	le
 80164d2:	210a      	movle	r1, #10
 80164d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80164d8:	e7e4      	b.n	80164a4 <_strtod_l+0x234>
 80164da:	2301      	movs	r3, #1
 80164dc:	9304      	str	r3, [sp, #16]
 80164de:	e781      	b.n	80163e4 <_strtod_l+0x174>
 80164e0:	f04f 0c01 	mov.w	ip, #1
 80164e4:	1cb3      	adds	r3, r6, #2
 80164e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80164e8:	78b3      	ldrb	r3, [r6, #2]
 80164ea:	e78a      	b.n	8016402 <_strtod_l+0x192>
 80164ec:	f04f 0c00 	mov.w	ip, #0
 80164f0:	e7f8      	b.n	80164e4 <_strtod_l+0x274>
 80164f2:	bf00      	nop
 80164f4:	0801a170 	.word	0x0801a170
 80164f8:	7ff00000 	.word	0x7ff00000
 80164fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164fe:	1c5f      	adds	r7, r3, #1
 8016500:	971b      	str	r7, [sp, #108]	; 0x6c
 8016502:	785b      	ldrb	r3, [r3, #1]
 8016504:	2b30      	cmp	r3, #48	; 0x30
 8016506:	d0f9      	beq.n	80164fc <_strtod_l+0x28c>
 8016508:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801650c:	2f08      	cmp	r7, #8
 801650e:	f63f af7d 	bhi.w	801640c <_strtod_l+0x19c>
 8016512:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016518:	930a      	str	r3, [sp, #40]	; 0x28
 801651a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801651c:	1c5f      	adds	r7, r3, #1
 801651e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016520:	785b      	ldrb	r3, [r3, #1]
 8016522:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016526:	f1b8 0f09 	cmp.w	r8, #9
 801652a:	d937      	bls.n	801659c <_strtod_l+0x32c>
 801652c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801652e:	1a7f      	subs	r7, r7, r1
 8016530:	2f08      	cmp	r7, #8
 8016532:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016536:	dc37      	bgt.n	80165a8 <_strtod_l+0x338>
 8016538:	45be      	cmp	lr, r7
 801653a:	bfa8      	it	ge
 801653c:	46be      	movge	lr, r7
 801653e:	f1bc 0f00 	cmp.w	ip, #0
 8016542:	d001      	beq.n	8016548 <_strtod_l+0x2d8>
 8016544:	f1ce 0e00 	rsb	lr, lr, #0
 8016548:	2c00      	cmp	r4, #0
 801654a:	d151      	bne.n	80165f0 <_strtod_l+0x380>
 801654c:	2800      	cmp	r0, #0
 801654e:	f47f aece 	bne.w	80162ee <_strtod_l+0x7e>
 8016552:	9a06      	ldr	r2, [sp, #24]
 8016554:	2a00      	cmp	r2, #0
 8016556:	f47f aeca 	bne.w	80162ee <_strtod_l+0x7e>
 801655a:	9a04      	ldr	r2, [sp, #16]
 801655c:	2a00      	cmp	r2, #0
 801655e:	f47f aee4 	bne.w	801632a <_strtod_l+0xba>
 8016562:	2b4e      	cmp	r3, #78	; 0x4e
 8016564:	d027      	beq.n	80165b6 <_strtod_l+0x346>
 8016566:	dc21      	bgt.n	80165ac <_strtod_l+0x33c>
 8016568:	2b49      	cmp	r3, #73	; 0x49
 801656a:	f47f aede 	bne.w	801632a <_strtod_l+0xba>
 801656e:	49a0      	ldr	r1, [pc, #640]	; (80167f0 <_strtod_l+0x580>)
 8016570:	a81b      	add	r0, sp, #108	; 0x6c
 8016572:	f001 fdf7 	bl	8018164 <__match>
 8016576:	2800      	cmp	r0, #0
 8016578:	f43f aed7 	beq.w	801632a <_strtod_l+0xba>
 801657c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801657e:	499d      	ldr	r1, [pc, #628]	; (80167f4 <_strtod_l+0x584>)
 8016580:	3b01      	subs	r3, #1
 8016582:	a81b      	add	r0, sp, #108	; 0x6c
 8016584:	931b      	str	r3, [sp, #108]	; 0x6c
 8016586:	f001 fded 	bl	8018164 <__match>
 801658a:	b910      	cbnz	r0, 8016592 <_strtod_l+0x322>
 801658c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801658e:	3301      	adds	r3, #1
 8016590:	931b      	str	r3, [sp, #108]	; 0x6c
 8016592:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016808 <_strtod_l+0x598>
 8016596:	f04f 0a00 	mov.w	sl, #0
 801659a:	e6a8      	b.n	80162ee <_strtod_l+0x7e>
 801659c:	210a      	movs	r1, #10
 801659e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80165a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80165a6:	e7b8      	b.n	801651a <_strtod_l+0x2aa>
 80165a8:	46be      	mov	lr, r7
 80165aa:	e7c8      	b.n	801653e <_strtod_l+0x2ce>
 80165ac:	2b69      	cmp	r3, #105	; 0x69
 80165ae:	d0de      	beq.n	801656e <_strtod_l+0x2fe>
 80165b0:	2b6e      	cmp	r3, #110	; 0x6e
 80165b2:	f47f aeba 	bne.w	801632a <_strtod_l+0xba>
 80165b6:	4990      	ldr	r1, [pc, #576]	; (80167f8 <_strtod_l+0x588>)
 80165b8:	a81b      	add	r0, sp, #108	; 0x6c
 80165ba:	f001 fdd3 	bl	8018164 <__match>
 80165be:	2800      	cmp	r0, #0
 80165c0:	f43f aeb3 	beq.w	801632a <_strtod_l+0xba>
 80165c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	2b28      	cmp	r3, #40	; 0x28
 80165ca:	d10e      	bne.n	80165ea <_strtod_l+0x37a>
 80165cc:	aa1e      	add	r2, sp, #120	; 0x78
 80165ce:	498b      	ldr	r1, [pc, #556]	; (80167fc <_strtod_l+0x58c>)
 80165d0:	a81b      	add	r0, sp, #108	; 0x6c
 80165d2:	f001 fddb 	bl	801818c <__hexnan>
 80165d6:	2805      	cmp	r0, #5
 80165d8:	d107      	bne.n	80165ea <_strtod_l+0x37a>
 80165da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80165dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80165e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80165e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80165e8:	e681      	b.n	80162ee <_strtod_l+0x7e>
 80165ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016810 <_strtod_l+0x5a0>
 80165ee:	e7d2      	b.n	8016596 <_strtod_l+0x326>
 80165f0:	ebae 0302 	sub.w	r3, lr, r2
 80165f4:	9306      	str	r3, [sp, #24]
 80165f6:	9b05      	ldr	r3, [sp, #20]
 80165f8:	9807      	ldr	r0, [sp, #28]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	bf08      	it	eq
 80165fe:	4623      	moveq	r3, r4
 8016600:	2c10      	cmp	r4, #16
 8016602:	9305      	str	r3, [sp, #20]
 8016604:	46a0      	mov	r8, r4
 8016606:	bfa8      	it	ge
 8016608:	f04f 0810 	movge.w	r8, #16
 801660c:	f7e9 ff92 	bl	8000534 <__aeabi_ui2d>
 8016610:	2c09      	cmp	r4, #9
 8016612:	4682      	mov	sl, r0
 8016614:	468b      	mov	fp, r1
 8016616:	dc13      	bgt.n	8016640 <_strtod_l+0x3d0>
 8016618:	9b06      	ldr	r3, [sp, #24]
 801661a:	2b00      	cmp	r3, #0
 801661c:	f43f ae67 	beq.w	80162ee <_strtod_l+0x7e>
 8016620:	9b06      	ldr	r3, [sp, #24]
 8016622:	dd7a      	ble.n	801671a <_strtod_l+0x4aa>
 8016624:	2b16      	cmp	r3, #22
 8016626:	dc61      	bgt.n	80166ec <_strtod_l+0x47c>
 8016628:	4a75      	ldr	r2, [pc, #468]	; (8016800 <_strtod_l+0x590>)
 801662a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801662e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016632:	4652      	mov	r2, sl
 8016634:	465b      	mov	r3, fp
 8016636:	f7e9 fff7 	bl	8000628 <__aeabi_dmul>
 801663a:	4682      	mov	sl, r0
 801663c:	468b      	mov	fp, r1
 801663e:	e656      	b.n	80162ee <_strtod_l+0x7e>
 8016640:	4b6f      	ldr	r3, [pc, #444]	; (8016800 <_strtod_l+0x590>)
 8016642:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016646:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801664a:	f7e9 ffed 	bl	8000628 <__aeabi_dmul>
 801664e:	4606      	mov	r6, r0
 8016650:	4628      	mov	r0, r5
 8016652:	460f      	mov	r7, r1
 8016654:	f7e9 ff6e 	bl	8000534 <__aeabi_ui2d>
 8016658:	4602      	mov	r2, r0
 801665a:	460b      	mov	r3, r1
 801665c:	4630      	mov	r0, r6
 801665e:	4639      	mov	r1, r7
 8016660:	f7e9 fe2c 	bl	80002bc <__adddf3>
 8016664:	2c0f      	cmp	r4, #15
 8016666:	4682      	mov	sl, r0
 8016668:	468b      	mov	fp, r1
 801666a:	ddd5      	ble.n	8016618 <_strtod_l+0x3a8>
 801666c:	9b06      	ldr	r3, [sp, #24]
 801666e:	eba4 0808 	sub.w	r8, r4, r8
 8016672:	4498      	add	r8, r3
 8016674:	f1b8 0f00 	cmp.w	r8, #0
 8016678:	f340 8096 	ble.w	80167a8 <_strtod_l+0x538>
 801667c:	f018 030f 	ands.w	r3, r8, #15
 8016680:	d00a      	beq.n	8016698 <_strtod_l+0x428>
 8016682:	495f      	ldr	r1, [pc, #380]	; (8016800 <_strtod_l+0x590>)
 8016684:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016688:	4652      	mov	r2, sl
 801668a:	465b      	mov	r3, fp
 801668c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016690:	f7e9 ffca 	bl	8000628 <__aeabi_dmul>
 8016694:	4682      	mov	sl, r0
 8016696:	468b      	mov	fp, r1
 8016698:	f038 080f 	bics.w	r8, r8, #15
 801669c:	d073      	beq.n	8016786 <_strtod_l+0x516>
 801669e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80166a2:	dd47      	ble.n	8016734 <_strtod_l+0x4c4>
 80166a4:	2400      	movs	r4, #0
 80166a6:	46a0      	mov	r8, r4
 80166a8:	9407      	str	r4, [sp, #28]
 80166aa:	9405      	str	r4, [sp, #20]
 80166ac:	2322      	movs	r3, #34	; 0x22
 80166ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016808 <_strtod_l+0x598>
 80166b2:	f8c9 3000 	str.w	r3, [r9]
 80166b6:	f04f 0a00 	mov.w	sl, #0
 80166ba:	9b07      	ldr	r3, [sp, #28]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	f43f ae16 	beq.w	80162ee <_strtod_l+0x7e>
 80166c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166c4:	4648      	mov	r0, r9
 80166c6:	f001 fe61 	bl	801838c <_Bfree>
 80166ca:	9905      	ldr	r1, [sp, #20]
 80166cc:	4648      	mov	r0, r9
 80166ce:	f001 fe5d 	bl	801838c <_Bfree>
 80166d2:	4641      	mov	r1, r8
 80166d4:	4648      	mov	r0, r9
 80166d6:	f001 fe59 	bl	801838c <_Bfree>
 80166da:	9907      	ldr	r1, [sp, #28]
 80166dc:	4648      	mov	r0, r9
 80166de:	f001 fe55 	bl	801838c <_Bfree>
 80166e2:	4621      	mov	r1, r4
 80166e4:	4648      	mov	r0, r9
 80166e6:	f001 fe51 	bl	801838c <_Bfree>
 80166ea:	e600      	b.n	80162ee <_strtod_l+0x7e>
 80166ec:	9a06      	ldr	r2, [sp, #24]
 80166ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80166f2:	4293      	cmp	r3, r2
 80166f4:	dbba      	blt.n	801666c <_strtod_l+0x3fc>
 80166f6:	4d42      	ldr	r5, [pc, #264]	; (8016800 <_strtod_l+0x590>)
 80166f8:	f1c4 040f 	rsb	r4, r4, #15
 80166fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016700:	4652      	mov	r2, sl
 8016702:	465b      	mov	r3, fp
 8016704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016708:	f7e9 ff8e 	bl	8000628 <__aeabi_dmul>
 801670c:	9b06      	ldr	r3, [sp, #24]
 801670e:	1b1c      	subs	r4, r3, r4
 8016710:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016714:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016718:	e78d      	b.n	8016636 <_strtod_l+0x3c6>
 801671a:	f113 0f16 	cmn.w	r3, #22
 801671e:	dba5      	blt.n	801666c <_strtod_l+0x3fc>
 8016720:	4a37      	ldr	r2, [pc, #220]	; (8016800 <_strtod_l+0x590>)
 8016722:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016726:	e9d2 2300 	ldrd	r2, r3, [r2]
 801672a:	4650      	mov	r0, sl
 801672c:	4659      	mov	r1, fp
 801672e:	f7ea f8a5 	bl	800087c <__aeabi_ddiv>
 8016732:	e782      	b.n	801663a <_strtod_l+0x3ca>
 8016734:	2300      	movs	r3, #0
 8016736:	4e33      	ldr	r6, [pc, #204]	; (8016804 <_strtod_l+0x594>)
 8016738:	ea4f 1828 	mov.w	r8, r8, asr #4
 801673c:	4650      	mov	r0, sl
 801673e:	4659      	mov	r1, fp
 8016740:	461d      	mov	r5, r3
 8016742:	f1b8 0f01 	cmp.w	r8, #1
 8016746:	dc21      	bgt.n	801678c <_strtod_l+0x51c>
 8016748:	b10b      	cbz	r3, 801674e <_strtod_l+0x4de>
 801674a:	4682      	mov	sl, r0
 801674c:	468b      	mov	fp, r1
 801674e:	4b2d      	ldr	r3, [pc, #180]	; (8016804 <_strtod_l+0x594>)
 8016750:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016754:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016758:	4652      	mov	r2, sl
 801675a:	465b      	mov	r3, fp
 801675c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016760:	f7e9 ff62 	bl	8000628 <__aeabi_dmul>
 8016764:	4b28      	ldr	r3, [pc, #160]	; (8016808 <_strtod_l+0x598>)
 8016766:	460a      	mov	r2, r1
 8016768:	400b      	ands	r3, r1
 801676a:	4928      	ldr	r1, [pc, #160]	; (801680c <_strtod_l+0x59c>)
 801676c:	428b      	cmp	r3, r1
 801676e:	4682      	mov	sl, r0
 8016770:	d898      	bhi.n	80166a4 <_strtod_l+0x434>
 8016772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016776:	428b      	cmp	r3, r1
 8016778:	bf86      	itte	hi
 801677a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016814 <_strtod_l+0x5a4>
 801677e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016782:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016786:	2300      	movs	r3, #0
 8016788:	9304      	str	r3, [sp, #16]
 801678a:	e077      	b.n	801687c <_strtod_l+0x60c>
 801678c:	f018 0f01 	tst.w	r8, #1
 8016790:	d006      	beq.n	80167a0 <_strtod_l+0x530>
 8016792:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679a:	f7e9 ff45 	bl	8000628 <__aeabi_dmul>
 801679e:	2301      	movs	r3, #1
 80167a0:	3501      	adds	r5, #1
 80167a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80167a6:	e7cc      	b.n	8016742 <_strtod_l+0x4d2>
 80167a8:	d0ed      	beq.n	8016786 <_strtod_l+0x516>
 80167aa:	f1c8 0800 	rsb	r8, r8, #0
 80167ae:	f018 020f 	ands.w	r2, r8, #15
 80167b2:	d00a      	beq.n	80167ca <_strtod_l+0x55a>
 80167b4:	4b12      	ldr	r3, [pc, #72]	; (8016800 <_strtod_l+0x590>)
 80167b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167ba:	4650      	mov	r0, sl
 80167bc:	4659      	mov	r1, fp
 80167be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c2:	f7ea f85b 	bl	800087c <__aeabi_ddiv>
 80167c6:	4682      	mov	sl, r0
 80167c8:	468b      	mov	fp, r1
 80167ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80167ce:	d0da      	beq.n	8016786 <_strtod_l+0x516>
 80167d0:	f1b8 0f1f 	cmp.w	r8, #31
 80167d4:	dd20      	ble.n	8016818 <_strtod_l+0x5a8>
 80167d6:	2400      	movs	r4, #0
 80167d8:	46a0      	mov	r8, r4
 80167da:	9407      	str	r4, [sp, #28]
 80167dc:	9405      	str	r4, [sp, #20]
 80167de:	2322      	movs	r3, #34	; 0x22
 80167e0:	f04f 0a00 	mov.w	sl, #0
 80167e4:	f04f 0b00 	mov.w	fp, #0
 80167e8:	f8c9 3000 	str.w	r3, [r9]
 80167ec:	e765      	b.n	80166ba <_strtod_l+0x44a>
 80167ee:	bf00      	nop
 80167f0:	0801a13d 	.word	0x0801a13d
 80167f4:	0801a1c3 	.word	0x0801a1c3
 80167f8:	0801a145 	.word	0x0801a145
 80167fc:	0801a184 	.word	0x0801a184
 8016800:	0801a268 	.word	0x0801a268
 8016804:	0801a240 	.word	0x0801a240
 8016808:	7ff00000 	.word	0x7ff00000
 801680c:	7ca00000 	.word	0x7ca00000
 8016810:	fff80000 	.word	0xfff80000
 8016814:	7fefffff 	.word	0x7fefffff
 8016818:	f018 0310 	ands.w	r3, r8, #16
 801681c:	bf18      	it	ne
 801681e:	236a      	movne	r3, #106	; 0x6a
 8016820:	4da0      	ldr	r5, [pc, #640]	; (8016aa4 <_strtod_l+0x834>)
 8016822:	9304      	str	r3, [sp, #16]
 8016824:	4650      	mov	r0, sl
 8016826:	4659      	mov	r1, fp
 8016828:	2300      	movs	r3, #0
 801682a:	f1b8 0f00 	cmp.w	r8, #0
 801682e:	f300 810a 	bgt.w	8016a46 <_strtod_l+0x7d6>
 8016832:	b10b      	cbz	r3, 8016838 <_strtod_l+0x5c8>
 8016834:	4682      	mov	sl, r0
 8016836:	468b      	mov	fp, r1
 8016838:	9b04      	ldr	r3, [sp, #16]
 801683a:	b1bb      	cbz	r3, 801686c <_strtod_l+0x5fc>
 801683c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016844:	2b00      	cmp	r3, #0
 8016846:	4659      	mov	r1, fp
 8016848:	dd10      	ble.n	801686c <_strtod_l+0x5fc>
 801684a:	2b1f      	cmp	r3, #31
 801684c:	f340 8107 	ble.w	8016a5e <_strtod_l+0x7ee>
 8016850:	2b34      	cmp	r3, #52	; 0x34
 8016852:	bfde      	ittt	le
 8016854:	3b20      	suble	r3, #32
 8016856:	f04f 32ff 	movle.w	r2, #4294967295
 801685a:	fa02 f303 	lslle.w	r3, r2, r3
 801685e:	f04f 0a00 	mov.w	sl, #0
 8016862:	bfcc      	ite	gt
 8016864:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016868:	ea03 0b01 	andle.w	fp, r3, r1
 801686c:	2200      	movs	r2, #0
 801686e:	2300      	movs	r3, #0
 8016870:	4650      	mov	r0, sl
 8016872:	4659      	mov	r1, fp
 8016874:	f7ea f940 	bl	8000af8 <__aeabi_dcmpeq>
 8016878:	2800      	cmp	r0, #0
 801687a:	d1ac      	bne.n	80167d6 <_strtod_l+0x566>
 801687c:	9b07      	ldr	r3, [sp, #28]
 801687e:	9300      	str	r3, [sp, #0]
 8016880:	9a05      	ldr	r2, [sp, #20]
 8016882:	9908      	ldr	r1, [sp, #32]
 8016884:	4623      	mov	r3, r4
 8016886:	4648      	mov	r0, r9
 8016888:	f001 fdd2 	bl	8018430 <__s2b>
 801688c:	9007      	str	r0, [sp, #28]
 801688e:	2800      	cmp	r0, #0
 8016890:	f43f af08 	beq.w	80166a4 <_strtod_l+0x434>
 8016894:	9a06      	ldr	r2, [sp, #24]
 8016896:	9b06      	ldr	r3, [sp, #24]
 8016898:	2a00      	cmp	r2, #0
 801689a:	f1c3 0300 	rsb	r3, r3, #0
 801689e:	bfa8      	it	ge
 80168a0:	2300      	movge	r3, #0
 80168a2:	930e      	str	r3, [sp, #56]	; 0x38
 80168a4:	2400      	movs	r4, #0
 80168a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80168aa:	9316      	str	r3, [sp, #88]	; 0x58
 80168ac:	46a0      	mov	r8, r4
 80168ae:	9b07      	ldr	r3, [sp, #28]
 80168b0:	4648      	mov	r0, r9
 80168b2:	6859      	ldr	r1, [r3, #4]
 80168b4:	f001 fd36 	bl	8018324 <_Balloc>
 80168b8:	9005      	str	r0, [sp, #20]
 80168ba:	2800      	cmp	r0, #0
 80168bc:	f43f aef6 	beq.w	80166ac <_strtod_l+0x43c>
 80168c0:	9b07      	ldr	r3, [sp, #28]
 80168c2:	691a      	ldr	r2, [r3, #16]
 80168c4:	3202      	adds	r2, #2
 80168c6:	f103 010c 	add.w	r1, r3, #12
 80168ca:	0092      	lsls	r2, r2, #2
 80168cc:	300c      	adds	r0, #12
 80168ce:	f7fe fdd3 	bl	8015478 <memcpy>
 80168d2:	aa1e      	add	r2, sp, #120	; 0x78
 80168d4:	a91d      	add	r1, sp, #116	; 0x74
 80168d6:	ec4b ab10 	vmov	d0, sl, fp
 80168da:	4648      	mov	r0, r9
 80168dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80168e0:	f002 f862 	bl	80189a8 <__d2b>
 80168e4:	901c      	str	r0, [sp, #112]	; 0x70
 80168e6:	2800      	cmp	r0, #0
 80168e8:	f43f aee0 	beq.w	80166ac <_strtod_l+0x43c>
 80168ec:	2101      	movs	r1, #1
 80168ee:	4648      	mov	r0, r9
 80168f0:	f001 fe2a 	bl	8018548 <__i2b>
 80168f4:	4680      	mov	r8, r0
 80168f6:	2800      	cmp	r0, #0
 80168f8:	f43f aed8 	beq.w	80166ac <_strtod_l+0x43c>
 80168fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80168fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016900:	2e00      	cmp	r6, #0
 8016902:	bfab      	itete	ge
 8016904:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016906:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016908:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801690a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801690c:	bfac      	ite	ge
 801690e:	18f7      	addge	r7, r6, r3
 8016910:	1b9d      	sublt	r5, r3, r6
 8016912:	9b04      	ldr	r3, [sp, #16]
 8016914:	1af6      	subs	r6, r6, r3
 8016916:	4416      	add	r6, r2
 8016918:	4b63      	ldr	r3, [pc, #396]	; (8016aa8 <_strtod_l+0x838>)
 801691a:	3e01      	subs	r6, #1
 801691c:	429e      	cmp	r6, r3
 801691e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016922:	f280 80af 	bge.w	8016a84 <_strtod_l+0x814>
 8016926:	1b9b      	subs	r3, r3, r6
 8016928:	2b1f      	cmp	r3, #31
 801692a:	eba2 0203 	sub.w	r2, r2, r3
 801692e:	f04f 0101 	mov.w	r1, #1
 8016932:	f300 809b 	bgt.w	8016a6c <_strtod_l+0x7fc>
 8016936:	fa01 f303 	lsl.w	r3, r1, r3
 801693a:	930f      	str	r3, [sp, #60]	; 0x3c
 801693c:	2300      	movs	r3, #0
 801693e:	930a      	str	r3, [sp, #40]	; 0x28
 8016940:	18be      	adds	r6, r7, r2
 8016942:	9b04      	ldr	r3, [sp, #16]
 8016944:	42b7      	cmp	r7, r6
 8016946:	4415      	add	r5, r2
 8016948:	441d      	add	r5, r3
 801694a:	463b      	mov	r3, r7
 801694c:	bfa8      	it	ge
 801694e:	4633      	movge	r3, r6
 8016950:	42ab      	cmp	r3, r5
 8016952:	bfa8      	it	ge
 8016954:	462b      	movge	r3, r5
 8016956:	2b00      	cmp	r3, #0
 8016958:	bfc2      	ittt	gt
 801695a:	1af6      	subgt	r6, r6, r3
 801695c:	1aed      	subgt	r5, r5, r3
 801695e:	1aff      	subgt	r7, r7, r3
 8016960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016962:	b1bb      	cbz	r3, 8016994 <_strtod_l+0x724>
 8016964:	4641      	mov	r1, r8
 8016966:	461a      	mov	r2, r3
 8016968:	4648      	mov	r0, r9
 801696a:	f001 fe8d 	bl	8018688 <__pow5mult>
 801696e:	4680      	mov	r8, r0
 8016970:	2800      	cmp	r0, #0
 8016972:	f43f ae9b 	beq.w	80166ac <_strtod_l+0x43c>
 8016976:	4601      	mov	r1, r0
 8016978:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801697a:	4648      	mov	r0, r9
 801697c:	f001 fded 	bl	801855a <__multiply>
 8016980:	900c      	str	r0, [sp, #48]	; 0x30
 8016982:	2800      	cmp	r0, #0
 8016984:	f43f ae92 	beq.w	80166ac <_strtod_l+0x43c>
 8016988:	991c      	ldr	r1, [sp, #112]	; 0x70
 801698a:	4648      	mov	r0, r9
 801698c:	f001 fcfe 	bl	801838c <_Bfree>
 8016990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016992:	931c      	str	r3, [sp, #112]	; 0x70
 8016994:	2e00      	cmp	r6, #0
 8016996:	dc7a      	bgt.n	8016a8e <_strtod_l+0x81e>
 8016998:	9b06      	ldr	r3, [sp, #24]
 801699a:	2b00      	cmp	r3, #0
 801699c:	dd08      	ble.n	80169b0 <_strtod_l+0x740>
 801699e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80169a0:	9905      	ldr	r1, [sp, #20]
 80169a2:	4648      	mov	r0, r9
 80169a4:	f001 fe70 	bl	8018688 <__pow5mult>
 80169a8:	9005      	str	r0, [sp, #20]
 80169aa:	2800      	cmp	r0, #0
 80169ac:	f43f ae7e 	beq.w	80166ac <_strtod_l+0x43c>
 80169b0:	2d00      	cmp	r5, #0
 80169b2:	dd08      	ble.n	80169c6 <_strtod_l+0x756>
 80169b4:	462a      	mov	r2, r5
 80169b6:	9905      	ldr	r1, [sp, #20]
 80169b8:	4648      	mov	r0, r9
 80169ba:	f001 feb3 	bl	8018724 <__lshift>
 80169be:	9005      	str	r0, [sp, #20]
 80169c0:	2800      	cmp	r0, #0
 80169c2:	f43f ae73 	beq.w	80166ac <_strtod_l+0x43c>
 80169c6:	2f00      	cmp	r7, #0
 80169c8:	dd08      	ble.n	80169dc <_strtod_l+0x76c>
 80169ca:	4641      	mov	r1, r8
 80169cc:	463a      	mov	r2, r7
 80169ce:	4648      	mov	r0, r9
 80169d0:	f001 fea8 	bl	8018724 <__lshift>
 80169d4:	4680      	mov	r8, r0
 80169d6:	2800      	cmp	r0, #0
 80169d8:	f43f ae68 	beq.w	80166ac <_strtod_l+0x43c>
 80169dc:	9a05      	ldr	r2, [sp, #20]
 80169de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80169e0:	4648      	mov	r0, r9
 80169e2:	f001 ff0d 	bl	8018800 <__mdiff>
 80169e6:	4604      	mov	r4, r0
 80169e8:	2800      	cmp	r0, #0
 80169ea:	f43f ae5f 	beq.w	80166ac <_strtod_l+0x43c>
 80169ee:	68c3      	ldr	r3, [r0, #12]
 80169f0:	930c      	str	r3, [sp, #48]	; 0x30
 80169f2:	2300      	movs	r3, #0
 80169f4:	60c3      	str	r3, [r0, #12]
 80169f6:	4641      	mov	r1, r8
 80169f8:	f001 fee8 	bl	80187cc <__mcmp>
 80169fc:	2800      	cmp	r0, #0
 80169fe:	da55      	bge.n	8016aac <_strtod_l+0x83c>
 8016a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a02:	b9e3      	cbnz	r3, 8016a3e <_strtod_l+0x7ce>
 8016a04:	f1ba 0f00 	cmp.w	sl, #0
 8016a08:	d119      	bne.n	8016a3e <_strtod_l+0x7ce>
 8016a0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a0e:	b9b3      	cbnz	r3, 8016a3e <_strtod_l+0x7ce>
 8016a10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a14:	0d1b      	lsrs	r3, r3, #20
 8016a16:	051b      	lsls	r3, r3, #20
 8016a18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016a1c:	d90f      	bls.n	8016a3e <_strtod_l+0x7ce>
 8016a1e:	6963      	ldr	r3, [r4, #20]
 8016a20:	b913      	cbnz	r3, 8016a28 <_strtod_l+0x7b8>
 8016a22:	6923      	ldr	r3, [r4, #16]
 8016a24:	2b01      	cmp	r3, #1
 8016a26:	dd0a      	ble.n	8016a3e <_strtod_l+0x7ce>
 8016a28:	4621      	mov	r1, r4
 8016a2a:	2201      	movs	r2, #1
 8016a2c:	4648      	mov	r0, r9
 8016a2e:	f001 fe79 	bl	8018724 <__lshift>
 8016a32:	4641      	mov	r1, r8
 8016a34:	4604      	mov	r4, r0
 8016a36:	f001 fec9 	bl	80187cc <__mcmp>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	dc67      	bgt.n	8016b0e <_strtod_l+0x89e>
 8016a3e:	9b04      	ldr	r3, [sp, #16]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d171      	bne.n	8016b28 <_strtod_l+0x8b8>
 8016a44:	e63d      	b.n	80166c2 <_strtod_l+0x452>
 8016a46:	f018 0f01 	tst.w	r8, #1
 8016a4a:	d004      	beq.n	8016a56 <_strtod_l+0x7e6>
 8016a4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a50:	f7e9 fdea 	bl	8000628 <__aeabi_dmul>
 8016a54:	2301      	movs	r3, #1
 8016a56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016a5a:	3508      	adds	r5, #8
 8016a5c:	e6e5      	b.n	801682a <_strtod_l+0x5ba>
 8016a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a62:	fa02 f303 	lsl.w	r3, r2, r3
 8016a66:	ea03 0a0a 	and.w	sl, r3, sl
 8016a6a:	e6ff      	b.n	801686c <_strtod_l+0x5fc>
 8016a6c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016a70:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016a74:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016a78:	36e2      	adds	r6, #226	; 0xe2
 8016a7a:	fa01 f306 	lsl.w	r3, r1, r6
 8016a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a80:	910f      	str	r1, [sp, #60]	; 0x3c
 8016a82:	e75d      	b.n	8016940 <_strtod_l+0x6d0>
 8016a84:	2300      	movs	r3, #0
 8016a86:	930a      	str	r3, [sp, #40]	; 0x28
 8016a88:	2301      	movs	r3, #1
 8016a8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a8c:	e758      	b.n	8016940 <_strtod_l+0x6d0>
 8016a8e:	4632      	mov	r2, r6
 8016a90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a92:	4648      	mov	r0, r9
 8016a94:	f001 fe46 	bl	8018724 <__lshift>
 8016a98:	901c      	str	r0, [sp, #112]	; 0x70
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	f47f af7c 	bne.w	8016998 <_strtod_l+0x728>
 8016aa0:	e604      	b.n	80166ac <_strtod_l+0x43c>
 8016aa2:	bf00      	nop
 8016aa4:	0801a198 	.word	0x0801a198
 8016aa8:	fffffc02 	.word	0xfffffc02
 8016aac:	465d      	mov	r5, fp
 8016aae:	f040 8086 	bne.w	8016bbe <_strtod_l+0x94e>
 8016ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ab8:	b32a      	cbz	r2, 8016b06 <_strtod_l+0x896>
 8016aba:	4aaf      	ldr	r2, [pc, #700]	; (8016d78 <_strtod_l+0xb08>)
 8016abc:	4293      	cmp	r3, r2
 8016abe:	d153      	bne.n	8016b68 <_strtod_l+0x8f8>
 8016ac0:	9b04      	ldr	r3, [sp, #16]
 8016ac2:	4650      	mov	r0, sl
 8016ac4:	b1d3      	cbz	r3, 8016afc <_strtod_l+0x88c>
 8016ac6:	4aad      	ldr	r2, [pc, #692]	; (8016d7c <_strtod_l+0xb0c>)
 8016ac8:	402a      	ands	r2, r5
 8016aca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016ace:	f04f 31ff 	mov.w	r1, #4294967295
 8016ad2:	d816      	bhi.n	8016b02 <_strtod_l+0x892>
 8016ad4:	0d12      	lsrs	r2, r2, #20
 8016ad6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016ada:	fa01 f303 	lsl.w	r3, r1, r3
 8016ade:	4298      	cmp	r0, r3
 8016ae0:	d142      	bne.n	8016b68 <_strtod_l+0x8f8>
 8016ae2:	4ba7      	ldr	r3, [pc, #668]	; (8016d80 <_strtod_l+0xb10>)
 8016ae4:	429d      	cmp	r5, r3
 8016ae6:	d102      	bne.n	8016aee <_strtod_l+0x87e>
 8016ae8:	3001      	adds	r0, #1
 8016aea:	f43f addf 	beq.w	80166ac <_strtod_l+0x43c>
 8016aee:	4ba3      	ldr	r3, [pc, #652]	; (8016d7c <_strtod_l+0xb0c>)
 8016af0:	402b      	ands	r3, r5
 8016af2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016af6:	f04f 0a00 	mov.w	sl, #0
 8016afa:	e7a0      	b.n	8016a3e <_strtod_l+0x7ce>
 8016afc:	f04f 33ff 	mov.w	r3, #4294967295
 8016b00:	e7ed      	b.n	8016ade <_strtod_l+0x86e>
 8016b02:	460b      	mov	r3, r1
 8016b04:	e7eb      	b.n	8016ade <_strtod_l+0x86e>
 8016b06:	bb7b      	cbnz	r3, 8016b68 <_strtod_l+0x8f8>
 8016b08:	f1ba 0f00 	cmp.w	sl, #0
 8016b0c:	d12c      	bne.n	8016b68 <_strtod_l+0x8f8>
 8016b0e:	9904      	ldr	r1, [sp, #16]
 8016b10:	4a9a      	ldr	r2, [pc, #616]	; (8016d7c <_strtod_l+0xb0c>)
 8016b12:	465b      	mov	r3, fp
 8016b14:	b1f1      	cbz	r1, 8016b54 <_strtod_l+0x8e4>
 8016b16:	ea02 010b 	and.w	r1, r2, fp
 8016b1a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016b1e:	dc19      	bgt.n	8016b54 <_strtod_l+0x8e4>
 8016b20:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016b24:	f77f ae5b 	ble.w	80167de <_strtod_l+0x56e>
 8016b28:	4a96      	ldr	r2, [pc, #600]	; (8016d84 <_strtod_l+0xb14>)
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016b30:	4650      	mov	r0, sl
 8016b32:	4659      	mov	r1, fp
 8016b34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016b38:	f7e9 fd76 	bl	8000628 <__aeabi_dmul>
 8016b3c:	4682      	mov	sl, r0
 8016b3e:	468b      	mov	fp, r1
 8016b40:	2900      	cmp	r1, #0
 8016b42:	f47f adbe 	bne.w	80166c2 <_strtod_l+0x452>
 8016b46:	2800      	cmp	r0, #0
 8016b48:	f47f adbb 	bne.w	80166c2 <_strtod_l+0x452>
 8016b4c:	2322      	movs	r3, #34	; 0x22
 8016b4e:	f8c9 3000 	str.w	r3, [r9]
 8016b52:	e5b6      	b.n	80166c2 <_strtod_l+0x452>
 8016b54:	4013      	ands	r3, r2
 8016b56:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016b5a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016b5e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016b62:	f04f 3aff 	mov.w	sl, #4294967295
 8016b66:	e76a      	b.n	8016a3e <_strtod_l+0x7ce>
 8016b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b6a:	b193      	cbz	r3, 8016b92 <_strtod_l+0x922>
 8016b6c:	422b      	tst	r3, r5
 8016b6e:	f43f af66 	beq.w	8016a3e <_strtod_l+0x7ce>
 8016b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b74:	9a04      	ldr	r2, [sp, #16]
 8016b76:	4650      	mov	r0, sl
 8016b78:	4659      	mov	r1, fp
 8016b7a:	b173      	cbz	r3, 8016b9a <_strtod_l+0x92a>
 8016b7c:	f7ff fb5c 	bl	8016238 <sulp>
 8016b80:	4602      	mov	r2, r0
 8016b82:	460b      	mov	r3, r1
 8016b84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016b88:	f7e9 fb98 	bl	80002bc <__adddf3>
 8016b8c:	4682      	mov	sl, r0
 8016b8e:	468b      	mov	fp, r1
 8016b90:	e755      	b.n	8016a3e <_strtod_l+0x7ce>
 8016b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b94:	ea13 0f0a 	tst.w	r3, sl
 8016b98:	e7e9      	b.n	8016b6e <_strtod_l+0x8fe>
 8016b9a:	f7ff fb4d 	bl	8016238 <sulp>
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ba6:	f7e9 fb87 	bl	80002b8 <__aeabi_dsub>
 8016baa:	2200      	movs	r2, #0
 8016bac:	2300      	movs	r3, #0
 8016bae:	4682      	mov	sl, r0
 8016bb0:	468b      	mov	fp, r1
 8016bb2:	f7e9 ffa1 	bl	8000af8 <__aeabi_dcmpeq>
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	f47f ae11 	bne.w	80167de <_strtod_l+0x56e>
 8016bbc:	e73f      	b.n	8016a3e <_strtod_l+0x7ce>
 8016bbe:	4641      	mov	r1, r8
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f001 ff40 	bl	8018a46 <__ratio>
 8016bc6:	ec57 6b10 	vmov	r6, r7, d0
 8016bca:	2200      	movs	r2, #0
 8016bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016bd0:	ee10 0a10 	vmov	r0, s0
 8016bd4:	4639      	mov	r1, r7
 8016bd6:	f7e9 ffa3 	bl	8000b20 <__aeabi_dcmple>
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	d077      	beq.n	8016cce <_strtod_l+0xa5e>
 8016bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d04a      	beq.n	8016c7a <_strtod_l+0xa0a>
 8016be4:	4b68      	ldr	r3, [pc, #416]	; (8016d88 <_strtod_l+0xb18>)
 8016be6:	2200      	movs	r2, #0
 8016be8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016bec:	4f66      	ldr	r7, [pc, #408]	; (8016d88 <_strtod_l+0xb18>)
 8016bee:	2600      	movs	r6, #0
 8016bf0:	4b62      	ldr	r3, [pc, #392]	; (8016d7c <_strtod_l+0xb0c>)
 8016bf2:	402b      	ands	r3, r5
 8016bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bf8:	4b64      	ldr	r3, [pc, #400]	; (8016d8c <_strtod_l+0xb1c>)
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	f040 80ce 	bne.w	8016d9c <_strtod_l+0xb2c>
 8016c00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016c04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016c08:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016c0c:	ec4b ab10 	vmov	d0, sl, fp
 8016c10:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016c14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016c18:	f001 fe50 	bl	80188bc <__ulp>
 8016c1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016c20:	ec53 2b10 	vmov	r2, r3, d0
 8016c24:	f7e9 fd00 	bl	8000628 <__aeabi_dmul>
 8016c28:	4652      	mov	r2, sl
 8016c2a:	465b      	mov	r3, fp
 8016c2c:	f7e9 fb46 	bl	80002bc <__adddf3>
 8016c30:	460b      	mov	r3, r1
 8016c32:	4952      	ldr	r1, [pc, #328]	; (8016d7c <_strtod_l+0xb0c>)
 8016c34:	4a56      	ldr	r2, [pc, #344]	; (8016d90 <_strtod_l+0xb20>)
 8016c36:	4019      	ands	r1, r3
 8016c38:	4291      	cmp	r1, r2
 8016c3a:	4682      	mov	sl, r0
 8016c3c:	d95b      	bls.n	8016cf6 <_strtod_l+0xa86>
 8016c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016c44:	4293      	cmp	r3, r2
 8016c46:	d103      	bne.n	8016c50 <_strtod_l+0x9e0>
 8016c48:	9b08      	ldr	r3, [sp, #32]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	f43f ad2e 	beq.w	80166ac <_strtod_l+0x43c>
 8016c50:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016d80 <_strtod_l+0xb10>
 8016c54:	f04f 3aff 	mov.w	sl, #4294967295
 8016c58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c5a:	4648      	mov	r0, r9
 8016c5c:	f001 fb96 	bl	801838c <_Bfree>
 8016c60:	9905      	ldr	r1, [sp, #20]
 8016c62:	4648      	mov	r0, r9
 8016c64:	f001 fb92 	bl	801838c <_Bfree>
 8016c68:	4641      	mov	r1, r8
 8016c6a:	4648      	mov	r0, r9
 8016c6c:	f001 fb8e 	bl	801838c <_Bfree>
 8016c70:	4621      	mov	r1, r4
 8016c72:	4648      	mov	r0, r9
 8016c74:	f001 fb8a 	bl	801838c <_Bfree>
 8016c78:	e619      	b.n	80168ae <_strtod_l+0x63e>
 8016c7a:	f1ba 0f00 	cmp.w	sl, #0
 8016c7e:	d11a      	bne.n	8016cb6 <_strtod_l+0xa46>
 8016c80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c84:	b9eb      	cbnz	r3, 8016cc2 <_strtod_l+0xa52>
 8016c86:	2200      	movs	r2, #0
 8016c88:	4b3f      	ldr	r3, [pc, #252]	; (8016d88 <_strtod_l+0xb18>)
 8016c8a:	4630      	mov	r0, r6
 8016c8c:	4639      	mov	r1, r7
 8016c8e:	f7e9 ff3d 	bl	8000b0c <__aeabi_dcmplt>
 8016c92:	b9c8      	cbnz	r0, 8016cc8 <_strtod_l+0xa58>
 8016c94:	4630      	mov	r0, r6
 8016c96:	4639      	mov	r1, r7
 8016c98:	2200      	movs	r2, #0
 8016c9a:	4b3e      	ldr	r3, [pc, #248]	; (8016d94 <_strtod_l+0xb24>)
 8016c9c:	f7e9 fcc4 	bl	8000628 <__aeabi_dmul>
 8016ca0:	4606      	mov	r6, r0
 8016ca2:	460f      	mov	r7, r1
 8016ca4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016ca8:	9618      	str	r6, [sp, #96]	; 0x60
 8016caa:	9319      	str	r3, [sp, #100]	; 0x64
 8016cac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016cb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016cb4:	e79c      	b.n	8016bf0 <_strtod_l+0x980>
 8016cb6:	f1ba 0f01 	cmp.w	sl, #1
 8016cba:	d102      	bne.n	8016cc2 <_strtod_l+0xa52>
 8016cbc:	2d00      	cmp	r5, #0
 8016cbe:	f43f ad8e 	beq.w	80167de <_strtod_l+0x56e>
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	4b34      	ldr	r3, [pc, #208]	; (8016d98 <_strtod_l+0xb28>)
 8016cc6:	e78f      	b.n	8016be8 <_strtod_l+0x978>
 8016cc8:	2600      	movs	r6, #0
 8016cca:	4f32      	ldr	r7, [pc, #200]	; (8016d94 <_strtod_l+0xb24>)
 8016ccc:	e7ea      	b.n	8016ca4 <_strtod_l+0xa34>
 8016cce:	4b31      	ldr	r3, [pc, #196]	; (8016d94 <_strtod_l+0xb24>)
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	f7e9 fca7 	bl	8000628 <__aeabi_dmul>
 8016cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cdc:	4606      	mov	r6, r0
 8016cde:	460f      	mov	r7, r1
 8016ce0:	b933      	cbnz	r3, 8016cf0 <_strtod_l+0xa80>
 8016ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ce6:	9010      	str	r0, [sp, #64]	; 0x40
 8016ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8016cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016cee:	e7df      	b.n	8016cb0 <_strtod_l+0xa40>
 8016cf0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016cf4:	e7f9      	b.n	8016cea <_strtod_l+0xa7a>
 8016cf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016cfa:	9b04      	ldr	r3, [sp, #16]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d1ab      	bne.n	8016c58 <_strtod_l+0x9e8>
 8016d00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016d04:	0d1b      	lsrs	r3, r3, #20
 8016d06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d08:	051b      	lsls	r3, r3, #20
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	465d      	mov	r5, fp
 8016d0e:	d1a3      	bne.n	8016c58 <_strtod_l+0x9e8>
 8016d10:	4639      	mov	r1, r7
 8016d12:	4630      	mov	r0, r6
 8016d14:	f7e9 ff38 	bl	8000b88 <__aeabi_d2iz>
 8016d18:	f7e9 fc1c 	bl	8000554 <__aeabi_i2d>
 8016d1c:	460b      	mov	r3, r1
 8016d1e:	4602      	mov	r2, r0
 8016d20:	4639      	mov	r1, r7
 8016d22:	4630      	mov	r0, r6
 8016d24:	f7e9 fac8 	bl	80002b8 <__aeabi_dsub>
 8016d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d2a:	4606      	mov	r6, r0
 8016d2c:	460f      	mov	r7, r1
 8016d2e:	b933      	cbnz	r3, 8016d3e <_strtod_l+0xace>
 8016d30:	f1ba 0f00 	cmp.w	sl, #0
 8016d34:	d103      	bne.n	8016d3e <_strtod_l+0xace>
 8016d36:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016d3a:	2d00      	cmp	r5, #0
 8016d3c:	d06d      	beq.n	8016e1a <_strtod_l+0xbaa>
 8016d3e:	a30a      	add	r3, pc, #40	; (adr r3, 8016d68 <_strtod_l+0xaf8>)
 8016d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d44:	4630      	mov	r0, r6
 8016d46:	4639      	mov	r1, r7
 8016d48:	f7e9 fee0 	bl	8000b0c <__aeabi_dcmplt>
 8016d4c:	2800      	cmp	r0, #0
 8016d4e:	f47f acb8 	bne.w	80166c2 <_strtod_l+0x452>
 8016d52:	a307      	add	r3, pc, #28	; (adr r3, 8016d70 <_strtod_l+0xb00>)
 8016d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d58:	4630      	mov	r0, r6
 8016d5a:	4639      	mov	r1, r7
 8016d5c:	f7e9 fef4 	bl	8000b48 <__aeabi_dcmpgt>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	f43f af79 	beq.w	8016c58 <_strtod_l+0x9e8>
 8016d66:	e4ac      	b.n	80166c2 <_strtod_l+0x452>
 8016d68:	94a03595 	.word	0x94a03595
 8016d6c:	3fdfffff 	.word	0x3fdfffff
 8016d70:	35afe535 	.word	0x35afe535
 8016d74:	3fe00000 	.word	0x3fe00000
 8016d78:	000fffff 	.word	0x000fffff
 8016d7c:	7ff00000 	.word	0x7ff00000
 8016d80:	7fefffff 	.word	0x7fefffff
 8016d84:	39500000 	.word	0x39500000
 8016d88:	3ff00000 	.word	0x3ff00000
 8016d8c:	7fe00000 	.word	0x7fe00000
 8016d90:	7c9fffff 	.word	0x7c9fffff
 8016d94:	3fe00000 	.word	0x3fe00000
 8016d98:	bff00000 	.word	0xbff00000
 8016d9c:	9b04      	ldr	r3, [sp, #16]
 8016d9e:	b333      	cbz	r3, 8016dee <_strtod_l+0xb7e>
 8016da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016da2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016da6:	d822      	bhi.n	8016dee <_strtod_l+0xb7e>
 8016da8:	a327      	add	r3, pc, #156	; (adr r3, 8016e48 <_strtod_l+0xbd8>)
 8016daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dae:	4630      	mov	r0, r6
 8016db0:	4639      	mov	r1, r7
 8016db2:	f7e9 feb5 	bl	8000b20 <__aeabi_dcmple>
 8016db6:	b1a0      	cbz	r0, 8016de2 <_strtod_l+0xb72>
 8016db8:	4639      	mov	r1, r7
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f7e9 ff0c 	bl	8000bd8 <__aeabi_d2uiz>
 8016dc0:	2800      	cmp	r0, #0
 8016dc2:	bf08      	it	eq
 8016dc4:	2001      	moveq	r0, #1
 8016dc6:	f7e9 fbb5 	bl	8000534 <__aeabi_ui2d>
 8016dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dcc:	4606      	mov	r6, r0
 8016dce:	460f      	mov	r7, r1
 8016dd0:	bb03      	cbnz	r3, 8016e14 <_strtod_l+0xba4>
 8016dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016dd6:	9012      	str	r0, [sp, #72]	; 0x48
 8016dd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8016dda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016dde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016de6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016dea:	1a9b      	subs	r3, r3, r2
 8016dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dee:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016df2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016df6:	f001 fd61 	bl	80188bc <__ulp>
 8016dfa:	4650      	mov	r0, sl
 8016dfc:	ec53 2b10 	vmov	r2, r3, d0
 8016e00:	4659      	mov	r1, fp
 8016e02:	f7e9 fc11 	bl	8000628 <__aeabi_dmul>
 8016e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016e0a:	f7e9 fa57 	bl	80002bc <__adddf3>
 8016e0e:	4682      	mov	sl, r0
 8016e10:	468b      	mov	fp, r1
 8016e12:	e772      	b.n	8016cfa <_strtod_l+0xa8a>
 8016e14:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016e18:	e7df      	b.n	8016dda <_strtod_l+0xb6a>
 8016e1a:	a30d      	add	r3, pc, #52	; (adr r3, 8016e50 <_strtod_l+0xbe0>)
 8016e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e20:	f7e9 fe74 	bl	8000b0c <__aeabi_dcmplt>
 8016e24:	e79c      	b.n	8016d60 <_strtod_l+0xaf0>
 8016e26:	2300      	movs	r3, #0
 8016e28:	930d      	str	r3, [sp, #52]	; 0x34
 8016e2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e2e:	6013      	str	r3, [r2, #0]
 8016e30:	f7ff ba61 	b.w	80162f6 <_strtod_l+0x86>
 8016e34:	2b65      	cmp	r3, #101	; 0x65
 8016e36:	f04f 0200 	mov.w	r2, #0
 8016e3a:	f43f ab4e 	beq.w	80164da <_strtod_l+0x26a>
 8016e3e:	2101      	movs	r1, #1
 8016e40:	4614      	mov	r4, r2
 8016e42:	9104      	str	r1, [sp, #16]
 8016e44:	f7ff bacb 	b.w	80163de <_strtod_l+0x16e>
 8016e48:	ffc00000 	.word	0xffc00000
 8016e4c:	41dfffff 	.word	0x41dfffff
 8016e50:	94a03595 	.word	0x94a03595
 8016e54:	3fcfffff 	.word	0x3fcfffff

08016e58 <_strtod_r>:
 8016e58:	4b05      	ldr	r3, [pc, #20]	; (8016e70 <_strtod_r+0x18>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	b410      	push	{r4}
 8016e5e:	6a1b      	ldr	r3, [r3, #32]
 8016e60:	4c04      	ldr	r4, [pc, #16]	; (8016e74 <_strtod_r+0x1c>)
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	bf08      	it	eq
 8016e66:	4623      	moveq	r3, r4
 8016e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e6c:	f7ff ba00 	b.w	8016270 <_strtod_l>
 8016e70:	2000000c 	.word	0x2000000c
 8016e74:	20000070 	.word	0x20000070

08016e78 <_strtol_l.isra.0>:
 8016e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e7c:	4680      	mov	r8, r0
 8016e7e:	4689      	mov	r9, r1
 8016e80:	4692      	mov	sl, r2
 8016e82:	461e      	mov	r6, r3
 8016e84:	460f      	mov	r7, r1
 8016e86:	463d      	mov	r5, r7
 8016e88:	9808      	ldr	r0, [sp, #32]
 8016e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e8e:	f001 fa0d 	bl	80182ac <__locale_ctype_ptr_l>
 8016e92:	4420      	add	r0, r4
 8016e94:	7843      	ldrb	r3, [r0, #1]
 8016e96:	f013 0308 	ands.w	r3, r3, #8
 8016e9a:	d132      	bne.n	8016f02 <_strtol_l.isra.0+0x8a>
 8016e9c:	2c2d      	cmp	r4, #45	; 0x2d
 8016e9e:	d132      	bne.n	8016f06 <_strtol_l.isra.0+0x8e>
 8016ea0:	787c      	ldrb	r4, [r7, #1]
 8016ea2:	1cbd      	adds	r5, r7, #2
 8016ea4:	2201      	movs	r2, #1
 8016ea6:	2e00      	cmp	r6, #0
 8016ea8:	d05d      	beq.n	8016f66 <_strtol_l.isra.0+0xee>
 8016eaa:	2e10      	cmp	r6, #16
 8016eac:	d109      	bne.n	8016ec2 <_strtol_l.isra.0+0x4a>
 8016eae:	2c30      	cmp	r4, #48	; 0x30
 8016eb0:	d107      	bne.n	8016ec2 <_strtol_l.isra.0+0x4a>
 8016eb2:	782b      	ldrb	r3, [r5, #0]
 8016eb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016eb8:	2b58      	cmp	r3, #88	; 0x58
 8016eba:	d14f      	bne.n	8016f5c <_strtol_l.isra.0+0xe4>
 8016ebc:	786c      	ldrb	r4, [r5, #1]
 8016ebe:	2610      	movs	r6, #16
 8016ec0:	3502      	adds	r5, #2
 8016ec2:	2a00      	cmp	r2, #0
 8016ec4:	bf14      	ite	ne
 8016ec6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016eca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016ece:	2700      	movs	r7, #0
 8016ed0:	fbb1 fcf6 	udiv	ip, r1, r6
 8016ed4:	4638      	mov	r0, r7
 8016ed6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016eda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016ede:	2b09      	cmp	r3, #9
 8016ee0:	d817      	bhi.n	8016f12 <_strtol_l.isra.0+0x9a>
 8016ee2:	461c      	mov	r4, r3
 8016ee4:	42a6      	cmp	r6, r4
 8016ee6:	dd23      	ble.n	8016f30 <_strtol_l.isra.0+0xb8>
 8016ee8:	1c7b      	adds	r3, r7, #1
 8016eea:	d007      	beq.n	8016efc <_strtol_l.isra.0+0x84>
 8016eec:	4584      	cmp	ip, r0
 8016eee:	d31c      	bcc.n	8016f2a <_strtol_l.isra.0+0xb2>
 8016ef0:	d101      	bne.n	8016ef6 <_strtol_l.isra.0+0x7e>
 8016ef2:	45a6      	cmp	lr, r4
 8016ef4:	db19      	blt.n	8016f2a <_strtol_l.isra.0+0xb2>
 8016ef6:	fb00 4006 	mla	r0, r0, r6, r4
 8016efa:	2701      	movs	r7, #1
 8016efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f00:	e7eb      	b.n	8016eda <_strtol_l.isra.0+0x62>
 8016f02:	462f      	mov	r7, r5
 8016f04:	e7bf      	b.n	8016e86 <_strtol_l.isra.0+0xe>
 8016f06:	2c2b      	cmp	r4, #43	; 0x2b
 8016f08:	bf04      	itt	eq
 8016f0a:	1cbd      	addeq	r5, r7, #2
 8016f0c:	787c      	ldrbeq	r4, [r7, #1]
 8016f0e:	461a      	mov	r2, r3
 8016f10:	e7c9      	b.n	8016ea6 <_strtol_l.isra.0+0x2e>
 8016f12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016f16:	2b19      	cmp	r3, #25
 8016f18:	d801      	bhi.n	8016f1e <_strtol_l.isra.0+0xa6>
 8016f1a:	3c37      	subs	r4, #55	; 0x37
 8016f1c:	e7e2      	b.n	8016ee4 <_strtol_l.isra.0+0x6c>
 8016f1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016f22:	2b19      	cmp	r3, #25
 8016f24:	d804      	bhi.n	8016f30 <_strtol_l.isra.0+0xb8>
 8016f26:	3c57      	subs	r4, #87	; 0x57
 8016f28:	e7dc      	b.n	8016ee4 <_strtol_l.isra.0+0x6c>
 8016f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8016f2e:	e7e5      	b.n	8016efc <_strtol_l.isra.0+0x84>
 8016f30:	1c7b      	adds	r3, r7, #1
 8016f32:	d108      	bne.n	8016f46 <_strtol_l.isra.0+0xce>
 8016f34:	2322      	movs	r3, #34	; 0x22
 8016f36:	f8c8 3000 	str.w	r3, [r8]
 8016f3a:	4608      	mov	r0, r1
 8016f3c:	f1ba 0f00 	cmp.w	sl, #0
 8016f40:	d107      	bne.n	8016f52 <_strtol_l.isra.0+0xda>
 8016f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f46:	b102      	cbz	r2, 8016f4a <_strtol_l.isra.0+0xd2>
 8016f48:	4240      	negs	r0, r0
 8016f4a:	f1ba 0f00 	cmp.w	sl, #0
 8016f4e:	d0f8      	beq.n	8016f42 <_strtol_l.isra.0+0xca>
 8016f50:	b10f      	cbz	r7, 8016f56 <_strtol_l.isra.0+0xde>
 8016f52:	f105 39ff 	add.w	r9, r5, #4294967295
 8016f56:	f8ca 9000 	str.w	r9, [sl]
 8016f5a:	e7f2      	b.n	8016f42 <_strtol_l.isra.0+0xca>
 8016f5c:	2430      	movs	r4, #48	; 0x30
 8016f5e:	2e00      	cmp	r6, #0
 8016f60:	d1af      	bne.n	8016ec2 <_strtol_l.isra.0+0x4a>
 8016f62:	2608      	movs	r6, #8
 8016f64:	e7ad      	b.n	8016ec2 <_strtol_l.isra.0+0x4a>
 8016f66:	2c30      	cmp	r4, #48	; 0x30
 8016f68:	d0a3      	beq.n	8016eb2 <_strtol_l.isra.0+0x3a>
 8016f6a:	260a      	movs	r6, #10
 8016f6c:	e7a9      	b.n	8016ec2 <_strtol_l.isra.0+0x4a>
	...

08016f70 <_strtol_r>:
 8016f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f72:	4c06      	ldr	r4, [pc, #24]	; (8016f8c <_strtol_r+0x1c>)
 8016f74:	4d06      	ldr	r5, [pc, #24]	; (8016f90 <_strtol_r+0x20>)
 8016f76:	6824      	ldr	r4, [r4, #0]
 8016f78:	6a24      	ldr	r4, [r4, #32]
 8016f7a:	2c00      	cmp	r4, #0
 8016f7c:	bf08      	it	eq
 8016f7e:	462c      	moveq	r4, r5
 8016f80:	9400      	str	r4, [sp, #0]
 8016f82:	f7ff ff79 	bl	8016e78 <_strtol_l.isra.0>
 8016f86:	b003      	add	sp, #12
 8016f88:	bd30      	pop	{r4, r5, pc}
 8016f8a:	bf00      	nop
 8016f8c:	2000000c 	.word	0x2000000c
 8016f90:	20000070 	.word	0x20000070

08016f94 <_vsiprintf_r>:
 8016f94:	b500      	push	{lr}
 8016f96:	b09b      	sub	sp, #108	; 0x6c
 8016f98:	9100      	str	r1, [sp, #0]
 8016f9a:	9104      	str	r1, [sp, #16]
 8016f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fa0:	9105      	str	r1, [sp, #20]
 8016fa2:	9102      	str	r1, [sp, #8]
 8016fa4:	4905      	ldr	r1, [pc, #20]	; (8016fbc <_vsiprintf_r+0x28>)
 8016fa6:	9103      	str	r1, [sp, #12]
 8016fa8:	4669      	mov	r1, sp
 8016faa:	f001 fecb 	bl	8018d44 <_svfiprintf_r>
 8016fae:	9b00      	ldr	r3, [sp, #0]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	701a      	strb	r2, [r3, #0]
 8016fb4:	b01b      	add	sp, #108	; 0x6c
 8016fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fba:	bf00      	nop
 8016fbc:	ffff0208 	.word	0xffff0208

08016fc0 <vsiprintf>:
 8016fc0:	4613      	mov	r3, r2
 8016fc2:	460a      	mov	r2, r1
 8016fc4:	4601      	mov	r1, r0
 8016fc6:	4802      	ldr	r0, [pc, #8]	; (8016fd0 <vsiprintf+0x10>)
 8016fc8:	6800      	ldr	r0, [r0, #0]
 8016fca:	f7ff bfe3 	b.w	8016f94 <_vsiprintf_r>
 8016fce:	bf00      	nop
 8016fd0:	2000000c 	.word	0x2000000c

08016fd4 <quorem>:
 8016fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd8:	6903      	ldr	r3, [r0, #16]
 8016fda:	690c      	ldr	r4, [r1, #16]
 8016fdc:	42a3      	cmp	r3, r4
 8016fde:	4680      	mov	r8, r0
 8016fe0:	f2c0 8082 	blt.w	80170e8 <quorem+0x114>
 8016fe4:	3c01      	subs	r4, #1
 8016fe6:	f101 0714 	add.w	r7, r1, #20
 8016fea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016fee:	f100 0614 	add.w	r6, r0, #20
 8016ff2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016ff6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016ffa:	eb06 030c 	add.w	r3, r6, ip
 8016ffe:	3501      	adds	r5, #1
 8017000:	eb07 090c 	add.w	r9, r7, ip
 8017004:	9301      	str	r3, [sp, #4]
 8017006:	fbb0 f5f5 	udiv	r5, r0, r5
 801700a:	b395      	cbz	r5, 8017072 <quorem+0x9e>
 801700c:	f04f 0a00 	mov.w	sl, #0
 8017010:	4638      	mov	r0, r7
 8017012:	46b6      	mov	lr, r6
 8017014:	46d3      	mov	fp, sl
 8017016:	f850 2b04 	ldr.w	r2, [r0], #4
 801701a:	b293      	uxth	r3, r2
 801701c:	fb05 a303 	mla	r3, r5, r3, sl
 8017020:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017024:	b29b      	uxth	r3, r3
 8017026:	ebab 0303 	sub.w	r3, fp, r3
 801702a:	0c12      	lsrs	r2, r2, #16
 801702c:	f8de b000 	ldr.w	fp, [lr]
 8017030:	fb05 a202 	mla	r2, r5, r2, sl
 8017034:	fa13 f38b 	uxtah	r3, r3, fp
 8017038:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801703c:	fa1f fb82 	uxth.w	fp, r2
 8017040:	f8de 2000 	ldr.w	r2, [lr]
 8017044:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801704c:	b29b      	uxth	r3, r3
 801704e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017052:	4581      	cmp	r9, r0
 8017054:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017058:	f84e 3b04 	str.w	r3, [lr], #4
 801705c:	d2db      	bcs.n	8017016 <quorem+0x42>
 801705e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017062:	b933      	cbnz	r3, 8017072 <quorem+0x9e>
 8017064:	9b01      	ldr	r3, [sp, #4]
 8017066:	3b04      	subs	r3, #4
 8017068:	429e      	cmp	r6, r3
 801706a:	461a      	mov	r2, r3
 801706c:	d330      	bcc.n	80170d0 <quorem+0xfc>
 801706e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017072:	4640      	mov	r0, r8
 8017074:	f001 fbaa 	bl	80187cc <__mcmp>
 8017078:	2800      	cmp	r0, #0
 801707a:	db25      	blt.n	80170c8 <quorem+0xf4>
 801707c:	3501      	adds	r5, #1
 801707e:	4630      	mov	r0, r6
 8017080:	f04f 0c00 	mov.w	ip, #0
 8017084:	f857 2b04 	ldr.w	r2, [r7], #4
 8017088:	f8d0 e000 	ldr.w	lr, [r0]
 801708c:	b293      	uxth	r3, r2
 801708e:	ebac 0303 	sub.w	r3, ip, r3
 8017092:	0c12      	lsrs	r2, r2, #16
 8017094:	fa13 f38e 	uxtah	r3, r3, lr
 8017098:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801709c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170a6:	45b9      	cmp	r9, r7
 80170a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80170ac:	f840 3b04 	str.w	r3, [r0], #4
 80170b0:	d2e8      	bcs.n	8017084 <quorem+0xb0>
 80170b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80170b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80170ba:	b92a      	cbnz	r2, 80170c8 <quorem+0xf4>
 80170bc:	3b04      	subs	r3, #4
 80170be:	429e      	cmp	r6, r3
 80170c0:	461a      	mov	r2, r3
 80170c2:	d30b      	bcc.n	80170dc <quorem+0x108>
 80170c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80170c8:	4628      	mov	r0, r5
 80170ca:	b003      	add	sp, #12
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d0:	6812      	ldr	r2, [r2, #0]
 80170d2:	3b04      	subs	r3, #4
 80170d4:	2a00      	cmp	r2, #0
 80170d6:	d1ca      	bne.n	801706e <quorem+0x9a>
 80170d8:	3c01      	subs	r4, #1
 80170da:	e7c5      	b.n	8017068 <quorem+0x94>
 80170dc:	6812      	ldr	r2, [r2, #0]
 80170de:	3b04      	subs	r3, #4
 80170e0:	2a00      	cmp	r2, #0
 80170e2:	d1ef      	bne.n	80170c4 <quorem+0xf0>
 80170e4:	3c01      	subs	r4, #1
 80170e6:	e7ea      	b.n	80170be <quorem+0xea>
 80170e8:	2000      	movs	r0, #0
 80170ea:	e7ee      	b.n	80170ca <quorem+0xf6>
 80170ec:	0000      	movs	r0, r0
	...

080170f0 <_dtoa_r>:
 80170f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f4:	ec57 6b10 	vmov	r6, r7, d0
 80170f8:	b097      	sub	sp, #92	; 0x5c
 80170fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80170fc:	9106      	str	r1, [sp, #24]
 80170fe:	4604      	mov	r4, r0
 8017100:	920b      	str	r2, [sp, #44]	; 0x2c
 8017102:	9312      	str	r3, [sp, #72]	; 0x48
 8017104:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017108:	e9cd 6700 	strd	r6, r7, [sp]
 801710c:	b93d      	cbnz	r5, 801711e <_dtoa_r+0x2e>
 801710e:	2010      	movs	r0, #16
 8017110:	f001 f8ee 	bl	80182f0 <malloc>
 8017114:	6260      	str	r0, [r4, #36]	; 0x24
 8017116:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801711a:	6005      	str	r5, [r0, #0]
 801711c:	60c5      	str	r5, [r0, #12]
 801711e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017120:	6819      	ldr	r1, [r3, #0]
 8017122:	b151      	cbz	r1, 801713a <_dtoa_r+0x4a>
 8017124:	685a      	ldr	r2, [r3, #4]
 8017126:	604a      	str	r2, [r1, #4]
 8017128:	2301      	movs	r3, #1
 801712a:	4093      	lsls	r3, r2
 801712c:	608b      	str	r3, [r1, #8]
 801712e:	4620      	mov	r0, r4
 8017130:	f001 f92c 	bl	801838c <_Bfree>
 8017134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017136:	2200      	movs	r2, #0
 8017138:	601a      	str	r2, [r3, #0]
 801713a:	1e3b      	subs	r3, r7, #0
 801713c:	bfbb      	ittet	lt
 801713e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017142:	9301      	strlt	r3, [sp, #4]
 8017144:	2300      	movge	r3, #0
 8017146:	2201      	movlt	r2, #1
 8017148:	bfac      	ite	ge
 801714a:	f8c8 3000 	strge.w	r3, [r8]
 801714e:	f8c8 2000 	strlt.w	r2, [r8]
 8017152:	4baf      	ldr	r3, [pc, #700]	; (8017410 <_dtoa_r+0x320>)
 8017154:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017158:	ea33 0308 	bics.w	r3, r3, r8
 801715c:	d114      	bne.n	8017188 <_dtoa_r+0x98>
 801715e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017160:	f242 730f 	movw	r3, #9999	; 0x270f
 8017164:	6013      	str	r3, [r2, #0]
 8017166:	9b00      	ldr	r3, [sp, #0]
 8017168:	b923      	cbnz	r3, 8017174 <_dtoa_r+0x84>
 801716a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801716e:	2800      	cmp	r0, #0
 8017170:	f000 8542 	beq.w	8017bf8 <_dtoa_r+0xb08>
 8017174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017176:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017424 <_dtoa_r+0x334>
 801717a:	2b00      	cmp	r3, #0
 801717c:	f000 8544 	beq.w	8017c08 <_dtoa_r+0xb18>
 8017180:	f10b 0303 	add.w	r3, fp, #3
 8017184:	f000 bd3e 	b.w	8017c04 <_dtoa_r+0xb14>
 8017188:	e9dd 6700 	ldrd	r6, r7, [sp]
 801718c:	2200      	movs	r2, #0
 801718e:	2300      	movs	r3, #0
 8017190:	4630      	mov	r0, r6
 8017192:	4639      	mov	r1, r7
 8017194:	f7e9 fcb0 	bl	8000af8 <__aeabi_dcmpeq>
 8017198:	4681      	mov	r9, r0
 801719a:	b168      	cbz	r0, 80171b8 <_dtoa_r+0xc8>
 801719c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801719e:	2301      	movs	r3, #1
 80171a0:	6013      	str	r3, [r2, #0]
 80171a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f000 8524 	beq.w	8017bf2 <_dtoa_r+0xb02>
 80171aa:	4b9a      	ldr	r3, [pc, #616]	; (8017414 <_dtoa_r+0x324>)
 80171ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80171ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80171b2:	6013      	str	r3, [r2, #0]
 80171b4:	f000 bd28 	b.w	8017c08 <_dtoa_r+0xb18>
 80171b8:	aa14      	add	r2, sp, #80	; 0x50
 80171ba:	a915      	add	r1, sp, #84	; 0x54
 80171bc:	ec47 6b10 	vmov	d0, r6, r7
 80171c0:	4620      	mov	r0, r4
 80171c2:	f001 fbf1 	bl	80189a8 <__d2b>
 80171c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80171ca:	9004      	str	r0, [sp, #16]
 80171cc:	2d00      	cmp	r5, #0
 80171ce:	d07c      	beq.n	80172ca <_dtoa_r+0x1da>
 80171d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80171d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80171d8:	46b2      	mov	sl, r6
 80171da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80171de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80171e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80171e6:	2200      	movs	r2, #0
 80171e8:	4b8b      	ldr	r3, [pc, #556]	; (8017418 <_dtoa_r+0x328>)
 80171ea:	4650      	mov	r0, sl
 80171ec:	4659      	mov	r1, fp
 80171ee:	f7e9 f863 	bl	80002b8 <__aeabi_dsub>
 80171f2:	a381      	add	r3, pc, #516	; (adr r3, 80173f8 <_dtoa_r+0x308>)
 80171f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f8:	f7e9 fa16 	bl	8000628 <__aeabi_dmul>
 80171fc:	a380      	add	r3, pc, #512	; (adr r3, 8017400 <_dtoa_r+0x310>)
 80171fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017202:	f7e9 f85b 	bl	80002bc <__adddf3>
 8017206:	4606      	mov	r6, r0
 8017208:	4628      	mov	r0, r5
 801720a:	460f      	mov	r7, r1
 801720c:	f7e9 f9a2 	bl	8000554 <__aeabi_i2d>
 8017210:	a37d      	add	r3, pc, #500	; (adr r3, 8017408 <_dtoa_r+0x318>)
 8017212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017216:	f7e9 fa07 	bl	8000628 <__aeabi_dmul>
 801721a:	4602      	mov	r2, r0
 801721c:	460b      	mov	r3, r1
 801721e:	4630      	mov	r0, r6
 8017220:	4639      	mov	r1, r7
 8017222:	f7e9 f84b 	bl	80002bc <__adddf3>
 8017226:	4606      	mov	r6, r0
 8017228:	460f      	mov	r7, r1
 801722a:	f7e9 fcad 	bl	8000b88 <__aeabi_d2iz>
 801722e:	2200      	movs	r2, #0
 8017230:	4682      	mov	sl, r0
 8017232:	2300      	movs	r3, #0
 8017234:	4630      	mov	r0, r6
 8017236:	4639      	mov	r1, r7
 8017238:	f7e9 fc68 	bl	8000b0c <__aeabi_dcmplt>
 801723c:	b148      	cbz	r0, 8017252 <_dtoa_r+0x162>
 801723e:	4650      	mov	r0, sl
 8017240:	f7e9 f988 	bl	8000554 <__aeabi_i2d>
 8017244:	4632      	mov	r2, r6
 8017246:	463b      	mov	r3, r7
 8017248:	f7e9 fc56 	bl	8000af8 <__aeabi_dcmpeq>
 801724c:	b908      	cbnz	r0, 8017252 <_dtoa_r+0x162>
 801724e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017252:	f1ba 0f16 	cmp.w	sl, #22
 8017256:	d859      	bhi.n	801730c <_dtoa_r+0x21c>
 8017258:	4970      	ldr	r1, [pc, #448]	; (801741c <_dtoa_r+0x32c>)
 801725a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801725e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017266:	f7e9 fc6f 	bl	8000b48 <__aeabi_dcmpgt>
 801726a:	2800      	cmp	r0, #0
 801726c:	d050      	beq.n	8017310 <_dtoa_r+0x220>
 801726e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017272:	2300      	movs	r3, #0
 8017274:	930f      	str	r3, [sp, #60]	; 0x3c
 8017276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017278:	1b5d      	subs	r5, r3, r5
 801727a:	f1b5 0801 	subs.w	r8, r5, #1
 801727e:	bf49      	itett	mi
 8017280:	f1c5 0301 	rsbmi	r3, r5, #1
 8017284:	2300      	movpl	r3, #0
 8017286:	9305      	strmi	r3, [sp, #20]
 8017288:	f04f 0800 	movmi.w	r8, #0
 801728c:	bf58      	it	pl
 801728e:	9305      	strpl	r3, [sp, #20]
 8017290:	f1ba 0f00 	cmp.w	sl, #0
 8017294:	db3e      	blt.n	8017314 <_dtoa_r+0x224>
 8017296:	2300      	movs	r3, #0
 8017298:	44d0      	add	r8, sl
 801729a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801729e:	9307      	str	r3, [sp, #28]
 80172a0:	9b06      	ldr	r3, [sp, #24]
 80172a2:	2b09      	cmp	r3, #9
 80172a4:	f200 8090 	bhi.w	80173c8 <_dtoa_r+0x2d8>
 80172a8:	2b05      	cmp	r3, #5
 80172aa:	bfc4      	itt	gt
 80172ac:	3b04      	subgt	r3, #4
 80172ae:	9306      	strgt	r3, [sp, #24]
 80172b0:	9b06      	ldr	r3, [sp, #24]
 80172b2:	f1a3 0302 	sub.w	r3, r3, #2
 80172b6:	bfcc      	ite	gt
 80172b8:	2500      	movgt	r5, #0
 80172ba:	2501      	movle	r5, #1
 80172bc:	2b03      	cmp	r3, #3
 80172be:	f200 808f 	bhi.w	80173e0 <_dtoa_r+0x2f0>
 80172c2:	e8df f003 	tbb	[pc, r3]
 80172c6:	7f7d      	.short	0x7f7d
 80172c8:	7131      	.short	0x7131
 80172ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80172ce:	441d      	add	r5, r3
 80172d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80172d4:	2820      	cmp	r0, #32
 80172d6:	dd13      	ble.n	8017300 <_dtoa_r+0x210>
 80172d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80172dc:	9b00      	ldr	r3, [sp, #0]
 80172de:	fa08 f800 	lsl.w	r8, r8, r0
 80172e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80172e6:	fa23 f000 	lsr.w	r0, r3, r0
 80172ea:	ea48 0000 	orr.w	r0, r8, r0
 80172ee:	f7e9 f921 	bl	8000534 <__aeabi_ui2d>
 80172f2:	2301      	movs	r3, #1
 80172f4:	4682      	mov	sl, r0
 80172f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80172fa:	3d01      	subs	r5, #1
 80172fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80172fe:	e772      	b.n	80171e6 <_dtoa_r+0xf6>
 8017300:	9b00      	ldr	r3, [sp, #0]
 8017302:	f1c0 0020 	rsb	r0, r0, #32
 8017306:	fa03 f000 	lsl.w	r0, r3, r0
 801730a:	e7f0      	b.n	80172ee <_dtoa_r+0x1fe>
 801730c:	2301      	movs	r3, #1
 801730e:	e7b1      	b.n	8017274 <_dtoa_r+0x184>
 8017310:	900f      	str	r0, [sp, #60]	; 0x3c
 8017312:	e7b0      	b.n	8017276 <_dtoa_r+0x186>
 8017314:	9b05      	ldr	r3, [sp, #20]
 8017316:	eba3 030a 	sub.w	r3, r3, sl
 801731a:	9305      	str	r3, [sp, #20]
 801731c:	f1ca 0300 	rsb	r3, sl, #0
 8017320:	9307      	str	r3, [sp, #28]
 8017322:	2300      	movs	r3, #0
 8017324:	930e      	str	r3, [sp, #56]	; 0x38
 8017326:	e7bb      	b.n	80172a0 <_dtoa_r+0x1b0>
 8017328:	2301      	movs	r3, #1
 801732a:	930a      	str	r3, [sp, #40]	; 0x28
 801732c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801732e:	2b00      	cmp	r3, #0
 8017330:	dd59      	ble.n	80173e6 <_dtoa_r+0x2f6>
 8017332:	9302      	str	r3, [sp, #8]
 8017334:	4699      	mov	r9, r3
 8017336:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017338:	2200      	movs	r2, #0
 801733a:	6072      	str	r2, [r6, #4]
 801733c:	2204      	movs	r2, #4
 801733e:	f102 0014 	add.w	r0, r2, #20
 8017342:	4298      	cmp	r0, r3
 8017344:	6871      	ldr	r1, [r6, #4]
 8017346:	d953      	bls.n	80173f0 <_dtoa_r+0x300>
 8017348:	4620      	mov	r0, r4
 801734a:	f000 ffeb 	bl	8018324 <_Balloc>
 801734e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017350:	6030      	str	r0, [r6, #0]
 8017352:	f1b9 0f0e 	cmp.w	r9, #14
 8017356:	f8d3 b000 	ldr.w	fp, [r3]
 801735a:	f200 80e6 	bhi.w	801752a <_dtoa_r+0x43a>
 801735e:	2d00      	cmp	r5, #0
 8017360:	f000 80e3 	beq.w	801752a <_dtoa_r+0x43a>
 8017364:	ed9d 7b00 	vldr	d7, [sp]
 8017368:	f1ba 0f00 	cmp.w	sl, #0
 801736c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017370:	dd74      	ble.n	801745c <_dtoa_r+0x36c>
 8017372:	4a2a      	ldr	r2, [pc, #168]	; (801741c <_dtoa_r+0x32c>)
 8017374:	f00a 030f 	and.w	r3, sl, #15
 8017378:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801737c:	ed93 7b00 	vldr	d7, [r3]
 8017380:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017384:	06f0      	lsls	r0, r6, #27
 8017386:	ed8d 7b08 	vstr	d7, [sp, #32]
 801738a:	d565      	bpl.n	8017458 <_dtoa_r+0x368>
 801738c:	4b24      	ldr	r3, [pc, #144]	; (8017420 <_dtoa_r+0x330>)
 801738e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017392:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017396:	f7e9 fa71 	bl	800087c <__aeabi_ddiv>
 801739a:	e9cd 0100 	strd	r0, r1, [sp]
 801739e:	f006 060f 	and.w	r6, r6, #15
 80173a2:	2503      	movs	r5, #3
 80173a4:	4f1e      	ldr	r7, [pc, #120]	; (8017420 <_dtoa_r+0x330>)
 80173a6:	e04c      	b.n	8017442 <_dtoa_r+0x352>
 80173a8:	2301      	movs	r3, #1
 80173aa:	930a      	str	r3, [sp, #40]	; 0x28
 80173ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173ae:	4453      	add	r3, sl
 80173b0:	f103 0901 	add.w	r9, r3, #1
 80173b4:	9302      	str	r3, [sp, #8]
 80173b6:	464b      	mov	r3, r9
 80173b8:	2b01      	cmp	r3, #1
 80173ba:	bfb8      	it	lt
 80173bc:	2301      	movlt	r3, #1
 80173be:	e7ba      	b.n	8017336 <_dtoa_r+0x246>
 80173c0:	2300      	movs	r3, #0
 80173c2:	e7b2      	b.n	801732a <_dtoa_r+0x23a>
 80173c4:	2300      	movs	r3, #0
 80173c6:	e7f0      	b.n	80173aa <_dtoa_r+0x2ba>
 80173c8:	2501      	movs	r5, #1
 80173ca:	2300      	movs	r3, #0
 80173cc:	9306      	str	r3, [sp, #24]
 80173ce:	950a      	str	r5, [sp, #40]	; 0x28
 80173d0:	f04f 33ff 	mov.w	r3, #4294967295
 80173d4:	9302      	str	r3, [sp, #8]
 80173d6:	4699      	mov	r9, r3
 80173d8:	2200      	movs	r2, #0
 80173da:	2312      	movs	r3, #18
 80173dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80173de:	e7aa      	b.n	8017336 <_dtoa_r+0x246>
 80173e0:	2301      	movs	r3, #1
 80173e2:	930a      	str	r3, [sp, #40]	; 0x28
 80173e4:	e7f4      	b.n	80173d0 <_dtoa_r+0x2e0>
 80173e6:	2301      	movs	r3, #1
 80173e8:	9302      	str	r3, [sp, #8]
 80173ea:	4699      	mov	r9, r3
 80173ec:	461a      	mov	r2, r3
 80173ee:	e7f5      	b.n	80173dc <_dtoa_r+0x2ec>
 80173f0:	3101      	adds	r1, #1
 80173f2:	6071      	str	r1, [r6, #4]
 80173f4:	0052      	lsls	r2, r2, #1
 80173f6:	e7a2      	b.n	801733e <_dtoa_r+0x24e>
 80173f8:	636f4361 	.word	0x636f4361
 80173fc:	3fd287a7 	.word	0x3fd287a7
 8017400:	8b60c8b3 	.word	0x8b60c8b3
 8017404:	3fc68a28 	.word	0x3fc68a28
 8017408:	509f79fb 	.word	0x509f79fb
 801740c:	3fd34413 	.word	0x3fd34413
 8017410:	7ff00000 	.word	0x7ff00000
 8017414:	0801a364 	.word	0x0801a364
 8017418:	3ff80000 	.word	0x3ff80000
 801741c:	0801a268 	.word	0x0801a268
 8017420:	0801a240 	.word	0x0801a240
 8017424:	0801a1c9 	.word	0x0801a1c9
 8017428:	07f1      	lsls	r1, r6, #31
 801742a:	d508      	bpl.n	801743e <_dtoa_r+0x34e>
 801742c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017434:	f7e9 f8f8 	bl	8000628 <__aeabi_dmul>
 8017438:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801743c:	3501      	adds	r5, #1
 801743e:	1076      	asrs	r6, r6, #1
 8017440:	3708      	adds	r7, #8
 8017442:	2e00      	cmp	r6, #0
 8017444:	d1f0      	bne.n	8017428 <_dtoa_r+0x338>
 8017446:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801744a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801744e:	f7e9 fa15 	bl	800087c <__aeabi_ddiv>
 8017452:	e9cd 0100 	strd	r0, r1, [sp]
 8017456:	e01a      	b.n	801748e <_dtoa_r+0x39e>
 8017458:	2502      	movs	r5, #2
 801745a:	e7a3      	b.n	80173a4 <_dtoa_r+0x2b4>
 801745c:	f000 80a0 	beq.w	80175a0 <_dtoa_r+0x4b0>
 8017460:	f1ca 0600 	rsb	r6, sl, #0
 8017464:	4b9f      	ldr	r3, [pc, #636]	; (80176e4 <_dtoa_r+0x5f4>)
 8017466:	4fa0      	ldr	r7, [pc, #640]	; (80176e8 <_dtoa_r+0x5f8>)
 8017468:	f006 020f 	and.w	r2, r6, #15
 801746c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017478:	f7e9 f8d6 	bl	8000628 <__aeabi_dmul>
 801747c:	e9cd 0100 	strd	r0, r1, [sp]
 8017480:	1136      	asrs	r6, r6, #4
 8017482:	2300      	movs	r3, #0
 8017484:	2502      	movs	r5, #2
 8017486:	2e00      	cmp	r6, #0
 8017488:	d17f      	bne.n	801758a <_dtoa_r+0x49a>
 801748a:	2b00      	cmp	r3, #0
 801748c:	d1e1      	bne.n	8017452 <_dtoa_r+0x362>
 801748e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017490:	2b00      	cmp	r3, #0
 8017492:	f000 8087 	beq.w	80175a4 <_dtoa_r+0x4b4>
 8017496:	e9dd 6700 	ldrd	r6, r7, [sp]
 801749a:	2200      	movs	r2, #0
 801749c:	4b93      	ldr	r3, [pc, #588]	; (80176ec <_dtoa_r+0x5fc>)
 801749e:	4630      	mov	r0, r6
 80174a0:	4639      	mov	r1, r7
 80174a2:	f7e9 fb33 	bl	8000b0c <__aeabi_dcmplt>
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d07c      	beq.n	80175a4 <_dtoa_r+0x4b4>
 80174aa:	f1b9 0f00 	cmp.w	r9, #0
 80174ae:	d079      	beq.n	80175a4 <_dtoa_r+0x4b4>
 80174b0:	9b02      	ldr	r3, [sp, #8]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	dd35      	ble.n	8017522 <_dtoa_r+0x432>
 80174b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80174ba:	9308      	str	r3, [sp, #32]
 80174bc:	4639      	mov	r1, r7
 80174be:	2200      	movs	r2, #0
 80174c0:	4b8b      	ldr	r3, [pc, #556]	; (80176f0 <_dtoa_r+0x600>)
 80174c2:	4630      	mov	r0, r6
 80174c4:	f7e9 f8b0 	bl	8000628 <__aeabi_dmul>
 80174c8:	e9cd 0100 	strd	r0, r1, [sp]
 80174cc:	9f02      	ldr	r7, [sp, #8]
 80174ce:	3501      	adds	r5, #1
 80174d0:	4628      	mov	r0, r5
 80174d2:	f7e9 f83f 	bl	8000554 <__aeabi_i2d>
 80174d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174da:	f7e9 f8a5 	bl	8000628 <__aeabi_dmul>
 80174de:	2200      	movs	r2, #0
 80174e0:	4b84      	ldr	r3, [pc, #528]	; (80176f4 <_dtoa_r+0x604>)
 80174e2:	f7e8 feeb 	bl	80002bc <__adddf3>
 80174e6:	4605      	mov	r5, r0
 80174e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80174ec:	2f00      	cmp	r7, #0
 80174ee:	d15d      	bne.n	80175ac <_dtoa_r+0x4bc>
 80174f0:	2200      	movs	r2, #0
 80174f2:	4b81      	ldr	r3, [pc, #516]	; (80176f8 <_dtoa_r+0x608>)
 80174f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174f8:	f7e8 fede 	bl	80002b8 <__aeabi_dsub>
 80174fc:	462a      	mov	r2, r5
 80174fe:	4633      	mov	r3, r6
 8017500:	e9cd 0100 	strd	r0, r1, [sp]
 8017504:	f7e9 fb20 	bl	8000b48 <__aeabi_dcmpgt>
 8017508:	2800      	cmp	r0, #0
 801750a:	f040 8288 	bne.w	8017a1e <_dtoa_r+0x92e>
 801750e:	462a      	mov	r2, r5
 8017510:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017518:	f7e9 faf8 	bl	8000b0c <__aeabi_dcmplt>
 801751c:	2800      	cmp	r0, #0
 801751e:	f040 827c 	bne.w	8017a1a <_dtoa_r+0x92a>
 8017522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017526:	e9cd 2300 	strd	r2, r3, [sp]
 801752a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801752c:	2b00      	cmp	r3, #0
 801752e:	f2c0 8150 	blt.w	80177d2 <_dtoa_r+0x6e2>
 8017532:	f1ba 0f0e 	cmp.w	sl, #14
 8017536:	f300 814c 	bgt.w	80177d2 <_dtoa_r+0x6e2>
 801753a:	4b6a      	ldr	r3, [pc, #424]	; (80176e4 <_dtoa_r+0x5f4>)
 801753c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017540:	ed93 7b00 	vldr	d7, [r3]
 8017544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017546:	2b00      	cmp	r3, #0
 8017548:	ed8d 7b02 	vstr	d7, [sp, #8]
 801754c:	f280 80d8 	bge.w	8017700 <_dtoa_r+0x610>
 8017550:	f1b9 0f00 	cmp.w	r9, #0
 8017554:	f300 80d4 	bgt.w	8017700 <_dtoa_r+0x610>
 8017558:	f040 825e 	bne.w	8017a18 <_dtoa_r+0x928>
 801755c:	2200      	movs	r2, #0
 801755e:	4b66      	ldr	r3, [pc, #408]	; (80176f8 <_dtoa_r+0x608>)
 8017560:	ec51 0b17 	vmov	r0, r1, d7
 8017564:	f7e9 f860 	bl	8000628 <__aeabi_dmul>
 8017568:	e9dd 2300 	ldrd	r2, r3, [sp]
 801756c:	f7e9 fae2 	bl	8000b34 <__aeabi_dcmpge>
 8017570:	464f      	mov	r7, r9
 8017572:	464e      	mov	r6, r9
 8017574:	2800      	cmp	r0, #0
 8017576:	f040 8234 	bne.w	80179e2 <_dtoa_r+0x8f2>
 801757a:	2331      	movs	r3, #49	; 0x31
 801757c:	f10b 0501 	add.w	r5, fp, #1
 8017580:	f88b 3000 	strb.w	r3, [fp]
 8017584:	f10a 0a01 	add.w	sl, sl, #1
 8017588:	e22f      	b.n	80179ea <_dtoa_r+0x8fa>
 801758a:	07f2      	lsls	r2, r6, #31
 801758c:	d505      	bpl.n	801759a <_dtoa_r+0x4aa>
 801758e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017592:	f7e9 f849 	bl	8000628 <__aeabi_dmul>
 8017596:	3501      	adds	r5, #1
 8017598:	2301      	movs	r3, #1
 801759a:	1076      	asrs	r6, r6, #1
 801759c:	3708      	adds	r7, #8
 801759e:	e772      	b.n	8017486 <_dtoa_r+0x396>
 80175a0:	2502      	movs	r5, #2
 80175a2:	e774      	b.n	801748e <_dtoa_r+0x39e>
 80175a4:	f8cd a020 	str.w	sl, [sp, #32]
 80175a8:	464f      	mov	r7, r9
 80175aa:	e791      	b.n	80174d0 <_dtoa_r+0x3e0>
 80175ac:	4b4d      	ldr	r3, [pc, #308]	; (80176e4 <_dtoa_r+0x5f4>)
 80175ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80175b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80175b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d047      	beq.n	801764c <_dtoa_r+0x55c>
 80175bc:	4602      	mov	r2, r0
 80175be:	460b      	mov	r3, r1
 80175c0:	2000      	movs	r0, #0
 80175c2:	494e      	ldr	r1, [pc, #312]	; (80176fc <_dtoa_r+0x60c>)
 80175c4:	f7e9 f95a 	bl	800087c <__aeabi_ddiv>
 80175c8:	462a      	mov	r2, r5
 80175ca:	4633      	mov	r3, r6
 80175cc:	f7e8 fe74 	bl	80002b8 <__aeabi_dsub>
 80175d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80175d4:	465d      	mov	r5, fp
 80175d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80175da:	f7e9 fad5 	bl	8000b88 <__aeabi_d2iz>
 80175de:	4606      	mov	r6, r0
 80175e0:	f7e8 ffb8 	bl	8000554 <__aeabi_i2d>
 80175e4:	4602      	mov	r2, r0
 80175e6:	460b      	mov	r3, r1
 80175e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80175ec:	f7e8 fe64 	bl	80002b8 <__aeabi_dsub>
 80175f0:	3630      	adds	r6, #48	; 0x30
 80175f2:	f805 6b01 	strb.w	r6, [r5], #1
 80175f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80175fa:	e9cd 0100 	strd	r0, r1, [sp]
 80175fe:	f7e9 fa85 	bl	8000b0c <__aeabi_dcmplt>
 8017602:	2800      	cmp	r0, #0
 8017604:	d163      	bne.n	80176ce <_dtoa_r+0x5de>
 8017606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801760a:	2000      	movs	r0, #0
 801760c:	4937      	ldr	r1, [pc, #220]	; (80176ec <_dtoa_r+0x5fc>)
 801760e:	f7e8 fe53 	bl	80002b8 <__aeabi_dsub>
 8017612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017616:	f7e9 fa79 	bl	8000b0c <__aeabi_dcmplt>
 801761a:	2800      	cmp	r0, #0
 801761c:	f040 80b7 	bne.w	801778e <_dtoa_r+0x69e>
 8017620:	eba5 030b 	sub.w	r3, r5, fp
 8017624:	429f      	cmp	r7, r3
 8017626:	f77f af7c 	ble.w	8017522 <_dtoa_r+0x432>
 801762a:	2200      	movs	r2, #0
 801762c:	4b30      	ldr	r3, [pc, #192]	; (80176f0 <_dtoa_r+0x600>)
 801762e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017632:	f7e8 fff9 	bl	8000628 <__aeabi_dmul>
 8017636:	2200      	movs	r2, #0
 8017638:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801763c:	4b2c      	ldr	r3, [pc, #176]	; (80176f0 <_dtoa_r+0x600>)
 801763e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017642:	f7e8 fff1 	bl	8000628 <__aeabi_dmul>
 8017646:	e9cd 0100 	strd	r0, r1, [sp]
 801764a:	e7c4      	b.n	80175d6 <_dtoa_r+0x4e6>
 801764c:	462a      	mov	r2, r5
 801764e:	4633      	mov	r3, r6
 8017650:	f7e8 ffea 	bl	8000628 <__aeabi_dmul>
 8017654:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017658:	eb0b 0507 	add.w	r5, fp, r7
 801765c:	465e      	mov	r6, fp
 801765e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017662:	f7e9 fa91 	bl	8000b88 <__aeabi_d2iz>
 8017666:	4607      	mov	r7, r0
 8017668:	f7e8 ff74 	bl	8000554 <__aeabi_i2d>
 801766c:	3730      	adds	r7, #48	; 0x30
 801766e:	4602      	mov	r2, r0
 8017670:	460b      	mov	r3, r1
 8017672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017676:	f7e8 fe1f 	bl	80002b8 <__aeabi_dsub>
 801767a:	f806 7b01 	strb.w	r7, [r6], #1
 801767e:	42ae      	cmp	r6, r5
 8017680:	e9cd 0100 	strd	r0, r1, [sp]
 8017684:	f04f 0200 	mov.w	r2, #0
 8017688:	d126      	bne.n	80176d8 <_dtoa_r+0x5e8>
 801768a:	4b1c      	ldr	r3, [pc, #112]	; (80176fc <_dtoa_r+0x60c>)
 801768c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017690:	f7e8 fe14 	bl	80002bc <__adddf3>
 8017694:	4602      	mov	r2, r0
 8017696:	460b      	mov	r3, r1
 8017698:	e9dd 0100 	ldrd	r0, r1, [sp]
 801769c:	f7e9 fa54 	bl	8000b48 <__aeabi_dcmpgt>
 80176a0:	2800      	cmp	r0, #0
 80176a2:	d174      	bne.n	801778e <_dtoa_r+0x69e>
 80176a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80176a8:	2000      	movs	r0, #0
 80176aa:	4914      	ldr	r1, [pc, #80]	; (80176fc <_dtoa_r+0x60c>)
 80176ac:	f7e8 fe04 	bl	80002b8 <__aeabi_dsub>
 80176b0:	4602      	mov	r2, r0
 80176b2:	460b      	mov	r3, r1
 80176b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176b8:	f7e9 fa28 	bl	8000b0c <__aeabi_dcmplt>
 80176bc:	2800      	cmp	r0, #0
 80176be:	f43f af30 	beq.w	8017522 <_dtoa_r+0x432>
 80176c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80176c6:	2b30      	cmp	r3, #48	; 0x30
 80176c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80176cc:	d002      	beq.n	80176d4 <_dtoa_r+0x5e4>
 80176ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80176d2:	e04a      	b.n	801776a <_dtoa_r+0x67a>
 80176d4:	4615      	mov	r5, r2
 80176d6:	e7f4      	b.n	80176c2 <_dtoa_r+0x5d2>
 80176d8:	4b05      	ldr	r3, [pc, #20]	; (80176f0 <_dtoa_r+0x600>)
 80176da:	f7e8 ffa5 	bl	8000628 <__aeabi_dmul>
 80176de:	e9cd 0100 	strd	r0, r1, [sp]
 80176e2:	e7bc      	b.n	801765e <_dtoa_r+0x56e>
 80176e4:	0801a268 	.word	0x0801a268
 80176e8:	0801a240 	.word	0x0801a240
 80176ec:	3ff00000 	.word	0x3ff00000
 80176f0:	40240000 	.word	0x40240000
 80176f4:	401c0000 	.word	0x401c0000
 80176f8:	40140000 	.word	0x40140000
 80176fc:	3fe00000 	.word	0x3fe00000
 8017700:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017704:	465d      	mov	r5, fp
 8017706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801770a:	4630      	mov	r0, r6
 801770c:	4639      	mov	r1, r7
 801770e:	f7e9 f8b5 	bl	800087c <__aeabi_ddiv>
 8017712:	f7e9 fa39 	bl	8000b88 <__aeabi_d2iz>
 8017716:	4680      	mov	r8, r0
 8017718:	f7e8 ff1c 	bl	8000554 <__aeabi_i2d>
 801771c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017720:	f7e8 ff82 	bl	8000628 <__aeabi_dmul>
 8017724:	4602      	mov	r2, r0
 8017726:	460b      	mov	r3, r1
 8017728:	4630      	mov	r0, r6
 801772a:	4639      	mov	r1, r7
 801772c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017730:	f7e8 fdc2 	bl	80002b8 <__aeabi_dsub>
 8017734:	f805 6b01 	strb.w	r6, [r5], #1
 8017738:	eba5 060b 	sub.w	r6, r5, fp
 801773c:	45b1      	cmp	r9, r6
 801773e:	4602      	mov	r2, r0
 8017740:	460b      	mov	r3, r1
 8017742:	d139      	bne.n	80177b8 <_dtoa_r+0x6c8>
 8017744:	f7e8 fdba 	bl	80002bc <__adddf3>
 8017748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801774c:	4606      	mov	r6, r0
 801774e:	460f      	mov	r7, r1
 8017750:	f7e9 f9fa 	bl	8000b48 <__aeabi_dcmpgt>
 8017754:	b9c8      	cbnz	r0, 801778a <_dtoa_r+0x69a>
 8017756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801775a:	4630      	mov	r0, r6
 801775c:	4639      	mov	r1, r7
 801775e:	f7e9 f9cb 	bl	8000af8 <__aeabi_dcmpeq>
 8017762:	b110      	cbz	r0, 801776a <_dtoa_r+0x67a>
 8017764:	f018 0f01 	tst.w	r8, #1
 8017768:	d10f      	bne.n	801778a <_dtoa_r+0x69a>
 801776a:	9904      	ldr	r1, [sp, #16]
 801776c:	4620      	mov	r0, r4
 801776e:	f000 fe0d 	bl	801838c <_Bfree>
 8017772:	2300      	movs	r3, #0
 8017774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017776:	702b      	strb	r3, [r5, #0]
 8017778:	f10a 0301 	add.w	r3, sl, #1
 801777c:	6013      	str	r3, [r2, #0]
 801777e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017780:	2b00      	cmp	r3, #0
 8017782:	f000 8241 	beq.w	8017c08 <_dtoa_r+0xb18>
 8017786:	601d      	str	r5, [r3, #0]
 8017788:	e23e      	b.n	8017c08 <_dtoa_r+0xb18>
 801778a:	f8cd a020 	str.w	sl, [sp, #32]
 801778e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017792:	2a39      	cmp	r2, #57	; 0x39
 8017794:	f105 33ff 	add.w	r3, r5, #4294967295
 8017798:	d108      	bne.n	80177ac <_dtoa_r+0x6bc>
 801779a:	459b      	cmp	fp, r3
 801779c:	d10a      	bne.n	80177b4 <_dtoa_r+0x6c4>
 801779e:	9b08      	ldr	r3, [sp, #32]
 80177a0:	3301      	adds	r3, #1
 80177a2:	9308      	str	r3, [sp, #32]
 80177a4:	2330      	movs	r3, #48	; 0x30
 80177a6:	f88b 3000 	strb.w	r3, [fp]
 80177aa:	465b      	mov	r3, fp
 80177ac:	781a      	ldrb	r2, [r3, #0]
 80177ae:	3201      	adds	r2, #1
 80177b0:	701a      	strb	r2, [r3, #0]
 80177b2:	e78c      	b.n	80176ce <_dtoa_r+0x5de>
 80177b4:	461d      	mov	r5, r3
 80177b6:	e7ea      	b.n	801778e <_dtoa_r+0x69e>
 80177b8:	2200      	movs	r2, #0
 80177ba:	4b9b      	ldr	r3, [pc, #620]	; (8017a28 <_dtoa_r+0x938>)
 80177bc:	f7e8 ff34 	bl	8000628 <__aeabi_dmul>
 80177c0:	2200      	movs	r2, #0
 80177c2:	2300      	movs	r3, #0
 80177c4:	4606      	mov	r6, r0
 80177c6:	460f      	mov	r7, r1
 80177c8:	f7e9 f996 	bl	8000af8 <__aeabi_dcmpeq>
 80177cc:	2800      	cmp	r0, #0
 80177ce:	d09a      	beq.n	8017706 <_dtoa_r+0x616>
 80177d0:	e7cb      	b.n	801776a <_dtoa_r+0x67a>
 80177d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177d4:	2a00      	cmp	r2, #0
 80177d6:	f000 808b 	beq.w	80178f0 <_dtoa_r+0x800>
 80177da:	9a06      	ldr	r2, [sp, #24]
 80177dc:	2a01      	cmp	r2, #1
 80177de:	dc6e      	bgt.n	80178be <_dtoa_r+0x7ce>
 80177e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80177e2:	2a00      	cmp	r2, #0
 80177e4:	d067      	beq.n	80178b6 <_dtoa_r+0x7c6>
 80177e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80177ea:	9f07      	ldr	r7, [sp, #28]
 80177ec:	9d05      	ldr	r5, [sp, #20]
 80177ee:	9a05      	ldr	r2, [sp, #20]
 80177f0:	2101      	movs	r1, #1
 80177f2:	441a      	add	r2, r3
 80177f4:	4620      	mov	r0, r4
 80177f6:	9205      	str	r2, [sp, #20]
 80177f8:	4498      	add	r8, r3
 80177fa:	f000 fea5 	bl	8018548 <__i2b>
 80177fe:	4606      	mov	r6, r0
 8017800:	2d00      	cmp	r5, #0
 8017802:	dd0c      	ble.n	801781e <_dtoa_r+0x72e>
 8017804:	f1b8 0f00 	cmp.w	r8, #0
 8017808:	dd09      	ble.n	801781e <_dtoa_r+0x72e>
 801780a:	4545      	cmp	r5, r8
 801780c:	9a05      	ldr	r2, [sp, #20]
 801780e:	462b      	mov	r3, r5
 8017810:	bfa8      	it	ge
 8017812:	4643      	movge	r3, r8
 8017814:	1ad2      	subs	r2, r2, r3
 8017816:	9205      	str	r2, [sp, #20]
 8017818:	1aed      	subs	r5, r5, r3
 801781a:	eba8 0803 	sub.w	r8, r8, r3
 801781e:	9b07      	ldr	r3, [sp, #28]
 8017820:	b1eb      	cbz	r3, 801785e <_dtoa_r+0x76e>
 8017822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017824:	2b00      	cmp	r3, #0
 8017826:	d067      	beq.n	80178f8 <_dtoa_r+0x808>
 8017828:	b18f      	cbz	r7, 801784e <_dtoa_r+0x75e>
 801782a:	4631      	mov	r1, r6
 801782c:	463a      	mov	r2, r7
 801782e:	4620      	mov	r0, r4
 8017830:	f000 ff2a 	bl	8018688 <__pow5mult>
 8017834:	9a04      	ldr	r2, [sp, #16]
 8017836:	4601      	mov	r1, r0
 8017838:	4606      	mov	r6, r0
 801783a:	4620      	mov	r0, r4
 801783c:	f000 fe8d 	bl	801855a <__multiply>
 8017840:	9904      	ldr	r1, [sp, #16]
 8017842:	9008      	str	r0, [sp, #32]
 8017844:	4620      	mov	r0, r4
 8017846:	f000 fda1 	bl	801838c <_Bfree>
 801784a:	9b08      	ldr	r3, [sp, #32]
 801784c:	9304      	str	r3, [sp, #16]
 801784e:	9b07      	ldr	r3, [sp, #28]
 8017850:	1bda      	subs	r2, r3, r7
 8017852:	d004      	beq.n	801785e <_dtoa_r+0x76e>
 8017854:	9904      	ldr	r1, [sp, #16]
 8017856:	4620      	mov	r0, r4
 8017858:	f000 ff16 	bl	8018688 <__pow5mult>
 801785c:	9004      	str	r0, [sp, #16]
 801785e:	2101      	movs	r1, #1
 8017860:	4620      	mov	r0, r4
 8017862:	f000 fe71 	bl	8018548 <__i2b>
 8017866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017868:	4607      	mov	r7, r0
 801786a:	2b00      	cmp	r3, #0
 801786c:	f000 81d0 	beq.w	8017c10 <_dtoa_r+0xb20>
 8017870:	461a      	mov	r2, r3
 8017872:	4601      	mov	r1, r0
 8017874:	4620      	mov	r0, r4
 8017876:	f000 ff07 	bl	8018688 <__pow5mult>
 801787a:	9b06      	ldr	r3, [sp, #24]
 801787c:	2b01      	cmp	r3, #1
 801787e:	4607      	mov	r7, r0
 8017880:	dc40      	bgt.n	8017904 <_dtoa_r+0x814>
 8017882:	9b00      	ldr	r3, [sp, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d139      	bne.n	80178fc <_dtoa_r+0x80c>
 8017888:	9b01      	ldr	r3, [sp, #4]
 801788a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801788e:	2b00      	cmp	r3, #0
 8017890:	d136      	bne.n	8017900 <_dtoa_r+0x810>
 8017892:	9b01      	ldr	r3, [sp, #4]
 8017894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017898:	0d1b      	lsrs	r3, r3, #20
 801789a:	051b      	lsls	r3, r3, #20
 801789c:	b12b      	cbz	r3, 80178aa <_dtoa_r+0x7ba>
 801789e:	9b05      	ldr	r3, [sp, #20]
 80178a0:	3301      	adds	r3, #1
 80178a2:	9305      	str	r3, [sp, #20]
 80178a4:	f108 0801 	add.w	r8, r8, #1
 80178a8:	2301      	movs	r3, #1
 80178aa:	9307      	str	r3, [sp, #28]
 80178ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d12a      	bne.n	8017908 <_dtoa_r+0x818>
 80178b2:	2001      	movs	r0, #1
 80178b4:	e030      	b.n	8017918 <_dtoa_r+0x828>
 80178b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80178b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80178bc:	e795      	b.n	80177ea <_dtoa_r+0x6fa>
 80178be:	9b07      	ldr	r3, [sp, #28]
 80178c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80178c4:	42bb      	cmp	r3, r7
 80178c6:	bfbf      	itttt	lt
 80178c8:	9b07      	ldrlt	r3, [sp, #28]
 80178ca:	9707      	strlt	r7, [sp, #28]
 80178cc:	1afa      	sublt	r2, r7, r3
 80178ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80178d0:	bfbb      	ittet	lt
 80178d2:	189b      	addlt	r3, r3, r2
 80178d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80178d6:	1bdf      	subge	r7, r3, r7
 80178d8:	2700      	movlt	r7, #0
 80178da:	f1b9 0f00 	cmp.w	r9, #0
 80178de:	bfb5      	itete	lt
 80178e0:	9b05      	ldrlt	r3, [sp, #20]
 80178e2:	9d05      	ldrge	r5, [sp, #20]
 80178e4:	eba3 0509 	sublt.w	r5, r3, r9
 80178e8:	464b      	movge	r3, r9
 80178ea:	bfb8      	it	lt
 80178ec:	2300      	movlt	r3, #0
 80178ee:	e77e      	b.n	80177ee <_dtoa_r+0x6fe>
 80178f0:	9f07      	ldr	r7, [sp, #28]
 80178f2:	9d05      	ldr	r5, [sp, #20]
 80178f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80178f6:	e783      	b.n	8017800 <_dtoa_r+0x710>
 80178f8:	9a07      	ldr	r2, [sp, #28]
 80178fa:	e7ab      	b.n	8017854 <_dtoa_r+0x764>
 80178fc:	2300      	movs	r3, #0
 80178fe:	e7d4      	b.n	80178aa <_dtoa_r+0x7ba>
 8017900:	9b00      	ldr	r3, [sp, #0]
 8017902:	e7d2      	b.n	80178aa <_dtoa_r+0x7ba>
 8017904:	2300      	movs	r3, #0
 8017906:	9307      	str	r3, [sp, #28]
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801790e:	6918      	ldr	r0, [r3, #16]
 8017910:	f000 fdcc 	bl	80184ac <__hi0bits>
 8017914:	f1c0 0020 	rsb	r0, r0, #32
 8017918:	4440      	add	r0, r8
 801791a:	f010 001f 	ands.w	r0, r0, #31
 801791e:	d047      	beq.n	80179b0 <_dtoa_r+0x8c0>
 8017920:	f1c0 0320 	rsb	r3, r0, #32
 8017924:	2b04      	cmp	r3, #4
 8017926:	dd3b      	ble.n	80179a0 <_dtoa_r+0x8b0>
 8017928:	9b05      	ldr	r3, [sp, #20]
 801792a:	f1c0 001c 	rsb	r0, r0, #28
 801792e:	4403      	add	r3, r0
 8017930:	9305      	str	r3, [sp, #20]
 8017932:	4405      	add	r5, r0
 8017934:	4480      	add	r8, r0
 8017936:	9b05      	ldr	r3, [sp, #20]
 8017938:	2b00      	cmp	r3, #0
 801793a:	dd05      	ble.n	8017948 <_dtoa_r+0x858>
 801793c:	461a      	mov	r2, r3
 801793e:	9904      	ldr	r1, [sp, #16]
 8017940:	4620      	mov	r0, r4
 8017942:	f000 feef 	bl	8018724 <__lshift>
 8017946:	9004      	str	r0, [sp, #16]
 8017948:	f1b8 0f00 	cmp.w	r8, #0
 801794c:	dd05      	ble.n	801795a <_dtoa_r+0x86a>
 801794e:	4639      	mov	r1, r7
 8017950:	4642      	mov	r2, r8
 8017952:	4620      	mov	r0, r4
 8017954:	f000 fee6 	bl	8018724 <__lshift>
 8017958:	4607      	mov	r7, r0
 801795a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801795c:	b353      	cbz	r3, 80179b4 <_dtoa_r+0x8c4>
 801795e:	4639      	mov	r1, r7
 8017960:	9804      	ldr	r0, [sp, #16]
 8017962:	f000 ff33 	bl	80187cc <__mcmp>
 8017966:	2800      	cmp	r0, #0
 8017968:	da24      	bge.n	80179b4 <_dtoa_r+0x8c4>
 801796a:	2300      	movs	r3, #0
 801796c:	220a      	movs	r2, #10
 801796e:	9904      	ldr	r1, [sp, #16]
 8017970:	4620      	mov	r0, r4
 8017972:	f000 fd22 	bl	80183ba <__multadd>
 8017976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017978:	9004      	str	r0, [sp, #16]
 801797a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801797e:	2b00      	cmp	r3, #0
 8017980:	f000 814d 	beq.w	8017c1e <_dtoa_r+0xb2e>
 8017984:	2300      	movs	r3, #0
 8017986:	4631      	mov	r1, r6
 8017988:	220a      	movs	r2, #10
 801798a:	4620      	mov	r0, r4
 801798c:	f000 fd15 	bl	80183ba <__multadd>
 8017990:	9b02      	ldr	r3, [sp, #8]
 8017992:	2b00      	cmp	r3, #0
 8017994:	4606      	mov	r6, r0
 8017996:	dc4f      	bgt.n	8017a38 <_dtoa_r+0x948>
 8017998:	9b06      	ldr	r3, [sp, #24]
 801799a:	2b02      	cmp	r3, #2
 801799c:	dd4c      	ble.n	8017a38 <_dtoa_r+0x948>
 801799e:	e011      	b.n	80179c4 <_dtoa_r+0x8d4>
 80179a0:	d0c9      	beq.n	8017936 <_dtoa_r+0x846>
 80179a2:	9a05      	ldr	r2, [sp, #20]
 80179a4:	331c      	adds	r3, #28
 80179a6:	441a      	add	r2, r3
 80179a8:	9205      	str	r2, [sp, #20]
 80179aa:	441d      	add	r5, r3
 80179ac:	4498      	add	r8, r3
 80179ae:	e7c2      	b.n	8017936 <_dtoa_r+0x846>
 80179b0:	4603      	mov	r3, r0
 80179b2:	e7f6      	b.n	80179a2 <_dtoa_r+0x8b2>
 80179b4:	f1b9 0f00 	cmp.w	r9, #0
 80179b8:	dc38      	bgt.n	8017a2c <_dtoa_r+0x93c>
 80179ba:	9b06      	ldr	r3, [sp, #24]
 80179bc:	2b02      	cmp	r3, #2
 80179be:	dd35      	ble.n	8017a2c <_dtoa_r+0x93c>
 80179c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80179c4:	9b02      	ldr	r3, [sp, #8]
 80179c6:	b963      	cbnz	r3, 80179e2 <_dtoa_r+0x8f2>
 80179c8:	4639      	mov	r1, r7
 80179ca:	2205      	movs	r2, #5
 80179cc:	4620      	mov	r0, r4
 80179ce:	f000 fcf4 	bl	80183ba <__multadd>
 80179d2:	4601      	mov	r1, r0
 80179d4:	4607      	mov	r7, r0
 80179d6:	9804      	ldr	r0, [sp, #16]
 80179d8:	f000 fef8 	bl	80187cc <__mcmp>
 80179dc:	2800      	cmp	r0, #0
 80179de:	f73f adcc 	bgt.w	801757a <_dtoa_r+0x48a>
 80179e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179e4:	465d      	mov	r5, fp
 80179e6:	ea6f 0a03 	mvn.w	sl, r3
 80179ea:	f04f 0900 	mov.w	r9, #0
 80179ee:	4639      	mov	r1, r7
 80179f0:	4620      	mov	r0, r4
 80179f2:	f000 fccb 	bl	801838c <_Bfree>
 80179f6:	2e00      	cmp	r6, #0
 80179f8:	f43f aeb7 	beq.w	801776a <_dtoa_r+0x67a>
 80179fc:	f1b9 0f00 	cmp.w	r9, #0
 8017a00:	d005      	beq.n	8017a0e <_dtoa_r+0x91e>
 8017a02:	45b1      	cmp	r9, r6
 8017a04:	d003      	beq.n	8017a0e <_dtoa_r+0x91e>
 8017a06:	4649      	mov	r1, r9
 8017a08:	4620      	mov	r0, r4
 8017a0a:	f000 fcbf 	bl	801838c <_Bfree>
 8017a0e:	4631      	mov	r1, r6
 8017a10:	4620      	mov	r0, r4
 8017a12:	f000 fcbb 	bl	801838c <_Bfree>
 8017a16:	e6a8      	b.n	801776a <_dtoa_r+0x67a>
 8017a18:	2700      	movs	r7, #0
 8017a1a:	463e      	mov	r6, r7
 8017a1c:	e7e1      	b.n	80179e2 <_dtoa_r+0x8f2>
 8017a1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017a22:	463e      	mov	r6, r7
 8017a24:	e5a9      	b.n	801757a <_dtoa_r+0x48a>
 8017a26:	bf00      	nop
 8017a28:	40240000 	.word	0x40240000
 8017a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f000 80fa 	beq.w	8017c2c <_dtoa_r+0xb3c>
 8017a38:	2d00      	cmp	r5, #0
 8017a3a:	dd05      	ble.n	8017a48 <_dtoa_r+0x958>
 8017a3c:	4631      	mov	r1, r6
 8017a3e:	462a      	mov	r2, r5
 8017a40:	4620      	mov	r0, r4
 8017a42:	f000 fe6f 	bl	8018724 <__lshift>
 8017a46:	4606      	mov	r6, r0
 8017a48:	9b07      	ldr	r3, [sp, #28]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d04c      	beq.n	8017ae8 <_dtoa_r+0x9f8>
 8017a4e:	6871      	ldr	r1, [r6, #4]
 8017a50:	4620      	mov	r0, r4
 8017a52:	f000 fc67 	bl	8018324 <_Balloc>
 8017a56:	6932      	ldr	r2, [r6, #16]
 8017a58:	3202      	adds	r2, #2
 8017a5a:	4605      	mov	r5, r0
 8017a5c:	0092      	lsls	r2, r2, #2
 8017a5e:	f106 010c 	add.w	r1, r6, #12
 8017a62:	300c      	adds	r0, #12
 8017a64:	f7fd fd08 	bl	8015478 <memcpy>
 8017a68:	2201      	movs	r2, #1
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	f000 fe59 	bl	8018724 <__lshift>
 8017a72:	9b00      	ldr	r3, [sp, #0]
 8017a74:	f8cd b014 	str.w	fp, [sp, #20]
 8017a78:	f003 0301 	and.w	r3, r3, #1
 8017a7c:	46b1      	mov	r9, r6
 8017a7e:	9307      	str	r3, [sp, #28]
 8017a80:	4606      	mov	r6, r0
 8017a82:	4639      	mov	r1, r7
 8017a84:	9804      	ldr	r0, [sp, #16]
 8017a86:	f7ff faa5 	bl	8016fd4 <quorem>
 8017a8a:	4649      	mov	r1, r9
 8017a8c:	4605      	mov	r5, r0
 8017a8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017a92:	9804      	ldr	r0, [sp, #16]
 8017a94:	f000 fe9a 	bl	80187cc <__mcmp>
 8017a98:	4632      	mov	r2, r6
 8017a9a:	9000      	str	r0, [sp, #0]
 8017a9c:	4639      	mov	r1, r7
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f000 feae 	bl	8018800 <__mdiff>
 8017aa4:	68c3      	ldr	r3, [r0, #12]
 8017aa6:	4602      	mov	r2, r0
 8017aa8:	bb03      	cbnz	r3, 8017aec <_dtoa_r+0x9fc>
 8017aaa:	4601      	mov	r1, r0
 8017aac:	9008      	str	r0, [sp, #32]
 8017aae:	9804      	ldr	r0, [sp, #16]
 8017ab0:	f000 fe8c 	bl	80187cc <__mcmp>
 8017ab4:	9a08      	ldr	r2, [sp, #32]
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	4611      	mov	r1, r2
 8017aba:	4620      	mov	r0, r4
 8017abc:	9308      	str	r3, [sp, #32]
 8017abe:	f000 fc65 	bl	801838c <_Bfree>
 8017ac2:	9b08      	ldr	r3, [sp, #32]
 8017ac4:	b9a3      	cbnz	r3, 8017af0 <_dtoa_r+0xa00>
 8017ac6:	9a06      	ldr	r2, [sp, #24]
 8017ac8:	b992      	cbnz	r2, 8017af0 <_dtoa_r+0xa00>
 8017aca:	9a07      	ldr	r2, [sp, #28]
 8017acc:	b982      	cbnz	r2, 8017af0 <_dtoa_r+0xa00>
 8017ace:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ad2:	d029      	beq.n	8017b28 <_dtoa_r+0xa38>
 8017ad4:	9b00      	ldr	r3, [sp, #0]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	dd01      	ble.n	8017ade <_dtoa_r+0x9ee>
 8017ada:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017ade:	9b05      	ldr	r3, [sp, #20]
 8017ae0:	1c5d      	adds	r5, r3, #1
 8017ae2:	f883 8000 	strb.w	r8, [r3]
 8017ae6:	e782      	b.n	80179ee <_dtoa_r+0x8fe>
 8017ae8:	4630      	mov	r0, r6
 8017aea:	e7c2      	b.n	8017a72 <_dtoa_r+0x982>
 8017aec:	2301      	movs	r3, #1
 8017aee:	e7e3      	b.n	8017ab8 <_dtoa_r+0x9c8>
 8017af0:	9a00      	ldr	r2, [sp, #0]
 8017af2:	2a00      	cmp	r2, #0
 8017af4:	db04      	blt.n	8017b00 <_dtoa_r+0xa10>
 8017af6:	d125      	bne.n	8017b44 <_dtoa_r+0xa54>
 8017af8:	9a06      	ldr	r2, [sp, #24]
 8017afa:	bb1a      	cbnz	r2, 8017b44 <_dtoa_r+0xa54>
 8017afc:	9a07      	ldr	r2, [sp, #28]
 8017afe:	bb0a      	cbnz	r2, 8017b44 <_dtoa_r+0xa54>
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	ddec      	ble.n	8017ade <_dtoa_r+0x9ee>
 8017b04:	2201      	movs	r2, #1
 8017b06:	9904      	ldr	r1, [sp, #16]
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f000 fe0b 	bl	8018724 <__lshift>
 8017b0e:	4639      	mov	r1, r7
 8017b10:	9004      	str	r0, [sp, #16]
 8017b12:	f000 fe5b 	bl	80187cc <__mcmp>
 8017b16:	2800      	cmp	r0, #0
 8017b18:	dc03      	bgt.n	8017b22 <_dtoa_r+0xa32>
 8017b1a:	d1e0      	bne.n	8017ade <_dtoa_r+0x9ee>
 8017b1c:	f018 0f01 	tst.w	r8, #1
 8017b20:	d0dd      	beq.n	8017ade <_dtoa_r+0x9ee>
 8017b22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017b26:	d1d8      	bne.n	8017ada <_dtoa_r+0x9ea>
 8017b28:	9b05      	ldr	r3, [sp, #20]
 8017b2a:	9a05      	ldr	r2, [sp, #20]
 8017b2c:	1c5d      	adds	r5, r3, #1
 8017b2e:	2339      	movs	r3, #57	; 0x39
 8017b30:	7013      	strb	r3, [r2, #0]
 8017b32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b36:	2b39      	cmp	r3, #57	; 0x39
 8017b38:	f105 32ff 	add.w	r2, r5, #4294967295
 8017b3c:	d04f      	beq.n	8017bde <_dtoa_r+0xaee>
 8017b3e:	3301      	adds	r3, #1
 8017b40:	7013      	strb	r3, [r2, #0]
 8017b42:	e754      	b.n	80179ee <_dtoa_r+0x8fe>
 8017b44:	9a05      	ldr	r2, [sp, #20]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	f102 0501 	add.w	r5, r2, #1
 8017b4c:	dd06      	ble.n	8017b5c <_dtoa_r+0xa6c>
 8017b4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017b52:	d0e9      	beq.n	8017b28 <_dtoa_r+0xa38>
 8017b54:	f108 0801 	add.w	r8, r8, #1
 8017b58:	9b05      	ldr	r3, [sp, #20]
 8017b5a:	e7c2      	b.n	8017ae2 <_dtoa_r+0x9f2>
 8017b5c:	9a02      	ldr	r2, [sp, #8]
 8017b5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017b62:	eba5 030b 	sub.w	r3, r5, fp
 8017b66:	4293      	cmp	r3, r2
 8017b68:	d021      	beq.n	8017bae <_dtoa_r+0xabe>
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	220a      	movs	r2, #10
 8017b6e:	9904      	ldr	r1, [sp, #16]
 8017b70:	4620      	mov	r0, r4
 8017b72:	f000 fc22 	bl	80183ba <__multadd>
 8017b76:	45b1      	cmp	r9, r6
 8017b78:	9004      	str	r0, [sp, #16]
 8017b7a:	f04f 0300 	mov.w	r3, #0
 8017b7e:	f04f 020a 	mov.w	r2, #10
 8017b82:	4649      	mov	r1, r9
 8017b84:	4620      	mov	r0, r4
 8017b86:	d105      	bne.n	8017b94 <_dtoa_r+0xaa4>
 8017b88:	f000 fc17 	bl	80183ba <__multadd>
 8017b8c:	4681      	mov	r9, r0
 8017b8e:	4606      	mov	r6, r0
 8017b90:	9505      	str	r5, [sp, #20]
 8017b92:	e776      	b.n	8017a82 <_dtoa_r+0x992>
 8017b94:	f000 fc11 	bl	80183ba <__multadd>
 8017b98:	4631      	mov	r1, r6
 8017b9a:	4681      	mov	r9, r0
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	220a      	movs	r2, #10
 8017ba0:	4620      	mov	r0, r4
 8017ba2:	f000 fc0a 	bl	80183ba <__multadd>
 8017ba6:	4606      	mov	r6, r0
 8017ba8:	e7f2      	b.n	8017b90 <_dtoa_r+0xaa0>
 8017baa:	f04f 0900 	mov.w	r9, #0
 8017bae:	2201      	movs	r2, #1
 8017bb0:	9904      	ldr	r1, [sp, #16]
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f000 fdb6 	bl	8018724 <__lshift>
 8017bb8:	4639      	mov	r1, r7
 8017bba:	9004      	str	r0, [sp, #16]
 8017bbc:	f000 fe06 	bl	80187cc <__mcmp>
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	dcb6      	bgt.n	8017b32 <_dtoa_r+0xa42>
 8017bc4:	d102      	bne.n	8017bcc <_dtoa_r+0xadc>
 8017bc6:	f018 0f01 	tst.w	r8, #1
 8017bca:	d1b2      	bne.n	8017b32 <_dtoa_r+0xa42>
 8017bcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017bd0:	2b30      	cmp	r3, #48	; 0x30
 8017bd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017bd6:	f47f af0a 	bne.w	80179ee <_dtoa_r+0x8fe>
 8017bda:	4615      	mov	r5, r2
 8017bdc:	e7f6      	b.n	8017bcc <_dtoa_r+0xadc>
 8017bde:	4593      	cmp	fp, r2
 8017be0:	d105      	bne.n	8017bee <_dtoa_r+0xafe>
 8017be2:	2331      	movs	r3, #49	; 0x31
 8017be4:	f10a 0a01 	add.w	sl, sl, #1
 8017be8:	f88b 3000 	strb.w	r3, [fp]
 8017bec:	e6ff      	b.n	80179ee <_dtoa_r+0x8fe>
 8017bee:	4615      	mov	r5, r2
 8017bf0:	e79f      	b.n	8017b32 <_dtoa_r+0xa42>
 8017bf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017c58 <_dtoa_r+0xb68>
 8017bf6:	e007      	b.n	8017c08 <_dtoa_r+0xb18>
 8017bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017bfa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017c5c <_dtoa_r+0xb6c>
 8017bfe:	b11b      	cbz	r3, 8017c08 <_dtoa_r+0xb18>
 8017c00:	f10b 0308 	add.w	r3, fp, #8
 8017c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c06:	6013      	str	r3, [r2, #0]
 8017c08:	4658      	mov	r0, fp
 8017c0a:	b017      	add	sp, #92	; 0x5c
 8017c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c10:	9b06      	ldr	r3, [sp, #24]
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	f77f ae35 	ble.w	8017882 <_dtoa_r+0x792>
 8017c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c1a:	9307      	str	r3, [sp, #28]
 8017c1c:	e649      	b.n	80178b2 <_dtoa_r+0x7c2>
 8017c1e:	9b02      	ldr	r3, [sp, #8]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	dc03      	bgt.n	8017c2c <_dtoa_r+0xb3c>
 8017c24:	9b06      	ldr	r3, [sp, #24]
 8017c26:	2b02      	cmp	r3, #2
 8017c28:	f73f aecc 	bgt.w	80179c4 <_dtoa_r+0x8d4>
 8017c2c:	465d      	mov	r5, fp
 8017c2e:	4639      	mov	r1, r7
 8017c30:	9804      	ldr	r0, [sp, #16]
 8017c32:	f7ff f9cf 	bl	8016fd4 <quorem>
 8017c36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017c3a:	f805 8b01 	strb.w	r8, [r5], #1
 8017c3e:	9a02      	ldr	r2, [sp, #8]
 8017c40:	eba5 030b 	sub.w	r3, r5, fp
 8017c44:	429a      	cmp	r2, r3
 8017c46:	ddb0      	ble.n	8017baa <_dtoa_r+0xaba>
 8017c48:	2300      	movs	r3, #0
 8017c4a:	220a      	movs	r2, #10
 8017c4c:	9904      	ldr	r1, [sp, #16]
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f000 fbb3 	bl	80183ba <__multadd>
 8017c54:	9004      	str	r0, [sp, #16]
 8017c56:	e7ea      	b.n	8017c2e <_dtoa_r+0xb3e>
 8017c58:	0801a363 	.word	0x0801a363
 8017c5c:	0801a1c0 	.word	0x0801a1c0

08017c60 <rshift>:
 8017c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c62:	6906      	ldr	r6, [r0, #16]
 8017c64:	114b      	asrs	r3, r1, #5
 8017c66:	429e      	cmp	r6, r3
 8017c68:	f100 0414 	add.w	r4, r0, #20
 8017c6c:	dd30      	ble.n	8017cd0 <rshift+0x70>
 8017c6e:	f011 011f 	ands.w	r1, r1, #31
 8017c72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017c76:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017c7a:	d108      	bne.n	8017c8e <rshift+0x2e>
 8017c7c:	4621      	mov	r1, r4
 8017c7e:	42b2      	cmp	r2, r6
 8017c80:	460b      	mov	r3, r1
 8017c82:	d211      	bcs.n	8017ca8 <rshift+0x48>
 8017c84:	f852 3b04 	ldr.w	r3, [r2], #4
 8017c88:	f841 3b04 	str.w	r3, [r1], #4
 8017c8c:	e7f7      	b.n	8017c7e <rshift+0x1e>
 8017c8e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017c92:	f1c1 0c20 	rsb	ip, r1, #32
 8017c96:	40cd      	lsrs	r5, r1
 8017c98:	3204      	adds	r2, #4
 8017c9a:	4623      	mov	r3, r4
 8017c9c:	42b2      	cmp	r2, r6
 8017c9e:	4617      	mov	r7, r2
 8017ca0:	d30c      	bcc.n	8017cbc <rshift+0x5c>
 8017ca2:	601d      	str	r5, [r3, #0]
 8017ca4:	b105      	cbz	r5, 8017ca8 <rshift+0x48>
 8017ca6:	3304      	adds	r3, #4
 8017ca8:	1b1a      	subs	r2, r3, r4
 8017caa:	42a3      	cmp	r3, r4
 8017cac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017cb0:	bf08      	it	eq
 8017cb2:	2300      	moveq	r3, #0
 8017cb4:	6102      	str	r2, [r0, #16]
 8017cb6:	bf08      	it	eq
 8017cb8:	6143      	streq	r3, [r0, #20]
 8017cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cbc:	683f      	ldr	r7, [r7, #0]
 8017cbe:	fa07 f70c 	lsl.w	r7, r7, ip
 8017cc2:	433d      	orrs	r5, r7
 8017cc4:	f843 5b04 	str.w	r5, [r3], #4
 8017cc8:	f852 5b04 	ldr.w	r5, [r2], #4
 8017ccc:	40cd      	lsrs	r5, r1
 8017cce:	e7e5      	b.n	8017c9c <rshift+0x3c>
 8017cd0:	4623      	mov	r3, r4
 8017cd2:	e7e9      	b.n	8017ca8 <rshift+0x48>

08017cd4 <__hexdig_fun>:
 8017cd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017cd8:	2b09      	cmp	r3, #9
 8017cda:	d802      	bhi.n	8017ce2 <__hexdig_fun+0xe>
 8017cdc:	3820      	subs	r0, #32
 8017cde:	b2c0      	uxtb	r0, r0
 8017ce0:	4770      	bx	lr
 8017ce2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017ce6:	2b05      	cmp	r3, #5
 8017ce8:	d801      	bhi.n	8017cee <__hexdig_fun+0x1a>
 8017cea:	3847      	subs	r0, #71	; 0x47
 8017cec:	e7f7      	b.n	8017cde <__hexdig_fun+0xa>
 8017cee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017cf2:	2b05      	cmp	r3, #5
 8017cf4:	d801      	bhi.n	8017cfa <__hexdig_fun+0x26>
 8017cf6:	3827      	subs	r0, #39	; 0x27
 8017cf8:	e7f1      	b.n	8017cde <__hexdig_fun+0xa>
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	4770      	bx	lr

08017cfe <__gethex>:
 8017cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d02:	b08b      	sub	sp, #44	; 0x2c
 8017d04:	468a      	mov	sl, r1
 8017d06:	9002      	str	r0, [sp, #8]
 8017d08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017d0a:	9306      	str	r3, [sp, #24]
 8017d0c:	4690      	mov	r8, r2
 8017d0e:	f000 fadf 	bl	80182d0 <__localeconv_l>
 8017d12:	6803      	ldr	r3, [r0, #0]
 8017d14:	9303      	str	r3, [sp, #12]
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7e8 fa72 	bl	8000200 <strlen>
 8017d1c:	9b03      	ldr	r3, [sp, #12]
 8017d1e:	9001      	str	r0, [sp, #4]
 8017d20:	4403      	add	r3, r0
 8017d22:	f04f 0b00 	mov.w	fp, #0
 8017d26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017d2a:	9307      	str	r3, [sp, #28]
 8017d2c:	f8da 3000 	ldr.w	r3, [sl]
 8017d30:	3302      	adds	r3, #2
 8017d32:	461f      	mov	r7, r3
 8017d34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017d38:	2830      	cmp	r0, #48	; 0x30
 8017d3a:	d06c      	beq.n	8017e16 <__gethex+0x118>
 8017d3c:	f7ff ffca 	bl	8017cd4 <__hexdig_fun>
 8017d40:	4604      	mov	r4, r0
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d16a      	bne.n	8017e1c <__gethex+0x11e>
 8017d46:	9a01      	ldr	r2, [sp, #4]
 8017d48:	9903      	ldr	r1, [sp, #12]
 8017d4a:	4638      	mov	r0, r7
 8017d4c:	f001 fc36 	bl	80195bc <strncmp>
 8017d50:	2800      	cmp	r0, #0
 8017d52:	d166      	bne.n	8017e22 <__gethex+0x124>
 8017d54:	9b01      	ldr	r3, [sp, #4]
 8017d56:	5cf8      	ldrb	r0, [r7, r3]
 8017d58:	18fe      	adds	r6, r7, r3
 8017d5a:	f7ff ffbb 	bl	8017cd4 <__hexdig_fun>
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	d062      	beq.n	8017e28 <__gethex+0x12a>
 8017d62:	4633      	mov	r3, r6
 8017d64:	7818      	ldrb	r0, [r3, #0]
 8017d66:	2830      	cmp	r0, #48	; 0x30
 8017d68:	461f      	mov	r7, r3
 8017d6a:	f103 0301 	add.w	r3, r3, #1
 8017d6e:	d0f9      	beq.n	8017d64 <__gethex+0x66>
 8017d70:	f7ff ffb0 	bl	8017cd4 <__hexdig_fun>
 8017d74:	fab0 f580 	clz	r5, r0
 8017d78:	096d      	lsrs	r5, r5, #5
 8017d7a:	4634      	mov	r4, r6
 8017d7c:	f04f 0b01 	mov.w	fp, #1
 8017d80:	463a      	mov	r2, r7
 8017d82:	4616      	mov	r6, r2
 8017d84:	3201      	adds	r2, #1
 8017d86:	7830      	ldrb	r0, [r6, #0]
 8017d88:	f7ff ffa4 	bl	8017cd4 <__hexdig_fun>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d1f8      	bne.n	8017d82 <__gethex+0x84>
 8017d90:	9a01      	ldr	r2, [sp, #4]
 8017d92:	9903      	ldr	r1, [sp, #12]
 8017d94:	4630      	mov	r0, r6
 8017d96:	f001 fc11 	bl	80195bc <strncmp>
 8017d9a:	b950      	cbnz	r0, 8017db2 <__gethex+0xb4>
 8017d9c:	b954      	cbnz	r4, 8017db4 <__gethex+0xb6>
 8017d9e:	9b01      	ldr	r3, [sp, #4]
 8017da0:	18f4      	adds	r4, r6, r3
 8017da2:	4622      	mov	r2, r4
 8017da4:	4616      	mov	r6, r2
 8017da6:	3201      	adds	r2, #1
 8017da8:	7830      	ldrb	r0, [r6, #0]
 8017daa:	f7ff ff93 	bl	8017cd4 <__hexdig_fun>
 8017dae:	2800      	cmp	r0, #0
 8017db0:	d1f8      	bne.n	8017da4 <__gethex+0xa6>
 8017db2:	b10c      	cbz	r4, 8017db8 <__gethex+0xba>
 8017db4:	1ba4      	subs	r4, r4, r6
 8017db6:	00a4      	lsls	r4, r4, #2
 8017db8:	7833      	ldrb	r3, [r6, #0]
 8017dba:	2b50      	cmp	r3, #80	; 0x50
 8017dbc:	d001      	beq.n	8017dc2 <__gethex+0xc4>
 8017dbe:	2b70      	cmp	r3, #112	; 0x70
 8017dc0:	d140      	bne.n	8017e44 <__gethex+0x146>
 8017dc2:	7873      	ldrb	r3, [r6, #1]
 8017dc4:	2b2b      	cmp	r3, #43	; 0x2b
 8017dc6:	d031      	beq.n	8017e2c <__gethex+0x12e>
 8017dc8:	2b2d      	cmp	r3, #45	; 0x2d
 8017dca:	d033      	beq.n	8017e34 <__gethex+0x136>
 8017dcc:	1c71      	adds	r1, r6, #1
 8017dce:	f04f 0900 	mov.w	r9, #0
 8017dd2:	7808      	ldrb	r0, [r1, #0]
 8017dd4:	f7ff ff7e 	bl	8017cd4 <__hexdig_fun>
 8017dd8:	1e43      	subs	r3, r0, #1
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	2b18      	cmp	r3, #24
 8017dde:	d831      	bhi.n	8017e44 <__gethex+0x146>
 8017de0:	f1a0 0210 	sub.w	r2, r0, #16
 8017de4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017de8:	f7ff ff74 	bl	8017cd4 <__hexdig_fun>
 8017dec:	1e43      	subs	r3, r0, #1
 8017dee:	b2db      	uxtb	r3, r3
 8017df0:	2b18      	cmp	r3, #24
 8017df2:	d922      	bls.n	8017e3a <__gethex+0x13c>
 8017df4:	f1b9 0f00 	cmp.w	r9, #0
 8017df8:	d000      	beq.n	8017dfc <__gethex+0xfe>
 8017dfa:	4252      	negs	r2, r2
 8017dfc:	4414      	add	r4, r2
 8017dfe:	f8ca 1000 	str.w	r1, [sl]
 8017e02:	b30d      	cbz	r5, 8017e48 <__gethex+0x14a>
 8017e04:	f1bb 0f00 	cmp.w	fp, #0
 8017e08:	bf0c      	ite	eq
 8017e0a:	2706      	moveq	r7, #6
 8017e0c:	2700      	movne	r7, #0
 8017e0e:	4638      	mov	r0, r7
 8017e10:	b00b      	add	sp, #44	; 0x2c
 8017e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e16:	f10b 0b01 	add.w	fp, fp, #1
 8017e1a:	e78a      	b.n	8017d32 <__gethex+0x34>
 8017e1c:	2500      	movs	r5, #0
 8017e1e:	462c      	mov	r4, r5
 8017e20:	e7ae      	b.n	8017d80 <__gethex+0x82>
 8017e22:	463e      	mov	r6, r7
 8017e24:	2501      	movs	r5, #1
 8017e26:	e7c7      	b.n	8017db8 <__gethex+0xba>
 8017e28:	4604      	mov	r4, r0
 8017e2a:	e7fb      	b.n	8017e24 <__gethex+0x126>
 8017e2c:	f04f 0900 	mov.w	r9, #0
 8017e30:	1cb1      	adds	r1, r6, #2
 8017e32:	e7ce      	b.n	8017dd2 <__gethex+0xd4>
 8017e34:	f04f 0901 	mov.w	r9, #1
 8017e38:	e7fa      	b.n	8017e30 <__gethex+0x132>
 8017e3a:	230a      	movs	r3, #10
 8017e3c:	fb03 0202 	mla	r2, r3, r2, r0
 8017e40:	3a10      	subs	r2, #16
 8017e42:	e7cf      	b.n	8017de4 <__gethex+0xe6>
 8017e44:	4631      	mov	r1, r6
 8017e46:	e7da      	b.n	8017dfe <__gethex+0x100>
 8017e48:	1bf3      	subs	r3, r6, r7
 8017e4a:	3b01      	subs	r3, #1
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	2b07      	cmp	r3, #7
 8017e50:	dc49      	bgt.n	8017ee6 <__gethex+0x1e8>
 8017e52:	9802      	ldr	r0, [sp, #8]
 8017e54:	f000 fa66 	bl	8018324 <_Balloc>
 8017e58:	9b01      	ldr	r3, [sp, #4]
 8017e5a:	f100 0914 	add.w	r9, r0, #20
 8017e5e:	f04f 0b00 	mov.w	fp, #0
 8017e62:	f1c3 0301 	rsb	r3, r3, #1
 8017e66:	4605      	mov	r5, r0
 8017e68:	f8cd 9010 	str.w	r9, [sp, #16]
 8017e6c:	46da      	mov	sl, fp
 8017e6e:	9308      	str	r3, [sp, #32]
 8017e70:	42b7      	cmp	r7, r6
 8017e72:	d33b      	bcc.n	8017eec <__gethex+0x1ee>
 8017e74:	9804      	ldr	r0, [sp, #16]
 8017e76:	f840 ab04 	str.w	sl, [r0], #4
 8017e7a:	eba0 0009 	sub.w	r0, r0, r9
 8017e7e:	1080      	asrs	r0, r0, #2
 8017e80:	6128      	str	r0, [r5, #16]
 8017e82:	0147      	lsls	r7, r0, #5
 8017e84:	4650      	mov	r0, sl
 8017e86:	f000 fb11 	bl	80184ac <__hi0bits>
 8017e8a:	f8d8 6000 	ldr.w	r6, [r8]
 8017e8e:	1a3f      	subs	r7, r7, r0
 8017e90:	42b7      	cmp	r7, r6
 8017e92:	dd64      	ble.n	8017f5e <__gethex+0x260>
 8017e94:	1bbf      	subs	r7, r7, r6
 8017e96:	4639      	mov	r1, r7
 8017e98:	4628      	mov	r0, r5
 8017e9a:	f000 fe21 	bl	8018ae0 <__any_on>
 8017e9e:	4682      	mov	sl, r0
 8017ea0:	b178      	cbz	r0, 8017ec2 <__gethex+0x1c4>
 8017ea2:	1e7b      	subs	r3, r7, #1
 8017ea4:	1159      	asrs	r1, r3, #5
 8017ea6:	f003 021f 	and.w	r2, r3, #31
 8017eaa:	f04f 0a01 	mov.w	sl, #1
 8017eae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017eb2:	fa0a f202 	lsl.w	r2, sl, r2
 8017eb6:	420a      	tst	r2, r1
 8017eb8:	d003      	beq.n	8017ec2 <__gethex+0x1c4>
 8017eba:	4553      	cmp	r3, sl
 8017ebc:	dc46      	bgt.n	8017f4c <__gethex+0x24e>
 8017ebe:	f04f 0a02 	mov.w	sl, #2
 8017ec2:	4639      	mov	r1, r7
 8017ec4:	4628      	mov	r0, r5
 8017ec6:	f7ff fecb 	bl	8017c60 <rshift>
 8017eca:	443c      	add	r4, r7
 8017ecc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ed0:	42a3      	cmp	r3, r4
 8017ed2:	da52      	bge.n	8017f7a <__gethex+0x27c>
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	9802      	ldr	r0, [sp, #8]
 8017ed8:	f000 fa58 	bl	801838c <_Bfree>
 8017edc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ede:	2300      	movs	r3, #0
 8017ee0:	6013      	str	r3, [r2, #0]
 8017ee2:	27a3      	movs	r7, #163	; 0xa3
 8017ee4:	e793      	b.n	8017e0e <__gethex+0x110>
 8017ee6:	3101      	adds	r1, #1
 8017ee8:	105b      	asrs	r3, r3, #1
 8017eea:	e7b0      	b.n	8017e4e <__gethex+0x150>
 8017eec:	1e73      	subs	r3, r6, #1
 8017eee:	9305      	str	r3, [sp, #20]
 8017ef0:	9a07      	ldr	r2, [sp, #28]
 8017ef2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	d018      	beq.n	8017f2c <__gethex+0x22e>
 8017efa:	f1bb 0f20 	cmp.w	fp, #32
 8017efe:	d107      	bne.n	8017f10 <__gethex+0x212>
 8017f00:	9b04      	ldr	r3, [sp, #16]
 8017f02:	f8c3 a000 	str.w	sl, [r3]
 8017f06:	3304      	adds	r3, #4
 8017f08:	f04f 0a00 	mov.w	sl, #0
 8017f0c:	9304      	str	r3, [sp, #16]
 8017f0e:	46d3      	mov	fp, sl
 8017f10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017f14:	f7ff fede 	bl	8017cd4 <__hexdig_fun>
 8017f18:	f000 000f 	and.w	r0, r0, #15
 8017f1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f20:	ea4a 0a00 	orr.w	sl, sl, r0
 8017f24:	f10b 0b04 	add.w	fp, fp, #4
 8017f28:	9b05      	ldr	r3, [sp, #20]
 8017f2a:	e00d      	b.n	8017f48 <__gethex+0x24a>
 8017f2c:	9b05      	ldr	r3, [sp, #20]
 8017f2e:	9a08      	ldr	r2, [sp, #32]
 8017f30:	4413      	add	r3, r2
 8017f32:	42bb      	cmp	r3, r7
 8017f34:	d3e1      	bcc.n	8017efa <__gethex+0x1fc>
 8017f36:	4618      	mov	r0, r3
 8017f38:	9a01      	ldr	r2, [sp, #4]
 8017f3a:	9903      	ldr	r1, [sp, #12]
 8017f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8017f3e:	f001 fb3d 	bl	80195bc <strncmp>
 8017f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f44:	2800      	cmp	r0, #0
 8017f46:	d1d8      	bne.n	8017efa <__gethex+0x1fc>
 8017f48:	461e      	mov	r6, r3
 8017f4a:	e791      	b.n	8017e70 <__gethex+0x172>
 8017f4c:	1eb9      	subs	r1, r7, #2
 8017f4e:	4628      	mov	r0, r5
 8017f50:	f000 fdc6 	bl	8018ae0 <__any_on>
 8017f54:	2800      	cmp	r0, #0
 8017f56:	d0b2      	beq.n	8017ebe <__gethex+0x1c0>
 8017f58:	f04f 0a03 	mov.w	sl, #3
 8017f5c:	e7b1      	b.n	8017ec2 <__gethex+0x1c4>
 8017f5e:	da09      	bge.n	8017f74 <__gethex+0x276>
 8017f60:	1bf7      	subs	r7, r6, r7
 8017f62:	4629      	mov	r1, r5
 8017f64:	463a      	mov	r2, r7
 8017f66:	9802      	ldr	r0, [sp, #8]
 8017f68:	f000 fbdc 	bl	8018724 <__lshift>
 8017f6c:	1be4      	subs	r4, r4, r7
 8017f6e:	4605      	mov	r5, r0
 8017f70:	f100 0914 	add.w	r9, r0, #20
 8017f74:	f04f 0a00 	mov.w	sl, #0
 8017f78:	e7a8      	b.n	8017ecc <__gethex+0x1ce>
 8017f7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017f7e:	42a0      	cmp	r0, r4
 8017f80:	dd6a      	ble.n	8018058 <__gethex+0x35a>
 8017f82:	1b04      	subs	r4, r0, r4
 8017f84:	42a6      	cmp	r6, r4
 8017f86:	dc2e      	bgt.n	8017fe6 <__gethex+0x2e8>
 8017f88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f8c:	2b02      	cmp	r3, #2
 8017f8e:	d022      	beq.n	8017fd6 <__gethex+0x2d8>
 8017f90:	2b03      	cmp	r3, #3
 8017f92:	d024      	beq.n	8017fde <__gethex+0x2e0>
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d115      	bne.n	8017fc4 <__gethex+0x2c6>
 8017f98:	42a6      	cmp	r6, r4
 8017f9a:	d113      	bne.n	8017fc4 <__gethex+0x2c6>
 8017f9c:	2e01      	cmp	r6, #1
 8017f9e:	dc0b      	bgt.n	8017fb8 <__gethex+0x2ba>
 8017fa0:	9a06      	ldr	r2, [sp, #24]
 8017fa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017fa6:	6013      	str	r3, [r2, #0]
 8017fa8:	2301      	movs	r3, #1
 8017faa:	612b      	str	r3, [r5, #16]
 8017fac:	f8c9 3000 	str.w	r3, [r9]
 8017fb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017fb2:	2762      	movs	r7, #98	; 0x62
 8017fb4:	601d      	str	r5, [r3, #0]
 8017fb6:	e72a      	b.n	8017e0e <__gethex+0x110>
 8017fb8:	1e71      	subs	r1, r6, #1
 8017fba:	4628      	mov	r0, r5
 8017fbc:	f000 fd90 	bl	8018ae0 <__any_on>
 8017fc0:	2800      	cmp	r0, #0
 8017fc2:	d1ed      	bne.n	8017fa0 <__gethex+0x2a2>
 8017fc4:	4629      	mov	r1, r5
 8017fc6:	9802      	ldr	r0, [sp, #8]
 8017fc8:	f000 f9e0 	bl	801838c <_Bfree>
 8017fcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017fce:	2300      	movs	r3, #0
 8017fd0:	6013      	str	r3, [r2, #0]
 8017fd2:	2750      	movs	r7, #80	; 0x50
 8017fd4:	e71b      	b.n	8017e0e <__gethex+0x110>
 8017fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d0e1      	beq.n	8017fa0 <__gethex+0x2a2>
 8017fdc:	e7f2      	b.n	8017fc4 <__gethex+0x2c6>
 8017fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d1dd      	bne.n	8017fa0 <__gethex+0x2a2>
 8017fe4:	e7ee      	b.n	8017fc4 <__gethex+0x2c6>
 8017fe6:	1e67      	subs	r7, r4, #1
 8017fe8:	f1ba 0f00 	cmp.w	sl, #0
 8017fec:	d131      	bne.n	8018052 <__gethex+0x354>
 8017fee:	b127      	cbz	r7, 8017ffa <__gethex+0x2fc>
 8017ff0:	4639      	mov	r1, r7
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	f000 fd74 	bl	8018ae0 <__any_on>
 8017ff8:	4682      	mov	sl, r0
 8017ffa:	117a      	asrs	r2, r7, #5
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	f007 071f 	and.w	r7, r7, #31
 8018002:	fa03 f707 	lsl.w	r7, r3, r7
 8018006:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801800a:	4621      	mov	r1, r4
 801800c:	421f      	tst	r7, r3
 801800e:	4628      	mov	r0, r5
 8018010:	bf18      	it	ne
 8018012:	f04a 0a02 	orrne.w	sl, sl, #2
 8018016:	1b36      	subs	r6, r6, r4
 8018018:	f7ff fe22 	bl	8017c60 <rshift>
 801801c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018020:	2702      	movs	r7, #2
 8018022:	f1ba 0f00 	cmp.w	sl, #0
 8018026:	d048      	beq.n	80180ba <__gethex+0x3bc>
 8018028:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801802c:	2b02      	cmp	r3, #2
 801802e:	d015      	beq.n	801805c <__gethex+0x35e>
 8018030:	2b03      	cmp	r3, #3
 8018032:	d017      	beq.n	8018064 <__gethex+0x366>
 8018034:	2b01      	cmp	r3, #1
 8018036:	d109      	bne.n	801804c <__gethex+0x34e>
 8018038:	f01a 0f02 	tst.w	sl, #2
 801803c:	d006      	beq.n	801804c <__gethex+0x34e>
 801803e:	f8d9 3000 	ldr.w	r3, [r9]
 8018042:	ea4a 0a03 	orr.w	sl, sl, r3
 8018046:	f01a 0f01 	tst.w	sl, #1
 801804a:	d10e      	bne.n	801806a <__gethex+0x36c>
 801804c:	f047 0710 	orr.w	r7, r7, #16
 8018050:	e033      	b.n	80180ba <__gethex+0x3bc>
 8018052:	f04f 0a01 	mov.w	sl, #1
 8018056:	e7d0      	b.n	8017ffa <__gethex+0x2fc>
 8018058:	2701      	movs	r7, #1
 801805a:	e7e2      	b.n	8018022 <__gethex+0x324>
 801805c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801805e:	f1c3 0301 	rsb	r3, r3, #1
 8018062:	9315      	str	r3, [sp, #84]	; 0x54
 8018064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018066:	2b00      	cmp	r3, #0
 8018068:	d0f0      	beq.n	801804c <__gethex+0x34e>
 801806a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801806e:	f105 0314 	add.w	r3, r5, #20
 8018072:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018076:	eb03 010a 	add.w	r1, r3, sl
 801807a:	f04f 0c00 	mov.w	ip, #0
 801807e:	4618      	mov	r0, r3
 8018080:	f853 2b04 	ldr.w	r2, [r3], #4
 8018084:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018088:	d01c      	beq.n	80180c4 <__gethex+0x3c6>
 801808a:	3201      	adds	r2, #1
 801808c:	6002      	str	r2, [r0, #0]
 801808e:	2f02      	cmp	r7, #2
 8018090:	f105 0314 	add.w	r3, r5, #20
 8018094:	d138      	bne.n	8018108 <__gethex+0x40a>
 8018096:	f8d8 2000 	ldr.w	r2, [r8]
 801809a:	3a01      	subs	r2, #1
 801809c:	42b2      	cmp	r2, r6
 801809e:	d10a      	bne.n	80180b6 <__gethex+0x3b8>
 80180a0:	1171      	asrs	r1, r6, #5
 80180a2:	2201      	movs	r2, #1
 80180a4:	f006 061f 	and.w	r6, r6, #31
 80180a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180ac:	fa02 f606 	lsl.w	r6, r2, r6
 80180b0:	421e      	tst	r6, r3
 80180b2:	bf18      	it	ne
 80180b4:	4617      	movne	r7, r2
 80180b6:	f047 0720 	orr.w	r7, r7, #32
 80180ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180bc:	601d      	str	r5, [r3, #0]
 80180be:	9b06      	ldr	r3, [sp, #24]
 80180c0:	601c      	str	r4, [r3, #0]
 80180c2:	e6a4      	b.n	8017e0e <__gethex+0x110>
 80180c4:	4299      	cmp	r1, r3
 80180c6:	f843 cc04 	str.w	ip, [r3, #-4]
 80180ca:	d8d8      	bhi.n	801807e <__gethex+0x380>
 80180cc:	68ab      	ldr	r3, [r5, #8]
 80180ce:	4599      	cmp	r9, r3
 80180d0:	db12      	blt.n	80180f8 <__gethex+0x3fa>
 80180d2:	6869      	ldr	r1, [r5, #4]
 80180d4:	9802      	ldr	r0, [sp, #8]
 80180d6:	3101      	adds	r1, #1
 80180d8:	f000 f924 	bl	8018324 <_Balloc>
 80180dc:	692a      	ldr	r2, [r5, #16]
 80180de:	3202      	adds	r2, #2
 80180e0:	f105 010c 	add.w	r1, r5, #12
 80180e4:	4683      	mov	fp, r0
 80180e6:	0092      	lsls	r2, r2, #2
 80180e8:	300c      	adds	r0, #12
 80180ea:	f7fd f9c5 	bl	8015478 <memcpy>
 80180ee:	4629      	mov	r1, r5
 80180f0:	9802      	ldr	r0, [sp, #8]
 80180f2:	f000 f94b 	bl	801838c <_Bfree>
 80180f6:	465d      	mov	r5, fp
 80180f8:	692b      	ldr	r3, [r5, #16]
 80180fa:	1c5a      	adds	r2, r3, #1
 80180fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018100:	612a      	str	r2, [r5, #16]
 8018102:	2201      	movs	r2, #1
 8018104:	615a      	str	r2, [r3, #20]
 8018106:	e7c2      	b.n	801808e <__gethex+0x390>
 8018108:	692a      	ldr	r2, [r5, #16]
 801810a:	454a      	cmp	r2, r9
 801810c:	dd0b      	ble.n	8018126 <__gethex+0x428>
 801810e:	2101      	movs	r1, #1
 8018110:	4628      	mov	r0, r5
 8018112:	f7ff fda5 	bl	8017c60 <rshift>
 8018116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801811a:	3401      	adds	r4, #1
 801811c:	42a3      	cmp	r3, r4
 801811e:	f6ff aed9 	blt.w	8017ed4 <__gethex+0x1d6>
 8018122:	2701      	movs	r7, #1
 8018124:	e7c7      	b.n	80180b6 <__gethex+0x3b8>
 8018126:	f016 061f 	ands.w	r6, r6, #31
 801812a:	d0fa      	beq.n	8018122 <__gethex+0x424>
 801812c:	449a      	add	sl, r3
 801812e:	f1c6 0620 	rsb	r6, r6, #32
 8018132:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018136:	f000 f9b9 	bl	80184ac <__hi0bits>
 801813a:	42b0      	cmp	r0, r6
 801813c:	dbe7      	blt.n	801810e <__gethex+0x410>
 801813e:	e7f0      	b.n	8018122 <__gethex+0x424>

08018140 <L_shift>:
 8018140:	f1c2 0208 	rsb	r2, r2, #8
 8018144:	0092      	lsls	r2, r2, #2
 8018146:	b570      	push	{r4, r5, r6, lr}
 8018148:	f1c2 0620 	rsb	r6, r2, #32
 801814c:	6843      	ldr	r3, [r0, #4]
 801814e:	6804      	ldr	r4, [r0, #0]
 8018150:	fa03 f506 	lsl.w	r5, r3, r6
 8018154:	432c      	orrs	r4, r5
 8018156:	40d3      	lsrs	r3, r2
 8018158:	6004      	str	r4, [r0, #0]
 801815a:	f840 3f04 	str.w	r3, [r0, #4]!
 801815e:	4288      	cmp	r0, r1
 8018160:	d3f4      	bcc.n	801814c <L_shift+0xc>
 8018162:	bd70      	pop	{r4, r5, r6, pc}

08018164 <__match>:
 8018164:	b530      	push	{r4, r5, lr}
 8018166:	6803      	ldr	r3, [r0, #0]
 8018168:	3301      	adds	r3, #1
 801816a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801816e:	b914      	cbnz	r4, 8018176 <__match+0x12>
 8018170:	6003      	str	r3, [r0, #0]
 8018172:	2001      	movs	r0, #1
 8018174:	bd30      	pop	{r4, r5, pc}
 8018176:	f813 2b01 	ldrb.w	r2, [r3], #1
 801817a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801817e:	2d19      	cmp	r5, #25
 8018180:	bf98      	it	ls
 8018182:	3220      	addls	r2, #32
 8018184:	42a2      	cmp	r2, r4
 8018186:	d0f0      	beq.n	801816a <__match+0x6>
 8018188:	2000      	movs	r0, #0
 801818a:	e7f3      	b.n	8018174 <__match+0x10>

0801818c <__hexnan>:
 801818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018190:	680b      	ldr	r3, [r1, #0]
 8018192:	6801      	ldr	r1, [r0, #0]
 8018194:	115f      	asrs	r7, r3, #5
 8018196:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801819a:	f013 031f 	ands.w	r3, r3, #31
 801819e:	b087      	sub	sp, #28
 80181a0:	bf18      	it	ne
 80181a2:	3704      	addne	r7, #4
 80181a4:	2500      	movs	r5, #0
 80181a6:	1f3e      	subs	r6, r7, #4
 80181a8:	4682      	mov	sl, r0
 80181aa:	4690      	mov	r8, r2
 80181ac:	9301      	str	r3, [sp, #4]
 80181ae:	f847 5c04 	str.w	r5, [r7, #-4]
 80181b2:	46b1      	mov	r9, r6
 80181b4:	4634      	mov	r4, r6
 80181b6:	9502      	str	r5, [sp, #8]
 80181b8:	46ab      	mov	fp, r5
 80181ba:	784a      	ldrb	r2, [r1, #1]
 80181bc:	1c4b      	adds	r3, r1, #1
 80181be:	9303      	str	r3, [sp, #12]
 80181c0:	b342      	cbz	r2, 8018214 <__hexnan+0x88>
 80181c2:	4610      	mov	r0, r2
 80181c4:	9105      	str	r1, [sp, #20]
 80181c6:	9204      	str	r2, [sp, #16]
 80181c8:	f7ff fd84 	bl	8017cd4 <__hexdig_fun>
 80181cc:	2800      	cmp	r0, #0
 80181ce:	d143      	bne.n	8018258 <__hexnan+0xcc>
 80181d0:	9a04      	ldr	r2, [sp, #16]
 80181d2:	9905      	ldr	r1, [sp, #20]
 80181d4:	2a20      	cmp	r2, #32
 80181d6:	d818      	bhi.n	801820a <__hexnan+0x7e>
 80181d8:	9b02      	ldr	r3, [sp, #8]
 80181da:	459b      	cmp	fp, r3
 80181dc:	dd13      	ble.n	8018206 <__hexnan+0x7a>
 80181de:	454c      	cmp	r4, r9
 80181e0:	d206      	bcs.n	80181f0 <__hexnan+0x64>
 80181e2:	2d07      	cmp	r5, #7
 80181e4:	dc04      	bgt.n	80181f0 <__hexnan+0x64>
 80181e6:	462a      	mov	r2, r5
 80181e8:	4649      	mov	r1, r9
 80181ea:	4620      	mov	r0, r4
 80181ec:	f7ff ffa8 	bl	8018140 <L_shift>
 80181f0:	4544      	cmp	r4, r8
 80181f2:	d944      	bls.n	801827e <__hexnan+0xf2>
 80181f4:	2300      	movs	r3, #0
 80181f6:	f1a4 0904 	sub.w	r9, r4, #4
 80181fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80181fe:	f8cd b008 	str.w	fp, [sp, #8]
 8018202:	464c      	mov	r4, r9
 8018204:	461d      	mov	r5, r3
 8018206:	9903      	ldr	r1, [sp, #12]
 8018208:	e7d7      	b.n	80181ba <__hexnan+0x2e>
 801820a:	2a29      	cmp	r2, #41	; 0x29
 801820c:	d14a      	bne.n	80182a4 <__hexnan+0x118>
 801820e:	3102      	adds	r1, #2
 8018210:	f8ca 1000 	str.w	r1, [sl]
 8018214:	f1bb 0f00 	cmp.w	fp, #0
 8018218:	d044      	beq.n	80182a4 <__hexnan+0x118>
 801821a:	454c      	cmp	r4, r9
 801821c:	d206      	bcs.n	801822c <__hexnan+0xa0>
 801821e:	2d07      	cmp	r5, #7
 8018220:	dc04      	bgt.n	801822c <__hexnan+0xa0>
 8018222:	462a      	mov	r2, r5
 8018224:	4649      	mov	r1, r9
 8018226:	4620      	mov	r0, r4
 8018228:	f7ff ff8a 	bl	8018140 <L_shift>
 801822c:	4544      	cmp	r4, r8
 801822e:	d928      	bls.n	8018282 <__hexnan+0xf6>
 8018230:	4643      	mov	r3, r8
 8018232:	f854 2b04 	ldr.w	r2, [r4], #4
 8018236:	f843 2b04 	str.w	r2, [r3], #4
 801823a:	42a6      	cmp	r6, r4
 801823c:	d2f9      	bcs.n	8018232 <__hexnan+0xa6>
 801823e:	2200      	movs	r2, #0
 8018240:	f843 2b04 	str.w	r2, [r3], #4
 8018244:	429e      	cmp	r6, r3
 8018246:	d2fb      	bcs.n	8018240 <__hexnan+0xb4>
 8018248:	6833      	ldr	r3, [r6, #0]
 801824a:	b91b      	cbnz	r3, 8018254 <__hexnan+0xc8>
 801824c:	4546      	cmp	r6, r8
 801824e:	d127      	bne.n	80182a0 <__hexnan+0x114>
 8018250:	2301      	movs	r3, #1
 8018252:	6033      	str	r3, [r6, #0]
 8018254:	2005      	movs	r0, #5
 8018256:	e026      	b.n	80182a6 <__hexnan+0x11a>
 8018258:	3501      	adds	r5, #1
 801825a:	2d08      	cmp	r5, #8
 801825c:	f10b 0b01 	add.w	fp, fp, #1
 8018260:	dd06      	ble.n	8018270 <__hexnan+0xe4>
 8018262:	4544      	cmp	r4, r8
 8018264:	d9cf      	bls.n	8018206 <__hexnan+0x7a>
 8018266:	2300      	movs	r3, #0
 8018268:	f844 3c04 	str.w	r3, [r4, #-4]
 801826c:	2501      	movs	r5, #1
 801826e:	3c04      	subs	r4, #4
 8018270:	6822      	ldr	r2, [r4, #0]
 8018272:	f000 000f 	and.w	r0, r0, #15
 8018276:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801827a:	6020      	str	r0, [r4, #0]
 801827c:	e7c3      	b.n	8018206 <__hexnan+0x7a>
 801827e:	2508      	movs	r5, #8
 8018280:	e7c1      	b.n	8018206 <__hexnan+0x7a>
 8018282:	9b01      	ldr	r3, [sp, #4]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d0df      	beq.n	8018248 <__hexnan+0xbc>
 8018288:	f04f 32ff 	mov.w	r2, #4294967295
 801828c:	f1c3 0320 	rsb	r3, r3, #32
 8018290:	fa22 f303 	lsr.w	r3, r2, r3
 8018294:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018298:	401a      	ands	r2, r3
 801829a:	f847 2c04 	str.w	r2, [r7, #-4]
 801829e:	e7d3      	b.n	8018248 <__hexnan+0xbc>
 80182a0:	3e04      	subs	r6, #4
 80182a2:	e7d1      	b.n	8018248 <__hexnan+0xbc>
 80182a4:	2004      	movs	r0, #4
 80182a6:	b007      	add	sp, #28
 80182a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182ac <__locale_ctype_ptr_l>:
 80182ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80182b0:	4770      	bx	lr
	...

080182b4 <__locale_ctype_ptr>:
 80182b4:	4b04      	ldr	r3, [pc, #16]	; (80182c8 <__locale_ctype_ptr+0x14>)
 80182b6:	4a05      	ldr	r2, [pc, #20]	; (80182cc <__locale_ctype_ptr+0x18>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	6a1b      	ldr	r3, [r3, #32]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	bf08      	it	eq
 80182c0:	4613      	moveq	r3, r2
 80182c2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80182c6:	4770      	bx	lr
 80182c8:	2000000c 	.word	0x2000000c
 80182cc:	20000070 	.word	0x20000070

080182d0 <__localeconv_l>:
 80182d0:	30f0      	adds	r0, #240	; 0xf0
 80182d2:	4770      	bx	lr

080182d4 <_localeconv_r>:
 80182d4:	4b04      	ldr	r3, [pc, #16]	; (80182e8 <_localeconv_r+0x14>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	6a18      	ldr	r0, [r3, #32]
 80182da:	4b04      	ldr	r3, [pc, #16]	; (80182ec <_localeconv_r+0x18>)
 80182dc:	2800      	cmp	r0, #0
 80182de:	bf08      	it	eq
 80182e0:	4618      	moveq	r0, r3
 80182e2:	30f0      	adds	r0, #240	; 0xf0
 80182e4:	4770      	bx	lr
 80182e6:	bf00      	nop
 80182e8:	2000000c 	.word	0x2000000c
 80182ec:	20000070 	.word	0x20000070

080182f0 <malloc>:
 80182f0:	4b02      	ldr	r3, [pc, #8]	; (80182fc <malloc+0xc>)
 80182f2:	4601      	mov	r1, r0
 80182f4:	6818      	ldr	r0, [r3, #0]
 80182f6:	f000 bc71 	b.w	8018bdc <_malloc_r>
 80182fa:	bf00      	nop
 80182fc:	2000000c 	.word	0x2000000c

08018300 <__ascii_mbtowc>:
 8018300:	b082      	sub	sp, #8
 8018302:	b901      	cbnz	r1, 8018306 <__ascii_mbtowc+0x6>
 8018304:	a901      	add	r1, sp, #4
 8018306:	b142      	cbz	r2, 801831a <__ascii_mbtowc+0x1a>
 8018308:	b14b      	cbz	r3, 801831e <__ascii_mbtowc+0x1e>
 801830a:	7813      	ldrb	r3, [r2, #0]
 801830c:	600b      	str	r3, [r1, #0]
 801830e:	7812      	ldrb	r2, [r2, #0]
 8018310:	1c10      	adds	r0, r2, #0
 8018312:	bf18      	it	ne
 8018314:	2001      	movne	r0, #1
 8018316:	b002      	add	sp, #8
 8018318:	4770      	bx	lr
 801831a:	4610      	mov	r0, r2
 801831c:	e7fb      	b.n	8018316 <__ascii_mbtowc+0x16>
 801831e:	f06f 0001 	mvn.w	r0, #1
 8018322:	e7f8      	b.n	8018316 <__ascii_mbtowc+0x16>

08018324 <_Balloc>:
 8018324:	b570      	push	{r4, r5, r6, lr}
 8018326:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018328:	4604      	mov	r4, r0
 801832a:	460e      	mov	r6, r1
 801832c:	b93d      	cbnz	r5, 801833e <_Balloc+0x1a>
 801832e:	2010      	movs	r0, #16
 8018330:	f7ff ffde 	bl	80182f0 <malloc>
 8018334:	6260      	str	r0, [r4, #36]	; 0x24
 8018336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801833a:	6005      	str	r5, [r0, #0]
 801833c:	60c5      	str	r5, [r0, #12]
 801833e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018340:	68eb      	ldr	r3, [r5, #12]
 8018342:	b183      	cbz	r3, 8018366 <_Balloc+0x42>
 8018344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018346:	68db      	ldr	r3, [r3, #12]
 8018348:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801834c:	b9b8      	cbnz	r0, 801837e <_Balloc+0x5a>
 801834e:	2101      	movs	r1, #1
 8018350:	fa01 f506 	lsl.w	r5, r1, r6
 8018354:	1d6a      	adds	r2, r5, #5
 8018356:	0092      	lsls	r2, r2, #2
 8018358:	4620      	mov	r0, r4
 801835a:	f000 fbe2 	bl	8018b22 <_calloc_r>
 801835e:	b160      	cbz	r0, 801837a <_Balloc+0x56>
 8018360:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018364:	e00e      	b.n	8018384 <_Balloc+0x60>
 8018366:	2221      	movs	r2, #33	; 0x21
 8018368:	2104      	movs	r1, #4
 801836a:	4620      	mov	r0, r4
 801836c:	f000 fbd9 	bl	8018b22 <_calloc_r>
 8018370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018372:	60e8      	str	r0, [r5, #12]
 8018374:	68db      	ldr	r3, [r3, #12]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d1e4      	bne.n	8018344 <_Balloc+0x20>
 801837a:	2000      	movs	r0, #0
 801837c:	bd70      	pop	{r4, r5, r6, pc}
 801837e:	6802      	ldr	r2, [r0, #0]
 8018380:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018384:	2300      	movs	r3, #0
 8018386:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801838a:	e7f7      	b.n	801837c <_Balloc+0x58>

0801838c <_Bfree>:
 801838c:	b570      	push	{r4, r5, r6, lr}
 801838e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018390:	4606      	mov	r6, r0
 8018392:	460d      	mov	r5, r1
 8018394:	b93c      	cbnz	r4, 80183a6 <_Bfree+0x1a>
 8018396:	2010      	movs	r0, #16
 8018398:	f7ff ffaa 	bl	80182f0 <malloc>
 801839c:	6270      	str	r0, [r6, #36]	; 0x24
 801839e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80183a2:	6004      	str	r4, [r0, #0]
 80183a4:	60c4      	str	r4, [r0, #12]
 80183a6:	b13d      	cbz	r5, 80183b8 <_Bfree+0x2c>
 80183a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80183aa:	686a      	ldr	r2, [r5, #4]
 80183ac:	68db      	ldr	r3, [r3, #12]
 80183ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183b2:	6029      	str	r1, [r5, #0]
 80183b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80183b8:	bd70      	pop	{r4, r5, r6, pc}

080183ba <__multadd>:
 80183ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183be:	690d      	ldr	r5, [r1, #16]
 80183c0:	461f      	mov	r7, r3
 80183c2:	4606      	mov	r6, r0
 80183c4:	460c      	mov	r4, r1
 80183c6:	f101 0c14 	add.w	ip, r1, #20
 80183ca:	2300      	movs	r3, #0
 80183cc:	f8dc 0000 	ldr.w	r0, [ip]
 80183d0:	b281      	uxth	r1, r0
 80183d2:	fb02 7101 	mla	r1, r2, r1, r7
 80183d6:	0c0f      	lsrs	r7, r1, #16
 80183d8:	0c00      	lsrs	r0, r0, #16
 80183da:	fb02 7000 	mla	r0, r2, r0, r7
 80183de:	b289      	uxth	r1, r1
 80183e0:	3301      	adds	r3, #1
 80183e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80183e6:	429d      	cmp	r5, r3
 80183e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80183ec:	f84c 1b04 	str.w	r1, [ip], #4
 80183f0:	dcec      	bgt.n	80183cc <__multadd+0x12>
 80183f2:	b1d7      	cbz	r7, 801842a <__multadd+0x70>
 80183f4:	68a3      	ldr	r3, [r4, #8]
 80183f6:	42ab      	cmp	r3, r5
 80183f8:	dc12      	bgt.n	8018420 <__multadd+0x66>
 80183fa:	6861      	ldr	r1, [r4, #4]
 80183fc:	4630      	mov	r0, r6
 80183fe:	3101      	adds	r1, #1
 8018400:	f7ff ff90 	bl	8018324 <_Balloc>
 8018404:	6922      	ldr	r2, [r4, #16]
 8018406:	3202      	adds	r2, #2
 8018408:	f104 010c 	add.w	r1, r4, #12
 801840c:	4680      	mov	r8, r0
 801840e:	0092      	lsls	r2, r2, #2
 8018410:	300c      	adds	r0, #12
 8018412:	f7fd f831 	bl	8015478 <memcpy>
 8018416:	4621      	mov	r1, r4
 8018418:	4630      	mov	r0, r6
 801841a:	f7ff ffb7 	bl	801838c <_Bfree>
 801841e:	4644      	mov	r4, r8
 8018420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018424:	3501      	adds	r5, #1
 8018426:	615f      	str	r7, [r3, #20]
 8018428:	6125      	str	r5, [r4, #16]
 801842a:	4620      	mov	r0, r4
 801842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018430 <__s2b>:
 8018430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018434:	460c      	mov	r4, r1
 8018436:	4615      	mov	r5, r2
 8018438:	461f      	mov	r7, r3
 801843a:	2209      	movs	r2, #9
 801843c:	3308      	adds	r3, #8
 801843e:	4606      	mov	r6, r0
 8018440:	fb93 f3f2 	sdiv	r3, r3, r2
 8018444:	2100      	movs	r1, #0
 8018446:	2201      	movs	r2, #1
 8018448:	429a      	cmp	r2, r3
 801844a:	db20      	blt.n	801848e <__s2b+0x5e>
 801844c:	4630      	mov	r0, r6
 801844e:	f7ff ff69 	bl	8018324 <_Balloc>
 8018452:	9b08      	ldr	r3, [sp, #32]
 8018454:	6143      	str	r3, [r0, #20]
 8018456:	2d09      	cmp	r5, #9
 8018458:	f04f 0301 	mov.w	r3, #1
 801845c:	6103      	str	r3, [r0, #16]
 801845e:	dd19      	ble.n	8018494 <__s2b+0x64>
 8018460:	f104 0809 	add.w	r8, r4, #9
 8018464:	46c1      	mov	r9, r8
 8018466:	442c      	add	r4, r5
 8018468:	f819 3b01 	ldrb.w	r3, [r9], #1
 801846c:	4601      	mov	r1, r0
 801846e:	3b30      	subs	r3, #48	; 0x30
 8018470:	220a      	movs	r2, #10
 8018472:	4630      	mov	r0, r6
 8018474:	f7ff ffa1 	bl	80183ba <__multadd>
 8018478:	45a1      	cmp	r9, r4
 801847a:	d1f5      	bne.n	8018468 <__s2b+0x38>
 801847c:	eb08 0405 	add.w	r4, r8, r5
 8018480:	3c08      	subs	r4, #8
 8018482:	1b2d      	subs	r5, r5, r4
 8018484:	1963      	adds	r3, r4, r5
 8018486:	42bb      	cmp	r3, r7
 8018488:	db07      	blt.n	801849a <__s2b+0x6a>
 801848a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801848e:	0052      	lsls	r2, r2, #1
 8018490:	3101      	adds	r1, #1
 8018492:	e7d9      	b.n	8018448 <__s2b+0x18>
 8018494:	340a      	adds	r4, #10
 8018496:	2509      	movs	r5, #9
 8018498:	e7f3      	b.n	8018482 <__s2b+0x52>
 801849a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801849e:	4601      	mov	r1, r0
 80184a0:	3b30      	subs	r3, #48	; 0x30
 80184a2:	220a      	movs	r2, #10
 80184a4:	4630      	mov	r0, r6
 80184a6:	f7ff ff88 	bl	80183ba <__multadd>
 80184aa:	e7eb      	b.n	8018484 <__s2b+0x54>

080184ac <__hi0bits>:
 80184ac:	0c02      	lsrs	r2, r0, #16
 80184ae:	0412      	lsls	r2, r2, #16
 80184b0:	4603      	mov	r3, r0
 80184b2:	b9b2      	cbnz	r2, 80184e2 <__hi0bits+0x36>
 80184b4:	0403      	lsls	r3, r0, #16
 80184b6:	2010      	movs	r0, #16
 80184b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80184bc:	bf04      	itt	eq
 80184be:	021b      	lsleq	r3, r3, #8
 80184c0:	3008      	addeq	r0, #8
 80184c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80184c6:	bf04      	itt	eq
 80184c8:	011b      	lsleq	r3, r3, #4
 80184ca:	3004      	addeq	r0, #4
 80184cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80184d0:	bf04      	itt	eq
 80184d2:	009b      	lsleq	r3, r3, #2
 80184d4:	3002      	addeq	r0, #2
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	db06      	blt.n	80184e8 <__hi0bits+0x3c>
 80184da:	005b      	lsls	r3, r3, #1
 80184dc:	d503      	bpl.n	80184e6 <__hi0bits+0x3a>
 80184de:	3001      	adds	r0, #1
 80184e0:	4770      	bx	lr
 80184e2:	2000      	movs	r0, #0
 80184e4:	e7e8      	b.n	80184b8 <__hi0bits+0xc>
 80184e6:	2020      	movs	r0, #32
 80184e8:	4770      	bx	lr

080184ea <__lo0bits>:
 80184ea:	6803      	ldr	r3, [r0, #0]
 80184ec:	f013 0207 	ands.w	r2, r3, #7
 80184f0:	4601      	mov	r1, r0
 80184f2:	d00b      	beq.n	801850c <__lo0bits+0x22>
 80184f4:	07da      	lsls	r2, r3, #31
 80184f6:	d423      	bmi.n	8018540 <__lo0bits+0x56>
 80184f8:	0798      	lsls	r0, r3, #30
 80184fa:	bf49      	itett	mi
 80184fc:	085b      	lsrmi	r3, r3, #1
 80184fe:	089b      	lsrpl	r3, r3, #2
 8018500:	2001      	movmi	r0, #1
 8018502:	600b      	strmi	r3, [r1, #0]
 8018504:	bf5c      	itt	pl
 8018506:	600b      	strpl	r3, [r1, #0]
 8018508:	2002      	movpl	r0, #2
 801850a:	4770      	bx	lr
 801850c:	b298      	uxth	r0, r3
 801850e:	b9a8      	cbnz	r0, 801853c <__lo0bits+0x52>
 8018510:	0c1b      	lsrs	r3, r3, #16
 8018512:	2010      	movs	r0, #16
 8018514:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018518:	bf04      	itt	eq
 801851a:	0a1b      	lsreq	r3, r3, #8
 801851c:	3008      	addeq	r0, #8
 801851e:	071a      	lsls	r2, r3, #28
 8018520:	bf04      	itt	eq
 8018522:	091b      	lsreq	r3, r3, #4
 8018524:	3004      	addeq	r0, #4
 8018526:	079a      	lsls	r2, r3, #30
 8018528:	bf04      	itt	eq
 801852a:	089b      	lsreq	r3, r3, #2
 801852c:	3002      	addeq	r0, #2
 801852e:	07da      	lsls	r2, r3, #31
 8018530:	d402      	bmi.n	8018538 <__lo0bits+0x4e>
 8018532:	085b      	lsrs	r3, r3, #1
 8018534:	d006      	beq.n	8018544 <__lo0bits+0x5a>
 8018536:	3001      	adds	r0, #1
 8018538:	600b      	str	r3, [r1, #0]
 801853a:	4770      	bx	lr
 801853c:	4610      	mov	r0, r2
 801853e:	e7e9      	b.n	8018514 <__lo0bits+0x2a>
 8018540:	2000      	movs	r0, #0
 8018542:	4770      	bx	lr
 8018544:	2020      	movs	r0, #32
 8018546:	4770      	bx	lr

08018548 <__i2b>:
 8018548:	b510      	push	{r4, lr}
 801854a:	460c      	mov	r4, r1
 801854c:	2101      	movs	r1, #1
 801854e:	f7ff fee9 	bl	8018324 <_Balloc>
 8018552:	2201      	movs	r2, #1
 8018554:	6144      	str	r4, [r0, #20]
 8018556:	6102      	str	r2, [r0, #16]
 8018558:	bd10      	pop	{r4, pc}

0801855a <__multiply>:
 801855a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801855e:	4614      	mov	r4, r2
 8018560:	690a      	ldr	r2, [r1, #16]
 8018562:	6923      	ldr	r3, [r4, #16]
 8018564:	429a      	cmp	r2, r3
 8018566:	bfb8      	it	lt
 8018568:	460b      	movlt	r3, r1
 801856a:	4688      	mov	r8, r1
 801856c:	bfbc      	itt	lt
 801856e:	46a0      	movlt	r8, r4
 8018570:	461c      	movlt	r4, r3
 8018572:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018576:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801857a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801857e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018582:	eb07 0609 	add.w	r6, r7, r9
 8018586:	42b3      	cmp	r3, r6
 8018588:	bfb8      	it	lt
 801858a:	3101      	addlt	r1, #1
 801858c:	f7ff feca 	bl	8018324 <_Balloc>
 8018590:	f100 0514 	add.w	r5, r0, #20
 8018594:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018598:	462b      	mov	r3, r5
 801859a:	2200      	movs	r2, #0
 801859c:	4573      	cmp	r3, lr
 801859e:	d316      	bcc.n	80185ce <__multiply+0x74>
 80185a0:	f104 0214 	add.w	r2, r4, #20
 80185a4:	f108 0114 	add.w	r1, r8, #20
 80185a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80185ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80185b0:	9300      	str	r3, [sp, #0]
 80185b2:	9b00      	ldr	r3, [sp, #0]
 80185b4:	9201      	str	r2, [sp, #4]
 80185b6:	4293      	cmp	r3, r2
 80185b8:	d80c      	bhi.n	80185d4 <__multiply+0x7a>
 80185ba:	2e00      	cmp	r6, #0
 80185bc:	dd03      	ble.n	80185c6 <__multiply+0x6c>
 80185be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d05d      	beq.n	8018682 <__multiply+0x128>
 80185c6:	6106      	str	r6, [r0, #16]
 80185c8:	b003      	add	sp, #12
 80185ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ce:	f843 2b04 	str.w	r2, [r3], #4
 80185d2:	e7e3      	b.n	801859c <__multiply+0x42>
 80185d4:	f8b2 b000 	ldrh.w	fp, [r2]
 80185d8:	f1bb 0f00 	cmp.w	fp, #0
 80185dc:	d023      	beq.n	8018626 <__multiply+0xcc>
 80185de:	4689      	mov	r9, r1
 80185e0:	46ac      	mov	ip, r5
 80185e2:	f04f 0800 	mov.w	r8, #0
 80185e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80185ea:	f8dc a000 	ldr.w	sl, [ip]
 80185ee:	b2a3      	uxth	r3, r4
 80185f0:	fa1f fa8a 	uxth.w	sl, sl
 80185f4:	fb0b a303 	mla	r3, fp, r3, sl
 80185f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80185fc:	f8dc 4000 	ldr.w	r4, [ip]
 8018600:	4443      	add	r3, r8
 8018602:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018606:	fb0b 840a 	mla	r4, fp, sl, r8
 801860a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801860e:	46e2      	mov	sl, ip
 8018610:	b29b      	uxth	r3, r3
 8018612:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018616:	454f      	cmp	r7, r9
 8018618:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801861c:	f84a 3b04 	str.w	r3, [sl], #4
 8018620:	d82b      	bhi.n	801867a <__multiply+0x120>
 8018622:	f8cc 8004 	str.w	r8, [ip, #4]
 8018626:	9b01      	ldr	r3, [sp, #4]
 8018628:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801862c:	3204      	adds	r2, #4
 801862e:	f1ba 0f00 	cmp.w	sl, #0
 8018632:	d020      	beq.n	8018676 <__multiply+0x11c>
 8018634:	682b      	ldr	r3, [r5, #0]
 8018636:	4689      	mov	r9, r1
 8018638:	46a8      	mov	r8, r5
 801863a:	f04f 0b00 	mov.w	fp, #0
 801863e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018642:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018646:	fb0a 440c 	mla	r4, sl, ip, r4
 801864a:	445c      	add	r4, fp
 801864c:	46c4      	mov	ip, r8
 801864e:	b29b      	uxth	r3, r3
 8018650:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018654:	f84c 3b04 	str.w	r3, [ip], #4
 8018658:	f859 3b04 	ldr.w	r3, [r9], #4
 801865c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018660:	0c1b      	lsrs	r3, r3, #16
 8018662:	fb0a b303 	mla	r3, sl, r3, fp
 8018666:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801866a:	454f      	cmp	r7, r9
 801866c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018670:	d805      	bhi.n	801867e <__multiply+0x124>
 8018672:	f8c8 3004 	str.w	r3, [r8, #4]
 8018676:	3504      	adds	r5, #4
 8018678:	e79b      	b.n	80185b2 <__multiply+0x58>
 801867a:	46d4      	mov	ip, sl
 801867c:	e7b3      	b.n	80185e6 <__multiply+0x8c>
 801867e:	46e0      	mov	r8, ip
 8018680:	e7dd      	b.n	801863e <__multiply+0xe4>
 8018682:	3e01      	subs	r6, #1
 8018684:	e799      	b.n	80185ba <__multiply+0x60>
	...

08018688 <__pow5mult>:
 8018688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801868c:	4615      	mov	r5, r2
 801868e:	f012 0203 	ands.w	r2, r2, #3
 8018692:	4606      	mov	r6, r0
 8018694:	460f      	mov	r7, r1
 8018696:	d007      	beq.n	80186a8 <__pow5mult+0x20>
 8018698:	3a01      	subs	r2, #1
 801869a:	4c21      	ldr	r4, [pc, #132]	; (8018720 <__pow5mult+0x98>)
 801869c:	2300      	movs	r3, #0
 801869e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80186a2:	f7ff fe8a 	bl	80183ba <__multadd>
 80186a6:	4607      	mov	r7, r0
 80186a8:	10ad      	asrs	r5, r5, #2
 80186aa:	d035      	beq.n	8018718 <__pow5mult+0x90>
 80186ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80186ae:	b93c      	cbnz	r4, 80186c0 <__pow5mult+0x38>
 80186b0:	2010      	movs	r0, #16
 80186b2:	f7ff fe1d 	bl	80182f0 <malloc>
 80186b6:	6270      	str	r0, [r6, #36]	; 0x24
 80186b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186bc:	6004      	str	r4, [r0, #0]
 80186be:	60c4      	str	r4, [r0, #12]
 80186c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80186c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80186c8:	b94c      	cbnz	r4, 80186de <__pow5mult+0x56>
 80186ca:	f240 2171 	movw	r1, #625	; 0x271
 80186ce:	4630      	mov	r0, r6
 80186d0:	f7ff ff3a 	bl	8018548 <__i2b>
 80186d4:	2300      	movs	r3, #0
 80186d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80186da:	4604      	mov	r4, r0
 80186dc:	6003      	str	r3, [r0, #0]
 80186de:	f04f 0800 	mov.w	r8, #0
 80186e2:	07eb      	lsls	r3, r5, #31
 80186e4:	d50a      	bpl.n	80186fc <__pow5mult+0x74>
 80186e6:	4639      	mov	r1, r7
 80186e8:	4622      	mov	r2, r4
 80186ea:	4630      	mov	r0, r6
 80186ec:	f7ff ff35 	bl	801855a <__multiply>
 80186f0:	4639      	mov	r1, r7
 80186f2:	4681      	mov	r9, r0
 80186f4:	4630      	mov	r0, r6
 80186f6:	f7ff fe49 	bl	801838c <_Bfree>
 80186fa:	464f      	mov	r7, r9
 80186fc:	106d      	asrs	r5, r5, #1
 80186fe:	d00b      	beq.n	8018718 <__pow5mult+0x90>
 8018700:	6820      	ldr	r0, [r4, #0]
 8018702:	b938      	cbnz	r0, 8018714 <__pow5mult+0x8c>
 8018704:	4622      	mov	r2, r4
 8018706:	4621      	mov	r1, r4
 8018708:	4630      	mov	r0, r6
 801870a:	f7ff ff26 	bl	801855a <__multiply>
 801870e:	6020      	str	r0, [r4, #0]
 8018710:	f8c0 8000 	str.w	r8, [r0]
 8018714:	4604      	mov	r4, r0
 8018716:	e7e4      	b.n	80186e2 <__pow5mult+0x5a>
 8018718:	4638      	mov	r0, r7
 801871a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801871e:	bf00      	nop
 8018720:	0801a330 	.word	0x0801a330

08018724 <__lshift>:
 8018724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018728:	460c      	mov	r4, r1
 801872a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801872e:	6923      	ldr	r3, [r4, #16]
 8018730:	6849      	ldr	r1, [r1, #4]
 8018732:	eb0a 0903 	add.w	r9, sl, r3
 8018736:	68a3      	ldr	r3, [r4, #8]
 8018738:	4607      	mov	r7, r0
 801873a:	4616      	mov	r6, r2
 801873c:	f109 0501 	add.w	r5, r9, #1
 8018740:	42ab      	cmp	r3, r5
 8018742:	db32      	blt.n	80187aa <__lshift+0x86>
 8018744:	4638      	mov	r0, r7
 8018746:	f7ff fded 	bl	8018324 <_Balloc>
 801874a:	2300      	movs	r3, #0
 801874c:	4680      	mov	r8, r0
 801874e:	f100 0114 	add.w	r1, r0, #20
 8018752:	461a      	mov	r2, r3
 8018754:	4553      	cmp	r3, sl
 8018756:	db2b      	blt.n	80187b0 <__lshift+0x8c>
 8018758:	6920      	ldr	r0, [r4, #16]
 801875a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801875e:	f104 0314 	add.w	r3, r4, #20
 8018762:	f016 021f 	ands.w	r2, r6, #31
 8018766:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801876a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801876e:	d025      	beq.n	80187bc <__lshift+0x98>
 8018770:	f1c2 0e20 	rsb	lr, r2, #32
 8018774:	2000      	movs	r0, #0
 8018776:	681e      	ldr	r6, [r3, #0]
 8018778:	468a      	mov	sl, r1
 801877a:	4096      	lsls	r6, r2
 801877c:	4330      	orrs	r0, r6
 801877e:	f84a 0b04 	str.w	r0, [sl], #4
 8018782:	f853 0b04 	ldr.w	r0, [r3], #4
 8018786:	459c      	cmp	ip, r3
 8018788:	fa20 f00e 	lsr.w	r0, r0, lr
 801878c:	d814      	bhi.n	80187b8 <__lshift+0x94>
 801878e:	6048      	str	r0, [r1, #4]
 8018790:	b108      	cbz	r0, 8018796 <__lshift+0x72>
 8018792:	f109 0502 	add.w	r5, r9, #2
 8018796:	3d01      	subs	r5, #1
 8018798:	4638      	mov	r0, r7
 801879a:	f8c8 5010 	str.w	r5, [r8, #16]
 801879e:	4621      	mov	r1, r4
 80187a0:	f7ff fdf4 	bl	801838c <_Bfree>
 80187a4:	4640      	mov	r0, r8
 80187a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187aa:	3101      	adds	r1, #1
 80187ac:	005b      	lsls	r3, r3, #1
 80187ae:	e7c7      	b.n	8018740 <__lshift+0x1c>
 80187b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80187b4:	3301      	adds	r3, #1
 80187b6:	e7cd      	b.n	8018754 <__lshift+0x30>
 80187b8:	4651      	mov	r1, sl
 80187ba:	e7dc      	b.n	8018776 <__lshift+0x52>
 80187bc:	3904      	subs	r1, #4
 80187be:	f853 2b04 	ldr.w	r2, [r3], #4
 80187c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80187c6:	459c      	cmp	ip, r3
 80187c8:	d8f9      	bhi.n	80187be <__lshift+0x9a>
 80187ca:	e7e4      	b.n	8018796 <__lshift+0x72>

080187cc <__mcmp>:
 80187cc:	6903      	ldr	r3, [r0, #16]
 80187ce:	690a      	ldr	r2, [r1, #16]
 80187d0:	1a9b      	subs	r3, r3, r2
 80187d2:	b530      	push	{r4, r5, lr}
 80187d4:	d10c      	bne.n	80187f0 <__mcmp+0x24>
 80187d6:	0092      	lsls	r2, r2, #2
 80187d8:	3014      	adds	r0, #20
 80187da:	3114      	adds	r1, #20
 80187dc:	1884      	adds	r4, r0, r2
 80187de:	4411      	add	r1, r2
 80187e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80187e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80187e8:	4295      	cmp	r5, r2
 80187ea:	d003      	beq.n	80187f4 <__mcmp+0x28>
 80187ec:	d305      	bcc.n	80187fa <__mcmp+0x2e>
 80187ee:	2301      	movs	r3, #1
 80187f0:	4618      	mov	r0, r3
 80187f2:	bd30      	pop	{r4, r5, pc}
 80187f4:	42a0      	cmp	r0, r4
 80187f6:	d3f3      	bcc.n	80187e0 <__mcmp+0x14>
 80187f8:	e7fa      	b.n	80187f0 <__mcmp+0x24>
 80187fa:	f04f 33ff 	mov.w	r3, #4294967295
 80187fe:	e7f7      	b.n	80187f0 <__mcmp+0x24>

08018800 <__mdiff>:
 8018800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018804:	460d      	mov	r5, r1
 8018806:	4607      	mov	r7, r0
 8018808:	4611      	mov	r1, r2
 801880a:	4628      	mov	r0, r5
 801880c:	4614      	mov	r4, r2
 801880e:	f7ff ffdd 	bl	80187cc <__mcmp>
 8018812:	1e06      	subs	r6, r0, #0
 8018814:	d108      	bne.n	8018828 <__mdiff+0x28>
 8018816:	4631      	mov	r1, r6
 8018818:	4638      	mov	r0, r7
 801881a:	f7ff fd83 	bl	8018324 <_Balloc>
 801881e:	2301      	movs	r3, #1
 8018820:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018828:	bfa4      	itt	ge
 801882a:	4623      	movge	r3, r4
 801882c:	462c      	movge	r4, r5
 801882e:	4638      	mov	r0, r7
 8018830:	6861      	ldr	r1, [r4, #4]
 8018832:	bfa6      	itte	ge
 8018834:	461d      	movge	r5, r3
 8018836:	2600      	movge	r6, #0
 8018838:	2601      	movlt	r6, #1
 801883a:	f7ff fd73 	bl	8018324 <_Balloc>
 801883e:	692b      	ldr	r3, [r5, #16]
 8018840:	60c6      	str	r6, [r0, #12]
 8018842:	6926      	ldr	r6, [r4, #16]
 8018844:	f105 0914 	add.w	r9, r5, #20
 8018848:	f104 0214 	add.w	r2, r4, #20
 801884c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018850:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018854:	f100 0514 	add.w	r5, r0, #20
 8018858:	f04f 0e00 	mov.w	lr, #0
 801885c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018860:	f859 4b04 	ldr.w	r4, [r9], #4
 8018864:	fa1e f18a 	uxtah	r1, lr, sl
 8018868:	b2a3      	uxth	r3, r4
 801886a:	1ac9      	subs	r1, r1, r3
 801886c:	0c23      	lsrs	r3, r4, #16
 801886e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018872:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018876:	b289      	uxth	r1, r1
 8018878:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801887c:	45c8      	cmp	r8, r9
 801887e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018882:	4694      	mov	ip, r2
 8018884:	f845 3b04 	str.w	r3, [r5], #4
 8018888:	d8e8      	bhi.n	801885c <__mdiff+0x5c>
 801888a:	45bc      	cmp	ip, r7
 801888c:	d304      	bcc.n	8018898 <__mdiff+0x98>
 801888e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018892:	b183      	cbz	r3, 80188b6 <__mdiff+0xb6>
 8018894:	6106      	str	r6, [r0, #16]
 8018896:	e7c5      	b.n	8018824 <__mdiff+0x24>
 8018898:	f85c 1b04 	ldr.w	r1, [ip], #4
 801889c:	fa1e f381 	uxtah	r3, lr, r1
 80188a0:	141a      	asrs	r2, r3, #16
 80188a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80188ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80188b0:	f845 3b04 	str.w	r3, [r5], #4
 80188b4:	e7e9      	b.n	801888a <__mdiff+0x8a>
 80188b6:	3e01      	subs	r6, #1
 80188b8:	e7e9      	b.n	801888e <__mdiff+0x8e>
	...

080188bc <__ulp>:
 80188bc:	4b12      	ldr	r3, [pc, #72]	; (8018908 <__ulp+0x4c>)
 80188be:	ee10 2a90 	vmov	r2, s1
 80188c2:	401a      	ands	r2, r3
 80188c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	dd04      	ble.n	80188d6 <__ulp+0x1a>
 80188cc:	2000      	movs	r0, #0
 80188ce:	4619      	mov	r1, r3
 80188d0:	ec41 0b10 	vmov	d0, r0, r1
 80188d4:	4770      	bx	lr
 80188d6:	425b      	negs	r3, r3
 80188d8:	151b      	asrs	r3, r3, #20
 80188da:	2b13      	cmp	r3, #19
 80188dc:	f04f 0000 	mov.w	r0, #0
 80188e0:	f04f 0100 	mov.w	r1, #0
 80188e4:	dc04      	bgt.n	80188f0 <__ulp+0x34>
 80188e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80188ea:	fa42 f103 	asr.w	r1, r2, r3
 80188ee:	e7ef      	b.n	80188d0 <__ulp+0x14>
 80188f0:	3b14      	subs	r3, #20
 80188f2:	2b1e      	cmp	r3, #30
 80188f4:	f04f 0201 	mov.w	r2, #1
 80188f8:	bfda      	itte	le
 80188fa:	f1c3 031f 	rsble	r3, r3, #31
 80188fe:	fa02 f303 	lslle.w	r3, r2, r3
 8018902:	4613      	movgt	r3, r2
 8018904:	4618      	mov	r0, r3
 8018906:	e7e3      	b.n	80188d0 <__ulp+0x14>
 8018908:	7ff00000 	.word	0x7ff00000

0801890c <__b2d>:
 801890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801890e:	6905      	ldr	r5, [r0, #16]
 8018910:	f100 0714 	add.w	r7, r0, #20
 8018914:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018918:	1f2e      	subs	r6, r5, #4
 801891a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801891e:	4620      	mov	r0, r4
 8018920:	f7ff fdc4 	bl	80184ac <__hi0bits>
 8018924:	f1c0 0320 	rsb	r3, r0, #32
 8018928:	280a      	cmp	r0, #10
 801892a:	600b      	str	r3, [r1, #0]
 801892c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80189a4 <__b2d+0x98>
 8018930:	dc14      	bgt.n	801895c <__b2d+0x50>
 8018932:	f1c0 0e0b 	rsb	lr, r0, #11
 8018936:	fa24 f10e 	lsr.w	r1, r4, lr
 801893a:	42b7      	cmp	r7, r6
 801893c:	ea41 030c 	orr.w	r3, r1, ip
 8018940:	bf34      	ite	cc
 8018942:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018946:	2100      	movcs	r1, #0
 8018948:	3015      	adds	r0, #21
 801894a:	fa04 f000 	lsl.w	r0, r4, r0
 801894e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018952:	ea40 0201 	orr.w	r2, r0, r1
 8018956:	ec43 2b10 	vmov	d0, r2, r3
 801895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801895c:	42b7      	cmp	r7, r6
 801895e:	bf3a      	itte	cc
 8018960:	f1a5 0608 	subcc.w	r6, r5, #8
 8018964:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018968:	2100      	movcs	r1, #0
 801896a:	380b      	subs	r0, #11
 801896c:	d015      	beq.n	801899a <__b2d+0x8e>
 801896e:	4084      	lsls	r4, r0
 8018970:	f1c0 0520 	rsb	r5, r0, #32
 8018974:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018978:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801897c:	42be      	cmp	r6, r7
 801897e:	fa21 fc05 	lsr.w	ip, r1, r5
 8018982:	ea44 030c 	orr.w	r3, r4, ip
 8018986:	bf8c      	ite	hi
 8018988:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801898c:	2400      	movls	r4, #0
 801898e:	fa01 f000 	lsl.w	r0, r1, r0
 8018992:	40ec      	lsrs	r4, r5
 8018994:	ea40 0204 	orr.w	r2, r0, r4
 8018998:	e7dd      	b.n	8018956 <__b2d+0x4a>
 801899a:	ea44 030c 	orr.w	r3, r4, ip
 801899e:	460a      	mov	r2, r1
 80189a0:	e7d9      	b.n	8018956 <__b2d+0x4a>
 80189a2:	bf00      	nop
 80189a4:	3ff00000 	.word	0x3ff00000

080189a8 <__d2b>:
 80189a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80189ac:	460e      	mov	r6, r1
 80189ae:	2101      	movs	r1, #1
 80189b0:	ec59 8b10 	vmov	r8, r9, d0
 80189b4:	4615      	mov	r5, r2
 80189b6:	f7ff fcb5 	bl	8018324 <_Balloc>
 80189ba:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80189be:	4607      	mov	r7, r0
 80189c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80189c4:	bb34      	cbnz	r4, 8018a14 <__d2b+0x6c>
 80189c6:	9301      	str	r3, [sp, #4]
 80189c8:	f1b8 0300 	subs.w	r3, r8, #0
 80189cc:	d027      	beq.n	8018a1e <__d2b+0x76>
 80189ce:	a802      	add	r0, sp, #8
 80189d0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80189d4:	f7ff fd89 	bl	80184ea <__lo0bits>
 80189d8:	9900      	ldr	r1, [sp, #0]
 80189da:	b1f0      	cbz	r0, 8018a1a <__d2b+0x72>
 80189dc:	9a01      	ldr	r2, [sp, #4]
 80189de:	f1c0 0320 	rsb	r3, r0, #32
 80189e2:	fa02 f303 	lsl.w	r3, r2, r3
 80189e6:	430b      	orrs	r3, r1
 80189e8:	40c2      	lsrs	r2, r0
 80189ea:	617b      	str	r3, [r7, #20]
 80189ec:	9201      	str	r2, [sp, #4]
 80189ee:	9b01      	ldr	r3, [sp, #4]
 80189f0:	61bb      	str	r3, [r7, #24]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	bf14      	ite	ne
 80189f6:	2102      	movne	r1, #2
 80189f8:	2101      	moveq	r1, #1
 80189fa:	6139      	str	r1, [r7, #16]
 80189fc:	b1c4      	cbz	r4, 8018a30 <__d2b+0x88>
 80189fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018a02:	4404      	add	r4, r0
 8018a04:	6034      	str	r4, [r6, #0]
 8018a06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018a0a:	6028      	str	r0, [r5, #0]
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	b003      	add	sp, #12
 8018a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018a18:	e7d5      	b.n	80189c6 <__d2b+0x1e>
 8018a1a:	6179      	str	r1, [r7, #20]
 8018a1c:	e7e7      	b.n	80189ee <__d2b+0x46>
 8018a1e:	a801      	add	r0, sp, #4
 8018a20:	f7ff fd63 	bl	80184ea <__lo0bits>
 8018a24:	9b01      	ldr	r3, [sp, #4]
 8018a26:	617b      	str	r3, [r7, #20]
 8018a28:	2101      	movs	r1, #1
 8018a2a:	6139      	str	r1, [r7, #16]
 8018a2c:	3020      	adds	r0, #32
 8018a2e:	e7e5      	b.n	80189fc <__d2b+0x54>
 8018a30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018a34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018a38:	6030      	str	r0, [r6, #0]
 8018a3a:	6918      	ldr	r0, [r3, #16]
 8018a3c:	f7ff fd36 	bl	80184ac <__hi0bits>
 8018a40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018a44:	e7e1      	b.n	8018a0a <__d2b+0x62>

08018a46 <__ratio>:
 8018a46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a4a:	4688      	mov	r8, r1
 8018a4c:	4669      	mov	r1, sp
 8018a4e:	4681      	mov	r9, r0
 8018a50:	f7ff ff5c 	bl	801890c <__b2d>
 8018a54:	a901      	add	r1, sp, #4
 8018a56:	4640      	mov	r0, r8
 8018a58:	ec57 6b10 	vmov	r6, r7, d0
 8018a5c:	f7ff ff56 	bl	801890c <__b2d>
 8018a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018a64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018a68:	eba3 0c02 	sub.w	ip, r3, r2
 8018a6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018a70:	1a9b      	subs	r3, r3, r2
 8018a72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018a76:	ec5b ab10 	vmov	sl, fp, d0
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	bfce      	itee	gt
 8018a7e:	463a      	movgt	r2, r7
 8018a80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018a84:	465a      	movle	r2, fp
 8018a86:	4659      	mov	r1, fp
 8018a88:	463d      	mov	r5, r7
 8018a8a:	bfd4      	ite	le
 8018a8c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018a90:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018a94:	4630      	mov	r0, r6
 8018a96:	ee10 2a10 	vmov	r2, s0
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	f7e7 feed 	bl	800087c <__aeabi_ddiv>
 8018aa2:	ec41 0b10 	vmov	d0, r0, r1
 8018aa6:	b003      	add	sp, #12
 8018aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018aac <__copybits>:
 8018aac:	3901      	subs	r1, #1
 8018aae:	b510      	push	{r4, lr}
 8018ab0:	1149      	asrs	r1, r1, #5
 8018ab2:	6914      	ldr	r4, [r2, #16]
 8018ab4:	3101      	adds	r1, #1
 8018ab6:	f102 0314 	add.w	r3, r2, #20
 8018aba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018abe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018ac2:	42a3      	cmp	r3, r4
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	d303      	bcc.n	8018ad0 <__copybits+0x24>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	428a      	cmp	r2, r1
 8018acc:	d305      	bcc.n	8018ada <__copybits+0x2e>
 8018ace:	bd10      	pop	{r4, pc}
 8018ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ad4:	f840 2b04 	str.w	r2, [r0], #4
 8018ad8:	e7f3      	b.n	8018ac2 <__copybits+0x16>
 8018ada:	f842 3b04 	str.w	r3, [r2], #4
 8018ade:	e7f4      	b.n	8018aca <__copybits+0x1e>

08018ae0 <__any_on>:
 8018ae0:	f100 0214 	add.w	r2, r0, #20
 8018ae4:	6900      	ldr	r0, [r0, #16]
 8018ae6:	114b      	asrs	r3, r1, #5
 8018ae8:	4298      	cmp	r0, r3
 8018aea:	b510      	push	{r4, lr}
 8018aec:	db11      	blt.n	8018b12 <__any_on+0x32>
 8018aee:	dd0a      	ble.n	8018b06 <__any_on+0x26>
 8018af0:	f011 011f 	ands.w	r1, r1, #31
 8018af4:	d007      	beq.n	8018b06 <__any_on+0x26>
 8018af6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018afa:	fa24 f001 	lsr.w	r0, r4, r1
 8018afe:	fa00 f101 	lsl.w	r1, r0, r1
 8018b02:	428c      	cmp	r4, r1
 8018b04:	d10b      	bne.n	8018b1e <__any_on+0x3e>
 8018b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	d803      	bhi.n	8018b16 <__any_on+0x36>
 8018b0e:	2000      	movs	r0, #0
 8018b10:	bd10      	pop	{r4, pc}
 8018b12:	4603      	mov	r3, r0
 8018b14:	e7f7      	b.n	8018b06 <__any_on+0x26>
 8018b16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018b1a:	2900      	cmp	r1, #0
 8018b1c:	d0f5      	beq.n	8018b0a <__any_on+0x2a>
 8018b1e:	2001      	movs	r0, #1
 8018b20:	e7f6      	b.n	8018b10 <__any_on+0x30>

08018b22 <_calloc_r>:
 8018b22:	b538      	push	{r3, r4, r5, lr}
 8018b24:	fb02 f401 	mul.w	r4, r2, r1
 8018b28:	4621      	mov	r1, r4
 8018b2a:	f000 f857 	bl	8018bdc <_malloc_r>
 8018b2e:	4605      	mov	r5, r0
 8018b30:	b118      	cbz	r0, 8018b3a <_calloc_r+0x18>
 8018b32:	4622      	mov	r2, r4
 8018b34:	2100      	movs	r1, #0
 8018b36:	f7fc fcaa 	bl	801548e <memset>
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018b40 <_free_r>:
 8018b40:	b538      	push	{r3, r4, r5, lr}
 8018b42:	4605      	mov	r5, r0
 8018b44:	2900      	cmp	r1, #0
 8018b46:	d045      	beq.n	8018bd4 <_free_r+0x94>
 8018b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b4c:	1f0c      	subs	r4, r1, #4
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	bfb8      	it	lt
 8018b52:	18e4      	addlt	r4, r4, r3
 8018b54:	f000 fe30 	bl	80197b8 <__malloc_lock>
 8018b58:	4a1f      	ldr	r2, [pc, #124]	; (8018bd8 <_free_r+0x98>)
 8018b5a:	6813      	ldr	r3, [r2, #0]
 8018b5c:	4610      	mov	r0, r2
 8018b5e:	b933      	cbnz	r3, 8018b6e <_free_r+0x2e>
 8018b60:	6063      	str	r3, [r4, #4]
 8018b62:	6014      	str	r4, [r2, #0]
 8018b64:	4628      	mov	r0, r5
 8018b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b6a:	f000 be26 	b.w	80197ba <__malloc_unlock>
 8018b6e:	42a3      	cmp	r3, r4
 8018b70:	d90c      	bls.n	8018b8c <_free_r+0x4c>
 8018b72:	6821      	ldr	r1, [r4, #0]
 8018b74:	1862      	adds	r2, r4, r1
 8018b76:	4293      	cmp	r3, r2
 8018b78:	bf04      	itt	eq
 8018b7a:	681a      	ldreq	r2, [r3, #0]
 8018b7c:	685b      	ldreq	r3, [r3, #4]
 8018b7e:	6063      	str	r3, [r4, #4]
 8018b80:	bf04      	itt	eq
 8018b82:	1852      	addeq	r2, r2, r1
 8018b84:	6022      	streq	r2, [r4, #0]
 8018b86:	6004      	str	r4, [r0, #0]
 8018b88:	e7ec      	b.n	8018b64 <_free_r+0x24>
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	685a      	ldr	r2, [r3, #4]
 8018b8e:	b10a      	cbz	r2, 8018b94 <_free_r+0x54>
 8018b90:	42a2      	cmp	r2, r4
 8018b92:	d9fa      	bls.n	8018b8a <_free_r+0x4a>
 8018b94:	6819      	ldr	r1, [r3, #0]
 8018b96:	1858      	adds	r0, r3, r1
 8018b98:	42a0      	cmp	r0, r4
 8018b9a:	d10b      	bne.n	8018bb4 <_free_r+0x74>
 8018b9c:	6820      	ldr	r0, [r4, #0]
 8018b9e:	4401      	add	r1, r0
 8018ba0:	1858      	adds	r0, r3, r1
 8018ba2:	4282      	cmp	r2, r0
 8018ba4:	6019      	str	r1, [r3, #0]
 8018ba6:	d1dd      	bne.n	8018b64 <_free_r+0x24>
 8018ba8:	6810      	ldr	r0, [r2, #0]
 8018baa:	6852      	ldr	r2, [r2, #4]
 8018bac:	605a      	str	r2, [r3, #4]
 8018bae:	4401      	add	r1, r0
 8018bb0:	6019      	str	r1, [r3, #0]
 8018bb2:	e7d7      	b.n	8018b64 <_free_r+0x24>
 8018bb4:	d902      	bls.n	8018bbc <_free_r+0x7c>
 8018bb6:	230c      	movs	r3, #12
 8018bb8:	602b      	str	r3, [r5, #0]
 8018bba:	e7d3      	b.n	8018b64 <_free_r+0x24>
 8018bbc:	6820      	ldr	r0, [r4, #0]
 8018bbe:	1821      	adds	r1, r4, r0
 8018bc0:	428a      	cmp	r2, r1
 8018bc2:	bf04      	itt	eq
 8018bc4:	6811      	ldreq	r1, [r2, #0]
 8018bc6:	6852      	ldreq	r2, [r2, #4]
 8018bc8:	6062      	str	r2, [r4, #4]
 8018bca:	bf04      	itt	eq
 8018bcc:	1809      	addeq	r1, r1, r0
 8018bce:	6021      	streq	r1, [r4, #0]
 8018bd0:	605c      	str	r4, [r3, #4]
 8018bd2:	e7c7      	b.n	8018b64 <_free_r+0x24>
 8018bd4:	bd38      	pop	{r3, r4, r5, pc}
 8018bd6:	bf00      	nop
 8018bd8:	20041360 	.word	0x20041360

08018bdc <_malloc_r>:
 8018bdc:	b570      	push	{r4, r5, r6, lr}
 8018bde:	1ccd      	adds	r5, r1, #3
 8018be0:	f025 0503 	bic.w	r5, r5, #3
 8018be4:	3508      	adds	r5, #8
 8018be6:	2d0c      	cmp	r5, #12
 8018be8:	bf38      	it	cc
 8018bea:	250c      	movcc	r5, #12
 8018bec:	2d00      	cmp	r5, #0
 8018bee:	4606      	mov	r6, r0
 8018bf0:	db01      	blt.n	8018bf6 <_malloc_r+0x1a>
 8018bf2:	42a9      	cmp	r1, r5
 8018bf4:	d903      	bls.n	8018bfe <_malloc_r+0x22>
 8018bf6:	230c      	movs	r3, #12
 8018bf8:	6033      	str	r3, [r6, #0]
 8018bfa:	2000      	movs	r0, #0
 8018bfc:	bd70      	pop	{r4, r5, r6, pc}
 8018bfe:	f000 fddb 	bl	80197b8 <__malloc_lock>
 8018c02:	4a21      	ldr	r2, [pc, #132]	; (8018c88 <_malloc_r+0xac>)
 8018c04:	6814      	ldr	r4, [r2, #0]
 8018c06:	4621      	mov	r1, r4
 8018c08:	b991      	cbnz	r1, 8018c30 <_malloc_r+0x54>
 8018c0a:	4c20      	ldr	r4, [pc, #128]	; (8018c8c <_malloc_r+0xb0>)
 8018c0c:	6823      	ldr	r3, [r4, #0]
 8018c0e:	b91b      	cbnz	r3, 8018c18 <_malloc_r+0x3c>
 8018c10:	4630      	mov	r0, r6
 8018c12:	f000 fc91 	bl	8019538 <_sbrk_r>
 8018c16:	6020      	str	r0, [r4, #0]
 8018c18:	4629      	mov	r1, r5
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	f000 fc8c 	bl	8019538 <_sbrk_r>
 8018c20:	1c43      	adds	r3, r0, #1
 8018c22:	d124      	bne.n	8018c6e <_malloc_r+0x92>
 8018c24:	230c      	movs	r3, #12
 8018c26:	6033      	str	r3, [r6, #0]
 8018c28:	4630      	mov	r0, r6
 8018c2a:	f000 fdc6 	bl	80197ba <__malloc_unlock>
 8018c2e:	e7e4      	b.n	8018bfa <_malloc_r+0x1e>
 8018c30:	680b      	ldr	r3, [r1, #0]
 8018c32:	1b5b      	subs	r3, r3, r5
 8018c34:	d418      	bmi.n	8018c68 <_malloc_r+0x8c>
 8018c36:	2b0b      	cmp	r3, #11
 8018c38:	d90f      	bls.n	8018c5a <_malloc_r+0x7e>
 8018c3a:	600b      	str	r3, [r1, #0]
 8018c3c:	50cd      	str	r5, [r1, r3]
 8018c3e:	18cc      	adds	r4, r1, r3
 8018c40:	4630      	mov	r0, r6
 8018c42:	f000 fdba 	bl	80197ba <__malloc_unlock>
 8018c46:	f104 000b 	add.w	r0, r4, #11
 8018c4a:	1d23      	adds	r3, r4, #4
 8018c4c:	f020 0007 	bic.w	r0, r0, #7
 8018c50:	1ac3      	subs	r3, r0, r3
 8018c52:	d0d3      	beq.n	8018bfc <_malloc_r+0x20>
 8018c54:	425a      	negs	r2, r3
 8018c56:	50e2      	str	r2, [r4, r3]
 8018c58:	e7d0      	b.n	8018bfc <_malloc_r+0x20>
 8018c5a:	428c      	cmp	r4, r1
 8018c5c:	684b      	ldr	r3, [r1, #4]
 8018c5e:	bf16      	itet	ne
 8018c60:	6063      	strne	r3, [r4, #4]
 8018c62:	6013      	streq	r3, [r2, #0]
 8018c64:	460c      	movne	r4, r1
 8018c66:	e7eb      	b.n	8018c40 <_malloc_r+0x64>
 8018c68:	460c      	mov	r4, r1
 8018c6a:	6849      	ldr	r1, [r1, #4]
 8018c6c:	e7cc      	b.n	8018c08 <_malloc_r+0x2c>
 8018c6e:	1cc4      	adds	r4, r0, #3
 8018c70:	f024 0403 	bic.w	r4, r4, #3
 8018c74:	42a0      	cmp	r0, r4
 8018c76:	d005      	beq.n	8018c84 <_malloc_r+0xa8>
 8018c78:	1a21      	subs	r1, r4, r0
 8018c7a:	4630      	mov	r0, r6
 8018c7c:	f000 fc5c 	bl	8019538 <_sbrk_r>
 8018c80:	3001      	adds	r0, #1
 8018c82:	d0cf      	beq.n	8018c24 <_malloc_r+0x48>
 8018c84:	6025      	str	r5, [r4, #0]
 8018c86:	e7db      	b.n	8018c40 <_malloc_r+0x64>
 8018c88:	20041360 	.word	0x20041360
 8018c8c:	20041364 	.word	0x20041364

08018c90 <__ssputs_r>:
 8018c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c94:	688e      	ldr	r6, [r1, #8]
 8018c96:	429e      	cmp	r6, r3
 8018c98:	4682      	mov	sl, r0
 8018c9a:	460c      	mov	r4, r1
 8018c9c:	4690      	mov	r8, r2
 8018c9e:	4699      	mov	r9, r3
 8018ca0:	d837      	bhi.n	8018d12 <__ssputs_r+0x82>
 8018ca2:	898a      	ldrh	r2, [r1, #12]
 8018ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ca8:	d031      	beq.n	8018d0e <__ssputs_r+0x7e>
 8018caa:	6825      	ldr	r5, [r4, #0]
 8018cac:	6909      	ldr	r1, [r1, #16]
 8018cae:	1a6f      	subs	r7, r5, r1
 8018cb0:	6965      	ldr	r5, [r4, #20]
 8018cb2:	2302      	movs	r3, #2
 8018cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8018cbc:	f109 0301 	add.w	r3, r9, #1
 8018cc0:	443b      	add	r3, r7
 8018cc2:	429d      	cmp	r5, r3
 8018cc4:	bf38      	it	cc
 8018cc6:	461d      	movcc	r5, r3
 8018cc8:	0553      	lsls	r3, r2, #21
 8018cca:	d530      	bpl.n	8018d2e <__ssputs_r+0x9e>
 8018ccc:	4629      	mov	r1, r5
 8018cce:	f7ff ff85 	bl	8018bdc <_malloc_r>
 8018cd2:	4606      	mov	r6, r0
 8018cd4:	b950      	cbnz	r0, 8018cec <__ssputs_r+0x5c>
 8018cd6:	230c      	movs	r3, #12
 8018cd8:	f8ca 3000 	str.w	r3, [sl]
 8018cdc:	89a3      	ldrh	r3, [r4, #12]
 8018cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ce2:	81a3      	strh	r3, [r4, #12]
 8018ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cec:	463a      	mov	r2, r7
 8018cee:	6921      	ldr	r1, [r4, #16]
 8018cf0:	f7fc fbc2 	bl	8015478 <memcpy>
 8018cf4:	89a3      	ldrh	r3, [r4, #12]
 8018cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cfe:	81a3      	strh	r3, [r4, #12]
 8018d00:	6126      	str	r6, [r4, #16]
 8018d02:	6165      	str	r5, [r4, #20]
 8018d04:	443e      	add	r6, r7
 8018d06:	1bed      	subs	r5, r5, r7
 8018d08:	6026      	str	r6, [r4, #0]
 8018d0a:	60a5      	str	r5, [r4, #8]
 8018d0c:	464e      	mov	r6, r9
 8018d0e:	454e      	cmp	r6, r9
 8018d10:	d900      	bls.n	8018d14 <__ssputs_r+0x84>
 8018d12:	464e      	mov	r6, r9
 8018d14:	4632      	mov	r2, r6
 8018d16:	4641      	mov	r1, r8
 8018d18:	6820      	ldr	r0, [r4, #0]
 8018d1a:	f000 fd34 	bl	8019786 <memmove>
 8018d1e:	68a3      	ldr	r3, [r4, #8]
 8018d20:	1b9b      	subs	r3, r3, r6
 8018d22:	60a3      	str	r3, [r4, #8]
 8018d24:	6823      	ldr	r3, [r4, #0]
 8018d26:	441e      	add	r6, r3
 8018d28:	6026      	str	r6, [r4, #0]
 8018d2a:	2000      	movs	r0, #0
 8018d2c:	e7dc      	b.n	8018ce8 <__ssputs_r+0x58>
 8018d2e:	462a      	mov	r2, r5
 8018d30:	f000 fd44 	bl	80197bc <_realloc_r>
 8018d34:	4606      	mov	r6, r0
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d1e2      	bne.n	8018d00 <__ssputs_r+0x70>
 8018d3a:	6921      	ldr	r1, [r4, #16]
 8018d3c:	4650      	mov	r0, sl
 8018d3e:	f7ff feff 	bl	8018b40 <_free_r>
 8018d42:	e7c8      	b.n	8018cd6 <__ssputs_r+0x46>

08018d44 <_svfiprintf_r>:
 8018d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d48:	461d      	mov	r5, r3
 8018d4a:	898b      	ldrh	r3, [r1, #12]
 8018d4c:	061f      	lsls	r7, r3, #24
 8018d4e:	b09d      	sub	sp, #116	; 0x74
 8018d50:	4680      	mov	r8, r0
 8018d52:	460c      	mov	r4, r1
 8018d54:	4616      	mov	r6, r2
 8018d56:	d50f      	bpl.n	8018d78 <_svfiprintf_r+0x34>
 8018d58:	690b      	ldr	r3, [r1, #16]
 8018d5a:	b96b      	cbnz	r3, 8018d78 <_svfiprintf_r+0x34>
 8018d5c:	2140      	movs	r1, #64	; 0x40
 8018d5e:	f7ff ff3d 	bl	8018bdc <_malloc_r>
 8018d62:	6020      	str	r0, [r4, #0]
 8018d64:	6120      	str	r0, [r4, #16]
 8018d66:	b928      	cbnz	r0, 8018d74 <_svfiprintf_r+0x30>
 8018d68:	230c      	movs	r3, #12
 8018d6a:	f8c8 3000 	str.w	r3, [r8]
 8018d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018d72:	e0c8      	b.n	8018f06 <_svfiprintf_r+0x1c2>
 8018d74:	2340      	movs	r3, #64	; 0x40
 8018d76:	6163      	str	r3, [r4, #20]
 8018d78:	2300      	movs	r3, #0
 8018d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8018d7c:	2320      	movs	r3, #32
 8018d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d82:	2330      	movs	r3, #48	; 0x30
 8018d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d88:	9503      	str	r5, [sp, #12]
 8018d8a:	f04f 0b01 	mov.w	fp, #1
 8018d8e:	4637      	mov	r7, r6
 8018d90:	463d      	mov	r5, r7
 8018d92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018d96:	b10b      	cbz	r3, 8018d9c <_svfiprintf_r+0x58>
 8018d98:	2b25      	cmp	r3, #37	; 0x25
 8018d9a:	d13e      	bne.n	8018e1a <_svfiprintf_r+0xd6>
 8018d9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8018da0:	d00b      	beq.n	8018dba <_svfiprintf_r+0x76>
 8018da2:	4653      	mov	r3, sl
 8018da4:	4632      	mov	r2, r6
 8018da6:	4621      	mov	r1, r4
 8018da8:	4640      	mov	r0, r8
 8018daa:	f7ff ff71 	bl	8018c90 <__ssputs_r>
 8018dae:	3001      	adds	r0, #1
 8018db0:	f000 80a4 	beq.w	8018efc <_svfiprintf_r+0x1b8>
 8018db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018db6:	4453      	add	r3, sl
 8018db8:	9309      	str	r3, [sp, #36]	; 0x24
 8018dba:	783b      	ldrb	r3, [r7, #0]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	f000 809d 	beq.w	8018efc <_svfiprintf_r+0x1b8>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8018dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018dcc:	9304      	str	r3, [sp, #16]
 8018dce:	9307      	str	r3, [sp, #28]
 8018dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8018dd6:	462f      	mov	r7, r5
 8018dd8:	2205      	movs	r2, #5
 8018dda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018dde:	4850      	ldr	r0, [pc, #320]	; (8018f20 <_svfiprintf_r+0x1dc>)
 8018de0:	f7e7 fa16 	bl	8000210 <memchr>
 8018de4:	9b04      	ldr	r3, [sp, #16]
 8018de6:	b9d0      	cbnz	r0, 8018e1e <_svfiprintf_r+0xda>
 8018de8:	06d9      	lsls	r1, r3, #27
 8018dea:	bf44      	itt	mi
 8018dec:	2220      	movmi	r2, #32
 8018dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018df2:	071a      	lsls	r2, r3, #28
 8018df4:	bf44      	itt	mi
 8018df6:	222b      	movmi	r2, #43	; 0x2b
 8018df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018dfc:	782a      	ldrb	r2, [r5, #0]
 8018dfe:	2a2a      	cmp	r2, #42	; 0x2a
 8018e00:	d015      	beq.n	8018e2e <_svfiprintf_r+0xea>
 8018e02:	9a07      	ldr	r2, [sp, #28]
 8018e04:	462f      	mov	r7, r5
 8018e06:	2000      	movs	r0, #0
 8018e08:	250a      	movs	r5, #10
 8018e0a:	4639      	mov	r1, r7
 8018e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e10:	3b30      	subs	r3, #48	; 0x30
 8018e12:	2b09      	cmp	r3, #9
 8018e14:	d94d      	bls.n	8018eb2 <_svfiprintf_r+0x16e>
 8018e16:	b1b8      	cbz	r0, 8018e48 <_svfiprintf_r+0x104>
 8018e18:	e00f      	b.n	8018e3a <_svfiprintf_r+0xf6>
 8018e1a:	462f      	mov	r7, r5
 8018e1c:	e7b8      	b.n	8018d90 <_svfiprintf_r+0x4c>
 8018e1e:	4a40      	ldr	r2, [pc, #256]	; (8018f20 <_svfiprintf_r+0x1dc>)
 8018e20:	1a80      	subs	r0, r0, r2
 8018e22:	fa0b f000 	lsl.w	r0, fp, r0
 8018e26:	4318      	orrs	r0, r3
 8018e28:	9004      	str	r0, [sp, #16]
 8018e2a:	463d      	mov	r5, r7
 8018e2c:	e7d3      	b.n	8018dd6 <_svfiprintf_r+0x92>
 8018e2e:	9a03      	ldr	r2, [sp, #12]
 8018e30:	1d11      	adds	r1, r2, #4
 8018e32:	6812      	ldr	r2, [r2, #0]
 8018e34:	9103      	str	r1, [sp, #12]
 8018e36:	2a00      	cmp	r2, #0
 8018e38:	db01      	blt.n	8018e3e <_svfiprintf_r+0xfa>
 8018e3a:	9207      	str	r2, [sp, #28]
 8018e3c:	e004      	b.n	8018e48 <_svfiprintf_r+0x104>
 8018e3e:	4252      	negs	r2, r2
 8018e40:	f043 0302 	orr.w	r3, r3, #2
 8018e44:	9207      	str	r2, [sp, #28]
 8018e46:	9304      	str	r3, [sp, #16]
 8018e48:	783b      	ldrb	r3, [r7, #0]
 8018e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8018e4c:	d10c      	bne.n	8018e68 <_svfiprintf_r+0x124>
 8018e4e:	787b      	ldrb	r3, [r7, #1]
 8018e50:	2b2a      	cmp	r3, #42	; 0x2a
 8018e52:	d133      	bne.n	8018ebc <_svfiprintf_r+0x178>
 8018e54:	9b03      	ldr	r3, [sp, #12]
 8018e56:	1d1a      	adds	r2, r3, #4
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	9203      	str	r2, [sp, #12]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	bfb8      	it	lt
 8018e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8018e64:	3702      	adds	r7, #2
 8018e66:	9305      	str	r3, [sp, #20]
 8018e68:	4d2e      	ldr	r5, [pc, #184]	; (8018f24 <_svfiprintf_r+0x1e0>)
 8018e6a:	7839      	ldrb	r1, [r7, #0]
 8018e6c:	2203      	movs	r2, #3
 8018e6e:	4628      	mov	r0, r5
 8018e70:	f7e7 f9ce 	bl	8000210 <memchr>
 8018e74:	b138      	cbz	r0, 8018e86 <_svfiprintf_r+0x142>
 8018e76:	2340      	movs	r3, #64	; 0x40
 8018e78:	1b40      	subs	r0, r0, r5
 8018e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8018e7e:	9b04      	ldr	r3, [sp, #16]
 8018e80:	4303      	orrs	r3, r0
 8018e82:	3701      	adds	r7, #1
 8018e84:	9304      	str	r3, [sp, #16]
 8018e86:	7839      	ldrb	r1, [r7, #0]
 8018e88:	4827      	ldr	r0, [pc, #156]	; (8018f28 <_svfiprintf_r+0x1e4>)
 8018e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e8e:	2206      	movs	r2, #6
 8018e90:	1c7e      	adds	r6, r7, #1
 8018e92:	f7e7 f9bd 	bl	8000210 <memchr>
 8018e96:	2800      	cmp	r0, #0
 8018e98:	d038      	beq.n	8018f0c <_svfiprintf_r+0x1c8>
 8018e9a:	4b24      	ldr	r3, [pc, #144]	; (8018f2c <_svfiprintf_r+0x1e8>)
 8018e9c:	bb13      	cbnz	r3, 8018ee4 <_svfiprintf_r+0x1a0>
 8018e9e:	9b03      	ldr	r3, [sp, #12]
 8018ea0:	3307      	adds	r3, #7
 8018ea2:	f023 0307 	bic.w	r3, r3, #7
 8018ea6:	3308      	adds	r3, #8
 8018ea8:	9303      	str	r3, [sp, #12]
 8018eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eac:	444b      	add	r3, r9
 8018eae:	9309      	str	r3, [sp, #36]	; 0x24
 8018eb0:	e76d      	b.n	8018d8e <_svfiprintf_r+0x4a>
 8018eb2:	fb05 3202 	mla	r2, r5, r2, r3
 8018eb6:	2001      	movs	r0, #1
 8018eb8:	460f      	mov	r7, r1
 8018eba:	e7a6      	b.n	8018e0a <_svfiprintf_r+0xc6>
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	3701      	adds	r7, #1
 8018ec0:	9305      	str	r3, [sp, #20]
 8018ec2:	4619      	mov	r1, r3
 8018ec4:	250a      	movs	r5, #10
 8018ec6:	4638      	mov	r0, r7
 8018ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ecc:	3a30      	subs	r2, #48	; 0x30
 8018ece:	2a09      	cmp	r2, #9
 8018ed0:	d903      	bls.n	8018eda <_svfiprintf_r+0x196>
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d0c8      	beq.n	8018e68 <_svfiprintf_r+0x124>
 8018ed6:	9105      	str	r1, [sp, #20]
 8018ed8:	e7c6      	b.n	8018e68 <_svfiprintf_r+0x124>
 8018eda:	fb05 2101 	mla	r1, r5, r1, r2
 8018ede:	2301      	movs	r3, #1
 8018ee0:	4607      	mov	r7, r0
 8018ee2:	e7f0      	b.n	8018ec6 <_svfiprintf_r+0x182>
 8018ee4:	ab03      	add	r3, sp, #12
 8018ee6:	9300      	str	r3, [sp, #0]
 8018ee8:	4622      	mov	r2, r4
 8018eea:	4b11      	ldr	r3, [pc, #68]	; (8018f30 <_svfiprintf_r+0x1ec>)
 8018eec:	a904      	add	r1, sp, #16
 8018eee:	4640      	mov	r0, r8
 8018ef0:	f7fc fb6a 	bl	80155c8 <_printf_float>
 8018ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018ef8:	4681      	mov	r9, r0
 8018efa:	d1d6      	bne.n	8018eaa <_svfiprintf_r+0x166>
 8018efc:	89a3      	ldrh	r3, [r4, #12]
 8018efe:	065b      	lsls	r3, r3, #25
 8018f00:	f53f af35 	bmi.w	8018d6e <_svfiprintf_r+0x2a>
 8018f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f06:	b01d      	add	sp, #116	; 0x74
 8018f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0c:	ab03      	add	r3, sp, #12
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	4622      	mov	r2, r4
 8018f12:	4b07      	ldr	r3, [pc, #28]	; (8018f30 <_svfiprintf_r+0x1ec>)
 8018f14:	a904      	add	r1, sp, #16
 8018f16:	4640      	mov	r0, r8
 8018f18:	f7fc fe0c 	bl	8015b34 <_printf_i>
 8018f1c:	e7ea      	b.n	8018ef4 <_svfiprintf_r+0x1b0>
 8018f1e:	bf00      	nop
 8018f20:	0801a33c 	.word	0x0801a33c
 8018f24:	0801a342 	.word	0x0801a342
 8018f28:	0801a346 	.word	0x0801a346
 8018f2c:	080155c9 	.word	0x080155c9
 8018f30:	08018c91 	.word	0x08018c91

08018f34 <_sungetc_r>:
 8018f34:	b538      	push	{r3, r4, r5, lr}
 8018f36:	1c4b      	adds	r3, r1, #1
 8018f38:	4614      	mov	r4, r2
 8018f3a:	d103      	bne.n	8018f44 <_sungetc_r+0x10>
 8018f3c:	f04f 35ff 	mov.w	r5, #4294967295
 8018f40:	4628      	mov	r0, r5
 8018f42:	bd38      	pop	{r3, r4, r5, pc}
 8018f44:	8993      	ldrh	r3, [r2, #12]
 8018f46:	f023 0320 	bic.w	r3, r3, #32
 8018f4a:	8193      	strh	r3, [r2, #12]
 8018f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018f4e:	6852      	ldr	r2, [r2, #4]
 8018f50:	b2cd      	uxtb	r5, r1
 8018f52:	b18b      	cbz	r3, 8018f78 <_sungetc_r+0x44>
 8018f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018f56:	4293      	cmp	r3, r2
 8018f58:	dd08      	ble.n	8018f6c <_sungetc_r+0x38>
 8018f5a:	6823      	ldr	r3, [r4, #0]
 8018f5c:	1e5a      	subs	r2, r3, #1
 8018f5e:	6022      	str	r2, [r4, #0]
 8018f60:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018f64:	6863      	ldr	r3, [r4, #4]
 8018f66:	3301      	adds	r3, #1
 8018f68:	6063      	str	r3, [r4, #4]
 8018f6a:	e7e9      	b.n	8018f40 <_sungetc_r+0xc>
 8018f6c:	4621      	mov	r1, r4
 8018f6e:	f000 fbc3 	bl	80196f8 <__submore>
 8018f72:	2800      	cmp	r0, #0
 8018f74:	d0f1      	beq.n	8018f5a <_sungetc_r+0x26>
 8018f76:	e7e1      	b.n	8018f3c <_sungetc_r+0x8>
 8018f78:	6921      	ldr	r1, [r4, #16]
 8018f7a:	6823      	ldr	r3, [r4, #0]
 8018f7c:	b151      	cbz	r1, 8018f94 <_sungetc_r+0x60>
 8018f7e:	4299      	cmp	r1, r3
 8018f80:	d208      	bcs.n	8018f94 <_sungetc_r+0x60>
 8018f82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018f86:	42a9      	cmp	r1, r5
 8018f88:	d104      	bne.n	8018f94 <_sungetc_r+0x60>
 8018f8a:	3b01      	subs	r3, #1
 8018f8c:	3201      	adds	r2, #1
 8018f8e:	6023      	str	r3, [r4, #0]
 8018f90:	6062      	str	r2, [r4, #4]
 8018f92:	e7d5      	b.n	8018f40 <_sungetc_r+0xc>
 8018f94:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8018f9e:	2303      	movs	r3, #3
 8018fa0:	63a3      	str	r3, [r4, #56]	; 0x38
 8018fa2:	4623      	mov	r3, r4
 8018fa4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018fa8:	6023      	str	r3, [r4, #0]
 8018faa:	2301      	movs	r3, #1
 8018fac:	e7dc      	b.n	8018f68 <_sungetc_r+0x34>

08018fae <__ssrefill_r>:
 8018fae:	b510      	push	{r4, lr}
 8018fb0:	460c      	mov	r4, r1
 8018fb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018fb4:	b169      	cbz	r1, 8018fd2 <__ssrefill_r+0x24>
 8018fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fba:	4299      	cmp	r1, r3
 8018fbc:	d001      	beq.n	8018fc2 <__ssrefill_r+0x14>
 8018fbe:	f7ff fdbf 	bl	8018b40 <_free_r>
 8018fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018fc4:	6063      	str	r3, [r4, #4]
 8018fc6:	2000      	movs	r0, #0
 8018fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8018fca:	b113      	cbz	r3, 8018fd2 <__ssrefill_r+0x24>
 8018fcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018fce:	6023      	str	r3, [r4, #0]
 8018fd0:	bd10      	pop	{r4, pc}
 8018fd2:	6923      	ldr	r3, [r4, #16]
 8018fd4:	6023      	str	r3, [r4, #0]
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	6063      	str	r3, [r4, #4]
 8018fda:	89a3      	ldrh	r3, [r4, #12]
 8018fdc:	f043 0320 	orr.w	r3, r3, #32
 8018fe0:	81a3      	strh	r3, [r4, #12]
 8018fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8018fe6:	e7f3      	b.n	8018fd0 <__ssrefill_r+0x22>

08018fe8 <__ssvfiscanf_r>:
 8018fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fec:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018ff0:	460c      	mov	r4, r1
 8018ff2:	2100      	movs	r1, #0
 8018ff4:	9144      	str	r1, [sp, #272]	; 0x110
 8018ff6:	9145      	str	r1, [sp, #276]	; 0x114
 8018ff8:	499f      	ldr	r1, [pc, #636]	; (8019278 <__ssvfiscanf_r+0x290>)
 8018ffa:	91a0      	str	r1, [sp, #640]	; 0x280
 8018ffc:	f10d 0804 	add.w	r8, sp, #4
 8019000:	499e      	ldr	r1, [pc, #632]	; (801927c <__ssvfiscanf_r+0x294>)
 8019002:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019280 <__ssvfiscanf_r+0x298>
 8019006:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801900a:	4606      	mov	r6, r0
 801900c:	4692      	mov	sl, r2
 801900e:	91a1      	str	r1, [sp, #644]	; 0x284
 8019010:	9300      	str	r3, [sp, #0]
 8019012:	270a      	movs	r7, #10
 8019014:	f89a 3000 	ldrb.w	r3, [sl]
 8019018:	2b00      	cmp	r3, #0
 801901a:	f000 812a 	beq.w	8019272 <__ssvfiscanf_r+0x28a>
 801901e:	4655      	mov	r5, sl
 8019020:	f7ff f948 	bl	80182b4 <__locale_ctype_ptr>
 8019024:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019028:	4458      	add	r0, fp
 801902a:	7843      	ldrb	r3, [r0, #1]
 801902c:	f013 0308 	ands.w	r3, r3, #8
 8019030:	d01c      	beq.n	801906c <__ssvfiscanf_r+0x84>
 8019032:	6863      	ldr	r3, [r4, #4]
 8019034:	2b00      	cmp	r3, #0
 8019036:	dd12      	ble.n	801905e <__ssvfiscanf_r+0x76>
 8019038:	f7ff f93c 	bl	80182b4 <__locale_ctype_ptr>
 801903c:	6823      	ldr	r3, [r4, #0]
 801903e:	781a      	ldrb	r2, [r3, #0]
 8019040:	4410      	add	r0, r2
 8019042:	7842      	ldrb	r2, [r0, #1]
 8019044:	0712      	lsls	r2, r2, #28
 8019046:	d401      	bmi.n	801904c <__ssvfiscanf_r+0x64>
 8019048:	46aa      	mov	sl, r5
 801904a:	e7e3      	b.n	8019014 <__ssvfiscanf_r+0x2c>
 801904c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801904e:	3201      	adds	r2, #1
 8019050:	9245      	str	r2, [sp, #276]	; 0x114
 8019052:	6862      	ldr	r2, [r4, #4]
 8019054:	3301      	adds	r3, #1
 8019056:	3a01      	subs	r2, #1
 8019058:	6062      	str	r2, [r4, #4]
 801905a:	6023      	str	r3, [r4, #0]
 801905c:	e7e9      	b.n	8019032 <__ssvfiscanf_r+0x4a>
 801905e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019060:	4621      	mov	r1, r4
 8019062:	4630      	mov	r0, r6
 8019064:	4798      	blx	r3
 8019066:	2800      	cmp	r0, #0
 8019068:	d0e6      	beq.n	8019038 <__ssvfiscanf_r+0x50>
 801906a:	e7ed      	b.n	8019048 <__ssvfiscanf_r+0x60>
 801906c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019070:	f040 8082 	bne.w	8019178 <__ssvfiscanf_r+0x190>
 8019074:	9343      	str	r3, [sp, #268]	; 0x10c
 8019076:	9341      	str	r3, [sp, #260]	; 0x104
 8019078:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801907c:	2b2a      	cmp	r3, #42	; 0x2a
 801907e:	d103      	bne.n	8019088 <__ssvfiscanf_r+0xa0>
 8019080:	2310      	movs	r3, #16
 8019082:	9341      	str	r3, [sp, #260]	; 0x104
 8019084:	f10a 0502 	add.w	r5, sl, #2
 8019088:	46aa      	mov	sl, r5
 801908a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801908e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019092:	2a09      	cmp	r2, #9
 8019094:	d922      	bls.n	80190dc <__ssvfiscanf_r+0xf4>
 8019096:	2203      	movs	r2, #3
 8019098:	4879      	ldr	r0, [pc, #484]	; (8019280 <__ssvfiscanf_r+0x298>)
 801909a:	f7e7 f8b9 	bl	8000210 <memchr>
 801909e:	b138      	cbz	r0, 80190b0 <__ssvfiscanf_r+0xc8>
 80190a0:	eba0 0309 	sub.w	r3, r0, r9
 80190a4:	2001      	movs	r0, #1
 80190a6:	4098      	lsls	r0, r3
 80190a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80190aa:	4318      	orrs	r0, r3
 80190ac:	9041      	str	r0, [sp, #260]	; 0x104
 80190ae:	46aa      	mov	sl, r5
 80190b0:	f89a 3000 	ldrb.w	r3, [sl]
 80190b4:	2b67      	cmp	r3, #103	; 0x67
 80190b6:	f10a 0501 	add.w	r5, sl, #1
 80190ba:	d82b      	bhi.n	8019114 <__ssvfiscanf_r+0x12c>
 80190bc:	2b65      	cmp	r3, #101	; 0x65
 80190be:	f080 809f 	bcs.w	8019200 <__ssvfiscanf_r+0x218>
 80190c2:	2b47      	cmp	r3, #71	; 0x47
 80190c4:	d810      	bhi.n	80190e8 <__ssvfiscanf_r+0x100>
 80190c6:	2b45      	cmp	r3, #69	; 0x45
 80190c8:	f080 809a 	bcs.w	8019200 <__ssvfiscanf_r+0x218>
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d06c      	beq.n	80191aa <__ssvfiscanf_r+0x1c2>
 80190d0:	2b25      	cmp	r3, #37	; 0x25
 80190d2:	d051      	beq.n	8019178 <__ssvfiscanf_r+0x190>
 80190d4:	2303      	movs	r3, #3
 80190d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80190d8:	9742      	str	r7, [sp, #264]	; 0x108
 80190da:	e027      	b.n	801912c <__ssvfiscanf_r+0x144>
 80190dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80190de:	fb07 1303 	mla	r3, r7, r3, r1
 80190e2:	3b30      	subs	r3, #48	; 0x30
 80190e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80190e6:	e7cf      	b.n	8019088 <__ssvfiscanf_r+0xa0>
 80190e8:	2b5b      	cmp	r3, #91	; 0x5b
 80190ea:	d06a      	beq.n	80191c2 <__ssvfiscanf_r+0x1da>
 80190ec:	d80c      	bhi.n	8019108 <__ssvfiscanf_r+0x120>
 80190ee:	2b58      	cmp	r3, #88	; 0x58
 80190f0:	d1f0      	bne.n	80190d4 <__ssvfiscanf_r+0xec>
 80190f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80190f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80190f8:	9241      	str	r2, [sp, #260]	; 0x104
 80190fa:	2210      	movs	r2, #16
 80190fc:	9242      	str	r2, [sp, #264]	; 0x108
 80190fe:	2b6e      	cmp	r3, #110	; 0x6e
 8019100:	bf8c      	ite	hi
 8019102:	2304      	movhi	r3, #4
 8019104:	2303      	movls	r3, #3
 8019106:	e010      	b.n	801912a <__ssvfiscanf_r+0x142>
 8019108:	2b63      	cmp	r3, #99	; 0x63
 801910a:	d065      	beq.n	80191d8 <__ssvfiscanf_r+0x1f0>
 801910c:	2b64      	cmp	r3, #100	; 0x64
 801910e:	d1e1      	bne.n	80190d4 <__ssvfiscanf_r+0xec>
 8019110:	9742      	str	r7, [sp, #264]	; 0x108
 8019112:	e7f4      	b.n	80190fe <__ssvfiscanf_r+0x116>
 8019114:	2b70      	cmp	r3, #112	; 0x70
 8019116:	d04b      	beq.n	80191b0 <__ssvfiscanf_r+0x1c8>
 8019118:	d826      	bhi.n	8019168 <__ssvfiscanf_r+0x180>
 801911a:	2b6e      	cmp	r3, #110	; 0x6e
 801911c:	d062      	beq.n	80191e4 <__ssvfiscanf_r+0x1fc>
 801911e:	d84c      	bhi.n	80191ba <__ssvfiscanf_r+0x1d2>
 8019120:	2b69      	cmp	r3, #105	; 0x69
 8019122:	d1d7      	bne.n	80190d4 <__ssvfiscanf_r+0xec>
 8019124:	2300      	movs	r3, #0
 8019126:	9342      	str	r3, [sp, #264]	; 0x108
 8019128:	2303      	movs	r3, #3
 801912a:	9347      	str	r3, [sp, #284]	; 0x11c
 801912c:	6863      	ldr	r3, [r4, #4]
 801912e:	2b00      	cmp	r3, #0
 8019130:	dd68      	ble.n	8019204 <__ssvfiscanf_r+0x21c>
 8019132:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019134:	0659      	lsls	r1, r3, #25
 8019136:	d407      	bmi.n	8019148 <__ssvfiscanf_r+0x160>
 8019138:	f7ff f8bc 	bl	80182b4 <__locale_ctype_ptr>
 801913c:	6823      	ldr	r3, [r4, #0]
 801913e:	781a      	ldrb	r2, [r3, #0]
 8019140:	4410      	add	r0, r2
 8019142:	7842      	ldrb	r2, [r0, #1]
 8019144:	0712      	lsls	r2, r2, #28
 8019146:	d464      	bmi.n	8019212 <__ssvfiscanf_r+0x22a>
 8019148:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801914a:	2b02      	cmp	r3, #2
 801914c:	dc73      	bgt.n	8019236 <__ssvfiscanf_r+0x24e>
 801914e:	466b      	mov	r3, sp
 8019150:	4622      	mov	r2, r4
 8019152:	a941      	add	r1, sp, #260	; 0x104
 8019154:	4630      	mov	r0, r6
 8019156:	f000 f897 	bl	8019288 <_scanf_chars>
 801915a:	2801      	cmp	r0, #1
 801915c:	f000 8089 	beq.w	8019272 <__ssvfiscanf_r+0x28a>
 8019160:	2802      	cmp	r0, #2
 8019162:	f47f af71 	bne.w	8019048 <__ssvfiscanf_r+0x60>
 8019166:	e01d      	b.n	80191a4 <__ssvfiscanf_r+0x1bc>
 8019168:	2b75      	cmp	r3, #117	; 0x75
 801916a:	d0d1      	beq.n	8019110 <__ssvfiscanf_r+0x128>
 801916c:	2b78      	cmp	r3, #120	; 0x78
 801916e:	d0c0      	beq.n	80190f2 <__ssvfiscanf_r+0x10a>
 8019170:	2b73      	cmp	r3, #115	; 0x73
 8019172:	d1af      	bne.n	80190d4 <__ssvfiscanf_r+0xec>
 8019174:	2302      	movs	r3, #2
 8019176:	e7d8      	b.n	801912a <__ssvfiscanf_r+0x142>
 8019178:	6863      	ldr	r3, [r4, #4]
 801917a:	2b00      	cmp	r3, #0
 801917c:	dd0c      	ble.n	8019198 <__ssvfiscanf_r+0x1b0>
 801917e:	6823      	ldr	r3, [r4, #0]
 8019180:	781a      	ldrb	r2, [r3, #0]
 8019182:	455a      	cmp	r2, fp
 8019184:	d175      	bne.n	8019272 <__ssvfiscanf_r+0x28a>
 8019186:	3301      	adds	r3, #1
 8019188:	6862      	ldr	r2, [r4, #4]
 801918a:	6023      	str	r3, [r4, #0]
 801918c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801918e:	3a01      	subs	r2, #1
 8019190:	3301      	adds	r3, #1
 8019192:	6062      	str	r2, [r4, #4]
 8019194:	9345      	str	r3, [sp, #276]	; 0x114
 8019196:	e757      	b.n	8019048 <__ssvfiscanf_r+0x60>
 8019198:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801919a:	4621      	mov	r1, r4
 801919c:	4630      	mov	r0, r6
 801919e:	4798      	blx	r3
 80191a0:	2800      	cmp	r0, #0
 80191a2:	d0ec      	beq.n	801917e <__ssvfiscanf_r+0x196>
 80191a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80191a6:	2800      	cmp	r0, #0
 80191a8:	d159      	bne.n	801925e <__ssvfiscanf_r+0x276>
 80191aa:	f04f 30ff 	mov.w	r0, #4294967295
 80191ae:	e05c      	b.n	801926a <__ssvfiscanf_r+0x282>
 80191b0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80191b2:	f042 0220 	orr.w	r2, r2, #32
 80191b6:	9241      	str	r2, [sp, #260]	; 0x104
 80191b8:	e79b      	b.n	80190f2 <__ssvfiscanf_r+0x10a>
 80191ba:	2308      	movs	r3, #8
 80191bc:	9342      	str	r3, [sp, #264]	; 0x108
 80191be:	2304      	movs	r3, #4
 80191c0:	e7b3      	b.n	801912a <__ssvfiscanf_r+0x142>
 80191c2:	4629      	mov	r1, r5
 80191c4:	4640      	mov	r0, r8
 80191c6:	f000 f9c7 	bl	8019558 <__sccl>
 80191ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80191cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191d0:	9341      	str	r3, [sp, #260]	; 0x104
 80191d2:	4605      	mov	r5, r0
 80191d4:	2301      	movs	r3, #1
 80191d6:	e7a8      	b.n	801912a <__ssvfiscanf_r+0x142>
 80191d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80191da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191de:	9341      	str	r3, [sp, #260]	; 0x104
 80191e0:	2300      	movs	r3, #0
 80191e2:	e7a2      	b.n	801912a <__ssvfiscanf_r+0x142>
 80191e4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80191e6:	06c3      	lsls	r3, r0, #27
 80191e8:	f53f af2e 	bmi.w	8019048 <__ssvfiscanf_r+0x60>
 80191ec:	9b00      	ldr	r3, [sp, #0]
 80191ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80191f0:	1d19      	adds	r1, r3, #4
 80191f2:	9100      	str	r1, [sp, #0]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	07c0      	lsls	r0, r0, #31
 80191f8:	bf4c      	ite	mi
 80191fa:	801a      	strhmi	r2, [r3, #0]
 80191fc:	601a      	strpl	r2, [r3, #0]
 80191fe:	e723      	b.n	8019048 <__ssvfiscanf_r+0x60>
 8019200:	2305      	movs	r3, #5
 8019202:	e792      	b.n	801912a <__ssvfiscanf_r+0x142>
 8019204:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019206:	4621      	mov	r1, r4
 8019208:	4630      	mov	r0, r6
 801920a:	4798      	blx	r3
 801920c:	2800      	cmp	r0, #0
 801920e:	d090      	beq.n	8019132 <__ssvfiscanf_r+0x14a>
 8019210:	e7c8      	b.n	80191a4 <__ssvfiscanf_r+0x1bc>
 8019212:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019214:	3201      	adds	r2, #1
 8019216:	9245      	str	r2, [sp, #276]	; 0x114
 8019218:	6862      	ldr	r2, [r4, #4]
 801921a:	3a01      	subs	r2, #1
 801921c:	2a00      	cmp	r2, #0
 801921e:	6062      	str	r2, [r4, #4]
 8019220:	dd02      	ble.n	8019228 <__ssvfiscanf_r+0x240>
 8019222:	3301      	adds	r3, #1
 8019224:	6023      	str	r3, [r4, #0]
 8019226:	e787      	b.n	8019138 <__ssvfiscanf_r+0x150>
 8019228:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801922a:	4621      	mov	r1, r4
 801922c:	4630      	mov	r0, r6
 801922e:	4798      	blx	r3
 8019230:	2800      	cmp	r0, #0
 8019232:	d081      	beq.n	8019138 <__ssvfiscanf_r+0x150>
 8019234:	e7b6      	b.n	80191a4 <__ssvfiscanf_r+0x1bc>
 8019236:	2b04      	cmp	r3, #4
 8019238:	dc06      	bgt.n	8019248 <__ssvfiscanf_r+0x260>
 801923a:	466b      	mov	r3, sp
 801923c:	4622      	mov	r2, r4
 801923e:	a941      	add	r1, sp, #260	; 0x104
 8019240:	4630      	mov	r0, r6
 8019242:	f000 f885 	bl	8019350 <_scanf_i>
 8019246:	e788      	b.n	801915a <__ssvfiscanf_r+0x172>
 8019248:	4b0e      	ldr	r3, [pc, #56]	; (8019284 <__ssvfiscanf_r+0x29c>)
 801924a:	2b00      	cmp	r3, #0
 801924c:	f43f aefc 	beq.w	8019048 <__ssvfiscanf_r+0x60>
 8019250:	466b      	mov	r3, sp
 8019252:	4622      	mov	r2, r4
 8019254:	a941      	add	r1, sp, #260	; 0x104
 8019256:	4630      	mov	r0, r6
 8019258:	f7fc fd7e 	bl	8015d58 <_scanf_float>
 801925c:	e77d      	b.n	801915a <__ssvfiscanf_r+0x172>
 801925e:	89a3      	ldrh	r3, [r4, #12]
 8019260:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019264:	bf18      	it	ne
 8019266:	f04f 30ff 	movne.w	r0, #4294967295
 801926a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019272:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019274:	e7f9      	b.n	801926a <__ssvfiscanf_r+0x282>
 8019276:	bf00      	nop
 8019278:	08018f35 	.word	0x08018f35
 801927c:	08018faf 	.word	0x08018faf
 8019280:	0801a342 	.word	0x0801a342
 8019284:	08015d59 	.word	0x08015d59

08019288 <_scanf_chars>:
 8019288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801928c:	4615      	mov	r5, r2
 801928e:	688a      	ldr	r2, [r1, #8]
 8019290:	4680      	mov	r8, r0
 8019292:	460c      	mov	r4, r1
 8019294:	b932      	cbnz	r2, 80192a4 <_scanf_chars+0x1c>
 8019296:	698a      	ldr	r2, [r1, #24]
 8019298:	2a00      	cmp	r2, #0
 801929a:	bf14      	ite	ne
 801929c:	f04f 32ff 	movne.w	r2, #4294967295
 80192a0:	2201      	moveq	r2, #1
 80192a2:	608a      	str	r2, [r1, #8]
 80192a4:	6822      	ldr	r2, [r4, #0]
 80192a6:	06d1      	lsls	r1, r2, #27
 80192a8:	bf5f      	itttt	pl
 80192aa:	681a      	ldrpl	r2, [r3, #0]
 80192ac:	1d11      	addpl	r1, r2, #4
 80192ae:	6019      	strpl	r1, [r3, #0]
 80192b0:	6817      	ldrpl	r7, [r2, #0]
 80192b2:	2600      	movs	r6, #0
 80192b4:	69a3      	ldr	r3, [r4, #24]
 80192b6:	b1db      	cbz	r3, 80192f0 <_scanf_chars+0x68>
 80192b8:	2b01      	cmp	r3, #1
 80192ba:	d107      	bne.n	80192cc <_scanf_chars+0x44>
 80192bc:	682b      	ldr	r3, [r5, #0]
 80192be:	6962      	ldr	r2, [r4, #20]
 80192c0:	781b      	ldrb	r3, [r3, #0]
 80192c2:	5cd3      	ldrb	r3, [r2, r3]
 80192c4:	b9a3      	cbnz	r3, 80192f0 <_scanf_chars+0x68>
 80192c6:	2e00      	cmp	r6, #0
 80192c8:	d132      	bne.n	8019330 <_scanf_chars+0xa8>
 80192ca:	e006      	b.n	80192da <_scanf_chars+0x52>
 80192cc:	2b02      	cmp	r3, #2
 80192ce:	d007      	beq.n	80192e0 <_scanf_chars+0x58>
 80192d0:	2e00      	cmp	r6, #0
 80192d2:	d12d      	bne.n	8019330 <_scanf_chars+0xa8>
 80192d4:	69a3      	ldr	r3, [r4, #24]
 80192d6:	2b01      	cmp	r3, #1
 80192d8:	d12a      	bne.n	8019330 <_scanf_chars+0xa8>
 80192da:	2001      	movs	r0, #1
 80192dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e0:	f7fe ffe8 	bl	80182b4 <__locale_ctype_ptr>
 80192e4:	682b      	ldr	r3, [r5, #0]
 80192e6:	781b      	ldrb	r3, [r3, #0]
 80192e8:	4418      	add	r0, r3
 80192ea:	7843      	ldrb	r3, [r0, #1]
 80192ec:	071b      	lsls	r3, r3, #28
 80192ee:	d4ef      	bmi.n	80192d0 <_scanf_chars+0x48>
 80192f0:	6823      	ldr	r3, [r4, #0]
 80192f2:	06da      	lsls	r2, r3, #27
 80192f4:	bf5e      	ittt	pl
 80192f6:	682b      	ldrpl	r3, [r5, #0]
 80192f8:	781b      	ldrbpl	r3, [r3, #0]
 80192fa:	703b      	strbpl	r3, [r7, #0]
 80192fc:	682a      	ldr	r2, [r5, #0]
 80192fe:	686b      	ldr	r3, [r5, #4]
 8019300:	f102 0201 	add.w	r2, r2, #1
 8019304:	602a      	str	r2, [r5, #0]
 8019306:	68a2      	ldr	r2, [r4, #8]
 8019308:	f103 33ff 	add.w	r3, r3, #4294967295
 801930c:	f102 32ff 	add.w	r2, r2, #4294967295
 8019310:	606b      	str	r3, [r5, #4]
 8019312:	f106 0601 	add.w	r6, r6, #1
 8019316:	bf58      	it	pl
 8019318:	3701      	addpl	r7, #1
 801931a:	60a2      	str	r2, [r4, #8]
 801931c:	b142      	cbz	r2, 8019330 <_scanf_chars+0xa8>
 801931e:	2b00      	cmp	r3, #0
 8019320:	dcc8      	bgt.n	80192b4 <_scanf_chars+0x2c>
 8019322:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019326:	4629      	mov	r1, r5
 8019328:	4640      	mov	r0, r8
 801932a:	4798      	blx	r3
 801932c:	2800      	cmp	r0, #0
 801932e:	d0c1      	beq.n	80192b4 <_scanf_chars+0x2c>
 8019330:	6823      	ldr	r3, [r4, #0]
 8019332:	f013 0310 	ands.w	r3, r3, #16
 8019336:	d105      	bne.n	8019344 <_scanf_chars+0xbc>
 8019338:	68e2      	ldr	r2, [r4, #12]
 801933a:	3201      	adds	r2, #1
 801933c:	60e2      	str	r2, [r4, #12]
 801933e:	69a2      	ldr	r2, [r4, #24]
 8019340:	b102      	cbz	r2, 8019344 <_scanf_chars+0xbc>
 8019342:	703b      	strb	r3, [r7, #0]
 8019344:	6923      	ldr	r3, [r4, #16]
 8019346:	441e      	add	r6, r3
 8019348:	6126      	str	r6, [r4, #16]
 801934a:	2000      	movs	r0, #0
 801934c:	e7c6      	b.n	80192dc <_scanf_chars+0x54>
	...

08019350 <_scanf_i>:
 8019350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019354:	469a      	mov	sl, r3
 8019356:	4b74      	ldr	r3, [pc, #464]	; (8019528 <_scanf_i+0x1d8>)
 8019358:	460c      	mov	r4, r1
 801935a:	4683      	mov	fp, r0
 801935c:	4616      	mov	r6, r2
 801935e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019362:	b087      	sub	sp, #28
 8019364:	ab03      	add	r3, sp, #12
 8019366:	68a7      	ldr	r7, [r4, #8]
 8019368:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801936c:	4b6f      	ldr	r3, [pc, #444]	; (801952c <_scanf_i+0x1dc>)
 801936e:	69a1      	ldr	r1, [r4, #24]
 8019370:	4a6f      	ldr	r2, [pc, #444]	; (8019530 <_scanf_i+0x1e0>)
 8019372:	2903      	cmp	r1, #3
 8019374:	bf08      	it	eq
 8019376:	461a      	moveq	r2, r3
 8019378:	1e7b      	subs	r3, r7, #1
 801937a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801937e:	bf84      	itt	hi
 8019380:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019384:	60a3      	strhi	r3, [r4, #8]
 8019386:	6823      	ldr	r3, [r4, #0]
 8019388:	9200      	str	r2, [sp, #0]
 801938a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801938e:	bf88      	it	hi
 8019390:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019394:	f104 091c 	add.w	r9, r4, #28
 8019398:	6023      	str	r3, [r4, #0]
 801939a:	bf8c      	ite	hi
 801939c:	197f      	addhi	r7, r7, r5
 801939e:	2700      	movls	r7, #0
 80193a0:	464b      	mov	r3, r9
 80193a2:	f04f 0800 	mov.w	r8, #0
 80193a6:	9301      	str	r3, [sp, #4]
 80193a8:	6831      	ldr	r1, [r6, #0]
 80193aa:	ab03      	add	r3, sp, #12
 80193ac:	2202      	movs	r2, #2
 80193ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80193b2:	7809      	ldrb	r1, [r1, #0]
 80193b4:	f7e6 ff2c 	bl	8000210 <memchr>
 80193b8:	9b01      	ldr	r3, [sp, #4]
 80193ba:	b330      	cbz	r0, 801940a <_scanf_i+0xba>
 80193bc:	f1b8 0f01 	cmp.w	r8, #1
 80193c0:	d15a      	bne.n	8019478 <_scanf_i+0x128>
 80193c2:	6862      	ldr	r2, [r4, #4]
 80193c4:	b92a      	cbnz	r2, 80193d2 <_scanf_i+0x82>
 80193c6:	6822      	ldr	r2, [r4, #0]
 80193c8:	2108      	movs	r1, #8
 80193ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80193ce:	6061      	str	r1, [r4, #4]
 80193d0:	6022      	str	r2, [r4, #0]
 80193d2:	6822      	ldr	r2, [r4, #0]
 80193d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80193d8:	6022      	str	r2, [r4, #0]
 80193da:	68a2      	ldr	r2, [r4, #8]
 80193dc:	1e51      	subs	r1, r2, #1
 80193de:	60a1      	str	r1, [r4, #8]
 80193e0:	b19a      	cbz	r2, 801940a <_scanf_i+0xba>
 80193e2:	6832      	ldr	r2, [r6, #0]
 80193e4:	1c51      	adds	r1, r2, #1
 80193e6:	6031      	str	r1, [r6, #0]
 80193e8:	7812      	ldrb	r2, [r2, #0]
 80193ea:	701a      	strb	r2, [r3, #0]
 80193ec:	1c5d      	adds	r5, r3, #1
 80193ee:	6873      	ldr	r3, [r6, #4]
 80193f0:	3b01      	subs	r3, #1
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	6073      	str	r3, [r6, #4]
 80193f6:	dc07      	bgt.n	8019408 <_scanf_i+0xb8>
 80193f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80193fc:	4631      	mov	r1, r6
 80193fe:	4658      	mov	r0, fp
 8019400:	4798      	blx	r3
 8019402:	2800      	cmp	r0, #0
 8019404:	f040 8086 	bne.w	8019514 <_scanf_i+0x1c4>
 8019408:	462b      	mov	r3, r5
 801940a:	f108 0801 	add.w	r8, r8, #1
 801940e:	f1b8 0f03 	cmp.w	r8, #3
 8019412:	d1c8      	bne.n	80193a6 <_scanf_i+0x56>
 8019414:	6862      	ldr	r2, [r4, #4]
 8019416:	b90a      	cbnz	r2, 801941c <_scanf_i+0xcc>
 8019418:	220a      	movs	r2, #10
 801941a:	6062      	str	r2, [r4, #4]
 801941c:	6862      	ldr	r2, [r4, #4]
 801941e:	4945      	ldr	r1, [pc, #276]	; (8019534 <_scanf_i+0x1e4>)
 8019420:	6960      	ldr	r0, [r4, #20]
 8019422:	9301      	str	r3, [sp, #4]
 8019424:	1a89      	subs	r1, r1, r2
 8019426:	f000 f897 	bl	8019558 <__sccl>
 801942a:	9b01      	ldr	r3, [sp, #4]
 801942c:	f04f 0800 	mov.w	r8, #0
 8019430:	461d      	mov	r5, r3
 8019432:	68a3      	ldr	r3, [r4, #8]
 8019434:	6822      	ldr	r2, [r4, #0]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d03a      	beq.n	80194b0 <_scanf_i+0x160>
 801943a:	6831      	ldr	r1, [r6, #0]
 801943c:	6960      	ldr	r0, [r4, #20]
 801943e:	f891 c000 	ldrb.w	ip, [r1]
 8019442:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019446:	2800      	cmp	r0, #0
 8019448:	d032      	beq.n	80194b0 <_scanf_i+0x160>
 801944a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801944e:	d121      	bne.n	8019494 <_scanf_i+0x144>
 8019450:	0510      	lsls	r0, r2, #20
 8019452:	d51f      	bpl.n	8019494 <_scanf_i+0x144>
 8019454:	f108 0801 	add.w	r8, r8, #1
 8019458:	b117      	cbz	r7, 8019460 <_scanf_i+0x110>
 801945a:	3301      	adds	r3, #1
 801945c:	3f01      	subs	r7, #1
 801945e:	60a3      	str	r3, [r4, #8]
 8019460:	6873      	ldr	r3, [r6, #4]
 8019462:	3b01      	subs	r3, #1
 8019464:	2b00      	cmp	r3, #0
 8019466:	6073      	str	r3, [r6, #4]
 8019468:	dd1b      	ble.n	80194a2 <_scanf_i+0x152>
 801946a:	6833      	ldr	r3, [r6, #0]
 801946c:	3301      	adds	r3, #1
 801946e:	6033      	str	r3, [r6, #0]
 8019470:	68a3      	ldr	r3, [r4, #8]
 8019472:	3b01      	subs	r3, #1
 8019474:	60a3      	str	r3, [r4, #8]
 8019476:	e7dc      	b.n	8019432 <_scanf_i+0xe2>
 8019478:	f1b8 0f02 	cmp.w	r8, #2
 801947c:	d1ad      	bne.n	80193da <_scanf_i+0x8a>
 801947e:	6822      	ldr	r2, [r4, #0]
 8019480:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019484:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019488:	d1bf      	bne.n	801940a <_scanf_i+0xba>
 801948a:	2110      	movs	r1, #16
 801948c:	6061      	str	r1, [r4, #4]
 801948e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019492:	e7a1      	b.n	80193d8 <_scanf_i+0x88>
 8019494:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019498:	6022      	str	r2, [r4, #0]
 801949a:	780b      	ldrb	r3, [r1, #0]
 801949c:	702b      	strb	r3, [r5, #0]
 801949e:	3501      	adds	r5, #1
 80194a0:	e7de      	b.n	8019460 <_scanf_i+0x110>
 80194a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80194a6:	4631      	mov	r1, r6
 80194a8:	4658      	mov	r0, fp
 80194aa:	4798      	blx	r3
 80194ac:	2800      	cmp	r0, #0
 80194ae:	d0df      	beq.n	8019470 <_scanf_i+0x120>
 80194b0:	6823      	ldr	r3, [r4, #0]
 80194b2:	05d9      	lsls	r1, r3, #23
 80194b4:	d50c      	bpl.n	80194d0 <_scanf_i+0x180>
 80194b6:	454d      	cmp	r5, r9
 80194b8:	d908      	bls.n	80194cc <_scanf_i+0x17c>
 80194ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80194be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80194c2:	4632      	mov	r2, r6
 80194c4:	4658      	mov	r0, fp
 80194c6:	4798      	blx	r3
 80194c8:	1e6f      	subs	r7, r5, #1
 80194ca:	463d      	mov	r5, r7
 80194cc:	454d      	cmp	r5, r9
 80194ce:	d029      	beq.n	8019524 <_scanf_i+0x1d4>
 80194d0:	6822      	ldr	r2, [r4, #0]
 80194d2:	f012 0210 	ands.w	r2, r2, #16
 80194d6:	d113      	bne.n	8019500 <_scanf_i+0x1b0>
 80194d8:	702a      	strb	r2, [r5, #0]
 80194da:	6863      	ldr	r3, [r4, #4]
 80194dc:	9e00      	ldr	r6, [sp, #0]
 80194de:	4649      	mov	r1, r9
 80194e0:	4658      	mov	r0, fp
 80194e2:	47b0      	blx	r6
 80194e4:	f8da 3000 	ldr.w	r3, [sl]
 80194e8:	6821      	ldr	r1, [r4, #0]
 80194ea:	1d1a      	adds	r2, r3, #4
 80194ec:	f8ca 2000 	str.w	r2, [sl]
 80194f0:	f011 0f20 	tst.w	r1, #32
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	d010      	beq.n	801951a <_scanf_i+0x1ca>
 80194f8:	6018      	str	r0, [r3, #0]
 80194fa:	68e3      	ldr	r3, [r4, #12]
 80194fc:	3301      	adds	r3, #1
 80194fe:	60e3      	str	r3, [r4, #12]
 8019500:	eba5 0509 	sub.w	r5, r5, r9
 8019504:	44a8      	add	r8, r5
 8019506:	6925      	ldr	r5, [r4, #16]
 8019508:	4445      	add	r5, r8
 801950a:	6125      	str	r5, [r4, #16]
 801950c:	2000      	movs	r0, #0
 801950e:	b007      	add	sp, #28
 8019510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019514:	f04f 0800 	mov.w	r8, #0
 8019518:	e7ca      	b.n	80194b0 <_scanf_i+0x160>
 801951a:	07ca      	lsls	r2, r1, #31
 801951c:	bf4c      	ite	mi
 801951e:	8018      	strhmi	r0, [r3, #0]
 8019520:	6018      	strpl	r0, [r3, #0]
 8019522:	e7ea      	b.n	80194fa <_scanf_i+0x1aa>
 8019524:	2001      	movs	r0, #1
 8019526:	e7f2      	b.n	801950e <_scanf_i+0x1be>
 8019528:	08019e9c 	.word	0x08019e9c
 801952c:	08016f71 	.word	0x08016f71
 8019530:	080196d5 	.word	0x080196d5
 8019534:	0801a35d 	.word	0x0801a35d

08019538 <_sbrk_r>:
 8019538:	b538      	push	{r3, r4, r5, lr}
 801953a:	4c06      	ldr	r4, [pc, #24]	; (8019554 <_sbrk_r+0x1c>)
 801953c:	2300      	movs	r3, #0
 801953e:	4605      	mov	r5, r0
 8019540:	4608      	mov	r0, r1
 8019542:	6023      	str	r3, [r4, #0]
 8019544:	f7ee f82c 	bl	80075a0 <_sbrk>
 8019548:	1c43      	adds	r3, r0, #1
 801954a:	d102      	bne.n	8019552 <_sbrk_r+0x1a>
 801954c:	6823      	ldr	r3, [r4, #0]
 801954e:	b103      	cbz	r3, 8019552 <_sbrk_r+0x1a>
 8019550:	602b      	str	r3, [r5, #0]
 8019552:	bd38      	pop	{r3, r4, r5, pc}
 8019554:	20045cfc 	.word	0x20045cfc

08019558 <__sccl>:
 8019558:	b570      	push	{r4, r5, r6, lr}
 801955a:	780b      	ldrb	r3, [r1, #0]
 801955c:	2b5e      	cmp	r3, #94	; 0x5e
 801955e:	bf13      	iteet	ne
 8019560:	1c4a      	addne	r2, r1, #1
 8019562:	1c8a      	addeq	r2, r1, #2
 8019564:	784b      	ldrbeq	r3, [r1, #1]
 8019566:	2100      	movne	r1, #0
 8019568:	bf08      	it	eq
 801956a:	2101      	moveq	r1, #1
 801956c:	1e44      	subs	r4, r0, #1
 801956e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019572:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019576:	42ac      	cmp	r4, r5
 8019578:	d1fb      	bne.n	8019572 <__sccl+0x1a>
 801957a:	b913      	cbnz	r3, 8019582 <__sccl+0x2a>
 801957c:	3a01      	subs	r2, #1
 801957e:	4610      	mov	r0, r2
 8019580:	bd70      	pop	{r4, r5, r6, pc}
 8019582:	f081 0401 	eor.w	r4, r1, #1
 8019586:	54c4      	strb	r4, [r0, r3]
 8019588:	1c51      	adds	r1, r2, #1
 801958a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801958e:	2d2d      	cmp	r5, #45	; 0x2d
 8019590:	f101 36ff 	add.w	r6, r1, #4294967295
 8019594:	460a      	mov	r2, r1
 8019596:	d006      	beq.n	80195a6 <__sccl+0x4e>
 8019598:	2d5d      	cmp	r5, #93	; 0x5d
 801959a:	d0f0      	beq.n	801957e <__sccl+0x26>
 801959c:	b90d      	cbnz	r5, 80195a2 <__sccl+0x4a>
 801959e:	4632      	mov	r2, r6
 80195a0:	e7ed      	b.n	801957e <__sccl+0x26>
 80195a2:	462b      	mov	r3, r5
 80195a4:	e7ef      	b.n	8019586 <__sccl+0x2e>
 80195a6:	780e      	ldrb	r6, [r1, #0]
 80195a8:	2e5d      	cmp	r6, #93	; 0x5d
 80195aa:	d0fa      	beq.n	80195a2 <__sccl+0x4a>
 80195ac:	42b3      	cmp	r3, r6
 80195ae:	dcf8      	bgt.n	80195a2 <__sccl+0x4a>
 80195b0:	3301      	adds	r3, #1
 80195b2:	429e      	cmp	r6, r3
 80195b4:	54c4      	strb	r4, [r0, r3]
 80195b6:	dcfb      	bgt.n	80195b0 <__sccl+0x58>
 80195b8:	3102      	adds	r1, #2
 80195ba:	e7e6      	b.n	801958a <__sccl+0x32>

080195bc <strncmp>:
 80195bc:	b510      	push	{r4, lr}
 80195be:	b16a      	cbz	r2, 80195dc <strncmp+0x20>
 80195c0:	3901      	subs	r1, #1
 80195c2:	1884      	adds	r4, r0, r2
 80195c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80195c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80195cc:	4293      	cmp	r3, r2
 80195ce:	d103      	bne.n	80195d8 <strncmp+0x1c>
 80195d0:	42a0      	cmp	r0, r4
 80195d2:	d001      	beq.n	80195d8 <strncmp+0x1c>
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d1f5      	bne.n	80195c4 <strncmp+0x8>
 80195d8:	1a98      	subs	r0, r3, r2
 80195da:	bd10      	pop	{r4, pc}
 80195dc:	4610      	mov	r0, r2
 80195de:	e7fc      	b.n	80195da <strncmp+0x1e>

080195e0 <_strtoul_l.isra.0>:
 80195e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195e4:	4680      	mov	r8, r0
 80195e6:	4689      	mov	r9, r1
 80195e8:	4692      	mov	sl, r2
 80195ea:	461e      	mov	r6, r3
 80195ec:	460f      	mov	r7, r1
 80195ee:	463d      	mov	r5, r7
 80195f0:	9808      	ldr	r0, [sp, #32]
 80195f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80195f6:	f7fe fe59 	bl	80182ac <__locale_ctype_ptr_l>
 80195fa:	4420      	add	r0, r4
 80195fc:	7843      	ldrb	r3, [r0, #1]
 80195fe:	f013 0308 	ands.w	r3, r3, #8
 8019602:	d130      	bne.n	8019666 <_strtoul_l.isra.0+0x86>
 8019604:	2c2d      	cmp	r4, #45	; 0x2d
 8019606:	d130      	bne.n	801966a <_strtoul_l.isra.0+0x8a>
 8019608:	787c      	ldrb	r4, [r7, #1]
 801960a:	1cbd      	adds	r5, r7, #2
 801960c:	2101      	movs	r1, #1
 801960e:	2e00      	cmp	r6, #0
 8019610:	d05c      	beq.n	80196cc <_strtoul_l.isra.0+0xec>
 8019612:	2e10      	cmp	r6, #16
 8019614:	d109      	bne.n	801962a <_strtoul_l.isra.0+0x4a>
 8019616:	2c30      	cmp	r4, #48	; 0x30
 8019618:	d107      	bne.n	801962a <_strtoul_l.isra.0+0x4a>
 801961a:	782b      	ldrb	r3, [r5, #0]
 801961c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019620:	2b58      	cmp	r3, #88	; 0x58
 8019622:	d14e      	bne.n	80196c2 <_strtoul_l.isra.0+0xe2>
 8019624:	786c      	ldrb	r4, [r5, #1]
 8019626:	2610      	movs	r6, #16
 8019628:	3502      	adds	r5, #2
 801962a:	f04f 32ff 	mov.w	r2, #4294967295
 801962e:	2300      	movs	r3, #0
 8019630:	fbb2 f2f6 	udiv	r2, r2, r6
 8019634:	fb06 fc02 	mul.w	ip, r6, r2
 8019638:	ea6f 0c0c 	mvn.w	ip, ip
 801963c:	4618      	mov	r0, r3
 801963e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019642:	2f09      	cmp	r7, #9
 8019644:	d817      	bhi.n	8019676 <_strtoul_l.isra.0+0x96>
 8019646:	463c      	mov	r4, r7
 8019648:	42a6      	cmp	r6, r4
 801964a:	dd23      	ble.n	8019694 <_strtoul_l.isra.0+0xb4>
 801964c:	2b00      	cmp	r3, #0
 801964e:	db1e      	blt.n	801968e <_strtoul_l.isra.0+0xae>
 8019650:	4282      	cmp	r2, r0
 8019652:	d31c      	bcc.n	801968e <_strtoul_l.isra.0+0xae>
 8019654:	d101      	bne.n	801965a <_strtoul_l.isra.0+0x7a>
 8019656:	45a4      	cmp	ip, r4
 8019658:	db19      	blt.n	801968e <_strtoul_l.isra.0+0xae>
 801965a:	fb00 4006 	mla	r0, r0, r6, r4
 801965e:	2301      	movs	r3, #1
 8019660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019664:	e7eb      	b.n	801963e <_strtoul_l.isra.0+0x5e>
 8019666:	462f      	mov	r7, r5
 8019668:	e7c1      	b.n	80195ee <_strtoul_l.isra.0+0xe>
 801966a:	2c2b      	cmp	r4, #43	; 0x2b
 801966c:	bf04      	itt	eq
 801966e:	1cbd      	addeq	r5, r7, #2
 8019670:	787c      	ldrbeq	r4, [r7, #1]
 8019672:	4619      	mov	r1, r3
 8019674:	e7cb      	b.n	801960e <_strtoul_l.isra.0+0x2e>
 8019676:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801967a:	2f19      	cmp	r7, #25
 801967c:	d801      	bhi.n	8019682 <_strtoul_l.isra.0+0xa2>
 801967e:	3c37      	subs	r4, #55	; 0x37
 8019680:	e7e2      	b.n	8019648 <_strtoul_l.isra.0+0x68>
 8019682:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019686:	2f19      	cmp	r7, #25
 8019688:	d804      	bhi.n	8019694 <_strtoul_l.isra.0+0xb4>
 801968a:	3c57      	subs	r4, #87	; 0x57
 801968c:	e7dc      	b.n	8019648 <_strtoul_l.isra.0+0x68>
 801968e:	f04f 33ff 	mov.w	r3, #4294967295
 8019692:	e7e5      	b.n	8019660 <_strtoul_l.isra.0+0x80>
 8019694:	2b00      	cmp	r3, #0
 8019696:	da09      	bge.n	80196ac <_strtoul_l.isra.0+0xcc>
 8019698:	2322      	movs	r3, #34	; 0x22
 801969a:	f8c8 3000 	str.w	r3, [r8]
 801969e:	f04f 30ff 	mov.w	r0, #4294967295
 80196a2:	f1ba 0f00 	cmp.w	sl, #0
 80196a6:	d107      	bne.n	80196b8 <_strtoul_l.isra.0+0xd8>
 80196a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196ac:	b101      	cbz	r1, 80196b0 <_strtoul_l.isra.0+0xd0>
 80196ae:	4240      	negs	r0, r0
 80196b0:	f1ba 0f00 	cmp.w	sl, #0
 80196b4:	d0f8      	beq.n	80196a8 <_strtoul_l.isra.0+0xc8>
 80196b6:	b10b      	cbz	r3, 80196bc <_strtoul_l.isra.0+0xdc>
 80196b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80196bc:	f8ca 9000 	str.w	r9, [sl]
 80196c0:	e7f2      	b.n	80196a8 <_strtoul_l.isra.0+0xc8>
 80196c2:	2430      	movs	r4, #48	; 0x30
 80196c4:	2e00      	cmp	r6, #0
 80196c6:	d1b0      	bne.n	801962a <_strtoul_l.isra.0+0x4a>
 80196c8:	2608      	movs	r6, #8
 80196ca:	e7ae      	b.n	801962a <_strtoul_l.isra.0+0x4a>
 80196cc:	2c30      	cmp	r4, #48	; 0x30
 80196ce:	d0a4      	beq.n	801961a <_strtoul_l.isra.0+0x3a>
 80196d0:	260a      	movs	r6, #10
 80196d2:	e7aa      	b.n	801962a <_strtoul_l.isra.0+0x4a>

080196d4 <_strtoul_r>:
 80196d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196d6:	4c06      	ldr	r4, [pc, #24]	; (80196f0 <_strtoul_r+0x1c>)
 80196d8:	4d06      	ldr	r5, [pc, #24]	; (80196f4 <_strtoul_r+0x20>)
 80196da:	6824      	ldr	r4, [r4, #0]
 80196dc:	6a24      	ldr	r4, [r4, #32]
 80196de:	2c00      	cmp	r4, #0
 80196e0:	bf08      	it	eq
 80196e2:	462c      	moveq	r4, r5
 80196e4:	9400      	str	r4, [sp, #0]
 80196e6:	f7ff ff7b 	bl	80195e0 <_strtoul_l.isra.0>
 80196ea:	b003      	add	sp, #12
 80196ec:	bd30      	pop	{r4, r5, pc}
 80196ee:	bf00      	nop
 80196f0:	2000000c 	.word	0x2000000c
 80196f4:	20000070 	.word	0x20000070

080196f8 <__submore>:
 80196f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196fc:	460c      	mov	r4, r1
 80196fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019704:	4299      	cmp	r1, r3
 8019706:	d11d      	bne.n	8019744 <__submore+0x4c>
 8019708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801970c:	f7ff fa66 	bl	8018bdc <_malloc_r>
 8019710:	b918      	cbnz	r0, 801971a <__submore+0x22>
 8019712:	f04f 30ff 	mov.w	r0, #4294967295
 8019716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801971a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801971e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019720:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019724:	6360      	str	r0, [r4, #52]	; 0x34
 8019726:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801972a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801972e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019732:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019736:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801973a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801973e:	6020      	str	r0, [r4, #0]
 8019740:	2000      	movs	r0, #0
 8019742:	e7e8      	b.n	8019716 <__submore+0x1e>
 8019744:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019746:	0077      	lsls	r7, r6, #1
 8019748:	463a      	mov	r2, r7
 801974a:	f000 f837 	bl	80197bc <_realloc_r>
 801974e:	4605      	mov	r5, r0
 8019750:	2800      	cmp	r0, #0
 8019752:	d0de      	beq.n	8019712 <__submore+0x1a>
 8019754:	eb00 0806 	add.w	r8, r0, r6
 8019758:	4601      	mov	r1, r0
 801975a:	4632      	mov	r2, r6
 801975c:	4640      	mov	r0, r8
 801975e:	f7fb fe8b 	bl	8015478 <memcpy>
 8019762:	f8c4 8000 	str.w	r8, [r4]
 8019766:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801976a:	e7e9      	b.n	8019740 <__submore+0x48>

0801976c <__ascii_wctomb>:
 801976c:	b149      	cbz	r1, 8019782 <__ascii_wctomb+0x16>
 801976e:	2aff      	cmp	r2, #255	; 0xff
 8019770:	bf85      	ittet	hi
 8019772:	238a      	movhi	r3, #138	; 0x8a
 8019774:	6003      	strhi	r3, [r0, #0]
 8019776:	700a      	strbls	r2, [r1, #0]
 8019778:	f04f 30ff 	movhi.w	r0, #4294967295
 801977c:	bf98      	it	ls
 801977e:	2001      	movls	r0, #1
 8019780:	4770      	bx	lr
 8019782:	4608      	mov	r0, r1
 8019784:	4770      	bx	lr

08019786 <memmove>:
 8019786:	4288      	cmp	r0, r1
 8019788:	b510      	push	{r4, lr}
 801978a:	eb01 0302 	add.w	r3, r1, r2
 801978e:	d807      	bhi.n	80197a0 <memmove+0x1a>
 8019790:	1e42      	subs	r2, r0, #1
 8019792:	4299      	cmp	r1, r3
 8019794:	d00a      	beq.n	80197ac <memmove+0x26>
 8019796:	f811 4b01 	ldrb.w	r4, [r1], #1
 801979a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801979e:	e7f8      	b.n	8019792 <memmove+0xc>
 80197a0:	4283      	cmp	r3, r0
 80197a2:	d9f5      	bls.n	8019790 <memmove+0xa>
 80197a4:	1881      	adds	r1, r0, r2
 80197a6:	1ad2      	subs	r2, r2, r3
 80197a8:	42d3      	cmn	r3, r2
 80197aa:	d100      	bne.n	80197ae <memmove+0x28>
 80197ac:	bd10      	pop	{r4, pc}
 80197ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80197b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80197b6:	e7f7      	b.n	80197a8 <memmove+0x22>

080197b8 <__malloc_lock>:
 80197b8:	4770      	bx	lr

080197ba <__malloc_unlock>:
 80197ba:	4770      	bx	lr

080197bc <_realloc_r>:
 80197bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197be:	4607      	mov	r7, r0
 80197c0:	4614      	mov	r4, r2
 80197c2:	460e      	mov	r6, r1
 80197c4:	b921      	cbnz	r1, 80197d0 <_realloc_r+0x14>
 80197c6:	4611      	mov	r1, r2
 80197c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80197cc:	f7ff ba06 	b.w	8018bdc <_malloc_r>
 80197d0:	b922      	cbnz	r2, 80197dc <_realloc_r+0x20>
 80197d2:	f7ff f9b5 	bl	8018b40 <_free_r>
 80197d6:	4625      	mov	r5, r4
 80197d8:	4628      	mov	r0, r5
 80197da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197dc:	f000 f814 	bl	8019808 <_malloc_usable_size_r>
 80197e0:	42a0      	cmp	r0, r4
 80197e2:	d20f      	bcs.n	8019804 <_realloc_r+0x48>
 80197e4:	4621      	mov	r1, r4
 80197e6:	4638      	mov	r0, r7
 80197e8:	f7ff f9f8 	bl	8018bdc <_malloc_r>
 80197ec:	4605      	mov	r5, r0
 80197ee:	2800      	cmp	r0, #0
 80197f0:	d0f2      	beq.n	80197d8 <_realloc_r+0x1c>
 80197f2:	4631      	mov	r1, r6
 80197f4:	4622      	mov	r2, r4
 80197f6:	f7fb fe3f 	bl	8015478 <memcpy>
 80197fa:	4631      	mov	r1, r6
 80197fc:	4638      	mov	r0, r7
 80197fe:	f7ff f99f 	bl	8018b40 <_free_r>
 8019802:	e7e9      	b.n	80197d8 <_realloc_r+0x1c>
 8019804:	4635      	mov	r5, r6
 8019806:	e7e7      	b.n	80197d8 <_realloc_r+0x1c>

08019808 <_malloc_usable_size_r>:
 8019808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801980c:	1f18      	subs	r0, r3, #4
 801980e:	2b00      	cmp	r3, #0
 8019810:	bfbc      	itt	lt
 8019812:	580b      	ldrlt	r3, [r1, r0]
 8019814:	18c0      	addlt	r0, r0, r3
 8019816:	4770      	bx	lr

08019818 <_init>:
 8019818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801981a:	bf00      	nop
 801981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801981e:	bc08      	pop	{r3}
 8019820:	469e      	mov	lr, r3
 8019822:	4770      	bx	lr

08019824 <_fini>:
 8019824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019826:	bf00      	nop
 8019828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801982a:	bc08      	pop	{r3}
 801982c:	469e      	mov	lr, r3
 801982e:	4770      	bx	lr
